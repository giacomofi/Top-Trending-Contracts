['pragma solidity ^0.4.18;\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\t\t\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract WHP is StandardToken {\n', '\t\n', '    // metadata\n', '\tstring public constant name = "WHP";\n', '    string public constant symbol = "WHP";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\t\n', '    address private creator;     \n', '\tmapping (address => uint256) private blackmap;\n', '\tmapping (address => uint256) private releaseamount;\n', '\n', '    modifier onlyCreator() {\n', '    require(msg.sender == creator);\n', '    _;\n', '   }\n', '   \n', '   function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '   }\n', '   \n', '   function addBlackAccount(address _b) public onlyCreator {\n', '    require(_addressNotNull(_b));\n', '    blackmap[_b] = 1;\n', '   }\n', '   \n', '   function clearBlackAccount(address _b) public onlyCreator {\n', '    require(_addressNotNull(_b));\n', '    blackmap[_b] = 0;\n', '   }\n', '   \n', '   function checkBlackAccount(address _b) public returns (uint256) {\n', '       require(_addressNotNull(_b));\n', '       return blackmap[_b];\n', '   }\n', '   \n', '   function setReleaseAmount(address _b, uint256 _a) public onlyCreator {\n', '       require(_addressNotNull(_b));\n', '       require(balances[_b] >= _a);\n', '       releaseamount[_b] = _a;\n', '   }\n', '   \n', '   function setReleaseAmountToCreator(uint256 _a) public onlyCreator {\n', '       balances[creator] += _a;\n', '   }\n', '   \n', '   function checkReleaseAmount(address _b) public returns (uint256) {\n', '       require(_addressNotNull(_b));\n', '       return releaseamount[_b];\n', '   }\n', '  \n', '\n', '    uint256 public amount = 10* 10000 * 10000 * 10**decimals;\n', '\n', '    // constructor\n', '    function WHP() {\n', '\t    creator = msg.sender;\n', '\t\ttotalSupply = amount;\n', '\t\tbalances[creator] = amount;                          \n', '    }\n', '\t\n', '\t\n', '\tfunction transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\t\n', '\t    if(blackmap[msg.sender] != 0){\n', '\t        if(releaseamount[msg.sender] < _value){\n', '\t            return false;\n', '\t        }\n', '\t        else{\n', '\t            releaseamount[msg.sender] -= _value;\n', '\t            balances[msg.sender] -= _value;\n', '\t\t\t    balances[_to] += _value;\n', '\t\t\t    Transfer(msg.sender, _to, _value);\n', '\t\t\t    return true;\n', '\t        }\n', '\t\t}\n', '\t\telse{\n', '\t\t\tbalances[msg.sender] -= _value;\n', '\t\t\tbalances[_to] += _value;\n', '\t\t\tTransfer(msg.sender, _to, _value);\n', '\t\t\treturn true;\n', '\t\t}\n', '        \n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\t\t\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract WHP is StandardToken {\n', '\t\n', '    // metadata\n', '\tstring public constant name = "WHP";\n', '    string public constant symbol = "WHP";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\t\n', '    address private creator;     \n', '\tmapping (address => uint256) private blackmap;\n', '\tmapping (address => uint256) private releaseamount;\n', '\n', '    modifier onlyCreator() {\n', '    require(msg.sender == creator);\n', '    _;\n', '   }\n', '   \n', '   function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '   }\n', '   \n', '   function addBlackAccount(address _b) public onlyCreator {\n', '    require(_addressNotNull(_b));\n', '    blackmap[_b] = 1;\n', '   }\n', '   \n', '   function clearBlackAccount(address _b) public onlyCreator {\n', '    require(_addressNotNull(_b));\n', '    blackmap[_b] = 0;\n', '   }\n', '   \n', '   function checkBlackAccount(address _b) public returns (uint256) {\n', '       require(_addressNotNull(_b));\n', '       return blackmap[_b];\n', '   }\n', '   \n', '   function setReleaseAmount(address _b, uint256 _a) public onlyCreator {\n', '       require(_addressNotNull(_b));\n', '       require(balances[_b] >= _a);\n', '       releaseamount[_b] = _a;\n', '   }\n', '   \n', '   function setReleaseAmountToCreator(uint256 _a) public onlyCreator {\n', '       balances[creator] += _a;\n', '   }\n', '   \n', '   function checkReleaseAmount(address _b) public returns (uint256) {\n', '       require(_addressNotNull(_b));\n', '       return releaseamount[_b];\n', '   }\n', '  \n', '\n', '    uint256 public amount = 10* 10000 * 10000 * 10**decimals;\n', '\n', '    // constructor\n', '    function WHP() {\n', '\t    creator = msg.sender;\n', '\t\ttotalSupply = amount;\n', '\t\tbalances[creator] = amount;                          \n', '    }\n', '\t\n', '\t\n', '\tfunction transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\t\n', '\t    if(blackmap[msg.sender] != 0){\n', '\t        if(releaseamount[msg.sender] < _value){\n', '\t            return false;\n', '\t        }\n', '\t        else{\n', '\t            releaseamount[msg.sender] -= _value;\n', '\t            balances[msg.sender] -= _value;\n', '\t\t\t    balances[_to] += _value;\n', '\t\t\t    Transfer(msg.sender, _to, _value);\n', '\t\t\t    return true;\n', '\t        }\n', '\t\t}\n', '\t\telse{\n', '\t\t\tbalances[msg.sender] -= _value;\n', '\t\t\tbalances[_to] += _value;\n', '\t\t\tTransfer(msg.sender, _to, _value);\n', '\t\t\treturn true;\n', '\t\t}\n', '        \n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '}']
