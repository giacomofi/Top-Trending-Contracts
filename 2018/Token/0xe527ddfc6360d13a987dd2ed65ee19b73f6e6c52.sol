['pragma solidity ^0.4.24;\n', '\n', '// Math operations with safety checks\n', '\n', 'contract SafeMath {\n', '  function safeMathMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeMathDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeMathSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeMathAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '\n', 'contract BicToken is SafeMath{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // Public event on the blockchain to notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // Notifies clients about the burnt amount\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    // Notifies clients about the amount frozen \n', '    event Freeze(address indexed from, uint256 value);\n', '    \n', '    // Notifies clients about the amount unfrozen \n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    constructor(uint256 initialSupply,string tokenName,uint8 decimalUnits,string tokenSymbol ) {\n', '        balanceOf[msg.sender] = initialSupply;  // Gives the creator all initial tokens            \n', '        totalSupply = initialSupply;                    // Update total supply    \n', '        name = tokenName;                                   // Set the token name\n', '        symbol = tokenSymbol;                               // Set the token symbol\n', '        decimals = decimalUnits;                            // Amount of decimals\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    // Send coins\n', '    function transfer(address _to, uint256 _value) validAddress returns (bool success) {\n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);        \n', '        balanceOf[msg.sender] = SafeMath.safeMathSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = SafeMath.safeMathAdd(balanceOf[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);                   \n', '        return true;\n', '    }\n', '\n', '    // Allow other contract to spend some tokens in your behalf \n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        require(_value > 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '       \n', '\n', '    // A contract attempts to get the coins\n', '    function transferFrom(address _from, address _to, uint256 _value) validAddress returns (bool success) {\n', '        require(_value > 0); \n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_from] = SafeMath.safeMathSub(balanceOf[_from], _value);                           \n', '        balanceOf[_to] = SafeMath.safeMathAdd(balanceOf[_to], _value);                             \n', '        allowance[_from][msg.sender] = SafeMath.safeMathSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(_value > 0);\n', '        balanceOf[msg.sender] = SafeMath.safeMathSub(balanceOf[msg.sender], _value);\n', '        totalSupply = SafeMath.safeMathSub(totalSupply,_value);                     \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function freeze(uint256 _value) returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(_value > 0);\n', '        balanceOf[msg.sender] = SafeMath.safeMathSub(balanceOf[msg.sender], _value);                      \n', '        freezeOf[msg.sender] = SafeMath.safeMathAdd(freezeOf[msg.sender], _value);                        \n', '        emit Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function unfreeze(uint256 _value) returns (bool success) {\n', '        require(freezeOf[msg.sender] >= _value);\n', '        require(_value > 0);\n', '        freezeOf[msg.sender] = SafeMath.safeMathSub(freezeOf[msg.sender], _value);                      \n', '        balanceOf[msg.sender] = SafeMath.safeMathAdd(balanceOf[msg.sender], _value);\n', '        emit Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// Math operations with safety checks\n', '\n', 'contract SafeMath {\n', '  function safeMathMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeMathDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeMathSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeMathAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '\n', 'contract BicToken is SafeMath{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // Public event on the blockchain to notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // Notifies clients about the burnt amount\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    // Notifies clients about the amount frozen \n', '    event Freeze(address indexed from, uint256 value);\n', '    \n', '    // Notifies clients about the amount unfrozen \n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    constructor(uint256 initialSupply,string tokenName,uint8 decimalUnits,string tokenSymbol ) {\n', '        balanceOf[msg.sender] = initialSupply;  // Gives the creator all initial tokens            \n', '        totalSupply = initialSupply;                    // Update total supply    \n', '        name = tokenName;                                   // Set the token name\n', '        symbol = tokenSymbol;                               // Set the token symbol\n', '        decimals = decimalUnits;                            // Amount of decimals\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    // Send coins\n', '    function transfer(address _to, uint256 _value) validAddress returns (bool success) {\n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);        \n', '        balanceOf[msg.sender] = SafeMath.safeMathSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = SafeMath.safeMathAdd(balanceOf[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);                   \n', '        return true;\n', '    }\n', '\n', '    // Allow other contract to spend some tokens in your behalf \n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        require(_value > 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '       \n', '\n', '    // A contract attempts to get the coins\n', '    function transferFrom(address _from, address _to, uint256 _value) validAddress returns (bool success) {\n', '        require(_value > 0); \n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        balanceOf[_from] = SafeMath.safeMathSub(balanceOf[_from], _value);                           \n', '        balanceOf[_to] = SafeMath.safeMathAdd(balanceOf[_to], _value);                             \n', '        allowance[_from][msg.sender] = SafeMath.safeMathSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(_value > 0);\n', '        balanceOf[msg.sender] = SafeMath.safeMathSub(balanceOf[msg.sender], _value);\n', '        totalSupply = SafeMath.safeMathSub(totalSupply,_value);                     \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function freeze(uint256 _value) returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(_value > 0);\n', '        balanceOf[msg.sender] = SafeMath.safeMathSub(balanceOf[msg.sender], _value);                      \n', '        freezeOf[msg.sender] = SafeMath.safeMathAdd(freezeOf[msg.sender], _value);                        \n', '        emit Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function unfreeze(uint256 _value) returns (bool success) {\n', '        require(freezeOf[msg.sender] >= _value);\n', '        require(_value > 0);\n', '        freezeOf[msg.sender] = SafeMath.safeMathSub(freezeOf[msg.sender], _value);                      \n', '        balanceOf[msg.sender] = SafeMath.safeMathAdd(balanceOf[msg.sender], _value);\n', '        emit Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }    \n', '}']
