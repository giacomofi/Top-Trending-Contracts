['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * An ideal or perfect society\n', ' */\n', 'contract GreatHarmon is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /* Initializes contract */\n', '    function GreatHarmon() public {\n', '        \n', '    }\n', '\n', '    //领取Basic income的冷却时间, 暂且设定为1天。\n', '    uint public cooldownTime = 1 days;\n', '\n', '    //basicIncome发放限制\n', '    uint public basicIncomeLimit = 10000;\n', '\n', '    //日常发放\n', '    uint public dailySupply = 50;\n', '\n', '    /**\n', '     * @dev 分发基本收入\n', '     */\n', '    function getBasicIncome() public {\n', '        Resident storage _resident = residents[idOf[msg.sender]-1];\n', '        require(_isReady(_resident));\n', '        require(_isUnderLimit());\n', '        require(!frozenAccount[msg.sender]);  \n', '\n', '        balanceOf[msg.sender] += dailySupply;\n', '\n', '        totalSupply = totalSupply.add(dailySupply);\n', '\n', '        _triggerCooldown(_resident);\n', '        GetBasicIncome(idOf[msg.sender]-1, _resident.name, dailySupply, uint32(now));\n', '        Transfer(address(this), msg.sender, dailySupply);\n', '    }\n', '\n', '    function _triggerCooldown(Resident storage _resident) internal {\n', '        _resident.readyTime = uint32(now + cooldownTime);\n', '    }\n', '\n', '    /**\n', '    * @dev BasicIncome 设定为每日领取一次。 领取之后，进入一天的冷却时间。\n', '    * 这里检测是否在冷却周期内。\n', '    */\n', '    function _isReady(Resident storage _resident) internal view returns (bool) {\n', '        return (_resident.readyTime <= now);\n', '    }\n', '\n', '    /**\n', '    * @dev 分发基本收入之前，需检测是否符合发放规则。\n', '    * 大同世界崇尚“按需索取”,贪婪获取是不应该的。\n', '    * 此函数检测居民的当前ghCoin，如果大于系统设定的basicIncomeLimit，\n', '    * 则不能再获取basicIncome。\n', '    */\n', '    function _isUnderLimit() internal view returns (bool) {\n', '        return (balanceOf[msg.sender] <= basicIncomeLimit);\n', '    }\n', '\n', '    //居民加入事件\n', '    event JoinGreatHarmon(uint id, string name, string identity, uint32 date);\n', '    event GetBasicIncome(uint id, string name, uint supply, uint32 date);\n', '\n', '    // 居民\n', '    struct Resident {\n', '        string name;      //姓名\n', '        string identity;  //记录生日、性别等个人信息。类似身份证。\n', '        uint32 prestige;  //声望值，大同世界中，鼓励人们“达则兼济天下”。做更多的好事。将提高声望值。\n', '        uint32 joinDate;  //何时加入。\n', '        uint32 readyTime; //"Basic income system" 的冷却时间。\n', '    }\n', '\n', '    Resident[] public residents;\n', '\n', '    //存储居民id索引\n', '    mapping (address => uint) public idOf;\n', '\n', '    function getResidentNumber() external view returns(uint) {\n', '        return residents.length;\n', '    }\n', '\n', '    /**\n', '    * @dev 加入“大同世界”的唯一入口。\n', '    * 加入“大同世界”的操作,除要消耗支付给以太坊矿工的gas,不需要再任何费用。\n', '    * 但我知道有很多好心人,乐于奉献, 于是这里作为一个payable函数, 你可以再加入“大同世界”的时候,\n', '    * 向这个理想丰满而美好的组织捐赠任意大小的ether,助它更好的成长。\n', '    * @param _name 居民的显示名字\n', '    * @param _identity 各种实名认证之后产生的身份唯一标识.\n', '    * (目前只需传身份证号码，并且非常相信愿意加入“大同世界”的人的行为，没有做太多的认证,\n', '    * 假设这项目有人看好,再做更复杂的认证)\n', '    */\n', '    function joinGreatHarmon(string _name, string _identity) public payable returns(uint) {\n', '        //检测是否重复加入。\n', '        require(idOf[msg.sender] == 0);\n', '        if (msg.value > 0) {\n', '            donateMap[msg.sender] += msg.value;\n', '            Donate(msg.sender, _name, msg.value, "");\n', '        }\n', '        return _createResident(_name, _identity);\n', '    }\n', '\n', '    function _createResident(string _name, string _identity) internal returns(uint) {\n', '        uint id = residents.push(Resident(_name, _identity, 0, uint32(now), uint32(now)));\n', '        idOf[msg.sender] = id;\n', '        JoinGreatHarmon(id, _name, _identity, uint32(now));\n', '        getBasicIncome();\n', '        return id;\n', '    }\n', '\n', '    function withdraw() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function setCooldownTime(uint _cooldownTime) external onlyOwner {\n', '        cooldownTime = _cooldownTime;\n', '    }\n', '\n', '    function setBasicIncomeLimit(uint _basicIncomeLimit) external onlyOwner {\n', '        basicIncomeLimit = _basicIncomeLimit;\n', '    }\n', '\n', '    function setDailySupply(uint _dailySupply) external onlyOwner {\n', '        dailySupply = _dailySupply;\n', '    }\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    \n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenAccount(address target, bool frozen);\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from get Basic Income\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) external onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        FrozenAccount(target, freeze);\n', '    }\n', '\n', '    mapping (address => uint) public donateMap;\n', '\n', '    event Donate(address sender, string name, uint amount, string text);\n', '\n', '    // accept ether donate\n', '    function donate(string _text) payable public {\n', '        if (msg.value > 0) {\n', '            donateMap[msg.sender] += msg.value;\n', '            Resident memory _resident = residents[idOf[msg.sender]-1];\n', '            Donate(msg.sender, _resident.name, msg.value, _text);\n', '        }\n', '    }\n', '\n', '    // token erc20\n', '    // Public variables of the token\n', '    string public name = "Great Harmon Coin";\n', '    string public symbol = "GHC";\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply = 0;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) { \n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '}']