['pragma solidity  ^0.4.23;\n', '\n', '/**\n', ' *  SafeMath <https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol/>\n', ' *  Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' *  Released under the MIT License (MIT)\n', ' */\n', '\n', '/// @title Math operations with safety checks\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner t o transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/// ERC Token Standard #20 Interface (https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md)\n', 'interface IERC20 {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '    function totalSupply() external view returns (uint256);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'interface ISecurityToken {\n', '\n', '\n', '    /**\n', '     * @dev Add a verified address to the Security Token whitelist\n', '     * @param _whitelistAddress Address attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToWhitelist(address _whitelistAddress) public returns (bool success);\n', '\n', '    /**\n', '     * @dev Add verified addresses to the Security Token whitelist\n', '     * @param _whitelistAddresses Array of addresses attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToWhitelistMulti(address[] _whitelistAddresses) external returns (bool success);\n', '\n', '    /**\n', '     * @dev Removes a previosly verified address to the Security Token blacklist\n', '     * @param _blacklistAddress Address being added to the blacklist\n', '     * @return bool success\n', '     */\n', '    function addToBlacklist(address _blacklistAddress) public returns (bool success);\n', '\n', '    /**\n', '     * @dev Removes previously verified addresseses to the Security Token whitelist\n', '     * @param _blacklistAddresses Array of addresses attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToBlacklistMulti(address[] _blacklistAddresses) external returns (bool success);\n', '\n', '    /// Get token decimals\n', '    function decimals() view external returns (uint);\n', '\n', '\n', '    // @notice it will return status of white listing\n', '    // @return true if user is white listed and false if is not\n', '    function isWhiteListed(address _user) external view returns (bool);\n', '}\n', '\n', '// The  Exchange token\n', 'contract SecurityToken is IERC20, Ownable, ISecurityToken {\n', '\n', '    using SafeMath for uint;\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals; // How many decimals to show.\n', '    string public version;\n', '    uint public totalSupply;\n', '    uint public tokenPrice;\n', '    bool public exchangeEnabled;    \n', '    bool public codeExportEnabled;\n', '    address public commissionAddress;           // address to deposit commissions\n', '    uint public deploymentCost;                 // cost of deployment with exchange feature\n', '    uint public tokenOnlyDeploymentCost;        // cost of deployment with basic ERC20 feature\n', '    uint public exchangeEnableCost;             // cost of upgrading existing ERC20 to exchange feature\n', '    uint public codeExportCost;                 // cost of exporting the code\n', '    string public securityISIN;\n', '\n', '\n', '    // Security token shareholders\n', '    struct Shareholder {                        // Structure that contains the data of the shareholders        \n', '        bool allowed;                           // allowed - whether the shareholder is allowed to transfer or recieve the security token       \n', '        uint receivedAmt;\n', '        uint releasedAmt;\n', '        uint vestingDuration;\n', '        uint vestingCliff;\n', '        uint vestingStart;\n', '    }\n', '\n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) public allowed;\n', '    mapping(address => Shareholder) public shareholders; // Mapping that holds the data of the shareholder corresponding to investor address\n', '\n', '\n', '    modifier onlyWhitelisted(address _to) {\n', '        require(shareholders[_to].allowed && shareholders[msg.sender].allowed);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyVested(address _from) {\n', '\n', '        require(availableAmount(_from) > 0);\n', '        _;\n', '    }\n', '\n', '    // The Token constructor     \n', '    constructor (\n', '        uint _initialSupply,\n', '        string _tokenName,\n', '        string _tokenSymbol,\n', '        uint _decimalUnits,        \n', '        string _version,                       \n', '        uint _tokenPrice,\n', '        string _securityISIN\n', '                        ) public payable\n', '    {\n', '\n', '        totalSupply = _initialSupply * (10**_decimalUnits);                                             \n', '        name = _tokenName;          // Set the name for display purposes\n', '        symbol = _tokenSymbol;      // Set the symbol for display purposes\n', '        decimals = _decimalUnits;   // Amount of decimals for display purposes\n', '        version = _version;         // Version of token\n', '        tokenPrice = _tokenPrice;   // Token price in Wei     \n', '        securityISIN = _securityISIN;// ISIN security registration number        \n', '            \n', '        balances[owner] = totalSupply;    \n', '\n', '        deploymentCost = 25e17;             \n', '        tokenOnlyDeploymentCost = 15e17;\n', '        exchangeEnableCost = 15e17;\n', '        codeExportCost = 1e19;   \n', '\n', '        codeExportEnabled = true;\n', '        exchangeEnabled = true;  \n', '            \n', '        commissionAddress = 0x80eFc17CcDC8fE6A625cc4eD1fdaf71fD81A2C99;                                   \n', '        commissionAddress.transfer(msg.value);       \n', '        addToWhitelist(owner);  \n', '\n', '    }\n', '\n', '    event LogTransferSold(address indexed to, uint value);\n', '    event LogTokenExchangeEnabled(address indexed caller, uint exchangeCost);\n', '    event LogTokenExportEnabled(address indexed caller, uint enableCost);\n', '    event LogNewWhitelistedAddress( address indexed shareholder);\n', '    event LogNewBlacklistedAddress(address indexed shareholder);\n', '    event logVestingAllocation(address indexed shareholder, uint amount, uint duration, uint cliff, uint start);\n', '    event logISIN(string isin);\n', '\n', '\n', '\n', '    function updateISIN(string _securityISIN) external onlyOwner() {\n', '\n', '        bytes memory tempISIN = bytes(_securityISIN);\n', '\n', '        require(tempISIN.length > 0);  // ensure that ISIN has been passed\n', '        securityISIN = _securityISIN;// ISIN security registration number  \n', '        emit logISIN(_securityISIN);  \n', '    }\n', '\n', '    function allocateVestedTokens(address _to, uint _value, uint _duration, uint _cliff, uint _vestingStart ) \n', '                                  external onlyWhitelisted(_to) onlyOwner() returns (bool) \n', '    {\n', '\n', '        require(_to != address(0));        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);        \n', '        if (shareholders[_to].receivedAmt == 0) {\n', '            shareholders[_to].vestingDuration = _duration;\n', '            shareholders[_to].vestingCliff = _cliff;\n', '            shareholders[_to].vestingStart = _vestingStart;\n', '        }\n', '        shareholders[_to].receivedAmt = shareholders[_to].receivedAmt.add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        emit logVestingAllocation(_to, _value, _duration, _cliff, _vestingStart);\n', '        return true;\n', '    }\n', '\n', '    function availableAmount(address _from) public view returns (uint256) {                \n', '        \n', '        if (block.timestamp < shareholders[_from].vestingCliff) {            \n', '            return balanceOf(_from).sub(shareholders[_from].receivedAmt);\n', '        } else if (block.timestamp >= shareholders[_from].vestingStart.add(shareholders[_from].vestingDuration)) {\n', '            return balanceOf(_from);\n', '        } else {\n', '            uint totalVestedBalance = shareholders[_from].receivedAmt;\n', '            uint totalAvailableVestedBalance = totalVestedBalance.mul(block.timestamp.sub(shareholders[_from].vestingStart)).div(shareholders[_from].vestingDuration);\n', '            uint lockedBalance = totalVestedBalance - totalAvailableVestedBalance;\n', '            return balanceOf(_from).sub(lockedBalance);\n', '        }\n', '    }\n', '\n', '    // @noice To be called by owner of the contract to enable exchange functionality\n', '    // @param _tokenPrice {uint} cost of token in ETH\n', '    // @return true {bool} if successful\n', '    function enableExchange(uint _tokenPrice) public payable {\n', '        \n', '        require(!exchangeEnabled);\n', '        require(exchangeEnableCost == msg.value);\n', '        exchangeEnabled = true;\n', '        tokenPrice = _tokenPrice;\n', '        commissionAddress.transfer(msg.value);\n', '        emit LogTokenExchangeEnabled(msg.sender, _tokenPrice);                          \n', '    }\n', '\n', '    // @notice to enable code export functionality\n', '    function enableCodeExport() public payable {   \n', '        \n', '        require(!codeExportEnabled);\n', '        require(codeExportCost == msg.value);     \n', '        codeExportEnabled = true;\n', '        commissionAddress.transfer(msg.value);  \n', '        emit LogTokenExportEnabled(msg.sender, msg.value);        \n', '    }\n', '\n', '    // @notice It will send tokens to sender based on the token price    \n', '    function swapTokens() public payable onlyWhitelisted(msg.sender) {     \n', '\n', '        require(exchangeEnabled);   \n', '        uint tokensToSend;\n', '        tokensToSend = (msg.value * (10**decimals)) / tokenPrice; \n', '        require(balances[owner] >= tokensToSend);\n', '        balances[msg.sender] = balances[msg.sender].add(tokensToSend);\n', '        balances[owner] = balances[owner].sub(tokensToSend);\n', '        owner.transfer(msg.value);\n', '        emit Transfer(owner, msg.sender, tokensToSend);\n', '        emit LogTransferSold(msg.sender, tokensToSend);       \n', '    }\n', '\n', '    // @notice will be able to mint tokens in the future\n', '    // @param _target {address} address to which new tokens will be assigned\n', '    // @parm _mintedAmount {uint256} amouont of tokens to mint\n', '    function mintToken(address _target, uint256 _mintedAmount) public onlyWhitelisted(_target) onlyOwner() {        \n', '        \n', '        balances[_target] += _mintedAmount;\n', '        totalSupply += _mintedAmount;\n', '        emit Transfer(0, _target, _mintedAmount);       \n', '    }\n', '  \n', '    // @notice transfer tokens to given address\n', '    // @param _to {address} address or recipient\n', '    // @param _value {uint} amount to transfer\n', '    // @return  {bool} true if successful\n', '    function transfer(address _to, uint _value) external onlyVested(_to) onlyWhitelisted(_to)  returns(bool) {\n', '\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @notice transfer tokens from given address to another address\n', '    // @param _from {address} from whom tokens are transferred\n', '    // @param _to {address} to whom tokens are transferred\n', '    // @param _value {uint} amount of tokens to transfer\n', '    // @return  {bool} true if successful\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '                          external onlyVested(_to)  onlyWhitelisted(_to) returns(bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value); // Check if the sender has enough\n', '        require(_value <= allowed[_from][msg.sender]); // Check if allowed is greater or equal\n', '\n', '        balances[_from] = balances[_from].sub(_value); // Subtract from the sender\n', '        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // adjust allowed\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @notice to query balance of account\n', '    // @return _owner {address} address of user to query balance\n', '    function balanceOf(address _owner) public view returns(uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint _value) external returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // @notice to query of allowance of one user to the other\n', '    // @param _owner {address} of the owner of the account\n', '    // @param _spender {address} of the spender of the account\n', '    // @return remaining {uint} amount of remaining allowance\n', '    function allowance(address _owner, address _spender) external view returns(uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    */\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '     /**\n', '     * @dev Add a verified address to the Security Token whitelist\n', '     * The Issuer can add an address to the whitelist by themselves by\n', '     * creating their own KYC provider and using it to verify the accounts\n', '     * they want to add to the whitelist.\n', '     * @param _whitelistAddress Address attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToWhitelist(address _whitelistAddress) onlyOwner public returns (bool success) {       \n', '        shareholders[_whitelistAddress].allowed = true;\n', '        emit LogNewWhitelistedAddress(_whitelistAddress);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Add verified addresses to the Security Token whitelist\n', '     * @param _whitelistAddresses Array of addresses attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToWhitelistMulti(address[] _whitelistAddresses) onlyOwner external returns (bool success) {\n', '        for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\n', '            addToWhitelist(_whitelistAddresses[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a verified address to the Security Token blacklist\n', '     * @param _blacklistAddress Address being added to the blacklist\n', '     * @return bool success\n', '     */\n', '    function addToBlacklist(address _blacklistAddress) onlyOwner public returns (bool success) {\n', '        require(shareholders[_blacklistAddress].allowed);\n', '        shareholders[_blacklistAddress].allowed = false;\n', '        emit LogNewBlacklistedAddress(_blacklistAddress);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Removes previously verified addresseses to the Security Token whitelist\n', '     * @param _blacklistAddresses Array of addresses attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToBlacklistMulti(address[] _blacklistAddresses) onlyOwner external returns (bool success) {\n', '        for (uint256 i = 0; i < _blacklistAddresses.length; i++) {\n', '            addToBlacklist(_blacklistAddresses[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // @notice it will return status of white listing\n', '    // @return true if user is white listed and false if is not\n', '    function isWhiteListed(address _user) external view returns (bool) {\n', '\n', '        return shareholders[_user].allowed;\n', '    }\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function decimals() external view returns (uint) {\n', '        return decimals;\n', '    }\n', '\n', '}']
['pragma solidity  ^0.4.23;\n', '\n', '/**\n', ' *  SafeMath <https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol/>\n', ' *  Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' *  Released under the MIT License (MIT)\n', ' */\n', '\n', '/// @title Math operations with safety checks\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner t o transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/// ERC Token Standard #20 Interface (https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md)\n', 'interface IERC20 {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '    function totalSupply() external view returns (uint256);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'interface ISecurityToken {\n', '\n', '\n', '    /**\n', '     * @dev Add a verified address to the Security Token whitelist\n', '     * @param _whitelistAddress Address attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToWhitelist(address _whitelistAddress) public returns (bool success);\n', '\n', '    /**\n', '     * @dev Add verified addresses to the Security Token whitelist\n', '     * @param _whitelistAddresses Array of addresses attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToWhitelistMulti(address[] _whitelistAddresses) external returns (bool success);\n', '\n', '    /**\n', '     * @dev Removes a previosly verified address to the Security Token blacklist\n', '     * @param _blacklistAddress Address being added to the blacklist\n', '     * @return bool success\n', '     */\n', '    function addToBlacklist(address _blacklistAddress) public returns (bool success);\n', '\n', '    /**\n', '     * @dev Removes previously verified addresseses to the Security Token whitelist\n', '     * @param _blacklistAddresses Array of addresses attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToBlacklistMulti(address[] _blacklistAddresses) external returns (bool success);\n', '\n', '    /// Get token decimals\n', '    function decimals() view external returns (uint);\n', '\n', '\n', '    // @notice it will return status of white listing\n', '    // @return true if user is white listed and false if is not\n', '    function isWhiteListed(address _user) external view returns (bool);\n', '}\n', '\n', '// The  Exchange token\n', 'contract SecurityToken is IERC20, Ownable, ISecurityToken {\n', '\n', '    using SafeMath for uint;\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals; // How many decimals to show.\n', '    string public version;\n', '    uint public totalSupply;\n', '    uint public tokenPrice;\n', '    bool public exchangeEnabled;    \n', '    bool public codeExportEnabled;\n', '    address public commissionAddress;           // address to deposit commissions\n', '    uint public deploymentCost;                 // cost of deployment with exchange feature\n', '    uint public tokenOnlyDeploymentCost;        // cost of deployment with basic ERC20 feature\n', '    uint public exchangeEnableCost;             // cost of upgrading existing ERC20 to exchange feature\n', '    uint public codeExportCost;                 // cost of exporting the code\n', '    string public securityISIN;\n', '\n', '\n', '    // Security token shareholders\n', '    struct Shareholder {                        // Structure that contains the data of the shareholders        \n', '        bool allowed;                           // allowed - whether the shareholder is allowed to transfer or recieve the security token       \n', '        uint receivedAmt;\n', '        uint releasedAmt;\n', '        uint vestingDuration;\n', '        uint vestingCliff;\n', '        uint vestingStart;\n', '    }\n', '\n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) public allowed;\n', '    mapping(address => Shareholder) public shareholders; // Mapping that holds the data of the shareholder corresponding to investor address\n', '\n', '\n', '    modifier onlyWhitelisted(address _to) {\n', '        require(shareholders[_to].allowed && shareholders[msg.sender].allowed);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyVested(address _from) {\n', '\n', '        require(availableAmount(_from) > 0);\n', '        _;\n', '    }\n', '\n', '    // The Token constructor     \n', '    constructor (\n', '        uint _initialSupply,\n', '        string _tokenName,\n', '        string _tokenSymbol,\n', '        uint _decimalUnits,        \n', '        string _version,                       \n', '        uint _tokenPrice,\n', '        string _securityISIN\n', '                        ) public payable\n', '    {\n', '\n', '        totalSupply = _initialSupply * (10**_decimalUnits);                                             \n', '        name = _tokenName;          // Set the name for display purposes\n', '        symbol = _tokenSymbol;      // Set the symbol for display purposes\n', '        decimals = _decimalUnits;   // Amount of decimals for display purposes\n', '        version = _version;         // Version of token\n', '        tokenPrice = _tokenPrice;   // Token price in Wei     \n', '        securityISIN = _securityISIN;// ISIN security registration number        \n', '            \n', '        balances[owner] = totalSupply;    \n', '\n', '        deploymentCost = 25e17;             \n', '        tokenOnlyDeploymentCost = 15e17;\n', '        exchangeEnableCost = 15e17;\n', '        codeExportCost = 1e19;   \n', '\n', '        codeExportEnabled = true;\n', '        exchangeEnabled = true;  \n', '            \n', '        commissionAddress = 0x80eFc17CcDC8fE6A625cc4eD1fdaf71fD81A2C99;                                   \n', '        commissionAddress.transfer(msg.value);       \n', '        addToWhitelist(owner);  \n', '\n', '    }\n', '\n', '    event LogTransferSold(address indexed to, uint value);\n', '    event LogTokenExchangeEnabled(address indexed caller, uint exchangeCost);\n', '    event LogTokenExportEnabled(address indexed caller, uint enableCost);\n', '    event LogNewWhitelistedAddress( address indexed shareholder);\n', '    event LogNewBlacklistedAddress(address indexed shareholder);\n', '    event logVestingAllocation(address indexed shareholder, uint amount, uint duration, uint cliff, uint start);\n', '    event logISIN(string isin);\n', '\n', '\n', '\n', '    function updateISIN(string _securityISIN) external onlyOwner() {\n', '\n', '        bytes memory tempISIN = bytes(_securityISIN);\n', '\n', '        require(tempISIN.length > 0);  // ensure that ISIN has been passed\n', '        securityISIN = _securityISIN;// ISIN security registration number  \n', '        emit logISIN(_securityISIN);  \n', '    }\n', '\n', '    function allocateVestedTokens(address _to, uint _value, uint _duration, uint _cliff, uint _vestingStart ) \n', '                                  external onlyWhitelisted(_to) onlyOwner() returns (bool) \n', '    {\n', '\n', '        require(_to != address(0));        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);        \n', '        if (shareholders[_to].receivedAmt == 0) {\n', '            shareholders[_to].vestingDuration = _duration;\n', '            shareholders[_to].vestingCliff = _cliff;\n', '            shareholders[_to].vestingStart = _vestingStart;\n', '        }\n', '        shareholders[_to].receivedAmt = shareholders[_to].receivedAmt.add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        emit logVestingAllocation(_to, _value, _duration, _cliff, _vestingStart);\n', '        return true;\n', '    }\n', '\n', '    function availableAmount(address _from) public view returns (uint256) {                \n', '        \n', '        if (block.timestamp < shareholders[_from].vestingCliff) {            \n', '            return balanceOf(_from).sub(shareholders[_from].receivedAmt);\n', '        } else if (block.timestamp >= shareholders[_from].vestingStart.add(shareholders[_from].vestingDuration)) {\n', '            return balanceOf(_from);\n', '        } else {\n', '            uint totalVestedBalance = shareholders[_from].receivedAmt;\n', '            uint totalAvailableVestedBalance = totalVestedBalance.mul(block.timestamp.sub(shareholders[_from].vestingStart)).div(shareholders[_from].vestingDuration);\n', '            uint lockedBalance = totalVestedBalance - totalAvailableVestedBalance;\n', '            return balanceOf(_from).sub(lockedBalance);\n', '        }\n', '    }\n', '\n', '    // @noice To be called by owner of the contract to enable exchange functionality\n', '    // @param _tokenPrice {uint} cost of token in ETH\n', '    // @return true {bool} if successful\n', '    function enableExchange(uint _tokenPrice) public payable {\n', '        \n', '        require(!exchangeEnabled);\n', '        require(exchangeEnableCost == msg.value);\n', '        exchangeEnabled = true;\n', '        tokenPrice = _tokenPrice;\n', '        commissionAddress.transfer(msg.value);\n', '        emit LogTokenExchangeEnabled(msg.sender, _tokenPrice);                          \n', '    }\n', '\n', '    // @notice to enable code export functionality\n', '    function enableCodeExport() public payable {   \n', '        \n', '        require(!codeExportEnabled);\n', '        require(codeExportCost == msg.value);     \n', '        codeExportEnabled = true;\n', '        commissionAddress.transfer(msg.value);  \n', '        emit LogTokenExportEnabled(msg.sender, msg.value);        \n', '    }\n', '\n', '    // @notice It will send tokens to sender based on the token price    \n', '    function swapTokens() public payable onlyWhitelisted(msg.sender) {     \n', '\n', '        require(exchangeEnabled);   \n', '        uint tokensToSend;\n', '        tokensToSend = (msg.value * (10**decimals)) / tokenPrice; \n', '        require(balances[owner] >= tokensToSend);\n', '        balances[msg.sender] = balances[msg.sender].add(tokensToSend);\n', '        balances[owner] = balances[owner].sub(tokensToSend);\n', '        owner.transfer(msg.value);\n', '        emit Transfer(owner, msg.sender, tokensToSend);\n', '        emit LogTransferSold(msg.sender, tokensToSend);       \n', '    }\n', '\n', '    // @notice will be able to mint tokens in the future\n', '    // @param _target {address} address to which new tokens will be assigned\n', '    // @parm _mintedAmount {uint256} amouont of tokens to mint\n', '    function mintToken(address _target, uint256 _mintedAmount) public onlyWhitelisted(_target) onlyOwner() {        \n', '        \n', '        balances[_target] += _mintedAmount;\n', '        totalSupply += _mintedAmount;\n', '        emit Transfer(0, _target, _mintedAmount);       \n', '    }\n', '  \n', '    // @notice transfer tokens to given address\n', '    // @param _to {address} address or recipient\n', '    // @param _value {uint} amount to transfer\n', '    // @return  {bool} true if successful\n', '    function transfer(address _to, uint _value) external onlyVested(_to) onlyWhitelisted(_to)  returns(bool) {\n', '\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @notice transfer tokens from given address to another address\n', '    // @param _from {address} from whom tokens are transferred\n', '    // @param _to {address} to whom tokens are transferred\n', '    // @param _value {uint} amount of tokens to transfer\n', '    // @return  {bool} true if successful\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '                          external onlyVested(_to)  onlyWhitelisted(_to) returns(bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value); // Check if the sender has enough\n', '        require(_value <= allowed[_from][msg.sender]); // Check if allowed is greater or equal\n', '\n', '        balances[_from] = balances[_from].sub(_value); // Subtract from the sender\n', '        balances[_to] = balances[_to].add(_value); // Add the same to the recipient\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // adjust allowed\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @notice to query balance of account\n', '    // @return _owner {address} address of user to query balance\n', '    function balanceOf(address _owner) public view returns(uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint _value) external returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // @notice to query of allowance of one user to the other\n', '    // @param _owner {address} of the owner of the account\n', '    // @param _spender {address} of the spender of the account\n', '    // @return remaining {uint} amount of remaining allowance\n', '    function allowance(address _owner, address _spender) external view returns(uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    */\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '     /**\n', '     * @dev Add a verified address to the Security Token whitelist\n', '     * The Issuer can add an address to the whitelist by themselves by\n', '     * creating their own KYC provider and using it to verify the accounts\n', '     * they want to add to the whitelist.\n', '     * @param _whitelistAddress Address attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToWhitelist(address _whitelistAddress) onlyOwner public returns (bool success) {       \n', '        shareholders[_whitelistAddress].allowed = true;\n', '        emit LogNewWhitelistedAddress(_whitelistAddress);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Add verified addresses to the Security Token whitelist\n', '     * @param _whitelistAddresses Array of addresses attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToWhitelistMulti(address[] _whitelistAddresses) onlyOwner external returns (bool success) {\n', '        for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\n', '            addToWhitelist(_whitelistAddresses[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a verified address to the Security Token blacklist\n', '     * @param _blacklistAddress Address being added to the blacklist\n', '     * @return bool success\n', '     */\n', '    function addToBlacklist(address _blacklistAddress) onlyOwner public returns (bool success) {\n', '        require(shareholders[_blacklistAddress].allowed);\n', '        shareholders[_blacklistAddress].allowed = false;\n', '        emit LogNewBlacklistedAddress(_blacklistAddress);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Removes previously verified addresseses to the Security Token whitelist\n', '     * @param _blacklistAddresses Array of addresses attempting to join ST whitelist\n', '     * @return bool success\n', '     */\n', '    function addToBlacklistMulti(address[] _blacklistAddresses) onlyOwner external returns (bool success) {\n', '        for (uint256 i = 0; i < _blacklistAddresses.length; i++) {\n', '            addToBlacklist(_blacklistAddresses[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // @notice it will return status of white listing\n', '    // @return true if user is white listed and false if is not\n', '    function isWhiteListed(address _user) external view returns (bool) {\n', '\n', '        return shareholders[_user].allowed;\n', '    }\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function decimals() external view returns (uint) {\n', '        return decimals;\n', '    }\n', '\n', '}']
