['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\utils\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract AtomicSwappableToken is StandardToken {\n', '  struct HashLockContract {\n', '    address sender;\n', '    address receiver;\n', '    uint amount;\n', '    bytes32 hashlock;\n', '    uint timelock;\n', '    bytes32 secret;\n', '    States state;\n', '  }\n', '\n', '  enum States {\n', '    INVALID,\n', '    OPEN,\n', '    CLOSED,\n', '    REFUNDED\n', '  }\n', '\n', '  mapping (bytes32 => HashLockContract) private contracts;\n', '\n', '  modifier futureTimelock(uint _time) {\n', '    // only requirement is the timelock time is after the last blocktime (now).\n', '    // probably want something a bit further in the future then this.\n', '    // but this is still a useful sanity check:\n', '    require(_time > now);\n', '    _;\n', '}\n', '\n', '  modifier contractExists(bytes32 _contractId) {\n', '    require(_contractExists(_contractId));\n', '    _;\n', '  }\n', '\n', '  modifier hashlockMatches(bytes32 _contractId, bytes32 _secret) {\n', '    require(contracts[_contractId].hashlock == keccak256(_secret));\n', '    _;\n', '  }\n', '\n', '  modifier closable(bytes32 _contractId) {\n', '    require(contracts[_contractId].state == States.OPEN);\n', '    require(contracts[_contractId].timelock > now);\n', '    _;\n', '  }\n', '\n', '  modifier refundable(bytes32 _contractId) {\n', '    require(contracts[_contractId].state == States.OPEN);\n', '    require(contracts[_contractId].timelock <= now);\n', '    _;\n', '  }\n', '\n', '  event NewHashLockContract (\n', '    bytes32 indexed contractId,\n', '    address indexed sender,\n', '    address indexed receiver,\n', '    uint amount,\n', '    bytes32 hashlock,\n', '    uint timelock\n', '  );\n', '\n', '  event SwapClosed(bytes32 indexed contractId);\n', '  event SwapRefunded(bytes32 indexed contractId);\n', '\n', '\n', '  function open (\n', '    address _receiver,\n', '    bytes32 _hashlock,\n', '    uint _timelock,\n', '    uint _amount\n', '  ) public\n', '    futureTimelock(_timelock)\n', '    returns (bytes32 contractId)\n', '  {\n', '    contractId = keccak256 (\n', '      msg.sender,\n', '      _receiver,\n', '      _amount,\n', '      _hashlock,\n', '      _timelock\n', '    );\n', '\n', '    // the new contract must not exist\n', '    require(!_contractExists(contractId));\n', '\n', '    // transfer token to this contract\n', '    require(transfer(address(this), _amount));\n', '\n', '    contracts[contractId] = HashLockContract(\n', '      msg.sender,\n', '      _receiver,\n', '      _amount,\n', '      _hashlock,\n', '      _timelock,\n', '      0x0,\n', '      States.OPEN\n', '    );\n', '\n', '    emit NewHashLockContract(contractId, msg.sender, _receiver, _amount, _hashlock, _timelock);\n', '  }\n', '\n', '  function close(bytes32 _contractId, bytes32 _secret)\n', '    public\n', '    contractExists(_contractId)\n', '    hashlockMatches(_contractId, _secret)\n', '    closable(_contractId)\n', '    returns (bool)\n', '  {\n', '    HashLockContract storage c = contracts[_contractId];\n', '    c.secret = _secret;\n', '    c.state = States.CLOSED;\n', '    require(this.transfer(c.receiver, c.amount));\n', '    emit SwapClosed(_contractId);\n', '    return true;\n', '  }\n', '\n', '  function refund(bytes32 _contractId)\n', '    public\n', '    contractExists(_contractId)\n', '    refundable(_contractId)\n', '    returns (bool)\n', '  {\n', '    HashLockContract storage c = contracts[_contractId];\n', '    c.state = States.REFUNDED;\n', '    require(this.transfer(c.sender, c.amount));\n', '    emit SwapRefunded(_contractId);\n', '    return true;\n', '  }\n', '\n', '  function _contractExists(bytes32 _contractId) internal view returns (bool exists) {\n', '    exists = (contracts[_contractId].sender != address(0));\n', '  }\n', '\n', '  function checkContract(bytes32 _contractId)\n', '    public\n', '    view\n', '    contractExists(_contractId)\n', '    returns (\n', '      address sender,\n', '      address receiver,\n', '      uint amount,\n', '      bytes32 hashlock,\n', '      uint timelock,\n', '      bytes32 secret\n', '    )\n', '  {\n', '    HashLockContract memory c = contracts[_contractId];\n', '    return (\n', '      c.sender,\n', '      c.receiver,\n', '      c.amount,\n', '      c.hashlock,\n', '      c.timelock,\n', '      c.secret\n', '    );\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract TokenReceiver {\n', '  function receiveApproval(address from, uint amount, address tokenAddress, bytes data) public;\n', '}\n', '\n', '\n', '\n', 'contract MagicKeys is AtomicSwappableToken, Ownable {\n', '\n', '  string public name;                //The shoes name: e.g. MB\n', '  string public symbol;              //The shoes symbol: e.g. MB\n', '  uint8 public decimals;             //Number of decimals of the smallest unit\n', '\n', '  constructor (\n', '    string _name,\n', '    string _symbol\n', '  ) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = 18;  // set as default\n', '  }\n', '\n', '\n', '  function _mint(address _to, uint _amount) internal returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '    _mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function approveAndCall(address _spender, uint _amount, bytes _data) public {\n', '    if(approve(_spender, _amount)) {\n', '      TokenReceiver(_spender).receiveApproval(msg.sender, _amount, address(this), _data);\n', '    }\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\utils\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract AtomicSwappableToken is StandardToken {\n', '  struct HashLockContract {\n', '    address sender;\n', '    address receiver;\n', '    uint amount;\n', '    bytes32 hashlock;\n', '    uint timelock;\n', '    bytes32 secret;\n', '    States state;\n', '  }\n', '\n', '  enum States {\n', '    INVALID,\n', '    OPEN,\n', '    CLOSED,\n', '    REFUNDED\n', '  }\n', '\n', '  mapping (bytes32 => HashLockContract) private contracts;\n', '\n', '  modifier futureTimelock(uint _time) {\n', '    // only requirement is the timelock time is after the last blocktime (now).\n', '    // probably want something a bit further in the future then this.\n', '    // but this is still a useful sanity check:\n', '    require(_time > now);\n', '    _;\n', '}\n', '\n', '  modifier contractExists(bytes32 _contractId) {\n', '    require(_contractExists(_contractId));\n', '    _;\n', '  }\n', '\n', '  modifier hashlockMatches(bytes32 _contractId, bytes32 _secret) {\n', '    require(contracts[_contractId].hashlock == keccak256(_secret));\n', '    _;\n', '  }\n', '\n', '  modifier closable(bytes32 _contractId) {\n', '    require(contracts[_contractId].state == States.OPEN);\n', '    require(contracts[_contractId].timelock > now);\n', '    _;\n', '  }\n', '\n', '  modifier refundable(bytes32 _contractId) {\n', '    require(contracts[_contractId].state == States.OPEN);\n', '    require(contracts[_contractId].timelock <= now);\n', '    _;\n', '  }\n', '\n', '  event NewHashLockContract (\n', '    bytes32 indexed contractId,\n', '    address indexed sender,\n', '    address indexed receiver,\n', '    uint amount,\n', '    bytes32 hashlock,\n', '    uint timelock\n', '  );\n', '\n', '  event SwapClosed(bytes32 indexed contractId);\n', '  event SwapRefunded(bytes32 indexed contractId);\n', '\n', '\n', '  function open (\n', '    address _receiver,\n', '    bytes32 _hashlock,\n', '    uint _timelock,\n', '    uint _amount\n', '  ) public\n', '    futureTimelock(_timelock)\n', '    returns (bytes32 contractId)\n', '  {\n', '    contractId = keccak256 (\n', '      msg.sender,\n', '      _receiver,\n', '      _amount,\n', '      _hashlock,\n', '      _timelock\n', '    );\n', '\n', '    // the new contract must not exist\n', '    require(!_contractExists(contractId));\n', '\n', '    // transfer token to this contract\n', '    require(transfer(address(this), _amount));\n', '\n', '    contracts[contractId] = HashLockContract(\n', '      msg.sender,\n', '      _receiver,\n', '      _amount,\n', '      _hashlock,\n', '      _timelock,\n', '      0x0,\n', '      States.OPEN\n', '    );\n', '\n', '    emit NewHashLockContract(contractId, msg.sender, _receiver, _amount, _hashlock, _timelock);\n', '  }\n', '\n', '  function close(bytes32 _contractId, bytes32 _secret)\n', '    public\n', '    contractExists(_contractId)\n', '    hashlockMatches(_contractId, _secret)\n', '    closable(_contractId)\n', '    returns (bool)\n', '  {\n', '    HashLockContract storage c = contracts[_contractId];\n', '    c.secret = _secret;\n', '    c.state = States.CLOSED;\n', '    require(this.transfer(c.receiver, c.amount));\n', '    emit SwapClosed(_contractId);\n', '    return true;\n', '  }\n', '\n', '  function refund(bytes32 _contractId)\n', '    public\n', '    contractExists(_contractId)\n', '    refundable(_contractId)\n', '    returns (bool)\n', '  {\n', '    HashLockContract storage c = contracts[_contractId];\n', '    c.state = States.REFUNDED;\n', '    require(this.transfer(c.sender, c.amount));\n', '    emit SwapRefunded(_contractId);\n', '    return true;\n', '  }\n', '\n', '  function _contractExists(bytes32 _contractId) internal view returns (bool exists) {\n', '    exists = (contracts[_contractId].sender != address(0));\n', '  }\n', '\n', '  function checkContract(bytes32 _contractId)\n', '    public\n', '    view\n', '    contractExists(_contractId)\n', '    returns (\n', '      address sender,\n', '      address receiver,\n', '      uint amount,\n', '      bytes32 hashlock,\n', '      uint timelock,\n', '      bytes32 secret\n', '    )\n', '  {\n', '    HashLockContract memory c = contracts[_contractId];\n', '    return (\n', '      c.sender,\n', '      c.receiver,\n', '      c.amount,\n', '      c.hashlock,\n', '      c.timelock,\n', '      c.secret\n', '    );\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract TokenReceiver {\n', '  function receiveApproval(address from, uint amount, address tokenAddress, bytes data) public;\n', '}\n', '\n', '\n', '\n', 'contract MagicKeys is AtomicSwappableToken, Ownable {\n', '\n', '  string public name;                //The shoes name: e.g. MB\n', '  string public symbol;              //The shoes symbol: e.g. MB\n', '  uint8 public decimals;             //Number of decimals of the smallest unit\n', '\n', '  constructor (\n', '    string _name,\n', '    string _symbol\n', '  ) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = 18;  // set as default\n', '  }\n', '\n', '\n', '  function _mint(address _to, uint _amount) internal returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '    _mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function approveAndCall(address _spender, uint _amount, bytes _data) public {\n', '    if(approve(_spender, _amount)) {\n', '      TokenReceiver(_spender).receiveApproval(msg.sender, _amount, address(this), _data);\n', '    }\n', '  }\n', '\n', '}']
