['/**\n', ' *  ATMX Ameritoken contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', '*/\n', '\n', 'pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract Ameritoken {\n', "    string public constant name = 'Ameritoken';                                 // Public variables of the token\n", "    string public constant symbol = 'ATMX';                                     \n", '    uint256 public constant decimals = 0;                                       // 0 decimals \n', "    string public constant version = 'ATMX-1.1';                                // Public Version\n", '                                                                                // Corrected glitch of sending double qty to receiver. \n', '                                                                                // Fix provided by https://ethereum.stackexchange.com/users/19510/smarx\n', '                                              \n', '    uint256 private constant totalTokens = 41000000;                            // Fourty One million coins, NO FORK\n', '                                                                                // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;                              // (ERC20)\n', '    mapping (address => mapping (address => uint256)) public allowance;         // (ERC20)\n', '\n', '                                                                                // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);    \n', ' \n', '    function Ameritoken () public {\n', '        balanceOf[msg.sender] = totalTokens;                                    // Give the creator (Ameritoken, LLC) all initial tokens.\n', '    }\n', '\n', '  // See ERC20\n', '    function totalSupply() constant returns (uint256) {                         // Returns the Total of Ameritokens\n', '        return totalTokens;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);                                                    // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(balanceOf[_from] >= _value);                                    // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);                      // Check for overflows\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];              // Save this for an assertion in the future\n', '        balanceOf[_from] -= _value;                                             // Subtract from the sender\n', '        balanceOf[_to] += _value;                                               // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);          // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '    }\n', '\n', '   \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (balanceOf[msg.sender] >= _value) {\n', '            _transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', ' \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '    if (balanceOf[_from] >= _value && allowance[_from][msg.sender] >= _value) {\n', '      balanceOf[_from] -= _value;\n', '      allowance[_from][msg.sender] -= _value;\n', '      balanceOf[_to] += _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}']