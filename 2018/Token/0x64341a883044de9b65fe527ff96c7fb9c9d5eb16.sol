['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = _a * _b;\n', '        assert(c / _a == _b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = _a / _b;\n', '        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '        return _a / _b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        assert(_b <= _a);\n', '        return _a - _b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        c = _a + _b;\n', '        assert(c >= _a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) internal balances;\n', '\n', '    uint256 internal totalSupply_;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract CXYToken is StandardToken {\n', '    address public admin;\n', '    string public name = "CXYToken";\n', '    string public symbol = "CXY";\n', '    uint8 public decimals = 8;\n', '    uint256 public INITIAL_SUPPLY = 100000000000000000;\n', '\n', '    mapping (address => bool) public frozenAccount; //无限期冻结的账户\n', '    mapping (address => uint256) public frozenTimestamp; // 有限期冻结的账户\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        admin = msg.sender;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '    }\n', '\n', '    function() public payable {\n', '        require(msg.value > 0);\n', '    }\n', '\n', '    function changeAdmin(\n', '        address _newAdmin\n', '    )\n', '    public returns (bool)  {\n', '        require(msg.sender == admin);\n', '        require(_newAdmin != address(0));\n', '        balances[_newAdmin] = balances[_newAdmin].add(balances[admin]);\n', '        balances[admin] = 0;\n', '        admin = _newAdmin;\n', '        return true;\n', '    }\n', '\n', '    function generateToken(\n', '        address _target,\n', '        uint256 _amount\n', '    )\n', '    public returns (bool)  {\n', '        require(msg.sender == admin);\n', '        require(_target != address(0));\n', '        balances[_target] = balances[_target].add(_amount);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        INITIAL_SUPPLY = totalSupply_;\n', '        return true;\n', '    }\n', '\n', '    function withdraw (\n', '        uint256 _amount\n', '    )\n', '    public returns (bool) {\n', '        require(msg.sender == admin);\n', '        msg.sender.transfer(_amount);\n', '        return true;\n', '    }\n', '\n', '    function freeze(\n', '        address _target,\n', '        bool _freeze\n', '    )\n', '    public returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_target != address(0));\n', '        frozenAccount[_target] = _freeze;\n', '        return true;\n', '    }\n', '\n', '    function freezeWithTimestamp(\n', '        address _target,\n', '        uint256 _timestamp\n', '    )\n', '    public returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_target != address(0));\n', '        frozenTimestamp[_target] = _timestamp;\n', '        return true;\n', '    }\n', '\n', '    function multiFreeze(\n', '        address[] _targets,\n', '        bool[] _freezes\n', '    )\n', '    public returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_targets.length == _freezes.length);\n', '        uint256 len = _targets.length;\n', '        require(len > 0);\n', '        for (uint256 i = 0; i < len; i = i.add(1)) {\n', '            address _target = _targets[i];\n', '            require(_target != address(0));\n', '            bool _freeze = _freezes[i];\n', '            frozenAccount[_target] = _freeze;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function multiFreezeWithTimestamp(\n', '        address[] _targets,\n', '        uint256[] _timestamps\n', '    )\n', '    public returns (bool) {\n', '        require(msg.sender == admin);\n', '        require(_targets.length == _timestamps.length);\n', '        uint256 len = _targets.length;\n', '        require(len > 0);\n', '        for (uint256 i = 0; i < len; i = i.add(1)) {\n', '            address _target = _targets[i];\n', '            require(_target != address(0));\n', '            uint256 _timestamp = _timestamps[i];\n', '            frozenTimestamp[_target] = _timestamp;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function multiTransfer(\n', '        address[] _tos,\n', '        uint256[] _values\n', '    )\n', '    public returns (bool) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(now > frozenTimestamp[msg.sender]);\n', '        require(_tos.length == _values.length);\n', '        uint256 len = _tos.length;\n', '        require(len > 0);\n', '        uint256 amount = 0;\n', '        for (uint256 i = 0; i < len; i = i.add(1)) {\n', '            amount = amount.add(_values[i]);\n', '        }\n', '        require(amount <= balances[msg.sender]);\n', '        for (uint256 j = 0; j < len; j = j.add(1)) {\n', '            address _to = _tos[j];\n', '            require(_to != address(0));\n', '            balances[_to] = balances[_to].add(_values[j]);\n', '            balances[msg.sender] = balances[msg.sender].sub(_values[j]);\n', '            emit Transfer(msg.sender, _to, _values[j]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public returns (bool) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(now > frozenTimestamp[msg.sender]);\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public returns (bool)\n', '    {\n', '        require(!frozenAccount[_from]);\n', '        require(now > frozenTimestamp[msg.sender]);\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value\n', '    )\n', '    public returns (bool) {\n', '        require(_value <= balances[_spender]);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value)\n', '    public returns (bool) {\n', '        require(_value <= balances[msg.sender]);   // Check if the sender has enough\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);            // Subtract from the sender\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        INITIAL_SUPPLY = totalSupply_;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function getFrozenTimestamp(\n', '        address _target\n', '    )\n', '    public view returns (uint256) {\n', '        require(_target != address(0));\n', '        return frozenTimestamp[_target];\n', '    }\n', '\n', '    function getFrozenAccount(\n', '        address _target\n', '    )\n', '    public view returns (bool) {\n', '        require(_target != address(0));\n', '        return frozenAccount[_target];\n', '    }\n', '\n', '    function getBalance(address _owner)\n', '    public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function setName (\n', '        string _value\n', '    )\n', '    public returns (bool) {\n', '        require(msg.sender == admin);\n', '        name = _value;\n', '        return true;\n', '    }\n', '\n', '    function setSymbol (\n', '        string _value\n', '    )\n', '    public returns (bool) {\n', '        require(msg.sender == admin);\n', '        symbol = _value;\n', '        return true;\n', '    }\n', '\n', '    function kill()\n', '    public {\n', '        require(msg.sender == admin);\n', '        selfdestruct(admin);\n', '    }\n', '\n', '}']