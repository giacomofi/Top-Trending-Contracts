['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20TokenInterface\n', ' * @dev Token contract interface for external use\n', ' */\n', 'contract ERC20TokenInterface {\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '}\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract Admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '\n', '    /**\n', '    * @dev Contract constructor, define initial administrator\n', '    */\n', '    constructor() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit AdminedEvent(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != address(0));\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event TransferAdminship(address newAdminister);\n', '    event AdminedEvent(address administer);\n', '\n', '}\n', '\n', 'contract LockableToken is Admined {\n', '\n', '    event LockStatus(address _target, uint _timeStamp);\n', '\n', '    mapping (address => uint) internal locked; //public need to be reviewed\n', '    bool internal globalLock = true;\n', '\n', '    /**\n', '    * @notice _target - address you want to lock until _timeStamp - unix time\n', '    */\n', '    function setLocked(address _target, uint _timeStamp) public onlyAdmin returns (bool) {\n', '        locked[_target]=_timeStamp;\n', '        emit LockStatus(_target, _timeStamp);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice function allows admin to unlock tokens on _target address\n', '    */\n', '    function unLock(address _target) public onlyAdmin returns (bool) {\n', '        locked[_target] = 0;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Allow admin to unlock everything\n', '    */\n', '    function AllUnLock() public onlyAdmin returns (bool) {\n', '        globalLock = false;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Allow admin to lock everything\n', '    */\n', '    function AllLock() public onlyAdmin returns (bool) {\n', '        globalLock = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Return state of globalLock\n', '    */\n', '    function isGlobalLock() public view returns (bool) {\n', '        return globalLock;\n', '    }\n', '\n', '    /**\n', '    * @notice Getter returns false if tokens are available and true if\n', '    *               unavailable\n', '    */\n', '    function isLocked(address _target) public view returns (bool) {\n', '        if(locked[_target] > now){\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is LockableToken {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  constructor() internal {\n', '    emit Unpause();\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '   function pause() onlyAdmin whenNotPaused public {\n', '     paused = true;\n', '     emit Pause();\n', '   }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyAdmin whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath by OpenZeppelin (partially)\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', '* @title ERC20Token\n', '* @notice Token definition contract\n', '*/\n', 'contract ERC20Token is ERC20TokenInterface,  Admined, Pausable { //Standard definition of an ERC20Token\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '    mapping (address => bool) frozen; //A mapping of all frozen status\n', '\n', '    /**\n', '    * @dev Get the balance of an specified address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 value) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(frozen[msg.sender]==false);\n', '        if (globalLock == true) {\n', '            require(locked[msg.sender] <= now, &#39;Tokens locked as single&#39;);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token from an address to another specified address using allowance\n', '    * @param _from The address where token comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(frozen[_from]==false);\n', '        if (globalLock == true) {\n', '            require(locked[msg.sender] <= now, &#39;Tokens locked as single&#39;);\n', '        }\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Assign allowance to an specified address to use the owner balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Frozen account.\n', '    * @param _target The address to being frozen.\n', '    * @param _flag The frozen status to set.\n', '    */\n', '    function setFrozen(address _target,bool _flag) onlyAdmin whenNotPaused public {\n', '        frozen[_target]=_flag;\n', '        emit FrozenStatus(_target,_flag);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event FrozenStatus(address _target,bool _flag);\n', '\n', '}\n', '/**\n', '* @title ERC20 Token minimal interface for external tokens handle\n', '*/\n', 'contract Token {\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', '/**\n', '* @title AXEL Token\n', '* @notice AXEL Token creation.\n', '* @dev ERC20 Token compliant\n', '*/\n', 'contract AxelToken is ERC20Token {\n', '\n', '    string public name = &#39;AXEL-AIRDROP&#39;;\n', '    uint8 public decimals = 18;\n', '    string public symbol = &#39;AXEL&#39;;\n', '    string public version = &#39;1&#39;;\n', '\n', '    /**\n', '    * @notice token contructor.  250000000\n', '    */\n', '    constructor() public {\n', '        //totalSupply = 50000000000 * 10 ** uint256(decimals); //50.000.000.000 tokens initial supply;\n', '        totalSupply = 56601700 * 10 ** uint256(decimals); //50.000.000.000 tokens initial supply;\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(0, msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract\n', '    */\n', '    function externalTokensRecovery(Token _address) onlyAdmin public {\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\n', '    }\n', '\n', '    /**\n', '      Allow transfers of tokens in groups of addresses\n', '    */\n', '    function sendBatches(address[] _addrs, uint256[] tokensValue) onlyAdmin public {\n', '      require(_addrs.length == tokensValue.length);\n', '      for(uint256 i = 0; i < _addrs.length; i++) {\n', '        require(transfer(_addrs[i], tokensValue[i]));\n', '        require(setLocked(_addrs[i], 1561766400)); // Locked for 06/29/2019\n', '      }\n', '    }\n', '\n', '    /**\n', '      Allow the admin to burn tokens\n', '    */\n', '    function burn(uint256 _value) onlyAdmin whenNotPaused public {\n', '      require(_value <= balances[msg.sender]);\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      totalSupply = totalSupply.sub(_value);\n', '\n', '      emit Burn(msg.sender, _value);\n', '      emit Transfer(msg.sender, address(0), _value);\n', '    }\n', '\n', '    /**\n', '    * @notice this contract will revert on direct non-function calls, also it&#39;s not payable\n', '    * @dev Function to handle callback calls to contract\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20TokenInterface\n', ' * @dev Token contract interface for external use\n', ' */\n', 'contract ERC20TokenInterface {\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '}\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract Admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '\n', '    /**\n', '    * @dev Contract constructor, define initial administrator\n', '    */\n', '    constructor() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit AdminedEvent(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != address(0));\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event TransferAdminship(address newAdminister);\n', '    event AdminedEvent(address administer);\n', '\n', '}\n', '\n', 'contract LockableToken is Admined {\n', '\n', '    event LockStatus(address _target, uint _timeStamp);\n', '\n', '    mapping (address => uint) internal locked; //public need to be reviewed\n', '    bool internal globalLock = true;\n', '\n', '    /**\n', '    * @notice _target - address you want to lock until _timeStamp - unix time\n', '    */\n', '    function setLocked(address _target, uint _timeStamp) public onlyAdmin returns (bool) {\n', '        locked[_target]=_timeStamp;\n', '        emit LockStatus(_target, _timeStamp);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice function allows admin to unlock tokens on _target address\n', '    */\n', '    function unLock(address _target) public onlyAdmin returns (bool) {\n', '        locked[_target] = 0;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Allow admin to unlock everything\n', '    */\n', '    function AllUnLock() public onlyAdmin returns (bool) {\n', '        globalLock = false;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Allow admin to lock everything\n', '    */\n', '    function AllLock() public onlyAdmin returns (bool) {\n', '        globalLock = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Return state of globalLock\n', '    */\n', '    function isGlobalLock() public view returns (bool) {\n', '        return globalLock;\n', '    }\n', '\n', '    /**\n', '    * @notice Getter returns false if tokens are available and true if\n', '    *               unavailable\n', '    */\n', '    function isLocked(address _target) public view returns (bool) {\n', '        if(locked[_target] > now){\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is LockableToken {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  constructor() internal {\n', '    emit Unpause();\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '   function pause() onlyAdmin whenNotPaused public {\n', '     paused = true;\n', '     emit Pause();\n', '   }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyAdmin whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath by OpenZeppelin (partially)\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', '* @title ERC20Token\n', '* @notice Token definition contract\n', '*/\n', 'contract ERC20Token is ERC20TokenInterface,  Admined, Pausable { //Standard definition of an ERC20Token\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '    mapping (address => bool) frozen; //A mapping of all frozen status\n', '\n', '    /**\n', '    * @dev Get the balance of an specified address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 value) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(frozen[msg.sender]==false);\n', '        if (globalLock == true) {\n', "            require(locked[msg.sender] <= now, 'Tokens locked as single');\n", '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token from an address to another specified address using allowance\n', '    * @param _from The address where token comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(frozen[_from]==false);\n', '        if (globalLock == true) {\n', "            require(locked[msg.sender] <= now, 'Tokens locked as single');\n", '        }\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Assign allowance to an specified address to use the owner balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Frozen account.\n', '    * @param _target The address to being frozen.\n', '    * @param _flag The frozen status to set.\n', '    */\n', '    function setFrozen(address _target,bool _flag) onlyAdmin whenNotPaused public {\n', '        frozen[_target]=_flag;\n', '        emit FrozenStatus(_target,_flag);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event FrozenStatus(address _target,bool _flag);\n', '\n', '}\n', '/**\n', '* @title ERC20 Token minimal interface for external tokens handle\n', '*/\n', 'contract Token {\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', '/**\n', '* @title AXEL Token\n', '* @notice AXEL Token creation.\n', '* @dev ERC20 Token compliant\n', '*/\n', 'contract AxelToken is ERC20Token {\n', '\n', "    string public name = 'AXEL-AIRDROP';\n", '    uint8 public decimals = 18;\n', "    string public symbol = 'AXEL';\n", "    string public version = '1';\n", '\n', '    /**\n', '    * @notice token contructor.  250000000\n', '    */\n', '    constructor() public {\n', '        //totalSupply = 50000000000 * 10 ** uint256(decimals); //50.000.000.000 tokens initial supply;\n', '        totalSupply = 56601700 * 10 ** uint256(decimals); //50.000.000.000 tokens initial supply;\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(0, msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract\n', '    */\n', '    function externalTokensRecovery(Token _address) onlyAdmin public {\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\n', '    }\n', '\n', '    /**\n', '      Allow transfers of tokens in groups of addresses\n', '    */\n', '    function sendBatches(address[] _addrs, uint256[] tokensValue) onlyAdmin public {\n', '      require(_addrs.length == tokensValue.length);\n', '      for(uint256 i = 0; i < _addrs.length; i++) {\n', '        require(transfer(_addrs[i], tokensValue[i]));\n', '        require(setLocked(_addrs[i], 1561766400)); // Locked for 06/29/2019\n', '      }\n', '    }\n', '\n', '    /**\n', '      Allow the admin to burn tokens\n', '    */\n', '    function burn(uint256 _value) onlyAdmin whenNotPaused public {\n', '      require(_value <= balances[msg.sender]);\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      totalSupply = totalSupply.sub(_value);\n', '\n', '      emit Burn(msg.sender, _value);\n', '      emit Transfer(msg.sender, address(0), _value);\n', '    }\n', '\n', '    /**\n', "    * @notice this contract will revert on direct non-function calls, also it's not payable\n", '    * @dev Function to handle callback calls to contract\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '}']
