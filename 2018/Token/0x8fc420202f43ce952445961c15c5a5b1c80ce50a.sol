['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Business Fund Contract\n', ' */\n', 'contract BusinessFund is Ownable {\n', '    ERC20Basic public vnetToken;\n', '\n', '    event Donate(address indexed _from, uint256 _amount);\n', '\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor(ERC20Basic _token) public {\n', '        vnetToken = _token;\n', '    }\n', '\n', '    /**\n', '     * @dev Sending eth to this contract will be considered as a donation\n', '     */\n', '    function () public payable {\n', '        emit Donate(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Send VNET Token\n', '     */\n', '    function sendVNET(address _to, uint256 _amount) external onlyOwner {\n', '        assert(vnetToken.transfer(_to, _amount));\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue compatible ERC20Basic Token\n', '     *\n', '     * @param _token ERC20Basic The address of the token contract\n', '     */\n', '    function rescueTokens(ERC20Basic _token) external onlyOwner {\n', '        uint256 balance = _token.balanceOf(this);\n', '        assert(_token.transfer(owner, balance));\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw Ether\n', '     */\n', '    function withdrawEther() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Business Fund Contract\n', ' */\n', 'contract BusinessFund is Ownable {\n', '    ERC20Basic public vnetToken;\n', '\n', '    event Donate(address indexed _from, uint256 _amount);\n', '\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor(ERC20Basic _token) public {\n', '        vnetToken = _token;\n', '    }\n', '\n', '    /**\n', '     * @dev Sending eth to this contract will be considered as a donation\n', '     */\n', '    function () public payable {\n', '        emit Donate(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Send VNET Token\n', '     */\n', '    function sendVNET(address _to, uint256 _amount) external onlyOwner {\n', '        assert(vnetToken.transfer(_to, _amount));\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue compatible ERC20Basic Token\n', '     *\n', '     * @param _token ERC20Basic The address of the token contract\n', '     */\n', '    function rescueTokens(ERC20Basic _token) external onlyOwner {\n', '        uint256 balance = _token.balanceOf(this);\n', '        assert(_token.transfer(owner, balance));\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw Ether\n', '     */\n', '    function withdrawEther() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}']
