['pragma solidity ^0.4.19;\n', 'contract tokenRecipient { function receiveApproval(address from, uint256 value, address token, bytes extraData) public; }\n', 'contract PGM_Coin\n', '  { \n', '     /* Variables  */\n', '    string  public name;                                                        // name  of contract\n', '    string  public symbol;                                                      // symbol of contract\n', '    uint8   public decimals;                                                    // how many decimals to keep , 18 is best \n', '    uint256 public totalSupply;                                                 // how many tokens to create\n', '    uint256 public remaining;                                                   // how many tokens has left\n', '    uint    public ethRate;                                                     // current rate of ether\n', '    address public owner;                                                       // contract creator\n', '    uint256 public amountCollected;                                             // how much funds has been collected\n', '    uint    public icoStatus;                                                   // allow / disallow online purchase\n', '    uint    public icoTokenPrice;                                               // token price, start with 10 cents\n', '    address public benAddress;                                                  // funds withdraw address\n', '    address public bkaddress;                                                   \n', '    uint    public allowTransferToken;                                          // allow / disallow token transfer for members\n', '    \n', '     /* Array  */\n', '    mapping (address => uint256) public balanceOf;                              // array of all balances\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '    \n', '    /* Events  */\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event TransferSell(address indexed from, address indexed to, uint256 value, string typex); // only for ico sales\n', '    \n', '\n', '     /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function PGM_Coin() public\n', '    {\n', '      totalSupply = 1000000000000000000000000000;                                 // as the decimals are 18, we add 18 zero after total supply, as all values are stored in wei\n', '      owner =  msg.sender;                                                      // Set owner of contract\n', '      balanceOf[owner] = totalSupply;                                           // Give the creator all initial tokens\n', '       name = "PGM Coin";                                                     // Set the name for display purposes\n', '      symbol = "PGM";                                                          // Set the symbol for display purposes\n', '      decimals = 18;                                                            // Amount of decimals for display purposes\n', '      remaining = totalSupply;                                                  // How many tokens are left\n', '      ethRate = 1100;                                                            // default token price\n', '      icoStatus = 1;                                                            // default ico status\n', '      icoTokenPrice = 50;                                                       // values are in cents\n', '      benAddress = 0x4532828EC057e6cFa04a42b153d74B345084C4C2;                  // funds withdraw address\n', '      bkaddress  = 0x1D38b496176bDaB78D430cebf25B2Fe413d3BF84;                   \n', '      allowTransferToken = 0;                                                   // default set to disable, it will be enable after ICO is over\n', '    }\n', '\n', '   modifier onlyOwner()\n', '    {\n', '        require((msg.sender == owner) || (msg.sender ==  bkaddress));\n', '        _;\n', '    }\n', '\n', '\n', '    function () public payable                                                  // called when ether is send to contract\n', '    {\n', '    }    \n', '    \n', '    function sellOffline(address rec_address,uint256 token_amount) public onlyOwner \n', '    {\n', '        if (remaining > 0)\n', '        {\n', '            uint finalTokens =  (token_amount  * (10 ** 18));              \n', '            if(finalTokens < remaining)\n', '                {\n', '                    remaining = remaining - finalTokens;\n', '                    _transfer(owner,rec_address, finalTokens);    \n', '                    TransferSell(owner, rec_address, finalTokens,&#39;Offline&#39;);\n', '                }\n', '            else\n', '                {\n', '                    revert();\n', '                }\n', '        }\n', '        else\n', '        {\n', '            revert();\n', '        }        \n', '    }\n', '    \n', '    function getEthRate() onlyOwner public constant returns  (uint)            // Get current rate of ether \n', '    {\n', '        return ethRate;\n', '    }\n', '\n', '    \n', '    function getConBal() onlyOwner public constant returns  (uint)            // Get  Balance \n', '    {\n', '        return this.balance;\n', '    }    \n', '    \n', '    function setEthRate (uint newEthRate) public  onlyOwner                    // Set ether price\n', '    {\n', '        ethRate = newEthRate;\n', '    } \n', '\n', '\n', '    function getTokenPrice() onlyOwner public constant returns  (uint)         // Get current token price\n', '    {\n', '        return icoTokenPrice;\n', '    }\n', '    \n', '    function setTokenPrice (uint newTokenRate) public  onlyOwner               // Set one token price\n', '    {\n', '        icoTokenPrice = newTokenRate;\n', '    }     \n', '    \n', '    \n', '    function setTransferStatus (uint status) public  onlyOwner                 // Set transfer status\n', '    {\n', '        allowTransferToken = status;\n', '    }   \n', '    \n', '    function changeIcoStatus (uint8 statx)  public onlyOwner                   // Change ICO Status\n', '    {\n', '        icoStatus = statx;\n', '    } \n', '    \n', '\n', '    function withdraw(uint amountWith) public onlyOwner                        // withdraw partical amount\n', '        {\n', '            if((msg.sender == owner) || (msg.sender ==  bkaddress))\n', '            {\n', '                benAddress.transfer(amountWith);\n', '            }\n', '            else\n', '            {\n', '                revert();\n', '            }\n', '        }\n', '\n', '    function withdraw_all() public onlyOwner                                   // call to withdraw all available balance\n', '        {\n', '            if((msg.sender == owner) || (msg.sender ==  bkaddress) )\n', '            {\n', '                var amountWith = this.balance - 10000000000000000;\n', '                benAddress.transfer(amountWith);\n', '            }\n', '            else\n', '            {\n', '                revert();\n', '            }\n', '        }\n', '\n', '    function mintToken(uint256 tokensToMint) public onlyOwner \n', '        {\n', '            if(tokensToMint > 0)\n', '            {\n', '                var totalTokenToMint = tokensToMint * (10 ** 18);\n', '                balanceOf[owner] += totalTokenToMint;\n', '                totalSupply += totalTokenToMint;\n', '                Transfer(0, owner, totalTokenToMint);\n', '            }\n', '        }\n', '\t\t\n', '\n', '\t /* Admin Trasfer  */\n', '\t function adm_trasfer(address _from,address _to, uint256 _value)  public onlyOwner\n', '\t\t  {\n', '\t\t\t  _transfer(_from, _to, _value);\n', '\t\t  }\n', '\t\t\n', '\n', '    function freezeAccount(address target, bool freeze) public onlyOwner \n', '        {\n', '            frozenAccount[target] = freeze;\n', '            FrozenFunds(target, freeze);\n', '        }\n', '            \n', '\n', '    function getCollectedAmount() onlyOwner public constant returns (uint256 balance) \n', '        {\n', '            return amountCollected;\n', '        }        \n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) \n', '        {\n', '            return balanceOf[_owner];\n', '        }\n', '\n', '    function totalSupply() private constant returns (uint256 tsupply) \n', '        {\n', '            tsupply = totalSupply;\n', '        }    \n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner \n', '        { \n', '            balanceOf[owner] = 0;                        \n', '            balanceOf[newOwner] = remaining;               \n', '            owner = newOwner; \n', '        }        \n', '\n', '  /* Internal transfer, only can be called by this contract */\n', '  function _transfer(address _from, address _to, uint _value) internal \n', '      {\n', '          if(allowTransferToken == 1 || _from == owner )\n', '          {\n', '              require(!frozenAccount[_from]);                                   // Prevent transfer from frozenfunds\n', '              require (_to != 0x0);                                             // Prevent transfer to 0x0 address. Use burn() instead\n', '              require (balanceOf[_from] > _value);                              // Check if the sender has enough\n', '              require (balanceOf[_to] + _value > balanceOf[_to]);               // Check for overflows\n', '              balanceOf[_from] -= _value;                                       // Subtract from the sender\n', '              balanceOf[_to] += _value;                                         // Add to the recipient\n', '              Transfer(_from, _to, _value);                                     // raise event\n', '          }\n', '          else\n', '          {\n', '               revert();\n', '          }\n', '      }\n', '\n', '  function transfer(address _to, uint256 _value)  public\n', '      {\n', '          _transfer(msg.sender, _to, _value);\n', '      }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) \n', '      {\n', '          require (_value < allowance[_from][msg.sender]);                      // Check allowance\n', '          allowance[_from][msg.sender] -= _value;\n', '          _transfer(_from, _to, _value);\n', '          return true;\n', '      }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success) \n', '      {\n', '          allowance[msg.sender][_spender] = _value;\n', '          return true;\n', '      }\n', '\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success)\n', '      {\n', '          tokenRecipient spender = tokenRecipient(_spender);\n', '          if (approve(_spender, _value)) {\n', '              spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '              return true;\n', '          }\n', '      }        \n', '\n', '  function burn(uint256 _value) public returns (bool success) \n', '      {\n', '          require (balanceOf[msg.sender] > _value);                             // Check if the sender has enough\n', '          balanceOf[msg.sender] -= _value;                                      // Subtract from the sender\n', '          totalSupply -= _value;                                                // Updates totalSupply\n', '          Burn(msg.sender, _value);\n', '          return true;\n', '      }\n', '\n', '  function burnFrom(address _from, uint256 _value) public returns (bool success) \n', '      {\n', '          require(balanceOf[_from] >= _value);                                  // Check if the targeted balance is enough\n', '          require(_value <= allowance[_from][msg.sender]);                      // Check allowance\n', '          balanceOf[_from] -= _value;                                           // Subtract from the targeted balance\n', '          allowance[_from][msg.sender] -= _value;                               // Subtract from the sender&#39;s allowance\n', '          totalSupply -= _value;                                                // Update totalSupply\n', '          Burn(_from, _value);\n', '          return true;\n', '      }\n', '} // end of contract']