['pragma solidity^0.4.21;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public;\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract KTBaseToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 totalSupply_;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public{\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        totalSupply_ = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value);\n', '        require(balances[_to].add(_value) > balances[_to]);\n', '\n', '\n', '        uint256 previousBalances = balances[_from].add(balances[_to]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        assert(balances[_from].add(balances[_to]) == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender]);     // Check allowance\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract PO8Token is KTBaseToken("PO8 Token", "PO8", 18, 10000000000000000000000000000), Ownable {\n', '\n', '    uint256 internal privateToken = 1250000000000000000000000000;\n', '    uint256 internal preSaleToken;\n', '    uint256 internal crowdSaleToken;\n', '    uint256 internal bountyToken;\n', '    uint256 internal foundationToken;\n', '    address public founderAddress;\n', '\n', '    mapping (address => bool) public approvedAccount;\n', '    event UnFrozenFunds(address target, bool unfrozen);\n', '\n', '    constructor() public {\n', '        founderAddress = address(0xF84476284887028a7d5341f8f1127154718652B5);\n', '        balances[founderAddress] = totalSupply_;\n', '        emit Transfer(address(0), founderAddress, totalSupply_);\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != address(0));                               \n', '        require (balances[_from] >= _value);               \n', '        require (balances[_to].add(_value) >= balances[_to]); \n', '        require(approvedAccount[_from]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);                  \n', '        balances[_to] = balances[_to].add(_value);                  \n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approvedAccount(address target, bool approval) public onlyOwner {\n', '        approvedAccount[target] = approval;\n', '        emit UnFrozenFunds(target, approval);\n', '    }\n', '}\n', '\n', 'contract PO8PrivateSale is Ownable{\n', '    using SafeMath for uint256;\n', '\n', '    PO8Token public token;\n', '    address public wallet;\n', '    uint256 public currentRate;\n', '    uint256 public limitTokenForSale;\n', '\n', '    event ChangeRate(address indexed who, uint256 newrate);\n', '\n', '    constructor() public {\n', '        currentRate = 75000;\n', '        wallet = address(0xF84476284887028a7d5341f8f1127154718652B5); //address of founder\n', '        limitTokenForSale = 1250000000;\n', '        token = PO8Token(0x7a00F353C4117f28fE50A1C2a43856B73Cc60e4D);// address of PO8 Token\n', '    }\n', '\n', '    function changeRate(uint256 newrate) public onlyOwner{\n', '        require(newrate > 0);\n', '        currentRate = newrate;\n', '\n', '        emit ChangeRate(msg.sender, newrate);\n', '    }\n', '\n', '    function () public payable {\n', '        assert(msg.value >= 100 ether);\n', '        \n', '        uint256 tokens = currentRate.mul(msg.value);\n', '        token.transfer(msg.sender, tokens);        \n', '        wallet.transfer(msg.value);       \n', '    }  \n', '}']