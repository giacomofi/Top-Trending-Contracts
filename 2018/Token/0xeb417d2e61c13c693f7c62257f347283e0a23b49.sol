['pragma solidity 0.4.25;\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/PumaPayToken.sol\n', '\n', '/// PumaPayToken inherits from MintableToken, which in turn inherits from StandardToken.\n', '/// Super is used to bypass the original function signature and include the whenNotMinting modifier.\n', 'contract PumaPayToken is MintableToken {\n', '\n', '    string public name = "PumaPay"; \n', '    string public symbol = "PMA";\n', '    uint8 public decimals = 18;\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    /// This modifier will be used to disable all ERC20 functionalities during the minting process.\n', '    modifier whenNotMinting() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /// @dev transfer token for a specified address\n', '    /// @param _to address The address to transfer to.\n', '    /// @param _value uint256 The amount to be transferred.\n', '    /// @return success bool Calling super.transfer and returns true if successful.\n', '    function transfer(address _to, uint256 _value) public whenNotMinting returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /// @dev Transfer tokens from one address to another.\n', '    /// @param _from address The address which you want to send tokens from.\n', '    /// @param _to address The address which you want to transfer to.\n', '    /// @param _value uint256 the amount of tokens to be transferred.\n', '    /// @return success bool Calling super.transferFrom and returns true if successful.\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotMinting returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/PumaPayPullPayment.sol\n', '\n', '/// @title PumaPay Pull Payment - Contract that facilitates our pull payment protocol\n', '/// @author PumaPay Dev Team - <developers@pumapay.io>\n', 'contract PumaPayPullPayment is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /// ===============================================================================================================\n', '    ///                                      Events\n', '    /// ===============================================================================================================\n', '\n', '    event LogExecutorAdded(address executor);\n', '    event LogExecutorRemoved(address executor);\n', '    event LogPaymentRegistered(address clientAddress, address beneficiaryAddress, string paymentID);\n', '    event LogPaymentCancelled(address clientAddress, address beneficiaryAddress, string paymentID);\n', '    event LogPullPaymentExecuted(address clientAddress, address beneficiaryAddress, string paymentID);\n', '    event LogSetExchangeRate(string currency, uint256 exchangeRate);\n', '\n', '    /// ===============================================================================================================\n', '    ///                                      Constants\n', '    /// ===============================================================================================================\n', '\n', '    uint256 constant private DECIMAL_FIXER = 10 ** 10;    /// 1e^10 - This transforms the Rate from decimals to uint256\n', '    uint256 constant private FIAT_TO_CENT_FIXER = 100;    /// Fiat currencies have 100 cents in 1 basic monetary unit.\n', '    uint256 constant private ONE_ETHER = 1 ether;         /// PumaPay token has 18 decimals - same as one ETHER\n', '    uint256 constant private MINIMUM_AMOUNT_OF_ETH_FOR_OPARATORS = 0.01 ether; /// minimum amount of ETHER the owner/executor should have\n', '    uint256 constant private OVERFLOW_LIMITER_NUMBER = 10 ** 20; /// 1e^20 - This number is used to prevent numeric overflows\n', '\n', '    /// ===============================================================================================================\n', '    ///                                      Members\n', '    /// ===============================================================================================================\n', '\n', '    PumaPayToken public token;\n', '\n', '    mapping(string => uint256) private exchangeRates;\n', '    mapping(address => bool) public executors;\n', '    mapping(address => mapping(address => PullPayment)) public pullPayments;\n', '\n', '    struct PullPayment {\n', '        string merchantID;                      /// ID of the merchant\n', '        string paymentID;                       /// ID of the payment\n', "        string currency;                        /// 3-letter abbr i.e. 'EUR' / 'USD' etc.\n", '        uint256 initialPaymentAmountInCents;    /// initial payment amount in fiat in cents\n', '        uint256 fiatAmountInCents;              /// payment amount in fiat in cents\n', '        uint256 frequency;                      /// how often merchant can pull - in seconds\n', '        uint256 numberOfPayments;               /// amount of pull payments merchant can make\n', '        uint256 startTimestamp;                 /// when subscription starts - in seconds\n', '        uint256 nextPaymentTimestamp;           /// timestamp of next payment\n', '        uint256 lastPaymentTimestamp;           /// timestamp of last payment\n', '        uint256 cancelTimestamp;                /// timestamp the payment was cancelled\n', '    }\n', '\n', '    /// ===============================================================================================================\n', '    ///                                      Modifiers\n', '    /// ===============================================================================================================\n', '    modifier isExecutor() {\n', '        require(executors[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier executorExists(address _executor) {\n', '        require(executors[_executor]);\n', '        _;\n', '    }\n', '\n', '    modifier executorDoesNotExists(address _executor) {\n', '        require(!executors[_executor]);\n', '        _;\n', '    }\n', '\n', '    modifier paymentExists(address _client, address _beneficiary) {\n', '        require(doesPaymentExist(_client, _beneficiary));\n', '        _;\n', '    }\n', '\n', '    modifier paymentNotCancelled(address _client, address _beneficiary) {\n', '        require(pullPayments[_client][_beneficiary].cancelTimestamp == 0);\n', '        _;\n', '    }\n', '\n', '    modifier isValidPullPaymentRequest(address _client, address _beneficiary, string _paymentID) {\n', '        require(\n', '            (pullPayments[_client][_beneficiary].initialPaymentAmountInCents > 0 ||\n', '            (now >= pullPayments[_client][_beneficiary].startTimestamp &&\n', '            now >= pullPayments[_client][_beneficiary].nextPaymentTimestamp)\n', '            )\n', '            &&\n', '            pullPayments[_client][_beneficiary].numberOfPayments > 0 &&\n', '        (pullPayments[_client][_beneficiary].cancelTimestamp == 0 ||\n', '        pullPayments[_client][_beneficiary].cancelTimestamp > pullPayments[_client][_beneficiary].nextPaymentTimestamp) &&\n', '        keccak256(\n', '            abi.encodePacked(pullPayments[_client][_beneficiary].paymentID)\n', '        ) == keccak256(abi.encodePacked(_paymentID))\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier isValidDeletionRequest(string paymentID, address client, address beneficiary) {\n', '        require(\n', '            beneficiary != address(0) &&\n', '            client != address(0) &&\n', '            bytes(paymentID).length != 0\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier isValidAddress(address _address) {\n', '        require(_address != address(0));\n', '        _;\n', '    }\n', '\n', '    /// ===============================================================================================================\n', '    ///                                      Constructor\n', '    /// ===============================================================================================================\n', '\n', '    /// @dev Contract constructor - sets the token address that the contract facilitates.\n', '    /// @param _token Token Address.\n', '    constructor (PumaPayToken _token)\n', '    public\n', '    {\n', '        require(_token != address(0));\n', '        token = _token;\n', '    }\n', '\n', '    // @notice Will receive any eth sent to the contract\n', '    function() external payable {\n', '    }\n', '\n', '    /// ===============================================================================================================\n', '    ///                                      Public Functions - Owner Only\n', '    /// ===============================================================================================================\n', '\n', '    /// @dev Adds a new executor. - can be executed only by the onwer. \n', '    /// When adding a new executor 1 ETH is tranferred to allow the executor to pay for gas.\n', '    /// The balance of the owner is also checked and if funding is needed 1 ETH is transferred.\n', '    /// @param _executor - address of the executor which cannot be zero address.\n', '    function addExecutor(address _executor)\n', '    public\n', '    onlyOwner\n', '    isValidAddress(_executor)\n', '    executorDoesNotExists(_executor)\n', '    {\n', '        _executor.transfer(0.25 ether);\n', '        executors[_executor] = true;\n', '\n', '        if (isFundingNeeded(owner)) {\n', '            owner.transfer(0.5 ether);\n', '        }\n', '\n', '        emit LogExecutorAdded(_executor);\n', '    }\n', '\n', '    /// @dev Removes a new executor. - can be executed only by the onwer.\n', '    /// The balance of the owner is checked and if funding is needed 1 ETH is transferred.\n', '    /// @param _executor - address of the executor which cannot be zero address.\n', '    function removeExecutor(address _executor)\n', '    public\n', '    onlyOwner\n', '    isValidAddress(_executor)\n', '    executorExists(_executor)\n', '    {\n', '        executors[_executor] = false;\n', '        if (isFundingNeeded(owner)) {\n', '            owner.transfer(0.5 ether);\n', '        }\n', '        emit LogExecutorRemoved(_executor);\n', '    }\n', '\n', '    /// @dev Sets the exchange rate for a currency. - can be executed only by the onwer.\n', "    /// Emits 'LogSetExchangeRate' with the currency and the updated rate.\n", '    /// The balance of the owner is checked and if funding is needed 1 ETH is transferred.\n', '    /// @param _currency - address of the executor which cannot be zero address\n', '    /// @param _rate - address of the executor which cannot be zero address\n', '    function setRate(string _currency, uint256 _rate)\n', '    public\n', '    onlyOwner\n', '    returns (bool) {\n', '        exchangeRates[_currency] = _rate;\n', '        emit LogSetExchangeRate(_currency, _rate);\n', '\n', '        if (isFundingNeeded(owner)) {\n', '            owner.transfer(0.5 ether);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /// ===============================================================================================================\n', '    ///                                      Public Functions - Executors Only\n', '    /// ===============================================================================================================\n', '\n', '    /// @dev Registers a new pull payment to the PumaPay Pull Payment Contract - The registration can be executed only by one of the executors of the PumaPay Pull Payment Contract\n', '    /// and the PumaPay Pull Payment Contract checks that the pull payment has been singed by the client of the account.\n', '    /// The balance of the executor (msg.sender) is checked and if funding is needed 1 ETH is transferred.\n', "    /// Emits 'LogPaymentRegistered' with client address, beneficiary address and paymentID.\n", '    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\n', '    /// @param r - R output of ECDSA signature.\n', '    /// @param s - S output of ECDSA signature.\n', '    /// @param _merchantID - ID of the merchant.\n', '    /// @param _paymentID - ID of the payment.\n', '    /// @param _client - client address that is linked to this pull payment.\n', '    /// @param _beneficiary - address that is allowed to execute this pull payment.\n', "    /// @param _currency - currency of the payment / 3-letter abbr i.e. 'EUR'.\n", '    /// @param _fiatAmountInCents - payment amount in fiat in cents.\n', '    /// @param _frequency - how often merchant can pull - in seconds.\n', '    /// @param _numberOfPayments - amount of pull payments merchant can make\n', '    /// @param _startTimestamp - when subscription starts - in seconds.\n', '    function registerPullPayment(\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s,\n', '        string _merchantID,\n', '        string _paymentID,\n', '        address _client,\n', '        address _beneficiary,\n', '        string _currency,\n', '        uint256 _initialPaymentAmountInCents,\n', '        uint256 _fiatAmountInCents,\n', '        uint256 _frequency,\n', '        uint256 _numberOfPayments,\n', '        uint256 _startTimestamp\n', '    )\n', '    public\n', '    isExecutor()\n', '    {\n', '        require(\n', '            bytes(_paymentID).length > 0 &&\n', '            bytes(_currency).length > 0 &&\n', '            _client != address(0) &&\n', '            _beneficiary != address(0) &&\n', '            _fiatAmountInCents > 0 &&\n', '            _frequency > 0 &&\n', '            _frequency < OVERFLOW_LIMITER_NUMBER &&\n', '            _numberOfPayments > 0 &&\n', '            _startTimestamp > 0 &&\n', '            _startTimestamp < OVERFLOW_LIMITER_NUMBER\n', '        );\n', '\n', '        pullPayments[_client][_beneficiary].currency = _currency;\n', '        pullPayments[_client][_beneficiary].initialPaymentAmountInCents = _initialPaymentAmountInCents;\n', '        pullPayments[_client][_beneficiary].fiatAmountInCents = _fiatAmountInCents;\n', '        pullPayments[_client][_beneficiary].frequency = _frequency;\n', '        pullPayments[_client][_beneficiary].startTimestamp = _startTimestamp;\n', '        pullPayments[_client][_beneficiary].numberOfPayments = _numberOfPayments;\n', '\n', '        require(isValidRegistration(v, r, s, _client, _beneficiary, pullPayments[_client][_beneficiary]));\n', '\n', '        pullPayments[_client][_beneficiary].merchantID = _merchantID;\n', '        pullPayments[_client][_beneficiary].paymentID = _paymentID;\n', '        pullPayments[_client][_beneficiary].nextPaymentTimestamp = _startTimestamp;\n', '        pullPayments[_client][_beneficiary].lastPaymentTimestamp = 0;\n', '        pullPayments[_client][_beneficiary].cancelTimestamp = 0;\n', '\n', '        if (isFundingNeeded(msg.sender)) {\n', '            msg.sender.transfer(0.5 ether);\n', '        }\n', '\n', '        emit LogPaymentRegistered(_client, _beneficiary, _paymentID);\n', '    }\n', '\n', '    /// @dev Deletes a pull payment for a beneficiary - The deletion needs can be executed only by one of the executors of the PumaPay Pull Payment Contract\n', '    /// and the PumaPay Pull Payment Contract checks that the beneficiary and the paymentID have been singed by the client of the account.\n', '    /// This method sets the cancellation of the pull payment in the pull payments array for this beneficiary specified.\n', '    /// The balance of the executor (msg.sender) is checked and if funding is needed 1 ETH is transferred.\n', "    /// Emits 'LogPaymentCancelled' with beneficiary address and paymentID.\n", '    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\n', '    /// @param r - R output of ECDSA signature.\n', '    /// @param s - S output of ECDSA signature.\n', '    /// @param _paymentID - ID of the payment.\n', '    /// @param _client - client address that is linked to this pull payment.\n', '    /// @param _beneficiary - address that is allowed to execute this pull payment.\n', '    function deletePullPayment(\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s,\n', '        string _paymentID,\n', '        address _client,\n', '        address _beneficiary\n', '    )\n', '    public\n', '    isExecutor()\n', '    paymentExists(_client, _beneficiary)\n', '    paymentNotCancelled(_client, _beneficiary)\n', '    isValidDeletionRequest(_paymentID, _client, _beneficiary)\n', '    {\n', '        require(isValidDeletion(v, r, s, _paymentID, _client, _beneficiary));\n', '\n', '        pullPayments[_client][_beneficiary].cancelTimestamp = now;\n', '\n', '        if (isFundingNeeded(msg.sender)) {\n', '            msg.sender.transfer(0.5 ether);\n', '        }\n', '\n', '        emit LogPaymentCancelled(_client, _beneficiary, _paymentID);\n', '    }\n', '\n', '    /// ===============================================================================================================\n', '    ///                                      Public Functions\n', '    /// ===============================================================================================================\n', '\n', '    /// @dev Executes a pull payment for the msg.sender - The pull payment should exist and the payment request\n', '    /// should be valid in terms of when it can be executed.\n', "    /// Emits 'LogPullPaymentExecuted' with client address, msg.sender as the beneficiary address and the paymentID.\n", '    /// Use Case 1: Single/Recurring Fixed Pull Payment (initialPaymentAmountInCents == 0 )\n', '    /// ------------------------------------------------\n', '    /// We calculate the amount in PMA using the rate for the currency specified in the pull payment\n', "    /// and the 'fiatAmountInCents' and we transfer from the client account the amount in PMA.\n", '    /// After execution we set the last payment timestamp to NOW, the next payment timestamp is incremented by\n', '    /// the frequency and the number of payments is decresed by 1.\n', '    /// Use Case 2: Recurring Fixed Pull Payment with initial fee (initialPaymentAmountInCents > 0)\n', '    /// ------------------------------------------------------------------------------------------------\n', '    /// We calculate the amount in PMA using the rate for the currency specified in the pull payment\n', "    /// and the 'initialPaymentAmountInCents' and we transfer from the client account the amount in PMA.\n", "    /// After execution we set the last payment timestamp to NOW and the 'initialPaymentAmountInCents to ZERO.\n", '    /// @param _client - address of the client from which the msg.sender requires to pull funds.\n', '    function executePullPayment(address _client, string _paymentID)\n', '    public\n', '    paymentExists(_client, msg.sender)\n', '    isValidPullPaymentRequest(_client, msg.sender, _paymentID)\n', '    {\n', '        uint256 amountInPMA;\n', '        if (pullPayments[_client][msg.sender].initialPaymentAmountInCents > 0) {\n', '            amountInPMA = calculatePMAFromFiat(pullPayments[_client][msg.sender].initialPaymentAmountInCents, pullPayments[_client][msg.sender].currency);\n', '            pullPayments[_client][msg.sender].initialPaymentAmountInCents = 0;\n', '        } else {\n', '            amountInPMA = calculatePMAFromFiat(pullPayments[_client][msg.sender].fiatAmountInCents, pullPayments[_client][msg.sender].currency);\n', '\n', '            pullPayments[_client][msg.sender].nextPaymentTimestamp = pullPayments[_client][msg.sender].nextPaymentTimestamp + pullPayments[_client][msg.sender].frequency;\n', '            pullPayments[_client][msg.sender].numberOfPayments = pullPayments[_client][msg.sender].numberOfPayments - 1;\n', '        }\n', '        pullPayments[_client][msg.sender].lastPaymentTimestamp = now;\n', '        token.transferFrom(_client, msg.sender, amountInPMA);\n', '\n', '        emit LogPullPaymentExecuted(_client, msg.sender, pullPayments[_client][msg.sender].paymentID);\n', '    }\n', '\n', '    function getRate(string _currency) public view returns (uint256) {\n', '        return exchangeRates[_currency];\n', '    }\n', '\n', '    /// ===============================================================================================================\n', '    ///                                      Internal Functions\n', '    /// ===============================================================================================================\n', '\n', '    /// @dev Calculates the PMA Rate for the fiat currency specified - The rate is set every 10 minutes by our PMA server\n', '    /// for the currencies specified in the smart contract. \n', '    /// @param _fiatAmountInCents - payment amount in fiat CENTS so that is always integer\n', '    /// @param _currency - currency in which the payment needs to take place\n', '    /// RATE CALCULATION EXAMPLE\n', '    /// ------------------------\n', '    /// RATE ==> 1 PMA = 0.01 USD$\n', '    /// 1 USD$ = 1/0.01 PMA = 100 PMA\n', '    /// Start the calculation from one ether - PMA Token has 18 decimals\n', '    /// Multiply by the DECIMAL_FIXER (1e+10) to fix the multiplication of the rate\n', '    /// Multiply with the fiat amount in cents\n', '    /// Divide by the Rate of PMA to Fiat in cents\n', '    /// Divide by the FIAT_TO_CENT_FIXER to fix the _fiatAmountInCents\n', '    function calculatePMAFromFiat(uint256 _fiatAmountInCents, string _currency)\n', '    internal\n', '    view\n', '    returns (uint256) {\n', '        return ONE_ETHER.mul(DECIMAL_FIXER).mul(_fiatAmountInCents).div(exchangeRates[_currency]).div(FIAT_TO_CENT_FIXER);\n', '    }\n', '\n', '    /// @dev Checks if a registration request is valid by comparing the v, r, s params\n', '    /// and the hashed params with the client address.\n', '    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\n', '    /// @param r - R output of ECDSA signature.\n', '    /// @param s - S output of ECDSA signature.\n', '    /// @param _client - client address that is linked to this pull payment.\n', '    /// @param _beneficiary - address that is allowed to execute this pull payment.\n', '    /// @param _pullPayment - pull payment to be validated.\n', '    /// @return bool - if the v, r, s params with the hashed params match the client address\n', '    function isValidRegistration(\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s,\n', '        address _client,\n', '        address _beneficiary,\n', '        PullPayment _pullPayment\n', '    )\n', '    internal\n', '    pure\n', '    returns (bool)\n', '    {\n', '        return ecrecover(\n', '            keccak256(\n', '                abi.encodePacked(\n', '                    _beneficiary,\n', '                    _pullPayment.currency,\n', '                    _pullPayment.initialPaymentAmountInCents,\n', '                    _pullPayment.fiatAmountInCents,\n', '                    _pullPayment.frequency,\n', '                    _pullPayment.numberOfPayments,\n', '                    _pullPayment.startTimestamp\n', '                )\n', '            ),\n', '            v, r, s) == _client;\n', '    }\n', '\n', '    /// @dev Checks if a deletion request is valid by comparing the v, r, s params\n', '    /// and the hashed params with the client address.\n', '    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\n', '    /// @param r - R output of ECDSA signature.\n', '    /// @param s - S output of ECDSA signature.\n', '    /// @param _paymentID - ID of the payment.\n', '    /// @param _client - client address that is linked to this pull payment.\n', '    /// @param _beneficiary - address that is allowed to execute this pull payment.\n', '    /// @return bool - if the v, r, s params with the hashed params match the client address\n', '    function isValidDeletion(\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s,\n', '        string _paymentID,\n', '        address _client,\n', '        address _beneficiary\n', '    )\n', '    internal\n', '    view\n', '    returns (bool)\n', '    {\n', '        return ecrecover(\n', '            keccak256(\n', '                abi.encodePacked(\n', '                    _paymentID,\n', '                    _beneficiary\n', '                )\n', '            ), v, r, s) == _client\n', '        && keccak256(\n', '            abi.encodePacked(pullPayments[_client][_beneficiary].paymentID)\n', '        ) == keccak256(abi.encodePacked(_paymentID));\n', '    }\n', '\n', '    /// @dev Checks if a payment for a beneficiary of a client exists.\n', '    /// @param _client - client address that is linked to this pull payment.\n', '    /// @param _beneficiary - address to execute a pull payment.\n', '    /// @return bool - whether the beneficiary for this client has a pull payment to execute.\n', '    function doesPaymentExist(address _client, address _beneficiary)\n', '    internal\n', '    view\n', '    returns (bool) {\n', '        return (\n', '        bytes(pullPayments[_client][_beneficiary].currency).length > 0 &&\n', '        pullPayments[_client][_beneficiary].fiatAmountInCents > 0 &&\n', '        pullPayments[_client][_beneficiary].frequency > 0 &&\n', '        pullPayments[_client][_beneficiary].startTimestamp > 0 &&\n', '        pullPayments[_client][_beneficiary].numberOfPayments > 0 &&\n', '        pullPayments[_client][_beneficiary].nextPaymentTimestamp > 0\n', '        );\n', '    }\n', '\n', '    /// @dev Checks if the address of an owner/executor needs to be funded. \n', '    /// The minimum amount the owner/executors should always have is 0.001 ETH \n', '    /// @param _address - address of owner/executors that the balance is checked against. \n', '    /// @return bool - whether the address needs more ETH.\n', '    function isFundingNeeded(address _address)\n', '    private\n', '    view\n', '    returns (bool) {\n', '        return address(_address).balance <= MINIMUM_AMOUNT_OF_ETH_FOR_OPARATORS;\n', '    }\n', '}']