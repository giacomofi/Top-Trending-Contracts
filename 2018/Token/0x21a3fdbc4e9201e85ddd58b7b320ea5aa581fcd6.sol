['//File: node_modules/zeppelin-solidity/contracts/token/ERC20Basic.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/BasicToken.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/ERC20.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/StandardToken.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/MintableToken.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/SafeERC20.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/TokenVesting.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    Revoked();\n', '  }\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/PausableToken.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '//File: src/contracts/ico/MtnToken.sol\n', '/**\n', ' * @title MTN token\n', ' *\n', ' * @version 1.0\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', 'contract MtnToken is MintableToken, PausableToken {\n', '    string public constant name = "MedToken";\n', '    string public constant symbol = "MTN";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '     * @dev Constructor of MtnToken that instantiates a new Mintable Pauseable Token\n', '     */\n', '    function MtnToken() public {\n', '        // token should not be transferrable until after all tokens have been issued\n', '        paused = true;\n', '    }\n', '}\n', '\n', '//File: src/contracts/ico/MtnCrowdsale.sol\n', '/**\n', ' * @title MtnCrowdsale\n', ' *\n', ' * Simple time and TOKEN_CAPped based crowdsale.\n', ' *\n', ' * @version 1.0\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract MtnCrowdsale is Ownable, Crowdsale {\n', '    /*** CONSTANTS ***/\n', '    uint256 public constant TOTAL_TOKEN_CAP = 500e6 * 1e18;   // 500 million * 1e18 - smallest unit of MTN token\n', '    uint256 public constant CROWDSALE_TOKENS = 175e6 * 1e18;  // 175 million * 1e18 - presale and crowdsale tokens\n', '    uint256 public constant TOTAL_TEAM_TOKENS = 170e6 * 1e18; // 170 million * 1e18 - team tokens\n', '    uint256 public constant TEAM_TOKENS0 = 50e6 * 1e18;       // 50 million * 1e18 - team tokens, already vested\n', '    uint256 public constant TEAM_TOKENS1 = 60e6 * 1e18;       // 60 million * 1e18 - team tokens, vesting over 2 years\n', '    uint256 public constant TEAM_TOKENS2 = 60e6 * 1e18;       // 60 million * 1e18 - team tokens, vesting over 4 years\n', '    uint256 public constant COMMUNITY_TOKENS = 155e6 * 1e18;  // 155 million * 1e18 - community tokens, vesting over 4 years\n', '\n', '    uint256 public constant MAX_CONTRIBUTION_USD = 5000;      //  USD\n', '    uint256 public constant USD_CENT_PER_TOKEN = 25;          // in cents - smallest unit of USD E.g. 100 = 1 USD\n', '\n', '    uint256 public constant VESTING_DURATION_4Y = 4 years;\n', '    uint256 public constant VESTING_DURATION_2Y = 2 years;\n', '\n', '    // true if address is allowed to invest\n', '    mapping(address => bool) public isWhitelisted;\n', '\n', '    // allow managers to whitelist and confirm contributions by manager accounts\n', '    // managers can be set and altered by owner, multiple manager accounts are possible\n', '    mapping(address => bool) public isManager;\n', '\n', '    uint256 public maxContributionInWei;\n', '    uint256 public tokensMinted;                            // already minted tokens (maximally = TOKEN_CAP)\n', '    bool public capReached;                                 // set to true when cap has been reached when minting tokens\n', '    mapping(address => uint256) public totalInvestedPerAddress;\n', '\n', '    address public beneficiaryWallet;\n', '\n', '    // for convenience we store vesting wallets\n', '    address public teamVesting2Years;\n', '    address public teamVesting4Years;\n', '    address public communityVesting4Years;\n', '\n', '    /*** Tracking Crowdsale Stages ***/\n', '    bool public isCrowdsaleOver;\n', '\n', '    /*** EVENTS  ***/\n', '    event ChangedManager(address manager, bool active);\n', '    event PresaleMinted(address indexed beneficiary, uint256 tokenAmount);\n', '    event ChangedInvestorWhitelisting(address indexed investor, bool whitelisted);\n', '\n', '    /*** MODIFIERS ***/\n', '    modifier onlyManager() {\n', '        require(isManager[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    // trying to accompish using already existing variables to determine stage - prevents manual updating of the enum stage states\n', '    modifier onlyPresalePhase() {\n', '        require(now < startTime);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdsalePhase() {\n', '        require(now >= startTime && now < endTime && !isCrowdsaleOver);\n', '        _;\n', '    }\n', '\n', '    modifier respectCrowdsaleCap(uint256 _amount) {\n', '        require(tokensMinted.add(_amount) <= CROWDSALE_TOKENS);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCrowdSaleOver() {\n', '        require(isCrowdsaleOver || now > endTime || capReached);\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAddress(address _address) {\n', '        require(_address != address(0));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Deploy MTN Token Crowdsale\n', '     * @param _startTime uint256 Start time of the crowdsale\n', '     * @param _endTime uint256 End time of the crowdsale\n', '     * @param _usdPerEth uint256 issueing rate tokens per wei\n', '     * @param _wallet address Wallet address of the crowdsale\n', '     * @param _beneficiaryWallet address wallet holding team and community tokens\n', '     */\n', '    function MtnCrowdsale(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _usdPerEth,\n', '        address _wallet,\n', '        address _beneficiaryWallet\n', '        )\n', '        Crowdsale(_startTime, _endTime, (_usdPerEth.mul(1e2)).div(USD_CENT_PER_TOKEN), _wallet)\n', '        public\n', '        onlyValidAddress(_beneficiaryWallet)\n', '    {\n', '        require(TOTAL_TOKEN_CAP == CROWDSALE_TOKENS.add(TOTAL_TEAM_TOKENS).add(COMMUNITY_TOKENS));\n', '        require(TOTAL_TEAM_TOKENS == TEAM_TOKENS0.add(TEAM_TOKENS1).add(TEAM_TOKENS2));\n', '        setManager(msg.sender, true);\n', '\n', '        beneficiaryWallet = _beneficiaryWallet;\n', '\n', '        maxContributionInWei = (MAX_CONTRIBUTION_USD.mul(1e18)).div(_usdPerEth);\n', '\n', '        mintTeamTokens();\n', '        mintCommunityTokens();\n', '    }\n', '\n', '    /**\n', '     * @dev Create new instance of mtn token contract\n', '     */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new MtnToken();\n', '    }\n', '\n', '    /**\n', '     * @dev Set / alter manager / whitelister "account". This can be done from owner only\n', '     * @param _manager address address of the manager to create/alter\n', '     * @param _active bool flag that shows if the manager account is active\n', '     */\n', '    function setManager(address _manager, bool _active) public onlyOwner onlyValidAddress(_manager) {\n', '        isManager[_manager] = _active;\n', '        ChangedManager(_manager, _active);\n', '    }\n', '\n', '    /**\n', '     * @dev whitelist investors to allow the direct investment of this crowdsale\n', '     * @param _investor address address of the investor to be whitelisted\n', '     */\n', '    function whiteListInvestor(address _investor) public onlyManager onlyValidAddress(_investor) {\n', '        isWhitelisted[_investor] = true;\n', '        ChangedInvestorWhitelisting(_investor, true);\n', '    }\n', '\n', '    /**\n', '     * @dev whitelist several investors via a batch method\n', '     * @param _investors address[] array of addresses of the beneficiaries to receive tokens after they have been confirmed\n', '     */\n', '    function batchWhiteListInvestors(address[] _investors) public onlyManager {\n', '        for (uint256 c; c < _investors.length; c = c.add(1)) {\n', '            whiteListInvestor(_investors[c]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev unwhitelist investor from participating in the crowdsale\n', '     * @param _investor address address of the investor to disallowed participation\n', '     */\n', '    function unWhiteListInvestor(address _investor) public onlyManager onlyValidAddress(_investor) {\n', '        isWhitelisted[_investor] = false;\n', '        ChangedInvestorWhitelisting(_investor, false);\n', '    }\n', '\n', '   /**\n', '    * @dev onlyOwner allowed to mint tokens, respecting the cap, and only before the crowdsale starts\n', '    * @param _beneficiary address\n', '    * @param _amount uint256\n', '    */\n', '    function mintTokenPreSale(address _beneficiary, uint256 _amount) public onlyOwner onlyPresalePhase onlyValidAddress(_beneficiary) respectCrowdsaleCap(_amount) {\n', '        require(_amount > 0);\n', '\n', '        tokensMinted = tokensMinted.add(_amount);\n', '        token.mint(_beneficiary, _amount);\n', '        PresaleMinted(_beneficiary, _amount);\n', '    }\n', '\n', '   /**\n', '    * @dev onlyOwner allowed to handle batch presale minting\n', '    * @param _beneficiaries address[]\n', '    * @param _amounts uint256[]\n', '    */\n', '    function batchMintTokenPresale(address[] _beneficiaries, uint256[] _amounts) public onlyOwner onlyPresalePhase {\n', '        require(_beneficiaries.length == _amounts.length);\n', '\n', '        for (uint256 i; i < _beneficiaries.length; i = i.add(1)) {\n', '            mintTokenPreSale(_beneficiaries[i], _amounts[i]);\n', '        }\n', '    }\n', '\n', '   /**\n', '    * @dev override core functionality by whitelist check\n', '    * @param _beneficiary address\n', '    */\n', '    function buyTokens(address _beneficiary) public payable onlyCrowdsalePhase onlyValidAddress(_beneficiary) {\n', '        require(isWhitelisted[msg.sender]);\n', '        require(validPurchase());\n', '\n', '        uint256 overflowTokens;\n', '        uint256 refundWeiAmount;\n', '        bool overMaxInvestmentAllowed;\n', '\n', '        uint256 investedWeiAmount = msg.value;\n', '\n', '        // Is this specific investment over the MAX_CONTRIBUTION_USD limit?\n', '        // if so, calcuate wei refunded and tokens to mint for the allowed investment amount\n', '        uint256 totalInvestedWeiAmount = investedWeiAmount.add(totalInvestedPerAddress[msg.sender]);\n', '        if (totalInvestedWeiAmount > maxContributionInWei) {\n', '            overMaxInvestmentAllowed = true;\n', '            refundWeiAmount = totalInvestedWeiAmount.sub(maxContributionInWei);\n', '            investedWeiAmount = investedWeiAmount.sub(refundWeiAmount);\n', '        }\n', '\n', '        uint256 tokenAmount = investedWeiAmount.mul(rate);\n', '        uint256 tempMintedTokens = tokensMinted.add(tokenAmount); // gas optimization, do not inline twice\n', '\n', '        // check to see if this purchase sets it over the crowdsale token cap\n', '        // if so, calculate tokens to mint, then refund the remaining ether investment\n', '        if (tempMintedTokens >= CROWDSALE_TOKENS) {\n', '            capReached = true;\n', '            overflowTokens = tempMintedTokens.sub(CROWDSALE_TOKENS);\n', '            tokenAmount = tokenAmount.sub(overflowTokens);\n', '            refundWeiAmount = overflowTokens.div(rate);\n', '            investedWeiAmount = investedWeiAmount.sub(refundWeiAmount);\n', '        }\n', '\n', '        weiRaised = weiRaised.add(investedWeiAmount);\n', '\n', '        tokensMinted = tokensMinted.add(tokenAmount);\n', '        TokenPurchase(msg.sender, _beneficiary, investedWeiAmount, tokenAmount);\n', '        totalInvestedPerAddress[msg.sender] = totalInvestedPerAddress[msg.sender].add(investedWeiAmount);\n', '        token.mint(_beneficiary, tokenAmount);\n', '\n', '        // if investor breached cap and has remaining ether not invested\n', '        // refund remaining ether to investor\n', '        if (capReached || overMaxInvestmentAllowed) {\n', '            msg.sender.transfer(refundWeiAmount);\n', '            wallet.transfer(investedWeiAmount);\n', '        } else {\n', '            forwardFunds();\n', '        }\n', '    }\n', '\n', '   /**\n', '    * @dev onlyOwner to close Crowdsale manually if before endTime\n', '    */\n', '    function closeCrowdsale() public onlyOwner onlyCrowdsalePhase {\n', '        isCrowdsaleOver = true;\n', '    }\n', '\n', '   /**\n', '    * @dev onlyOwner allows tokens to be tradeable\n', '    */\n', '    function finalize() public onlyOwner onlyCrowdSaleOver {\n', '        // do not allow new owner to mint further tokens & unpause token to allow trading\n', '        MintableToken(token).finishMinting();\n', '        PausableToken(token).unpause();\n', '    }\n', '\n', '    /*** INTERNAL/PRIVATE FUNCTIONS ***/\n', '\n', '    /**\n', '     * @dev allows contract owner to mint all team tokens per TEAM_TOKENS and have 50m immediately available, 60m 2 years vested, and 60m over 4 years vesting\n', '     */\n', '    function mintTeamTokens() private {\n', '        token.mint(beneficiaryWallet, TEAM_TOKENS0);\n', '\n', '        TokenVesting newVault1 = new TokenVesting(beneficiaryWallet, now, 0, VESTING_DURATION_2Y, false);\n', '        teamVesting2Years = address(newVault1); // for convenience we keep them in storage so that they are easily accessible via MEW or etherscan\n', '        token.mint(address(newVault1), TEAM_TOKENS1);\n', '\n', '        TokenVesting newVault2 = new TokenVesting(beneficiaryWallet, now, 0, VESTING_DURATION_4Y, false);\n', '        teamVesting4Years = address(newVault2); // for convenience we keep them in storage so that they are easily accessible via MEW or etherscan\n', '        token.mint(address(newVault2), TEAM_TOKENS2);\n', '    }\n', '\n', '    /**\n', '     * @dev allows contract owner to mint all community tokens per COMMUNITY_TOKENS and have the vested to the beneficiaryWallet\n', '     */\n', '    function mintCommunityTokens() private {\n', '        TokenVesting newVault = new TokenVesting(beneficiaryWallet, now, 0, VESTING_DURATION_4Y, false);\n', '        communityVesting4Years = address(newVault); // for convenience we keep them in storage so that they are easily accessible via MEW or etherscan\n', '        token.mint(address(newVault), COMMUNITY_TOKENS);\n', '    }\n', '\n', '    /**\n', '     * @dev extend base functionality with min investment amount\n', '     */\n', '    function validPurchase() internal view respectCrowdsaleCap(0) returns (bool) {\n', '        require(!capReached);\n', '        require(totalInvestedPerAddress[msg.sender] < maxContributionInWei);\n', '\n', '        return super.validPurchase();\n', '    }\n', '}']