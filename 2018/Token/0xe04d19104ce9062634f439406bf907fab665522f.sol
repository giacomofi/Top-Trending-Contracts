['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '\n', '  */\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    if (a == 0) {\n', '\n', '      return 0;\n', '\n', '    }\n', '\n', '    uint256 c = a * b;\n', '\n', '    require(c / a == b);\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '\n', '  */\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    require(b > 0); // Solidity automatically throws when dividing by 0\n', '\n', '    uint256 c = a / b;\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\n', '  */\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    require(b <= a);\n', '\n', '    return a - b;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Adds two numbers, throws on overflow.\n', '\n', '  */\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    uint256 c = a + b;\n', '\n', '    require(c >= a);\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable \n', '\n', '{\n', '\n', '  address public owner;\n', '\n', ' \n', '\n', '  constructor(address _owner) public \n', '\n', '  {\n', '\n', '    owner = _owner;\n', '\n', '  }\n', '\n', ' \n', '\n', '  modifier onlyOwner() \n', '\n', '  {\n', '\n', '    require(msg.sender == owner);\n', '\n', '    _;\n', '\n', '  }\n', '\n', ' \n', '\n', '  function transferOwnership(address newOwner) onlyOwner \n', '\n', '  {\n', '\n', '    require(newOwner != address(0));      \n', '\n', '    owner = newOwner;\n', '\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BiLinkToken is StandardToken, Ownable {\n', '\tstring public name = "BiLink"; \n', '\tstring public symbol = "BLK";\n', '\tuint256 public decimals = 18;\n', '\tuint256 public INITIAL_SUPPLY = 10000 * 10000 * (10 ** decimals);\n', '\tbool public mintingFinished = false;\n', '\tuint256 public totalMintableAmount;\n', '\n', '\taddress public contractBalance;\n', '\n', '\taddress public accountFoundation;\n', '\taddress public accountCompany;\n', '\taddress public accountPartnerBase;\n', '\tmapping (address => uint256) public lockedAccount2WithdrawTap;\n', '\tmapping (address => uint256) public lockedAccount2WithdrawedAmount;\n', '\tuint256 public lockStartTime;\n', '\tuint256 public lockEndTime;\n', '\tuint256 public releaseEndTime;\n', '\tuint256 public tapOfOne;\n', '\tuint256 public amountMinted;\n', '\tuint256 public lockTimeSpan;\n', '\n', '\taddress[] public accountsCanShareProfit;//balance > 10000 * (10 ** decimals)\n', '\tuint256 public amountMinCanShareProfit;\n', '\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\tevent Mint(address indexed to, uint256 amount);\n', '\tevent MintFinished();\n', '\n', '\tconstructor(address _owner, address _accountFoundation, address _accountCompany, address _accountPartnerBase) public \n', '\t\tOwnable(_owner)\n', '\t{\n', '\t\ttotalSupply_ = INITIAL_SUPPLY* 70/ 100;\n', '\t\taccountFoundation= _accountFoundation;\n', '\t\taccountCompany= _accountCompany;\n', '\t\taccountPartnerBase= _accountPartnerBase;\n', '\n', '\t\tlockStartTime= now;\n', '\t\tlockTimeSpan= 1 * 365 * 24 * 3600;\n', '\t\tlockEndTime= now+ lockTimeSpan;\n', '\t\treleaseEndTime= now+ 2 * lockTimeSpan;\n', '\n', '\t\tbalances[accountCompany]= INITIAL_SUPPLY* 40/ 100;\n', '\t\tbalances[accountFoundation]= INITIAL_SUPPLY* 10/ 100;\n', '\t\tbalances[accountPartnerBase]= INITIAL_SUPPLY* 20/ 100;\n', '\n', '\t\ttapOfOne= (10 ** decimals)/ (lockTimeSpan);\n', '\t\tlockedAccount2WithdrawTap[accountCompany]= tapOfOne.mul(balances[accountCompany]);\n', '\t\tlockedAccount2WithdrawTap[accountPartnerBase]= tapOfOne.mul(balances[accountPartnerBase]);\n', '\n', '\t\taccountsCanShareProfit.push(accountCompany);\n', '\t\taccountsCanShareProfit.push(accountFoundation);\n', '\t\taccountsCanShareProfit.push(accountPartnerBase);\n', '\n', '\t\tamountMinCanShareProfit= 10000 * (10 ** decimals);\n', '\t\ttotalMintableAmount= INITIAL_SUPPLY * 30/ 100;\n', '\t}\n', '\n', '\tfunction setMintAndBurnOwner (address _contractBalance) public onlyOwner {\n', '\t\tcontractBalance= _contractBalance;\n', '\t}\n', '\n', '\tfunction burn(uint256 _amount) public {\n', '\t\trequire(msg.sender== contractBalance);\n', '\t\trequire(_amount <= balances[msg.sender]);\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_amount);\n', '\t\ttotalSupply_ = totalSupply_.sub(_amount);\n', '\t\temit Burn(msg.sender, _amount);\n', '\t\temit Transfer(msg.sender, address(0), _amount);\n', '\t}\n', '\n', '\tfunction transferToPartnerAccount(address _partner, uint256 _amount) onlyOwner {\n', '\t\trequire(balances[accountPartnerBase].sub(_amount) > 0);\n', '\n', '\t\tbalances[_partner]= balances[_partner].add(_amount);\n', '\t\tbalances[accountPartnerBase]= balances[accountPartnerBase].sub(_amount);\n', '\n', '\t\tlockedAccount2WithdrawTap[_partner]= tapOfOne.mul(balances[_partner]);\n', '\n', '\t\tif(balances[_partner].sub(_amount) < amountMinCanShareProfit&& balances[_partner] >= amountMinCanShareProfit)\n', '\t\t\taccountsCanShareProfit.push(_partner);\n', '\t}\n', '\n', '\tmodifier canMint() {\n', '\t\trequire(!mintingFinished);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier hasMintPermission() {\n', '\t\trequire(msg.sender == contractBalance);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier canTransfer(address _from, address _to, uint256 _value)  {\n', '        require(_from != accountFoundation&& (lockedAccount2WithdrawTap[_from] <= 0 || now >= releaseEndTime || (now >= lockEndTime && _value <= (lockedAccount2WithdrawTap[_from].mul(now.sub(lockStartTime))).sub(lockedAccount2WithdrawedAmount[_from]))));\n', '        _;\n', '    }\n', '\n', '\tfunction mintFinished() public constant returns (bool) {\n', '\t\treturn mintingFinished;\n', '\t}\n', '\n', '\tfunction mint(address _to, uint256 _amount)\n', '\t\thasMintPermission\n', '\t\tcanMint\n', '\t\tpublic\n', '\t\treturns (bool)\n', '\t{\n', '\t\tuint256 _actualMintAmount= _amount.mul(totalMintableAmount- amountMinted).div(totalMintableAmount);\n', '\t\tif(amountMinted.add(_actualMintAmount) > totalMintableAmount) {\n', '\t\t\tfinishMinting();\n', '\t\t\treturn false;\n', '\t\t}\n', '\t\telse {\n', '\t\t\tamountMinted= amountMinted.add(_actualMintAmount);\n', '\t\t\ttotalSupply_ = totalSupply_.add(_actualMintAmount);\n', '\t\t\tbalances[_to] = balances[_to].add(_actualMintAmount);\n', '\n', '\t\t\temit Mint(_to, _actualMintAmount);\n', '\t\t\temit Transfer(address(0), _to, _actualMintAmount);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction finishMinting() canMint private returns (bool) {\n', '\t\tmintingFinished = true;\n', '\t\temit MintFinished();\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction preTransfer(address _from, address _to, uint256 _value) private {\n', '\t\tif(lockedAccount2WithdrawTap[_from] > 0)\n', '\t\t\tlockedAccount2WithdrawedAmount[_from]= lockedAccount2WithdrawedAmount[_from].add(_value);\n', '\n', '\t\tif(balances[_from] >= amountMinCanShareProfit && balances[_from].sub(_value) < amountMinCanShareProfit) {\n', '\t\t\tfor(uint256 i= 0; i< accountsCanShareProfit.length; i++) {\n', '\n', '\t\t\t\tif(accountsCanShareProfit[i]== _from) {\n', '\n', '\t\t\t\t\tif(i< accountsCanShareProfit.length- 1&& accountsCanShareProfit.length> 1)\n', '\n', '\t\t\t\t\t\taccountsCanShareProfit[i]= accountsCanShareProfit[accountsCanShareProfit.length- 1];\n', '\n', '\t\t\t\t\tdelete accountsCanShareProfit[accountsCanShareProfit.length- 1];\n', '\n', '\t\t\t\t\taccountsCanShareProfit.length--;\n', '\n', '\t\t\t\t\tbreak;\n', '\n', '\t\t\t\t}\n', '\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\tif(balances[_to] < amountMinCanShareProfit&& balances[_to].add(_value) >= amountMinCanShareProfit) {\n', '\t\t\taccountsCanShareProfit.push(_to);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to, _value) returns (bool) {\n', '\t\tpreTransfer(msg.sender, _to, _value);\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to, _value) returns (bool) {\n', '\t\tpreTransfer(_from, _to, _value);\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender, _value) returns (bool) {\n', '        return super.approve(_spender,_value);\n', '    }\n', '\n', '\tfunction getCanShareProfitAccounts() public constant returns (address[]) {\n', '\t\treturn accountsCanShareProfit;\n', '\t}\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '\n', '  */\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    if (a == 0) {\n', '\n', '      return 0;\n', '\n', '    }\n', '\n', '    uint256 c = a * b;\n', '\n', '    require(c / a == b);\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '\n', '  */\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    require(b > 0); // Solidity automatically throws when dividing by 0\n', '\n', '    uint256 c = a / b;\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\n', '  */\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    require(b <= a);\n', '\n', '    return a - b;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Adds two numbers, throws on overflow.\n', '\n', '  */\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    uint256 c = a + b;\n', '\n', '    require(c >= a);\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable \n', '\n', '{\n', '\n', '  address public owner;\n', '\n', ' \n', '\n', '  constructor(address _owner) public \n', '\n', '  {\n', '\n', '    owner = _owner;\n', '\n', '  }\n', '\n', ' \n', '\n', '  modifier onlyOwner() \n', '\n', '  {\n', '\n', '    require(msg.sender == owner);\n', '\n', '    _;\n', '\n', '  }\n', '\n', ' \n', '\n', '  function transferOwnership(address newOwner) onlyOwner \n', '\n', '  {\n', '\n', '    require(newOwner != address(0));      \n', '\n', '    owner = newOwner;\n', '\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BiLinkToken is StandardToken, Ownable {\n', '\tstring public name = "BiLink"; \n', '\tstring public symbol = "BLK";\n', '\tuint256 public decimals = 18;\n', '\tuint256 public INITIAL_SUPPLY = 10000 * 10000 * (10 ** decimals);\n', '\tbool public mintingFinished = false;\n', '\tuint256 public totalMintableAmount;\n', '\n', '\taddress public contractBalance;\n', '\n', '\taddress public accountFoundation;\n', '\taddress public accountCompany;\n', '\taddress public accountPartnerBase;\n', '\tmapping (address => uint256) public lockedAccount2WithdrawTap;\n', '\tmapping (address => uint256) public lockedAccount2WithdrawedAmount;\n', '\tuint256 public lockStartTime;\n', '\tuint256 public lockEndTime;\n', '\tuint256 public releaseEndTime;\n', '\tuint256 public tapOfOne;\n', '\tuint256 public amountMinted;\n', '\tuint256 public lockTimeSpan;\n', '\n', '\taddress[] public accountsCanShareProfit;//balance > 10000 * (10 ** decimals)\n', '\tuint256 public amountMinCanShareProfit;\n', '\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\tevent Mint(address indexed to, uint256 amount);\n', '\tevent MintFinished();\n', '\n', '\tconstructor(address _owner, address _accountFoundation, address _accountCompany, address _accountPartnerBase) public \n', '\t\tOwnable(_owner)\n', '\t{\n', '\t\ttotalSupply_ = INITIAL_SUPPLY* 70/ 100;\n', '\t\taccountFoundation= _accountFoundation;\n', '\t\taccountCompany= _accountCompany;\n', '\t\taccountPartnerBase= _accountPartnerBase;\n', '\n', '\t\tlockStartTime= now;\n', '\t\tlockTimeSpan= 1 * 365 * 24 * 3600;\n', '\t\tlockEndTime= now+ lockTimeSpan;\n', '\t\treleaseEndTime= now+ 2 * lockTimeSpan;\n', '\n', '\t\tbalances[accountCompany]= INITIAL_SUPPLY* 40/ 100;\n', '\t\tbalances[accountFoundation]= INITIAL_SUPPLY* 10/ 100;\n', '\t\tbalances[accountPartnerBase]= INITIAL_SUPPLY* 20/ 100;\n', '\n', '\t\ttapOfOne= (10 ** decimals)/ (lockTimeSpan);\n', '\t\tlockedAccount2WithdrawTap[accountCompany]= tapOfOne.mul(balances[accountCompany]);\n', '\t\tlockedAccount2WithdrawTap[accountPartnerBase]= tapOfOne.mul(balances[accountPartnerBase]);\n', '\n', '\t\taccountsCanShareProfit.push(accountCompany);\n', '\t\taccountsCanShareProfit.push(accountFoundation);\n', '\t\taccountsCanShareProfit.push(accountPartnerBase);\n', '\n', '\t\tamountMinCanShareProfit= 10000 * (10 ** decimals);\n', '\t\ttotalMintableAmount= INITIAL_SUPPLY * 30/ 100;\n', '\t}\n', '\n', '\tfunction setMintAndBurnOwner (address _contractBalance) public onlyOwner {\n', '\t\tcontractBalance= _contractBalance;\n', '\t}\n', '\n', '\tfunction burn(uint256 _amount) public {\n', '\t\trequire(msg.sender== contractBalance);\n', '\t\trequire(_amount <= balances[msg.sender]);\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_amount);\n', '\t\ttotalSupply_ = totalSupply_.sub(_amount);\n', '\t\temit Burn(msg.sender, _amount);\n', '\t\temit Transfer(msg.sender, address(0), _amount);\n', '\t}\n', '\n', '\tfunction transferToPartnerAccount(address _partner, uint256 _amount) onlyOwner {\n', '\t\trequire(balances[accountPartnerBase].sub(_amount) > 0);\n', '\n', '\t\tbalances[_partner]= balances[_partner].add(_amount);\n', '\t\tbalances[accountPartnerBase]= balances[accountPartnerBase].sub(_amount);\n', '\n', '\t\tlockedAccount2WithdrawTap[_partner]= tapOfOne.mul(balances[_partner]);\n', '\n', '\t\tif(balances[_partner].sub(_amount) < amountMinCanShareProfit&& balances[_partner] >= amountMinCanShareProfit)\n', '\t\t\taccountsCanShareProfit.push(_partner);\n', '\t}\n', '\n', '\tmodifier canMint() {\n', '\t\trequire(!mintingFinished);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier hasMintPermission() {\n', '\t\trequire(msg.sender == contractBalance);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier canTransfer(address _from, address _to, uint256 _value)  {\n', '        require(_from != accountFoundation&& (lockedAccount2WithdrawTap[_from] <= 0 || now >= releaseEndTime || (now >= lockEndTime && _value <= (lockedAccount2WithdrawTap[_from].mul(now.sub(lockStartTime))).sub(lockedAccount2WithdrawedAmount[_from]))));\n', '        _;\n', '    }\n', '\n', '\tfunction mintFinished() public constant returns (bool) {\n', '\t\treturn mintingFinished;\n', '\t}\n', '\n', '\tfunction mint(address _to, uint256 _amount)\n', '\t\thasMintPermission\n', '\t\tcanMint\n', '\t\tpublic\n', '\t\treturns (bool)\n', '\t{\n', '\t\tuint256 _actualMintAmount= _amount.mul(totalMintableAmount- amountMinted).div(totalMintableAmount);\n', '\t\tif(amountMinted.add(_actualMintAmount) > totalMintableAmount) {\n', '\t\t\tfinishMinting();\n', '\t\t\treturn false;\n', '\t\t}\n', '\t\telse {\n', '\t\t\tamountMinted= amountMinted.add(_actualMintAmount);\n', '\t\t\ttotalSupply_ = totalSupply_.add(_actualMintAmount);\n', '\t\t\tbalances[_to] = balances[_to].add(_actualMintAmount);\n', '\n', '\t\t\temit Mint(_to, _actualMintAmount);\n', '\t\t\temit Transfer(address(0), _to, _actualMintAmount);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction finishMinting() canMint private returns (bool) {\n', '\t\tmintingFinished = true;\n', '\t\temit MintFinished();\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction preTransfer(address _from, address _to, uint256 _value) private {\n', '\t\tif(lockedAccount2WithdrawTap[_from] > 0)\n', '\t\t\tlockedAccount2WithdrawedAmount[_from]= lockedAccount2WithdrawedAmount[_from].add(_value);\n', '\n', '\t\tif(balances[_from] >= amountMinCanShareProfit && balances[_from].sub(_value) < amountMinCanShareProfit) {\n', '\t\t\tfor(uint256 i= 0; i< accountsCanShareProfit.length; i++) {\n', '\n', '\t\t\t\tif(accountsCanShareProfit[i]== _from) {\n', '\n', '\t\t\t\t\tif(i< accountsCanShareProfit.length- 1&& accountsCanShareProfit.length> 1)\n', '\n', '\t\t\t\t\t\taccountsCanShareProfit[i]= accountsCanShareProfit[accountsCanShareProfit.length- 1];\n', '\n', '\t\t\t\t\tdelete accountsCanShareProfit[accountsCanShareProfit.length- 1];\n', '\n', '\t\t\t\t\taccountsCanShareProfit.length--;\n', '\n', '\t\t\t\t\tbreak;\n', '\n', '\t\t\t\t}\n', '\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\tif(balances[_to] < amountMinCanShareProfit&& balances[_to].add(_value) >= amountMinCanShareProfit) {\n', '\t\t\taccountsCanShareProfit.push(_to);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) public canTransfer(msg.sender, _to, _value) returns (bool) {\n', '\t\tpreTransfer(msg.sender, _to, _value);\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public canTransfer(_from, _to, _value) returns (bool) {\n', '\t\tpreTransfer(_from, _to, _value);\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public canTransfer(msg.sender, _spender, _value) returns (bool) {\n', '        return super.approve(_spender,_value);\n', '    }\n', '\n', '\tfunction getCanShareProfitAccounts() public constant returns (address[]) {\n', '\t\treturn accountsCanShareProfit;\n', '\t}\n', '}']
