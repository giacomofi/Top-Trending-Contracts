['pragma solidity ^0.4.15;\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20Interface\n', '{\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address owner) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Additional desired wallet functionality\n', 'contract ERC20Burnable is ERC20Interface\n', '{\n', '    function burn(uint256 value) returns (bool);\n', '\n', '    event Burn(address indexed owner, uint256 value);\n', '}\n', '\n', '\n', '\n', '// Wallet implementation\n', 'contract VRFtoken is ERC20Burnable\n', '{\n', '    // Public data\n', '    string public constant name = "VRF token";\n', '    string public constant symbol = "VRF";\n', '    uint256 public constant decimals = 2; \n', '    address public owner;  \n', '\n', '    // Internal data\n', '    uint256 private constant initialSupply = 690000000; // 690,000,000\n', '    uint256 private currentSupply;\n', '    mapping(address => uint256) private balances;\n', '    mapping(address => mapping (address => uint256)) private allowed;\n', '\n', '    function VRFtoken()\n', '    {\n', '        // Increase initial supply by appropriate factor to allow\n', '        // for the desired number of decimals\n', '        currentSupply = initialSupply * (10 ** uint(decimals));\n', '\n', '        owner = msg.sender;\n', '        balances[owner] = currentSupply;\n', '      \n', '    }\n', '\n', '    function totalSupply() public constant \n', '        returns (uint256)\n', '    {\n', '        return currentSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant \n', '        returns (uint256)\n', '    {\n', '        return balances[tokenOwner];\n', '    }\n', '  \n', '    function transfer(address to, uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        if (balances[msg.sender] >= amount && // Sender has enough?\n', '            balances[to] + amount > balances[to]) // Transfer won&#39;t cause overflow?\n', '        {\n', '            balances[msg.sender] -= amount;\n', '            balances[to] += amount;\n', '            Transfer(msg.sender, to, amount);\n', '            return true;\n', '        } \n', '        else // Invalid transfer\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '  \n', '    function transferFrom(address from, address to, uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        if (balances[from] >= amount && // Account has enough?\n', '            allowed[from][msg.sender] >= amount && // Sender can act for account for this amount?\n', '            balances[to] + amount > balances[to]) // Transfer won&#39;t cause overflow?\n', '        {\n', '            balances[from] -= amount;\n', '            allowed[from][msg.sender] -= amount;\n', '            balances[to] += amount;\n', '            Transfer(from, to, amount);\n', '            return true;\n', '        }\n', '        else // Invalid transfer\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][spender] = amount;\n', '        Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant \n', '        returns (uint256)\n', '    {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function burn(uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        require(msg.sender == owner); // Only the owner can burn\n', '\n', '        if (balances[msg.sender] >= amount) // Account has enough?\n', '        {\n', '            balances[msg.sender] -= amount;\n', '            currentSupply -= amount;\n', '            Burn(msg.sender, amount);\n', '            return true;\n', '        }\n', '        else // Not enough to burn\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20Interface\n', '{\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address owner) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Additional desired wallet functionality\n', 'contract ERC20Burnable is ERC20Interface\n', '{\n', '    function burn(uint256 value) returns (bool);\n', '\n', '    event Burn(address indexed owner, uint256 value);\n', '}\n', '\n', '\n', '\n', '// Wallet implementation\n', 'contract VRFtoken is ERC20Burnable\n', '{\n', '    // Public data\n', '    string public constant name = "VRF token";\n', '    string public constant symbol = "VRF";\n', '    uint256 public constant decimals = 2; \n', '    address public owner;  \n', '\n', '    // Internal data\n', '    uint256 private constant initialSupply = 690000000; // 690,000,000\n', '    uint256 private currentSupply;\n', '    mapping(address => uint256) private balances;\n', '    mapping(address => mapping (address => uint256)) private allowed;\n', '\n', '    function VRFtoken()\n', '    {\n', '        // Increase initial supply by appropriate factor to allow\n', '        // for the desired number of decimals\n', '        currentSupply = initialSupply * (10 ** uint(decimals));\n', '\n', '        owner = msg.sender;\n', '        balances[owner] = currentSupply;\n', '      \n', '    }\n', '\n', '    function totalSupply() public constant \n', '        returns (uint256)\n', '    {\n', '        return currentSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant \n', '        returns (uint256)\n', '    {\n', '        return balances[tokenOwner];\n', '    }\n', '  \n', '    function transfer(address to, uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        if (balances[msg.sender] >= amount && // Sender has enough?\n', "            balances[to] + amount > balances[to]) // Transfer won't cause overflow?\n", '        {\n', '            balances[msg.sender] -= amount;\n', '            balances[to] += amount;\n', '            Transfer(msg.sender, to, amount);\n', '            return true;\n', '        } \n', '        else // Invalid transfer\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '  \n', '    function transferFrom(address from, address to, uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        if (balances[from] >= amount && // Account has enough?\n', '            allowed[from][msg.sender] >= amount && // Sender can act for account for this amount?\n', "            balances[to] + amount > balances[to]) // Transfer won't cause overflow?\n", '        {\n', '            balances[from] -= amount;\n', '            allowed[from][msg.sender] -= amount;\n', '            balances[to] += amount;\n', '            Transfer(from, to, amount);\n', '            return true;\n', '        }\n', '        else // Invalid transfer\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][spender] = amount;\n', '        Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant \n', '        returns (uint256)\n', '    {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function burn(uint256 amount) public \n', '        returns (bool)\n', '    {\n', '        require(msg.sender == owner); // Only the owner can burn\n', '\n', '        if (balances[msg.sender] >= amount) // Account has enough?\n', '        {\n', '            balances[msg.sender] -= amount;\n', '            currentSupply -= amount;\n', '            Burn(msg.sender, amount);\n', '            return true;\n', '        }\n', '        else // Not enough to burn\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '}']
