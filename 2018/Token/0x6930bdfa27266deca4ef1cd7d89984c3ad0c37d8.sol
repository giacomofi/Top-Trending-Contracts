['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '  using SafeMath for uint256;\n', '  \n', '  struct Purchase {\n', '    uint256 buyAmount;\n', '    uint256 transferredAmount;\n', '    uint256 purchaseBlock;\n', '  }\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => Purchase[]) public presaleInvestors;\n', '  mapping(address => uint256) public mainSaleInvestors;\n', '  \n', '  uint256 totalSupply_;\n', '  uint256 public secondsPerBlock = 147; // change to 14\n', '  uint256 public startLockUpSec = 3888000; // 45 days => 3888000 secs\n', '  uint256 public secondsPerMonth = 2592000; // 30 days => 2592000 secs\n', '  uint256 public percentagePerMonth = 10;\n', '  \n', '    function _checkLockUp(address senderAdr) public view returns (uint) {\n', '        uint canTransfer = 0;\n', '        if (presaleInvestors[senderAdr].length == 0) {\n', '            canTransfer = 0;\n', '        } else if (presaleInvestors[senderAdr][0].purchaseBlock > block.number.sub(startLockUpSec.div(secondsPerBlock).mul(10))) {\n', '            canTransfer = 0;\n', '        } else {\n', '            for (uint i = 0; i < presaleInvestors[senderAdr].length; i++) {\n', '                if (presaleInvestors[senderAdr][i].purchaseBlock <= (block.number).sub(startLockUpSec.div(secondsPerBlock).mul(10))) {\n', '                    uint months = (block.number.sub(presaleInvestors[senderAdr][i].purchaseBlock)).div(secondsPerMonth);\n', '                    if (months > 10) {\n', '                        months = 10;\n', '                    }\n', '                    uint actAmount = (presaleInvestors[senderAdr][i].buyAmount).mul(months).mul(percentagePerMonth).div(100);\n', '                    uint realAmout = actAmount.sub(presaleInvestors[senderAdr][i].transferredAmount);\n', '                    canTransfer = canTransfer.add(realAmout);\n', '                } else {\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '        return canTransfer.add(mainSaleInvestors[senderAdr]);\n', '    }\n', '    \n', '    function cleanTokensAmount(address senderAdr, uint256 currentTokens) public returns (bool) {\n', '        if (presaleInvestors[senderAdr].length != 0) {\n', '            for (uint i = 0; i < presaleInvestors[senderAdr].length; i++) {\n', '                if (presaleInvestors[senderAdr][i].transferredAmount == presaleInvestors[senderAdr][i].buyAmount) {\n', '                    continue;\n', '                }\n', '                if (presaleInvestors[senderAdr][i].purchaseBlock <= (block.number).sub(startLockUpSec.div(secondsPerBlock).mul(10))) {\n', '                    uint months = (block.number.sub(presaleInvestors[senderAdr][i].purchaseBlock)).div(secondsPerMonth);\n', '                    if (months > 10) {\n', '                        months = 10;\n', '                    }\n', '                    if ((presaleInvestors[senderAdr][i].buyAmount.div(100).mul(months).mul(percentagePerMonth) - presaleInvestors[senderAdr][i].transferredAmount) >= currentTokens) {\n', '                        presaleInvestors[senderAdr][i].transferredAmount = presaleInvestors[senderAdr][i].transferredAmount + currentTokens;\n', '                        currentTokens = 0;\n', '                    } \n', '                    if ((presaleInvestors[senderAdr][i].buyAmount.div(100).mul(months).mul(percentagePerMonth) - presaleInvestors[senderAdr][i].transferredAmount) < currentTokens) {\n', '                        uint remainder = currentTokens - (presaleInvestors[senderAdr][i].buyAmount.div(100).mul(months).mul(percentagePerMonth) - presaleInvestors[senderAdr][i].transferredAmount);\n', '                        presaleInvestors[senderAdr][i].transferredAmount = presaleInvestors[senderAdr][i].buyAmount.div(100).mul(months).mul(percentagePerMonth);\n', '                        currentTokens = remainder;\n', '                    }\n', '                } else {\n', '                    continue;\n', '                }\n', '            }\n', '            \n', '            if (currentTokens <= mainSaleInvestors[senderAdr]) {\n', '                mainSaleInvestors[senderAdr] = mainSaleInvestors[senderAdr] - currentTokens;\n', '                currentTokens = 0;\n', '            } else {\n', '                revert();\n', '            }\n', '        } else {\n', '            if (currentTokens <= mainSaleInvestors[senderAdr]) {\n', '                mainSaleInvestors[senderAdr] = mainSaleInvestors[senderAdr] - currentTokens;\n', '                currentTokens = 0;\n', '            } else {\n', '                revert();\n', '            }\n', '        }\n', '        \n', '        if (currentTokens != 0) {\n', '            revert();\n', '        }\n', '    }\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value > 0);\n', '    require(_value <= balances[msg.sender]);\n', '    require(_checkLockUp(msg.sender) >= _value);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    cleanTokensAmount(msg.sender, _value);\n', '    mainSaleInvestors[_to] = mainSaleInvestors[_to].add(_value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '    require(_checkLockUp(_who) >= _value);\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '    cleanTokensAmount(_who, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BurnableToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value > 0);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_checkLockUp(_from) >= _value);\n', '\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    cleanTokensAmount(_from, _value);\n', '    mainSaleInvestors[_to] = mainSaleInvestors[_to].add(_value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    mainSaleInvestors[_to] = mainSaleInvestors[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract WiredToken is MintableToken {\n', '    \n', '    string public constant name = "Wired Token";\n', '    string public constant symbol = "WRD";\n', '    uint8 public constant decimals = 8;\n', '    uint256 public constant INITIAL_SUPPLY = 410000000000000000000; // 10^28\n', '    \n', '    address public agent;\n', '    uint256 public distributeAmount = 41000000000000000000;\n', '    uint256 public mulbonus = 1000;\n', '    uint256 public divbonus = 10000000000;\n', '    bool public presalePart = true;\n', '\n', '    modifier onlyAgent() {\n', '        require(msg.sender == owner || msg.sender == agent);\n', '        _;\n', '    }\n', '\n', '    function WiredToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[address(this)] = INITIAL_SUPPLY;\n', '        mainSaleInvestors[address(this)] = INITIAL_SUPPLY;\n', '        agent = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to distribute tokens to the list of addresses by the provided amount\n', '     */\n', '    function distributeAirdrop(address[] addresses, uint256 amount) external onlyAgent {\n', '        require(amount > 0 && addresses.length > 0);\n', '\n', '        uint256 amounts = amount.mul(100000000);\n', '        uint256 totalAmount = amounts.mul(addresses.length);\n', '        require(balances[address(this)] >= totalAmount);\n', '        \n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(addresses[i] != 0x0);\n', '\n', '            balances[addresses[i]] = balances[addresses[i]].add(amounts);\n', '            emit Transfer(address(this), addresses[i], amounts);\n', '            mainSaleInvestors[addresses[i]] = mainSaleInvestors[addresses[i]].add(amounts);\n', '        }\n', '        balances[address(this)] = balances[address(this)].sub(totalAmount);\n', '        mainSaleInvestors[address(this)] = mainSaleInvestors[address(this)].sub(totalAmount);\n', '    }\n', '\n', '    function distributeAirdropMulti(address[] addresses, uint256[] amount) external onlyAgent {\n', '        require(addresses.length > 0 && addresses.length == amount.length);\n', '        \n', '        uint256 totalAmount = 0;\n', '        \n', '        for(uint i = 0; i < addresses.length; i++) {\n', '            require(amount[i] > 0 && addresses[i] != 0x0);\n', '                    \n', '            uint256 amounts = amount[i].mul(100000000);\n', '            totalAmount = totalAmount.add(amounts);\n', '\n', '            require(balances[address(this)] >= totalAmount);\n', '        \n', '            balances[addresses[i]] = balances[addresses[i]].add(amounts);\n', '            emit Transfer(address(this), addresses[i], amounts);\n', '            mainSaleInvestors[addresses[i]] = mainSaleInvestors[addresses[i]].add(amounts);\n', '        }\n', '        balances[address(this)] = balances[address(this)].sub(totalAmount);\n', '        mainSaleInvestors[address(this)] = mainSaleInvestors[address(this)].sub(totalAmount);\n', '\n', '    }\n', '    \n', '    function distributeAirdropMultiPresale(address[] addresses, uint256[] amount, uint256[] blocks) external onlyAgent {\n', '        require(addresses.length > 0 && addresses.length == amount.length);\n', '        \n', '        uint256 totalAmount = 0;\n', '        \n', '        for(uint i = 0; i < addresses.length; i++) {\n', '            require(amount[i] > 0 && addresses[i] != 0x0);\n', '                    \n', '            uint256 amounts = amount[i].mul(100000000);\n', '            totalAmount = totalAmount.add(amounts);\n', '\n', '            require(balances[address(this)] >= totalAmount);\n', '        \n', '            presaleInvestors[addresses[i]].push(Purchase(amounts, 0, blocks[i]));\n', '            balances[addresses[i]] = balances[addresses[i]].add(amounts);\n', '            emit Transfer(address(this), addresses[i], amounts);\n', '        }\n', '        balances[address(this)] = balances[address(this)].sub(totalAmount);\n', '        mainSaleInvestors[address(this)] = mainSaleInvestors[address(this)].sub(totalAmount);\n', '\n', '    }\n', '\n', '    function setDistributeAmount(uint256 _unitAmount) onlyOwner external {\n', '        distributeAmount = _unitAmount;\n', '    }\n', '    \n', '    function setMulBonus(uint256 _mulbonus) onlyOwner external {\n', '        mulbonus = _mulbonus;\n', '    }\n', '    \n', '    function setDivBonus(uint256 _divbonus) onlyOwner external {\n', '        divbonus = _divbonus;\n', '    }\n', '\n', '    function setNewAgent(address _agent) external onlyOwner {\n', '        require(agent != address(0));\n', '        agent = _agent;\n', '    }\n', '    \n', '    function changeTime(uint256 _time) external onlyOwner {\n', '        secondsPerBlock = _time;\n', '    }\n', '    \n', '    function transferFund() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    function transferTokens(uint256 amount) external onlyOwner {\n', '        require(balances[address(this)] > 0);\n', '        \n', '\n', '        balances[msg.sender] = balances[msg.sender].add(amount.mul(100000000));\n', '        balances[address(this)] = balances[address(this)].sub(amount.mul(100000000));\n', '        emit Transfer(address(this), msg.sender, balances[address(this)]);\n', '        mainSaleInvestors[msg.sender] = mainSaleInvestors[msg.sender].add(amount.mul(100000000));\n', '        mainSaleInvestors[address(this)] = mainSaleInvestors[address(this)].sub(amount.mul(100000000));\n', '    }\n', '\n', '    /**\n', '     * @dev Function to distribute tokens to the msg.sender automatically\n', '     *      If distributeAmount is 0, this function doesn&#39;t work\n', '     */\n', '    function buy(address buyer) payable public {\n', '        require(msg.value > 10000000000000 && distributeAmount > 0 && balances[address(this)] > distributeAmount);\n', '        \n', '        uint256 amount = msg.value.mul(mulbonus).div(divbonus);\n', '        balances[buyer] = balances[buyer].add(amount);\n', '        emit Transfer(address(this), buyer, amount);\n', '        \n', '        if (presalePart) {\n', '            presaleInvestors[buyer].push(Purchase(amount, 0, block.number)); \n', '        } else {\n', '            mainSaleInvestors[buyer] = mainSaleInvestors[buyer].add(amount);\n', '        }\n', '\n', '        mainSaleInvestors[address(this)] = mainSaleInvestors[address(this)].sub(amount);\n', '        balances[address(this)] = balances[address(this)].sub(amount);\n', '        distributeAmount = distributeAmount.sub(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function\n', '     */\n', '    function() payable public {\n', '        buy(msg.sender);\n', '    }   \n', '}']