['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/*\n', ' * ERC20Basic\n', ' * Simpler version of ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', 'contract ERC223Basic is ERC20Basic {\n', '    function transfer(address to, uint value, bytes data) public returns (bool);\n', '}\n', '\n', '\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC223Basic {\n', '    // active supply of tokens\n', '    function allowance(address _owner, address _spender) public constant returns (uint256);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', ' /*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', '\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @title ControlCentreInterface\n', ' * @dev ControlCentreInterface is an interface for providing commonly used function\n', ' * signatures to the ControlCentre\n', ' */\n', 'contract ControllerInterface {\n', '\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256);\n', '    function approve(address owner, address spender, uint256 value) public returns (bool);\n', '    function transfer(address owner, address to, uint value, bytes data) public returns (bool);\n', '    function transferFrom(address owner, address from, address to, uint256 amount, bytes data) public returns (bool);\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '}\n', '\n', 'contract Token is Ownable, ERC20 {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintToggle(bool status);\n', '\n', '    // Constant Functions\n', '    function balanceOf(address _owner) public constant returns (uint256) {\n', '        return ControllerInterface(owner).balanceOf(_owner);\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return ControllerInterface(owner).totalSupply();\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '        return ControllerInterface(owner).allowance(_owner, _spender);\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '        bytes memory empty;\n', '        _checkDestination(address(this), _to, _amount, empty);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function mintToggle(bool status) onlyOwner public returns (bool) {\n', '        MintToggle(status);\n', '        return true;\n', '    }\n', '\n', '    // public functions\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        ControllerInterface(owner).approve(msg.sender, _spender, _value);\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        bytes memory empty;\n', '        return transfer(_to, _value, empty);\n', '    }\n', '\n', '    function transfer(address to, uint value, bytes data) public returns (bool) {\n', '        ControllerInterface(owner).transfer(msg.sender, to, value, data);\n', '        Transfer(msg.sender, to, value);\n', '        _checkDestination(msg.sender, to, value, data);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        bytes memory empty;\n', '        return transferFrom(_from, _to, _value, empty);\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount, bytes _data) public returns (bool) {\n', '        ControllerInterface(owner).transferFrom(msg.sender, _from, _to, _amount, _data);\n', '        Transfer(_from, _to, _amount);\n', '        _checkDestination(_from, _to, _amount, _data);\n', '        return true;\n', '    }\n', '\n', '    // Internal Functions\n', '    function _checkDestination(address _from, address _to, uint256 _value, bytes _data) internal {\n', '        uint256 codeLength;\n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract untrustedReceiver = ERC223ReceivingContract(_to);\n', '            // untrusted contract call\n', '            untrustedReceiver.tokenFallback(_from, _value, _data);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' Simple Token based on OpenZeppelin token contract\n', ' */\n', 'contract Force is  Token {\n', '\n', '    string public constant name = "Force";\n', '    string public constant symbol = "FORCE";\n', '    uint8 public constant decimals = 18;\n', '\n', '}']