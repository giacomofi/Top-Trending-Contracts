['// Bond Film Platform Token smart contract.\n', '// Developed by Phenom.Team <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7b12151d143b0b131e151416550f1e1a16">[email&#160;protected]</a>>\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' *   @title SafeMath\n', ' *   @dev Math operations with safety checks that throw on error\n', ' */\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint a, uint b) internal constant returns (uint) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal constant returns(uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal constant returns(uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal constant returns(uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' *   @title ERC20\n', ' *   @dev Standart ERC20 token interface\n', ' */\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply = 0;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping (address => uint)) allowed;\n', '\n', '    function balanceOf(address _owner) constant returns (uint);\n', '    function transfer(address _to, uint _value) returns (bool);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '    function approve(address _spender, uint _value) returns (bool);\n', '    function allowance(address _owner, address _spender) constant returns (uint);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '}\n', '\n', '/**\n', ' *   @title BondToken\n', ' *   @dev Bond Film Platform token contract\n', ' */\n', 'contract BondToken is ERC20 {\n', '    using SafeMath for uint;\n', '    string public name = "Bond Film Platform";\n', '    string public symbol = "BFP";\n', '    uint public decimals = 18;\n', '\n', '    // Ico contract address\n', '    address public owner;\n', '    address public controller;\n', '    address public airDropManager;\n', '    \n', '    event LogBuyForInvestor(address indexed investor, uint value, string txHash);\n', '    event Burn(address indexed from, uint value);\n', '    event Mint(address indexed to, uint value);\n', '    \n', '    // Tokens transfer ability status\n', '    bool public tokensAreFrozen = true;\n', '\n', '    // Allows execution by the owner only\n', '    modifier onlyOwner { \n', '        require(msg.sender == owner); \n', '        _; \n', '    }\n', '\n', '    // Allows execution by the controller only\n', '    modifier onlyController { \n', '        require(msg.sender == controller); \n', '        _; \n', '    }\n', '\n', '    // Allows execution by the air drop manager only\n', '    modifier onlyAirDropManager { \n', '        require(msg.sender == airDropManager); \n', '        _; \n', '    }\n', '\n', '   /**\n', '    *   @dev Contract constructor function sets Ico address\n', '    *   @param _owner        owner address\n', '    *   @param _controller   controller address\n', '    *   @param _airDropManager  air drop manager address\n', '    */\n', '    function BondToken(address _owner, address _controller, address _airDropManager) public {\n', '       owner = _owner;\n', '       controller = _controller;\n', '       airDropManager = _airDropManager; \n', '    }\n', '\n', '   /**\n', '    *   @dev Function to mint tokens\n', '    *   @param _holder       beneficiary address the tokens will be issued to\n', '    *   @param _value        number of tokens to issue\n', '    */\n', '    function mint(address _holder, uint _value) \n', '        private\n', '        returns (bool) {\n', '        require(_value > 0);\n', '        balances[_holder] = balances[_holder].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '        Transfer(address(0), _holder, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '   /**\n', '    *   @dev Function for handle token issues\n', '    *   @param _holder       beneficiary address the tokens will be issued to\n', '    *   @param _value        number of tokens to issue\n', '    */\n', '    function mintTokens(\n', '        address _holder, \n', '        uint _value) \n', '        external \n', '        onlyOwner {\n', '        require(mint(_holder, _value));\n', '        Mint(_holder, _value);\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to issues tokens for investors\n', '    *   @param _holder     address the tokens will be issued to\n', '    *   @param _value        number of BFP tokens\n', '    *   @param _txHash       transaction hash of investor&#39;s payment\n', '    */\n', '    function buyForInvestor(\n', '        address _holder, \n', '        uint _value, \n', '        string _txHash\n', '    ) \n', '        external \n', '        onlyController {\n', '        require(mint(_holder, _value));\n', '        LogBuyForInvestor(_holder, _value, _txHash);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev Function to batch mint tokens\n', '     * @param _to An array of addresses that will receive the minted tokens.\n', '     * @param _amount An array with the amounts of tokens each address will get minted.\n', '     * @return A boolean that indicates whether the operation was successful.\n', '     */\n', '    function batchDrop(\n', '        address[] _to, \n', '        uint[] _amount) \n', '        external\n', '        onlyAirDropManager {\n', '        require(_to.length == _amount.length);\n', '        for (uint i = 0; i < _to.length; i++) {\n', '            require(_to[i] != address(0));\n', '            require(mint(_to[i], _amount[i]));\n', '        }\n', '    }\n', '\n', '\n', '   /**\n', '    *   @dev Function to enable token transfers\n', '    */\n', '    function unfreeze() external onlyOwner {\n', '       tokensAreFrozen = false;\n', '    }\n', '\n', '\n', '   /**\n', '    *   @dev Function to enable token transfers\n', '    */\n', '    function freeze() external onlyOwner {\n', '       tokensAreFrozen = true;\n', '    }\n', '\n', '   /**\n', '    *   @dev Burn Tokens\n', '    *   @param _holder       token holder address which the tokens will be burnt\n', '    *   @param _value        number of tokens to burn\n', '    */\n', '    function burnTokens(address _holder, uint _value) external onlyOwner {\n', '        require(balances[_holder] > 0);\n', '        totalSupply = totalSupply.sub(_value);\n', '        balances[_holder] = balances[_holder].sub(_value);\n', '        Burn(_holder, _value);\n', '    }\n', '\n', '   /**\n', '    *   @dev Get balance of tokens holder\n', '    *   @param _holder        holder&#39;s address\n', '    *   @return               balance of investor\n', '    */\n', '    function balanceOf(address _holder) constant returns (uint) {\n', '         return balances[_holder];\n', '    }\n', '\n', '   /**\n', '    *   @dev Send coins\n', '    *   throws on any error rather then return a false flag to minimize\n', '    *   user errors\n', '    *   @param _to           target address\n', '    *   @param _amount       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transfer(address _to, uint _amount) public returns (bool) {\n', '        require(!tokensAreFrozen);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev An account/contract attempts to get the coins\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   @param _from         source address\n', '    *   @param _to           target address\n', '    *   @param _amount       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n', '        require(!tokensAreFrozen);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '     }\n', '\n', '\n', '   /**\n', '    *   @dev Allows another account/contract to spend some tokens on its behalf\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   also, to minimize the risk of the approve/transferFrom attack vector\n', '    *   approve has to be called twice in 2 separate transactions - once to\n', '    *   change the allowance to 0 and secondly to change it to the new allowance\n', '    *   value\n', '    *\n', '    *   @param _spender      approved address\n', '    *   @param _amount       allowance amount\n', '    *\n', '    *   @return true if the approval was successful\n', '    */\n', '    function approve(address _spender, uint _amount) public returns (bool) {\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    *   @param _owner        the address which owns the funds\n', '    *   @param _spender      the address which will spend the funds\n', '    *\n', '    *   @return              the amount of tokens still avaible for the spender\n', '    */\n', '    function allowance(address _owner, address _spender) constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '        /** \n', '    *   @dev Allows owner to transfer out any accidentally sent ERC20 tokens\n', '    *\n', '    *   @param tokenAddress  token address\n', '    *   @param tokens        transfer amount\n', '    *\n', '    *\n', '    */\n', '    function transferAnyTokens(address tokenAddress, uint tokens) \n', '        public\n', '        onlyOwner \n', '        returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['// Bond Film Platform Token smart contract.\n', '// Developed by Phenom.Team <info@phenom.team>\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' *   @title SafeMath\n', ' *   @dev Math operations with safety checks that throw on error\n', ' */\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint a, uint b) internal constant returns (uint) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal constant returns(uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal constant returns(uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal constant returns(uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' *   @title ERC20\n', ' *   @dev Standart ERC20 token interface\n', ' */\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply = 0;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping (address => uint)) allowed;\n', '\n', '    function balanceOf(address _owner) constant returns (uint);\n', '    function transfer(address _to, uint _value) returns (bool);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '    function approve(address _spender, uint _value) returns (bool);\n', '    function allowance(address _owner, address _spender) constant returns (uint);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '}\n', '\n', '/**\n', ' *   @title BondToken\n', ' *   @dev Bond Film Platform token contract\n', ' */\n', 'contract BondToken is ERC20 {\n', '    using SafeMath for uint;\n', '    string public name = "Bond Film Platform";\n', '    string public symbol = "BFP";\n', '    uint public decimals = 18;\n', '\n', '    // Ico contract address\n', '    address public owner;\n', '    address public controller;\n', '    address public airDropManager;\n', '    \n', '    event LogBuyForInvestor(address indexed investor, uint value, string txHash);\n', '    event Burn(address indexed from, uint value);\n', '    event Mint(address indexed to, uint value);\n', '    \n', '    // Tokens transfer ability status\n', '    bool public tokensAreFrozen = true;\n', '\n', '    // Allows execution by the owner only\n', '    modifier onlyOwner { \n', '        require(msg.sender == owner); \n', '        _; \n', '    }\n', '\n', '    // Allows execution by the controller only\n', '    modifier onlyController { \n', '        require(msg.sender == controller); \n', '        _; \n', '    }\n', '\n', '    // Allows execution by the air drop manager only\n', '    modifier onlyAirDropManager { \n', '        require(msg.sender == airDropManager); \n', '        _; \n', '    }\n', '\n', '   /**\n', '    *   @dev Contract constructor function sets Ico address\n', '    *   @param _owner        owner address\n', '    *   @param _controller   controller address\n', '    *   @param _airDropManager  air drop manager address\n', '    */\n', '    function BondToken(address _owner, address _controller, address _airDropManager) public {\n', '       owner = _owner;\n', '       controller = _controller;\n', '       airDropManager = _airDropManager; \n', '    }\n', '\n', '   /**\n', '    *   @dev Function to mint tokens\n', '    *   @param _holder       beneficiary address the tokens will be issued to\n', '    *   @param _value        number of tokens to issue\n', '    */\n', '    function mint(address _holder, uint _value) \n', '        private\n', '        returns (bool) {\n', '        require(_value > 0);\n', '        balances[_holder] = balances[_holder].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '        Transfer(address(0), _holder, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '   /**\n', '    *   @dev Function for handle token issues\n', '    *   @param _holder       beneficiary address the tokens will be issued to\n', '    *   @param _value        number of tokens to issue\n', '    */\n', '    function mintTokens(\n', '        address _holder, \n', '        uint _value) \n', '        external \n', '        onlyOwner {\n', '        require(mint(_holder, _value));\n', '        Mint(_holder, _value);\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to issues tokens for investors\n', '    *   @param _holder     address the tokens will be issued to\n', '    *   @param _value        number of BFP tokens\n', "    *   @param _txHash       transaction hash of investor's payment\n", '    */\n', '    function buyForInvestor(\n', '        address _holder, \n', '        uint _value, \n', '        string _txHash\n', '    ) \n', '        external \n', '        onlyController {\n', '        require(mint(_holder, _value));\n', '        LogBuyForInvestor(_holder, _value, _txHash);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev Function to batch mint tokens\n', '     * @param _to An array of addresses that will receive the minted tokens.\n', '     * @param _amount An array with the amounts of tokens each address will get minted.\n', '     * @return A boolean that indicates whether the operation was successful.\n', '     */\n', '    function batchDrop(\n', '        address[] _to, \n', '        uint[] _amount) \n', '        external\n', '        onlyAirDropManager {\n', '        require(_to.length == _amount.length);\n', '        for (uint i = 0; i < _to.length; i++) {\n', '            require(_to[i] != address(0));\n', '            require(mint(_to[i], _amount[i]));\n', '        }\n', '    }\n', '\n', '\n', '   /**\n', '    *   @dev Function to enable token transfers\n', '    */\n', '    function unfreeze() external onlyOwner {\n', '       tokensAreFrozen = false;\n', '    }\n', '\n', '\n', '   /**\n', '    *   @dev Function to enable token transfers\n', '    */\n', '    function freeze() external onlyOwner {\n', '       tokensAreFrozen = true;\n', '    }\n', '\n', '   /**\n', '    *   @dev Burn Tokens\n', '    *   @param _holder       token holder address which the tokens will be burnt\n', '    *   @param _value        number of tokens to burn\n', '    */\n', '    function burnTokens(address _holder, uint _value) external onlyOwner {\n', '        require(balances[_holder] > 0);\n', '        totalSupply = totalSupply.sub(_value);\n', '        balances[_holder] = balances[_holder].sub(_value);\n', '        Burn(_holder, _value);\n', '    }\n', '\n', '   /**\n', '    *   @dev Get balance of tokens holder\n', "    *   @param _holder        holder's address\n", '    *   @return               balance of investor\n', '    */\n', '    function balanceOf(address _holder) constant returns (uint) {\n', '         return balances[_holder];\n', '    }\n', '\n', '   /**\n', '    *   @dev Send coins\n', '    *   throws on any error rather then return a false flag to minimize\n', '    *   user errors\n', '    *   @param _to           target address\n', '    *   @param _amount       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transfer(address _to, uint _amount) public returns (bool) {\n', '        require(!tokensAreFrozen);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev An account/contract attempts to get the coins\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   @param _from         source address\n', '    *   @param _to           target address\n', '    *   @param _amount       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n', '        require(!tokensAreFrozen);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '     }\n', '\n', '\n', '   /**\n', '    *   @dev Allows another account/contract to spend some tokens on its behalf\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   also, to minimize the risk of the approve/transferFrom attack vector\n', '    *   approve has to be called twice in 2 separate transactions - once to\n', '    *   change the allowance to 0 and secondly to change it to the new allowance\n', '    *   value\n', '    *\n', '    *   @param _spender      approved address\n', '    *   @param _amount       allowance amount\n', '    *\n', '    *   @return true if the approval was successful\n', '    */\n', '    function approve(address _spender, uint _amount) public returns (bool) {\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    *   @param _owner        the address which owns the funds\n', '    *   @param _spender      the address which will spend the funds\n', '    *\n', '    *   @return              the amount of tokens still avaible for the spender\n', '    */\n', '    function allowance(address _owner, address _spender) constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '        /** \n', '    *   @dev Allows owner to transfer out any accidentally sent ERC20 tokens\n', '    *\n', '    *   @param tokenAddress  token address\n', '    *   @param tokens        transfer amount\n', '    *\n', '    *\n', '    */\n', '    function transferAnyTokens(address tokenAddress, uint tokens) \n', '        public\n', '        onlyOwner \n', '        returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
