['pragma solidity ^0.4.18;\n', '\n', '// File: src/Token/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: src/Token/OracleOwnable.sol\n', '\n', 'contract OracleOwnable is Ownable {\n', '\n', '    address public oracle;\n', '\n', '    modifier onlyOracle() {\n', '        require(msg.sender == oracle);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOracleOrOwner() {\n', '        require(msg.sender == oracle || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setOracle(address newOracle) public onlyOracleOrOwner {\n', '        if (newOracle != address(0)) {\n', '            oracle = newOracle;\n', '        }\n', '\n', '    }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: src/Token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, OracleOwnable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: src/Token/ReleasableToken.sol\n', '\n', 'contract ReleasableToken is MintableToken {\n', '    bool public released = false;\n', '\n', '    event Release();\n', '    event Burn(address, uint);\n', '\n', '    modifier isReleased () {\n', '        require(mintingFinished);\n', '        require(released);\n', '        _;\n', '    }\n', '\n', '    function release() public onlyOwner returns (bool) {\n', '        require(mintingFinished);\n', '        require(!released);\n', '        released = true;\n', '        Release();\n', '\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public isReleased returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public isReleased returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function burn(address _to, uint _amount) public onlyOwner {\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        balances[_to] = balances[_to].sub(_amount);\n', '        Burn(_to, _amount);\n', '    }\n', '}\n', '\n', '// File: src/Token/StageVestingToken.sol\n', '\n', 'contract StageVestingToken is ReleasableToken {\n', '    uint256 public stageCount;\n', '    uint256 public stage;\n', '    bool public isCheckStage;\n', '\n', '    mapping(uint => mapping(address => uint256)) internal stageVesting;\n', '\n', '    function StageVestingToken () public{\n', '        stageCount = 4;\n', '        stage = 0;\n', '        isCheckStage = true;\n', '    }\n', '\n', '    function setStage(uint256 _stage) public onlyOracleOrOwner {\n', '        stage = _stage;\n', '    }\n', '\n', '    function setStageCount(uint256 _stageCount) public onlyOracleOrOwner {\n', '        stageCount = _stageCount;\n', '    }\n', '\n', '    function setIsCheckStage(bool _isCheckStage) public onlyOracleOrOwner {\n', '        isCheckStage = _isCheckStage;\n', '    }\n', '\n', '    function getHolderLimit(address _holder) view public returns (uint256){\n', '        return stageVesting[stage][_holder];\n', '    }\n', '\n', '    function canUseTokens(address _holder, uint256 _amount) view internal returns (bool){\n', '        if (!isCheckStage) {\n', '            return true;\n', '        }\n', '        return (getHolderLimit(_holder) >= _amount);\n', '    }\n', '\n', '    function addOnOneStage(address _to, uint256 _amount, uint256 _stage) internal {\n', '        require(_stage < stageCount);\n', '        stageVesting[_stage][_to] = stageVesting[_stage][_to].add(_amount);\n', '    }\n', '\n', '    function subOnOneStage(address _to, uint256 _amount, uint256 _stage) internal {\n', '        require(_stage < stageCount);\n', '        if (stageVesting[_stage][_to] >= _amount) {\n', '            stageVesting[_stage][_to] = stageVesting[_stage][_to].sub(_amount);\n', '        } else {\n', '            stageVesting[_stage][_to] = 0;\n', '        }\n', '    }\n', '\n', '    function addOnStage(address _to, uint256 _amount) internal returns (bool){\n', '        return addOnStage(_to, _amount, stage);\n', '    }\n', '\n', '    function addOnStage(address _to, uint256 _amount, uint256 _stage) internal returns (bool){\n', '        if (!isCheckStage) {\n', '            return true;\n', '        }\n', '        for (uint256 i = _stage; i < stageCount; i++) {\n', '            addOnOneStage(_to, _amount, i);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function subOnStage(address _to, uint256 _amount) internal returns (bool){\n', '        return subOnStage(_to, _amount, stage);\n', '    }\n', '\n', '    function subOnStage(address _to, uint256 _amount, uint256 _stage) internal returns (bool){\n', '        if (!isCheckStage) {\n', '            return true;\n', '        }\n', '\n', '        for (uint256 i = _stage; i < stageCount; i++) {\n', '            subOnOneStage(_to, _amount, i);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount, uint256 _stage) onlyOwner canMint public returns (bool) {\n', '        super.mint(_to, _amount);\n', '        addOnStage(_to, _amount, _stage);\n', '    }\n', '\n', '    function burn(address _to, uint _amount, uint256 _stage) public onlyOwner canMint{\n', '        super.burn(_to, _amount);\n', '        subOnStage(_to, _amount, _stage);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(canUseTokens(msg.sender, _value));\n', '        require(subOnStage(msg.sender, _value));\n', '        require(addOnStage(_to, _value));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(canUseTokens(_from, _value));\n', '        require(subOnStage(_from, _value));\n', '        require(addOnStage(_to, _value));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '// File: src/Token/MetabaseToken.sol\n', '\n', 'contract MetabaseToken is StageVestingToken {\n', '\n', '    string public constant name = "METABASE";\n', '    string public constant symbol = "MBT";\n', '    uint256 public constant decimals = 18;\n', '\n', '}\n', '\n', '// File: src/Store/MetabaseCrowdSale.sol\n', '\n', 'contract MetabaseCrowdSale is OracleOwnable {\n', '    using SafeMath for uint;\n', '\n', '    MetabaseToken token;\n', '\n', '    event Transaction(address indexed beneficiary, string currency, uint currencyAmount, uint rate, uint tokenAmount, uint stage, bool isNegative);\n', '\n', '\n', '    address[] currencyInvestors;\n', '    mapping(address => bool) currencyInvestorsAddresses;\n', '\n', '    function setToken(address _token) public onlyOracleOrOwner {\n', '        token = MetabaseToken(_token);\n', '    }\n', '\n', '    function addInvestorIfNotExists(address _beneficiary) internal {\n', '        if (!currencyInvestorsAddresses[_beneficiary]) {\n', '            currencyInvestors.push(_beneficiary);\n', '        }\n', '    }\n', '\n', '    function buy(address _beneficiary, string _currency, uint _currencyAmount, uint _rate, uint _tokenAmount, uint _stage) public onlyOracleOrOwner {\n', '        addInvestorIfNotExists(_beneficiary);\n', '\n', '        token.mint(_beneficiary, _tokenAmount, _stage);\n', '\n', '        Transaction(_beneficiary, _currency, _currencyAmount, _rate, _tokenAmount, _stage, false);\n', '    }\n', '\n', '    function refund(address _beneficiary, string _currency, uint _currencyAmount, uint _tokenAmount, uint _stage) public onlyOracleOrOwner {\n', '        addInvestorIfNotExists(_beneficiary);\n', '\n', '        token.burn(_beneficiary, _tokenAmount, _stage);\n', '\n', '        Transaction(_beneficiary, _currency, _currencyAmount, 0, _tokenAmount, _stage, true);\n', '    }\n', '\n', '    function tokenTransferOwnership(address _owner) onlyOracleOrOwner public {\n', '        token.transferOwnership(_owner);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: src/Token/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: src/Token/OracleOwnable.sol\n', '\n', 'contract OracleOwnable is Ownable {\n', '\n', '    address public oracle;\n', '\n', '    modifier onlyOracle() {\n', '        require(msg.sender == oracle);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOracleOrOwner() {\n', '        require(msg.sender == oracle || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setOracle(address newOracle) public onlyOracleOrOwner {\n', '        if (newOracle != address(0)) {\n', '            oracle = newOracle;\n', '        }\n', '\n', '    }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: src/Token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, OracleOwnable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: src/Token/ReleasableToken.sol\n', '\n', 'contract ReleasableToken is MintableToken {\n', '    bool public released = false;\n', '\n', '    event Release();\n', '    event Burn(address, uint);\n', '\n', '    modifier isReleased () {\n', '        require(mintingFinished);\n', '        require(released);\n', '        _;\n', '    }\n', '\n', '    function release() public onlyOwner returns (bool) {\n', '        require(mintingFinished);\n', '        require(!released);\n', '        released = true;\n', '        Release();\n', '\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public isReleased returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public isReleased returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function burn(address _to, uint _amount) public onlyOwner {\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        balances[_to] = balances[_to].sub(_amount);\n', '        Burn(_to, _amount);\n', '    }\n', '}\n', '\n', '// File: src/Token/StageVestingToken.sol\n', '\n', 'contract StageVestingToken is ReleasableToken {\n', '    uint256 public stageCount;\n', '    uint256 public stage;\n', '    bool public isCheckStage;\n', '\n', '    mapping(uint => mapping(address => uint256)) internal stageVesting;\n', '\n', '    function StageVestingToken () public{\n', '        stageCount = 4;\n', '        stage = 0;\n', '        isCheckStage = true;\n', '    }\n', '\n', '    function setStage(uint256 _stage) public onlyOracleOrOwner {\n', '        stage = _stage;\n', '    }\n', '\n', '    function setStageCount(uint256 _stageCount) public onlyOracleOrOwner {\n', '        stageCount = _stageCount;\n', '    }\n', '\n', '    function setIsCheckStage(bool _isCheckStage) public onlyOracleOrOwner {\n', '        isCheckStage = _isCheckStage;\n', '    }\n', '\n', '    function getHolderLimit(address _holder) view public returns (uint256){\n', '        return stageVesting[stage][_holder];\n', '    }\n', '\n', '    function canUseTokens(address _holder, uint256 _amount) view internal returns (bool){\n', '        if (!isCheckStage) {\n', '            return true;\n', '        }\n', '        return (getHolderLimit(_holder) >= _amount);\n', '    }\n', '\n', '    function addOnOneStage(address _to, uint256 _amount, uint256 _stage) internal {\n', '        require(_stage < stageCount);\n', '        stageVesting[_stage][_to] = stageVesting[_stage][_to].add(_amount);\n', '    }\n', '\n', '    function subOnOneStage(address _to, uint256 _amount, uint256 _stage) internal {\n', '        require(_stage < stageCount);\n', '        if (stageVesting[_stage][_to] >= _amount) {\n', '            stageVesting[_stage][_to] = stageVesting[_stage][_to].sub(_amount);\n', '        } else {\n', '            stageVesting[_stage][_to] = 0;\n', '        }\n', '    }\n', '\n', '    function addOnStage(address _to, uint256 _amount) internal returns (bool){\n', '        return addOnStage(_to, _amount, stage);\n', '    }\n', '\n', '    function addOnStage(address _to, uint256 _amount, uint256 _stage) internal returns (bool){\n', '        if (!isCheckStage) {\n', '            return true;\n', '        }\n', '        for (uint256 i = _stage; i < stageCount; i++) {\n', '            addOnOneStage(_to, _amount, i);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function subOnStage(address _to, uint256 _amount) internal returns (bool){\n', '        return subOnStage(_to, _amount, stage);\n', '    }\n', '\n', '    function subOnStage(address _to, uint256 _amount, uint256 _stage) internal returns (bool){\n', '        if (!isCheckStage) {\n', '            return true;\n', '        }\n', '\n', '        for (uint256 i = _stage; i < stageCount; i++) {\n', '            subOnOneStage(_to, _amount, i);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount, uint256 _stage) onlyOwner canMint public returns (bool) {\n', '        super.mint(_to, _amount);\n', '        addOnStage(_to, _amount, _stage);\n', '    }\n', '\n', '    function burn(address _to, uint _amount, uint256 _stage) public onlyOwner canMint{\n', '        super.burn(_to, _amount);\n', '        subOnStage(_to, _amount, _stage);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(canUseTokens(msg.sender, _value));\n', '        require(subOnStage(msg.sender, _value));\n', '        require(addOnStage(_to, _value));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(canUseTokens(_from, _value));\n', '        require(subOnStage(_from, _value));\n', '        require(addOnStage(_to, _value));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '// File: src/Token/MetabaseToken.sol\n', '\n', 'contract MetabaseToken is StageVestingToken {\n', '\n', '    string public constant name = "METABASE";\n', '    string public constant symbol = "MBT";\n', '    uint256 public constant decimals = 18;\n', '\n', '}\n', '\n', '// File: src/Store/MetabaseCrowdSale.sol\n', '\n', 'contract MetabaseCrowdSale is OracleOwnable {\n', '    using SafeMath for uint;\n', '\n', '    MetabaseToken token;\n', '\n', '    event Transaction(address indexed beneficiary, string currency, uint currencyAmount, uint rate, uint tokenAmount, uint stage, bool isNegative);\n', '\n', '\n', '    address[] currencyInvestors;\n', '    mapping(address => bool) currencyInvestorsAddresses;\n', '\n', '    function setToken(address _token) public onlyOracleOrOwner {\n', '        token = MetabaseToken(_token);\n', '    }\n', '\n', '    function addInvestorIfNotExists(address _beneficiary) internal {\n', '        if (!currencyInvestorsAddresses[_beneficiary]) {\n', '            currencyInvestors.push(_beneficiary);\n', '        }\n', '    }\n', '\n', '    function buy(address _beneficiary, string _currency, uint _currencyAmount, uint _rate, uint _tokenAmount, uint _stage) public onlyOracleOrOwner {\n', '        addInvestorIfNotExists(_beneficiary);\n', '\n', '        token.mint(_beneficiary, _tokenAmount, _stage);\n', '\n', '        Transaction(_beneficiary, _currency, _currencyAmount, _rate, _tokenAmount, _stage, false);\n', '    }\n', '\n', '    function refund(address _beneficiary, string _currency, uint _currencyAmount, uint _tokenAmount, uint _stage) public onlyOracleOrOwner {\n', '        addInvestorIfNotExists(_beneficiary);\n', '\n', '        token.burn(_beneficiary, _tokenAmount, _stage);\n', '\n', '        Transaction(_beneficiary, _currency, _currencyAmount, 0, _tokenAmount, _stage, true);\n', '    }\n', '\n', '    function tokenTransferOwnership(address _owner) onlyOracleOrOwner public {\n', '        token.transferOwnership(_owner);\n', '    }\n', '}']
