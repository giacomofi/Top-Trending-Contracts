['pragma solidity ^0.4.16;\n', 'contract Ownable {\n', '    address owner;\n', '    \n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '    \n', '}\n', '\n', 'contract SimpleTokenCoin is Ownable {\n', '    \n', '    string public constant name = "ZakharN Eternal Token";\n', '    \n', '    string public constant symbol = "ZNET";\n', '    \n', '    uint32 public constant decimals = 18;\n', '    \n', '    uint public totalSupply;\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    \n', '    function balanceOf(address _owner) constant public returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        require(balances[msg.sender]>=_value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        assert(balances[_to]>=_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        assert(balances[_to]>=_value);\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender,_spender,_value);\n', '        return false;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    \n', '}\n', '\n', 'contract Crowdsale is Ownable, SimpleTokenCoin{\n', '\n', '    function mint(address _to, uint _value) public onlyOwner returns (bool){\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        balances[_to] +=_value;\n', '        totalSupply += _value;\n', '        Mint(_to, _value);\n', '    }    \n', '    \n', '    //payable\n', '    function() external payable {\n', '        uint _summa = msg.value; //ether\n', '        createTokens(msg.sender, _summa);\n', '    }\n', '\n', '    function createTokens(address _to, uint _value) public{\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        balances[_to] +=_value;\n', '        totalSupply += _value;\n', '        Mint(_to, _value);\n', '    }\n', '    \n', '    //refund\n', '    function refund() public {\n', '    }\n', '    \n', '    function giveMeCoins(uint256 _value) public onlyOwner returns(uint){\n', '        require(this.balance>=_value);\n', '        owner.transfer(_value);\n', '        return this.balance;\n', '    }\n', '    event Mint (address, uint);\n', '}']