['pragma solidity ^0.4.8;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', 'contract CCTHCoin is SafeMath{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\taddress public owner;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\tmapping (address => uint256) public freezeOf;\n', '    \n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '        \n', '        string tokenName;\n', '        uint8 decimalUnits;\n', '        string tokenSymbol;\n', '        uint256 public mined_coin_supply = 0;\n', '        uint256 public pre_mined_supply = 0;\n', '        uint256 public circulating_supply = 0;\n', '        uint256 public reward = 5000000000;\n', '        uint256 public timeOfLastHalving = now;\n', '        uint public timeOfLastIncrease = now;\n', '    \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function CCTHCoin() {\n', '        //balanceOf[msg.sender] = 2100000000000000;              // Give the creator all initial tokens\n', '        totalSupply = 2100000000000000;                        // Update total supply\n', '        name = "CryptoChips Coin";                            // Set the name for display purposes\n', '        symbol = "CCTH";                               // Set the symbol for display purposes\n', '        decimals = 8;                            // Amount of decimals for display purposes\n', '\t\towner = msg.sender;\n', '        timeOfLastHalving = now;\n', '    }\n', '\n', '    function updateSupply() internal returns (uint256) {\n', '\n', '      if (now - timeOfLastHalving >= 2100000 minutes) {\n', '        reward /= 2;\n', '        timeOfLastHalving = now;\n', '      }\n', '\n', '      if (now - timeOfLastIncrease >= 150 seconds) {\n', '        uint256 increaseAmount = ((now - timeOfLastIncrease) / 60 seconds) * reward;\n', '      if (totalSupply>(pre_mined_supply+increaseAmount))\n', '        {\n', '          pre_mined_supply += increaseAmount;\n', '          mined_coin_supply += increaseAmount;\n', '          timeOfLastIncrease = now;\n', '        }\n', '      }\n', '\n', '      circulating_supply = pre_mined_supply - mined_coin_supply;\n', '\n', '      return circulating_supply;\n', '    }\n', '    \n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);           // Check if the sender has enough\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);               // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n', '\n', '        /* Notify anyone listening that the transfer took place */\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '    }\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;                                           // Check if the sender has enough\n', '\t\tif (_value <= 0) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);            // Subtract from the sender\n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction freeze(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;                                       // Check if the sender has enough\n', '\t\tif (_value <= 0) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);        // Subtract from the sender\n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n', '        Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction unfreeze(uint256 _value) returns (bool success) {\n', '        if (freezeOf[msg.sender] < _value) throw;                                       // Check if the sender has enough\n', '\t\tif (_value <= 0) throw; \n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);          // Subtract from the sender\n', '\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n', '        Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\t// transfer balance to owner\n', '\tfunction withdrawEther(uint256 amount) {\n', '\t\tif(msg.sender != owner)throw;\n', '\t\towner.transfer(amount);\n', '\t}\n', '\n', '\n', '    \n', '    function mint(uint256 _value) {\n', '        if(msg.sender != owner)throw;\n', '        else{\n', '            mined_coin_supply -= _value; // Remove from unspent supply\n', '            balanceOf[msg.sender] =SafeMath.safeAdd(balanceOf[msg.sender], _value);  // Add the same to the recipient\n', '            updateSupply();\n', '        }\n', '\n', '    }\n', '\t\n', '\t// can accept ether\n', '\tfunction() payable {\n', '    }\n', '}']
['pragma solidity ^0.4.8;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', 'contract CCTHCoin is SafeMath{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\taddress public owner;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\tmapping (address => uint256) public freezeOf;\n', '    \n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\t\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '        \n', '        string tokenName;\n', '        uint8 decimalUnits;\n', '        string tokenSymbol;\n', '        uint256 public mined_coin_supply = 0;\n', '        uint256 public pre_mined_supply = 0;\n', '        uint256 public circulating_supply = 0;\n', '        uint256 public reward = 5000000000;\n', '        uint256 public timeOfLastHalving = now;\n', '        uint public timeOfLastIncrease = now;\n', '    \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function CCTHCoin() {\n', '        //balanceOf[msg.sender] = 2100000000000000;              // Give the creator all initial tokens\n', '        totalSupply = 2100000000000000;                        // Update total supply\n', '        name = "CryptoChips Coin";                            // Set the name for display purposes\n', '        symbol = "CCTH";                               // Set the symbol for display purposes\n', '        decimals = 8;                            // Amount of decimals for display purposes\n', '\t\towner = msg.sender;\n', '        timeOfLastHalving = now;\n', '    }\n', '\n', '    function updateSupply() internal returns (uint256) {\n', '\n', '      if (now - timeOfLastHalving >= 2100000 minutes) {\n', '        reward /= 2;\n', '        timeOfLastHalving = now;\n', '      }\n', '\n', '      if (now - timeOfLastIncrease >= 150 seconds) {\n', '        uint256 increaseAmount = ((now - timeOfLastIncrease) / 60 seconds) * reward;\n', '      if (totalSupply>(pre_mined_supply+increaseAmount))\n', '        {\n', '          pre_mined_supply += increaseAmount;\n', '          mined_coin_supply += increaseAmount;\n', '          timeOfLastIncrease = now;\n', '        }\n', '      }\n', '\n', '      circulating_supply = pre_mined_supply - mined_coin_supply;\n', '\n', '      return circulating_supply;\n', '    }\n', '    \n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);           // Check if the sender has enough\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);               // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n', '\n', '        /* Notify anyone listening that the transfer took place */\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '    }\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;                                           // Check if the sender has enough\n', '\t\tif (_value <= 0) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);            // Subtract from the sender\n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction freeze(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;                                       // Check if the sender has enough\n', '\t\tif (_value <= 0) throw; \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);        // Subtract from the sender\n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n', '        Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction unfreeze(uint256 _value) returns (bool success) {\n', '        if (freezeOf[msg.sender] < _value) throw;                                       // Check if the sender has enough\n', '\t\tif (_value <= 0) throw; \n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);          // Subtract from the sender\n', '\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n', '        Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\t// transfer balance to owner\n', '\tfunction withdrawEther(uint256 amount) {\n', '\t\tif(msg.sender != owner)throw;\n', '\t\towner.transfer(amount);\n', '\t}\n', '\n', '\n', '    \n', '    function mint(uint256 _value) {\n', '        if(msg.sender != owner)throw;\n', '        else{\n', '            mined_coin_supply -= _value; // Remove from unspent supply\n', '            balanceOf[msg.sender] =SafeMath.safeAdd(balanceOf[msg.sender], _value);  // Add the same to the recipient\n', '            updateSupply();\n', '        }\n', '\n', '    }\n', '\t\n', '\t// can accept ether\n', '\tfunction() payable {\n', '    }\n', '}']
