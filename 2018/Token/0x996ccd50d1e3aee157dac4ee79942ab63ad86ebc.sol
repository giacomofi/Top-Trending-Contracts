['/*\n', '  Copyright 2017 Sharder Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '  ################ Sharder-Token-v2.0 ###############\n', '    a) Adding the emergency transfer functionality for owner.\n', '    b) Removing the logic of crowdsale according to standard MintToken in order to improve the neatness and\n', '    legibility of the Sharder smart contract coding.\n', '    c) Adding the broadcast event &#39;Frozen&#39;.\n', '    d) Changing the parameters of name, symbol, decimal, etc. to lower-case according to convention. Adjust format of input paramters.\n', '    e) The global parameter is added to our smart contact in order to avoid that the exchanges trade Sharder tokens\n', '    before officials partnering with Sharder.\n', '    f) Add holder array to facilitate the exchange of the current ERC-20 token to the Sharder Chain token later this year\n', '    when Sharder Chain is online.\n', '    g) Lockup and lock-up query functions.\n', '    The deplyed online contract you can found at: https://etherscan.io/address/XXXXXX\n', '\n', '    Sharder-Token-v1.0 is expired. You can check the code and get the details on branch &#39;sharder-token-v1.0&#39;.\n', '*/\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Sharder Token v2.0. SS(Sharder) is upgrade from SS(Sharder Storage).\n', '* @author Ben - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c0b8b980b3a8a1b2a4a5b2eeafb2a7">[email&#160;protected]</a>>.\n', '* @dev ERC-20: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '*/\n', 'contract SharderToken {\n', '    using SafeMath for uint;\n', '    string public name = "Sharder";\n', '    string public symbol = "SS";\n', '    uint8 public  decimals = 18;\n', '\n', '    /// +--------------------------------------------------------------+\n', '    /// |                 SS(Sharder) Token Issue Plan                 |\n', '    /// +--------------------------------------------------------------+\n', '    /// |                    First Round(Crowdsale)                    |\n', '    /// +--------------------------------------------------------------+\n', '    /// |     Total Sale    |      Airdrop      |  Community Reserve   |\n', '    /// +--------------------------------------------------------------+\n', '    /// |     250,000,000   |     50,000,000    |     50,000,000       |\n', '    /// +--------------------------------------------------------------+\n', '    /// | Team Reserve(50,000,000 SS): Issue in 3 years period         |\n', '    /// +--------------------------------------------------------------+\n', '    /// | System Reward(100,000,000 SS): Reward by Sharder Chain Auto  |\n', '    /// +--------------------------------------------------------------+\n', '    uint256 public totalSupply = 350000000000000000000000000;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    /// The owner of contract\n', '    address public owner;\n', '\n', '    /// The admin account of contract\n', '    address public admin;\n', '\n', '    mapping (address => bool) internal accountLockup;\n', '    mapping (address => uint) public accountLockupTime;\n', '    mapping (address => bool) public frozenAccounts;\n', '\n', '    mapping (address => uint) internal holderIndex;\n', '    address[] internal holders;\n', '\n', '    ///First round tokens whether isssued.\n', '    bool internal firstRoundTokenIssued = false;\n', '\n', '    /// Contract pause state\n', '    bool public paused = true;\n', '\n', '    /// Issue event index starting from 0.\n', '    uint256 internal issueIndex = 0;\n', '\n', '    // Emitted when a function is invocated without the specified preconditions.\n', '    event InvalidState(bytes msg);\n', '\n', '    // This notifies clients about the token issued.\n', '    event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount);\n', '\n', '    // This notifies clients about the amount to transfer\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount to approve\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    // This notifies clients about the account frozen\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    // This notifies clients about the pause\n', '    event Pause();\n', '\n', '    // This notifies clients about the unpause\n', '    event Unpause();\n', '\n', '\n', '    /*\n', '     * MODIFIERS\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when account not frozen.\n', '     */\n', '    modifier isNotFrozen {\n', '        require(frozenAccounts[msg.sender] != true && now > accountLockupTime[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier isNotPaused() {\n', '        require((msg.sender == owner && paused) || (msg.sender == admin && paused) || !paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier isPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal isNotFrozen isNotPaused {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        // Update holders\n', '        addOrUpdateHolder(_from);\n', '        addOrUpdateHolder(_to);\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _transferTokensWithDecimal The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint _transferTokensWithDecimal) public {\n', '        _transfer(msg.sender, _to, _transferTokensWithDecimal);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _transferTokensWithDecimal uint the amout of tokens to be transfered\n', '    */\n', '    function transferFrom(address _from, address _to, uint _transferTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n', '        require(_transferTokensWithDecimal <= allowance[_from][msg.sender]);\n', '        // Check allowance\n', '        allowance[_from][msg.sender] -= _transferTokensWithDecimal;\n', '        _transfer(_from, _to, _transferTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     * Allows `_spender` to spend no more than `_approveTokensWithDecimal` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _approveTokensWithDecimal the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _approveTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n', '        allowance[msg.sender][_spender] = _approveTokensWithDecimal;\n', '        Approval(msg.sender, _spender, _approveTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     * Remove `_value` tokens from the system irreversibly\n', '     * @param _burnedTokensWithDecimal the amount of reserve tokens. !!IMPORTANT is 18 DECIMALS\n', '    */\n', '    function burn(uint256 _burnedTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _burnedTokensWithDecimal);\n', '        /// Check if the sender has enough\n', '        balanceOf[msg.sender] -= _burnedTokensWithDecimal;\n', '        /// Subtract from the sender\n', '        totalSupply -= _burnedTokensWithDecimal;\n', '        Burn(msg.sender, _burnedTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     * @param _from the address of the sender\n', '     * @param _burnedTokensWithDecimal the amount of reserve tokens. !!! IMPORTANT is 18 DECIMALS\n', '    */\n', '    function burnFrom(address _from, uint256 _burnedTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n', '        require(balanceOf[_from] >= _burnedTokensWithDecimal);\n', '        /// Check if the targeted balance is enough\n', '        require(_burnedTokensWithDecimal <= allowance[_from][msg.sender]);\n', '        /// Check allowance\n', '        balanceOf[_from] -= _burnedTokensWithDecimal;\n', '        /// Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _burnedTokensWithDecimal;\n', '        /// Subtract from the sender&#39;s allowance\n', '        totalSupply -= _burnedTokensWithDecimal;\n', '        Burn(_from, _burnedTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Add holder addr into arrays.\n', '     * @param _holderAddr the address of the holder\n', '    */\n', '    function addOrUpdateHolder(address _holderAddr) internal {\n', '        // Check and add holder to array\n', '        if (holderIndex[_holderAddr] == 0) {\n', '            holderIndex[_holderAddr] = holders.length++;\n', '        }\n', '        holders[holderIndex[_holderAddr]] = _holderAddr;\n', '    }\n', '\n', '    /**\n', '     * CONSTRUCTOR\n', '     * @dev Initialize the Sharder Token v2.0\n', '     */\n', '    function SharderToken() public {\n', '        owner = msg.sender;\n', '        admin = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '    * @dev Set admin account to manage contract.\n', '    */\n', '    function setAdmin(address _address) public onlyOwner {\n', '        admin = _address;\n', '    }\n', '\n', '    /**\n', '    * @dev Issue first round tokens to `owner` address.\n', '    */\n', '    function issueFirstRoundToken() public onlyOwner {\n', '        require(!firstRoundTokenIssued);\n', '\n', '        balanceOf[owner] = balanceOf[owner].add(totalSupply);\n', '        Issue(issueIndex++, owner, 0, totalSupply);\n', '        addOrUpdateHolder(owner);\n', '        firstRoundTokenIssued = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Issue tokens for reserve.\n', '     * @param _issueTokensWithDecimal the amount of reserve tokens. !!IMPORTANT is 18 DECIMALS\n', '    */\n', '    function issueReserveToken(uint256 _issueTokensWithDecimal) onlyOwner public {\n', '        balanceOf[owner] = balanceOf[owner].add(_issueTokensWithDecimal);\n', '        totalSupply = totalSupply.add(_issueTokensWithDecimal);\n', '        Issue(issueIndex++, owner, 0, _issueTokensWithDecimal);\n', '    }\n', '\n', '    /**\n', '    * @dev Frozen or unfrozen account.\n', '    */\n', '    function changeFrozenStatus(address _address, bool _frozenStatus) public onlyAdmin {\n', '        frozenAccounts[_address] = _frozenStatus;\n', '    }\n', '\n', '    /**\n', '    * @dev Lockup account till the date. Can&#39;t lock-up again when this account locked already.\n', '    * 1 year = 31536000 seconds, 0.5 year = 15768000 seconds\n', '    */\n', '    function lockupAccount(address _address, uint _lockupSeconds) public onlyAdmin {\n', '        require((accountLockup[_address] && now > accountLockupTime[_address]) || !accountLockup[_address]);\n', '        // lock-up account\n', '        accountLockupTime[_address] = now + _lockupSeconds;\n', '        accountLockup[_address] = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the cuurent ss holder count.\n', '    */\n', '    function getHolderCount() public constant returns (uint _holdersCount){\n', '        return holders.length - 1;\n', '    }\n', '\n', '    /*\n', '    * @dev Get the current ss holder addresses.\n', '    */\n', '    function getHolders() public onlyAdmin constant returns (address[] _holders){\n', '        return holders;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyAdmin isNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyAdmin isPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '\n', '    function setSymbol(string _symbol) public onlyOwner {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function setName(string _name) public onlyOwner {\n', '        name = _name;\n', '    }\n', '\n', '    /// @dev This default function reject anyone to purchase the SS(Sharder) token after crowdsale finished.\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '}']
['/*\n', '  Copyright 2017 Sharder Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '  ################ Sharder-Token-v2.0 ###############\n', '    a) Adding the emergency transfer functionality for owner.\n', '    b) Removing the logic of crowdsale according to standard MintToken in order to improve the neatness and\n', '    legibility of the Sharder smart contract coding.\n', "    c) Adding the broadcast event 'Frozen'.\n", '    d) Changing the parameters of name, symbol, decimal, etc. to lower-case according to convention. Adjust format of input paramters.\n', '    e) The global parameter is added to our smart contact in order to avoid that the exchanges trade Sharder tokens\n', '    before officials partnering with Sharder.\n', '    f) Add holder array to facilitate the exchange of the current ERC-20 token to the Sharder Chain token later this year\n', '    when Sharder Chain is online.\n', '    g) Lockup and lock-up query functions.\n', '    The deplyed online contract you can found at: https://etherscan.io/address/XXXXXX\n', '\n', "    Sharder-Token-v1.0 is expired. You can check the code and get the details on branch 'sharder-token-v1.0'.\n", '*/\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Sharder Token v2.0. SS(Sharder) is upgrade from SS(Sharder Storage).\n', '* @author Ben - <xy@sharder.org>.\n', '* @dev ERC-20: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '*/\n', 'contract SharderToken {\n', '    using SafeMath for uint;\n', '    string public name = "Sharder";\n', '    string public symbol = "SS";\n', '    uint8 public  decimals = 18;\n', '\n', '    /// +--------------------------------------------------------------+\n', '    /// |                 SS(Sharder) Token Issue Plan                 |\n', '    /// +--------------------------------------------------------------+\n', '    /// |                    First Round(Crowdsale)                    |\n', '    /// +--------------------------------------------------------------+\n', '    /// |     Total Sale    |      Airdrop      |  Community Reserve   |\n', '    /// +--------------------------------------------------------------+\n', '    /// |     250,000,000   |     50,000,000    |     50,000,000       |\n', '    /// +--------------------------------------------------------------+\n', '    /// | Team Reserve(50,000,000 SS): Issue in 3 years period         |\n', '    /// +--------------------------------------------------------------+\n', '    /// | System Reward(100,000,000 SS): Reward by Sharder Chain Auto  |\n', '    /// +--------------------------------------------------------------+\n', '    uint256 public totalSupply = 350000000000000000000000000;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    /// The owner of contract\n', '    address public owner;\n', '\n', '    /// The admin account of contract\n', '    address public admin;\n', '\n', '    mapping (address => bool) internal accountLockup;\n', '    mapping (address => uint) public accountLockupTime;\n', '    mapping (address => bool) public frozenAccounts;\n', '\n', '    mapping (address => uint) internal holderIndex;\n', '    address[] internal holders;\n', '\n', '    ///First round tokens whether isssued.\n', '    bool internal firstRoundTokenIssued = false;\n', '\n', '    /// Contract pause state\n', '    bool public paused = true;\n', '\n', '    /// Issue event index starting from 0.\n', '    uint256 internal issueIndex = 0;\n', '\n', '    // Emitted when a function is invocated without the specified preconditions.\n', '    event InvalidState(bytes msg);\n', '\n', '    // This notifies clients about the token issued.\n', '    event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount);\n', '\n', '    // This notifies clients about the amount to transfer\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount to approve\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    // This notifies clients about the account frozen\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    // This notifies clients about the pause\n', '    event Pause();\n', '\n', '    // This notifies clients about the unpause\n', '    event Unpause();\n', '\n', '\n', '    /*\n', '     * MODIFIERS\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when account not frozen.\n', '     */\n', '    modifier isNotFrozen {\n', '        require(frozenAccounts[msg.sender] != true && now > accountLockupTime[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier isNotPaused() {\n', '        require((msg.sender == owner && paused) || (msg.sender == admin && paused) || !paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier isPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal isNotFrozen isNotPaused {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        // Update holders\n', '        addOrUpdateHolder(_from);\n', '        addOrUpdateHolder(_to);\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _transferTokensWithDecimal The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint _transferTokensWithDecimal) public {\n', '        _transfer(msg.sender, _to, _transferTokensWithDecimal);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _transferTokensWithDecimal uint the amout of tokens to be transfered\n', '    */\n', '    function transferFrom(address _from, address _to, uint _transferTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n', '        require(_transferTokensWithDecimal <= allowance[_from][msg.sender]);\n', '        // Check allowance\n', '        allowance[_from][msg.sender] -= _transferTokensWithDecimal;\n', '        _transfer(_from, _to, _transferTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     * Allows `_spender` to spend no more than `_approveTokensWithDecimal` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _approveTokensWithDecimal the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _approveTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n', '        allowance[msg.sender][_spender] = _approveTokensWithDecimal;\n', '        Approval(msg.sender, _spender, _approveTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     * Remove `_value` tokens from the system irreversibly\n', '     * @param _burnedTokensWithDecimal the amount of reserve tokens. !!IMPORTANT is 18 DECIMALS\n', '    */\n', '    function burn(uint256 _burnedTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _burnedTokensWithDecimal);\n', '        /// Check if the sender has enough\n', '        balanceOf[msg.sender] -= _burnedTokensWithDecimal;\n', '        /// Subtract from the sender\n', '        totalSupply -= _burnedTokensWithDecimal;\n', '        Burn(msg.sender, _burnedTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     * @param _from the address of the sender\n', '     * @param _burnedTokensWithDecimal the amount of reserve tokens. !!! IMPORTANT is 18 DECIMALS\n', '    */\n', '    function burnFrom(address _from, uint256 _burnedTokensWithDecimal) public isNotFrozen isNotPaused returns (bool success) {\n', '        require(balanceOf[_from] >= _burnedTokensWithDecimal);\n', '        /// Check if the targeted balance is enough\n', '        require(_burnedTokensWithDecimal <= allowance[_from][msg.sender]);\n', '        /// Check allowance\n', '        balanceOf[_from] -= _burnedTokensWithDecimal;\n', '        /// Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _burnedTokensWithDecimal;\n', "        /// Subtract from the sender's allowance\n", '        totalSupply -= _burnedTokensWithDecimal;\n', '        Burn(_from, _burnedTokensWithDecimal);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Add holder addr into arrays.\n', '     * @param _holderAddr the address of the holder\n', '    */\n', '    function addOrUpdateHolder(address _holderAddr) internal {\n', '        // Check and add holder to array\n', '        if (holderIndex[_holderAddr] == 0) {\n', '            holderIndex[_holderAddr] = holders.length++;\n', '        }\n', '        holders[holderIndex[_holderAddr]] = _holderAddr;\n', '    }\n', '\n', '    /**\n', '     * CONSTRUCTOR\n', '     * @dev Initialize the Sharder Token v2.0\n', '     */\n', '    function SharderToken() public {\n', '        owner = msg.sender;\n', '        admin = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '    * @dev Set admin account to manage contract.\n', '    */\n', '    function setAdmin(address _address) public onlyOwner {\n', '        admin = _address;\n', '    }\n', '\n', '    /**\n', '    * @dev Issue first round tokens to `owner` address.\n', '    */\n', '    function issueFirstRoundToken() public onlyOwner {\n', '        require(!firstRoundTokenIssued);\n', '\n', '        balanceOf[owner] = balanceOf[owner].add(totalSupply);\n', '        Issue(issueIndex++, owner, 0, totalSupply);\n', '        addOrUpdateHolder(owner);\n', '        firstRoundTokenIssued = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Issue tokens for reserve.\n', '     * @param _issueTokensWithDecimal the amount of reserve tokens. !!IMPORTANT is 18 DECIMALS\n', '    */\n', '    function issueReserveToken(uint256 _issueTokensWithDecimal) onlyOwner public {\n', '        balanceOf[owner] = balanceOf[owner].add(_issueTokensWithDecimal);\n', '        totalSupply = totalSupply.add(_issueTokensWithDecimal);\n', '        Issue(issueIndex++, owner, 0, _issueTokensWithDecimal);\n', '    }\n', '\n', '    /**\n', '    * @dev Frozen or unfrozen account.\n', '    */\n', '    function changeFrozenStatus(address _address, bool _frozenStatus) public onlyAdmin {\n', '        frozenAccounts[_address] = _frozenStatus;\n', '    }\n', '\n', '    /**\n', "    * @dev Lockup account till the date. Can't lock-up again when this account locked already.\n", '    * 1 year = 31536000 seconds, 0.5 year = 15768000 seconds\n', '    */\n', '    function lockupAccount(address _address, uint _lockupSeconds) public onlyAdmin {\n', '        require((accountLockup[_address] && now > accountLockupTime[_address]) || !accountLockup[_address]);\n', '        // lock-up account\n', '        accountLockupTime[_address] = now + _lockupSeconds;\n', '        accountLockup[_address] = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the cuurent ss holder count.\n', '    */\n', '    function getHolderCount() public constant returns (uint _holdersCount){\n', '        return holders.length - 1;\n', '    }\n', '\n', '    /*\n', '    * @dev Get the current ss holder addresses.\n', '    */\n', '    function getHolders() public onlyAdmin constant returns (address[] _holders){\n', '        return holders;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyAdmin isNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyAdmin isPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '\n', '    function setSymbol(string _symbol) public onlyOwner {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function setName(string _name) public onlyOwner {\n', '        name = _name;\n', '    }\n', '\n', '    /// @dev This default function reject anyone to purchase the SS(Sharder) token after crowdsale finished.\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '}']
