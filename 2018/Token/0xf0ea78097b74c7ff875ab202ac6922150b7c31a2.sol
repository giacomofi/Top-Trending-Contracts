['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', 'contract OcubicleToken is ERC20 {\n', '\t\n', '\tusing SafeMath for uint256;\n', '\t\n', '\taddress public owner;\t\n', '\n', '\tstring public constant name = "Ocubicle"; \n', '  \tstring public constant symbol = "XCB"; \n', '  \tuint8 public constant decimals = 18; \n', '\n', '  \tuint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n', '\n', '\tuint256 totalSupply_;\n', '\n', '\tmapping(address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\tmodifier onlyOwner() {\n', '    \trequire(msg.sender == owner);\n', '    \t_;\n', '  \t}\n', '\n', '\tfunction OcubicleToken() public {\n', '        owner = msg.sender;\t\t\n', '\t\ttotalSupply_ = INITIAL_SUPPLY;\n', '    \tbalances[owner] = INITIAL_SUPPLY;\n', '    \tTransfer(0x0, owner, INITIAL_SUPPLY);\n', '\t}\n', '\n', '\n', '\tfunction totalSupply() public view returns (uint256) {\n', '    \treturn totalSupply_;\n', '  \t}\n', '\n', '  \tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t    require(_to != address(0));\n', '\t    require(_value <= balances[msg.sender]);\n', '\n', '\t    // SafeMath.sub will throw if there is not enough balance.\n', '\t    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t    balances[_to] = balances[_to].add(_value);\n', '\t    Transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '\t}\n', '\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t    return balances[_owner];\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t    require(_to != address(0));\n', '\t    require(_value <= balances[_from]);\n', '\t    require(_value <= allowed[_from][msg.sender]);\n', '\n', '\t    balances[_from] = balances[_from].sub(_value);\n', '\t    balances[_to] = balances[_to].add(_value);\n', '\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t    Transfer(_from, _to, _value);\n', '\t    return true;\n', '\t }\n', '\n', '\t function approve(address _spender, uint256 _value) public returns (bool) {\n', '\t    allowed[msg.sender][_spender] = _value;\n', '\t    Approval(msg.sender, _spender, _value);\n', '\t    return true;\n', '\t }\n', '\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '    \treturn allowed[_owner][_spender];\n', '  \t}\n', '\n', '  \tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t    return true;\n', '\t}\n', '\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t    uint oldValue = allowed[msg.sender][_spender];\n', '\t    if (_subtractedValue > oldValue) {\n', '\t      allowed[msg.sender][_spender] = 0;\n', '\t    } else {\n', '\t      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t    }\n', '\t    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t    return true;\n', '\t}\n', '\n', '\tfunction burn(uint256 _value) public {\n', '\t    require(_value <= balances[msg.sender]);\n', '\t    // no need to require value <= totalSupply, since that would imply the\n', "\t    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '\t    address burner = msg.sender;\n', '\t    balances[burner] = balances[burner].sub(_value);\n', '\t    totalSupply_ = totalSupply_.sub(_value);\n', '\t    Burn(burner, _value);\n', '\t}\n', '\n', '\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\trequire(newOwner != address(0));\n', '\t\tOwnershipTransferred(owner, newOwner);\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '}']