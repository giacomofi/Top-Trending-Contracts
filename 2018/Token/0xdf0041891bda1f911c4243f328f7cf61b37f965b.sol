['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BoostoToken is StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    struct HourlyReward{\n', '        uint passedHours;\n', '        uint percent;\n', '    }\n', '\n', '    string public name = "Boosto";\n', '    string public symbol = "BST";\n', '    uint8 public decimals = 18;\n', '\n', '    // 1B total supply\n', '    uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);\n', '    \n', '    uint256 public totalRaised; // total ether raised (in wei)\n', '\n', '    uint256 public startTimestamp; // timestamp after which ICO will start\n', '    \n', '    // 1 month = 1 * 30 * 24 * 60 * 60\n', '    uint256 public durationSeconds;\n', '\n', '    // the ICO ether max cap (in wei)\n', '    uint256 public maxCap;\n', '\n', '    \n', '     // Minimum Transaction Amount(0.1 ETH)\n', '    uint256 public minAmount = 0.1 ether;\n', '\n', '    // 1 ETH = X BST\n', '    uint256 public coinsPerETH = 1000;\n', '\n', '    /**\n', '     * hourlyRewards[hours from start timestamp] = percent\n', '     * for example hourlyRewards[10] = 20 -- 20% more coins for first 10 hoours after ICO start\n', '     */\n', '    HourlyReward[] public hourlyRewards;\n', '\n', '    /**\n', '     * if true, everyone can participate in ICOs.\n', '     * otherwise just whitelisted wallets can participate\n', '     */\n', '    bool isPublic = false;\n', '\n', '    /**\n', '     * mapping to save whitelisted users\n', '     */\n', '    mapping(address => bool) public whiteList;\n', '    \n', '    /**\n', '     * Address which will receive raised funds \n', '     * and owns the total supply of tokens\n', '     */\n', '    address public fundsWallet = 0x776EFa46B4b39Aa6bd2D65ce01480B31042aeAA5;\n', '\n', '    /**\n', '     * Address which will manage whitelist\n', '     * and ICOs\n', '     */\n', '    address private adminWallet = 0xc6BD816331B1BddC7C03aB51215bbb9e2BE62dD2;    \n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor() public{\n', '        //fundsWallet = msg.sender;\n', '\n', '        startTimestamp = now;\n', '\n', '        // ICO is not active by default. Admin can set it later\n', '        durationSeconds = 0;\n', '\n', '        //initially assign all tokens to the fundsWallet\n', '        balances[fundsWallet] = totalSupply;\n', '        Transfer(0x0, fundsWallet, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if an ICO is open\n', '     */\n', '    modifier isIcoOpen() {\n', '        require(isIcoInProgress());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if the investment amount is greater than min amount\n', '     */\n', '    modifier checkMin(){\n', '        require(msg.value >= minAmount);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if msg.sender can participate in the ICO\n', '     */\n', '    modifier isWhiteListed(){\n', '        require(isPublic || whiteList[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if msg.sender is admin\n', '     * both fundsWallet and adminWallet are considered as admin\n', '     */\n', '\n', '    modifier isAdmin(){\n', '        require(msg.sender == fundsWallet || msg.sender == adminWallet);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Payable fallback. This function will be called\n', '     * when investors send ETH to buy BST\n', '     */\n', '    function() public isIcoOpen checkMin isWhiteListed payable{\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        uint256 tokenAmount = calculateTokenAmount(msg.value);\n', '        balances[fundsWallet] = balances[fundsWallet].sub(tokenAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\n', '\n', '        Transfer(fundsWallet, msg.sender, tokenAmount);\n', '\n', '        // immediately transfer ether to fundsWallet\n', '        fundsWallet.transfer(msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates token amount for investors based on weekly rewards\n', '     * and msg.value\n', '     * @param weiAmount ETH amount in wei amount\n', '     * @return Total BST amount\n', '     */\n', '    function calculateTokenAmount(uint256 weiAmount) public constant returns(uint256) {\n', '        uint256 tokenAmount = weiAmount.mul(coinsPerETH);\n', '        // setting rewards is possible only for 4 weeks\n', '        for (uint i = 0; i < hourlyRewards.length; i++) {\n', '            if (now <= startTimestamp + (hourlyRewards[i].passedHours * 1 hours)) {\n', '                return tokenAmount.mul(100+hourlyRewards[i].percent).div(100);    \n', '            }\n', '        }\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Update WhiteList for an address\n', '     * @param _address The address\n', '     * @param _value Boolean to represent the status\n', '     */\n', '    function adminUpdateWhiteList(address _address, bool _value) public isAdmin{\n', '        whiteList[_address] = _value;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows admin to launch a new ICO\n', '     * @param _startTimestamp Start timestamp in epochs\n', '     * @param _durationSeconds ICO time in seconds(1 day=24*60*60)\n', '     * @param _coinsPerETH BST price in ETH(1 ETH = ? BST)\n', '     * @param _maxCap Max ETH capture in wei amount\n', '     * @param _minAmount Min ETH amount per user in wei amount\n', '     * @param _isPublic Boolean to represent that the ICO is public or not\n', '     */\n', '    function adminAddICO(\n', '        uint256 _startTimestamp,\n', '        uint256 _durationSeconds, \n', '        uint256 _coinsPerETH,\n', '        uint256 _maxCap,\n', '        uint256 _minAmount, \n', '        uint[] _rewardHours,\n', '        uint256[] _rewardPercents,\n', '        bool _isPublic\n', '        ) public isAdmin{\n', '\n', '        // we can&#39;t add a new ICO when an ICO is already in progress\n', '        assert(!isIcoInProgress());\n', '        assert(_rewardPercents.length == _rewardHours.length);\n', '\n', '        startTimestamp = _startTimestamp;\n', '        durationSeconds = _durationSeconds;\n', '        coinsPerETH = _coinsPerETH;\n', '        maxCap = _maxCap;\n', '        minAmount = _minAmount;\n', '\n', '        hourlyRewards.length = 0;\n', '        for(uint i=0; i < _rewardHours.length; i++){\n', '            hourlyRewards[hourlyRewards.length++] = HourlyReward({\n', '                    passedHours: _rewardHours[i],\n', '                    percent: _rewardPercents[i]\n', '                });\n', '        }\n', '\n', '        isPublic = _isPublic;\n', '        // reset totalRaised\n', '        totalRaised = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Return true if an ICO is already in progress;\n', '     * otherwise returns false\n', '     */\n', '    function isIcoInProgress() public constant returns(bool){\n', '        if(now < startTimestamp){\n', '            return false;\n', '        }\n', '        if(now > (startTimestamp + durationSeconds)){\n', '            return false;\n', '        }\n', '        if(totalRaised >= maxCap){\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}']
['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BoostoToken is StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    struct HourlyReward{\n', '        uint passedHours;\n', '        uint percent;\n', '    }\n', '\n', '    string public name = "Boosto";\n', '    string public symbol = "BST";\n', '    uint8 public decimals = 18;\n', '\n', '    // 1B total supply\n', '    uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);\n', '    \n', '    uint256 public totalRaised; // total ether raised (in wei)\n', '\n', '    uint256 public startTimestamp; // timestamp after which ICO will start\n', '    \n', '    // 1 month = 1 * 30 * 24 * 60 * 60\n', '    uint256 public durationSeconds;\n', '\n', '    // the ICO ether max cap (in wei)\n', '    uint256 public maxCap;\n', '\n', '    \n', '     // Minimum Transaction Amount(0.1 ETH)\n', '    uint256 public minAmount = 0.1 ether;\n', '\n', '    // 1 ETH = X BST\n', '    uint256 public coinsPerETH = 1000;\n', '\n', '    /**\n', '     * hourlyRewards[hours from start timestamp] = percent\n', '     * for example hourlyRewards[10] = 20 -- 20% more coins for first 10 hoours after ICO start\n', '     */\n', '    HourlyReward[] public hourlyRewards;\n', '\n', '    /**\n', '     * if true, everyone can participate in ICOs.\n', '     * otherwise just whitelisted wallets can participate\n', '     */\n', '    bool isPublic = false;\n', '\n', '    /**\n', '     * mapping to save whitelisted users\n', '     */\n', '    mapping(address => bool) public whiteList;\n', '    \n', '    /**\n', '     * Address which will receive raised funds \n', '     * and owns the total supply of tokens\n', '     */\n', '    address public fundsWallet = 0x776EFa46B4b39Aa6bd2D65ce01480B31042aeAA5;\n', '\n', '    /**\n', '     * Address which will manage whitelist\n', '     * and ICOs\n', '     */\n', '    address private adminWallet = 0xc6BD816331B1BddC7C03aB51215bbb9e2BE62dD2;    \n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor() public{\n', '        //fundsWallet = msg.sender;\n', '\n', '        startTimestamp = now;\n', '\n', '        // ICO is not active by default. Admin can set it later\n', '        durationSeconds = 0;\n', '\n', '        //initially assign all tokens to the fundsWallet\n', '        balances[fundsWallet] = totalSupply;\n', '        Transfer(0x0, fundsWallet, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if an ICO is open\n', '     */\n', '    modifier isIcoOpen() {\n', '        require(isIcoInProgress());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if the investment amount is greater than min amount\n', '     */\n', '    modifier checkMin(){\n', '        require(msg.value >= minAmount);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if msg.sender can participate in the ICO\n', '     */\n', '    modifier isWhiteListed(){\n', '        require(isPublic || whiteList[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if msg.sender is admin\n', '     * both fundsWallet and adminWallet are considered as admin\n', '     */\n', '\n', '    modifier isAdmin(){\n', '        require(msg.sender == fundsWallet || msg.sender == adminWallet);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Payable fallback. This function will be called\n', '     * when investors send ETH to buy BST\n', '     */\n', '    function() public isIcoOpen checkMin isWhiteListed payable{\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        uint256 tokenAmount = calculateTokenAmount(msg.value);\n', '        balances[fundsWallet] = balances[fundsWallet].sub(tokenAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\n', '\n', '        Transfer(fundsWallet, msg.sender, tokenAmount);\n', '\n', '        // immediately transfer ether to fundsWallet\n', '        fundsWallet.transfer(msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates token amount for investors based on weekly rewards\n', '     * and msg.value\n', '     * @param weiAmount ETH amount in wei amount\n', '     * @return Total BST amount\n', '     */\n', '    function calculateTokenAmount(uint256 weiAmount) public constant returns(uint256) {\n', '        uint256 tokenAmount = weiAmount.mul(coinsPerETH);\n', '        // setting rewards is possible only for 4 weeks\n', '        for (uint i = 0; i < hourlyRewards.length; i++) {\n', '            if (now <= startTimestamp + (hourlyRewards[i].passedHours * 1 hours)) {\n', '                return tokenAmount.mul(100+hourlyRewards[i].percent).div(100);    \n', '            }\n', '        }\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Update WhiteList for an address\n', '     * @param _address The address\n', '     * @param _value Boolean to represent the status\n', '     */\n', '    function adminUpdateWhiteList(address _address, bool _value) public isAdmin{\n', '        whiteList[_address] = _value;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows admin to launch a new ICO\n', '     * @param _startTimestamp Start timestamp in epochs\n', '     * @param _durationSeconds ICO time in seconds(1 day=24*60*60)\n', '     * @param _coinsPerETH BST price in ETH(1 ETH = ? BST)\n', '     * @param _maxCap Max ETH capture in wei amount\n', '     * @param _minAmount Min ETH amount per user in wei amount\n', '     * @param _isPublic Boolean to represent that the ICO is public or not\n', '     */\n', '    function adminAddICO(\n', '        uint256 _startTimestamp,\n', '        uint256 _durationSeconds, \n', '        uint256 _coinsPerETH,\n', '        uint256 _maxCap,\n', '        uint256 _minAmount, \n', '        uint[] _rewardHours,\n', '        uint256[] _rewardPercents,\n', '        bool _isPublic\n', '        ) public isAdmin{\n', '\n', "        // we can't add a new ICO when an ICO is already in progress\n", '        assert(!isIcoInProgress());\n', '        assert(_rewardPercents.length == _rewardHours.length);\n', '\n', '        startTimestamp = _startTimestamp;\n', '        durationSeconds = _durationSeconds;\n', '        coinsPerETH = _coinsPerETH;\n', '        maxCap = _maxCap;\n', '        minAmount = _minAmount;\n', '\n', '        hourlyRewards.length = 0;\n', '        for(uint i=0; i < _rewardHours.length; i++){\n', '            hourlyRewards[hourlyRewards.length++] = HourlyReward({\n', '                    passedHours: _rewardHours[i],\n', '                    percent: _rewardPercents[i]\n', '                });\n', '        }\n', '\n', '        isPublic = _isPublic;\n', '        // reset totalRaised\n', '        totalRaised = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Return true if an ICO is already in progress;\n', '     * otherwise returns false\n', '     */\n', '    function isIcoInProgress() public constant returns(bool){\n', '        if(now < startTimestamp){\n', '            return false;\n', '        }\n', '        if(now > (startTimestamp + durationSeconds)){\n', '            return false;\n', '        }\n', '        if(totalRaised >= maxCap){\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}']
