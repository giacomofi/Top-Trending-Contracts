['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'interface IERC20{\n', '    function totalSupply() constant returns (uint256 totalSupply);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract UBToken is IERC20{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint public constant _totalSupply = 0;\n', '    \n', '    string public constant symbol = "UB";\n', '    string public constant name = "UNIFIED BET";\n', '    uint8 public constant decimals = 18;\n', '    \n', '    //1 ether = 1 UB\n', '    uint256 public constant RATE = 1;\n', '    \n', '    address public owner;\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping(address => uint256)) allowed;\n', '    \n', '    function () payable{\n', '        createToken();\n', '    }\n', '    \n', '    constructor (){\n', '        owner = msg.sender;\n', '        \n', '    }\n', '    \n', '    function createToken() payable {\n', '        require(msg.value > 0);\n', '        \n', '        uint256 tokens = msg.value;\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        \n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint256 totalSupply){\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256 balance){\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success){\n', '        require (\n', '            balances[msg.sender] >= _value\n', '            && _value > 0\n', '            );\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '            \n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n', '        require(\n', '            allowed[_from][msg.sender] >= _value\n', '            && balances[_from] >= _value\n', '            && _value > 0\n', '            );\n', '            \n', '            balances[_from] = balances[_from].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].add(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success){\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '}']