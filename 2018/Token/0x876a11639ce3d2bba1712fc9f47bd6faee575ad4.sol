['pragma solidity ^0.4.16;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Basic is Pausable {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  address public rubusOrangeAddress;\n', '  uint256 noEther = 0;\n', '\n', '  string public name = "Rubus Fund Orange Token";\n', '  uint8 public decimals = 18;\n', '  string public symbol = "RTO";\n', '\n', '  address public enterWallet = 0x73D5f035B8CB58b4aF065d6cE49fC8E7288536F3;\n', '  address public investWallet = 0xD074B636Ccbf1A3482e20b54bF013c1D0c1045b0;\n', '  address public exitWallet = 0xec097d01A6b2C6d415D430B0D4e92f70CACB948D;\n', '  uint256 public priceEthPerToken = 33333;\n', '  \n', '  uint256 public depositCommission = 95;\n', '  uint256 public investCommission = 70;\n', '  uint256 public withdrawCommission = 97;\n', '  \n', '  event MoreData(uint256 ethAmount, uint256 price);\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    \n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    if (_to == rubusOrangeAddress) {\n', '\n', '      uint256 weiAmount = _value.mul(withdrawCommission).div(priceEthPerToken);\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      totalSupply = totalSupply.sub(_value);\n', '\n', '      msg.sender.transfer(weiAmount);\n', '      exitWallet.transfer(weiAmount.div(100).mul(uint256(100).sub(withdrawCommission)));\n', '\n', '      Transfer(msg.sender, rubusOrangeAddress, _value);\n', '      MoreData(weiAmount, priceEthPerToken);\n', '      return true;\n', '\n', '    } else {\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      Transfer(msg.sender, _to, _value);\n', '      MoreData(0, priceEthPerToken);\n', '      return true;\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    \n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    if (_to == rubusOrangeAddress) {\n', '\n', '      uint256 weiAmount = _value.mul(withdrawCommission).div(priceEthPerToken);\n', '\n', '      balances[_from] = balances[_from].sub(_value);\n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '      msg.sender.transfer(weiAmount);\n', '      exitWallet.transfer(weiAmount.div(100).mul(uint256(100).sub(withdrawCommission)));\n', '\n', '      Transfer(_from, rubusOrangeAddress, _value);\n', '      MoreData(weiAmount, priceEthPerToken);\n', '      return true;\n', '\n', '    } else {\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        MoreData(0, priceEthPerToken);\n', '        return true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract RubusFundOrangeToken is StandardToken {\n', '    \n', '  function () payable whenNotPaused {\n', '    \n', '    uint256 amount = msg.value;\n', '    address investor = msg.sender;\n', '    \n', '    uint256 tokens = amount.mul(depositCommission).mul(priceEthPerToken).div(10000);\n', '    \n', '    totalSupply = totalSupply.add(tokens);\n', '    balances[investor] = balances[investor].add(tokens);\n', '\n', '    investWallet.transfer(amount.div(100).mul(investCommission));\n', '    enterWallet.transfer(amount.div(100).mul(uint256(100).sub(depositCommission)));\n', '    \n', '    Transfer(rubusOrangeAddress, investor, tokens);\n', '    MoreData(amount, priceEthPerToken);\n', '    \n', '  }\n', '\n', '  function setRubusOrangeAddress(address _address) onlyOwner {\n', '    rubusOrangeAddress = _address;\n', '  }\n', '\n', '  function addEther() payable onlyOwner {}\n', '\n', '  function deleteInvestorTokens(address investor, uint256 tokens) onlyOwner {\n', '    require(tokens <= balances[investor]);\n', '\n', '    balances[investor] = balances[investor].sub(tokens);\n', '    totalSupply = totalSupply.sub(tokens);\n', '    Transfer(investor, rubusOrangeAddress, tokens);\n', '    MoreData(0, priceEthPerToken);\n', '  }\n', '\n', '  function setNewPrice(uint256 _ethPerToken) onlyOwner {\n', '    priceEthPerToken = _ethPerToken;\n', '  }\n', '\n', '  function getWei(uint256 weiAmount) onlyOwner {\n', '    owner.transfer(weiAmount);\n', '  }\n', '\n', '  function airdrop(address[] _array1, uint256[] _array2) onlyOwner {\n', '    address[] memory arrayAddress = _array1;\n', '    uint256[] memory arrayAmount = _array2;\n', '    uint256 arrayLength = arrayAddress.length.sub(1);\n', '    uint256 i = 0;\n', '     \n', '    while (i <= arrayLength) {\n', '        totalSupply = totalSupply.add(arrayAmount[i]);\n', '        balances[arrayAddress[i]] = balances[arrayAddress[i]].add(arrayAmount[i]);\n', '        Transfer(rubusOrangeAddress, arrayAddress[i], arrayAmount[i]);\n', '        MoreData(0, priceEthPerToken);\n', '        i = i.add(1);\n', '    }  \n', '  }\n', '  \n', '  function setNewDepositCommission(uint256 _newDepositCommission) onlyOwner {\n', '    depositCommission = _newDepositCommission;\n', '  }\n', '  \n', '  function setNewInvestCommission(uint256 _newInvestCommission) onlyOwner {\n', '    investCommission = _newInvestCommission;\n', '  }\n', '  \n', '  function setNewWithdrawCommission(uint256 _newWithdrawCommission) onlyOwner {\n', '    withdrawCommission = _newWithdrawCommission;\n', '  }\n', '  \n', '  function newEnterWallet(address _enterWallet) onlyOwner {\n', '    enterWallet = _enterWallet;\n', '  }\n', '  \n', '  function newInvestWallet(address _investWallet) onlyOwner {\n', '    investWallet = _investWallet;\n', '  }\n', '  \n', '  function newExitWallet(address _exitWallet) onlyOwner {\n', '    exitWallet = _exitWallet;\n', '  }\n', '  \n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Basic is Pausable {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  address public rubusOrangeAddress;\n', '  uint256 noEther = 0;\n', '\n', '  string public name = "Rubus Fund Orange Token";\n', '  uint8 public decimals = 18;\n', '  string public symbol = "RTO";\n', '\n', '  address public enterWallet = 0x73D5f035B8CB58b4aF065d6cE49fC8E7288536F3;\n', '  address public investWallet = 0xD074B636Ccbf1A3482e20b54bF013c1D0c1045b0;\n', '  address public exitWallet = 0xec097d01A6b2C6d415D430B0D4e92f70CACB948D;\n', '  uint256 public priceEthPerToken = 33333;\n', '  \n', '  uint256 public depositCommission = 95;\n', '  uint256 public investCommission = 70;\n', '  uint256 public withdrawCommission = 97;\n', '  \n', '  event MoreData(uint256 ethAmount, uint256 price);\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    \n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    if (_to == rubusOrangeAddress) {\n', '\n', '      uint256 weiAmount = _value.mul(withdrawCommission).div(priceEthPerToken);\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      totalSupply = totalSupply.sub(_value);\n', '\n', '      msg.sender.transfer(weiAmount);\n', '      exitWallet.transfer(weiAmount.div(100).mul(uint256(100).sub(withdrawCommission)));\n', '\n', '      Transfer(msg.sender, rubusOrangeAddress, _value);\n', '      MoreData(weiAmount, priceEthPerToken);\n', '      return true;\n', '\n', '    } else {\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      Transfer(msg.sender, _to, _value);\n', '      MoreData(0, priceEthPerToken);\n', '      return true;\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    \n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    if (_to == rubusOrangeAddress) {\n', '\n', '      uint256 weiAmount = _value.mul(withdrawCommission).div(priceEthPerToken);\n', '\n', '      balances[_from] = balances[_from].sub(_value);\n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '      msg.sender.transfer(weiAmount);\n', '      exitWallet.transfer(weiAmount.div(100).mul(uint256(100).sub(withdrawCommission)));\n', '\n', '      Transfer(_from, rubusOrangeAddress, _value);\n', '      MoreData(weiAmount, priceEthPerToken);\n', '      return true;\n', '\n', '    } else {\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        MoreData(0, priceEthPerToken);\n', '        return true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract RubusFundOrangeToken is StandardToken {\n', '    \n', '  function () payable whenNotPaused {\n', '    \n', '    uint256 amount = msg.value;\n', '    address investor = msg.sender;\n', '    \n', '    uint256 tokens = amount.mul(depositCommission).mul(priceEthPerToken).div(10000);\n', '    \n', '    totalSupply = totalSupply.add(tokens);\n', '    balances[investor] = balances[investor].add(tokens);\n', '\n', '    investWallet.transfer(amount.div(100).mul(investCommission));\n', '    enterWallet.transfer(amount.div(100).mul(uint256(100).sub(depositCommission)));\n', '    \n', '    Transfer(rubusOrangeAddress, investor, tokens);\n', '    MoreData(amount, priceEthPerToken);\n', '    \n', '  }\n', '\n', '  function setRubusOrangeAddress(address _address) onlyOwner {\n', '    rubusOrangeAddress = _address;\n', '  }\n', '\n', '  function addEther() payable onlyOwner {}\n', '\n', '  function deleteInvestorTokens(address investor, uint256 tokens) onlyOwner {\n', '    require(tokens <= balances[investor]);\n', '\n', '    balances[investor] = balances[investor].sub(tokens);\n', '    totalSupply = totalSupply.sub(tokens);\n', '    Transfer(investor, rubusOrangeAddress, tokens);\n', '    MoreData(0, priceEthPerToken);\n', '  }\n', '\n', '  function setNewPrice(uint256 _ethPerToken) onlyOwner {\n', '    priceEthPerToken = _ethPerToken;\n', '  }\n', '\n', '  function getWei(uint256 weiAmount) onlyOwner {\n', '    owner.transfer(weiAmount);\n', '  }\n', '\n', '  function airdrop(address[] _array1, uint256[] _array2) onlyOwner {\n', '    address[] memory arrayAddress = _array1;\n', '    uint256[] memory arrayAmount = _array2;\n', '    uint256 arrayLength = arrayAddress.length.sub(1);\n', '    uint256 i = 0;\n', '     \n', '    while (i <= arrayLength) {\n', '        totalSupply = totalSupply.add(arrayAmount[i]);\n', '        balances[arrayAddress[i]] = balances[arrayAddress[i]].add(arrayAmount[i]);\n', '        Transfer(rubusOrangeAddress, arrayAddress[i], arrayAmount[i]);\n', '        MoreData(0, priceEthPerToken);\n', '        i = i.add(1);\n', '    }  \n', '  }\n', '  \n', '  function setNewDepositCommission(uint256 _newDepositCommission) onlyOwner {\n', '    depositCommission = _newDepositCommission;\n', '  }\n', '  \n', '  function setNewInvestCommission(uint256 _newInvestCommission) onlyOwner {\n', '    investCommission = _newInvestCommission;\n', '  }\n', '  \n', '  function setNewWithdrawCommission(uint256 _newWithdrawCommission) onlyOwner {\n', '    withdrawCommission = _newWithdrawCommission;\n', '  }\n', '  \n', '  function newEnterWallet(address _enterWallet) onlyOwner {\n', '    enterWallet = _enterWallet;\n', '  }\n', '  \n', '  function newInvestWallet(address _investWallet) onlyOwner {\n', '    investWallet = _investWallet;\n', '  }\n', '  \n', '  function newExitWallet(address _exitWallet) onlyOwner {\n', '    exitWallet = _exitWallet;\n', '  }\n', '  \n', '}']
