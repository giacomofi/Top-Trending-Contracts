['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract SMAR is MintableToken {\n', '    \n', '    string public constant name = "SmartRetail ICO";\n', '    \n', '    string public constant symbol = "SMAR";\n', '    \n', '    uint32 public constant decimals = 18;\n', '    \n', '}\n', '\n', '\n', 'contract Crowdsale is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    address public multisig = 0xF15eE43d0345089625050c08b482C3f2285e4F12;\n', '    \n', '    uint dec = 1000000000000000000;\n', '    \n', '    SMAR public token = new SMAR();\n', '\n', '    \n', '    uint public icoStartP1 = 1528675200; // GMT: Mon, 11 Jun 2018 00:00:00 GMT\n', '    uint public icoStartP2 = 1531267200; // Wed, 11 Jul 2018 00:00:00 GMT\n', '    uint public icoStartP3 = 1533945600; // GMT: Sat, 11 Aug 2018 00:00:00 GMT\n', '    uint public icoStartP4 = 1536624000; // Tue, 11 Sep 2018 00:00:00 GMT\n', '    uint public icoStartP5 = 1539216000; // GMT: Thu, 11 Oct 2018 00:00:00 GMT\n', '    uint public icoStartP6 = 1541894400; // GMT: Sun, 11 Nov 2018 00:00:00 GMT\n', '    uint public icoEnd = 1544486400; // Tue, 11 Dec 2018 00:00:00 GMT\n', '    \n', '    \n', '    \n', '    uint public icoSoftcap = 35000*dec; // 35 000 SMAR\n', '    uint public icoHardcap =  1000000*dec; // 1 000 000 SMAR\n', '\n', '\n', '    //----\n', '    uint public tokensFor1EthP6 = 50*dec; //0.02 ETH for 1 token\n', '    uint public tokensFor1EthP1 = tokensFor1EthP6*125/100; //0,016   ETH for 1 token\n', '    uint public tokensFor1EthP2 = tokensFor1EthP6*120/100; //0,01667 ETH for 1 token\n', '    uint public tokensFor1EthP3 = tokensFor1EthP6*115/100; //0,01739 ETH for 1 token\n', '    uint public tokensFor1EthP4 = tokensFor1EthP6*110/100; //0,01818 ETH for 1 token\n', '    uint public tokensFor1EthP5 = tokensFor1EthP6*105/100; //0,01905 ETH for 1 token\n', '    //----\n', '        \n', '    mapping(address => uint) public balances;\n', '\n', '\n', '\n', '    constructor() public {\n', '       owner = multisig;\n', '       token.mint(multisig, 5000*dec);  \n', '    }\n', '\n', '\n', '    function refund() public {\n', '\n', '      require(  (now>icoEnd)&&(token.totalSupply()<icoSoftcap) );\n', '      uint value = balances[msg.sender]; \n', '      balances[msg.sender] = 0; \n', '      msg.sender.transfer(value); \n', '    }\n', '    \n', '\n', '    function refundToWallet(address _wallet) public  {\n', '\n', '      require(  (now>icoEnd)&&(token.totalSupply()<icoSoftcap) );\n', '      uint value = balances[_wallet]; \n', '      balances[_wallet] = 0; \n', '      _wallet.transfer(value); \n', '    }    \n', '    \n', '\n', '    function withdraw() public onlyOwner {\n', '\n', '       require(token.totalSupply()>=icoSoftcap);\n', '       multisig.transfer(address(this).balance);\n', '    }\n', '\n', '\n', '\n', '    function finishMinting() public onlyOwner {\n', '      if(now>icoEnd) {\n', '        token.finishMinting();\n', '        token.transferOwnership(multisig);\n', '      }\n', '    }\n', '\n', '\n', '   function createTokens()  payable public {\n', '\n', '      require( (now>=icoStartP1)&&(now<icoEnd) );\n', '\n', '      require(token.totalSupply()<icoHardcap);\n', '       \n', '      uint tokens = 0;\n', '      uint sum = msg.value;\n', '      uint tokensFor1EthCurr = tokensFor1EthP6;\n', '      uint rest = 0;\n', '      \n', '\n', '      if(now < icoStartP2) {\n', '        tokensFor1EthCurr = tokensFor1EthP1;\n', '      } else if(now >= icoStartP2 && now < icoStartP3) {\n', '        tokensFor1EthCurr = tokensFor1EthP2;\n', '      } else if(now >= icoStartP3 && now < icoStartP4) {\n', '        tokensFor1EthCurr = tokensFor1EthP3;\n', '      } else if(now >= icoStartP4 && now < icoStartP5) {\n', '        tokensFor1EthCurr = tokensFor1EthP4;\n', '      } else if(now >= icoStartP5 && now < icoStartP6) {\n', '        tokensFor1EthCurr = tokensFor1EthP5;\n', '      }\n', '      \n', '      \n', '\n', '      tokens = sum.mul(tokensFor1EthCurr).div(1000000000000000000);  \n', '        \n', '\n', '      if(token.totalSupply().add(tokens) > icoHardcap){\n', '\n', '          tokens = icoHardcap.sub(token.totalSupply());\n', '\n', '          rest = sum.sub(tokens.mul(1000000000000000000).div(tokensFor1EthCurr));\n', '      }      \n', '      \n', '\n', '      token.mint(msg.sender, tokens);\n', '      if(rest!=0){\n', '          msg.sender.transfer(rest);\n', '      }\n', '      \n', '\n', '      balances[msg.sender] = balances[msg.sender].add(sum.sub(rest));\n', '      \n', '\n', '      if(token.totalSupply()>=icoSoftcap){\n', '\n', '        multisig.transfer(address(this).balance);\n', '      }\n', '    }\n', '\n', '    function() external payable {\n', '      createTokens();\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract SMAR is MintableToken {\n', '    \n', '    string public constant name = "SmartRetail ICO";\n', '    \n', '    string public constant symbol = "SMAR";\n', '    \n', '    uint32 public constant decimals = 18;\n', '    \n', '}\n', '\n', '\n', 'contract Crowdsale is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    address public multisig = 0xF15eE43d0345089625050c08b482C3f2285e4F12;\n', '    \n', '    uint dec = 1000000000000000000;\n', '    \n', '    SMAR public token = new SMAR();\n', '\n', '    \n', '    uint public icoStartP1 = 1528675200; // GMT: Mon, 11 Jun 2018 00:00:00 GMT\n', '    uint public icoStartP2 = 1531267200; // Wed, 11 Jul 2018 00:00:00 GMT\n', '    uint public icoStartP3 = 1533945600; // GMT: Sat, 11 Aug 2018 00:00:00 GMT\n', '    uint public icoStartP4 = 1536624000; // Tue, 11 Sep 2018 00:00:00 GMT\n', '    uint public icoStartP5 = 1539216000; // GMT: Thu, 11 Oct 2018 00:00:00 GMT\n', '    uint public icoStartP6 = 1541894400; // GMT: Sun, 11 Nov 2018 00:00:00 GMT\n', '    uint public icoEnd = 1544486400; // Tue, 11 Dec 2018 00:00:00 GMT\n', '    \n', '    \n', '    \n', '    uint public icoSoftcap = 35000*dec; // 35 000 SMAR\n', '    uint public icoHardcap =  1000000*dec; // 1 000 000 SMAR\n', '\n', '\n', '    //----\n', '    uint public tokensFor1EthP6 = 50*dec; //0.02 ETH for 1 token\n', '    uint public tokensFor1EthP1 = tokensFor1EthP6*125/100; //0,016   ETH for 1 token\n', '    uint public tokensFor1EthP2 = tokensFor1EthP6*120/100; //0,01667 ETH for 1 token\n', '    uint public tokensFor1EthP3 = tokensFor1EthP6*115/100; //0,01739 ETH for 1 token\n', '    uint public tokensFor1EthP4 = tokensFor1EthP6*110/100; //0,01818 ETH for 1 token\n', '    uint public tokensFor1EthP5 = tokensFor1EthP6*105/100; //0,01905 ETH for 1 token\n', '    //----\n', '        \n', '    mapping(address => uint) public balances;\n', '\n', '\n', '\n', '    constructor() public {\n', '       owner = multisig;\n', '       token.mint(multisig, 5000*dec);  \n', '    }\n', '\n', '\n', '    function refund() public {\n', '\n', '      require(  (now>icoEnd)&&(token.totalSupply()<icoSoftcap) );\n', '      uint value = balances[msg.sender]; \n', '      balances[msg.sender] = 0; \n', '      msg.sender.transfer(value); \n', '    }\n', '    \n', '\n', '    function refundToWallet(address _wallet) public  {\n', '\n', '      require(  (now>icoEnd)&&(token.totalSupply()<icoSoftcap) );\n', '      uint value = balances[_wallet]; \n', '      balances[_wallet] = 0; \n', '      _wallet.transfer(value); \n', '    }    \n', '    \n', '\n', '    function withdraw() public onlyOwner {\n', '\n', '       require(token.totalSupply()>=icoSoftcap);\n', '       multisig.transfer(address(this).balance);\n', '    }\n', '\n', '\n', '\n', '    function finishMinting() public onlyOwner {\n', '      if(now>icoEnd) {\n', '        token.finishMinting();\n', '        token.transferOwnership(multisig);\n', '      }\n', '    }\n', '\n', '\n', '   function createTokens()  payable public {\n', '\n', '      require( (now>=icoStartP1)&&(now<icoEnd) );\n', '\n', '      require(token.totalSupply()<icoHardcap);\n', '       \n', '      uint tokens = 0;\n', '      uint sum = msg.value;\n', '      uint tokensFor1EthCurr = tokensFor1EthP6;\n', '      uint rest = 0;\n', '      \n', '\n', '      if(now < icoStartP2) {\n', '        tokensFor1EthCurr = tokensFor1EthP1;\n', '      } else if(now >= icoStartP2 && now < icoStartP3) {\n', '        tokensFor1EthCurr = tokensFor1EthP2;\n', '      } else if(now >= icoStartP3 && now < icoStartP4) {\n', '        tokensFor1EthCurr = tokensFor1EthP3;\n', '      } else if(now >= icoStartP4 && now < icoStartP5) {\n', '        tokensFor1EthCurr = tokensFor1EthP4;\n', '      } else if(now >= icoStartP5 && now < icoStartP6) {\n', '        tokensFor1EthCurr = tokensFor1EthP5;\n', '      }\n', '      \n', '      \n', '\n', '      tokens = sum.mul(tokensFor1EthCurr).div(1000000000000000000);  \n', '        \n', '\n', '      if(token.totalSupply().add(tokens) > icoHardcap){\n', '\n', '          tokens = icoHardcap.sub(token.totalSupply());\n', '\n', '          rest = sum.sub(tokens.mul(1000000000000000000).div(tokensFor1EthCurr));\n', '      }      \n', '      \n', '\n', '      token.mint(msg.sender, tokens);\n', '      if(rest!=0){\n', '          msg.sender.transfer(rest);\n', '      }\n', '      \n', '\n', '      balances[msg.sender] = balances[msg.sender].add(sum.sub(rest));\n', '      \n', '\n', '      if(token.totalSupply()>=icoSoftcap){\n', '\n', '        multisig.transfer(address(this).balance);\n', '      }\n', '    }\n', '\n', '    function() external payable {\n', '      createTokens();\n', '    }\n', '    \n', '}']
