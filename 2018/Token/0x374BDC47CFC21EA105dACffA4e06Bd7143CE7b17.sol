['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20 {\n', '\n', '    function totalSupply() public constant returns (uint);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '    uint256 public totalSupply = 10*10**26;\n', '    uint8 constant public decimals = 18;\n', '    string constant public name = "CLBToken";\n', '    string constant public symbol = "CLB";\n', '\n', '\tmapping(address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\n', '\t\t/**\n', '\t\t * @dev Transfer tokens from one address to another\n', '\t\t * @param _from address The address which you want to send tokens from\n', '\t\t * @param _to address The address which you want to transfer to\n', '\t\t * @param _value uint256 the amount of tokens to be transferred\n', '\t\t */\n', '\t\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\t\trequire(_to != address(0));\n', '\t\t\trequire(_value <= balances[_from]);\n', '\t\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\t\temit Transfer(_from, _to, _value);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\n', '   function totalSupply() public constant returns (uint256){\n', '        return totalSupply;\n', '   }\n', '\n', '\n', '\t/**\n', '\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t *\n', '\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '\t * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _value The amount of tokens to be spent.\n', '\t */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t * @param _owner address The address which owns the funds.\n', '\t * @param _spender address The address which will spend the funds.\n', '\t * @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t */\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To increment\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _addedValue The amount of tokens to increase the allowance by.\n', '\t */\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\temit  Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To decrement\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t */\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\taddress public owner;\n', '\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '\t/**\n', '\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\t * account.\n', '\t */\n', '\tfunction Ownable() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\n', '\t/**\n', '\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\t * @param newOwner The address to transfer ownership to.\n', '\t */\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\trequire(newOwner != address(0));\n', '\t\temit OwnershipTransferred(owner, newOwner);\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '}\n', '\n', 'contract Controlled is Ownable{\n', '\n', '    function Controlled() public {\n', '       setExclude(msg.sender);\n', '    }\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transferEnabled = false;\n', '\n', '    // flag that makes locked address effect\n', '    bool public lockFlag=true;\n', '    mapping(address => bool) locked;\n', '    mapping(address => bool) exclude;\n', '\n', '    function enableTransfer(bool _enable) public onlyOwner{\n', '        transferEnabled=_enable;\n', '    }\n', '\n', '    function disableLock(bool _enable) public onlyOwner returns (bool success){\n', '        lockFlag=_enable;\n', '        return true;\n', '    }\n', '\n', '    function addLock(address _addr) public onlyOwner returns (bool success){\n', '        require(_addr!=msg.sender);\n', '        locked[_addr]=true;\n', '        return true;\n', '    }\n', '\n', '    function setExclude(address _addr) public onlyOwner returns (bool success){\n', '        exclude[_addr]=true;\n', '        return true;\n', '    }\n', '\n', '    function removeLock(address _addr) public onlyOwner returns (bool success){\n', '        locked[_addr]=false;\n', '        return true;\n', '    }\n', '\n', '    modifier transferAllowed(address _addr) {\n', '        if (!exclude[_addr]) {\n', '            assert(transferEnabled);\n', '            if(lockFlag){\n', '                assert(!locked[_addr]);\n', '            }\n', '        }\n', '        \n', '        _;\n', '    }\n', '\n', '}\n', ' \n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\n', '\t/**\n', '\t * @dev Burns a specific amount of tokens.\n', '\t * @param _value The amount of token to be burned.\n', '\t */\n', '\tfunction burn(uint256 _value) public {\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\t\t// no need to require value <= totalSupply, since that would imply the\n', '\t\t// sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '\t\taddress burner = msg.sender;\n', '\t\tbalances[burner] = balances[burner].sub(_value);\n', '\t\ttotalSupply = totalSupply.sub(_value);\n', '\t\temit Burn(burner, _value);\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract ControlledToken is BasicToken, Controlled {\n', '\n', '  function transfer(address _to, uint256 _value) public transferAllowed(msg.sender) returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public transferAllowed(msg.sender) returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public transferAllowed(msg.sender) returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public transferAllowed(msg.sender) returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public transferAllowed(msg.sender) returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract CLBToken is ControlledToken, BurnableToken {\n', '\n', '\n', '\n', '\tfunction CLBToken()\tpublic {\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '\t}\n', '\n', '\tevent LogRedeem(address beneficiary, uint256 amount);\n', '\n', '\tfunction redeem() public {\n', '\n', '\t\tuint256 balance = balanceOf(msg.sender);\n', '\t\t// burn the tokens in this token smart contract\n', '\t\tsuper.burn(balance);\n', ' \t\temit LogRedeem(msg.sender, balance);\n', '\t}\n', '\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tuint256 c = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\tuint256 c = a / b;\n', '\t\t// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}']