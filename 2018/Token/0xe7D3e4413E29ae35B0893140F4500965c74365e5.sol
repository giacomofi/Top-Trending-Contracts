['pragma solidity ^0.4.13;\n', '\n', 'contract tokenRecipientInterface {\n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '}\n', '\n', 'contract ERC20TokenInterface {\n', '  function totalSupply() public constant returns (uint256 _totalSupply);\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract SafeMath {\n', '    \n', '    uint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        require(x <= MAX_UINT256 - y);\n', '        return x + y;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        require(x >= y);\n', '        return x - y;\n', '    }\n', '\n', '    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        if (y == 0) {\n', '            return 0;\n', '        }\n', '        require(x <= (MAX_UINT256 / y));\n', '        return x * y;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '}\n', '\n', 'contract Lockable is Owned {\n', '\n', '    uint256 public lockedUntilBlock;\n', '\n', '    event ContractLocked(uint256 _untilBlock, string _reason);\n', '\n', '    modifier lockAffected {\n', '        require(block.number > lockedUntilBlock);\n', '        _;\n', '    }\n', '\n', '    function lockFromSelf(uint256 _untilBlock, string _reason) internal {\n', '        lockedUntilBlock = _untilBlock;\n', '        ContractLocked(_untilBlock, _reason);\n', '    }\n', '\n', '\n', '    function lockUntil(uint256 _untilBlock, string _reason) onlyOwner public {\n', '        lockedUntilBlock = _untilBlock;\n', '        ContractLocked(_untilBlock, _reason);\n', '    }\n', '}\n', '\n', 'contract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {\n', '\n', '    // Name of token\n', '    string public name;\n', '    // Abbreviation of tokens name\n', '    string public symbol;\n', '    // Number of decimals token has\n', '    uint8 public decimals;\n', '    // Maximum tokens that can be minted\n', '    uint256 public totalSupplyLimit;\n', '\n', '    // Current supply of tokens\n', '    uint256 supply = 0;\n', '    // Map of users balances\n', '    mapping (address => uint256) balances;\n', '    // Map of users allowances\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '    // Event that shows that new tokens were created\n', '    event Mint(address indexed _to, uint256 _value);\n', '    // Event that shows that old tokens were destroyed\n', '    event Burn(address indexed _from, uint _value);\n', '\n', '    /**\n', '    * @dev Returns number of tokens in circulation\n', '    *\n', '    * @return total number od tokens\n', '    */\n', '    function totalSupply() public constant returns (uint256) {\n', '        return supply;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the balance of specific account\n', '    *\n', '    * @param _owner The account that caller wants to querry\n', '    * @return the balance on this account\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev User can transfer tokens with this method, method is disabled if emergencyLock is activated\n', '    *\n', '    * @param _to Reciever of tokens\n', '    * @param _value The amount of tokens that will be sent \n', '    * @return if successful returns true\n', '    */\n', '    function transfer(address _to, uint256 _value) lockAffected public returns (bool success) {\n', '        require(_to != 0x0 && _to != address(this));\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev This is used to allow some account to utilise transferFrom and sends tokens on your behalf, this method is disabled if emergencyLock is activated\n', '    *\n', '    * @param _spender Who can send tokens on your behalf\n', '    * @param _value The amount of tokens that are allowed to be sent \n', '    * @return if successful returns true\n', '    */\n', '    function approve(address _spender, uint256 _value) lockAffected public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev This is used to send tokens and execute code on other smart contract, this method is disabled if emergencyLock is activated\n', '    *\n', '    * @param _spender Contract that is receiving tokens\n', '    * @param _value The amount that msg.sender is sending\n', '    * @param _extraData Additional params that can be used on reciving smart contract\n', '    * @return if successful returns true\n', '    */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected public returns (bool success) {\n', '        tokenRecipientInterface spender = tokenRecipientInterface(_spender);\n', '        approve(_spender, _value);\n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Sender can transfer tokens on others behalf, this method is disabled if emergencyLock is activated\n', '    *\n', '    * @param _from The account that will send tokens\n', '    * @param _to Account that will recive the tokens\n', '    * @param _value The amount that msg.sender is sending\n', '    * @return if successful returns true\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) lockAffected public returns (bool success) {\n', '        require(_to != 0x0 && _to != address(this));\n', '        balances[_from] = safeSub(balanceOf(_from), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the amount od tokens that can be sent from this addres by spender\n', '    *\n', '    * @param _owner Account that has tokens\n', '    * @param _spender Account that can spend tokens\n', '    * @return remaining balance to spend\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Creates new tokens as long as total supply does not reach limit\n', '    *\n', '    * @param _to Reciver od newly created tokens\n', '    * @param _amount Amount of tokens to be created;\n', '    */\n', '    function mintTokens(address _to, uint256 _amount) onlyOwner public {\n', '        require(supply + _amount <= totalSupplyLimit);\n', '        supply = safeAdd(supply, _amount);\n', '        balances[_to] = safeAdd(balances[_to], _amount);\n', '        Mint(_to, _amount);\n', '        Transfer(0x0, _to, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Destroys the amount of tokens and lowers total supply\n', '    *\n', '    * @param _amount Number of tokens user wants to destroy\n', '    */\n', '    function burn(uint _amount) public {\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _amount);\n', '        supply = safeSub(supply, _amount);\n', '        Burn(msg.sender, _amount);\n', '        Transfer(msg.sender, 0x0, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Saves exidentaly sent tokens to this contract, can be used only by owner\n', '    *\n', '    * @param _tokenAddress Address of tokens smart contract\n', '    * @param _to Where to send the tokens\n', '    * @param _amount The amount of tokens that we are salvaging\n', '    */\n', '    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner public {\n', '        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Disables the contract and wipes all the balances, can be used only by owner\n', '    */\n', '    function killContract() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', 'contract B2BCoinContract is ERC20Token {\n', '\n', '    /**\n', '    * @dev Intialises token and all the necesary variable\n', '    */\n', '    function B2BCoinContract() {\n', '        name = "B2BCoin";\n', '        symbol = "BBC";\n', '        decimals = 18;\n', '        totalSupplyLimit = 1000000000 * 10**18;\n', '        lockFromSelf(0, "Lock before crowdsale starts");\n', '    }\n', '}']