['pragma solidity ^0.4.21;\n', '\n', '/*\n', '  \n', '    ****************************************************************\n', '    AVALANCHE BLOCKCHAIN GENESIS BLOCK COIN ALLOCATION TOKEN CONTRACT\n', '    ****************************************************************\n', '\n', '    The Genesis Block in the Avalanche will deploy with pre-filled addresses\n', '    according to the results of this token sale.\n', '    \n', '    The Avalanche tokens will be sent to the Ethereum address that buys them.\n', '    \n', '    When the Avalanche blockchain deploys, all ethereum addresses that contains\n', '    Avalanche tokens will be credited with the equivalent AVALANCHE ICE (XAI) in the Genesis Block.\n', '\n', '    There will be no developer premine. There will be no private presale. This is it.\n', '\n', '    WARNING!! When the Avalanche Blockchain deploys this token contract will terminate!!\n', '    You will no longer be able to transfer or sell your tokens on the Ethereum Network.\n', '    Instead you will be the proud owner of native currency of the Avalanche Blockchain.\n', '    You will be able to recover Avalanche Funds using your Ethereum keys. DO NOT LOSE YOUR KEYS!\n', '    \n', '    @author CHRIS DCOSTA For Meek Inc 2018.\n', '    \n', '    Reference Code by Hunter Long\n', '    @repo https://github.com/hunterlong/ethereum-ico-contract\n', '\n', '*/\n', '\n', '\n', 'contract BasicXAIToken {\n', '    uint256 public totalSupply;\n', '    bool public allowTransfer;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardXAIToken is BasicXAIToken {\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', 'contract XAIToken is StandardXAIToken {\n', '\n', '    string public name = "AVALANCHE TOKEN";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "XAIT";\n', '    string public version = &#39;XAIT 0.1&#39;;\n', '    address public mintableAddress;\n', '    address public creator;\n', '\n', '    constructor(address sale_address) public {\n', '        balances[msg.sender] = 0;\n', '        totalSupply = 0;\n', '        name = name;\n', '        decimals = decimals;\n', '        symbol = symbol;\n', '        mintableAddress = sale_address; // sale contract address\n', '        allowTransfer = true;\n', '        creator = msg.sender;\n', '        createTokens();\n', '    }\n', '\n', '    // creates AVALANCHE ICE Tokens\n', '    // this address will hold all tokens\n', '    // all community contrubutions coins will be taken from this address\n', '    function createTokens() internal {\n', '        uint256 total = 4045084999529091000000000000;\n', '        balances[this] = total;\n', '        totalSupply = total;\n', '    }\n', '\n', '    function changeTransfer(bool allowed) external {\n', '        require(msg.sender == mintableAddress);\n', '        require(allowTransfer);\n', '        allowTransfer = allowed;\n', '    }\n', '\n', '    function mintToken(address to, uint256 amount) external returns (bool success) {\n', '        require(msg.sender == mintableAddress);\n', '        require(balances[this] >= amount);\n', '        balances[this] -= amount;\n', '        balances[to] += amount;\n', '        emit Transfer(this, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        require(_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '\n', '    // This function kills the token when Avalanche Blockchain is deployed\n', '    function killAllXAITActivity() public {\n', '      require(msg.sender==creator);\n', '      allowTransfer = false;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/*\n', '  \n', '    ****************************************************************\n', '    AVALANCHE BLOCKCHAIN GENESIS BLOCK COIN ALLOCATION TOKEN CONTRACT\n', '    ****************************************************************\n', '\n', '    The Genesis Block in the Avalanche will deploy with pre-filled addresses\n', '    according to the results of this token sale.\n', '    \n', '    The Avalanche tokens will be sent to the Ethereum address that buys them.\n', '    \n', '    When the Avalanche blockchain deploys, all ethereum addresses that contains\n', '    Avalanche tokens will be credited with the equivalent AVALANCHE ICE (XAI) in the Genesis Block.\n', '\n', '    There will be no developer premine. There will be no private presale. This is it.\n', '\n', '    WARNING!! When the Avalanche Blockchain deploys this token contract will terminate!!\n', '    You will no longer be able to transfer or sell your tokens on the Ethereum Network.\n', '    Instead you will be the proud owner of native currency of the Avalanche Blockchain.\n', '    You will be able to recover Avalanche Funds using your Ethereum keys. DO NOT LOSE YOUR KEYS!\n', '    \n', '    @author CHRIS DCOSTA For Meek Inc 2018.\n', '    \n', '    Reference Code by Hunter Long\n', '    @repo https://github.com/hunterlong/ethereum-ico-contract\n', '\n', '*/\n', '\n', '\n', 'contract BasicXAIToken {\n', '    uint256 public totalSupply;\n', '    bool public allowTransfer;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardXAIToken is BasicXAIToken {\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', 'contract XAIToken is StandardXAIToken {\n', '\n', '    string public name = "AVALANCHE TOKEN";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "XAIT";\n', "    string public version = 'XAIT 0.1';\n", '    address public mintableAddress;\n', '    address public creator;\n', '\n', '    constructor(address sale_address) public {\n', '        balances[msg.sender] = 0;\n', '        totalSupply = 0;\n', '        name = name;\n', '        decimals = decimals;\n', '        symbol = symbol;\n', '        mintableAddress = sale_address; // sale contract address\n', '        allowTransfer = true;\n', '        creator = msg.sender;\n', '        createTokens();\n', '    }\n', '\n', '    // creates AVALANCHE ICE Tokens\n', '    // this address will hold all tokens\n', '    // all community contrubutions coins will be taken from this address\n', '    function createTokens() internal {\n', '        uint256 total = 4045084999529091000000000000;\n', '        balances[this] = total;\n', '        totalSupply = total;\n', '    }\n', '\n', '    function changeTransfer(bool allowed) external {\n', '        require(msg.sender == mintableAddress);\n', '        require(allowTransfer);\n', '        allowTransfer = allowed;\n', '    }\n', '\n', '    function mintToken(address to, uint256 amount) external returns (bool success) {\n', '        require(msg.sender == mintableAddress);\n', '        require(balances[this] >= amount);\n', '        balances[this] -= amount;\n', '        balances[to] += amount;\n', '        emit Transfer(this, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        require(_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '\n', '    // This function kills the token when Avalanche Blockchain is deployed\n', '    function killAllXAITActivity() public {\n', '      require(msg.sender==creator);\n', '      allowTransfer = false;\n', '    }\n', '}']
