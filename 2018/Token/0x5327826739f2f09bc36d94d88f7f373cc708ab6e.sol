['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal  pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '    \n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    \n', '}\n', '\n', 'contract Blin is Ownable {\n', '     using SafeMath for uint256;\n', '    string public  name = "Afonja";\n', '    \n', '    string public  symbol = "GROSH";\n', '    \n', '    uint32 public  decimals = 0;\n', '    \n', '    uint public totalSupply = 0;\n', '    \n', '    mapping (address => uint) balances;\n', '    \n', '  \n', '\tuint rate = 100000;\n', '\t\n', '\tfunction Blin()public {\n', '\n', '\t\n', '\t\n', '\t}\n', '    \n', '    function mint(address _to, uint _value) internal{\n', '        assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to]);\n', '        balances[_to] += _value;\n', '        totalSupply += _value;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        if(balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[msg.sender] -= _value; \n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } \n', '        return false;\n', '    }\n', '    \n', '\n', ' \n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    \n', '\n', '    \n', '\t\n', '    function createTokens()  public payable {\n', '     //  transfer(msg.sender,msg.value);\n', '\t   owner.transfer(msg.value);\n', '       uint tokens = rate.mul(msg.value).div(1 ether);\n', '        mint(msg.sender, tokens);\n', '    }\n', '\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '\t\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal  pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '    \n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    \n', '}\n', '\n', 'contract Blin is Ownable {\n', '     using SafeMath for uint256;\n', '    string public  name = "Afonja";\n', '    \n', '    string public  symbol = "GROSH";\n', '    \n', '    uint32 public  decimals = 0;\n', '    \n', '    uint public totalSupply = 0;\n', '    \n', '    mapping (address => uint) balances;\n', '    \n', '  \n', '\tuint rate = 100000;\n', '\t\n', '\tfunction Blin()public {\n', '\n', '\t\n', '\t\n', '\t}\n', '    \n', '    function mint(address _to, uint _value) internal{\n', '        assert(totalSupply + _value >= totalSupply && balances[_to] + _value >= balances[_to]);\n', '        balances[_to] += _value;\n', '        totalSupply += _value;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        if(balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[msg.sender] -= _value; \n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } \n', '        return false;\n', '    }\n', '    \n', '\n', ' \n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    \n', '\n', '    \n', '\t\n', '    function createTokens()  public payable {\n', '     //  transfer(msg.sender,msg.value);\n', '\t   owner.transfer(msg.value);\n', '       uint tokens = rate.mul(msg.value).div(1 ether);\n', '        mint(msg.sender, tokens);\n', '    }\n', '\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '\t\n', '}']
