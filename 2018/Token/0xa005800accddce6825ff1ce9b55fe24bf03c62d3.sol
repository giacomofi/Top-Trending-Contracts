['pragma solidity ^0.4.18;\n', '\n', 'contract AttributaOwners {\n', '    address public owner;\n', '    address private newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function AttributaOwners() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier isOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public isOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'interface ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint amount) public returns (bool success);\n', '    function approve(address spender, uint amount) public returns (bool success);\n', '    function transferFrom(address from, address to, uint amount) public returns (bool success);\n', '}\n', '\n', 'interface ExtendERC20Interface {\n', '    \tfunction transferAndCall(address contractAddress, uint256 amount, bytes data) public returns(bool success);\n', '}\n', '\n', 'interface TransferAndCallInterface {\n', '    function transferComplete(address tokenOwner, uint amount, bytes data) public returns(bool success);\n', '}\n', '\n', '\n', '// Symbol      : ATRA\n', '// Name        : Atra\n', '// Total supply: 100,000,000,000\n', '// Decimals    : 0\n', '\n', 'contract Atra is AttributaOwners, ERC20Interface, ExtendERC20Interface {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint public decimals;\n', '    uint public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    function Atra() public {\n', '        symbol = "ATRA";\n', '        name = "Atra";\n', '        decimals = 0;\n', '        _totalSupply = 100000000000; //100,000,000,000\n', '        balances[owner] = _totalSupply;\n', '        Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address to, uint amount) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint amount) public returns (bool success) {\n', '        allowed[msg.sender][spender] = amount;\n', '        Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint amount) public returns (bool success) {\n', '        balances[from] = balances[from].sub(amount);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // transfer token and invoke contract requesting payment with notifcation\n', '\tfunction transferAndCall(address contractAddress, uint256 amount, bytes data) public returns(bool success){\n', '\t  // Transfer amount to contract requesting payment\n', '\t  transfer(contractAddress, amount);\n', '\t  // make sure the contract requireing payment doesn&#39;t fail, if so revert the transaction\n', '\t  require(TransferAndCallInterface(contractAddress).transferComplete(msg.sender, amount, data));\n', '\t  return true;\n', '\t}\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public isOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    event Transfer(address from, address to, uint amount);\n', '    event Approval(address tokenOwner, address spender, uint amount);\n', '}\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}']