['pragma solidity ^0.4.23;\n', '\n', '//  (;&#180;д`)｡･ﾟﾟ･  SCAM penis\n', '//  (ヽηﾉ \n', '//  \u3000ヽ ヽ\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '      // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '      // benefit is lost if &#39;b&#39; is also tested.\n', '      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '      if (a == 0) {\n', '        return 0;\n', '      }\n', '\n', '      c = a * b;\n', '      assert(c / a == b);\n', '      return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '      // uint256 c = a / b;\n', '      // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '      return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '      c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address & authorized addresses, and provides basic\n', ' * authorization control functions, this simplifies the implementation of user permissions.\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    bool public canRenounce = false;\n', '    mapping (address => bool) public authorized;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event AuthorizedAdded(address indexed authorized);\n', '    event AuthorizedRemoved(address indexed authorized);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '     */\n', '    constructor() public {\n', '      owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the authorized or owner.\n', '     */\n', '    modifier onlyAuthorized() {\n', '        require(msg.sender == owner || authorized[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     */\n', '    function enableRenounceOwnership() onlyOwner public {\n', '      canRenounce = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) onlyOwner public {\n', '      if(!canRenounce){\n', '        require(_newOwner != address(0));\n', '      }\n', '      emit OwnershipTransferred(owner, _newOwner);\n', '      owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds authorized to execute several functions to subOwner.\n', '     * @param _authorized The address to add authorized to.\n', '     */\n', '\n', '    function addAuthorized(address _authorized) onlyOwner public {\n', '      authorized[_authorized] = true;\n', '      emit AuthorizedAdded(_authorized);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes authorized to execute several functions from subOwner.\n', '     * @param _authorized The address to remove authorized from.\n', '     */\n', '\n', '    function removeAuthorized(address _authorized) onlyOwner public {\n', '      authorized[_authorized] = false;\n', '      emit AuthorizedRemoved(_authorized);\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC223\n', ' * @dev ERC223 contract interface with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n', ' */\n', 'contract ERC223 {\n', '    uint public totalSupply;\n', '\n', '    // ERC223 and ERC20 functions and events\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function decimals() public view returns (uint8 _decimals);\n', '    function balanceOf(address who) public view returns (uint);\n', '    function totalSupply() public view returns (uint256 _supply);\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ContractReceiver\n', ' * @dev Contract that is working with ERC223 tokens\n', ' */\n', 'contract ContractReceiver {\n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) external;\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MANJ\n', ' * @dev MANJCOIN is an ERC223 Token with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' */\n', 'contract MANJ is ERC223, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "MANJCOIN";\n', '    string public symbol = "MANJ";\n', '    uint8 public decimals = 8;\n', '    uint256 public totalSupply = 19190721 * 1e8;\n', '    uint256 public codeSize = 0;\n', '    bool public mintingFinished = false;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public cannotSend;\n', '    mapping (address => bool) public cannotReceive;\n', '    mapping (address => uint256) public cannotSendUntil;\n', '    mapping (address => uint256) public cannotReceiveUntil;\n', '\n', '    event FrozenFunds(address indexed target, bool cannotSend, bool cannotReceive);\n', '    event LockedFunds(address indexed target, uint256 cannotSendUntil, uint256 cannotReceiveUntil);\n', '    event Burn(address indexed from, uint256 amount);\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    /**\n', '     * @dev Constructor is called only once and can not be called again\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '\n', '    function name() public view returns (string _name) {\n', '        return name;\n', '    }\n', '\n', '    function symbol() public view returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Prevent targets from sending or receiving tokens\n', '     * @param targets Addresses to be frozen\n', '     * @param _cannotSend Whether to prevent targets from sending tokens or not\n', '     * @param _cannotReceive Whether to prevent targets from receiving tokens or not\n', '     */\n', '    function freezeAccounts(address[] targets, bool _cannotSend, bool _cannotReceive) onlyOwner public {\n', '        require(targets.length > 0);\n', '\n', '        for (uint i = 0; i < targets.length; i++) {\n', '            cannotSend[targets[i]] = _cannotSend;\n', '            cannotReceive[targets[i]] = _cannotReceive;\n', '            emit FrozenFunds(targets[i], _cannotSend, _cannotReceive);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Prevent targets from sending or receiving tokens by setting Unix time\n', '     * @param targets Addresses to be locked funds\n', '     * @param _cannotSendUntil Unix time when locking up sending function will be finished\n', '     * @param _cannotReceiveUntil Unix time when locking up receiving function will be finished\n', '     */\n', '    function lockupAccounts(address[] targets, uint256 _cannotSendUntil, uint256 _cannotReceiveUntil) onlyOwner public {\n', '        require(targets.length > 0);\n', '\n', '        for(uint i = 0; i < targets.length; i++){\n', '            require(cannotSendUntil[targets[i]] <= _cannotSendUntil\n', '                    && cannotReceiveUntil[targets[i]] <= _cannotReceiveUntil);\n', '\n', '            cannotSendUntil[targets[i]] = _cannotSendUntil;\n', '            cannotReceiveUntil[targets[i]] = _cannotReceiveUntil;\n', '            emit LockedFunds(targets[i], _cannotSendUntil, _cannotReceiveUntil);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function that is called when a user or another contract wants to transfer funds\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '        require(_value > 0\n', '                && cannotSend[msg.sender] == false\n', '                && cannotReceive[_to] == false\n', '                && now > cannotSendUntil[msg.sender]\n', '                && now > cannotReceiveUntil[_to]);\n', '\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Standard function transfer similar to ERC20 transfer with no _data\n', '     *      Added due to backwards compatibility reasons\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        require(_value > 0\n', '                && cannotSend[msg.sender] == false\n', '                && cannotReceive[_to] == false\n', '                && now > cannotSendUntil[msg.sender]\n', '                && now > cannotReceiveUntil[_to]);\n', '\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the target address is a contract\n', '     * @param _addr address to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address _addr) internal view returns (bool) {\n', '      uint256 size;\n', '      assembly { size := extcodesize(_addr) }\n', '      return size > codeSize ;\n', '    }\n', '\n', '    function setCodeSize(uint256 _codeSize) onlyOwner public {\n', '        codeSize = _codeSize;\n', '    }\n', '\n', '    // function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     *      Added due to backwards compatibility with ERC20\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)\n', '                && _value > 0\n', '                && balanceOf[_from] >= _value\n', '                && allowance[_from][msg.sender] >= _value\n', '                && cannotSend[msg.sender] == false\n', '                && cannotReceive[_to] == false\n', '                && now > cannotSendUntil[msg.sender]\n', '                && now > cannotReceiveUntil[_to]);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows _spender to spend no more than _value tokens in your behalf\n', '     *      Added due to backwards compatibility with ERC20\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender\n', '     *      Added due to backwards compatibility with ERC20\n', '     * @param _owner address The address which owns the funds\n', '     * @param _spender address The address which will spend the funds\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _from The address that will burn the tokens.\n', '     * @param _unitAmount The amount of token to be burned.\n', '     */\n', '    function burn(address _from, uint256 _unitAmount) onlyOwner public {\n', '        require(_unitAmount > 0\n', '                && balanceOf[_from] >= _unitAmount);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_unitAmount);\n', '        totalSupply = totalSupply.sub(_unitAmount);\n', '        emit Burn(_from, _unitAmount);\n', '        emit Transfer(_from, address(0), _unitAmount);\n', '\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _unitAmount The amount of tokens to mint.\n', '     */\n', '    function mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\n', '        require(_unitAmount > 0);\n', '\n', '        totalSupply = totalSupply.add(_unitAmount);\n', '        balanceOf[_to] = balanceOf[_to].add(_unitAmount);\n', '        emit Mint(_to, _unitAmount);\n', '        emit Transfer(address(0), _to, _unitAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to distribute tokens to the list of addresses by the provided amount\n', '     */\n', '    function batchTransfer(address[] addresses, uint256 amount) public returns (bool) {\n', '        require(amount > 0\n', '                && addresses.length > 0\n', '                && cannotSend[msg.sender] == false\n', '                && now > cannotSendUntil[msg.sender]);\n', '\n', '        amount = amount.mul(1e8);\n', '        uint256 totalAmount = amount.mul(addresses.length);\n', '        require(balanceOf[msg.sender] >= totalAmount);\n', '\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(addresses[i] != address(0)\n', '                    && cannotReceive[addresses[i]] == false\n', '                    && now > cannotReceiveUntil[addresses[i]]);\n', '\n', '            balanceOf[addresses[i]] = balanceOf[addresses[i]].add(amount);\n', '            emit Transfer(msg.sender, addresses[i], amount);\n', '        }\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n', '        return true;\n', '    }\n', '\n', '    function batchTransfer(address[] addresses, uint[] amounts) public returns (bool) {\n', '        require(addresses.length > 0\n', '                && addresses.length == amounts.length\n', '                && cannotSend[msg.sender] == false\n', '                && now > cannotSendUntil[msg.sender]);\n', '\n', '        uint256 totalAmount = 0;\n', '\n', '        for(uint i = 0; i < addresses.length; i++){\n', '            require(amounts[i] > 0\n', '                    && addresses[i] != address(0)\n', '                    && cannotReceive[addresses[i]] == false\n', '                    && now > cannotReceiveUntil[addresses[i]]);\n', '\n', '            amounts[i] = amounts[i].mul(1e8);\n', '            balanceOf[addresses[i]] = balanceOf[addresses[i]].add(amounts[i]);\n', '            totalAmount = totalAmount.add(amounts[i]);\n', '            emit Transfer(msg.sender, addresses[i], amounts[i]);\n', '        }\n', '\n', '        require(balanceOf[msg.sender] >= totalAmount);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to transfer tokens between addresses, only for Owner & subOwner\n', '     */\n', '    function transferFromTo(address _from, address _to, uint256 _value, bytes _data) onlyAuthorized public returns (bool) {\n', '        require(_value > 0\n', '                && balanceOf[_from] >= _value\n', '                && cannotSend[_from] == false\n', '                && cannotReceive[_to] == false\n', '                && now > cannotSendUntil[_from]\n', '                && now > cannotReceiveUntil[_to]);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        if(isContract(_to)) {\n', '            ContractReceiver receiver = ContractReceiver(_to);\n', '            receiver.tokenFallback(_from, _value, _data);\n', '        }\n', '        emit Transfer(_from, _to, _value, _data);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFromTo(address _from, address _to, uint256 _value) onlyAuthorized public returns (bool) {\n', '        bytes memory empty;\n', '        return transferFromTo(_from, _to, _value, empty);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers the current balance to the owner and terminates the contract.\n', '     */\n', '    function destroy() onlyOwner public {\n', '      selfdestruct(owner);\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function\n', '     */\n', '    function() payable public {\n', '      revert();\n', '    }\n', '}\n', '\n', '// \u3000＼\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000／ \n', '// \u3000\u3000＼\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000／ \n', '// \u3000\u3000\u3000＼\u3000\u3000\u3000\u3000\u3000\u3000\u3000／ \n', '// \u3000\u3000\u3000\u3000＼\u3000\u3000\u3000\u3000\u3000／ \n', '// \u3000\u3000\u3000\u3000\u3000＼( ^o^)／\u3000\u3000\u3000うわああああああああああああああ！！！！！！！！！！ \n', '// \u3000\u3000\u3000\u3000\u3000\u3000│\u3000\u3000│ \n', '// \u3000\u3000\u3000\u3000\u3000\u3000│\u3000\u3000│\u3000\u3000\u3000\u3000～○～○～○～○～○～○～○ \n', '// \u3000\u3000\u3000\u3000\u3000\u3000│\u3000\u3000│\u3000\u3000～○～○～○～○～○～○～○～○～○ \n', '// \u3000\u3000\u3000\u3000\u3000\u3000(\u3000 ω⊃～○～○～○～○～○～○～○～○～○～○～○ \n', '// \u3000\u3000\u3000\u3000\u3000\u3000／\u3000\u3000＼～○～○～○～○～○～○～○～○～○～○ \n', '// \u3000\u3000\u3000\u3000\u3000／\u3000\u3000\u3000\u3000＼\u3000～○～○～○～○～○～○～○～○ \n', '// \u3000\u3000\u3000\u3000／\u3000\u3000\u3000\u3000\u3000\u3000＼ \n', '// \u3000\u3000\u3000／\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000＼']
['pragma solidity ^0.4.23;\n', '\n', '//  (;´д`)｡･ﾟﾟ･  SCAM penis\n', '//  (ヽηﾉ \n', '//  \u3000ヽ ヽ\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "      // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "      // benefit is lost if 'b' is also tested.\n", '      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '      if (a == 0) {\n', '        return 0;\n', '      }\n', '\n', '      c = a * b;\n', '      assert(c / a == b);\n', '      return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '      // uint256 c = a / b;\n', "      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '      return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '      c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address & authorized addresses, and provides basic\n', ' * authorization control functions, this simplifies the implementation of user permissions.\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    bool public canRenounce = false;\n', '    mapping (address => bool) public authorized;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event AuthorizedAdded(address indexed authorized);\n', '    event AuthorizedRemoved(address indexed authorized);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '     */\n', '    constructor() public {\n', '      owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the authorized or owner.\n', '     */\n', '    modifier onlyAuthorized() {\n', '        require(msg.sender == owner || authorized[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     */\n', '    function enableRenounceOwnership() onlyOwner public {\n', '      canRenounce = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) onlyOwner public {\n', '      if(!canRenounce){\n', '        require(_newOwner != address(0));\n', '      }\n', '      emit OwnershipTransferred(owner, _newOwner);\n', '      owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds authorized to execute several functions to subOwner.\n', '     * @param _authorized The address to add authorized to.\n', '     */\n', '\n', '    function addAuthorized(address _authorized) onlyOwner public {\n', '      authorized[_authorized] = true;\n', '      emit AuthorizedAdded(_authorized);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes authorized to execute several functions from subOwner.\n', '     * @param _authorized The address to remove authorized from.\n', '     */\n', '\n', '    function removeAuthorized(address _authorized) onlyOwner public {\n', '      authorized[_authorized] = false;\n', '      emit AuthorizedRemoved(_authorized);\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC223\n', ' * @dev ERC223 contract interface with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n', ' */\n', 'contract ERC223 {\n', '    uint public totalSupply;\n', '\n', '    // ERC223 and ERC20 functions and events\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function decimals() public view returns (uint8 _decimals);\n', '    function balanceOf(address who) public view returns (uint);\n', '    function totalSupply() public view returns (uint256 _supply);\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ContractReceiver\n', ' * @dev Contract that is working with ERC223 tokens\n', ' */\n', 'contract ContractReceiver {\n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) external;\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MANJ\n', ' * @dev MANJCOIN is an ERC223 Token with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' */\n', 'contract MANJ is ERC223, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "MANJCOIN";\n', '    string public symbol = "MANJ";\n', '    uint8 public decimals = 8;\n', '    uint256 public totalSupply = 19190721 * 1e8;\n', '    uint256 public codeSize = 0;\n', '    bool public mintingFinished = false;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public cannotSend;\n', '    mapping (address => bool) public cannotReceive;\n', '    mapping (address => uint256) public cannotSendUntil;\n', '    mapping (address => uint256) public cannotReceiveUntil;\n', '\n', '    event FrozenFunds(address indexed target, bool cannotSend, bool cannotReceive);\n', '    event LockedFunds(address indexed target, uint256 cannotSendUntil, uint256 cannotReceiveUntil);\n', '    event Burn(address indexed from, uint256 amount);\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    /**\n', '     * @dev Constructor is called only once and can not be called again\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '\n', '    function name() public view returns (string _name) {\n', '        return name;\n', '    }\n', '\n', '    function symbol() public view returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Prevent targets from sending or receiving tokens\n', '     * @param targets Addresses to be frozen\n', '     * @param _cannotSend Whether to prevent targets from sending tokens or not\n', '     * @param _cannotReceive Whether to prevent targets from receiving tokens or not\n', '     */\n', '    function freezeAccounts(address[] targets, bool _cannotSend, bool _cannotReceive) onlyOwner public {\n', '        require(targets.length > 0);\n', '\n', '        for (uint i = 0; i < targets.length; i++) {\n', '            cannotSend[targets[i]] = _cannotSend;\n', '            cannotReceive[targets[i]] = _cannotReceive;\n', '            emit FrozenFunds(targets[i], _cannotSend, _cannotReceive);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Prevent targets from sending or receiving tokens by setting Unix time\n', '     * @param targets Addresses to be locked funds\n', '     * @param _cannotSendUntil Unix time when locking up sending function will be finished\n', '     * @param _cannotReceiveUntil Unix time when locking up receiving function will be finished\n', '     */\n', '    function lockupAccounts(address[] targets, uint256 _cannotSendUntil, uint256 _cannotReceiveUntil) onlyOwner public {\n', '        require(targets.length > 0);\n', '\n', '        for(uint i = 0; i < targets.length; i++){\n', '            require(cannotSendUntil[targets[i]] <= _cannotSendUntil\n', '                    && cannotReceiveUntil[targets[i]] <= _cannotReceiveUntil);\n', '\n', '            cannotSendUntil[targets[i]] = _cannotSendUntil;\n', '            cannotReceiveUntil[targets[i]] = _cannotReceiveUntil;\n', '            emit LockedFunds(targets[i], _cannotSendUntil, _cannotReceiveUntil);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function that is called when a user or another contract wants to transfer funds\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '        require(_value > 0\n', '                && cannotSend[msg.sender] == false\n', '                && cannotReceive[_to] == false\n', '                && now > cannotSendUntil[msg.sender]\n', '                && now > cannotReceiveUntil[_to]);\n', '\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Standard function transfer similar to ERC20 transfer with no _data\n', '     *      Added due to backwards compatibility reasons\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        require(_value > 0\n', '                && cannotSend[msg.sender] == false\n', '                && cannotReceive[_to] == false\n', '                && now > cannotSendUntil[msg.sender]\n', '                && now > cannotReceiveUntil[_to]);\n', '\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the target address is a contract\n', '     * @param _addr address to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address _addr) internal view returns (bool) {\n', '      uint256 size;\n', '      assembly { size := extcodesize(_addr) }\n', '      return size > codeSize ;\n', '    }\n', '\n', '    function setCodeSize(uint256 _codeSize) onlyOwner public {\n', '        codeSize = _codeSize;\n', '    }\n', '\n', '    // function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     *      Added due to backwards compatibility with ERC20\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)\n', '                && _value > 0\n', '                && balanceOf[_from] >= _value\n', '                && allowance[_from][msg.sender] >= _value\n', '                && cannotSend[msg.sender] == false\n', '                && cannotReceive[_to] == false\n', '                && now > cannotSendUntil[msg.sender]\n', '                && now > cannotReceiveUntil[_to]);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows _spender to spend no more than _value tokens in your behalf\n', '     *      Added due to backwards compatibility with ERC20\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender\n', '     *      Added due to backwards compatibility with ERC20\n', '     * @param _owner address The address which owns the funds\n', '     * @param _spender address The address which will spend the funds\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _from The address that will burn the tokens.\n', '     * @param _unitAmount The amount of token to be burned.\n', '     */\n', '    function burn(address _from, uint256 _unitAmount) onlyOwner public {\n', '        require(_unitAmount > 0\n', '                && balanceOf[_from] >= _unitAmount);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_unitAmount);\n', '        totalSupply = totalSupply.sub(_unitAmount);\n', '        emit Burn(_from, _unitAmount);\n', '        emit Transfer(_from, address(0), _unitAmount);\n', '\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _unitAmount The amount of tokens to mint.\n', '     */\n', '    function mint(address _to, uint256 _unitAmount) onlyOwner canMint public returns (bool) {\n', '        require(_unitAmount > 0);\n', '\n', '        totalSupply = totalSupply.add(_unitAmount);\n', '        balanceOf[_to] = balanceOf[_to].add(_unitAmount);\n', '        emit Mint(_to, _unitAmount);\n', '        emit Transfer(address(0), _to, _unitAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to distribute tokens to the list of addresses by the provided amount\n', '     */\n', '    function batchTransfer(address[] addresses, uint256 amount) public returns (bool) {\n', '        require(amount > 0\n', '                && addresses.length > 0\n', '                && cannotSend[msg.sender] == false\n', '                && now > cannotSendUntil[msg.sender]);\n', '\n', '        amount = amount.mul(1e8);\n', '        uint256 totalAmount = amount.mul(addresses.length);\n', '        require(balanceOf[msg.sender] >= totalAmount);\n', '\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(addresses[i] != address(0)\n', '                    && cannotReceive[addresses[i]] == false\n', '                    && now > cannotReceiveUntil[addresses[i]]);\n', '\n', '            balanceOf[addresses[i]] = balanceOf[addresses[i]].add(amount);\n', '            emit Transfer(msg.sender, addresses[i], amount);\n', '        }\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n', '        return true;\n', '    }\n', '\n', '    function batchTransfer(address[] addresses, uint[] amounts) public returns (bool) {\n', '        require(addresses.length > 0\n', '                && addresses.length == amounts.length\n', '                && cannotSend[msg.sender] == false\n', '                && now > cannotSendUntil[msg.sender]);\n', '\n', '        uint256 totalAmount = 0;\n', '\n', '        for(uint i = 0; i < addresses.length; i++){\n', '            require(amounts[i] > 0\n', '                    && addresses[i] != address(0)\n', '                    && cannotReceive[addresses[i]] == false\n', '                    && now > cannotReceiveUntil[addresses[i]]);\n', '\n', '            amounts[i] = amounts[i].mul(1e8);\n', '            balanceOf[addresses[i]] = balanceOf[addresses[i]].add(amounts[i]);\n', '            totalAmount = totalAmount.add(amounts[i]);\n', '            emit Transfer(msg.sender, addresses[i], amounts[i]);\n', '        }\n', '\n', '        require(balanceOf[msg.sender] >= totalAmount);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to transfer tokens between addresses, only for Owner & subOwner\n', '     */\n', '    function transferFromTo(address _from, address _to, uint256 _value, bytes _data) onlyAuthorized public returns (bool) {\n', '        require(_value > 0\n', '                && balanceOf[_from] >= _value\n', '                && cannotSend[_from] == false\n', '                && cannotReceive[_to] == false\n', '                && now > cannotSendUntil[_from]\n', '                && now > cannotReceiveUntil[_to]);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        if(isContract(_to)) {\n', '            ContractReceiver receiver = ContractReceiver(_to);\n', '            receiver.tokenFallback(_from, _value, _data);\n', '        }\n', '        emit Transfer(_from, _to, _value, _data);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFromTo(address _from, address _to, uint256 _value) onlyAuthorized public returns (bool) {\n', '        bytes memory empty;\n', '        return transferFromTo(_from, _to, _value, empty);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers the current balance to the owner and terminates the contract.\n', '     */\n', '    function destroy() onlyOwner public {\n', '      selfdestruct(owner);\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function\n', '     */\n', '    function() payable public {\n', '      revert();\n', '    }\n', '}\n', '\n', '// \u3000＼\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000／ \n', '// \u3000\u3000＼\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000／ \n', '// \u3000\u3000\u3000＼\u3000\u3000\u3000\u3000\u3000\u3000\u3000／ \n', '// \u3000\u3000\u3000\u3000＼\u3000\u3000\u3000\u3000\u3000／ \n', '// \u3000\u3000\u3000\u3000\u3000＼( ^o^)／\u3000\u3000\u3000うわああああああああああああああ！！！！！！！！！！ \n', '// \u3000\u3000\u3000\u3000\u3000\u3000│\u3000\u3000│ \n', '// \u3000\u3000\u3000\u3000\u3000\u3000│\u3000\u3000│\u3000\u3000\u3000\u3000～○～○～○～○～○～○～○ \n', '// \u3000\u3000\u3000\u3000\u3000\u3000│\u3000\u3000│\u3000\u3000～○～○～○～○～○～○～○～○～○ \n', '// \u3000\u3000\u3000\u3000\u3000\u3000(\u3000 ω⊃～○～○～○～○～○～○～○～○～○～○～○ \n', '// \u3000\u3000\u3000\u3000\u3000\u3000／\u3000\u3000＼～○～○～○～○～○～○～○～○～○～○ \n', '// \u3000\u3000\u3000\u3000\u3000／\u3000\u3000\u3000\u3000＼\u3000～○～○～○～○～○～○～○～○ \n', '// \u3000\u3000\u3000\u3000／\u3000\u3000\u3000\u3000\u3000\u3000＼ \n', '// \u3000\u3000\u3000／\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000＼']
