['pragma solidity ^0.4.4;\n', '\n', '/*\n', 'Interface provides ERC20 Standard token methods\n', '*/\n', 'interface IERC20StandardToken{\n', '    //Total supply amount\n', '    function totalSupply() external constant returns (uint256 supply);\n', '   \n', '    //transfer tokens to _toAddress\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '    \n', '    //transfer tokens from _fromAddress to _toAddress\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    //get _owner address balances\n', '    function balanceOf(address _owner) external constant returns (uint256 balance);\n', '\n', '    //validate token transfering transaction\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    //??\n', '    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\n', '    \n', '    //Transfer tokens event\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    //Approval tokens event\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ERC20StandardToken is IERC20StandardToken{\n', '    uint256 public totalSupply;\n', '    \n', '    function totalSupply() external constant returns (uint256 supply){\n', '        return totalSupply;\n', '    }\n', '   \n', '    /*\n', '    Check transfering transaction valid\n', '        TRUE: Transfer tokens to customer and return true\n', '        FALSE: return false\n', '    */\n', '    function transfer(address _to, uint256 _value) external returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //if (_value > 0 && balances[msg.sender] >= _value && (balances[_to] + _value) > balances[_to]) {\n', '        \n', '        //If transferAmount > 0 and balance >= transferAmount\n', '        if (_value > 0 && balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) external constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*\n', '    v1: When customer send 1ETH to contract address, 10 tokens sent to ISSUE_TOKEN_ADDRESS\n', '    v2: After issue token, send 4,900,000,000 tokens to issue token address\n', '*/\n', 'contract TKDToken is ERC20StandardToken {\n', '    uint256 private constant DECIMALS_AMOUNT = 1000000000000000000;\n', '    \n', '    //Supply in ICO: 7,500,000\n', '    uint256 private constant TOTAL_SUPPLY_AMOUNT = 7500000 * DECIMALS_AMOUNT;\n', '    \n', '    //Sell in ICO: 5,500,000\n', '    uint256 private constant TOTAL_ICO_AMOUNT = 5500000 * DECIMALS_AMOUNT;\n', '    \n', '    //Marketing: 2,000,000\n', '    uint256 private constant TOTAL_MARKETING_AMOUNT = 2000000 * DECIMALS_AMOUNT;\n', ' \n', '    //TOKEN INFORMATION\n', '    string public name = "TKDToken";                   \n', '    string public symbol ="TKD";\n', ' \n', '    uint8 public decimals =  18;\n', '    address public fundsWallet;\n', '    address public icoTokenAddress = 0x6ed1d3CF924E19C14EEFE5ea93b5a3b8E9b746bE;\n', '    address public marketingTokenAddress = 0xc5DE4874bA806611b66511d8eC66Ba99398B194f;\n', '  \n', '    //METHODS\n', '   \n', '    // This is a constructor function \n', '    // which means the following function name has to match the contract name declared above\n', '    function TKDToken() public payable{\n', '        //Init properties\n', '        balances[msg.sender] = TOTAL_SUPPLY_AMOUNT;\n', '        totalSupply = TOTAL_SUPPLY_AMOUNT;\n', '        fundsWallet = msg.sender;\n', '    }\n', '    \n', '    function() public payable{\n', '        uint256 ethReceiveAmount = msg.value;\n', '        require(ethReceiveAmount > 0);\n', '        \n', '        address tokenReceiveAddress = msg.sender;\n', '        \n', '        //Only transfer to ICO Token Address and Marketing Token Address\n', '        require(tokenReceiveAddress == icoTokenAddress || tokenReceiveAddress == marketingTokenAddress);\n', '        \n', '        //Only transfer one time\n', '        require(balances[tokenReceiveAddress] == 0);\n', '        \n', '        uint256 tokenSendAmount = 0;\n', '        if(tokenReceiveAddress == icoTokenAddress){\n', '            tokenSendAmount = TOTAL_ICO_AMOUNT;    \n', '        }else{\n', '            tokenSendAmount = TOTAL_MARKETING_AMOUNT;\n', '        }\n', '        \n', '        require(tokenSendAmount > 0);\n', '        //Enough token to send\n', '        require(balances[fundsWallet] >= tokenSendAmount);\n', '        \n', '        //Transfer\n', '        balances[fundsWallet] -= tokenSendAmount;\n', '        balances[tokenReceiveAddress] += tokenSendAmount;\n', '        \n', '        // Broadcast a message to the blockchain\n', '        emit Transfer(fundsWallet, tokenReceiveAddress, tokenSendAmount); \n', '        \n', '        //Send ETH to funds wallet\n', '        fundsWallet.transfer(msg.value);     \n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) private returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { assert(false); }\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', '/*\n', 'Interface provides ERC20 Standard token methods\n', '*/\n', 'interface IERC20StandardToken{\n', '    //Total supply amount\n', '    function totalSupply() external constant returns (uint256 supply);\n', '   \n', '    //transfer tokens to _toAddress\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '    \n', '    //transfer tokens from _fromAddress to _toAddress\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    //get _owner address balances\n', '    function balanceOf(address _owner) external constant returns (uint256 balance);\n', '\n', '    //validate token transfering transaction\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    //??\n', '    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\n', '    \n', '    //Transfer tokens event\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    //Approval tokens event\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ERC20StandardToken is IERC20StandardToken{\n', '    uint256 public totalSupply;\n', '    \n', '    function totalSupply() external constant returns (uint256 supply){\n', '        return totalSupply;\n', '    }\n', '   \n', '    /*\n', '    Check transfering transaction valid\n', '        TRUE: Transfer tokens to customer and return true\n', '        FALSE: return false\n', '    */\n', '    function transfer(address _to, uint256 _value) external returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //if (_value > 0 && balances[msg.sender] >= _value && (balances[_to] + _value) > balances[_to]) {\n', '        \n', '        //If transferAmount > 0 and balance >= transferAmount\n', '        if (_value > 0 && balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) external constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*\n', '    v1: When customer send 1ETH to contract address, 10 tokens sent to ISSUE_TOKEN_ADDRESS\n', '    v2: After issue token, send 4,900,000,000 tokens to issue token address\n', '*/\n', 'contract TKDToken is ERC20StandardToken {\n', '    uint256 private constant DECIMALS_AMOUNT = 1000000000000000000;\n', '    \n', '    //Supply in ICO: 7,500,000\n', '    uint256 private constant TOTAL_SUPPLY_AMOUNT = 7500000 * DECIMALS_AMOUNT;\n', '    \n', '    //Sell in ICO: 5,500,000\n', '    uint256 private constant TOTAL_ICO_AMOUNT = 5500000 * DECIMALS_AMOUNT;\n', '    \n', '    //Marketing: 2,000,000\n', '    uint256 private constant TOTAL_MARKETING_AMOUNT = 2000000 * DECIMALS_AMOUNT;\n', ' \n', '    //TOKEN INFORMATION\n', '    string public name = "TKDToken";                   \n', '    string public symbol ="TKD";\n', ' \n', '    uint8 public decimals =  18;\n', '    address public fundsWallet;\n', '    address public icoTokenAddress = 0x6ed1d3CF924E19C14EEFE5ea93b5a3b8E9b746bE;\n', '    address public marketingTokenAddress = 0xc5DE4874bA806611b66511d8eC66Ba99398B194f;\n', '  \n', '    //METHODS\n', '   \n', '    // This is a constructor function \n', '    // which means the following function name has to match the contract name declared above\n', '    function TKDToken() public payable{\n', '        //Init properties\n', '        balances[msg.sender] = TOTAL_SUPPLY_AMOUNT;\n', '        totalSupply = TOTAL_SUPPLY_AMOUNT;\n', '        fundsWallet = msg.sender;\n', '    }\n', '    \n', '    function() public payable{\n', '        uint256 ethReceiveAmount = msg.value;\n', '        require(ethReceiveAmount > 0);\n', '        \n', '        address tokenReceiveAddress = msg.sender;\n', '        \n', '        //Only transfer to ICO Token Address and Marketing Token Address\n', '        require(tokenReceiveAddress == icoTokenAddress || tokenReceiveAddress == marketingTokenAddress);\n', '        \n', '        //Only transfer one time\n', '        require(balances[tokenReceiveAddress] == 0);\n', '        \n', '        uint256 tokenSendAmount = 0;\n', '        if(tokenReceiveAddress == icoTokenAddress){\n', '            tokenSendAmount = TOTAL_ICO_AMOUNT;    \n', '        }else{\n', '            tokenSendAmount = TOTAL_MARKETING_AMOUNT;\n', '        }\n', '        \n', '        require(tokenSendAmount > 0);\n', '        //Enough token to send\n', '        require(balances[fundsWallet] >= tokenSendAmount);\n', '        \n', '        //Transfer\n', '        balances[fundsWallet] -= tokenSendAmount;\n', '        balances[tokenReceiveAddress] += tokenSendAmount;\n', '        \n', '        // Broadcast a message to the blockchain\n', '        emit Transfer(fundsWallet, tokenReceiveAddress, tokenSendAmount); \n', '        \n', '        //Send ETH to funds wallet\n', '        fundsWallet.transfer(msg.value);     \n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) private returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { assert(false); }\n', '        return true;\n', '    }\n', '}']
