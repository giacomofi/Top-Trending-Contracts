['pragma solidity ^0.4.24;\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract SingleLockingContract is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /* --- EVENTS --- */\n', '\n', '    event ReleasedTokens(address indexed _beneficiary);\n', '\n', '    /* --- FIELDS --- */\n', '\n', '    ERC20 public tokenContract;\n', '    uint256 public unlockTime;\n', '    address public beneficiary;\n', '\n', '    /* --- MODIFIERS --- */\n', '\n', '    modifier onlyWhenUnlocked() {\n', '        require(!isLocked());\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenLocked() {\n', '        require(isLocked());\n', '        _;\n', '    }\n', '\n', '    /* --- CONSTRUCTOR --- */\n', '\n', '    function SingleLockingContract(ERC20 _tokenContract, uint256 _unlockTime, address _beneficiary) public {\n', '        require(_unlockTime > now);\n', '        require(address(_tokenContract) != 0x0);\n', '        require(_beneficiary != 0x0);\n', '\n', '        unlockTime = _unlockTime;\n', '        tokenContract = _tokenContract;\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    /* --- PUBLIC / EXTERNAL METHODS --- */\n', '\n', '    function isLocked() public view returns(bool) {\n', '        return now < unlockTime;\n', '    }\n', '\n', '    function balanceOf() public view returns (uint256 balance) {\n', '        return tokenContract.balanceOf(address(this));\n', '    }\n', '\n', '    function releaseTokens() public onlyWhenUnlocked {\n', '        require(msg.sender == owner || msg.sender == beneficiary);\n', '        require(tokenContract.transfer(beneficiary, balanceOf())); \n', '        emit ReleasedTokens(beneficiary);\n', '    }\n', '}\n', '\n', '\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) whitelist;\n', '    event AddedToWhitelist(address indexed account);\n', '    event RemovedFromWhitelist(address indexed account);\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(isWhitelisted(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function add(address _address) public onlyOwner {\n', '        whitelist[_address] = true;\n', '        emit AddedToWhitelist(_address);\n', '    }\n', '\n', '    function remove(address _address) public onlyOwner {\n', '        whitelist[_address] = false;\n', '        emit RemovedFromWhitelist(_address);\n', '    }\n', '\n', '    function isWhitelisted(address _address) public view returns(bool) {\n', '        return whitelist[_address];\n', '    }\n', '}\n', '\n', 'contract LockingContract is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event NotedTokens(address indexed _beneficiary, uint256 _tokenAmount);\n', '    event ReleasedTokens(address indexed _beneficiary);\n', '    event ReducedLockingTime(uint256 _newUnlockTime);\n', '\n', '    ERC20 public tokenContract;\n', '    mapping(address => uint256) public tokens;\n', '    uint256 public totalTokens;\n', '    uint256 public unlockTime;\n', '\n', '    function isLocked() public view returns(bool) {\n', '        return now < unlockTime;\n', '    }\n', '\n', '    modifier onlyWhenUnlocked() {\n', '        require(!isLocked());\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenLocked() {\n', '        require(isLocked());\n', '        _;\n', '    }\n', '\n', '    function LockingContract(ERC20 _tokenContract, uint256 _unlockTime) public {\n', '        require(_unlockTime > now);\n', '        require(address(_tokenContract) != 0x0);\n', '        unlockTime = _unlockTime;\n', '        tokenContract = _tokenContract;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return tokens[_owner];\n', '    }\n', '\n', '    // Should only be done from another contract.\n', '    // To ensure that the LockingContract can release all noted tokens later,\n', '    // one should mint/transfer tokens to the LockingContract&#39;s account prior to noting\n', '    function noteTokens(address _beneficiary, uint256 _tokenAmount) external onlyOwner onlyWhenLocked {\n', '        uint256 tokenBalance = tokenContract.balanceOf(this);\n', '        require(tokenBalance >= totalTokens.add(_tokenAmount));\n', '\n', '        tokens[_beneficiary] = tokens[_beneficiary].add(_tokenAmount);\n', '        totalTokens = totalTokens.add(_tokenAmount);\n', '        emit NotedTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    function releaseTokens(address _beneficiary) public onlyWhenUnlocked {\n', '        require(msg.sender == owner || msg.sender == _beneficiary);\n', '        uint256 amount = tokens[_beneficiary];\n', '        tokens[_beneficiary] = 0;\n', '        require(tokenContract.transfer(_beneficiary, amount)); \n', '        totalTokens = totalTokens.sub(amount);\n', '        emit ReleasedTokens(_beneficiary);\n', '    }\n', '\n', '    function reduceLockingTime(uint256 _newUnlockTime) public onlyOwner onlyWhenLocked {\n', '        require(_newUnlockTime >= now);\n', '        require(_newUnlockTime < unlockTime);\n', '        unlockTime = _newUnlockTime;\n', '        emit ReducedLockingTime(_newUnlockTime);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract CrowdfundableToken is MintableToken {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public cap;\n', '\n', '    function CrowdfundableToken(uint256 _cap, string _name, string _symbol, uint8 _decimals) public {\n', '        require(_cap > 0);\n', '        require(bytes(_name).length > 0);\n', '        require(bytes(_symbol).length > 0);\n', '        cap = _cap;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    // override\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        require(totalSupply_.add(_amount) <= cap);\n', '        return super.mint(_to, _amount);\n', '    }\n', '\n', '    // override\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(mintingFinished == true);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    // override\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(mintingFinished == true);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function burn(uint amount) public {\n', '        totalSupply_ = totalSupply_.sub(amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '    }\n', '}\n', '\n', 'contract AllSporterCoin is CrowdfundableToken {\n', '    constructor() public \n', '        CrowdfundableToken(260000000 * (10**18), "AllSporter Coin", "ALL", 18) {\n', '    }\n', '}\n', '\n', '\n', 'contract Minter is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    /* --- EVENTS --- */\n', '\n', '    event Minted(address indexed account, uint etherAmount, uint tokenAmount);\n', '    event Reserved(uint etherAmount);\n', '    event MintedReserved(address indexed account, uint etherAmount, uint tokenAmount);\n', '    event Unreserved(uint etherAmount);\n', '\n', '    /* --- FIELDS --- */\n', '\n', '    CrowdfundableToken public token;\n', '    uint public saleEtherCap;\n', '    uint public confirmedSaleEther;\n', '    uint public reservedSaleEther;\n', '\n', '    /* --- MODIFIERS --- */\n', '\n', '    modifier onlyInUpdatedState() {\n', '        updateState();\n', '        _;\n', '    }\n', '\n', '    modifier upToSaleEtherCap(uint additionalEtherAmount) {\n', '        uint totalEtherAmount = confirmedSaleEther.add(reservedSaleEther).add(additionalEtherAmount);\n', '        require(totalEtherAmount <= saleEtherCap);\n', '        _;\n', '    }\n', '\n', '    modifier onlyApprovedMinter() {\n', '        require(canMint(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier atLeastMinimumAmount(uint etherAmount) {\n', '        require(etherAmount >= getMinimumContribution());\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAddress(address account) {\n', '        require(account != 0x0);\n', '        _;\n', '    }\n', '\n', '    /* --- CONSTRUCTOR --- */\n', '\n', '    constructor(CrowdfundableToken _token, uint _saleEtherCap) public onlyValidAddress(address(_token)) {\n', '        require(_saleEtherCap > 0);\n', '\n', '        token = _token;\n', '        saleEtherCap = _saleEtherCap;\n', '    }\n', '\n', '    /* --- PUBLIC / EXTERNAL METHODS --- */\n', '\n', '    function transferTokenOwnership() external onlyOwner {\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    function reserve(uint etherAmount) external\n', '        onlyInUpdatedState\n', '        onlyApprovedMinter\n', '        upToSaleEtherCap(etherAmount)\n', '        atLeastMinimumAmount(etherAmount)\n', '    {\n', '        reservedSaleEther = reservedSaleEther.add(etherAmount);\n', '        updateState();\n', '        emit Reserved(etherAmount);\n', '    }\n', '\n', '    function mintReserved(address account, uint etherAmount, uint tokenAmount) external\n', '        onlyInUpdatedState\n', '        onlyApprovedMinter\n', '    {\n', '        reservedSaleEther = reservedSaleEther.sub(etherAmount);\n', '        confirmedSaleEther = confirmedSaleEther.add(etherAmount);\n', '        require(token.mint(account, tokenAmount));\n', '        updateState();\n', '        emit MintedReserved(account, etherAmount, tokenAmount);\n', '    }\n', '\n', '    function unreserve(uint etherAmount) public\n', '        onlyInUpdatedState\n', '        onlyApprovedMinter\n', '    {\n', '        reservedSaleEther = reservedSaleEther.sub(etherAmount);\n', '        updateState();\n', '        emit Unreserved(etherAmount);\n', '    }\n', '\n', '    function mint(address account, uint etherAmount, uint tokenAmount) public\n', '        onlyInUpdatedState\n', '        onlyApprovedMinter\n', '        upToSaleEtherCap(etherAmount)\n', '    {\n', '        confirmedSaleEther = confirmedSaleEther.add(etherAmount);\n', '        require(token.mint(account, tokenAmount));\n', '        updateState();\n', '        emit Minted(account, etherAmount, tokenAmount);\n', '    }\n', '\n', '    // abstract\n', '    function getMinimumContribution() public view returns(uint);\n', '\n', '    // abstract\n', '    function updateState() public;\n', '\n', '    // abstract\n', '    function canMint(address sender) public view returns(bool);\n', '\n', '    // abstract\n', '    function getTokensForEther(uint etherAmount) public view returns(uint);\n', '}\n', '\n', 'contract DeferredKyc is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    /* --- EVENTS --- */\n', '\n', '    event AddedToKyc(address indexed investor, uint etherAmount, uint tokenAmount);\n', '    event Approved(address indexed investor, uint etherAmount, uint tokenAmount);\n', '    event Rejected(address indexed investor, uint etherAmount, uint tokenAmount);\n', '    event RejectedWithdrawn(address indexed investor, uint etherAmount);\n', '    event ApproverTransferred(address newApprover);\n', '    event TreasuryUpdated(address newTreasury);\n', '\n', '    /* --- FIELDS --- */\n', '\n', '    address public treasury;\n', '    Minter public minter;\n', '    address public approver;\n', '    mapping(address => uint) public etherInProgress;\n', '    mapping(address => uint) public tokenInProgress;\n', '    mapping(address => uint) public etherRejected;\n', '\n', '    /* --- MODIFIERS --- */ \n', '\n', '    modifier onlyApprover() {\n', '        require(msg.sender == approver);\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAddress(address account) {\n', '        require(account != 0x0);\n', '        _;\n', '    }\n', '\n', '    /* --- CONSTRUCTOR --- */\n', '\n', '    constructor(Minter _minter, address _approver, address _treasury)\n', '        public\n', '        onlyValidAddress(address(_minter))\n', '        onlyValidAddress(_approver)\n', '        onlyValidAddress(_treasury)\n', '    {\n', '        minter = _minter;\n', '        approver = _approver;\n', '        treasury = _treasury;\n', '    }\n', '\n', '    /* --- PUBLIC / EXTERNAL METHODS --- */\n', '\n', '    function updateTreasury(address newTreasury) external onlyOwner {\n', '        treasury = newTreasury;\n', '        emit TreasuryUpdated(newTreasury);\n', '    }\n', '\n', '    function addToKyc(address investor) external payable onlyOwner {\n', '        minter.reserve(msg.value);\n', '        uint tokenAmount = minter.getTokensForEther(msg.value);\n', '        require(tokenAmount > 0);\n', '        emit AddedToKyc(investor, msg.value, tokenAmount);\n', '\n', '        etherInProgress[investor] = etherInProgress[investor].add(msg.value);\n', '        tokenInProgress[investor] = tokenInProgress[investor].add(tokenAmount);\n', '    }\n', '\n', '    function approve(address investor) external onlyApprover {\n', '        minter.mintReserved(investor, etherInProgress[investor], tokenInProgress[investor]);\n', '        emit Approved(investor, etherInProgress[investor], tokenInProgress[investor]);\n', '        \n', '        uint value = etherInProgress[investor];\n', '        etherInProgress[investor] = 0;\n', '        tokenInProgress[investor] = 0;\n', '        treasury.transfer(value);\n', '    }\n', '\n', '    function reject(address investor) external onlyApprover {\n', '        minter.unreserve(etherInProgress[investor]);\n', '        emit Rejected(investor, etherInProgress[investor], tokenInProgress[investor]);\n', '\n', '        etherRejected[investor] = etherRejected[investor].add(etherInProgress[investor]);\n', '        etherInProgress[investor] = 0;\n', '        tokenInProgress[investor] = 0;\n', '    }\n', '\n', '    function withdrawRejected() external {\n', '        uint value = etherRejected[msg.sender];\n', '        etherRejected[msg.sender] = 0;\n', '        (msg.sender).transfer(value);\n', '        emit RejectedWithdrawn(msg.sender, value);\n', '    }\n', '\n', '    function forceWithdrawRejected(address investor) external onlyApprover {\n', '        uint value = etherRejected[investor];\n', '        etherRejected[investor] = 0;\n', '        (investor).transfer(value);\n', '        emit RejectedWithdrawn(investor, value);\n', '    }\n', '\n', '    function transferApprover(address newApprover) external onlyApprover {\n', '        approver = newApprover;\n', '        emit ApproverTransferred(newApprover);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    Revoked();\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract Allocator is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    /* --- CONSTANTS --- */\n', '\n', '    uint constant public ETHER_AMOUNT = 0;\n', '\n', '    // percentages\n', '    uint constant public COMMUNITY_PERCENTAGE = 5;\n', '    uint constant public ADVISORS_PERCENTAGE = 8;\n', '    uint constant public CUSTOMER_PERCENTAGE = 15;\n', '    uint constant public TEAM_PERCENTAGE = 17;\n', '    uint constant public SALE_PERCENTAGE = 55;\n', '    \n', '    // locking\n', '    uint constant public LOCKING_UNLOCK_TIME = 1602324000;\n', '\n', '    // vesting\n', '    uint constant public VESTING_START_TIME = 1568109600;\n', '    uint constant public VESTING_CLIFF_DURATION = 10000;\n', '    uint constant public VESTING_PERIOD = 50000;\n', '    \n', '    /* --- EVENTS --- */\n', '\n', '    event Initialized();\n', '    event AllocatedCommunity(address indexed account, uint tokenAmount);\n', '    event AllocatedAdvisors(address indexed account, uint tokenAmount);\n', '    event AllocatedCustomer(address indexed account, uint tokenAmount, address contractAddress);\n', '    event AllocatedTeam(address indexed account, uint tokenAmount, address contractAddress);\n', '    event LockedTokensReleased(address indexed account);\n', '    event VestedTokensReleased(address indexed account);\n', '\n', '    /* --- FIELDS --- */\n', '\n', '    Minter public minter;\n', '    bool public isInitialized = false;\n', '    mapping(address => TokenVesting) public vestingContracts; // one customer => one TokenVesting contract\n', '    mapping(address => SingleLockingContract) public lockingContracts; // one team => one SingleLockingContract\n', '\n', '    // pools\n', '    uint public communityPool;\n', '    uint public advisorsPool;\n', '    uint public customerPool;\n', '    uint public teamPool;\n', '    \n', '\n', '    /* --- MODIFIERS --- */\n', '\n', '    modifier initialized() {\n', '        if (!isInitialized) {\n', '            initialize();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier validPercentage(uint percent) {\n', '        require(percent >= 0 && percent <= 100);\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAddress(address account) {\n', '        require(account != 0x0);\n', '        _;\n', '    }\n', '\n', '    /* --- CONSTRUCTOR --- */\n', '\n', '    constructor(Minter _minter)\n', '    public\n', '    validPercentage(COMMUNITY_PERCENTAGE)\n', '    validPercentage(ADVISORS_PERCENTAGE)\n', '    validPercentage(CUSTOMER_PERCENTAGE)\n', '    validPercentage(TEAM_PERCENTAGE)\n', '    validPercentage(SALE_PERCENTAGE)\n', '    onlyValidAddress(_minter)\n', '    {\n', '        require(COMMUNITY_PERCENTAGE.add(ADVISORS_PERCENTAGE).add(CUSTOMER_PERCENTAGE).add(TEAM_PERCENTAGE).add(SALE_PERCENTAGE) == 100);\n', '        minter = _minter;\n', '    }\n', '\n', '    /* --- PUBLIC / EXTERNAL METHODS --- */\n', '\n', '    function releaseVested(address account) external initialized {\n', '        require(msg.sender == account || msg.sender == owner);\n', '        TokenVesting vesting = vestingContracts[account];\n', '        vesting.release(minter.token());\n', '        emit VestedTokensReleased(account);\n', '    }\n', '\n', '    function releaseLocked(address account) external initialized {\n', '        require(msg.sender == account || msg.sender == owner);\n', '        SingleLockingContract locking = lockingContracts[account];\n', '        locking.releaseTokens();\n', '        emit LockedTokensReleased(account);\n', '    }\n', '\n', '    function allocateCommunity(address account, uint tokenAmount) external initialized onlyOwner {\n', '        communityPool = communityPool.sub(tokenAmount);\n', '        minter.mint(account, ETHER_AMOUNT, tokenAmount);\n', '        emit AllocatedCommunity(account, tokenAmount);\n', '    }\n', '\n', '    function allocateAdvisors(address account, uint tokenAmount) external initialized onlyOwner {\n', '        advisorsPool = advisorsPool.sub(tokenAmount);\n', '        minter.mint(account, ETHER_AMOUNT, tokenAmount);\n', '        emit AllocatedAdvisors(account, tokenAmount);\n', '    }\n', '\n', '    // vesting\n', '    function allocateCustomer(address account, uint tokenAmount) external initialized onlyOwner {\n', '        customerPool = customerPool.sub(tokenAmount);\n', '        if (address(vestingContracts[account]) == 0x0) {\n', '            vestingContracts[account] = new TokenVesting(account, VESTING_START_TIME, VESTING_CLIFF_DURATION, VESTING_PERIOD, false);\n', '        }\n', '        minter.mint(address(vestingContracts[account]), ETHER_AMOUNT, tokenAmount);\n', '        emit AllocatedCustomer(account, tokenAmount, address(vestingContracts[account]));\n', '    }\n', '\n', '    // locking\n', '    function allocateTeam(address account, uint tokenAmount) external initialized onlyOwner {\n', '        teamPool = teamPool.sub(tokenAmount);\n', '        if (address(lockingContracts[account]) == 0x0) {\n', '            lockingContracts[account] = new SingleLockingContract(minter.token(), LOCKING_UNLOCK_TIME, account);\n', '        }\n', '        minter.mint(lockingContracts[account], ETHER_AMOUNT, tokenAmount);\n', '        emit AllocatedTeam(account, tokenAmount, address(lockingContracts[account]));\n', '    }\n', '\n', '    /* --- INTERNAL METHODS --- */\n', '\n', '    function initialize() internal {\n', '        isInitialized = true;\n', '        CrowdfundableToken token = minter.token();\n', '        uint tokensSold = token.totalSupply();\n', '        uint tokensPerPercent = tokensSold.div(SALE_PERCENTAGE);\n', '\n', '        communityPool = COMMUNITY_PERCENTAGE.mul(tokensPerPercent);\n', '        advisorsPool = ADVISORS_PERCENTAGE.mul(tokensPerPercent);\n', '        customerPool = CUSTOMER_PERCENTAGE.mul(tokensPerPercent);\n', '        teamPool = TEAM_PERCENTAGE.mul(tokensPerPercent);\n', '\n', '        emit Initialized();\n', '    }\n', '}']