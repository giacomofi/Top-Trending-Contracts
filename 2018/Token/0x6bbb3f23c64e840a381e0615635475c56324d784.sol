['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        require(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BEU {\n', '    using SafeMath for uint256;\n', '    string public name = "BitEDU";\n', '    string public symbol = "BEU";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 2000000000000000000000000000;\n', '    address public owner;\n', '    bool public lockAll = false;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public freezeOf;\n', '    mapping (address => uint256) public lockOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\n', '    /* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        balanceOf[msg.sender] = totalSupply;                                        // Give the creator all initial tokens\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(!lockAll);                                                          // lock all transfor in critical situation\n', '        require(_to != 0x0);                                                        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_value > 0);                                                        // Check value\n', '        require(balanceOf[msg.sender] >= _value);                                   // Check if the sender has enough\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);                         // Check for overflows\n', '        require(balanceOf[_to] + _value >= _value);                                 // Check for overflows\n', '        require(balanceOf[msg.sender] >= lockOf[msg.sender]);                                 // Check for lock\n', '        require(balanceOf[msg.sender] >= lockOf[msg.sender] + _value);              // Check for lock\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);    // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                  // Add the same to the recipient\n', '        emit Transfer(msg.sender, _to, _value);                                     // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowance[msg.sender][_spender] == 0));           // Only Reset, not allowed to modify\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(!lockAll);                                                          // lock all transfor in critical situation cases\n', '        require(_to != 0x0);                                                        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_value > 0);                                                        // Check Value\n', '        require(balanceOf[_from] >= _value);                                        // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);                          // Check for overflows\n', '        require(balanceOf[_to] + _value > _value);                                  // Check for overflows\n', '        require(allowance[_from][msg.sender] >= _value);                            // Check allowance\n', '        require(balanceOf[_from] >= lockOf[_from]);                                 // Check for lock\n', '        require(balanceOf[_from] >= lockOf[_from] + _value);                        // Check for lock\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);              // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                  // Add the same to the recipient\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function freeze(uint256 _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);                                   // Check if the sender has enough\n', '        require(freezeOf[msg.sender] + _value >= freezeOf[msg.sender]);             // Check for Overflows\n', '        require(freezeOf[msg.sender] + _value >= _value);                           // Check for Overflows\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);    // Subtract from the sender\n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);      // Updates totalSupply\n', '        emit Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function unfreeze(uint256 _value) public returns (bool success) {\n', '        require(_value > 0);                                                        // Check Value\n', '        require(freezeOf[msg.sender] >= _value);                                    // Check if the sender has enough\n', '        require(balanceOf[msg.sender] + _value > balanceOf[msg.sender]);            // Check for Overflows\n', '        require(balanceOf[msg.sender] + _value > _value);                           // Check for overflows\n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);      // Subtract from the freeze\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);    // Add to balance\n', '        emit Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(msg.sender == owner);                                               // Only Owner\n', '        require(_value > 0);                                                        // Check Value\n', '        require(balanceOf[msg.sender] >= _value);                                   // Check if the sender has enough\n', '        require(totalSupply >= _value);                                             // Check for overflows\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);    // Subtract from the sender\n', '        totalSupply = SafeMath.safeSub(totalSupply, _value);                        // Updates totalSupply\n', '        return true;\n', '    }\n', '\n', '    function lock(address _to, uint256 _value) public returns (bool success) {\n', '        require(msg.sender == owner);                                                // Only Owner\n', '        require(_to != 0x0);                                                         // Prevent lock to 0x0 address\n', '        require((_value == 0) || (lockOf[_to] == 0));                                // Only Reset, not allowed to modify\n', '        require(balanceOf[_to] >= _value);                                           // Check for lock overflows\n', '        lockOf[_to] = _value;\n', '        return true;\n', '    }\n', '\n', '    function lockForAll(bool b) public returns (bool success) {\n', '        require(msg.sender == owner);                                                // Only Owner\n', '        lockAll = b;\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        require(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BEU {\n', '    using SafeMath for uint256;\n', '    string public name = "BitEDU";\n', '    string public symbol = "BEU";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 2000000000000000000000000000;\n', '    address public owner;\n', '    bool public lockAll = false;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public freezeOf;\n', '    mapping (address => uint256) public lockOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\n', '    /* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        balanceOf[msg.sender] = totalSupply;                                        // Give the creator all initial tokens\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(!lockAll);                                                          // lock all transfor in critical situation\n', '        require(_to != 0x0);                                                        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_value > 0);                                                        // Check value\n', '        require(balanceOf[msg.sender] >= _value);                                   // Check if the sender has enough\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);                         // Check for overflows\n', '        require(balanceOf[_to] + _value >= _value);                                 // Check for overflows\n', '        require(balanceOf[msg.sender] >= lockOf[msg.sender]);                                 // Check for lock\n', '        require(balanceOf[msg.sender] >= lockOf[msg.sender] + _value);              // Check for lock\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);    // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                  // Add the same to the recipient\n', '        emit Transfer(msg.sender, _to, _value);                                     // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowance[msg.sender][_spender] == 0));           // Only Reset, not allowed to modify\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(!lockAll);                                                          // lock all transfor in critical situation cases\n', '        require(_to != 0x0);                                                        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_value > 0);                                                        // Check Value\n', '        require(balanceOf[_from] >= _value);                                        // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);                          // Check for overflows\n', '        require(balanceOf[_to] + _value > _value);                                  // Check for overflows\n', '        require(allowance[_from][msg.sender] >= _value);                            // Check allowance\n', '        require(balanceOf[_from] >= lockOf[_from]);                                 // Check for lock\n', '        require(balanceOf[_from] >= lockOf[_from] + _value);                        // Check for lock\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);              // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                  // Add the same to the recipient\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function freeze(uint256 _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);                                   // Check if the sender has enough\n', '        require(freezeOf[msg.sender] + _value >= freezeOf[msg.sender]);             // Check for Overflows\n', '        require(freezeOf[msg.sender] + _value >= _value);                           // Check for Overflows\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);    // Subtract from the sender\n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);      // Updates totalSupply\n', '        emit Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function unfreeze(uint256 _value) public returns (bool success) {\n', '        require(_value > 0);                                                        // Check Value\n', '        require(freezeOf[msg.sender] >= _value);                                    // Check if the sender has enough\n', '        require(balanceOf[msg.sender] + _value > balanceOf[msg.sender]);            // Check for Overflows\n', '        require(balanceOf[msg.sender] + _value > _value);                           // Check for overflows\n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);      // Subtract from the freeze\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);    // Add to balance\n', '        emit Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(msg.sender == owner);                                               // Only Owner\n', '        require(_value > 0);                                                        // Check Value\n', '        require(balanceOf[msg.sender] >= _value);                                   // Check if the sender has enough\n', '        require(totalSupply >= _value);                                             // Check for overflows\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);    // Subtract from the sender\n', '        totalSupply = SafeMath.safeSub(totalSupply, _value);                        // Updates totalSupply\n', '        return true;\n', '    }\n', '\n', '    function lock(address _to, uint256 _value) public returns (bool success) {\n', '        require(msg.sender == owner);                                                // Only Owner\n', '        require(_to != 0x0);                                                         // Prevent lock to 0x0 address\n', '        require((_value == 0) || (lockOf[_to] == 0));                                // Only Reset, not allowed to modify\n', '        require(balanceOf[_to] >= _value);                                           // Check for lock overflows\n', '        lockOf[_to] = _value;\n', '        return true;\n', '    }\n', '\n', '    function lockForAll(bool b) public returns (bool success) {\n', '        require(msg.sender == owner);                                                // Only Owner\n', '        lockAll = b;\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
