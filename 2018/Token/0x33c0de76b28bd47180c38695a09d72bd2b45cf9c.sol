['pragma solidity ^0.4.17;\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '     * The address whcih deploys this contrcat is automatically assgined ownership.\n', '     * */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Functions with this modifier can only be executed by the owner of the contract. \n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    /**\n', '    * Transfers ownership to new Ethereum address. This function can only be called by the \n', '    * owner.\n', '    * @param _newOwner the address to be granted ownership.\n', '    **/\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant public returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public  returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) internal balances;\n', '    \n', '    /**\n', '    * Returns the balance of the qeuried address\n', '    *\n', '    * @param _who The address which is being qeuried\n', '    **/\n', '    function balanceOf(address _who) public view returns(uint256) {\n', '        return balances[_who];\n', '    }\n', '    \n', '    /**\n', '    * Allows for the transfer of MSTCOIN tokens from peer to peer. \n', '    *\n', '    * @param _to The address of the receiver\n', '    * @param _value The amount of tokens to send\n', '    **/\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(balances[msg.sender] >= _value && _value > 0 && _to != 0x0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '    \n', '    mapping (address => mapping (address => uint256)) internal allowances;\n', '    \n', '    /**\n', '    * Returns the amount of tokens one has allowed another to spend on his or her behalf.\n', '    *\n', '    * @param _owner The address which is the owner of the tokens\n', '    * @param _spender The address which has been allowed to spend tokens on the owner&#39;s\n', '    * behalf\n', '    **/\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '    * Allows for the transfer of tokens on the behalf of the owner given that the owner has\n', '    * allowed it previously. \n', '    *\n', '    * @param _from The address of the owner\n', '    * @param _to The address of the recipient \n', '    * @param _value The amount of tokens to be sent\n', '    **/\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\n', '        require(allowances[_from][msg.sender] >= _value && _to != 0x0 && balances[_from] >= _value && _value > 0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * Allows the owner of tokens to approve another to spend tokens on his or her behalf\n', '    *\n', '    * @param _spender The address which is being allowed to spend tokens on the owner&#39; behalf\n', '    * @param _value The amount of tokens to be sent\n', '    **/\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_spender != 0x0 && _value > 0);\n', '        if(allowances[msg.sender][_spender] > 0 ) {\n', '            allowances[msg.sender][_spender] = 0;\n', '        }\n', '        allowances[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract Pausable is Ownable {\n', '   \n', '    event Pause();\n', '    event Unpause();\n', '    event Freeze ();\n', '    event LogFreeze();\n', '\n', '    address public constant IcoAddress = 0xe9c5c1c7dA613Ef0749492dA01129DDDbA484857;  \n', '    address public constant founderAddress = 0xF748D2322ADfE0E9f9b262Df6A2aD6CBF79A541A;\n', '\n', '    bool public paused = true;\n', '    \n', '    /**\n', '    * @dev modifier to allow actions only when the contract IS paused or if the \n', '    * owner or ICO contract is invoking the action\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused || msg.sender == IcoAddress || msg.sender == founderAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev modifier to allow actions only when the contract IS NOT paused\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '    \n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '    \n', '}\n', '\n', '\n', '\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract MSTCOIN is PausableToken {\n', '    \n', '    function MSTCOIN() public {\n', '        name = "MSTCOIN";\n', '        symbol = "MSTCOIN";\n', '        decimals = 6;\n', '        totalSupply = 500000000e6;\n', '        balances[founderAddress] = totalSupply;\n', '        Transfer(address(this), founderAddress, totalSupply);\n', '    }\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '    \n', '    /**\n', '    * Allows the owner to burn his own tokens.\n', '    * \n', '    * @param _value The amount of token to be burned\n', '    */\n', '    function burn(uint256 _value) public onlyOwner {\n', '        _burn(msg.sender, _value);\n', '    }\n', '    \n', '    /**\n', '    * Function is internally called by the burn function. \n', '    *\n', '    * @param _who Will always be the owners address\n', '    * @param _value The amount of tokens to be burned\n', '    **/\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(_who, _value);\n', '        Transfer(_who, address(0), _value);\n', '    }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '     * The address whcih deploys this contrcat is automatically assgined ownership.\n', '     * */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Functions with this modifier can only be executed by the owner of the contract. \n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    /**\n', '    * Transfers ownership to new Ethereum address. This function can only be called by the \n', '    * owner.\n', '    * @param _newOwner the address to be granted ownership.\n', '    **/\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant public returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public  returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) internal balances;\n', '    \n', '    /**\n', '    * Returns the balance of the qeuried address\n', '    *\n', '    * @param _who The address which is being qeuried\n', '    **/\n', '    function balanceOf(address _who) public view returns(uint256) {\n', '        return balances[_who];\n', '    }\n', '    \n', '    /**\n', '    * Allows for the transfer of MSTCOIN tokens from peer to peer. \n', '    *\n', '    * @param _to The address of the receiver\n', '    * @param _value The amount of tokens to send\n', '    **/\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(balances[msg.sender] >= _value && _value > 0 && _to != 0x0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '    \n', '    mapping (address => mapping (address => uint256)) internal allowances;\n', '    \n', '    /**\n', '    * Returns the amount of tokens one has allowed another to spend on his or her behalf.\n', '    *\n', '    * @param _owner The address which is the owner of the tokens\n', "    * @param _spender The address which has been allowed to spend tokens on the owner's\n", '    * behalf\n', '    **/\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '    * Allows for the transfer of tokens on the behalf of the owner given that the owner has\n', '    * allowed it previously. \n', '    *\n', '    * @param _from The address of the owner\n', '    * @param _to The address of the recipient \n', '    * @param _value The amount of tokens to be sent\n', '    **/\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\n', '        require(allowances[_from][msg.sender] >= _value && _to != 0x0 && balances[_from] >= _value && _value > 0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * Allows the owner of tokens to approve another to spend tokens on his or her behalf\n', '    *\n', "    * @param _spender The address which is being allowed to spend tokens on the owner' behalf\n", '    * @param _value The amount of tokens to be sent\n', '    **/\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_spender != 0x0 && _value > 0);\n', '        if(allowances[msg.sender][_spender] > 0 ) {\n', '            allowances[msg.sender][_spender] = 0;\n', '        }\n', '        allowances[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract Pausable is Ownable {\n', '   \n', '    event Pause();\n', '    event Unpause();\n', '    event Freeze ();\n', '    event LogFreeze();\n', '\n', '    address public constant IcoAddress = 0xe9c5c1c7dA613Ef0749492dA01129DDDbA484857;  \n', '    address public constant founderAddress = 0xF748D2322ADfE0E9f9b262Df6A2aD6CBF79A541A;\n', '\n', '    bool public paused = true;\n', '    \n', '    /**\n', '    * @dev modifier to allow actions only when the contract IS paused or if the \n', '    * owner or ICO contract is invoking the action\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused || msg.sender == IcoAddress || msg.sender == founderAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev modifier to allow actions only when the contract IS NOT paused\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '    \n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '    \n', '}\n', '\n', '\n', '\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract MSTCOIN is PausableToken {\n', '    \n', '    function MSTCOIN() public {\n', '        name = "MSTCOIN";\n', '        symbol = "MSTCOIN";\n', '        decimals = 6;\n', '        totalSupply = 500000000e6;\n', '        balances[founderAddress] = totalSupply;\n', '        Transfer(address(this), founderAddress, totalSupply);\n', '    }\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '    \n', '    /**\n', '    * Allows the owner to burn his own tokens.\n', '    * \n', '    * @param _value The amount of token to be burned\n', '    */\n', '    function burn(uint256 _value) public onlyOwner {\n', '        _burn(msg.sender, _value);\n', '    }\n', '    \n', '    /**\n', '    * Function is internally called by the burn function. \n', '    *\n', '    * @param _who Will always be the owners address\n', '    * @param _value The amount of tokens to be burned\n', '    **/\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(_who, _value);\n', '        Transfer(_who, address(0), _value);\n', '    }\n', '}']
