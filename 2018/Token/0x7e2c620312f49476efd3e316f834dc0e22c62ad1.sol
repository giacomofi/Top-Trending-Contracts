['pragma solidity ^0.4.24;\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC865 is ERC20 {\n', '\n', '    function transferPreSigned(\n', '        bytes _signature,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function approvePreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function increaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _addedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function decreaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _subtractedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function transferFromPreSigned(\n', '        bytes _signature,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract ERC865Token is ERC865, StandardToken {\n', '\n', '    /* Nonces of transfers performed */\n', '    mapping(bytes => bool) signatures;\n', '\n', '    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n', '    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n', '\n', '    /**\n', '     * @notice Submit a presigned transfer\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferPreSigned(\n', '        bytes _signature,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0), "No address provided");\n', '        require(signatures[_signature] == false, "No signature");\n', '\n', '        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n', '\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0), "From address is not provided");\n', '\n', '        balances[from] = balances[from].sub(_value).sub(_fee);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '        signatures[_signature] = true;\n', '\n', '        emit Transfer(from, _to, _value);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Submit a presigned approval\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _value uint256 The amount of tokens to allow.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function approvePreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0), "Spender is not provided");\n', '        require(signatures[_signature] == false, "No signature");\n', '\n', '        bytes32 hashedTx = approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0), "From addres is not provided");\n', '\n', '        allowed[from][_spender] = _value;\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '        signatures[_signature] = true;\n', '\n', '        emit Approval(from, _spender, _value);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Increase the amount of tokens that an owner allowed to a spender.\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function increaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _addedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0), "Spender address is not provided");\n', '        require(signatures[_signature] == false, "No Signature");\n', '\n', '        bytes32 hashedTx = increaseApprovalPreSignedHashing(address(this), _spender, _addedValue, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0), "From address is not provided");\n', '\n', '        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '        signatures[_signature] = true;\n', '\n', '        emit Approval(from, _spender, allowed[from][_spender]);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Decrease the amount of tokens that an owner allowed to a spender.\n', '     * @param _signature bytes The signature, issued by the owner\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function decreaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _subtractedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0), "Spender address is not provided");\n', '        require(signatures[_signature] == false, "No sognature");\n', '\n', '        bytes32 hashedTx = decreaseApprovalPreSignedHashing(address(this), _spender, _subtractedValue, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0), "From address is not provided");\n', '\n', '        uint oldValue = allowed[from][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[from][_spender] = 0;\n', '        } else {\n', '            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '        signatures[_signature] = true;\n', '\n', '        emit Approval(from, _spender, _subtractedValue);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from one address to another\n', '     * @param _signature bytes The signature, issued by the spender.\n', '     * @param _from address The address which you want to send tokens from.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferFromPreSigned(\n', '        bytes _signature,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0), "No [to] address provided");\n', '        require(signatures[_signature] == false, "No signature provided");\n', '\n', '        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\n', '\n', '        address spender = recover(hashedTx, _signature);\n', '        require(spender != address(0), "Spender address is not provided");\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][spender] = allowed[_from][spender].sub(_value);\n', '\n', '        balances[spender] = balances[spender].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '        signatures[_signature] = true;\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        emit Transfer(spender, msg.sender, _fee);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by transferPreSigned\n', '     * @param _token address The address of the token.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferPreSignedHashing(\n', '        address _token,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "48664c16": transferPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n', '        return keccak256(abi.encodePacked(bytes4(0x48664c16), _token, _to, _value, _fee, _nonce));\n', '    }\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by approvePreSigned\n', '     * @param _token address The address of the token\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _value uint256 The amount of tokens to allow.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function approvePreSignedHashing(\n', '        address _token,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "f7ac9c2e": approvePreSignedHashing(address,address,uint256,uint256,uint256) */\n', '        return keccak256(abi.encodePacked(bytes4(0xf7ac9c2e), _token, _spender, _value, _fee, _nonce));\n', '    }\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by increaseApprovalPreSigned\n', '     * @param _token address The address of the token\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function increaseApprovalPreSignedHashing(\n', '        address _token,\n', '        address _spender,\n', '        uint256 _addedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "a45f71ff": increaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n', '        return keccak256(abi.encodePacked(bytes4(0xa45f71ff), _token, _spender, _addedValue, _fee, _nonce));\n', '    }\n', '\n', '     /**\n', '      * @notice Hash (keccak256) of the payload used by decreaseApprovalPreSigned\n', '      * @param _token address The address of the token\n', '      * @param _spender address The address which will spend the funds.\n', '      * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n', '      * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '      * @param _nonce uint256 Presigned transaction number.\n', '      */\n', '    function decreaseApprovalPreSignedHashing(\n', '        address _token,\n', '        address _spender,\n', '        uint256 _subtractedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "59388d78": decreaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n', '        return keccak256(abi.encodePacked(bytes4(0x59388d78), _token, _spender, _subtractedValue, _fee, _nonce));\n', '    }\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by transferFromPreSigned\n', '     * @param _token address The address of the token\n', '     * @param _from address The address which you want to send tokens from.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferFromPreSignedHashing(\n', '        address _token,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "b7656dc5": transferFromPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n', '        return keccak256(abi.encodePacked(bytes4(0xb7656dc5), _token, _from, _to, _value, _fee, _nonce));\n', '    }\n', '\n', '    /**\n', '     * @notice Recover signer address from a message by using his signature\n', '     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '     * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '     */\n', '    function recover(bytes32 hash, bytes sig) public pure returns (address) {\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        //Check the signature length\n', '        if (sig.length != 65) {\n', '            return (address(0));\n', '        }\n', '\n', '        // Divide the signature in r, s and v variables\n', '        assembly {\n', '            r := mload(add(sig, 32))\n', '            s := mload(add(sig, 64))\n', '            v := byte(0, mload(add(sig, 96)))\n', '        }\n', '\n', '        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '        if (v < 27) {\n', '            v += 27;\n', '        }\n', '\n', '        // If the version is correct return the signer address\n', '        if (v != 27 && v != 28) {\n', '            return (address(0));\n', '        } else {\n', '            return ecrecover(hash, v, r, s);\n', '        }\n', '    }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', 'contract KittiefightToken is ERC865Token, PausableToken, CappedToken {\n', '\n', '    /* Set the token name for display */\n', '    string public constant symbol = "KTY";\n', '\n', '    /* Set the token symbol for display */\n', '    string public constant name = "Kittiefight";\n', '\n', '    /* Set the number of decimals for display */\n', '    uint8 public constant decimals = 18;\n', '\n', '    /* 100 milion KTY specified */\n', '    uint256 public constant amountOfTokenToMint = 10**8 * 10**uint256(decimals);\n', '\n', '    /* Is crowdsale filtering non registered users. false by default */\n', '    bool public isTransferWhitelistOnly = false;\n', '\n', '    /* Mapping of whitelisted users */\n', '    mapping (address => bool) transfersWhitelist;\n', '\n', '    event UserAllowedToTransfer(address user);\n', '\n', '    event TransferWhitelistOnly(bool flag);\n', '\n', '\n', '    constructor() CappedToken(amountOfTokenToMint) {\n', '        \n', '    }\n', '\n', '    /**\n', '     * @notice Is the address allowed to transfer\n', '     * @return true if the sender can transfer\n', '     */\n', '    function isUserAllowedToTransfer(address _user) public constant returns (bool) {\n', '        require(_user != 0x0);\n', '        return transfersWhitelist[_user];\n', '    }\n', '\n', '    /**\n', '     * @notice Enabling / Disabling transfers of non whitelisted users\n', '     */\n', '    function setWhitelistedOnly(bool _isWhitelistOnly) onlyOwner public {\n', '        if (isTransferWhitelistOnly != _isWhitelistOnly) {\n', '            isTransferWhitelistOnly = _isWhitelistOnly;\n', '            TransferWhitelistOnly(_isWhitelistOnly);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Adding a user to the whitelist\n', '     */\n', '    function whitelistUserForTransfers(address _user) onlyOwner public {\n', '        require(!isUserAllowedToTransfer(_user));\n', '        transfersWhitelist[_user] = true;\n', '        UserAllowedToTransfer(_user);\n', '    }\n', '\n', '    /**\n', '     * @notice Remove a user from the whitelist\n', '     */\n', '    function blacklistUserForTransfers(address _user) onlyOwner public {\n', '        require(isUserAllowedToTransfer(_user));\n', '        transfersWhitelist[_user] = false;\n', '        UserAllowedToTransfer(_user);\n', '    }\n', '\n', '    /**\n', '    * @notice transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '      if (isTransferWhitelistOnly) {\n', '        require(isUserAllowedToTransfer(msg.sender));\n', '      }\n', '      return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (isTransferWhitelistOnly) {\n', '            require(isUserAllowedToTransfer(_from));\n', '        }\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Submit a presigned transfer\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferPreSigned(\n', '        bytes _signature,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        whenNotPaused\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (isTransferWhitelistOnly) {\n', '            bytes32 hashedTx = super.transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n', '            address from = recover(hashedTx, _signature);\n', '            require(isUserAllowedToTransfer(from));\n', '        }\n', '        return super.transferPreSigned(_signature, _to, _value, _fee, _nonce);\n', '    }\n', '\n', '    /**\n', '     * @notice Submit a presigned approval\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _value uint256 The amount of tokens to allow.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function approvePreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        whenNotPaused\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (isTransferWhitelistOnly) {\n', '            bytes32 hashedTx = super.approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n', '            address from = recover(hashedTx, _signature);\n', '            require(isUserAllowedToTransfer(from));\n', '        }\n', '        return super.approvePreSigned(_signature, _spender, _value, _fee, _nonce);\n', '    }\n', '}']