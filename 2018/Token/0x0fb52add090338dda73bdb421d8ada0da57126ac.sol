['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallReceiver {\n', '    function receiveApproval(\n', '        address _from, \n', '        uint256 _amount, \n', '        address _token, \n', '        bytes _data\n', '    ) public;\n', '}\n', '\n', '//normal contract. already compiled as bin\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { \n', '        require(msg.sender == controller); \n', '        _; \n', '    }\n', '\n', '    //block for check//bool private initialed = false;\n', '    address public controller;\n', '\n', '    constructor() public {\n', '      //block for check//require(!initialed);\n', '      controller = msg.sender;\n', '      //block for check//initialed = true;\n', '    }\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController public {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '//abstract contract. used for interface\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) payable public returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public returns(bool);\n', '}\n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '      function totalSupply() constant returns (uint256 supply);\n', '      is replaced with:\n', '      uint256 public totalSupply;\n', '      This automatically creates a getter function for the totalSupply.\n', '      This is moved to the base contract since public getter functions are not\n', '      currently recognised as an implementation of the matching abstract\n', '      function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    //function totalSupply() public constant returns (uint256 balance);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    mapping (address => uint256) public balanceOf;\n', '    //function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    //function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract TokenI is ERC20Token, Controlled {\n', '\n', '    string public name;                //The Token&#39;s name: e.g. DigixDAO Tokens\n', '    uint8 public decimals = 18;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '\n', '\n', '    // ERC20 Methods\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(\n', '        address _spender,\n', '        uint256 _amount,\n', '        bytes _extraData\n', '    ) public returns (bool success);\n', '\n', '\n', '    // Generate and destroy tokens\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount) public returns (bool);\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount) public returns (bool);\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) public;\n', '\n', '\n', '    // Safety Methods\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _tokens The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address[] _tokens) public;\n', '\n', '\n', '    // Events\n', '\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '}\n', '\n', 'contract Token is TokenI {\n', '    using SafeMath for uint256;\n', '\n', '    string public techProvider = "WeYii Tech";\n', '    string public officialSite = "http://www.beautybloc.io";\n', '\n', '    //owner是最初的币持有者。对比之下，controller 是合约操作者\n', '    address public owner;\n', '\n', '    struct FreezeInfo {\n', '        address user;\n', '        uint256 amount;\n', '    }\n', '    //Key1: step(募资阶段); Key2: user sequence(用户序列)\n', '    mapping (uint8 => mapping (uint32 => FreezeInfo)) public freezeOf; //所有锁仓，key 使用序号向上增加，方便程序查询。\n', '    mapping (uint8 => uint32) public lastFreezeSeq; //最后的 freezeOf 键值。key: step; value: sequence\n', '    //mapping (uint8 => uint) internal unlockTime;\n', '\n', '    bool public transfersEnabled = true;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    /* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '    \n', '    /* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    event TransferMulti(uint256 userLen, uint256 valueAmount);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        address initialOwner\n', '        ) public {\n', '        owner = initialOwner;\n', '        balanceOf[owner] = initialSupply;\n', '        totalSupply = initialSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier ownerOrController() {\n', '        require(msg.sender == owner || msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    modifier ownerOrUser(address user){\n', '        require(msg.sender == owner || msg.sender == user);\n', '        _;\n', '    }\n', '\n', '    modifier userOrController(address user){\n', '        require(msg.sender == user || msg.sender == owner || msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    modifier transable(){\n', '        require(transfersEnabled);\n', '        _;\n', '    }\n', '\n', '    modifier realUser(address user){\n', '        if(user == 0x0){\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier moreThanZero(uint256 _value){\n', '        if (_value <= 0){\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier moreOrEqualZero(uint256 _value){\n', '        if(_value < 0){\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) {\n', '            return false;\n', '        }\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) realUser(_to) moreThanZero(_value) transable public returns (bool) {\n', '        require(balanceOf[msg.sender] >= _value);          // Check if the sender has enough\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) transable public returns (bool success) {\n', '        require(_value == 0 || (allowance[msg.sender][_spender] == 0));\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '     *  its behalf, and then a function is triggered in the contract that is\n', '     *  being approved, `_spender`. This allows users to use their tokens to\n', '     *  interact with contracts in one function call instead of two\n', '     * @param _spender The address of the contract able to transfer the tokens\n', '     * @param _amount The amount of tokens to be approved for transfer\n', '     * @return True if the function call was successful\n', '     */\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) transable public returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        ApproveAndCallReceiver(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) realUser(_from) realUser(_to) moreThanZero(_value) transable public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                 // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);   // Check for overflows\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);                           // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_value);                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferMulti(address[] _to, uint256[] _value) transable public returns (uint256 amount){\n', '        require(_to.length == _value.length && _to.length <= 1024);\n', '        uint256 balanceOfSender = balanceOf[msg.sender];\n', '        uint256 len = _to.length;\n', '        for(uint256 j; j<len; j++){\n', '            require(_value[j] <= balanceOfSender); //limit transfer value\n', '            amount = amount.add(_value[j]);\n', '        }\n', '        require(balanceOfSender - amount < balanceOfSender); //check enough and not overflow\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n', '        for(uint256 i; i<len; i++){\n', '            address _toI = _to[i];\n', '            uint256 _valueI = _value[i];\n', '            balanceOf[_toI] = balanceOf[_toI].add(_valueI);\n', '            emit Transfer(msg.sender, _toI, _valueI);\n', '        }\n', '        emit TransferMulti(len, amount);\n', '    }\n', '    \n', '    //对多人按相同数量转账\n', '    function transferMultiSameVaule(address[] _to, uint256 _value) transable public returns (bool success){\n', '        uint256 len = _to.length;\n', '        uint256 amount = _value.mul(len);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount); //this will check enough automatically\n', '        for(uint256 i; i<len; i++){\n', '            address _toI = _to[i];\n', '            balanceOf[_toI] = balanceOf[_toI].add(_value);\n', '            emit Transfer(msg.sender, _toI, _value);\n', '        }\n', '        emit TransferMulti(len, amount);\n', '        return true;\n', '    }\n', '    \n', '    //只能自己或者 owner,controller 才能冻结账户\n', '    function freeze(address _user, uint256 _value, uint8 _step) moreThanZero(_value) userOrController(_user) public returns (bool success) {\n', '        //info256("balanceOf[_user]", balanceOf[_user]);\n', '        require(balanceOf[_user] >= _value);\n', '        balanceOf[_user] = balanceOf[_user] - _value;\n', '        freezeOf[_step][lastFreezeSeq[_step]] = FreezeInfo({user:_user, amount:_value});\n', '        lastFreezeSeq[_step]++;\n', '        emit Freeze(_user, _value);\n', '        return true;\n', '    }\n', '\n', '    //event infoBool(string name, bool value);\n', '    //event infoAddr(string name, address addr);\n', '    //event info(string name, uint32 value);\n', '    //event info256(string name, uint256 value);\n', '    \n', '    //为用户解锁账户资金\n', '    function unFreeze(uint8 _step) ownerOrController public returns (bool unlockOver) {\n', '        //_end = length of freezeOf[_step]\n', '        uint32 _end = lastFreezeSeq[_step];\n', '        require(_end > 0);\n', '        //info("_end", _end);\n', '        unlockOver = (_end <= 99);\n', '        uint32 _start = (_end > 99) ? _end-100 : 0;\n', '        //info("_start", _start);\n', '        for(; _end>_start; _end--){\n', '            FreezeInfo storage fInfo = freezeOf[_step][_end-1];\n', '            uint256 _amount = fInfo.amount;\n', '            balanceOf[fInfo.user] += _amount;\n', '            delete freezeOf[_step][_end-1];\n', '            lastFreezeSeq[_step]--;\n', '            emit Unfreeze(fInfo.user, _amount);\n', '        }\n', '    }\n', '    \n', '    //accept ether\n', '    function() payable public {\n', '        //屏蔽控制方的合约类型检查，以兼容发行方无控制合约的情况。\n', '        require(isContract(controller));\n', '        bool proxyPayment = TokenController(controller).proxyPayment.value(msg.value)(msg.sender);\n', '        require(proxyPayment);\n', '    }\n', '\n', '    ////////////////\n', '    // Generate and destroy tokens\n', '    ////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _user The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _user, uint _amount) onlyController public returns (bool) {\n', '        require(balanceOf[owner] >= _amount);\n', '        balanceOf[_user] += _amount;\n', '        balanceOf[owner] -= _amount;\n', '        emit Transfer(0, _user, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _user The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _user, uint _amount) onlyController public returns (bool) {\n', '        require(balanceOf[_user] >= _amount);\n', '        balanceOf[owner] += _amount;\n', '        balanceOf[_user] -= _amount;\n', '        emit Transfer(_user, 0, _amount);\n', '        emit Burn(_user, _amount);\n', '        return true;\n', '    }\n', '\n', '    ////////////////\n', '    // Enable tokens transfers\n', '    ////////////////\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) ownerOrController public {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '    //////////\n', '    // Safety Methods\n', '    //////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address[] tokens) onlyOwner public {\n', '        address _token;\n', '        uint256 balance;\n', '        ERC20Token token;\n', '        //uint256 len = tokens.length;\n', '        for(uint256 i; i<tokens.length; i++){\n', '            _token = tokens[i];\n', '            if (_token == 0x0) {\n', '                balance = address(this).balance;\n', '                if(balance > 0){\n', '                    owner.transfer(balance);\n', '                }else{\n', '                    continue;\n', '                }\n', '            }else{\n', '                token = ERC20Token(_token);\n', '                balance = token.balanceOf(address(this));\n', '                token.transfer(owner, balance);\n', '                emit ClaimedTokens(_token, owner, balance);\n', '            }\n', '        }\n', '    }\n', '\n', '    function changeOwner(address newOwner) onlyOwner public returns (bool) {\n', '        balanceOf[newOwner] = balanceOf[owner].add(balanceOf[newOwner]);\n', '        balanceOf[owner] = 0;\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallReceiver {\n', '    function receiveApproval(\n', '        address _from, \n', '        uint256 _amount, \n', '        address _token, \n', '        bytes _data\n', '    ) public;\n', '}\n', '\n', '//normal contract. already compiled as bin\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { \n', '        require(msg.sender == controller); \n', '        _; \n', '    }\n', '\n', '    //block for check//bool private initialed = false;\n', '    address public controller;\n', '\n', '    constructor() public {\n', '      //block for check//require(!initialed);\n', '      controller = msg.sender;\n', '      //block for check//initialed = true;\n', '    }\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController public {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '//abstract contract. used for interface\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) payable public returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public returns(bool);\n', '}\n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '      function totalSupply() constant returns (uint256 supply);\n', '      is replaced with:\n', '      uint256 public totalSupply;\n', '      This automatically creates a getter function for the totalSupply.\n', '      This is moved to the base contract since public getter functions are not\n', '      currently recognised as an implementation of the matching abstract\n', '      function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    //function totalSupply() public constant returns (uint256 balance);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    mapping (address => uint256) public balanceOf;\n', '    //function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    //function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract TokenI is ERC20Token, Controlled {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals = 18;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '\n', '\n', '    // ERC20 Methods\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(\n', '        address _spender,\n', '        uint256 _amount,\n', '        bytes _extraData\n', '    ) public returns (bool success);\n', '\n', '\n', '    // Generate and destroy tokens\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount) public returns (bool);\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount) public returns (bool);\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) public;\n', '\n', '\n', '    // Safety Methods\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _tokens The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address[] _tokens) public;\n', '\n', '\n', '    // Events\n', '\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '}\n', '\n', 'contract Token is TokenI {\n', '    using SafeMath for uint256;\n', '\n', '    string public techProvider = "WeYii Tech";\n', '    string public officialSite = "http://www.beautybloc.io";\n', '\n', '    //owner是最初的币持有者。对比之下，controller 是合约操作者\n', '    address public owner;\n', '\n', '    struct FreezeInfo {\n', '        address user;\n', '        uint256 amount;\n', '    }\n', '    //Key1: step(募资阶段); Key2: user sequence(用户序列)\n', '    mapping (uint8 => mapping (uint32 => FreezeInfo)) public freezeOf; //所有锁仓，key 使用序号向上增加，方便程序查询。\n', '    mapping (uint8 => uint32) public lastFreezeSeq; //最后的 freezeOf 键值。key: step; value: sequence\n', '    //mapping (uint8 => uint) internal unlockTime;\n', '\n', '    bool public transfersEnabled = true;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    /* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '    \n', '    /* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    event TransferMulti(uint256 userLen, uint256 valueAmount);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        address initialOwner\n', '        ) public {\n', '        owner = initialOwner;\n', '        balanceOf[owner] = initialSupply;\n', '        totalSupply = initialSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier ownerOrController() {\n', '        require(msg.sender == owner || msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    modifier ownerOrUser(address user){\n', '        require(msg.sender == owner || msg.sender == user);\n', '        _;\n', '    }\n', '\n', '    modifier userOrController(address user){\n', '        require(msg.sender == user || msg.sender == owner || msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    modifier transable(){\n', '        require(transfersEnabled);\n', '        _;\n', '    }\n', '\n', '    modifier realUser(address user){\n', '        if(user == 0x0){\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier moreThanZero(uint256 _value){\n', '        if (_value <= 0){\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier moreOrEqualZero(uint256 _value){\n', '        if(_value < 0){\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) {\n', '            return false;\n', '        }\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) realUser(_to) moreThanZero(_value) transable public returns (bool) {\n', '        require(balanceOf[msg.sender] >= _value);          // Check if the sender has enough\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) transable public returns (bool success) {\n', '        require(_value == 0 || (allowance[msg.sender][_spender] == 0));\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '     *  its behalf, and then a function is triggered in the contract that is\n', '     *  being approved, `_spender`. This allows users to use their tokens to\n', '     *  interact with contracts in one function call instead of two\n', '     * @param _spender The address of the contract able to transfer the tokens\n', '     * @param _amount The amount of tokens to be approved for transfer\n', '     * @return True if the function call was successful\n', '     */\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) transable public returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        ApproveAndCallReceiver(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) realUser(_from) realUser(_to) moreThanZero(_value) transable public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                 // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);   // Check for overflows\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);                           // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_value);                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferMulti(address[] _to, uint256[] _value) transable public returns (uint256 amount){\n', '        require(_to.length == _value.length && _to.length <= 1024);\n', '        uint256 balanceOfSender = balanceOf[msg.sender];\n', '        uint256 len = _to.length;\n', '        for(uint256 j; j<len; j++){\n', '            require(_value[j] <= balanceOfSender); //limit transfer value\n', '            amount = amount.add(_value[j]);\n', '        }\n', '        require(balanceOfSender - amount < balanceOfSender); //check enough and not overflow\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n', '        for(uint256 i; i<len; i++){\n', '            address _toI = _to[i];\n', '            uint256 _valueI = _value[i];\n', '            balanceOf[_toI] = balanceOf[_toI].add(_valueI);\n', '            emit Transfer(msg.sender, _toI, _valueI);\n', '        }\n', '        emit TransferMulti(len, amount);\n', '    }\n', '    \n', '    //对多人按相同数量转账\n', '    function transferMultiSameVaule(address[] _to, uint256 _value) transable public returns (bool success){\n', '        uint256 len = _to.length;\n', '        uint256 amount = _value.mul(len);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount); //this will check enough automatically\n', '        for(uint256 i; i<len; i++){\n', '            address _toI = _to[i];\n', '            balanceOf[_toI] = balanceOf[_toI].add(_value);\n', '            emit Transfer(msg.sender, _toI, _value);\n', '        }\n', '        emit TransferMulti(len, amount);\n', '        return true;\n', '    }\n', '    \n', '    //只能自己或者 owner,controller 才能冻结账户\n', '    function freeze(address _user, uint256 _value, uint8 _step) moreThanZero(_value) userOrController(_user) public returns (bool success) {\n', '        //info256("balanceOf[_user]", balanceOf[_user]);\n', '        require(balanceOf[_user] >= _value);\n', '        balanceOf[_user] = balanceOf[_user] - _value;\n', '        freezeOf[_step][lastFreezeSeq[_step]] = FreezeInfo({user:_user, amount:_value});\n', '        lastFreezeSeq[_step]++;\n', '        emit Freeze(_user, _value);\n', '        return true;\n', '    }\n', '\n', '    //event infoBool(string name, bool value);\n', '    //event infoAddr(string name, address addr);\n', '    //event info(string name, uint32 value);\n', '    //event info256(string name, uint256 value);\n', '    \n', '    //为用户解锁账户资金\n', '    function unFreeze(uint8 _step) ownerOrController public returns (bool unlockOver) {\n', '        //_end = length of freezeOf[_step]\n', '        uint32 _end = lastFreezeSeq[_step];\n', '        require(_end > 0);\n', '        //info("_end", _end);\n', '        unlockOver = (_end <= 99);\n', '        uint32 _start = (_end > 99) ? _end-100 : 0;\n', '        //info("_start", _start);\n', '        for(; _end>_start; _end--){\n', '            FreezeInfo storage fInfo = freezeOf[_step][_end-1];\n', '            uint256 _amount = fInfo.amount;\n', '            balanceOf[fInfo.user] += _amount;\n', '            delete freezeOf[_step][_end-1];\n', '            lastFreezeSeq[_step]--;\n', '            emit Unfreeze(fInfo.user, _amount);\n', '        }\n', '    }\n', '    \n', '    //accept ether\n', '    function() payable public {\n', '        //屏蔽控制方的合约类型检查，以兼容发行方无控制合约的情况。\n', '        require(isContract(controller));\n', '        bool proxyPayment = TokenController(controller).proxyPayment.value(msg.value)(msg.sender);\n', '        require(proxyPayment);\n', '    }\n', '\n', '    ////////////////\n', '    // Generate and destroy tokens\n', '    ////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _user The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _user, uint _amount) onlyController public returns (bool) {\n', '        require(balanceOf[owner] >= _amount);\n', '        balanceOf[_user] += _amount;\n', '        balanceOf[owner] -= _amount;\n', '        emit Transfer(0, _user, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _user The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _user, uint _amount) onlyController public returns (bool) {\n', '        require(balanceOf[_user] >= _amount);\n', '        balanceOf[owner] += _amount;\n', '        balanceOf[_user] -= _amount;\n', '        emit Transfer(_user, 0, _amount);\n', '        emit Burn(_user, _amount);\n', '        return true;\n', '    }\n', '\n', '    ////////////////\n', '    // Enable tokens transfers\n', '    ////////////////\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) ownerOrController public {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '    //////////\n', '    // Safety Methods\n', '    //////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address[] tokens) onlyOwner public {\n', '        address _token;\n', '        uint256 balance;\n', '        ERC20Token token;\n', '        //uint256 len = tokens.length;\n', '        for(uint256 i; i<tokens.length; i++){\n', '            _token = tokens[i];\n', '            if (_token == 0x0) {\n', '                balance = address(this).balance;\n', '                if(balance > 0){\n', '                    owner.transfer(balance);\n', '                }else{\n', '                    continue;\n', '                }\n', '            }else{\n', '                token = ERC20Token(_token);\n', '                balance = token.balanceOf(address(this));\n', '                token.transfer(owner, balance);\n', '                emit ClaimedTokens(_token, owner, balance);\n', '            }\n', '        }\n', '    }\n', '\n', '    function changeOwner(address newOwner) onlyOwner public returns (bool) {\n', '        balanceOf[newOwner] = balanceOf[owner].add(balanceOf[newOwner]);\n', '        balanceOf[owner] = 0;\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}']
