['// ----------------------------------------------------------------------------\n', '// &#39;buckycoin&#39; AIRDROP token contract\n', '//\n', '// Deployed to : 0xbf4de56095f9e39d59fd4f54bc63b39f4f0f7afc\n', '// Symbol      : BUC\n', '// Name        : buckycoin Token\n', '// Total supply: 940000000\n', '// Decimals    : 18\n', '//\n', '// POWERED BY BUCKY HOUSE.\n', '//\n', '// (c) by Team @ BUCKYHOUSE  2018.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', ' \n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract token { function transfer(address receiver, uint amount){  } }\n', '\n', 'contract DistributeTokens is Ownable{\n', '  \n', '  token tokenReward;\n', '  address public addressOfTokenUsedAsReward;\n', '  function setTokenReward(address _addr) onlyOwner {\n', '    tokenReward = token(_addr);\n', '    addressOfTokenUsedAsReward = _addr;\n', '  }\n', '\n', '  function distributeVariable(address[] _addrs, uint[] _bals) onlyOwner{\n', '    for(uint i = 0; i < _addrs.length; ++i){\n', '      tokenReward.transfer(_addrs[i],_bals[i]);\n', '    }\n', '  }\n', '\n', '  function distributeFixed(address[] _addrs, uint _amoutToEach) onlyOwner{\n', '    for(uint i = 0; i < _addrs.length; ++i){\n', '      tokenReward.transfer(_addrs[i],_amoutToEach);\n', '    }\n', '  }\n', '\n', '  function withdrawTokens(uint _amount) onlyOwner {\n', '    tokenReward.transfer(owner,_amount);\n', '  }\n', '}']
['// ----------------------------------------------------------------------------\n', "// 'buckycoin' AIRDROP token contract\n", '//\n', '// Deployed to : 0xbf4de56095f9e39d59fd4f54bc63b39f4f0f7afc\n', '// Symbol      : BUC\n', '// Name        : buckycoin Token\n', '// Total supply: 940000000\n', '// Decimals    : 18\n', '//\n', '// POWERED BY BUCKY HOUSE.\n', '//\n', '// (c) by Team @ BUCKYHOUSE  2018.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', ' \n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract token { function transfer(address receiver, uint amount){  } }\n', '\n', 'contract DistributeTokens is Ownable{\n', '  \n', '  token tokenReward;\n', '  address public addressOfTokenUsedAsReward;\n', '  function setTokenReward(address _addr) onlyOwner {\n', '    tokenReward = token(_addr);\n', '    addressOfTokenUsedAsReward = _addr;\n', '  }\n', '\n', '  function distributeVariable(address[] _addrs, uint[] _bals) onlyOwner{\n', '    for(uint i = 0; i < _addrs.length; ++i){\n', '      tokenReward.transfer(_addrs[i],_bals[i]);\n', '    }\n', '  }\n', '\n', '  function distributeFixed(address[] _addrs, uint _amoutToEach) onlyOwner{\n', '    for(uint i = 0; i < _addrs.length; ++i){\n', '      tokenReward.transfer(_addrs[i],_amoutToEach);\n', '    }\n', '  }\n', '\n', '  function withdrawTokens(uint _amount) onlyOwner {\n', '    tokenReward.transfer(owner,_amount);\n', '  }\n', '}']
