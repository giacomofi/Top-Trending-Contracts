['pragma solidity ^0.4.24;\n', "// Spielley's King of the crypto hill beta Coallition expansion v1.01\n", '// Coallition owner sets shares for the alliance, alliance members send in their eth winnings to share among the group\n', '// Coallition owner can increase or decrease members and shares\n', '// this is not a trustless situation, alliance owner can screw everyone over, only join an alliance you trust\n', '\n', '// play at https://kotch.dvx.me/# \n', '// 28/08/2018\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', 'contract Coallition is Owned {\n', '     using SafeMath for uint;\n', '     \n', '     mapping(uint256 => address) public members;\n', '     mapping(address => uint256) public shares;\n', '     \n', '     uint256 public total;\n', '     constructor () public {\n', '         \n', '    }\n', '     function addmember(uint256 index , address newmember) public onlyOwner  {\n', '   members[index] = newmember;\n', '}\n', '     function addshares(uint256 sharestoadd , address member) public onlyOwner  {\n', 'shares[member] += sharestoadd;\n', '}\n', 'function deductshares(uint256 sharestoadd , address member) public onlyOwner  {\n', '   shares[member] -= sharestoadd;\n', '}\n', 'function setshares(uint256 sharestoadd , address member) public onlyOwner  {\n', '   shares[member] = sharestoadd;\n', '}\n', '// set total number of members\n', 'function settotal(uint256 set) public onlyOwner  {\n', '   total = set;\n', '}\n', '    function payout() public payable {\n', '        \n', '   for(uint i=0; i< total; i++)\n', '        {\n', '            uint256 totalshares;\n', '            totalshares += shares[members[i]];\n', '        }\n', '        uint256 base = msg.value.div(totalshares);\n', '    for(i=0; i< total; i++)\n', '        {\n', '            \n', '            uint256 amounttotransfer = base.mul(shares[members[i]]);\n', '            members[i].transfer(amounttotransfer);\n', '            \n', '        }\n', '}\n', 'function collectdustatcontract() public payable {\n', '        \n', '   for(uint i=0; i< total; i++)\n', '        {\n', '            uint256 totalshares;\n', '            totalshares += shares[members[i]];\n', '        }\n', '       \n', '        uint256 base = address(this).balance.div(totalshares);\n', '    for(i=0; i< total; i++)\n', '        {\n', '            \n', '            uint256 amounttotransfer = base.mul(shares[members[i]]);\n', '            members[i].transfer(amounttotransfer);\n', '            \n', '        }\n', '}\n', ' function () external payable{payout();}     \n', '}']