['pragma solidity ^0.4.18;\n', '\n', '/*\n', ' * ERC223 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' * see https://github.com/ethereum/EIPs/issues/223\n', ' */\n', 'contract ERC223 {\n', '    function totalSupply() constant public returns (uint256 outTotalSupply);\n', '    function balanceOf( address _owner) constant public returns (uint256 balance);\n', '    function transfer( address _to, uint256 _value) public returns (bool success);\n', '    function transfer( address _to, uint256 _value, bytes _data) public returns (bool success);\n', '    function transferFrom( address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve( address _spender, uint256 _value) public returns (bool success);\n', '    function allowance( address _owner, address _spender) constant public returns (uint256 remaining);\n', '    event Transfer( address indexed _from, address indexed _to, uint _value, bytes _data);\n', '    event Approval( address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract ERC223Receiver { \n', '    /**\n', '     * @dev Standard ERC223 function that will handle incoming token transfers.\n', '     *\n', '     * @param _from  Token sender address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '\n', '\n', '\n', '/// @title A base contract to control ownership\n', '/// @author cuilichen\n', 'contract OwnerBase {\n', '\n', '    // The addresses of the accounts that can execute actions within each roles.\n', '    address public ceoAddress;\n', '    address public cfoAddress;\n', '    address public cooAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '    \n', '    /// constructor\n', '    function OwnerBase() public {\n', '       ceoAddress = msg.sender;\n', '       cfoAddress = msg.sender;\n', '       cooAddress = msg.sender;\n', '    }\n', '\n', '    /// @dev Access modifier for CEO-only functionality\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for CFO-only functionality\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '    \n', '    /// @dev Access modifier for COO-only functionality\n', '    modifier onlyCOO() {\n', '        require(msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '    /// @param _newCEO The address of the new CEO\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '\n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCFO The address of the new COO\n', '    function setCFO(address _newCFO) external onlyCEO {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '    \n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCOO The address of the new COO\n', '    function setCOO(address _newCOO) external onlyCEO {\n', '        require(_newCOO != address(0));\n', '\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCOO whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n', '    ///  one reason we may pause the contract is when CFO or COO accounts are\n', '    ///  compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyCOO whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Standard ERC223 receiver\n', ' */\n', 'contract RechargeMain is ERC223Receiver, OwnerBase {\n', '\n', '\tevent EvtCoinSetted(address coinContract);\n', '    \n', '\tevent EvtRecharge(address customer, uint amount);\n', '\n', '\t\n', '\tERC223 public coinContract;\n', '\t\n', '\t\n', '    function RechargeMain(address coin) public {\n', '\t\t// the creator of the contract is the initial CEO\n', '        ceoAddress = msg.sender;\n', '        cooAddress = msg.sender;\n', '        cfoAddress = msg.sender;\n', '\t\t\n', '\t\tcoinContract = ERC223(coin);\n', '    }\n', '\n', '    /**\n', '     * Owner can update base information here.\n', '     */\n', '    function setCoinInfo(address coin) public {\n', '        require(msg.sender == ceoAddress || msg.sender == cooAddress);\n', '\t\t\n', '\t\tcoinContract = ERC223(coin);\n', '\t\t\n', '        emit EvtCoinSetted(coinContract);\n', '    }\n', '\t\n', '\t/// @dev receive token from coinContract\n', '\tfunction tokenFallback(address _from, uint _value, bytes ) public {\n', '\t\trequire(msg.sender == address(coinContract));\n', '\t\temit EvtRecharge(_from, _value);\n', '\t}\n', '    \n', '\t\n', '    function () public payable {\n', '        //fallback\n', '    }\n', '    \n', '    \n', '    /// transfer dead tokens to contract master\n', '    function withdrawTokens() external {\n', '\t\taddress myself = address(this);\n', '        uint256 fundNow = coinContract.balanceOf(myself);\n', '        coinContract.transfer(cfoAddress, fundNow);//token\n', '        \n', '        uint256 balance = myself.balance;\n', '        cfoAddress.transfer(balance);//eth\n', '    }\n', '    \n', '\n', '}']