['pragma solidity ^0.4.24;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Destructible.sol\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  constructor() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC223/ERC223Basic.sol\n', '\n', '/**\n', ' * @title ERC223Basic extends ERC20 interface and supports ERC223\n', ' */\n', 'contract ERC223Basic is ERC20Basic {\n', '  function transfer(address _to, uint256 _value, bytes _data) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n', '}\n', '\n', '// File: contracts/token/ERC223/ERC223ReceivingContract.sol\n', '\n', '/**\n', ' * @title ERC223ReceivingContract contract that will work with ERC223 tokens.\n', ' */\n', 'contract ERC223ReceivingContract {\n', '  /**\n', '  * @dev Standard ERC223 function that will handle incoming token transfers.\n', '  *\n', '  * @param _from  Token sender address.\n', '  * @param _value Amount of tokens.\n', '  * @param _data  Transaction metadata.\n', '  */\n', '  function tokenFallback(address _from, uint256 _value, bytes _data) public returns (bool);\n', '}\n', '\n', '// File: contracts/Adminable.sol\n', '\n', '/**\n', ' * @title Adminable\n', ' * @dev The Adminable contract has the simple protection logic, and provides admin based access control\n', ' */\n', 'contract Adminable is Ownable {\n', '\taddress public admin;\n', '\tevent AdminDesignated(address indexed previousAdmin, address indexed newAdmin);\n', '\n', '  /**\n', '    * @dev Throws if called the non admin.\n', '    */\n', '\tmodifier onlyAdmin() {\n', '\t\trequire(msg.sender == admin);\n', '\t\t_;\n', '\t}\n', '\n', '  /**\n', '    * @dev Throws if called the non owner and non admin.\n', '    */\n', '  modifier onlyOwnerOrAdmin() {\n', '\t\trequire(msg.sender == owner || msg.sender == admin);\n', '\t\t_;\n', '\t}\n', '\n', '  /**\n', '    * @dev Designate new admin for the address\n', '    * @param _address address The address you want to be a new admin\n', '    */\n', '\tfunction designateAdmin(address _address) public onlyOwner {\n', '\t\trequire(_address != address(0) && _address != owner);\n', '\t\temit AdminDesignated(admin, _address);\n', '\t\tadmin = _address;\n', '\t}\n', '}\n', '\n', '// File: contracts/Lockable.sol\n', '\n', '/**\n', ' * @title Lockable\n', ' * @dev The Lockable contract has an locks address map, and provides lockable control\n', ' * functions, this simplifies the implementation of "lock transfers".\n', ' *\n', ' */\n', 'contract Lockable is Adminable, ERC20Basic {\n', '  using SafeMath for uint256;\n', '  // EPOCH TIMESTAMP OF "Tue Sept 24 2019 00:00:00 GMT+0000"\n', '  // @see https://www.unixtimestamp.com/index.php\n', '  uint public globalUnlockTime = 1569355060;\n', '  uint public constant decimals = 18;\n', '\n', '  event UnLock(address indexed unlocked);\n', '  event Lock(address indexed locked, uint until, uint256 value, uint count);\n', '  event UpdateGlobalUnlockTime(uint256 epoch);\n', '\n', '  struct LockMeta {\n', '    uint256 value;\n', '    uint until;\n', '  }\n', '\n', '  mapping(address => LockMeta[]) internal locksMeta;\n', '  mapping(address => bool) locks;\n', '\n', '  /**\n', '    * @dev Lock tokens for the address\n', '    * @param _address address The address you want to lock tokens\n', '    * @param _days uint The days count you want to lock untill from now\n', '    * @param _value uint256 the amount of tokens to be locked\n', '    */\n', '  function lock(address _address, uint _days, uint256 _value) onlyOwnerOrAdmin public {\n', '    _value = _value*(10**decimals);\n', '    require(_value > 0);\n', '    require(_days > 0);\n', '    require(_address != owner);\n', '    require(_address != admin);\n', '\n', '    uint untilTime = block.timestamp + _days * 1 days;\n', '    locks[_address] = true;\n', '    // check if we have locks\n', '    locksMeta[_address].push(LockMeta(_value, untilTime));\n', '    // fire lock event\n', '    emit Lock(_address, untilTime, _value, locksMeta[_address].length);\n', '  }\n', '\n', '  /**\n', '    * @dev Unlock tokens for the address\n', '    * @param _address address The address you want to unlock tokens\n', '    */\n', '  function unlock(address _address) onlyOwnerOrAdmin public {\n', '    locks[_address] = false;\n', '    delete locksMeta[_address];\n', '    emit UnLock(_address);\n', '  }\n', '\n', '  /**\n', '    * @dev Gets the locked balance of the specified address and time\n', '    * @param _owner The address to query the locked balance of.\n', '    * @param _time The timestamp seconds to query the locked balance of.\n', '    * @return An uint256 representing the locked amount owned by the passed address.\n', '    */\n', '  function lockedBalanceOf(address _owner, uint _time) public view returns (uint256) {\n', '    LockMeta[] memory locked = locksMeta[_owner];\n', '    uint length = locked.length;\n', '    // if no locks or even not created (takes bdefault) return 0\n', '    if (length == 0) {\n', '      return 0;\n', '    }\n', '    // sum all available locks\n', '    uint256 _result = 0;\n', '    for (uint i = 0; i < length; i++) {\n', '      if (_time <= locked[i].until) {\n', '        _result = _result.add(locked[i].value);\n', '      }\n', '    }\n', '    return _result;\n', '  }\n', '\n', '  /**\n', '    * @dev Gets the locked balance of the specified address of the current time\n', '    * @param _owner The address to query the locked balance of.\n', '    * @return An uint256 representing the locked amount owned by the passed address.\n', '    */\n', '  function lockedNowBalanceOf(address _owner) public view returns (uint256) {\n', '    return this.lockedBalanceOf(_owner, block.timestamp);\n', '  }\n', '\n', '  /**\n', '    * @dev Gets the unlocked balance of the specified address and time\n', '    * @param _owner The address to query the unlocked balance of.\n', '    * @param _time The timestamp seconds to query the unlocked balance of.\n', '    * @return An uint256 representing the unlocked amount owned by the passed address.\n', '    */\n', '  function unlockedBalanceOf(address _owner, uint _time) public view returns (uint256) {\n', '    return this.balanceOf(_owner).sub(lockedBalanceOf(_owner, _time));\n', '  }\n', '\n', '  /**\n', '    * @dev Gets the unlocked balance of the specified address of the current time\n', '    * @param _owner The address to query the unlocked balance of.\n', '    * @return An uint256 representing the unlocked amount owned by the passed address.\n', '    */\n', '  function unlockedNowBalanceOf(address _owner) public view returns (uint256) {\n', '    return this.unlockedBalanceOf(_owner, block.timestamp);\n', '  }\n', '\n', '  function updateGlobalUnlockTime(uint256 _epoch) public onlyOwnerOrAdmin returns (bool) {\n', '    require(_epoch >= 0);\n', '    globalUnlockTime = _epoch;\n', '    emit UpdateGlobalUnlockTime(_epoch);\n', '    // Gives owner the ability to update lockup period for all wallets.\n', '    // Owner can pass an epoch timecode into the function to:\n', '    // 1. Extend lockup period,\n', '    // 2. Unlock all wallets by passing &#39;0&#39; into the function\n', '  }\n', '\n', '  /**\n', '    * @dev Throws if the value less than the current unlocked balance of.\n', '    */\n', '  modifier onlyUnlocked(uint256 _value) {\n', '    if(block.timestamp > globalUnlockTime) {\n', '      _;\n', '    } else {\n', '      if (locks[msg.sender] == true) {\n', '        require(this.unlockedNowBalanceOf(msg.sender) >= _value);\n', '      }\n', '      _;\n', '    }\n', '  }\n', '\n', '  /**\n', '    * @dev Throws if the value less than the current unlocked balance of the given address.\n', '    */\n', '  modifier onlyUnlockedOf(address _address, uint256 _value) {\n', '    if(block.timestamp > globalUnlockTime) {\n', '      _;\n', '    } else {\n', '      if (locks[_address] == true) {\n', '        require(this.unlockedNowBalanceOf(_address) >= _value);\n', '      } else {\n', '\n', '      }\n', '      _;\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/StandardLockableToken.sol\n', '\n', '/**\n', ' * @title StandardLockableToken\n', ' *\n', ' */\n', 'contract StandardLockableToken is Lockable, /**/ERC223Basic, /*ERC20*/StandardToken {\n', '\n', '  /**\n', '    * @dev Check address is to be a contract based on extcodesize (must be nonzero to be a contract)\n', '    * @param _address The address to check.\n', '    */\n', '  function isContract(address _address) private constant returns (bool) {\n', '    uint256 codeLength;\n', '    assembly {\n', '      codeLength := extcodesize(_address)\n', '    }\n', '    return codeLength > 0;\n', '  }\n', '\n', '  /**\n', '    * @dev Transfer token for a specified address\n', '    * ERC20 support\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '  function transfer(address _to, uint256 _value) onlyUnlocked(_value) public returns (bool) {\n', '    bytes memory empty;\n', '    return _transfer(_to, _value, empty);\n', '  }\n', '\n', '  /**\n', '    * @dev Transfer token for a specified address\n', '    * ERC223 support\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @param _data The additional data.\n', '    */\n', '  function transfer(address _to, uint256 _value, bytes _data) onlyUnlocked(_value) public returns (bool) {\n', '    return _transfer(_to, _value, _data);\n', '  }\n', '\n', '  /**\n', '    * @dev Transfer token for a specified address\n', '    * ERC223 support\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @param _data The additional data.\n', '    */\n', '  function _transfer(address _to, uint256 _value, bytes _data) internal returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    require(_value > 0);\n', '    // catch overflow loosing tokens\n', '    // require(balances[_to] + _value > balances[_to]);\n', '\n', '    // safety update balances\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    // determine if the contract given\n', '    if (isContract(_to)) {\n', '      ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '      receiver.tokenFallback(msg.sender, _value, _data);\n', '    }\n', '\n', '    // emit ERC20 transfer event\n', '    emit Transfer(msg.sender, _to, _value);\n', '    // emit ERC223 transfer event\n', '    emit Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyUnlockedOf(_from, _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_value > 0);\n', '\n', '    // make balances manipulations first\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '    bytes memory empty;\n', '    if (isContract(_to)) {\n', '      ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '      receiver.tokenFallback(msg.sender, _value, empty);\n', '    }\n', '\n', '    // emit ERC20 transfer event\n', '    emit Transfer(_from, _to, _value);\n', '    // emit ERC223 transfer event\n', '    emit Transfer(_from, _to, _value, empty);\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/StandardBurnableLockableToken.sol\n', '\n', '/**\n', ' * @title StandardBurnableLockableToken\n', ' *\n', ' */\n', 'contract StandardBurnableLockableToken is StandardLockableToken, BurnableToken {\n', '  /**\n', '    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _value uint256 The amount of token to be burned\n', '    */\n', '  function burnFrom(address _from, uint256 _value) onlyOwner onlyUnlockedOf(_from, _value) public {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_value > 0);\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '    _burn(_from, _value);\n', '\n', '    bytes memory empty;\n', '    // emit ERC223 transfer event also\n', '    emit Transfer(msg.sender, address(0), _value, empty);\n', '  }\n', '\n', '  /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '  function burn(uint256 _value) onlyOwner onlyUnlocked(_value) public {\n', '    require(_value > 0);\n', '    _burn(msg.sender, _value);\n', '\n', '    bytes memory empty;\n', '      // emit ERC223 transfer event also\n', '    emit Transfer(msg.sender, address(0), _value, empty);\n', '  }\n', '}\n', '\n', '\n', 'contract EngageToken is StandardBurnableLockableToken, Destructible {\n', '  string public constant name = "Engage";\n', '\tuint public constant decimals = 18;\n', '\tstring public constant symbol = "NGAGE";\n', '\n', '  constructor() public {\n', '    // set the owner\n', '    owner = msg.sender;\n', '    admin = 0x613b42D781c59237fb51c304A5b037cDDD0dC48c;\n', '\n', '    uint256 INITIAL_SUPPLY = 1000000000 * (10**decimals);\n', '\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '\n', '    bytes memory empty;\n', '\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n', '    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY, empty);\n', '  }\n', '}']