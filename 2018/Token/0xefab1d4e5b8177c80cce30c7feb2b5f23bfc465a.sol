['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param amount The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    require(amount <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account, deducting from the sender&#39;s allowance for said account. Uses the\n', '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 amount) internal {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      amount);\n', '    _burn(account, amount);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an account&#39;s access to this role\n', '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n', '\n', 'contract MinterRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '\n', '  Roles.Role private minters;\n', '\n', '  constructor() public {\n', '    minters.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(isMinter(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return minters.has(account);\n', '  }\n', '\n', '  function addMinter(address account) public onlyMinter {\n', '    minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '\n', '  function renounceMinter() public {\n', '    minters.remove(msg.sender);\n', '  }\n', '\n', '  function _removeMinter(address account) internal {\n', '    minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n', '\n', '/**\n', ' * @title ERC20Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '  event MintingFinished();\n', '\n', '  bool private _mintingFinished = false;\n', '\n', '  modifier onlyBeforeMintingFinished() {\n', '    require(!_mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if the minting is finished.\n', '   */\n', '  function mintingFinished() public view returns(bool) {\n', '    return _mintingFinished;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param to The address that will receive the minted tokens.\n', '   * @param amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address to,\n', '    uint256 amount\n', '  )\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mint(to, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting()\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mintingFinished = true;\n', '    emit MintingFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 value) public {\n', '    _burn(msg.sender, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param from address The address which you want to send tokens from\n', '   * @param value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address from, uint256 value) public {\n', '    _burnFrom(from, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides ERC20._burn in order for burn and burnFrom to emit\n', '   * an additional Burn event.\n', '   */\n', '  function _burn(address who, uint256 value) internal {\n', '    super._burn(who, value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string name, string symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  /**\n', '   * @return the name of the token.\n', '   */\n', '  function name() public view returns(string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @return the symbol of the token.\n', '   */\n', '  function symbol() public view returns(string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @return the number of decimals of the token.\n', '   */\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', '// File: contracts/robonomics/XRT.sol\n', '\n', 'contract XRT is ERC20Mintable, ERC20Burnable, ERC20Detailed {\n', '    constructor() public ERC20Detailed("XRT", "Robonomics Beta", 9) {\n', '        uint256 INITIAL_SUPPLY = 1000 * (10 ** 9);\n', '        _mint(msg.sender, INITIAL_SUPPLY);\n', '    }\n', '}\n', '\n', '// File: contracts/robonomics/RobotLiabilityAPI.sol\n', '\n', '//import &#39;./LiabilityFactory.sol&#39;;\n', '\n', '\n', 'contract RobotLiabilityAPI {\n', '    bytes   public model;\n', '    bytes   public objective;\n', '    bytes   public result;\n', '\n', '    ERC20   public token;\n', '    uint256 public cost;\n', '    uint256 public lighthouseFee;\n', '    uint256 public validatorFee;\n', '\n', '    bytes32 public demandHash;\n', '    bytes32 public offerHash;\n', '\n', '    address public promisor;\n', '    address public promisee;\n', '    address public validator;\n', '\n', '    bool    public isSuccess;\n', '    bool    public isFinalized;\n', '\n', '    LiabilityFactory public factory;\n', '\n', '    event Finalized(bool indexed success, bytes result);\n', '}\n', '\n', '// File: contracts/robonomics/LightContract.sol\n', '\n', 'contract LightContract {\n', '    /**\n', '     * @dev Shared code smart contract \n', '     */\n', '    address lib;\n', '\n', '    constructor(address _library) public {\n', '        lib = _library;\n', '    }\n', '\n', '    function() public {\n', '        require(lib.delegatecall(msg.data));\n', '    }\n', '}\n', '\n', '// File: contracts/robonomics/RobotLiability.sol\n', '\n', '// Standard robot liability light contract\n', 'contract RobotLiability is RobotLiabilityAPI, LightContract {\n', '    constructor(address _lib) public LightContract(_lib)\n', '    { factory = LiabilityFactory(msg.sender); }\n', '}\n', '\n', '// File: contracts/robonomics/SingletonHash.sol\n', '\n', 'contract SingletonHash {\n', '    event HashConsumed(bytes32 indexed hash);\n', '\n', '    /**\n', '     * @dev Used hash accounting\n', '     */\n', '    mapping(bytes32 => bool) public isHashConsumed;\n', '\n', '    /**\n', '     * @dev Parameter can be used only once\n', '     * @param _hash Single usage hash\n', '     */\n', '    function singletonHash(bytes32 _hash) internal {\n', '        require(!isHashConsumed[_hash]);\n', '        isHashConsumed[_hash] = true;\n', '        emit HashConsumed(_hash);\n', '    }\n', '}\n', '\n', '// File: contracts/robonomics/DutchAuction.sol\n', '\n', '/// @title Dutch auction contract - distribution of XRT tokens using an auction.\n', '/// @author Stefan George - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7102051417101f5f16141e03161431121e1f02141f0208025f1f1405">[email&#160;protected]</a>>\n', '/// @author Airalab - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c2b0a7b1a7a3b0a1aa82a3abb0a3ecaeaba4a7">[email&#160;protected]</a>> \n', 'contract DutchAuction {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event BidSubmission(address indexed sender, uint256 amount);\n', '\n', '    /*\n', '     *  Constants\n', '     */\n', '    uint constant public MAX_TOKENS_SOLD = 800 * 10**9; // 8M XRT = 10M - 1M (Foundation) - 1M (Early investors base)\n', '    uint constant public WAITING_PERIOD = 0; // 1 days;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    XRT     public xrt;\n', '    address public ambix;\n', '    address public wallet;\n', '    address public owner;\n', '    uint public ceiling;\n', '    uint public priceFactor;\n', '    uint public startBlock;\n', '    uint public endTime;\n', '    uint public totalReceived;\n', '    uint public finalPrice;\n', '    mapping (address => uint) public bids;\n', '    Stages public stage;\n', '\n', '    /*\n', '     *  Enums\n', '     */\n', '    enum Stages {\n', '        AuctionDeployed,\n', '        AuctionSetUp,\n', '        AuctionStarted,\n', '        AuctionEnded,\n', '        TradingStarted\n', '    }\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier atStage(Stages _stage) {\n', '        // Contract on stage\n', '        require(stage == _stage);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        // Only owner is allowed to proceed\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isWallet() {\n', '        // Only wallet is allowed to proceed\n', '        require(msg.sender == wallet);\n', '        _;\n', '    }\n', '\n', '    modifier isValidPayload() {\n', '        require(msg.data.length == 4 || msg.data.length == 36);\n', '        _;\n', '    }\n', '\n', '    modifier timedTransitions() {\n', '        if (stage == Stages.AuctionStarted && calcTokenPrice() <= calcStopPrice())\n', '            finalizeAuction();\n', '        if (stage == Stages.AuctionEnded && now > endTime + WAITING_PERIOD)\n', '            stage = Stages.TradingStarted;\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Contract constructor function sets owner.\n', '    /// @param _wallet Multisig wallet.\n', '    /// @param _ceiling Auction ceiling.\n', '    /// @param _priceFactor Auction price factor.\n', '    constructor(address _wallet, uint _ceiling, uint _priceFactor)\n', '        public\n', '    {\n', '        require(_wallet != 0 && _ceiling > 0 && _priceFactor > 0);\n', '\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '        ceiling = _ceiling;\n', '        priceFactor = _priceFactor;\n', '        stage = Stages.AuctionDeployed;\n', '    }\n', '\n', '    /// @dev Setup function sets external contracts&#39; addresses.\n', '    /// @param _xrt Robonomics token address.\n', '    /// @param _ambix Distillation cube address.\n', '    function setup(address _xrt, address _ambix)\n', '        public\n', '        isOwner\n', '        atStage(Stages.AuctionDeployed)\n', '    {\n', '        // Validate argument\n', '        require(_xrt != 0 && _ambix != 0);\n', '\n', '        xrt = XRT(_xrt);\n', '        ambix = _ambix;\n', '\n', '        // Validate token balance\n', '        require(xrt.balanceOf(this) == MAX_TOKENS_SOLD);\n', '\n', '        stage = Stages.AuctionSetUp;\n', '    }\n', '\n', '    /// @dev Starts auction and sets startBlock.\n', '    function startAuction()\n', '        public\n', '        isWallet\n', '        atStage(Stages.AuctionSetUp)\n', '    {\n', '        stage = Stages.AuctionStarted;\n', '        startBlock = block.number;\n', '    }\n', '\n', '    /// @dev Calculates current token price.\n', '    /// @return Returns token price.\n', '    function calcCurrentTokenPrice()\n', '        public\n', '        timedTransitions\n', '        returns (uint)\n', '    {\n', '        if (stage == Stages.AuctionEnded || stage == Stages.TradingStarted)\n', '            return finalPrice;\n', '        return calcTokenPrice();\n', '    }\n', '\n', '    /// @dev Returns correct stage, even if a function with timedTransitions modifier has not yet been called yet.\n', '    /// @return Returns current auction stage.\n', '    function updateStage()\n', '        public\n', '        timedTransitions\n', '        returns (Stages)\n', '    {\n', '        return stage;\n', '    }\n', '\n', '    /// @dev Allows to send a bid to the auction.\n', '    /// @param receiver Bid will be assigned to this address if set.\n', '    function bid(address receiver)\n', '        public\n', '        payable\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.AuctionStarted)\n', '        returns (uint amount)\n', '    {\n', '        require(msg.value > 0);\n', '        amount = msg.value;\n', '\n', '        // If a bid is done on behalf of a user via ShapeShift, the receiver address is set.\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '\n', '        // Prevent that more than 90% of tokens are sold. Only relevant if cap not reached.\n', '        uint maxWei = MAX_TOKENS_SOLD * calcTokenPrice() / 10**9 - totalReceived;\n', '        uint maxWeiBasedOnTotalReceived = ceiling - totalReceived;\n', '        if (maxWeiBasedOnTotalReceived < maxWei)\n', '            maxWei = maxWeiBasedOnTotalReceived;\n', '\n', '        // Only invest maximum possible amount.\n', '        if (amount > maxWei) {\n', '            amount = maxWei;\n', '            // Send change back to receiver address. In case of a ShapeShift bid the user receives the change back directly.\n', '            receiver.transfer(msg.value - amount);\n', '        }\n', '\n', '        // Forward funding to ether wallet\n', '        wallet.transfer(amount);\n', '\n', '        bids[receiver] += amount;\n', '        totalReceived += amount;\n', '        emit BidSubmission(receiver, amount);\n', '\n', '        // Finalize auction when maxWei reached\n', '        if (amount == maxWei)\n', '            finalizeAuction();\n', '    }\n', '\n', '    /// @dev Claims tokens for bidder after auction.\n', '    /// @param receiver Tokens will be assigned to this address if set.\n', '    function claimTokens(address receiver)\n', '        public\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.TradingStarted)\n', '    {\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '        uint tokenCount = bids[receiver] * 10**9 / finalPrice;\n', '        bids[receiver] = 0;\n', '        require(xrt.transfer(receiver, tokenCount));\n', '    }\n', '\n', '    /// @dev Calculates stop price.\n', '    /// @return Returns stop price.\n', '    function calcStopPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return totalReceived * 10**9 / MAX_TOKENS_SOLD + 1;\n', '    }\n', '\n', '    /// @dev Calculates token price.\n', '    /// @return Returns token price.\n', '    function calcTokenPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return priceFactor * 10**18 / (block.number - startBlock + 7500) + 1;\n', '    }\n', '\n', '    /*\n', '     *  Private functions\n', '     */\n', '    function finalizeAuction()\n', '        private\n', '    {\n', '        stage = Stages.AuctionEnded;\n', '        finalPrice = totalReceived == ceiling ? calcTokenPrice() : calcStopPrice();\n', '        uint soldTokens = totalReceived * 10**9 / finalPrice;\n', '\n', '        if (totalReceived == ceiling) {\n', '            // Auction contract transfers all unsold tokens to Ambix contract\n', '            require(xrt.transfer(ambix, MAX_TOKENS_SOLD - soldTokens));\n', '        } else {\n', '            // Auction contract burn all unsold tokens\n', '            xrt.burn(MAX_TOKENS_SOLD - soldTokens);\n', '        }\n', '\n', '        endTime = now;\n', '    }\n', '}\n', '\n', '// File: contracts/robonomics/LighthouseAPI.sol\n', '\n', '//import &#39;./LiabilityFactory.sol&#39;;\n', '\n', '\n', 'contract LighthouseAPI {\n', '    address[] public members;\n', '\n', '    function membersLength() public view returns (uint256)\n', '    { return members.length; }\n', '\n', '    mapping(address => uint256) indexOf;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    uint256 public minimalFreeze;\n', '    uint256 public timeoutBlocks;\n', '\n', '    LiabilityFactory public factory;\n', '    XRT              public xrt;\n', '\n', '    uint256 public keepaliveBlock = 0;\n', '    uint256 public marker = 0;\n', '    uint256 public quota = 0;\n', '\n', '    function quotaOf(address _member) public view returns (uint256)\n', '    { return balances[_member] / minimalFreeze; }\n', '}\n', '\n', '// File: contracts/robonomics/Lighthouse.sol\n', '\n', 'contract Lighthouse is LighthouseAPI, LightContract {\n', '    constructor(\n', '        address _lib,\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks\n', '    ) \n', '        public\n', '        LightContract(_lib)\n', '    {\n', '        require(_minimalFreeze > 0 && _timeoutBlocks > 0);\n', '\n', '        minimalFreeze = _minimalFreeze;\n', '        timeoutBlocks = _timeoutBlocks;\n', '        factory = LiabilityFactory(msg.sender);\n', '        xrt = factory.xrt();\n', '    }\n', '}\n', '\n', '// File: ens/contracts/AbstractENS.sol\n', '\n', 'contract AbstractENS {\n', '    function owner(bytes32 node) constant returns(address);\n', '    function resolver(bytes32 node) constant returns(address);\n', '    function ttl(bytes32 node) constant returns(uint64);\n', '    function setOwner(bytes32 node, address owner);\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\n', '    function setResolver(bytes32 node, address resolver);\n', '    function setTTL(bytes32 node, uint64 ttl);\n', '\n', '    // Logged when the owner of a node assigns a new owner to a subnode.\n', '    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n', '\n', '    // Logged when the owner of a node transfers ownership to a new account.\n', '    event Transfer(bytes32 indexed node, address owner);\n', '\n', '    // Logged when the resolver for a node changes.\n', '    event NewResolver(bytes32 indexed node, address resolver);\n', '\n', '    // Logged when the TTL of a node changes\n', '    event NewTTL(bytes32 indexed node, uint64 ttl);\n', '}\n', '\n', '// File: ens/contracts/ENS.sol\n', '\n', '/**\n', ' * The ENS registry contract.\n', ' */\n', 'contract ENS is AbstractENS {\n', '    struct Record {\n', '        address owner;\n', '        address resolver;\n', '        uint64 ttl;\n', '    }\n', '\n', '    mapping(bytes32=>Record) records;\n', '\n', '    // Permits modifications only by the owner of the specified node.\n', '    modifier only_owner(bytes32 node) {\n', '        if(records[node].owner != msg.sender) throw;\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructs a new ENS registrar.\n', '     */\n', '    function ENS() {\n', '        records[0].owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Returns the address that owns the specified node.\n', '     */\n', '    function owner(bytes32 node) constant returns (address) {\n', '        return records[node].owner;\n', '    }\n', '\n', '    /**\n', '     * Returns the address of the resolver for the specified node.\n', '     */\n', '    function resolver(bytes32 node) constant returns (address) {\n', '        return records[node].resolver;\n', '    }\n', '\n', '    /**\n', '     * Returns the TTL of a node, and any records associated with it.\n', '     */\n', '    function ttl(bytes32 node) constant returns (uint64) {\n', '        return records[node].ttl;\n', '    }\n', '\n', '    /**\n', '     * Transfers ownership of a node to a new address. May only be called by the current\n', '     * owner of the node.\n', '     * @param node The node to transfer ownership of.\n', '     * @param owner The address of the new owner.\n', '     */\n', '    function setOwner(bytes32 node, address owner) only_owner(node) {\n', '        Transfer(node, owner);\n', '        records[node].owner = owner;\n', '    }\n', '\n', '    /**\n', '     * Transfers ownership of a subnode sha3(node, label) to a new address. May only be\n', '     * called by the owner of the parent node.\n', '     * @param node The parent node.\n', '     * @param label The hash of the label specifying the subnode.\n', '     * @param owner The address of the new owner.\n', '     */\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) {\n', '        var subnode = sha3(node, label);\n', '        NewOwner(node, label, owner);\n', '        records[subnode].owner = owner;\n', '    }\n', '\n', '    /**\n', '     * Sets the resolver address for the specified node.\n', '     * @param node The node to update.\n', '     * @param resolver The address of the resolver.\n', '     */\n', '    function setResolver(bytes32 node, address resolver) only_owner(node) {\n', '        NewResolver(node, resolver);\n', '        records[node].resolver = resolver;\n', '    }\n', '\n', '    /**\n', '     * Sets the TTL for the specified node.\n', '     * @param node The node to update.\n', '     * @param ttl The TTL in seconds.\n', '     */\n', '    function setTTL(bytes32 node, uint64 ttl) only_owner(node) {\n', '        NewTTL(node, ttl);\n', '        records[node].ttl = ttl;\n', '    }\n', '}\n', '\n', '// File: ens/contracts/PublicResolver.sol\n', '\n', '/**\n', ' * A simple resolver anyone can use; only allows the owner of a node to set its\n', ' * address.\n', ' */\n', 'contract PublicResolver {\n', '    AbstractENS ens;\n', '    mapping(bytes32=>address) addresses;\n', '    mapping(bytes32=>bytes32) hashes;\n', '\n', '    modifier only_owner(bytes32 node) {\n', '        if(ens.owner(node) != msg.sender) throw;\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructor.\n', '     * @param ensAddr The ENS registrar contract.\n', '     */\n', '    function PublicResolver(AbstractENS ensAddr) {\n', '        ens = ensAddr;\n', '    }\n', '\n', '    /**\n', '     * Fallback function.\n', '     */\n', '    function() {\n', '        throw;\n', '    }\n', '\n', '    /**\n', '     * Returns true if the specified node has the specified record type.\n', '     * @param node The ENS node to query.\n', '     * @param kind The record type name, as specified in EIP137.\n', '     * @return True if this resolver has a record of the provided type on the\n', '     *         provided node.\n', '     */\n', '    function has(bytes32 node, bytes32 kind) constant returns (bool) {\n', '        return (kind == "addr" && addresses[node] != 0) || (kind == "hash" && hashes[node] != 0);\n', '    }\n', '\n', '    /**\n', '     * Returns true if the resolver implements the interface specified by the provided hash.\n', '     * @param interfaceID The ID of the interface to check for.\n', '     * @return True if the contract implements the requested interface.\n', '     */\n', '    function supportsInterface(bytes4 interfaceID) constant returns (bool) {\n', '        return interfaceID == 0x3b3b57de || interfaceID == 0xd8389dc5;\n', '    }\n', '\n', '    /**\n', '     * Returns the address associated with an ENS node.\n', '     * @param node The ENS node to query.\n', '     * @return The associated address.\n', '     */\n', '    function addr(bytes32 node) constant returns (address ret) {\n', '        ret = addresses[node];\n', '    }\n', '\n', '    /**\n', '     * Sets the address associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param addr The address to set.\n', '     */\n', '    function setAddr(bytes32 node, address addr) only_owner(node) {\n', '        addresses[node] = addr;\n', '    }\n', '\n', '    /**\n', '     * Returns the content hash associated with an ENS node.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The ENS node to query.\n', '     * @return The associated content hash.\n', '     */\n', '    function content(bytes32 node) constant returns (bytes32 ret) {\n', '        ret = hashes[node];\n', '    }\n', '\n', '    /**\n', '     * Sets the content hash associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The node to update.\n', '     * @param hash The content hash to set\n', '     */\n', '    function setContent(bytes32 node, bytes32 hash) only_owner(node) {\n', '        hashes[node] = hash;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/robonomics/LiabilityFactory.sol\n', '\n', 'contract LiabilityFactory is SingletonHash {\n', '    constructor(\n', '        address _robot_liability_lib,\n', '        address _lighthouse_lib,\n', '        DutchAuction _auction,\n', '        XRT _xrt,\n', '        ENS _ens\n', '    ) public {\n', '        robotLiabilityLib = _robot_liability_lib;\n', '        lighthouseLib = _lighthouse_lib;\n', '        auction = _auction;\n', '        xrt = _xrt;\n', '        ens = _ens;\n', '    }\n', '\n', '    using SafeERC20 for XRT;\n', '    using SafeERC20 for ERC20;\n', '\n', '    /**\n', '     * @dev New liability created \n', '     */\n', '    event NewLiability(address indexed liability);\n', '\n', '    /**\n', '     * @dev New lighthouse created\n', '     */\n', '    event NewLighthouse(address indexed lighthouse, string name);\n', '\n', '    /**\n', '     * @dev Robonomics dutch auction contract\n', '     */\n', '    DutchAuction public auction;\n', '\n', '    /**\n', '     * @dev Robonomics network protocol token\n', '     */\n', '    XRT public xrt;\n', '\n', '    /**\n', '     * @dev Ethereum name system\n', '     */\n', '    ENS public ens;\n', '\n', '    /**\n', '     * @dev Total GAS utilized by Robonomics network\n', '     */\n', '    uint256 public totalGasUtilizing = 0;\n', '\n', '    /**\n', '     * @dev GAS utilized by liability contracts\n', '     */\n', '    mapping(address => uint256) public gasUtilizing;\n', '\n', '    /**\n', '     * @dev The count of utilized gas for switch to next epoch \n', '     */\n', '    uint256 public constant gasEpoch = 347 * 10**10;\n', '\n', '    /**\n', '     * @dev Weighted average gasprice\n', '     */\n', '    uint256 public constant gasPrice = 10 * 10**9;\n', '\n', '    /**\n', '     * @dev Lighthouse accounting\n', '     */\n', '    mapping(address => bool) public isLighthouse;\n', '\n', '    /**\n', '     * @dev Robot liability shared code smart contract\n', '     */\n', '    address public robotLiabilityLib;\n', '\n', '    /**\n', '     * @dev Lightouse shared code smart contract\n', '     */\n', '    address public lighthouseLib;\n', '\n', '    /**\n', '     * @dev XRT emission value for utilized gas\n', '     */\n', '    function wnFromGas(uint256 _gas) public view returns (uint256) {\n', '        // Just return wn=gas when auction isn&#39;t finish\n', '        if (auction.finalPrice() == 0)\n', '            return _gas;\n', '\n', '        // Current gas utilization epoch\n', '        uint256 epoch = totalGasUtilizing / gasEpoch;\n', '\n', '        // XRT emission with addition coefficient by gas utilzation epoch\n', '        uint256 wn = _gas * 10**9 * gasPrice * 2**epoch / 3**epoch / auction.finalPrice();\n', '\n', '        // Check to not permit emission decrease below wn=gas\n', '        return wn < _gas ? _gas : wn;\n', '    }\n', '\n', '    /**\n', '     * @dev Only lighthouse guard\n', '     */\n', '    modifier onlyLighthouse {\n', '        require(isLighthouse[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Create robot liability smart contract\n', '     * @param _demand ABI-encoded demand message \n', '     * @param _offer ABI-encoded offer message \n', '     */\n', '    function createLiability(\n', '        bytes _demand,\n', '        bytes _offer\n', '    )\n', '        external \n', '        onlyLighthouse\n', '        returns (RobotLiability liability)\n', '    {\n', '        // Store in memory available gas\n', '        uint256 gasinit = gasleft();\n', '\n', '        // Create liability\n', '        liability = new RobotLiability(robotLiabilityLib);\n', '        emit NewLiability(liability);\n', '\n', '        // Parse messages\n', '        require(liability.call(abi.encodePacked(bytes4(0x0be8947a), _demand))); // liability.demand(...)\n', '        singletonHash(liability.demandHash());\n', '\n', '        require(liability.call(abi.encodePacked(bytes4(0x87bca1cf), _offer))); // liability.offer(...)\n', '        singletonHash(liability.offerHash());\n', '\n', '        // Transfer lighthouse fee to lighthouse worker directly\n', '        if (liability.lighthouseFee() > 0)\n', '            xrt.safeTransferFrom(liability.promisor(),\n', '                                 tx.origin,\n', '                                 liability.lighthouseFee());\n', '\n', '        // Transfer liability security and hold on contract\n', '        ERC20 token = liability.token();\n', '        if (liability.cost() > 0)\n', '            token.safeTransferFrom(liability.promisee(),\n', '                                   liability,\n', '                                   liability.cost());\n', '\n', '        // Transfer validator fee and hold on contract\n', '        if (address(liability.validator()) != 0 && liability.validatorFee() > 0)\n', '            xrt.safeTransferFrom(liability.promisee(),\n', '                                 liability,\n', '                                 liability.validatorFee());\n', '\n', '        // Accounting gas usage of transaction\n', '        uint256 gas = gasinit - gasleft() + 110525; // Including observation error\n', '        totalGasUtilizing       += gas;\n', '        gasUtilizing[liability] += gas;\n', '     }\n', '\n', '    /**\n', '     * @dev Create lighthouse smart contract\n', '     * @param _minimalFreeze Minimal freeze value of XRT token\n', '     * @param _timeoutBlocks Max time of lighthouse silence in blocks\n', '     * @param _name Lighthouse subdomain,\n', '     *              example: for &#39;my-name&#39; will created &#39;my-name.lighthouse.1.robonomics.eth&#39; domain\n', '     */\n', '    function createLighthouse(\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks,\n', '        string  _name\n', '    )\n', '        external\n', '        returns (address lighthouse)\n', '    {\n', '        bytes32 lighthouseNode\n', '            // lighthouse.2.robonomics.eth\n', '            = 0xa058d6058d5ec525aa555c572720908a8d6ea6e2781b460bdecb2abf8bf56d4c;\n', '\n', '        // Name reservation check\n', '        bytes32 subnode = keccak256(abi.encodePacked(lighthouseNode, keccak256(_name)));\n', '        require(ens.resolver(subnode) == 0);\n', '\n', '        // Create lighthouse\n', '        lighthouse = new Lighthouse(lighthouseLib, _minimalFreeze, _timeoutBlocks);\n', '        emit NewLighthouse(lighthouse, _name);\n', '        isLighthouse[lighthouse] = true;\n', '\n', '        // Register subnode\n', '        ens.setSubnodeOwner(lighthouseNode, keccak256(_name), this);\n', '\n', '        // Register lighthouse address\n', '        PublicResolver resolver = PublicResolver(ens.resolver(lighthouseNode));\n', '        ens.setResolver(subnode, resolver);\n', '        resolver.setAddr(subnode, lighthouse);\n', '    }\n', '\n', '    /**\n', '     * @dev Is called whan after liability finalization\n', '     * @param _gas Liability finalization gas expenses\n', '     */\n', '    function liabilityFinalized(\n', '        uint256 _gas\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(gasUtilizing[msg.sender] > 0);\n', '\n', '        uint256 gas = _gas - gasleft();\n', '        require(_gas > gas);\n', '\n', '        totalGasUtilizing        += gas;\n', '        gasUtilizing[msg.sender] += gas;\n', '        require(xrt.mint(tx.origin, wnFromGas(gasUtilizing[msg.sender])));\n', '        return true;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param amount The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    require(amount <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 amount) internal {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      amount);\n', '    _burn(account, amount);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an account's access to this role\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n', '\n', 'contract MinterRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '\n', '  Roles.Role private minters;\n', '\n', '  constructor() public {\n', '    minters.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(isMinter(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return minters.has(account);\n', '  }\n', '\n', '  function addMinter(address account) public onlyMinter {\n', '    minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '\n', '  function renounceMinter() public {\n', '    minters.remove(msg.sender);\n', '  }\n', '\n', '  function _removeMinter(address account) internal {\n', '    minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n', '\n', '/**\n', ' * @title ERC20Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '  event MintingFinished();\n', '\n', '  bool private _mintingFinished = false;\n', '\n', '  modifier onlyBeforeMintingFinished() {\n', '    require(!_mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if the minting is finished.\n', '   */\n', '  function mintingFinished() public view returns(bool) {\n', '    return _mintingFinished;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param to The address that will receive the minted tokens.\n', '   * @param amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address to,\n', '    uint256 amount\n', '  )\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mint(to, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting()\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mintingFinished = true;\n', '    emit MintingFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 value) public {\n', '    _burn(msg.sender, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param from address The address which you want to send tokens from\n', '   * @param value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address from, uint256 value) public {\n', '    _burnFrom(from, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides ERC20._burn in order for burn and burnFrom to emit\n', '   * an additional Burn event.\n', '   */\n', '  function _burn(address who, uint256 value) internal {\n', '    super._burn(who, value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string name, string symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  /**\n', '   * @return the name of the token.\n', '   */\n', '  function name() public view returns(string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @return the symbol of the token.\n', '   */\n', '  function symbol() public view returns(string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @return the number of decimals of the token.\n', '   */\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', '// File: contracts/robonomics/XRT.sol\n', '\n', 'contract XRT is ERC20Mintable, ERC20Burnable, ERC20Detailed {\n', '    constructor() public ERC20Detailed("XRT", "Robonomics Beta", 9) {\n', '        uint256 INITIAL_SUPPLY = 1000 * (10 ** 9);\n', '        _mint(msg.sender, INITIAL_SUPPLY);\n', '    }\n', '}\n', '\n', '// File: contracts/robonomics/RobotLiabilityAPI.sol\n', '\n', "//import './LiabilityFactory.sol';\n", '\n', '\n', 'contract RobotLiabilityAPI {\n', '    bytes   public model;\n', '    bytes   public objective;\n', '    bytes   public result;\n', '\n', '    ERC20   public token;\n', '    uint256 public cost;\n', '    uint256 public lighthouseFee;\n', '    uint256 public validatorFee;\n', '\n', '    bytes32 public demandHash;\n', '    bytes32 public offerHash;\n', '\n', '    address public promisor;\n', '    address public promisee;\n', '    address public validator;\n', '\n', '    bool    public isSuccess;\n', '    bool    public isFinalized;\n', '\n', '    LiabilityFactory public factory;\n', '\n', '    event Finalized(bool indexed success, bytes result);\n', '}\n', '\n', '// File: contracts/robonomics/LightContract.sol\n', '\n', 'contract LightContract {\n', '    /**\n', '     * @dev Shared code smart contract \n', '     */\n', '    address lib;\n', '\n', '    constructor(address _library) public {\n', '        lib = _library;\n', '    }\n', '\n', '    function() public {\n', '        require(lib.delegatecall(msg.data));\n', '    }\n', '}\n', '\n', '// File: contracts/robonomics/RobotLiability.sol\n', '\n', '// Standard robot liability light contract\n', 'contract RobotLiability is RobotLiabilityAPI, LightContract {\n', '    constructor(address _lib) public LightContract(_lib)\n', '    { factory = LiabilityFactory(msg.sender); }\n', '}\n', '\n', '// File: contracts/robonomics/SingletonHash.sol\n', '\n', 'contract SingletonHash {\n', '    event HashConsumed(bytes32 indexed hash);\n', '\n', '    /**\n', '     * @dev Used hash accounting\n', '     */\n', '    mapping(bytes32 => bool) public isHashConsumed;\n', '\n', '    /**\n', '     * @dev Parameter can be used only once\n', '     * @param _hash Single usage hash\n', '     */\n', '    function singletonHash(bytes32 _hash) internal {\n', '        require(!isHashConsumed[_hash]);\n', '        isHashConsumed[_hash] = true;\n', '        emit HashConsumed(_hash);\n', '    }\n', '}\n', '\n', '// File: contracts/robonomics/DutchAuction.sol\n', '\n', '/// @title Dutch auction contract - distribution of XRT tokens using an auction.\n', '/// @author Stefan George - <stefan.george@consensys.net>\n', '/// @author Airalab - <research@aira.life> \n', 'contract DutchAuction {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event BidSubmission(address indexed sender, uint256 amount);\n', '\n', '    /*\n', '     *  Constants\n', '     */\n', '    uint constant public MAX_TOKENS_SOLD = 800 * 10**9; // 8M XRT = 10M - 1M (Foundation) - 1M (Early investors base)\n', '    uint constant public WAITING_PERIOD = 0; // 1 days;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    XRT     public xrt;\n', '    address public ambix;\n', '    address public wallet;\n', '    address public owner;\n', '    uint public ceiling;\n', '    uint public priceFactor;\n', '    uint public startBlock;\n', '    uint public endTime;\n', '    uint public totalReceived;\n', '    uint public finalPrice;\n', '    mapping (address => uint) public bids;\n', '    Stages public stage;\n', '\n', '    /*\n', '     *  Enums\n', '     */\n', '    enum Stages {\n', '        AuctionDeployed,\n', '        AuctionSetUp,\n', '        AuctionStarted,\n', '        AuctionEnded,\n', '        TradingStarted\n', '    }\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier atStage(Stages _stage) {\n', '        // Contract on stage\n', '        require(stage == _stage);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        // Only owner is allowed to proceed\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isWallet() {\n', '        // Only wallet is allowed to proceed\n', '        require(msg.sender == wallet);\n', '        _;\n', '    }\n', '\n', '    modifier isValidPayload() {\n', '        require(msg.data.length == 4 || msg.data.length == 36);\n', '        _;\n', '    }\n', '\n', '    modifier timedTransitions() {\n', '        if (stage == Stages.AuctionStarted && calcTokenPrice() <= calcStopPrice())\n', '            finalizeAuction();\n', '        if (stage == Stages.AuctionEnded && now > endTime + WAITING_PERIOD)\n', '            stage = Stages.TradingStarted;\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Contract constructor function sets owner.\n', '    /// @param _wallet Multisig wallet.\n', '    /// @param _ceiling Auction ceiling.\n', '    /// @param _priceFactor Auction price factor.\n', '    constructor(address _wallet, uint _ceiling, uint _priceFactor)\n', '        public\n', '    {\n', '        require(_wallet != 0 && _ceiling > 0 && _priceFactor > 0);\n', '\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '        ceiling = _ceiling;\n', '        priceFactor = _priceFactor;\n', '        stage = Stages.AuctionDeployed;\n', '    }\n', '\n', "    /// @dev Setup function sets external contracts' addresses.\n", '    /// @param _xrt Robonomics token address.\n', '    /// @param _ambix Distillation cube address.\n', '    function setup(address _xrt, address _ambix)\n', '        public\n', '        isOwner\n', '        atStage(Stages.AuctionDeployed)\n', '    {\n', '        // Validate argument\n', '        require(_xrt != 0 && _ambix != 0);\n', '\n', '        xrt = XRT(_xrt);\n', '        ambix = _ambix;\n', '\n', '        // Validate token balance\n', '        require(xrt.balanceOf(this) == MAX_TOKENS_SOLD);\n', '\n', '        stage = Stages.AuctionSetUp;\n', '    }\n', '\n', '    /// @dev Starts auction and sets startBlock.\n', '    function startAuction()\n', '        public\n', '        isWallet\n', '        atStage(Stages.AuctionSetUp)\n', '    {\n', '        stage = Stages.AuctionStarted;\n', '        startBlock = block.number;\n', '    }\n', '\n', '    /// @dev Calculates current token price.\n', '    /// @return Returns token price.\n', '    function calcCurrentTokenPrice()\n', '        public\n', '        timedTransitions\n', '        returns (uint)\n', '    {\n', '        if (stage == Stages.AuctionEnded || stage == Stages.TradingStarted)\n', '            return finalPrice;\n', '        return calcTokenPrice();\n', '    }\n', '\n', '    /// @dev Returns correct stage, even if a function with timedTransitions modifier has not yet been called yet.\n', '    /// @return Returns current auction stage.\n', '    function updateStage()\n', '        public\n', '        timedTransitions\n', '        returns (Stages)\n', '    {\n', '        return stage;\n', '    }\n', '\n', '    /// @dev Allows to send a bid to the auction.\n', '    /// @param receiver Bid will be assigned to this address if set.\n', '    function bid(address receiver)\n', '        public\n', '        payable\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.AuctionStarted)\n', '        returns (uint amount)\n', '    {\n', '        require(msg.value > 0);\n', '        amount = msg.value;\n', '\n', '        // If a bid is done on behalf of a user via ShapeShift, the receiver address is set.\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '\n', '        // Prevent that more than 90% of tokens are sold. Only relevant if cap not reached.\n', '        uint maxWei = MAX_TOKENS_SOLD * calcTokenPrice() / 10**9 - totalReceived;\n', '        uint maxWeiBasedOnTotalReceived = ceiling - totalReceived;\n', '        if (maxWeiBasedOnTotalReceived < maxWei)\n', '            maxWei = maxWeiBasedOnTotalReceived;\n', '\n', '        // Only invest maximum possible amount.\n', '        if (amount > maxWei) {\n', '            amount = maxWei;\n', '            // Send change back to receiver address. In case of a ShapeShift bid the user receives the change back directly.\n', '            receiver.transfer(msg.value - amount);\n', '        }\n', '\n', '        // Forward funding to ether wallet\n', '        wallet.transfer(amount);\n', '\n', '        bids[receiver] += amount;\n', '        totalReceived += amount;\n', '        emit BidSubmission(receiver, amount);\n', '\n', '        // Finalize auction when maxWei reached\n', '        if (amount == maxWei)\n', '            finalizeAuction();\n', '    }\n', '\n', '    /// @dev Claims tokens for bidder after auction.\n', '    /// @param receiver Tokens will be assigned to this address if set.\n', '    function claimTokens(address receiver)\n', '        public\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.TradingStarted)\n', '    {\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '        uint tokenCount = bids[receiver] * 10**9 / finalPrice;\n', '        bids[receiver] = 0;\n', '        require(xrt.transfer(receiver, tokenCount));\n', '    }\n', '\n', '    /// @dev Calculates stop price.\n', '    /// @return Returns stop price.\n', '    function calcStopPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return totalReceived * 10**9 / MAX_TOKENS_SOLD + 1;\n', '    }\n', '\n', '    /// @dev Calculates token price.\n', '    /// @return Returns token price.\n', '    function calcTokenPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return priceFactor * 10**18 / (block.number - startBlock + 7500) + 1;\n', '    }\n', '\n', '    /*\n', '     *  Private functions\n', '     */\n', '    function finalizeAuction()\n', '        private\n', '    {\n', '        stage = Stages.AuctionEnded;\n', '        finalPrice = totalReceived == ceiling ? calcTokenPrice() : calcStopPrice();\n', '        uint soldTokens = totalReceived * 10**9 / finalPrice;\n', '\n', '        if (totalReceived == ceiling) {\n', '            // Auction contract transfers all unsold tokens to Ambix contract\n', '            require(xrt.transfer(ambix, MAX_TOKENS_SOLD - soldTokens));\n', '        } else {\n', '            // Auction contract burn all unsold tokens\n', '            xrt.burn(MAX_TOKENS_SOLD - soldTokens);\n', '        }\n', '\n', '        endTime = now;\n', '    }\n', '}\n', '\n', '// File: contracts/robonomics/LighthouseAPI.sol\n', '\n', "//import './LiabilityFactory.sol';\n", '\n', '\n', 'contract LighthouseAPI {\n', '    address[] public members;\n', '\n', '    function membersLength() public view returns (uint256)\n', '    { return members.length; }\n', '\n', '    mapping(address => uint256) indexOf;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    uint256 public minimalFreeze;\n', '    uint256 public timeoutBlocks;\n', '\n', '    LiabilityFactory public factory;\n', '    XRT              public xrt;\n', '\n', '    uint256 public keepaliveBlock = 0;\n', '    uint256 public marker = 0;\n', '    uint256 public quota = 0;\n', '\n', '    function quotaOf(address _member) public view returns (uint256)\n', '    { return balances[_member] / minimalFreeze; }\n', '}\n', '\n', '// File: contracts/robonomics/Lighthouse.sol\n', '\n', 'contract Lighthouse is LighthouseAPI, LightContract {\n', '    constructor(\n', '        address _lib,\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks\n', '    ) \n', '        public\n', '        LightContract(_lib)\n', '    {\n', '        require(_minimalFreeze > 0 && _timeoutBlocks > 0);\n', '\n', '        minimalFreeze = _minimalFreeze;\n', '        timeoutBlocks = _timeoutBlocks;\n', '        factory = LiabilityFactory(msg.sender);\n', '        xrt = factory.xrt();\n', '    }\n', '}\n', '\n', '// File: ens/contracts/AbstractENS.sol\n', '\n', 'contract AbstractENS {\n', '    function owner(bytes32 node) constant returns(address);\n', '    function resolver(bytes32 node) constant returns(address);\n', '    function ttl(bytes32 node) constant returns(uint64);\n', '    function setOwner(bytes32 node, address owner);\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\n', '    function setResolver(bytes32 node, address resolver);\n', '    function setTTL(bytes32 node, uint64 ttl);\n', '\n', '    // Logged when the owner of a node assigns a new owner to a subnode.\n', '    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n', '\n', '    // Logged when the owner of a node transfers ownership to a new account.\n', '    event Transfer(bytes32 indexed node, address owner);\n', '\n', '    // Logged when the resolver for a node changes.\n', '    event NewResolver(bytes32 indexed node, address resolver);\n', '\n', '    // Logged when the TTL of a node changes\n', '    event NewTTL(bytes32 indexed node, uint64 ttl);\n', '}\n', '\n', '// File: ens/contracts/ENS.sol\n', '\n', '/**\n', ' * The ENS registry contract.\n', ' */\n', 'contract ENS is AbstractENS {\n', '    struct Record {\n', '        address owner;\n', '        address resolver;\n', '        uint64 ttl;\n', '    }\n', '\n', '    mapping(bytes32=>Record) records;\n', '\n', '    // Permits modifications only by the owner of the specified node.\n', '    modifier only_owner(bytes32 node) {\n', '        if(records[node].owner != msg.sender) throw;\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructs a new ENS registrar.\n', '     */\n', '    function ENS() {\n', '        records[0].owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Returns the address that owns the specified node.\n', '     */\n', '    function owner(bytes32 node) constant returns (address) {\n', '        return records[node].owner;\n', '    }\n', '\n', '    /**\n', '     * Returns the address of the resolver for the specified node.\n', '     */\n', '    function resolver(bytes32 node) constant returns (address) {\n', '        return records[node].resolver;\n', '    }\n', '\n', '    /**\n', '     * Returns the TTL of a node, and any records associated with it.\n', '     */\n', '    function ttl(bytes32 node) constant returns (uint64) {\n', '        return records[node].ttl;\n', '    }\n', '\n', '    /**\n', '     * Transfers ownership of a node to a new address. May only be called by the current\n', '     * owner of the node.\n', '     * @param node The node to transfer ownership of.\n', '     * @param owner The address of the new owner.\n', '     */\n', '    function setOwner(bytes32 node, address owner) only_owner(node) {\n', '        Transfer(node, owner);\n', '        records[node].owner = owner;\n', '    }\n', '\n', '    /**\n', '     * Transfers ownership of a subnode sha3(node, label) to a new address. May only be\n', '     * called by the owner of the parent node.\n', '     * @param node The parent node.\n', '     * @param label The hash of the label specifying the subnode.\n', '     * @param owner The address of the new owner.\n', '     */\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) {\n', '        var subnode = sha3(node, label);\n', '        NewOwner(node, label, owner);\n', '        records[subnode].owner = owner;\n', '    }\n', '\n', '    /**\n', '     * Sets the resolver address for the specified node.\n', '     * @param node The node to update.\n', '     * @param resolver The address of the resolver.\n', '     */\n', '    function setResolver(bytes32 node, address resolver) only_owner(node) {\n', '        NewResolver(node, resolver);\n', '        records[node].resolver = resolver;\n', '    }\n', '\n', '    /**\n', '     * Sets the TTL for the specified node.\n', '     * @param node The node to update.\n', '     * @param ttl The TTL in seconds.\n', '     */\n', '    function setTTL(bytes32 node, uint64 ttl) only_owner(node) {\n', '        NewTTL(node, ttl);\n', '        records[node].ttl = ttl;\n', '    }\n', '}\n', '\n', '// File: ens/contracts/PublicResolver.sol\n', '\n', '/**\n', ' * A simple resolver anyone can use; only allows the owner of a node to set its\n', ' * address.\n', ' */\n', 'contract PublicResolver {\n', '    AbstractENS ens;\n', '    mapping(bytes32=>address) addresses;\n', '    mapping(bytes32=>bytes32) hashes;\n', '\n', '    modifier only_owner(bytes32 node) {\n', '        if(ens.owner(node) != msg.sender) throw;\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructor.\n', '     * @param ensAddr The ENS registrar contract.\n', '     */\n', '    function PublicResolver(AbstractENS ensAddr) {\n', '        ens = ensAddr;\n', '    }\n', '\n', '    /**\n', '     * Fallback function.\n', '     */\n', '    function() {\n', '        throw;\n', '    }\n', '\n', '    /**\n', '     * Returns true if the specified node has the specified record type.\n', '     * @param node The ENS node to query.\n', '     * @param kind The record type name, as specified in EIP137.\n', '     * @return True if this resolver has a record of the provided type on the\n', '     *         provided node.\n', '     */\n', '    function has(bytes32 node, bytes32 kind) constant returns (bool) {\n', '        return (kind == "addr" && addresses[node] != 0) || (kind == "hash" && hashes[node] != 0);\n', '    }\n', '\n', '    /**\n', '     * Returns true if the resolver implements the interface specified by the provided hash.\n', '     * @param interfaceID The ID of the interface to check for.\n', '     * @return True if the contract implements the requested interface.\n', '     */\n', '    function supportsInterface(bytes4 interfaceID) constant returns (bool) {\n', '        return interfaceID == 0x3b3b57de || interfaceID == 0xd8389dc5;\n', '    }\n', '\n', '    /**\n', '     * Returns the address associated with an ENS node.\n', '     * @param node The ENS node to query.\n', '     * @return The associated address.\n', '     */\n', '    function addr(bytes32 node) constant returns (address ret) {\n', '        ret = addresses[node];\n', '    }\n', '\n', '    /**\n', '     * Sets the address associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param addr The address to set.\n', '     */\n', '    function setAddr(bytes32 node, address addr) only_owner(node) {\n', '        addresses[node] = addr;\n', '    }\n', '\n', '    /**\n', '     * Returns the content hash associated with an ENS node.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The ENS node to query.\n', '     * @return The associated content hash.\n', '     */\n', '    function content(bytes32 node) constant returns (bytes32 ret) {\n', '        ret = hashes[node];\n', '    }\n', '\n', '    /**\n', '     * Sets the content hash associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The node to update.\n', '     * @param hash The content hash to set\n', '     */\n', '    function setContent(bytes32 node, bytes32 hash) only_owner(node) {\n', '        hashes[node] = hash;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/robonomics/LiabilityFactory.sol\n', '\n', 'contract LiabilityFactory is SingletonHash {\n', '    constructor(\n', '        address _robot_liability_lib,\n', '        address _lighthouse_lib,\n', '        DutchAuction _auction,\n', '        XRT _xrt,\n', '        ENS _ens\n', '    ) public {\n', '        robotLiabilityLib = _robot_liability_lib;\n', '        lighthouseLib = _lighthouse_lib;\n', '        auction = _auction;\n', '        xrt = _xrt;\n', '        ens = _ens;\n', '    }\n', '\n', '    using SafeERC20 for XRT;\n', '    using SafeERC20 for ERC20;\n', '\n', '    /**\n', '     * @dev New liability created \n', '     */\n', '    event NewLiability(address indexed liability);\n', '\n', '    /**\n', '     * @dev New lighthouse created\n', '     */\n', '    event NewLighthouse(address indexed lighthouse, string name);\n', '\n', '    /**\n', '     * @dev Robonomics dutch auction contract\n', '     */\n', '    DutchAuction public auction;\n', '\n', '    /**\n', '     * @dev Robonomics network protocol token\n', '     */\n', '    XRT public xrt;\n', '\n', '    /**\n', '     * @dev Ethereum name system\n', '     */\n', '    ENS public ens;\n', '\n', '    /**\n', '     * @dev Total GAS utilized by Robonomics network\n', '     */\n', '    uint256 public totalGasUtilizing = 0;\n', '\n', '    /**\n', '     * @dev GAS utilized by liability contracts\n', '     */\n', '    mapping(address => uint256) public gasUtilizing;\n', '\n', '    /**\n', '     * @dev The count of utilized gas for switch to next epoch \n', '     */\n', '    uint256 public constant gasEpoch = 347 * 10**10;\n', '\n', '    /**\n', '     * @dev Weighted average gasprice\n', '     */\n', '    uint256 public constant gasPrice = 10 * 10**9;\n', '\n', '    /**\n', '     * @dev Lighthouse accounting\n', '     */\n', '    mapping(address => bool) public isLighthouse;\n', '\n', '    /**\n', '     * @dev Robot liability shared code smart contract\n', '     */\n', '    address public robotLiabilityLib;\n', '\n', '    /**\n', '     * @dev Lightouse shared code smart contract\n', '     */\n', '    address public lighthouseLib;\n', '\n', '    /**\n', '     * @dev XRT emission value for utilized gas\n', '     */\n', '    function wnFromGas(uint256 _gas) public view returns (uint256) {\n', "        // Just return wn=gas when auction isn't finish\n", '        if (auction.finalPrice() == 0)\n', '            return _gas;\n', '\n', '        // Current gas utilization epoch\n', '        uint256 epoch = totalGasUtilizing / gasEpoch;\n', '\n', '        // XRT emission with addition coefficient by gas utilzation epoch\n', '        uint256 wn = _gas * 10**9 * gasPrice * 2**epoch / 3**epoch / auction.finalPrice();\n', '\n', '        // Check to not permit emission decrease below wn=gas\n', '        return wn < _gas ? _gas : wn;\n', '    }\n', '\n', '    /**\n', '     * @dev Only lighthouse guard\n', '     */\n', '    modifier onlyLighthouse {\n', '        require(isLighthouse[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Create robot liability smart contract\n', '     * @param _demand ABI-encoded demand message \n', '     * @param _offer ABI-encoded offer message \n', '     */\n', '    function createLiability(\n', '        bytes _demand,\n', '        bytes _offer\n', '    )\n', '        external \n', '        onlyLighthouse\n', '        returns (RobotLiability liability)\n', '    {\n', '        // Store in memory available gas\n', '        uint256 gasinit = gasleft();\n', '\n', '        // Create liability\n', '        liability = new RobotLiability(robotLiabilityLib);\n', '        emit NewLiability(liability);\n', '\n', '        // Parse messages\n', '        require(liability.call(abi.encodePacked(bytes4(0x0be8947a), _demand))); // liability.demand(...)\n', '        singletonHash(liability.demandHash());\n', '\n', '        require(liability.call(abi.encodePacked(bytes4(0x87bca1cf), _offer))); // liability.offer(...)\n', '        singletonHash(liability.offerHash());\n', '\n', '        // Transfer lighthouse fee to lighthouse worker directly\n', '        if (liability.lighthouseFee() > 0)\n', '            xrt.safeTransferFrom(liability.promisor(),\n', '                                 tx.origin,\n', '                                 liability.lighthouseFee());\n', '\n', '        // Transfer liability security and hold on contract\n', '        ERC20 token = liability.token();\n', '        if (liability.cost() > 0)\n', '            token.safeTransferFrom(liability.promisee(),\n', '                                   liability,\n', '                                   liability.cost());\n', '\n', '        // Transfer validator fee and hold on contract\n', '        if (address(liability.validator()) != 0 && liability.validatorFee() > 0)\n', '            xrt.safeTransferFrom(liability.promisee(),\n', '                                 liability,\n', '                                 liability.validatorFee());\n', '\n', '        // Accounting gas usage of transaction\n', '        uint256 gas = gasinit - gasleft() + 110525; // Including observation error\n', '        totalGasUtilizing       += gas;\n', '        gasUtilizing[liability] += gas;\n', '     }\n', '\n', '    /**\n', '     * @dev Create lighthouse smart contract\n', '     * @param _minimalFreeze Minimal freeze value of XRT token\n', '     * @param _timeoutBlocks Max time of lighthouse silence in blocks\n', '     * @param _name Lighthouse subdomain,\n', "     *              example: for 'my-name' will created 'my-name.lighthouse.1.robonomics.eth' domain\n", '     */\n', '    function createLighthouse(\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks,\n', '        string  _name\n', '    )\n', '        external\n', '        returns (address lighthouse)\n', '    {\n', '        bytes32 lighthouseNode\n', '            // lighthouse.2.robonomics.eth\n', '            = 0xa058d6058d5ec525aa555c572720908a8d6ea6e2781b460bdecb2abf8bf56d4c;\n', '\n', '        // Name reservation check\n', '        bytes32 subnode = keccak256(abi.encodePacked(lighthouseNode, keccak256(_name)));\n', '        require(ens.resolver(subnode) == 0);\n', '\n', '        // Create lighthouse\n', '        lighthouse = new Lighthouse(lighthouseLib, _minimalFreeze, _timeoutBlocks);\n', '        emit NewLighthouse(lighthouse, _name);\n', '        isLighthouse[lighthouse] = true;\n', '\n', '        // Register subnode\n', '        ens.setSubnodeOwner(lighthouseNode, keccak256(_name), this);\n', '\n', '        // Register lighthouse address\n', '        PublicResolver resolver = PublicResolver(ens.resolver(lighthouseNode));\n', '        ens.setResolver(subnode, resolver);\n', '        resolver.setAddr(subnode, lighthouse);\n', '    }\n', '\n', '    /**\n', '     * @dev Is called whan after liability finalization\n', '     * @param _gas Liability finalization gas expenses\n', '     */\n', '    function liabilityFinalized(\n', '        uint256 _gas\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(gasUtilizing[msg.sender] > 0);\n', '\n', '        uint256 gas = _gas - gasleft();\n', '        require(_gas > gas);\n', '\n', '        totalGasUtilizing        += gas;\n', '        gasUtilizing[msg.sender] += gas;\n', '        require(xrt.mint(tx.origin, wnFromGas(gasUtilizing[msg.sender])));\n', '        return true;\n', '    }\n', '}']
