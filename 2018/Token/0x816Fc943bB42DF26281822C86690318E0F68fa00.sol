['pragma solidity ^0.4.16;\n', '\n', 'contract Utils {\n', '    function Utils() public {    }\n', '    modifier greaterThanZero(uint256 _amount) { require(_amount > 0);    _;   }\n', '    modifier validAddress(address _address) { require(_address != 0x0);  _;   }\n', '    modifier notThis(address _address) { require(_address != address(this));  _; }\n', '    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) { uint256 z = _x + _y;  assert(z >= _x);  return z;  }\n', '    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) { assert(_x >= _y);  return _x - _y;   }\n', '    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) { uint256 z = _x * _y; assert(_x == 0 || z / _x == _y); return z; }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {  owner = msg.sender;  }\n', '    modifier onlyOwner {  require (msg.sender == owner);    _;   }\n', '    function transferOwnership(address newOwner) onlyOwner public{  owner = newOwner;  }\n', '}\n', '\n', 'contract CMCLToken is owned, Utils {\n', '    string public name; \n', '    string public symbol; \n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply; \n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    function CMCLToken(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  \n', '        balanceOf[msg.sender] = totalSupply; \n', '\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '\n', '      require(_to != 0x0); \n', '      require(balanceOf[_from] >= _value); \n', '      require(balanceOf[_to] + _value > balanceOf[_to]); \n', '      \n', '      uint256 previousBalances = safeAdd(balanceOf[_from], balanceOf[_to]); \n', '      balanceOf[_from] = safeSub(balanceOf[_from], _value); \n', '      balanceOf[_to] = safeAdd(balanceOf[_to], _value); \n', '      assert(balanceOf[_from] + balanceOf[_to] == previousBalances); \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {   _transfer(msg.sender, _to, _value);   }\n', '\n', '    function burn(uint256 _value) public onlyOwner returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value); \n', '\n', '\t\tbalanceOf[msg.sender] -= _value; \n', '        totalSupply -= _value; \n', '        return true;\n', '    }\n', '}']