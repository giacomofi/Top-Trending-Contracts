['pragma solidity ^0.4.21;\n', '\n', '/** ----------------------------------------------------------------------------\n', '  * &#39;CL+&#39; &#39;CITYLIFE PLUS Token&#39; token contract\n', '  *\n', '  * Symbol      : CL+\n', '  * Name        : CITYLIFE PLUS Token\n', '  * Total supply: 1,000,000,000.000000000000000\n', '  * Decimals    : 18\n', '  *\n', '  *\n', '  *  &#169; 2018 City Life. All rights reserved.\n', '  * ----------------------------------------------------------------------------\n', '  */\n', '\n', '/**\n', '  * @title Safe maths\n', '  * @dev Prevent math errors.\n', '  */\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '/**\n', '  * @title ERC20Interface\n', '  * @dev ERC Token Standard #20 Interface\n', '  * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '  */\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/**\n', '  * @title ApproveAndCallFallBack\n', '  * @dev Contract function to receive approval and execute function in one call\n', '  */\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title Owned\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Owned {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic ERC20 Interface.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' *\n', ' */\n', 'contract CityLifePlusToken is ERC20Interface, Pausable {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    function CityLifePlusToken() public {\n', '        symbol = "CL+";\n', '        name = "CITYLIFE PLUS Token";\n', '        decimals = 18;\n', '        _totalSupply = 1000000000 * 10**uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    /**\n', '      * @dev total number of tokens in existence\n', '      */\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply - balances[address(0)];\n', '    }\n', '\n', '    /**\n', '      * @dev Gets the balance of the specified address.\n', '      * @param tokenOwner The address to query the the balance of.\n', '      * @return An uint256 representing the amount owned by the passed address.\n', '      */\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    /**\n', '      * @dev transfer token for a specified address\n', '      * @param to The address to transfer to.\n', '      * @param tokens The amount to be transferred.\n', '      */\n', '    function transfer(address to, uint tokens) public whenNotPaused returns (bool success) {\n', '        require(to != address(0));\n', '        require(tokens <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param tokens The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        /** To change the approve amount you first have to reduce the addresses&#180;\n', '          *  allowance to zero by calling `approve(_spender,0)` if it is not\n', '          *  already 0 to mitigate the race condition described here:\n', '          *  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '          */\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '       * @param spender The address which will spend the funds.\n', '       * @param addedValue The amount of tokens to increase the allowance by.\n', '       */\n', '    function increaseApproval(address spender, uint addedValue) public returns (bool) {\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address spender, uint subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][spender];\n', '        if (subtractedValue > oldValue) {\n', '            allowed[msg.sender][spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param tokens uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint tokens) public whenNotPaused returns (bool success) {\n', '        require(to != address(0));\n', '        require(tokens <= balances[from]);\n', '        require(tokens <= allowed[from][msg.sender]);\n', '\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param tokenOwner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    /**\n', '     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '     * from the token owner&#39;s account. The `spender` contract function\n', '     * `receiveApproval(...)` is then executed\n', '     */\n', '    function approveAndCall(address spender, uint tokens, bytes data) public whenNotPaused returns (bool success) {\n', '        require(spender != address(0));\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '      * @dev Don&#39;t accept ETH.\n', '      */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '      * @dev Owner can transfer out any accidentally sent ERC20 tokens\n', '      */\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner whenNotPaused returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']