['pragma solidity ^0.4.13;\n', '\n', 'contract owned {\n', '    address public owner;\n', '    mapping (address =>  bool) public admins;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '        admins[msg.sender]=true;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin   {\n', '        require(admins[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '\n', '    function makeAdmin(address newAdmin, bool isAdmin) onlyOwner public {\n', '        admins[newAdmin] = isAdmin;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', '\n', 'contract EcoCrypto is owned {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    bool public usersCanUnfreeze;\n', '\n', '    mapping (address => bool) public admin;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address =>  bool) public frozen;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Frozen(address indexed addr, bool frozen);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function EcoCrypto() public {\n', '        uint256 initialSupply = 10000000000000000000;\n', '        balanceOf[msg.sender] = initialSupply ;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = "EcoCrypto Token";                                   // Set the name for display purposes\n', '        symbol = "ECO";                               // Set the symbol for display purposes\n', '        decimals = 8;                            // Amount of decimals for display purposes\n', '        usersCanUnfreeze=false;\n', '        admin[msg.sender]=true;\n', '    }\n', '\n', '    function setAdmin(address addr, bool enabled) onlyOwner public {\n', '        admin[addr]=enabled;\n', '    }\n', '\n', '\n', '    function usersCanUnFreeze(bool can) onlyOwner public {\n', '        usersCanUnfreeze=can;\n', '    }\n', '\n', '    /**\n', '     * transferAndFreeze\n', '     *\n', '     * Function to transfer to and freeze and account at the same time\n', '     */\n', '    function transferAndFreeze (address target,  uint256 amount )  onlyAdmin public {\n', '        _transfer(msg.sender, target, amount);\n', '        freeze(target, true);\n', '    }\n', '\n', '    /**\n', '     * _freeze internal\n', '     *\n', '     * function to freeze an account\n', '     */\n', '    function _freeze (address target, bool froze )  internal {\n', '\n', '        frozen[target]=froze;\n', '        Frozen(target, froze);\n', '    }\n', '\n', '    /**\n', '     * freeze\n', '     *\n', '     * function to freeze an account\n', '     */\n', '    function freeze (address target, bool froze ) public   {\n', '        if(froze || (!froze && !usersCanUnfreeze)) {\n', '            require(admin[msg.sender]);\n', '        }\n', '        _freeze(target, froze);\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);                                   // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(!frozen[_from]);                       //prevent transfer from frozen address\n', '        require(balanceOf[_from] >= _value);                // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(!frozen[msg.sender]);                       //prevent transfer from frozen address\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(!frozen[_from]);                       //prevent transfer from frozen address\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '    returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) onlyOwner public\n', '    returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) onlyOwner public returns (bool success)  {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other ccount\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public  returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']