['pragma solidity ^0.4.24;\n', '\n', '/* Follows the ERC20 token standard */\n', '\n', 'contract EthereumPepe {\n', '\n', '    string public tokenName;\n', '    string public tokenSymbol;\n', '    uint256 public totalSupply;\n', '    uint8 public decimals = 18;\n', '\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping(address => uint256)) public allowed;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed _from, uint256 _value);\n', '\n', '    constructor() public {\n', '        \n', '        /* Final token characteristics */\n', '        tokenName = "The Emperor&#39;s Coin";\n', '        tokenSymbol = "WH40K";\n', '        uint256 initSupply = 40000;\n', '        /*******************************/\n', '        \n', '        totalSupply = initSupply * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '\n', '        require(_to != 0x0);\n', '        require(balances[_from] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        uint256 previousBalances = balances[_from] + balances[_to];\n', '\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\n', '        require(allowed[_from][msg.sender] >= _value);\n', '\n', '        allowed[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '\n', '        require(_value <= totalSupply);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns(bool success) {\n', '        \n', '        require(balances[msg.sender] >= _value);\n', '        \n', '        balances[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public returns(bool success) {\n', '        \n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        \n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        \n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function name() public view returns (string text) {\n', '        \n', '        return tokenName;\n', '    }\n', '    \n', '    function symbol() public view returns (string text) {\n', '        \n', '        return tokenSymbol;\n', '    }\n', '    \n', '    function decimals() public view returns (uint8 value) {\n', '        \n', '        return decimals;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256 value) {\n', '        \n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 value) {\n', '\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 value) {\n', '\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    /* Reverts any purposely or inadvertently Ether payment to the contract */\n', '    function () public payable {\n', '        \n', '        revert();\n', '    }\n', '}']