['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ZanteCoin smart contract\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// Owned contract\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  // Events ---------------------------\n', '\n', '  event OwnershipTransferProposed(address indexed _from, address indexed _to);\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  // Modifier -------------------------\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // Functions ------------------------\n', '\n', '  function Owned() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != owner);\n', '    require(_newOwner != address(0x0));\n', '    OwnershipTransferProposed(owner, _newOwner);\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Interface {\n', '\n', '  // Events ---------------------------\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '  // Functions ------------------------\n', '\n', '  function totalSupply() public constant returns (uint);\n', '  function balanceOf(address _owner) public constant returns (uint balance);\n', '  function transfer(address _to, uint _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '  function approve(address _spender, uint _value) public returns (bool success);\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ERC Coin Standard #20\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Coin is ERC20Interface, Owned {\n', '  \n', '  using SafeMath for uint;\n', '\n', '  uint public coinsIssuedTotal = 0;\n', '  mapping(address => uint) public balances;\n', '  mapping(address => mapping (address => uint)) public allowed;\n', '\n', '  // Functions ------------------------\n', '\n', '  /* Total coin supply */\n', '\n', '  function totalSupply() public constant returns (uint) {\n', '    return coinsIssuedTotal;\n', '  }\n', '\n', '  /* Get the account balance for an address */\n', '\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /* Transfer the balance from owner&#39;s account to another account */\n', '\n', '  function transfer(address _to, uint _amount) public returns (bool success) {\n', '    // amount sent cannot exceed balance\n', '    require(balances[msg.sender] >= _amount);\n', '\n', '    // update balances\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    // log event\n', '    Transfer(msg.sender, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /* Allow _spender to withdraw from your account up to _amount */\n', '\n', '  function approve(address _spender, uint _amount) public returns (bool success) {\n', '    // approval amount cannot exceed the balance\n', '    require (balances[msg.sender] >= _amount);\n', '      \n', '    // update allowed amount\n', '    allowed[msg.sender][_spender] = _amount;\n', '    \n', '    // log event\n', '    Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  /* Spender of coins transfers coins from the owner&#39;s balance */\n', '  /* Must be pre-approved by owner */\n', '\n', '  function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\n', '    // balance checks\n', '    require(balances[_from] >= _amount);\n', '    require(allowed[_from][msg.sender] >= _amount);\n', '\n', '    // update balances and allowed amount\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    // log event\n', '    Transfer(_from, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /* Returns the amount of coins approved by the owner */\n', '  /* that can be transferred by spender */\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract ZanteCoin is ERC20Coin {\n', '\n', '    /* Basic coin data */\n', '\n', '    string public constant name = "Zpay";\n', '    string public constant symbol = "ZPAY";\n', '    uint8  public constant decimals = 18;\n', '\n', '    /* ICO dates */\n', '\n', '    uint public constant DATE_ICO_START = 1521072000; // 15-Mar-2018 00:00 UTC\n', '    uint public constant DATE_ICO_END   = 1531612800; // 15-Jul-2018 00:00 UTC\n', '\n', '    /* Max ICO and other coin supply parameters */  \n', '\n', '    uint public constant COIN_SUPPLY_ICO_PHASE_0 = 30000000 * 10**18;  //  30M coins Pre-ICO\n', '    uint public constant COIN_SUPPLY_ICO_PHASE_1 = 70000000 * 10**18;  //  70M coins\n', '    uint public constant COIN_SUPPLY_ICO_PHASE_2 = 200000000 * 10**18; // 200M coins\n', '    uint public constant COIN_SUPPLY_ICO_PHASE_3 = 300000000 * 10**18; // 300M coins\n', '    uint public constant COIN_SUPPLY_ICO_TOTAL   = \n', '        COIN_SUPPLY_ICO_PHASE_0\n', '        + COIN_SUPPLY_ICO_PHASE_1\n', '        + COIN_SUPPLY_ICO_PHASE_2\n', '        + COIN_SUPPLY_ICO_PHASE_3;\n', '\n', '    uint public constant COIN_SUPPLY_MKT_TOTAL = 600000000 * 10**18;\n', '\n', '    uint public constant COIN_SUPPLY_COMPANY_TOTAL = 800000000 * 10**18;\n', '\n', '    uint public constant COIN_SUPPLY_TOTAL = \n', '        COIN_SUPPLY_ICO_TOTAL\n', '        + COIN_SUPPLY_MKT_TOTAL\n', '        + COIN_SUPPLY_COMPANY_TOTAL;\n', '\n', '    /* Other ICO parameters */  \n', '\n', '    uint public constant MIN_CONTRIBUTION = 1 ether / 100; // 0.01 ether\n', '    uint public constant MAX_CONTRIBUTION = 15610 ether;\n', '\n', '    /* Current coin supply variables */\n', '\n', '    uint public coinsIssuedIco = 0;\n', '    uint public coinsIssuedMkt = 0;\n', '    uint public coinsIssuedCmp = 0;  \n', '\n', '    // Events ---------------------------\n', '\n', '    event IcoCoinsIssued(address indexed _owner, uint _coins);\n', '    event MarketingCoinsGranted(address indexed _participant, uint _coins, uint _balance);\n', '    event CompanyCoinsGranted(address indexed _participant, uint _coins, uint _balance);\n', '\n', '    // Basic Functions ------------------\n', '\n', '    /* Initialize (owner is set to msg.sender by Owned.Owned() */\n', '\n', '    function ZanteCoin() public {  }\n', '\n', '    /* Fallback */\n', '\n', '    function () public {\n', '        // Not a payable to prevent ether transfers to this contract.\n', '    }\n', '\n', '    function issueIcoCoins(address _participant, uint _coins) public onlyOwner {\n', '        // Check if enough supply remaining\n', '        require(_coins <= COIN_SUPPLY_ICO_TOTAL.sub(coinsIssuedIco));\n', '\n', '        // update balances\n', '        balances[_participant] = balances[_participant].add(_coins);\n', '        coinsIssuedIco = coinsIssuedIco.add(_coins);\n', '        coinsIssuedTotal = coinsIssuedTotal.add(_coins);\n', '\n', '        // log the minting\n', '        Transfer(0x0, _participant, _coins);\n', '        IcoCoinsIssued(_participant, _coins);\n', '    }\n', '\n', '    /* Granting / minting of marketing coins by owner */\n', '    function grantMarketingCoins(address _participant, uint _coins) public onlyOwner {\n', '        // check amount\n', '        require(_coins <= COIN_SUPPLY_MKT_TOTAL.sub(coinsIssuedMkt));\n', '\n', '        // update balances\n', '        balances[_participant] = balances[_participant].add(_coins);\n', '        coinsIssuedMkt = coinsIssuedMkt.add(_coins);\n', '        coinsIssuedTotal = coinsIssuedTotal.add(_coins);\n', '\n', '        // log the minting\n', '        Transfer(0x0, _participant, _coins);\n', '        MarketingCoinsGranted(_participant, _coins, balances[_participant]);\n', '    }\n', '\n', '    /* Granting / minting of Company bonus coins by owner */\n', '    function grantCompanyCoins(address _participant, uint _coins) public onlyOwner {\n', '        // check amount\n', '        require(_coins <= COIN_SUPPLY_COMPANY_TOTAL.sub(coinsIssuedCmp));\n', '\n', '        // update balances\n', '        balances[_participant] = balances[_participant].add(_coins);\n', '        coinsIssuedCmp = coinsIssuedCmp.add(_coins);\n', '        coinsIssuedTotal = coinsIssuedTotal.add(_coins);\n', '\n', '        // log the minting\n', '        Transfer(0x0, _participant, _coins);\n', '        CompanyCoinsGranted(_participant, _coins, balances[_participant]);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ZanteCoin smart contract\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// Owned contract\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  // Events ---------------------------\n', '\n', '  event OwnershipTransferProposed(address indexed _from, address indexed _to);\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  // Modifier -------------------------\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // Functions ------------------------\n', '\n', '  function Owned() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != owner);\n', '    require(_newOwner != address(0x0));\n', '    OwnershipTransferProposed(owner, _newOwner);\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Interface {\n', '\n', '  // Events ---------------------------\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '  // Functions ------------------------\n', '\n', '  function totalSupply() public constant returns (uint);\n', '  function balanceOf(address _owner) public constant returns (uint balance);\n', '  function transfer(address _to, uint _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '  function approve(address _spender, uint _value) public returns (bool success);\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ERC Coin Standard #20\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Coin is ERC20Interface, Owned {\n', '  \n', '  using SafeMath for uint;\n', '\n', '  uint public coinsIssuedTotal = 0;\n', '  mapping(address => uint) public balances;\n', '  mapping(address => mapping (address => uint)) public allowed;\n', '\n', '  // Functions ------------------------\n', '\n', '  /* Total coin supply */\n', '\n', '  function totalSupply() public constant returns (uint) {\n', '    return coinsIssuedTotal;\n', '  }\n', '\n', '  /* Get the account balance for an address */\n', '\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', "  /* Transfer the balance from owner's account to another account */\n", '\n', '  function transfer(address _to, uint _amount) public returns (bool success) {\n', '    // amount sent cannot exceed balance\n', '    require(balances[msg.sender] >= _amount);\n', '\n', '    // update balances\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    // log event\n', '    Transfer(msg.sender, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /* Allow _spender to withdraw from your account up to _amount */\n', '\n', '  function approve(address _spender, uint _amount) public returns (bool success) {\n', '    // approval amount cannot exceed the balance\n', '    require (balances[msg.sender] >= _amount);\n', '      \n', '    // update allowed amount\n', '    allowed[msg.sender][_spender] = _amount;\n', '    \n', '    // log event\n', '    Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', "  /* Spender of coins transfers coins from the owner's balance */\n", '  /* Must be pre-approved by owner */\n', '\n', '  function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\n', '    // balance checks\n', '    require(balances[_from] >= _amount);\n', '    require(allowed[_from][msg.sender] >= _amount);\n', '\n', '    // update balances and allowed amount\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    // log event\n', '    Transfer(_from, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /* Returns the amount of coins approved by the owner */\n', '  /* that can be transferred by spender */\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract ZanteCoin is ERC20Coin {\n', '\n', '    /* Basic coin data */\n', '\n', '    string public constant name = "Zpay";\n', '    string public constant symbol = "ZPAY";\n', '    uint8  public constant decimals = 18;\n', '\n', '    /* ICO dates */\n', '\n', '    uint public constant DATE_ICO_START = 1521072000; // 15-Mar-2018 00:00 UTC\n', '    uint public constant DATE_ICO_END   = 1531612800; // 15-Jul-2018 00:00 UTC\n', '\n', '    /* Max ICO and other coin supply parameters */  \n', '\n', '    uint public constant COIN_SUPPLY_ICO_PHASE_0 = 30000000 * 10**18;  //  30M coins Pre-ICO\n', '    uint public constant COIN_SUPPLY_ICO_PHASE_1 = 70000000 * 10**18;  //  70M coins\n', '    uint public constant COIN_SUPPLY_ICO_PHASE_2 = 200000000 * 10**18; // 200M coins\n', '    uint public constant COIN_SUPPLY_ICO_PHASE_3 = 300000000 * 10**18; // 300M coins\n', '    uint public constant COIN_SUPPLY_ICO_TOTAL   = \n', '        COIN_SUPPLY_ICO_PHASE_0\n', '        + COIN_SUPPLY_ICO_PHASE_1\n', '        + COIN_SUPPLY_ICO_PHASE_2\n', '        + COIN_SUPPLY_ICO_PHASE_3;\n', '\n', '    uint public constant COIN_SUPPLY_MKT_TOTAL = 600000000 * 10**18;\n', '\n', '    uint public constant COIN_SUPPLY_COMPANY_TOTAL = 800000000 * 10**18;\n', '\n', '    uint public constant COIN_SUPPLY_TOTAL = \n', '        COIN_SUPPLY_ICO_TOTAL\n', '        + COIN_SUPPLY_MKT_TOTAL\n', '        + COIN_SUPPLY_COMPANY_TOTAL;\n', '\n', '    /* Other ICO parameters */  \n', '\n', '    uint public constant MIN_CONTRIBUTION = 1 ether / 100; // 0.01 ether\n', '    uint public constant MAX_CONTRIBUTION = 15610 ether;\n', '\n', '    /* Current coin supply variables */\n', '\n', '    uint public coinsIssuedIco = 0;\n', '    uint public coinsIssuedMkt = 0;\n', '    uint public coinsIssuedCmp = 0;  \n', '\n', '    // Events ---------------------------\n', '\n', '    event IcoCoinsIssued(address indexed _owner, uint _coins);\n', '    event MarketingCoinsGranted(address indexed _participant, uint _coins, uint _balance);\n', '    event CompanyCoinsGranted(address indexed _participant, uint _coins, uint _balance);\n', '\n', '    // Basic Functions ------------------\n', '\n', '    /* Initialize (owner is set to msg.sender by Owned.Owned() */\n', '\n', '    function ZanteCoin() public {  }\n', '\n', '    /* Fallback */\n', '\n', '    function () public {\n', '        // Not a payable to prevent ether transfers to this contract.\n', '    }\n', '\n', '    function issueIcoCoins(address _participant, uint _coins) public onlyOwner {\n', '        // Check if enough supply remaining\n', '        require(_coins <= COIN_SUPPLY_ICO_TOTAL.sub(coinsIssuedIco));\n', '\n', '        // update balances\n', '        balances[_participant] = balances[_participant].add(_coins);\n', '        coinsIssuedIco = coinsIssuedIco.add(_coins);\n', '        coinsIssuedTotal = coinsIssuedTotal.add(_coins);\n', '\n', '        // log the minting\n', '        Transfer(0x0, _participant, _coins);\n', '        IcoCoinsIssued(_participant, _coins);\n', '    }\n', '\n', '    /* Granting / minting of marketing coins by owner */\n', '    function grantMarketingCoins(address _participant, uint _coins) public onlyOwner {\n', '        // check amount\n', '        require(_coins <= COIN_SUPPLY_MKT_TOTAL.sub(coinsIssuedMkt));\n', '\n', '        // update balances\n', '        balances[_participant] = balances[_participant].add(_coins);\n', '        coinsIssuedMkt = coinsIssuedMkt.add(_coins);\n', '        coinsIssuedTotal = coinsIssuedTotal.add(_coins);\n', '\n', '        // log the minting\n', '        Transfer(0x0, _participant, _coins);\n', '        MarketingCoinsGranted(_participant, _coins, balances[_participant]);\n', '    }\n', '\n', '    /* Granting / minting of Company bonus coins by owner */\n', '    function grantCompanyCoins(address _participant, uint _coins) public onlyOwner {\n', '        // check amount\n', '        require(_coins <= COIN_SUPPLY_COMPANY_TOTAL.sub(coinsIssuedCmp));\n', '\n', '        // update balances\n', '        balances[_participant] = balances[_participant].add(_coins);\n', '        coinsIssuedCmp = coinsIssuedCmp.add(_coins);\n', '        coinsIssuedTotal = coinsIssuedTotal.add(_coins);\n', '\n', '        // log the minting\n', '        Transfer(0x0, _participant, _coins);\n', '        CompanyCoinsGranted(_participant, _coins, balances[_participant]);\n', '    }\n', '}']
