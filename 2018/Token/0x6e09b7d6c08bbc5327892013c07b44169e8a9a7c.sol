['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract MintableAndPausableToken is PausableToken {\n', '    uint8 public constant decimals = 18;\n', '    uint256 public maxTokenSupply = 2000000000 * 10 ** uint256(decimals);\n', '\n', '    bool public mintingFinished = false;\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    event MintStarted();\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier checkMaxSupply(uint256 _amount) {\n', '        require(maxTokenSupply >= totalSupply_.add(_amount));\n', '        _;\n', '    }\n', '\n', '    modifier cannotMint() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount)\n', '        external\n', '        onlyOwner\n', '        canMint\n', '        checkMaxSupply (_amount)\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() external onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function startMinting() external onlyOwner cannotMint returns (bool) {\n', '        mintingFinished = false;\n', '        emit MintStarted();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * Token upgrader interface inspired by Lunyr.\n', ' *\n', ' * Token upgrader transfers previous version tokens to a newer version.\n', ' * Token upgrader itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' */\n', 'contract TokenUpgrader {\n', '    uint public originalSupply;\n', '\n', '    /** Interface marker */\n', '    function isTokenUpgrader() external pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function upgradeFrom(address _from, uint256 _value) public {}\n', '}\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', '\n', '\n', 'contract UpgradeableToken is MintableAndPausableToken {\n', '    // Contract or person who can set the upgrade path.\n', '    address public upgradeMaster;\n', '    \n', '    // Bollean value needs to be true to start upgrades\n', '    bool private upgradesAllowed;\n', '\n', '    // The next contract where the tokens will be migrated.\n', '    TokenUpgrader public tokenUpgrader;\n', '\n', '    // How many tokens we have upgraded by now.\n', '    uint public totalUpgraded;\n', '\n', '    /**\n', '    * Upgrade states.\n', '    * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\n', '    * - Waiting: Token allows upgrade, but we don&#39;t have a new token version\n', '    * - ReadyToUpgrade: The token version is set, but not a single token has been upgraded yet\n', '    * - Upgrading: Token upgrader is set and the balance holders can upgrade their tokens\n', '    */\n', '    enum UpgradeState { NotAllowed, Waiting, ReadyToUpgrade, Upgrading }\n', '\n', '    // Somebody has upgraded some of his tokens.\n', '    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // New token version available.\n', '    event TokenUpgraderIsSet(address _newToken);\n', '\n', '    modifier onlyUpgradeMaster {\n', '        // Only a master can designate the next token\n', '        require(msg.sender == upgradeMaster);\n', '        _;\n', '    }\n', '\n', '    modifier notInUpgradingState {\n', '        // Upgrade has already begun for token\n', '        require(getUpgradeState() != UpgradeState.Upgrading);\n', '        _;\n', '    }\n', '\n', '    // Do not allow construction without upgrade master set.\n', '    constructor(address _upgradeMaster) public {\n', '        upgradeMaster = _upgradeMaster;\n', '    }\n', '\n', '    // set a token upgrader\n', '    function setTokenUpgrader(address _newToken)\n', '        external\n', '        onlyUpgradeMaster\n', '        notInUpgradingState\n', '    {\n', '        require(canUpgrade());\n', '        require(_newToken != address(0));\n', '\n', '        tokenUpgrader = TokenUpgrader(_newToken);\n', '\n', '        // Handle bad interface\n', '        require(tokenUpgrader.isTokenUpgrader());\n', '\n', '        // Make sure that token supplies match in source and target\n', '        require(tokenUpgrader.originalSupply() == totalSupply_);\n', '\n', '        emit TokenUpgraderIsSet(tokenUpgrader);\n', '    }\n', '\n', '    // Allow the token holder to upgrade some of their tokens to a new contract.\n', '    function upgrade(uint _value) external {\n', '        UpgradeState state = getUpgradeState();\n', '        \n', '        // Check upgrate state \n', '        require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n', '        // Validate input value\n', '        require(_value != 0);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        // Take tokens out from circulation\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        totalUpgraded = totalUpgraded.add(_value);\n', '\n', '        // Token Upgrader reissues the tokens\n', '        tokenUpgrader.upgradeFrom(msg.sender, _value);\n', '        emit Upgrade(msg.sender, tokenUpgrader, _value);\n', '    }\n', '\n', '    /**\n', '    * Change the upgrade master.\n', '    * This allows us to set a new owner for the upgrade mechanism.\n', '    */\n', '    function setUpgradeMaster(address _newMaster) external onlyUpgradeMaster {\n', '        require(_newMaster != address(0));\n', '        upgradeMaster = _newMaster;\n', '    }\n', '\n', '    // To be overriden to add functionality\n', '    function allowUpgrades() external onlyUpgradeMaster () {\n', '        upgradesAllowed = true;\n', '    }\n', '\n', '    // To be overriden to add functionality\n', '    function rejectUpgrades() external onlyUpgradeMaster () {\n', '        require(!(totalUpgraded > 0));\n', '        upgradesAllowed = false;\n', '    }\n', '\n', '    // Get the state of the token upgrade.\n', '    function getUpgradeState() public view returns(UpgradeState) {\n', '        if (!canUpgrade()) return UpgradeState.NotAllowed;\n', '        else if (address(tokenUpgrader) == address(0)) return UpgradeState.Waiting;\n', '        else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '        else return UpgradeState.Upgrading;\n', '    }\n', '\n', '    // To be overriden to add functionality\n', '    function canUpgrade() public view returns(bool) {\n', '        return upgradesAllowed;\n', '    }\n', '}\n', '\n', '\n', 'contract Token is UpgradeableToken, BurnableToken {\n', '    string public name = "KEYOTO";\n', '    string public symbol = "KEYO";\n', '\n', '    // For patient incentive programs\n', '    uint256 public INITIAL_SUPPLY;\n', '\n', '    event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '    constructor (address kpoWallet, address _upgradeMaster, uint256 _INITIAL_SUPPLY)\n', '        public\n', '        UpgradeableToken(_upgradeMaster)\n', '    {\n', '        require(maxTokenSupply >= _INITIAL_SUPPLY * (10 ** uint256(decimals)));\n', '        INITIAL_SUPPLY = _INITIAL_SUPPLY * (10 ** uint256(decimals));\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[kpoWallet] = INITIAL_SUPPLY;\n', '        emit Transfer(address(0), kpoWallet, INITIAL_SUPPLY);\n', '    }\n', '\n', '    /**\n', '    * Owner can update token information here\n', '    */\n', '    function setTokenInformation(string _name, string _symbol) external onlyOwner {\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        emit UpdatedTokenInformation(name, symbol);\n', '    }\n', '\n', '    /**\n', '    * Owner can burn token here\n', '    */\n', '    function burn(uint256 _value) public onlyOwner {\n', '        super.burn(_value);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract MintableAndPausableToken is PausableToken {\n', '    uint8 public constant decimals = 18;\n', '    uint256 public maxTokenSupply = 2000000000 * 10 ** uint256(decimals);\n', '\n', '    bool public mintingFinished = false;\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    event MintStarted();\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier checkMaxSupply(uint256 _amount) {\n', '        require(maxTokenSupply >= totalSupply_.add(_amount));\n', '        _;\n', '    }\n', '\n', '    modifier cannotMint() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount)\n', '        external\n', '        onlyOwner\n', '        canMint\n', '        checkMaxSupply (_amount)\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() external onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function startMinting() external onlyOwner cannotMint returns (bool) {\n', '        mintingFinished = false;\n', '        emit MintStarted();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * Token upgrader interface inspired by Lunyr.\n', ' *\n', ' * Token upgrader transfers previous version tokens to a newer version.\n', ' * Token upgrader itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' */\n', 'contract TokenUpgrader {\n', '    uint public originalSupply;\n', '\n', '    /** Interface marker */\n', '    function isTokenUpgrader() external pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function upgradeFrom(address _from, uint256 _value) public {}\n', '}\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', '\n', '\n', 'contract UpgradeableToken is MintableAndPausableToken {\n', '    // Contract or person who can set the upgrade path.\n', '    address public upgradeMaster;\n', '    \n', '    // Bollean value needs to be true to start upgrades\n', '    bool private upgradesAllowed;\n', '\n', '    // The next contract where the tokens will be migrated.\n', '    TokenUpgrader public tokenUpgrader;\n', '\n', '    // How many tokens we have upgraded by now.\n', '    uint public totalUpgraded;\n', '\n', '    /**\n', '    * Upgrade states.\n', '    * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\n', "    * - Waiting: Token allows upgrade, but we don't have a new token version\n", '    * - ReadyToUpgrade: The token version is set, but not a single token has been upgraded yet\n', '    * - Upgrading: Token upgrader is set and the balance holders can upgrade their tokens\n', '    */\n', '    enum UpgradeState { NotAllowed, Waiting, ReadyToUpgrade, Upgrading }\n', '\n', '    // Somebody has upgraded some of his tokens.\n', '    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // New token version available.\n', '    event TokenUpgraderIsSet(address _newToken);\n', '\n', '    modifier onlyUpgradeMaster {\n', '        // Only a master can designate the next token\n', '        require(msg.sender == upgradeMaster);\n', '        _;\n', '    }\n', '\n', '    modifier notInUpgradingState {\n', '        // Upgrade has already begun for token\n', '        require(getUpgradeState() != UpgradeState.Upgrading);\n', '        _;\n', '    }\n', '\n', '    // Do not allow construction without upgrade master set.\n', '    constructor(address _upgradeMaster) public {\n', '        upgradeMaster = _upgradeMaster;\n', '    }\n', '\n', '    // set a token upgrader\n', '    function setTokenUpgrader(address _newToken)\n', '        external\n', '        onlyUpgradeMaster\n', '        notInUpgradingState\n', '    {\n', '        require(canUpgrade());\n', '        require(_newToken != address(0));\n', '\n', '        tokenUpgrader = TokenUpgrader(_newToken);\n', '\n', '        // Handle bad interface\n', '        require(tokenUpgrader.isTokenUpgrader());\n', '\n', '        // Make sure that token supplies match in source and target\n', '        require(tokenUpgrader.originalSupply() == totalSupply_);\n', '\n', '        emit TokenUpgraderIsSet(tokenUpgrader);\n', '    }\n', '\n', '    // Allow the token holder to upgrade some of their tokens to a new contract.\n', '    function upgrade(uint _value) external {\n', '        UpgradeState state = getUpgradeState();\n', '        \n', '        // Check upgrate state \n', '        require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n', '        // Validate input value\n', '        require(_value != 0);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        // Take tokens out from circulation\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        totalUpgraded = totalUpgraded.add(_value);\n', '\n', '        // Token Upgrader reissues the tokens\n', '        tokenUpgrader.upgradeFrom(msg.sender, _value);\n', '        emit Upgrade(msg.sender, tokenUpgrader, _value);\n', '    }\n', '\n', '    /**\n', '    * Change the upgrade master.\n', '    * This allows us to set a new owner for the upgrade mechanism.\n', '    */\n', '    function setUpgradeMaster(address _newMaster) external onlyUpgradeMaster {\n', '        require(_newMaster != address(0));\n', '        upgradeMaster = _newMaster;\n', '    }\n', '\n', '    // To be overriden to add functionality\n', '    function allowUpgrades() external onlyUpgradeMaster () {\n', '        upgradesAllowed = true;\n', '    }\n', '\n', '    // To be overriden to add functionality\n', '    function rejectUpgrades() external onlyUpgradeMaster () {\n', '        require(!(totalUpgraded > 0));\n', '        upgradesAllowed = false;\n', '    }\n', '\n', '    // Get the state of the token upgrade.\n', '    function getUpgradeState() public view returns(UpgradeState) {\n', '        if (!canUpgrade()) return UpgradeState.NotAllowed;\n', '        else if (address(tokenUpgrader) == address(0)) return UpgradeState.Waiting;\n', '        else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '        else return UpgradeState.Upgrading;\n', '    }\n', '\n', '    // To be overriden to add functionality\n', '    function canUpgrade() public view returns(bool) {\n', '        return upgradesAllowed;\n', '    }\n', '}\n', '\n', '\n', 'contract Token is UpgradeableToken, BurnableToken {\n', '    string public name = "KEYOTO";\n', '    string public symbol = "KEYO";\n', '\n', '    // For patient incentive programs\n', '    uint256 public INITIAL_SUPPLY;\n', '\n', '    event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '    constructor (address kpoWallet, address _upgradeMaster, uint256 _INITIAL_SUPPLY)\n', '        public\n', '        UpgradeableToken(_upgradeMaster)\n', '    {\n', '        require(maxTokenSupply >= _INITIAL_SUPPLY * (10 ** uint256(decimals)));\n', '        INITIAL_SUPPLY = _INITIAL_SUPPLY * (10 ** uint256(decimals));\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[kpoWallet] = INITIAL_SUPPLY;\n', '        emit Transfer(address(0), kpoWallet, INITIAL_SUPPLY);\n', '    }\n', '\n', '    /**\n', '    * Owner can update token information here\n', '    */\n', '    function setTokenInformation(string _name, string _symbol) external onlyOwner {\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        emit UpdatedTokenInformation(name, symbol);\n', '    }\n', '\n', '    /**\n', '    * Owner can burn token here\n', '    */\n', '    function burn(uint256 _value) public onlyOwner {\n', '        super.burn(_value);\n', '    }\n', '}']
