['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken {\n', '  function transferFrom(address, address, uint) public returns (bool);\n', '  function burn(uint) public;\n', '}\n', '\n', 'contract ReturnMANA is Ownable {\n', '\n', '  // contract for mapping return address of vested accounts\n', '  ReturnVestingRegistry public returnVesting;\n', '\n', '  // MANA Token\n', '  BurnableToken public token;\n', '\n', '  // address of the contract that holds the reserve of staked MANA\n', '  address public terraformReserve;\n', '\n', '  /**\n', '    * @dev Constructor\n', '    * @param _token MANA token contract address\n', '    * @param _terraformReserve address of the contract that holds the staked funds for the auction\n', '    * @param _returnVesting address of the contract for vested account mapping\n', '    */\n', '  function ReturnMANA(address _token, address _terraformReserve, address _returnVesting) public {\n', '    token = BurnableToken(_token);\n', '    returnVesting = ReturnVestingRegistry(_returnVesting);\n', '    terraformReserve = _terraformReserve;\n', '  }\n', '\n', '  /**\n', '   * @dev Burn MANA\n', '   * @param _amount Amount of MANA to burn from terraform\n', '   */\n', '  function burnMana(uint256 _amount) onlyOwner public {\n', '    require(_amount > 0);\n', '    require(token.transferFrom(terraformReserve, this, _amount));\n', '    token.burn(_amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer back remaining MANA to account\n', '   * @param _address Address of the account to return MANA to\n', '   * @param _amount Amount of MANA to return\n', '   */\n', '  function transferBackMANA(address _address, uint256 _amount) onlyOwner public {\n', '    require(_address != address(0));\n', '    require(_amount > 0);\n', '\n', '    address returnAddress = _address;\n', '\n', '    // Use vesting return address if present\n', '    if (returnVesting != address(0)) {\n', '      address mappedAddress = returnVesting.returnAddress(_address);\n', '      if (mappedAddress != address(0)) {\n', '        returnAddress = mappedAddress;\n', '      }\n', '    }\n', '\n', '    // Funds are always transferred from reserve\n', '    require(token.transferFrom(terraformReserve, returnAddress, _amount));\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer back remaining MANA to multiple accounts\n', '   * @param _addresses Addresses of the accounts to return MANA to\n', '   * @param _amounts Amounts of MANA to return\n', '   */\n', '  function transferBackMANAMany(address[] _addresses, uint256[] _amounts) onlyOwner public {\n', '    require(_addresses.length == _amounts.length);\n', '\n', '    for (uint256 i = 0; i < _addresses.length; i++) {\n', '      transferBackMANA(_addresses[i], _amounts[i]);\n', '    }\n', '  }\n', '}\n', '\n', 'contract ReturnVestingRegistry is Ownable {\n', '\n', '  mapping (address => address) public returnAddress;\n', '\n', '  function record(address from, address to) onlyOwner public {\n', '    require(from != 0);\n', '\n', '    returnAddress[from] = to;\n', '  }\n', '}']