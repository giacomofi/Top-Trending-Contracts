['pragma solidity ^0.4.18;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract tokenRecipient { \n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public ;\n', '} \n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract MayanProtocolContract is ERC20Token, Owned{\n', '\n', '    /* Public variables of the token */\n', '    string  public constant standard = "Mayan protocol V1.0";\n', '    string  public constant name = "Mayan protocol";\n', '    string  public constant symbol = "MAY";\n', '    uint256 public constant decimals = 6;\n', '    uint256 private constant etherChange = 10**18;\n', '    \n', '    /* Variables of the token */\n', '    uint256 public totalSupply;\n', '    uint256 public totalRemainSupply;\n', '    uint256 public MAYExchangeRate;\n', '    bool    public crowdsaleIsOpen;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '    address public multisigAddress;\n', '    /* Events */\n', '    event mintToken(address indexed _to, uint256 _value);\n', '    event burnToken(address indexed _from, uint256 _value);\n', '    \n', '    function () payable public {\n', '        require (crowdsaleIsOpen == true);\n', '        require(msg.value != 0);\n', '        mintMAYToken(msg.sender, (msg.value * MAYExchangeRate * 10**decimals) / etherChange);\n', '    }\n', '    /* Initializes contract and  sets restricted addresses */\n', '    function MayanProtocolContract(uint256 _totalSupply, uint256 _MAYExchangeRate) public {\n', '        owner = msg.sender;\n', '        totalSupply = _totalSupply * 10**decimals;\n', '        MAYExchangeRate = _MAYExchangeRate;\n', '        totalRemainSupply = totalSupply;\n', '        crowdsaleIsOpen = true;\n', '    }\n', '    \n', '    function setMAYExchangeRate(uint256 _MAYExchangeRate) public onlyOwner {\n', '        MAYExchangeRate = _MAYExchangeRate;\n', '    }\n', '    \n', '    function crowdsaleOpen(bool _crowdsaleIsOpen) public {\n', '        crowdsaleIsOpen = _crowdsaleIsOpen;\n', '    }\n', '    /* Returns total supply of issued tokens */\n', '    function MAYTotalSupply() view public returns (uint256) {   \n', '        return totalSupply - totalRemainSupply;\n', '    }\n', '\n', '    /* Returns balance of address */\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* Transfers tokens from your address to other */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require (balances[msg.sender] >= _value);            // Throw if sender has insufficient balance\n', '        require (balances[_to] + _value >= balances[_to]);   // Throw if owerflow detected\n', '        balances[msg.sender] -= _value;                     // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recivers blaance \n', '        emit Transfer(msg.sender, _to, _value);                  // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    /* Approve other address to spend tokens on your account */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;          // Set allowance         \n', '        emit Approval(msg.sender, _spender, _value);             // Raise Approval event         \n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */ \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {            \n', '        tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \n', '        approve(_spender, _value);                                      // Set approval to contract for _value         \n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \n', '        return true;     \n', '    }     \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {      \n', '        require (balances[_from] >= _value);                // Throw if sender does not have enough balance     \n', '        require (balances[_to] + _value >= balances[_to]);  // Throw if overflow detected    \n', '        require (_value <= allowances[_from][msg.sender]);  // Throw if you do not have allowance       \n', '        balances[_from] -= _value;                          // Deduct senders balance    \n', '        balances[_to] += _value;                            // Add recipient blaance         \n', '        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \n', '        emit Transfer(_from, _to, _value);                       // Raise Transfer event\n', '        return true;     \n', '    }         \n', '\n', '    /* Get the amount of allowed tokens to spend */     \n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {         \n', '        return allowances[_owner][_spender];\n', '    }     \n', '        \n', '    /*withdraw Ether to a multisig address*/\n', '    function withdraw(address _multisigAddress) public onlyOwner {    \n', '        require(_multisigAddress != 0x0);\n', '        multisigAddress = _multisigAddress;\n', '        address contractAddress = this;\n', '        multisigAddress.transfer(contractAddress.balance);\n', '    }  \n', '    \n', '    /* Issue new tokens */     \n', '    function mintMAYToken(address _to, uint256 _amount) internal { \n', '        require (balances[_to] + _amount >= balances[_to]);      // Check for overflows\n', '        require (totalRemainSupply >= _amount);\n', '        totalRemainSupply -= _amount;                           // Update total supply\n', '        balances[_to] += _amount;                               // Set minted coins to target\n', '        emit mintToken(_to, _amount);                                // Create Mint event       \n', '        emit Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\n', '    }  \n', '    \n', '    function mintTokens(address _sendTo, uint256 _sendAmount) public onlyOwner {\n', '        mintMAYToken(_sendTo, _sendAmount);\n', '    }\n', '    \n', '    /* Destroy tokens from owners account */\n', '    function burnTokens(address _addr, uint256 _amount) public onlyOwner {\n', '        require (balances[_addr] >= _amount);               // Throw if you do not have enough balance\n', '        totalRemainSupply += _amount;                           // Deduct totalSupply\n', '        balances[_addr] -= _amount;                             // Destroy coins on senders wallet\n', '        emit burnToken(_addr, _amount);                              // Raise Burn event\n', '        emit Transfer(_addr, 0x0, _amount);                          // Raise transfer to 0x0\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract tokenRecipient { \n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public ;\n', '} \n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract MayanProtocolContract is ERC20Token, Owned{\n', '\n', '    /* Public variables of the token */\n', '    string  public constant standard = "Mayan protocol V1.0";\n', '    string  public constant name = "Mayan protocol";\n', '    string  public constant symbol = "MAY";\n', '    uint256 public constant decimals = 6;\n', '    uint256 private constant etherChange = 10**18;\n', '    \n', '    /* Variables of the token */\n', '    uint256 public totalSupply;\n', '    uint256 public totalRemainSupply;\n', '    uint256 public MAYExchangeRate;\n', '    bool    public crowdsaleIsOpen;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '    address public multisigAddress;\n', '    /* Events */\n', '    event mintToken(address indexed _to, uint256 _value);\n', '    event burnToken(address indexed _from, uint256 _value);\n', '    \n', '    function () payable public {\n', '        require (crowdsaleIsOpen == true);\n', '        require(msg.value != 0);\n', '        mintMAYToken(msg.sender, (msg.value * MAYExchangeRate * 10**decimals) / etherChange);\n', '    }\n', '    /* Initializes contract and  sets restricted addresses */\n', '    function MayanProtocolContract(uint256 _totalSupply, uint256 _MAYExchangeRate) public {\n', '        owner = msg.sender;\n', '        totalSupply = _totalSupply * 10**decimals;\n', '        MAYExchangeRate = _MAYExchangeRate;\n', '        totalRemainSupply = totalSupply;\n', '        crowdsaleIsOpen = true;\n', '    }\n', '    \n', '    function setMAYExchangeRate(uint256 _MAYExchangeRate) public onlyOwner {\n', '        MAYExchangeRate = _MAYExchangeRate;\n', '    }\n', '    \n', '    function crowdsaleOpen(bool _crowdsaleIsOpen) public {\n', '        crowdsaleIsOpen = _crowdsaleIsOpen;\n', '    }\n', '    /* Returns total supply of issued tokens */\n', '    function MAYTotalSupply() view public returns (uint256) {   \n', '        return totalSupply - totalRemainSupply;\n', '    }\n', '\n', '    /* Returns balance of address */\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* Transfers tokens from your address to other */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require (balances[msg.sender] >= _value);            // Throw if sender has insufficient balance\n', '        require (balances[_to] + _value >= balances[_to]);   // Throw if owerflow detected\n', '        balances[msg.sender] -= _value;                     // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recivers blaance \n', '        emit Transfer(msg.sender, _to, _value);                  // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    /* Approve other address to spend tokens on your account */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;          // Set allowance         \n', '        emit Approval(msg.sender, _spender, _value);             // Raise Approval event         \n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */ \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {            \n', '        tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \n', '        approve(_spender, _value);                                      // Set approval to contract for _value         \n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \n', '        return true;     \n', '    }     \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {      \n', '        require (balances[_from] >= _value);                // Throw if sender does not have enough balance     \n', '        require (balances[_to] + _value >= balances[_to]);  // Throw if overflow detected    \n', '        require (_value <= allowances[_from][msg.sender]);  // Throw if you do not have allowance       \n', '        balances[_from] -= _value;                          // Deduct senders balance    \n', '        balances[_to] += _value;                            // Add recipient blaance         \n', '        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \n', '        emit Transfer(_from, _to, _value);                       // Raise Transfer event\n', '        return true;     \n', '    }         \n', '\n', '    /* Get the amount of allowed tokens to spend */     \n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {         \n', '        return allowances[_owner][_spender];\n', '    }     \n', '        \n', '    /*withdraw Ether to a multisig address*/\n', '    function withdraw(address _multisigAddress) public onlyOwner {    \n', '        require(_multisigAddress != 0x0);\n', '        multisigAddress = _multisigAddress;\n', '        address contractAddress = this;\n', '        multisigAddress.transfer(contractAddress.balance);\n', '    }  \n', '    \n', '    /* Issue new tokens */     \n', '    function mintMAYToken(address _to, uint256 _amount) internal { \n', '        require (balances[_to] + _amount >= balances[_to]);      // Check for overflows\n', '        require (totalRemainSupply >= _amount);\n', '        totalRemainSupply -= _amount;                           // Update total supply\n', '        balances[_to] += _amount;                               // Set minted coins to target\n', '        emit mintToken(_to, _amount);                                // Create Mint event       \n', '        emit Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\n', '    }  \n', '    \n', '    function mintTokens(address _sendTo, uint256 _sendAmount) public onlyOwner {\n', '        mintMAYToken(_sendTo, _sendAmount);\n', '    }\n', '    \n', '    /* Destroy tokens from owners account */\n', '    function burnTokens(address _addr, uint256 _amount) public onlyOwner {\n', '        require (balances[_addr] >= _amount);               // Throw if you do not have enough balance\n', '        totalRemainSupply += _amount;                           // Deduct totalSupply\n', '        balances[_addr] -= _amount;                             // Destroy coins on senders wallet\n', '        emit burnToken(_addr, _amount);                              // Raise Burn event\n', '        emit Transfer(_addr, 0x0, _amount);                          // Raise transfer to 0x0\n', '    }\n', '}']
