['pragma solidity ^0.4.19;\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', ' /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', ' /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ERC223.sol\n', '\n', '/**\n', ' * ERC20-compatible version of ERC223\n', ' * https://github.com/Dexaran/ERC223-token-standard/tree/ERC20_compatible\n', ' */\n', 'contract ERC223Basic is StandardToken {\n', '    function transfer(address to, uint value, bytes data) public;\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', '/**\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * ERC20-compatible version of ERC223\n', ' * https://github.com/Dexaran/ERC223-token-standard/tree/ERC20_compatible\n', ' */\n', 'contract ERC223BasicToken is ERC223Basic {\n', '    using SafeMath for uint;\n', '\n', '    /**\n', '     * @dev Fix for the ERC20 short address attack.\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address to, uint value, bytes data) onlyPayloadSize(2 * 32) public {\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\n', '            receiver.tokenFallback(msg.sender, value, data);\n', '        }\n', '        Transfer(msg.sender, to, value);  // ERC20 transfer event\n', '        Transfer(msg.sender, to, value, data);  // ERC223 transfer event\n', '    }\n', '\n', '    // Standard function transfer similar to ERC20 transfer with no _data .\n', '    // Added due to backwards compatibility reasons .\n', '    function transfer(address to, uint256 value) onlyPayloadSize(2 * 32)  public returns (bool) {\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\n', '            bytes memory empty;\n', '            receiver.tokenFallback(msg.sender, value, empty);\n', '        }\n', '        Transfer(msg.sender, to, value);  // ERC20 transfer event\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/DogRacingToken.sol\n', '\n', '/**\n', ' * DogRacing Token\n', ' */\n', 'contract DogRacingToken is ERC223BasicToken {\n', '  using SafeMath for uint256;\n', '\n', '  string constant public name = "Dog Racing";\n', '  string constant public symbol = "DGR";\n', '  uint8 constant public decimals = 3;\n', '  uint256 constant public totalSupply \t= 326250000 * 1000;\t// Supply is in the smallest units\n', '\n', '  address public owner;   // owner address\n', '\n', '  modifier onlyOwner {\n', '    require(owner == msg.sender);\n', '    _;\n', '  }\n', '\n', '  function DogRacingToken() public {\n', '    owner = msg.sender;\n', '    balances[owner] = totalSupply;   // All tokens are assigned to the owner\n', '  }\n', '\n', '  // Owner may burn own tokens\n', '  function burnTokens(uint256 amount) onlyOwner external {\n', '    balances[owner] = balances[owner].sub(amount);\n', '  }\n', '}\n', '\n', '// File: contracts/DogRacingCrowdsale.sol\n', '\n', '/**\n', ' * DogRacing Crowdsale\n', ' */\n', 'contract DogRacingCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  DogRacingToken public token;\t\t// Token contract address\n', '\n', '  uint256 public stage1_start;\t\t// Crowdsale timing\n', '  uint256 public stage2_start;\n', '  uint256 public stage3_start;\n', '  uint256 public stage4_start;\n', '  uint256 public crowdsale_end;\n', '\n', '  uint256 public stage1_price;\t\t// Prices in token millis / ETH\n', '  uint256 public stage2_price;\t\t\n', '  uint256 public stage3_price;\t\t\n', '  uint256 public stage4_price;\n', '\n', '  uint256 public hard_cap_wei;\t\t// Crowdsale hard cap in wei\n', '\n', '  address public owner;   \t\t\t// Owner address\n', '\n', '  uint256 public wei_raised;\t\t// Total Wei raised by crowdsale\n', '\n', '  event TokenPurchase(address buyer, uint256 weiAmount, uint256 tokensAmount);\n', '\n', '  modifier onlyOwner {\n', '    require(owner == msg.sender);\n', '   _;\n', '  }\n', '\n', '  modifier withinCrowdsaleTime {\n', '\trequire(now >= stage1_start && now < crowdsale_end);\n', '\t_;\n', '  }\n', '\n', '  modifier afterCrowdsale {\n', '\trequire(now >= crowdsale_end);\n', '\t_;\n', '  }\n', '\n', '  modifier withinCap {\n', '  \trequire(wei_raised < hard_cap_wei);\n', '\t_;\n', '  }\n', '\n', '  // Constructor\n', '  function DogRacingCrowdsale(DogRacingToken _token,\n', '  \t\t\t\t\t\t\t  uint256 _stage1_start, uint256 _stage2_start, uint256 _stage3_start, uint256 _stage4_start, uint256 _crowdsale_end,\n', '  \t\t\t\t\t\t\t  uint256 _stage1_price, uint256 _stage2_price, uint256 _stage3_price, uint256 _stage4_price,\n', '  \t\t\t\t\t\t\t  uint256 _hard_cap_wei) public {\n', '  \trequire(_stage1_start > now);\n', '  \trequire(_stage2_start > _stage1_start);\n', '  \trequire(_stage3_start > _stage2_start);\n', '  \trequire(_stage4_start > _stage3_start);\n', '  \trequire(_crowdsale_end > _stage4_start);\n', '  \trequire(_stage1_price > 0);\n', '  \trequire(_stage2_price < _stage1_price);\n', '  \trequire(_stage3_price < _stage2_price);\n', '  \trequire(_stage4_price < _stage3_price);\n', '  \trequire(_hard_cap_wei > 0);\n', '    require(_token != address(0));\n', '\n', '  \towner = msg.sender;\n', '\n', '  \ttoken = _token;\n', '\n', '  \tstage1_start = _stage1_start;\n', '  \tstage2_start = _stage2_start;\n', '  \tstage3_start = _stage3_start;\n', '  \tstage4_start = _stage4_start;\n', '  \tcrowdsale_end = _crowdsale_end;\n', '\n', '  \tstage1_price = _stage1_price;\n', '  \tstage2_price = _stage2_price;\n', '  \tstage3_price = _stage3_price;\n', '  \tstage4_price = _stage4_price;\n', '\n', '  \thard_cap_wei = _hard_cap_wei;\n', '  }\n', '\n', '  // get current price in token millis / ETH\n', '  function getCurrentPrice() public view withinCrowdsaleTime returns (uint256) {\n', '  \tif (now < stage2_start) {\n', '  \t\treturn stage1_price;\n', '  \t} else if (now < stage3_start) {\n', '  \t\treturn stage2_price;\n', '  \t} else if (now < stage4_start) {\n', '  \t\treturn stage3_price;\n', '  \t} else {\n', '  \t\treturn stage4_price;\n', '  \t}\n', '  }\n', '\n', '  // get amount in token millis for amount in wei\n', '  function getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '    uint256 price = getCurrentPrice();\n', '    return weiAmount.mul(price).div(1 ether);\n', '  }\n', '\n', '  // fallback function\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // tokens fallback function\n', '  function tokenFallback(address, uint256, bytes) external pure {\n', '  }\n', '\n', '  // tokens purchase\n', '  function buyTokens(address beneficiary) public withinCrowdsaleTime withinCap payable {\n', '   \tuint256 wei_amount = msg.value;\n', '    \n', '    require(beneficiary != address(0));\n', '    require(wei_amount != 0);\n', ' \n', '    // calculate token amount to be sold\n', '    uint256 tokens = getTokenAmount(wei_amount);\n', '\n', '    // update state\n', '    wei_raised = wei_raised.add(wei_amount);\n', '    require(wei_raised <= hard_cap_wei);\n', '\n', '    // deliver tokens\n', '    token.transfer(beneficiary, tokens);\n', '\n', '    TokenPurchase(beneficiary, wei_amount, tokens);\n', '\n', '    // deliver ether\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '  // Remaining tokens withdrawal\n', '  function withdrawTokens() external onlyOwner afterCrowdsale {\n', '  \tuint256 tokens_remaining = token.balanceOf(address(this));\n', '  \ttoken.transfer(owner, tokens_remaining);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', ' /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', ' /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ERC223.sol\n', '\n', '/**\n', ' * ERC20-compatible version of ERC223\n', ' * https://github.com/Dexaran/ERC223-token-standard/tree/ERC20_compatible\n', ' */\n', 'contract ERC223Basic is StandardToken {\n', '    function transfer(address to, uint value, bytes data) public;\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', '/**\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * ERC20-compatible version of ERC223\n', ' * https://github.com/Dexaran/ERC223-token-standard/tree/ERC20_compatible\n', ' */\n', 'contract ERC223BasicToken is ERC223Basic {\n', '    using SafeMath for uint;\n', '\n', '    /**\n', '     * @dev Fix for the ERC20 short address attack.\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address to, uint value, bytes data) onlyPayloadSize(2 * 32) public {\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\n', '            receiver.tokenFallback(msg.sender, value, data);\n', '        }\n', '        Transfer(msg.sender, to, value);  // ERC20 transfer event\n', '        Transfer(msg.sender, to, value, data);  // ERC223 transfer event\n', '    }\n', '\n', '    // Standard function transfer similar to ERC20 transfer with no _data .\n', '    // Added due to backwards compatibility reasons .\n', '    function transfer(address to, uint256 value) onlyPayloadSize(2 * 32)  public returns (bool) {\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        if(codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\n', '            bytes memory empty;\n', '            receiver.tokenFallback(msg.sender, value, empty);\n', '        }\n', '        Transfer(msg.sender, to, value);  // ERC20 transfer event\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/DogRacingToken.sol\n', '\n', '/**\n', ' * DogRacing Token\n', ' */\n', 'contract DogRacingToken is ERC223BasicToken {\n', '  using SafeMath for uint256;\n', '\n', '  string constant public name = "Dog Racing";\n', '  string constant public symbol = "DGR";\n', '  uint8 constant public decimals = 3;\n', '  uint256 constant public totalSupply \t= 326250000 * 1000;\t// Supply is in the smallest units\n', '\n', '  address public owner;   // owner address\n', '\n', '  modifier onlyOwner {\n', '    require(owner == msg.sender);\n', '    _;\n', '  }\n', '\n', '  function DogRacingToken() public {\n', '    owner = msg.sender;\n', '    balances[owner] = totalSupply;   // All tokens are assigned to the owner\n', '  }\n', '\n', '  // Owner may burn own tokens\n', '  function burnTokens(uint256 amount) onlyOwner external {\n', '    balances[owner] = balances[owner].sub(amount);\n', '  }\n', '}\n', '\n', '// File: contracts/DogRacingCrowdsale.sol\n', '\n', '/**\n', ' * DogRacing Crowdsale\n', ' */\n', 'contract DogRacingCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  DogRacingToken public token;\t\t// Token contract address\n', '\n', '  uint256 public stage1_start;\t\t// Crowdsale timing\n', '  uint256 public stage2_start;\n', '  uint256 public stage3_start;\n', '  uint256 public stage4_start;\n', '  uint256 public crowdsale_end;\n', '\n', '  uint256 public stage1_price;\t\t// Prices in token millis / ETH\n', '  uint256 public stage2_price;\t\t\n', '  uint256 public stage3_price;\t\t\n', '  uint256 public stage4_price;\n', '\n', '  uint256 public hard_cap_wei;\t\t// Crowdsale hard cap in wei\n', '\n', '  address public owner;   \t\t\t// Owner address\n', '\n', '  uint256 public wei_raised;\t\t// Total Wei raised by crowdsale\n', '\n', '  event TokenPurchase(address buyer, uint256 weiAmount, uint256 tokensAmount);\n', '\n', '  modifier onlyOwner {\n', '    require(owner == msg.sender);\n', '   _;\n', '  }\n', '\n', '  modifier withinCrowdsaleTime {\n', '\trequire(now >= stage1_start && now < crowdsale_end);\n', '\t_;\n', '  }\n', '\n', '  modifier afterCrowdsale {\n', '\trequire(now >= crowdsale_end);\n', '\t_;\n', '  }\n', '\n', '  modifier withinCap {\n', '  \trequire(wei_raised < hard_cap_wei);\n', '\t_;\n', '  }\n', '\n', '  // Constructor\n', '  function DogRacingCrowdsale(DogRacingToken _token,\n', '  \t\t\t\t\t\t\t  uint256 _stage1_start, uint256 _stage2_start, uint256 _stage3_start, uint256 _stage4_start, uint256 _crowdsale_end,\n', '  \t\t\t\t\t\t\t  uint256 _stage1_price, uint256 _stage2_price, uint256 _stage3_price, uint256 _stage4_price,\n', '  \t\t\t\t\t\t\t  uint256 _hard_cap_wei) public {\n', '  \trequire(_stage1_start > now);\n', '  \trequire(_stage2_start > _stage1_start);\n', '  \trequire(_stage3_start > _stage2_start);\n', '  \trequire(_stage4_start > _stage3_start);\n', '  \trequire(_crowdsale_end > _stage4_start);\n', '  \trequire(_stage1_price > 0);\n', '  \trequire(_stage2_price < _stage1_price);\n', '  \trequire(_stage3_price < _stage2_price);\n', '  \trequire(_stage4_price < _stage3_price);\n', '  \trequire(_hard_cap_wei > 0);\n', '    require(_token != address(0));\n', '\n', '  \towner = msg.sender;\n', '\n', '  \ttoken = _token;\n', '\n', '  \tstage1_start = _stage1_start;\n', '  \tstage2_start = _stage2_start;\n', '  \tstage3_start = _stage3_start;\n', '  \tstage4_start = _stage4_start;\n', '  \tcrowdsale_end = _crowdsale_end;\n', '\n', '  \tstage1_price = _stage1_price;\n', '  \tstage2_price = _stage2_price;\n', '  \tstage3_price = _stage3_price;\n', '  \tstage4_price = _stage4_price;\n', '\n', '  \thard_cap_wei = _hard_cap_wei;\n', '  }\n', '\n', '  // get current price in token millis / ETH\n', '  function getCurrentPrice() public view withinCrowdsaleTime returns (uint256) {\n', '  \tif (now < stage2_start) {\n', '  \t\treturn stage1_price;\n', '  \t} else if (now < stage3_start) {\n', '  \t\treturn stage2_price;\n', '  \t} else if (now < stage4_start) {\n', '  \t\treturn stage3_price;\n', '  \t} else {\n', '  \t\treturn stage4_price;\n', '  \t}\n', '  }\n', '\n', '  // get amount in token millis for amount in wei\n', '  function getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '    uint256 price = getCurrentPrice();\n', '    return weiAmount.mul(price).div(1 ether);\n', '  }\n', '\n', '  // fallback function\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // tokens fallback function\n', '  function tokenFallback(address, uint256, bytes) external pure {\n', '  }\n', '\n', '  // tokens purchase\n', '  function buyTokens(address beneficiary) public withinCrowdsaleTime withinCap payable {\n', '   \tuint256 wei_amount = msg.value;\n', '    \n', '    require(beneficiary != address(0));\n', '    require(wei_amount != 0);\n', ' \n', '    // calculate token amount to be sold\n', '    uint256 tokens = getTokenAmount(wei_amount);\n', '\n', '    // update state\n', '    wei_raised = wei_raised.add(wei_amount);\n', '    require(wei_raised <= hard_cap_wei);\n', '\n', '    // deliver tokens\n', '    token.transfer(beneficiary, tokens);\n', '\n', '    TokenPurchase(beneficiary, wei_amount, tokens);\n', '\n', '    // deliver ether\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '  // Remaining tokens withdrawal\n', '  function withdrawTokens() external onlyOwner afterCrowdsale {\n', '  \tuint256 tokens_remaining = token.balanceOf(address(this));\n', '  \ttoken.transfer(owner, tokens_remaining);\n', '  }\n', '\n', '}']
