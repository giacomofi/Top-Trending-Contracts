['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public view returns (uint);\n', '  \n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function decimals() public view returns (uint256 _decimals);\n', '  function totalSupply() public view returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract ContractReceiver {\n', '     \n', '  struct TKN {\n', '    address sender;\n', '    uint value;\n', '    bytes data;\n', '    bytes4 sig;\n', '  }\n', '  \n', '  \n', '  function tokenFallback(address _from, uint _value, bytes _data) public {\n', '    TKN memory tkn;\n', '    tkn.sender = _from;\n', '    tkn.value = _value;\n', '    tkn.data = _data;\n', '    uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '    tkn.sig = bytes4(u);\n', '    \n', '    /* tkn variable is analogue of msg variable of Ether transaction\n', '    *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '    *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '    *  tkn.data is data of token transaction   (analogue of msg.data)\n', '    *  tkn.sig is 4 bytes signature of function\n', '    *  if data of token transaction is a function execution\n', '    */\n', '  }\n', '}\n', '\n', '\n', 'contract ERC223Token is ERC223 {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '  \n', '  string public name;\n', '  string public symbol;\n', '  uint256 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '  modifier validDestination( address to ) {\n', '    require(to != address(0x0));\n', '    _;\n', '  }\n', '  \n', '  \n', '  // Function to access name of token .\n', '  function name() public view returns (string _name) {\n', '    return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() public view returns (string _symbol) {\n', '    return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() public view returns (uint256 _decimals) {\n', '    return decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() public view returns (uint256 _totalSupply) {\n', '    return totalSupply;\n', '  }\n', '  \n', '  \n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) validDestination(_to) public returns (bool success) {\n', '      \n', '    if(isContract(_to)) {\n', '      if (balanceOf(msg.sender) < _value) revert();\n', '      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '      balances[_to] = balanceOf(_to).add(_value);\n', '      assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '      emit Transfer(msg.sender, _to, _value, _data);\n', '      return true;\n', '    }\n', '    else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '  \n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) validDestination(_to) public returns (bool success) {\n', '      \n', '    if(isContract(_to)) {\n', '      return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '  \n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) validDestination(_to) public returns (bool success) {\n', '      \n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '      return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '  }\n', '\n', '  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private view returns (bool is_contract) {\n', '    uint length;\n', '    assembly {\n', '      //retrieve the size of the code on target address, this needs assembly\n', '      length := extcodesize(_addr)\n', '    }\n', '    return (length>0);\n', '  }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    emit Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '  \n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver receiver = ContractReceiver(_to);\n', '    receiver.tokenFallback(msg.sender, _value, _data);\n', '    emit Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '}\n', '\n', '\n', '  function balanceOf(address _owner) public view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '\n', 'contract ReleasableToken is ERC223Token, Ownable {\n', '\n', '  /* The finalizer contract that allows unlift the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  /**\n', '  * Limit token transfer until the crowdsale is over.\n', '  *\n', '  */\n', '  modifier canTransfer(address _sender) {\n', '\n', '    if(!released) {\n', '      require(transferAgents[_sender]);\n', '    }\n', '\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * Set the contract that can call release and make the token transferable.\n', '  *\n', '  * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '  */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '\n', "    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n", '    releaseAgent = addr;\n', '  }\n', '\n', '  /**\n', '  * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '  */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  /**\n', '  * One way function to release the tokens to the wild.\n', '  *\n', '  * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n', '  */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    released = true;\n', '  }\n', '\n', '  /** The function can be called only before or after the tokens have been releasesd */\n', '  modifier inReleaseState(bool releaseState) {\n', '    require(releaseState == released);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    require(msg.sender == releaseAgent);\n', '    _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) public canTransfer(msg.sender) returns (bool success) {\n', '    // Call StandardToken.transfer()\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transfer(address _to, uint _value, bytes _data) public canTransfer(msg.sender) returns (bool success) {\n', '    // Call StandardToken.transfer()\n', '    return super.transfer(_to, _value, _data);\n', '  }\n', '\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public canTransfer(msg.sender) returns (bool success) {\n', '    return super.transfer(_to, _value, _data, _custom_fallback);\n', '  }\n', '}\n', '\n', '\n', 'contract AMLToken is ReleasableToken {\n', '\n', '  // An event when the owner has reclaimed non-released tokens\n', '  event OwnerReclaim(address fromWhom, uint amount);\n', '\n', '  constructor(string _name, string _symbol, uint _initialSupply, uint _decimals) public {\n', '    owner = msg.sender;\n', '    name = _name;\n', '    symbol = _symbol;\n', '    totalSupply = _initialSupply;\n', '    decimals = _decimals;\n', '\n', '    balances[owner] = totalSupply;\n', '  }\n', '\n', '  /// @dev Here the owner can reclaim the tokens from a participant if\n', '  ///      the token is not released yet. Refund will be handled offband.\n', '  /// @param fromWhom address of the participant whose tokens we want to claim\n', '  function transferToOwner(address fromWhom) public onlyOwner {\n', '    if (released) revert();\n', '\n', '    uint amount = balanceOf(fromWhom);\n', '    balances[fromWhom] = balances[fromWhom].sub(amount);\n', '    balances[owner] = balances[owner].add(amount);\n', '    bytes memory empty;\n', '    emit Transfer(fromWhom, owner, amount, empty);\n', '    emit OwnerReclaim(fromWhom, amount);\n', '  }\n', '}\n', '\n', '\n', 'contract MediarToken is AMLToken {\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 420000000 * (10 ** uint256(18));\n', '\n', '  /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '  constructor() public \n', '    AMLToken("Mediar", "MDR", INITIAL_SUPPLY, 18) {\n', '  }\n', '}']