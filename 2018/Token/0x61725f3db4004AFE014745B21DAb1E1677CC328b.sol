['pragma solidity ^0.4.13;\n', '\n', 'contract Versioned {\n', '    string public version;\n', '\n', '    function Versioned(string _version) public {\n', '        version = _version;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner public {\n', '        paused = true;\n', '    }\n', '\n', '    function unpause() onlyOwner public {\n', '        paused = false;\n', '    }\n', '}\n', '\n', 'contract Extractable is Ownable {\n', '    // allow contract to receive ether\n', '    function () payable public {}\n', '\n', '    // allow to extract ether from contract\n', '    function extractEther(address withdrawalAddress) public onlyOwner {\n', '        if (this.balance > 0) {\n', '            withdrawalAddress.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    // Allow to withdraw ERC20 token from contract\n', '    function extractToken(address tokenAddress, address withdrawalAddress) public onlyOwner {\n', '        ERC20Basic tokenContract = ERC20Basic(tokenAddress);\n', '        uint256 balance = tokenContract.balanceOf(this);\n', '        if (balance > 0) {\n', '            tokenContract.transfer(withdrawalAddress, balance);\n', '        }\n', '    }\n', '}\n', '\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract FloatingSupplyToken is Ownable, StandardToken {\n', '    using SafeMath for uint256;\n', '    // create new token tranche for contract you own\n', '    // this increases total supply and credits new tokens to owner\n', '    function issueTranche(uint256 _amount) public onlyOwner returns (uint256) {\n', '        require(_amount > 0);\n', '\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[owner] = balances[owner].add(_amount);\n', '\n', '        emit Transfer(address(0), owner, _amount);\n', '        return totalSupply;\n', '    }\n', '\n', '    // destroy tokens that belongs to you\n', '    // this decreases your balance and total supply\n', '    function burn(uint256 _amount) public {\n', '        require(_amount > 0);\n', '        require(balances[msg.sender] > 0);\n', '        require(_amount <= balances[msg.sender]);\n', '\n', '        assert(_amount <= totalSupply);\n', '\n', '        totalSupply = totalSupply.sub(_amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '\n', '        emit Transfer(msg.sender, address(0), _amount);\n', '    }\n', '}\n', '\n', 'contract FundToken is StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    // Fund internal balances are held in here\n', '    mapping (address => mapping (address => uint256)) fundBalances;\n', '\n', '    // Owner of account manages funds on behalf of third parties and\n', '    // need to keep an account of what belongs to whom\n', '    mapping (address => bool) public fundManagers;\n', '\n', '    // modifiers\n', '    // only fund manager can execute that\n', '    modifier onlyFundManager() {\n', '        require(fundManagers[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    // simple balance management\n', '    // wrapper for StandardToken to control fundmanager status\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        require(!fundManagers[msg.sender]);\n', '        require(!fundManagers[_to]);\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    // events\n', '\n', '    // register address as fund address\n', '    event RegisterFund(address indexed _fundManager);\n', '\n', '    // remove address from registered funds\n', '    event DissolveFund(address indexed _fundManager);\n', '\n', '    // owner&#39;s tokens moved into the fund\n', '    event FundTransferIn(address indexed _from, address indexed _fundManager,\n', '                         address indexed _owner, uint256 _value);\n', '\n', '    // tokens moved from the fund to a regular address\n', '    event FundTransferOut(address indexed _fundManager, address indexed _from,\n', '                          address indexed _to, uint256 _value);\n', '\n', '    // tokens moved from the fund to a regular address\n', '    event FundTransferWithin(address indexed _fundManager, address indexed _from,\n', '                             address indexed _to, uint256 _value);\n', '\n', '    // fund register/dissolve\n', '    // register fund status for an address, address must be empty for that\n', '    function registerFund() public {\n', '        require(balances[msg.sender] == 0);\n', '        require(!fundManagers[msg.sender]);\n', '\n', '        fundManagers[msg.sender] = true;\n', '\n', '        emit RegisterFund(msg.sender);\n', '    }\n', '\n', '    // unregister fund status for an address, address must be empty for that\n', '    function dissolveFund() public {\n', '        require(balances[msg.sender] == 0);\n', '        require(fundManagers[msg.sender]);\n', '\n', '        delete fundManagers[msg.sender];\n', '\n', '        emit DissolveFund(msg.sender);\n', '    }\n', '\n', '\n', '    // funded balance management\n', '\n', '    // returns balance of an account inside the fund\n', '    function fundBalanceOf(address _fundManager, address _owner) public view returns (uint256) {\n', '        return fundBalances[_fundManager][_owner];\n', '    }\n', '\n', '    // Transfer the balance from simple account to account in the fund\n', '    function fundTransferIn(address _fundManager, address _to, uint256 _amount) public {\n', '        require(fundManagers[_fundManager]);\n', '        require(!fundManagers[msg.sender]);\n', '\n', '        require(balances[msg.sender] >= _amount);\n', '        require(_amount > 0);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_fundManager] = balances[_fundManager].add(_amount);\n', '        fundBalances[_fundManager][_to] = fundBalances[_fundManager][_to].add(_amount);\n', '\n', '        emit FundTransferIn(msg.sender, _fundManager, _to, _amount);\n', '        emit Transfer(msg.sender, _fundManager, _amount);\n', '    }\n', '\n', '    // Transfer the balance from account in the fund to simple account\n', '    function fundTransferOut(address _from, address _to, uint256 _amount) public {\n', '        require(!fundManagers[_to]);\n', '        require(fundManagers[msg.sender]);\n', '\n', '        require(_amount > 0);\n', '        require(balances[msg.sender] >= _amount);\n', '        require(fundBalances[msg.sender][_from] >= _amount);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        fundBalances[msg.sender][_from] = fundBalances[msg.sender][_from].sub(_amount);\n', '        \n', '        if (fundBalances[msg.sender][_from] == 0){\n', '            delete fundBalances[msg.sender][_from];\n', '        }\n', '        \n', '        emit FundTransferOut(msg.sender, _from, _to, _amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    // Transfer the balance between two accounts within the fund\n', '    function fundTransferWithin(address _from, address _to, uint256 _amount) public {\n', '        require(fundManagers[msg.sender]);\n', '\n', '        require(_amount > 0);\n', '        require(balances[msg.sender] >= _amount);\n', '        require(fundBalances[msg.sender][_from] >= _amount);\n', '\n', '        fundBalances[msg.sender][_from] = fundBalances[msg.sender][_from].sub(_amount);\n', '        fundBalances[msg.sender][_to] = fundBalances[msg.sender][_to].add(_amount);\n', '\n', '        if (fundBalances[msg.sender][_from] == 0){\n', '            delete fundBalances[msg.sender][_from];\n', '        }\n', '\n', '        emit FundTransferWithin(msg.sender, _from, _to, _amount);\n', '    }\n', '\n', '    // check fund controls before forwarding call\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value .\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(!fundManagers[msg.sender]);\n', '\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    // check fund controls before forwarding call to standard token allowance spending function\n', '    function transferFrom(address _from, address _to,\n', '                          uint256 _amount) public returns (bool success) {\n', '        require(!fundManagers[_from]);\n', '        require(!fundManagers[_to]);\n', '\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '}\n', '\n', 'contract BurnFundToken is FundToken, FloatingSupplyToken {\n', '    using SafeMath for uint256;\n', '\n', '    //events\n', '    // owner&#39;s tokens from the managed fund burned\n', '    event FundBurn(address indexed _fundManager, address indexed _owner, uint256 _value);\n', '\n', '    // destroy tokens that belongs to you\n', '    // this decreases total supply\n', '    function burn(uint256 _amount) public {\n', '        require(!fundManagers[msg.sender]);\n', '\n', '        super.burn(_amount);\n', '    }\n', '\n', '    // destroy tokens that belong to the fund you control\n', '    // this decreases that account&#39;s balance, fund balance, total supply\n', '    function fundBurn(address _fundAccount, uint256 _amount) public onlyFundManager {\n', '        require(fundManagers[msg.sender]);\n', '        require(balances[msg.sender] != 0);\n', '        require(fundBalances[msg.sender][_fundAccount] > 0);\n', '        require(_amount > 0);\n', '        require(_amount <= fundBalances[msg.sender][_fundAccount]);\n', '\n', '        assert(_amount <= totalSupply);\n', '        assert(_amount <= balances[msg.sender]);\n', '\n', '        totalSupply = totalSupply.sub(_amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        fundBalances[msg.sender][_fundAccount] = fundBalances[msg.sender][_fundAccount].sub(_amount);\n', '\n', '        emit FundBurn(msg.sender, _fundAccount, _amount);\n', '    }\n', '}\n', '\n', 'contract PausableToken is BurnFundToken, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function burn(uint256 _amount) public whenNotPaused {\n', '        return super.burn(_amount);\n', '    }\n', '\n', '    function fundBurn(address _fundAccount, uint256 _amount) public whenNotPaused {\n', '        return super.fundBurn(_fundAccount, _amount);\n', '    }\n', '\n', '    function registerFund() public whenNotPaused {\n', '        return super.registerFund();\n', '    }\n', '\n', '    function dissolveFund() public whenNotPaused {\n', '        return super.dissolveFund();\n', '    }\n', '\n', '    function fundTransferIn(address _fundManager, address _to, uint256 _amount) public whenNotPaused {\n', '        return super.fundTransferIn(_fundManager, _to, _amount);\n', '    }\n', '\n', '    function fundTransferOut(address _from, address _to, uint256 _amount) public whenNotPaused {\n', '        return super.fundTransferOut(_from, _to, _amount);\n', '    }\n', '\n', '    function fundTransferWithin(address _from, address _to, uint256 _amount) public whenNotPaused {\n', '        return super.fundTransferWithin(_from, _to, _amount);\n', '    }\n', '}\n', '\n', 'contract DAXT is PausableToken,\n', '    DetailedERC20("Digital Asset Exchange Token", "DAXT", 18),\n', '    Versioned("1.2.0"),\n', '    Destructible,\n', '    Extractable {\n', '\n', '}']