['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/SeeleToken.sol\n', '\n', '/// @title SeeleToken Contract\n', '/// For more information about this token sale, please visit https://seele.pro\n', '/// @author reedhong\n', 'contract SeeleToken is PausableToken {\n', '    using SafeMath for uint;\n', '\n', '    /// Constant token specific fields\n', '    string public constant name = "SeeleToken";\n', '    string public constant symbol = "Seele";\n', '    uint public constant decimals = 18;\n', '\n', '    /// seele total tokens supply\n', '    uint public currentSupply;\n', '\n', '    /// Fields that are only changed in constructor\n', '    /// seele sale  contract\n', '    address public minter; \n', '\n', '    /// Fields that can be changed by functions\n', '    mapping (address => uint) public lockedBalances;\n', '\n', '    /// claim flag\n', '    bool public claimedFlag;  \n', '\n', '    /*\n', '     * MODIFIERS\n', '     */\n', '    modifier onlyMinter {\n', '        require(msg.sender == minter);\n', '        _;\n', '    }\n', '\n', '    modifier canClaimed {\n', '        require(claimedFlag == true);\n', '        _;\n', '    }\n', '\n', '    modifier maxTokenAmountNotReached (uint amount){\n', '        require(currentSupply.add(amount) <= totalSupply);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress( address addr ) {\n', '        require(addr != address(0x0));\n', '        require(addr != address(this));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * CONSTRUCTOR \n', '     * \n', '     * @dev Initialize the Seele Token\n', '     * @param _minter The SeeleCrowdSale Contract \n', '     * @param _maxTotalSupply total supply token    \n', '     */\n', '    function SeeleToken(address _minter, address _admin, uint _maxTotalSupply) \n', '        public \n', '        validAddress(_admin)\n', '        validAddress(_minter)\n', '        {\n', '        minter = _minter;\n', '        totalSupply = _maxTotalSupply;\n', '        claimedFlag = false;\n', '        paused = true;\n', '        transferOwnership(_admin);\n', '    }\n', '\n', '    /**\n', '     * EXTERNAL FUNCTION \n', '     * \n', '     * @dev SeeleCrowdSale contract instance mint token\n', '     * @param receipent The destination account owned mint tokens    \n', '     * @param amount The amount of mint token\n', '     * @param isLock Lock token flag\n', '     * be sent to this address.\n', '     */\n', '\n', '    function mint(address receipent, uint amount, bool isLock)\n', '        external\n', '        onlyMinter\n', '        maxTokenAmountNotReached(amount)\n', '        returns (bool)\n', '    {\n', '        if (isLock ) {\n', '            lockedBalances[receipent] = lockedBalances[receipent].add(amount);\n', '        } else {\n', '            balances[receipent] = balances[receipent].add(amount);\n', '        }\n', '        currentSupply = currentSupply.add(amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function setClaimedFlag(bool flag) \n', '        public\n', '        onlyOwner \n', '    {\n', '        claimedFlag = flag;\n', '    }\n', '\n', '     /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    /// @dev Locking period has passed - Locked tokens have turned into tradeable\n', '    function claimTokens(address[] receipents)\n', '        external\n', '        onlyOwner\n', '        canClaimed\n', '    {        \n', '        for (uint i = 0; i < receipents.length; i++) {\n', '            address receipent = receipents[i];\n', '            balances[receipent] = balances[receipent].add(lockedBalances[receipent]);\n', '            lockedBalances[receipent] = 0;\n', '        }\n', '    }\n', '\n', '    function airdrop(address[] receipents, uint[] tokens)\n', '        external\n', '    {        \n', '        for (uint i = 0; i < receipents.length; i++) {\n', '            address receipent = receipents[i];\n', '            uint token = tokens[i];\n', '            if(balances[msg.sender] >= token ){\n', '                balances[msg.sender] = balances[msg.sender].sub(token);\n', '                balances[receipent] = balances[receipent].add(token);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/SeeleCrowdSale.sol\n', '\n', '/// @title SeeleCrowdSale Contract\n', '/// For more information about this token sale, please visit https://seele.pro\n', '/// @author reedhong\n', 'contract SeeleCrowdSale is Pausable {\n', '    using SafeMath for uint;\n', '\n', '    /// Constant fields\n', '    /// seele total tokens supply\n', '    uint public constant SEELE_TOTAL_SUPPLY = 1000000000 ether;\n', '    uint public constant MAX_SALE_DURATION = 4 days;\n', '    uint public constant STAGE_1_TIME =  6 hours;\n', '    uint public constant STAGE_2_TIME = 12 hours;\n', '    uint public constant MIN_LIMIT = 0.1 ether;\n', '    uint public constant MAX_STAGE_1_LIMIT = 1 ether;\n', '    uint public constant MAX_STAGE_2_LIMIT = 2 ether;\n', '\n', '    uint public constant STAGE_1 = 1;\n', '    uint public constant STAGE_2 = 2;\n', '    uint public constant STAGE_3 = 3;\n', '\n', '\n', '    /// Exchange rates\n', '    uint public  exchangeRate = 12500;\n', '\n', '\n', '    uint public constant MINER_STAKE = 3000;    // for minter\n', '    uint public constant OPEN_SALE_STAKE = 625; // for public\n', '    uint public constant OTHER_STAKE = 6375;    // for others\n', '\n', '    \n', '    uint public constant DIVISOR_STAKE = 10000;\n', '\n', '    // max open sale tokens\n', '    uint public constant MAX_OPEN_SOLD = SEELE_TOTAL_SUPPLY * OPEN_SALE_STAKE / DIVISOR_STAKE;\n', '    uint public constant STAKE_MULTIPLIER = SEELE_TOTAL_SUPPLY / DIVISOR_STAKE;\n', '\n', '    /// All deposited ETH will be instantly forwarded to this address.\n', '    address public wallet;\n', '    address public minerAddress;\n', '    address public otherAddress;\n', '\n', '    /// Contribution start time\n', '    uint public startTime;\n', '    /// Contribution end time\n', '    uint public endTime;\n', '\n', '    /// Fields that can be changed by functions\n', '    /// Accumulator for open sold tokens\n', '    uint public openSoldTokens;\n', '    /// ERC20 compilant seele token contact instance\n', '    SeeleToken public seeleToken; \n', '\n', '    SeeleToken public oldSeeleToken;\n', '\n', '    /// tags show address can join in open sale\n', '    mapping (address => bool) public fullWhiteList;\n', '\n', '    mapping (address => bool) public vistFlagList;\n', '\n', '    mapping (address => uint) public firstStageFund;\n', '    mapping (address => uint) public secondStageFund;\n', '\n', '    /*\n', '     * EVENTS\n', '     */\n', '    event NewSale(address indexed destAddress, uint ethCost, uint gotTokens);\n', '    event NewWallet(address onwer, address oldWallet, address newWallet);\n', '\n', '    modifier notEarlierThan(uint x) {\n', '        require(now >= x);\n', '        _;\n', '    }\n', '\n', '    modifier earlierThan(uint x) {\n', '        require(now < x);\n', '        _;\n', '    }\n', '\n', '    modifier ceilingNotReached() {\n', '        require(openSoldTokens < MAX_OPEN_SOLD);\n', '        _;\n', '    }  \n', '\n', '    modifier isSaleEnded() {\n', '        require(now > endTime || openSoldTokens >= MAX_OPEN_SOLD);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress( address addr ) {\n', '        require(addr != address(0x0));\n', '        require(addr != address(this));\n', '        _;\n', '    }\n', '\n', '    function SeeleCrowdSale (\n', '        address _wallet, \n', '        address _minerAddress,\n', '        address _otherAddress\n', '        ) public \n', '        validAddress(_wallet) \n', '        validAddress(_minerAddress) \n', '        validAddress(_otherAddress) \n', '        {\n', '        paused = true;  \n', '        wallet = _wallet;\n', '        minerAddress = _minerAddress;\n', '        otherAddress = _otherAddress;     \n', '\n', '        openSoldTokens = 0;\n', '        /// Create seele token contract instance\n', '        seeleToken = new SeeleToken(this, msg.sender, SEELE_TOTAL_SUPPLY);\n', '\n', '        seeleToken.mint(minerAddress, MINER_STAKE * STAKE_MULTIPLIER, false);\n', '        seeleToken.mint(otherAddress, OTHER_STAKE * STAKE_MULTIPLIER, false);\n', '    }\n', '\n', '    function setOldSeelToken(address addr)\n', '        public\n', '        onlyOwner\n', '    {\n', '        oldSeeleToken = SeeleToken(addr);\n', '    }\n', '\n', '    function setExchangeRate(uint256 rate)\n', '        public\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        exchangeRate = rate;\n', '    }\n', '\n', '    function setStartTime(uint _startTime )\n', '        public\n', '        onlyOwner\n', '    {\n', '        startTime = _startTime;\n', '        endTime = startTime + MAX_SALE_DURATION;\n', '    }\n', '\n', '    /// @dev batch set quota for user admin\n', '    /// if openTag <=0, removed \n', '    function setWhiteList(address[] users, bool openTag)\n', '        external\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        require(saleNotEnd());\n', '        for (uint i = 0; i < users.length; i++) {\n', '            address receipient = users[i];\n', '            bool visitFlag = vistFlagList[receipient];\n', '            if( openTag == true && visitFlag == false){\n', '                uint token = oldSeeleToken.lockedBalances(receipient);\n', '                if( token > 0){\n', '                    seeleToken.mint(receipient, token,true);\n', '                    openSoldTokens = openSoldTokens.add(token);\n', '                }\n', '                vistFlagList[receipient] = true;\n', '            }\n', '            fullWhiteList[receipient] = openTag;\n', '        }\n', '    }\n', '\n', '\n', '    /// @dev batch set quota for early user quota\n', '    /// if openTag <=0, removed \n', '    function addWhiteList(address user, bool openTag)\n', '        external\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        require(saleNotEnd());\n', '        fullWhiteList[user] = openTag;\n', '\n', '    }\n', '\n', '    /// @dev Emergency situation\n', '    function setWallet(address newAddress)  external onlyOwner { \n', '        NewWallet(owner, wallet, newAddress);\n', '        wallet = newAddress; \n', '    }\n', '\n', '    /// @return true if sale not ended, false otherwise.\n', '    function saleNotEnd() constant internal returns (bool) {\n', '        return now < endTime && openSoldTokens < MAX_OPEN_SOLD;\n', '    }\n', '\n', '    /**\n', '     * Fallback function \n', '     * \n', '     * @dev If anybody sends Ether directly to this  contract, consider he is getting seele token\n', '     */\n', '    function () public payable {\n', '        buySeele(msg.sender);\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '    /// @dev Exchange msg.value ether to Seele for account recepient\n', '    /// @param receipient Seele tokens receiver\n', '    function buySeele(address receipient) \n', '        internal \n', '        whenNotPaused  \n', '        ceilingNotReached \n', '        notEarlierThan(startTime)\n', '        earlierThan(endTime)\n', '        validAddress(receipient)\n', '        returns (bool) \n', '    {\n', '        // Do not allow contracts to game the system\n', '        require(!isContract(msg.sender));    \n', '        require(tx.gasprice <= 100000000000 wei);\n', '        require(msg.value >= MIN_LIMIT);\n', '\n', '        bool inWhiteListTag = fullWhiteList[receipient];       \n', '        require(inWhiteListTag == true);\n', '\n', '        uint stage = STAGE_3;\n', '        if ( startTime <= now && now < startTime + STAGE_1_TIME ) {\n', '            stage = STAGE_1;\n', '            require(msg.value <= MAX_STAGE_1_LIMIT);\n', '            uint fund1 = firstStageFund[receipient];\n', '            require (fund1 < MAX_STAGE_1_LIMIT );\n', '        }else if ( startTime + STAGE_1_TIME <= now && now < startTime + STAGE_2_TIME ) {\n', '            stage = STAGE_2;\n', '            require(msg.value <= MAX_STAGE_2_LIMIT);\n', '            uint fund2 = secondStageFund[receipient];\n', '            require (fund2 < MAX_STAGE_2_LIMIT );\n', '        }\n', '\n', '        doBuy(receipient, stage);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @dev Buy seele token normally\n', '    function doBuy(address receipient, uint stage) internal {\n', '        // protect partner quota in stage one\n', '        uint value = msg.value;\n', '\n', '        if ( stage == STAGE_1 ) {\n', '            uint fund1 = firstStageFund[receipient];\n', '            fund1 = fund1.add(value);\n', '            if (fund1 > MAX_STAGE_1_LIMIT ) {\n', '                uint refund1 = fund1.sub(MAX_STAGE_1_LIMIT);\n', '                value = value.sub(refund1);\n', '                msg.sender.transfer(refund1);\n', '            }\n', '        }else if ( stage == STAGE_2 ) {\n', '            uint fund2 = secondStageFund[receipient];\n', '            fund2 = fund2.add(value);\n', '            if (fund2 > MAX_STAGE_2_LIMIT) {\n', '                uint refund2 = fund2.sub(MAX_STAGE_2_LIMIT);\n', '                value = value.sub(refund2);\n', '                msg.sender.transfer(refund2);\n', '            }            \n', '        }\n', '\n', '        uint tokenAvailable = MAX_OPEN_SOLD.sub(openSoldTokens);\n', '        require(tokenAvailable > 0);\n', '        uint toFund;\n', '        uint toCollect;\n', '        (toFund, toCollect) = costAndBuyTokens(tokenAvailable, value);\n', '        if (toFund > 0) {\n', '            require(seeleToken.mint(receipient, toCollect,true));         \n', '            wallet.transfer(toFund);\n', '            openSoldTokens = openSoldTokens.add(toCollect);\n', '            NewSale(receipient, toFund, toCollect);             \n', '        }\n', '\n', '        // not enough token sale, just return eth\n', '        uint toReturn = value.sub(toFund);\n', '        if (toReturn > 0) {\n', '            msg.sender.transfer(toReturn);\n', '        }\n', '\n', '        if ( stage == STAGE_1 ) {\n', '            firstStageFund[receipient] = firstStageFund[receipient].add(toFund);\n', '        }else if ( stage == STAGE_2 ) {\n', '            secondStageFund[receipient] = secondStageFund[receipient].add(toFund);          \n', '        }\n', '    }\n', '\n', '    /// @dev Utility function for calculate available tokens and cost ethers\n', '    function costAndBuyTokens(uint availableToken, uint value) constant internal returns (uint costValue, uint getTokens) {\n', '        // all conditions has checked in the caller functions\n', '        getTokens = exchangeRate * value;\n', '\n', '        if (availableToken >= getTokens) {\n', '            costValue = value;\n', '        } else {\n', '            costValue = availableToken / exchangeRate;\n', '            getTokens = availableToken;\n', '        }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) {\n', '            return false;\n', '        }\n', '\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/SeeleToken.sol\n', '\n', '/// @title SeeleToken Contract\n', '/// For more information about this token sale, please visit https://seele.pro\n', '/// @author reedhong\n', 'contract SeeleToken is PausableToken {\n', '    using SafeMath for uint;\n', '\n', '    /// Constant token specific fields\n', '    string public constant name = "SeeleToken";\n', '    string public constant symbol = "Seele";\n', '    uint public constant decimals = 18;\n', '\n', '    /// seele total tokens supply\n', '    uint public currentSupply;\n', '\n', '    /// Fields that are only changed in constructor\n', '    /// seele sale  contract\n', '    address public minter; \n', '\n', '    /// Fields that can be changed by functions\n', '    mapping (address => uint) public lockedBalances;\n', '\n', '    /// claim flag\n', '    bool public claimedFlag;  \n', '\n', '    /*\n', '     * MODIFIERS\n', '     */\n', '    modifier onlyMinter {\n', '        require(msg.sender == minter);\n', '        _;\n', '    }\n', '\n', '    modifier canClaimed {\n', '        require(claimedFlag == true);\n', '        _;\n', '    }\n', '\n', '    modifier maxTokenAmountNotReached (uint amount){\n', '        require(currentSupply.add(amount) <= totalSupply);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress( address addr ) {\n', '        require(addr != address(0x0));\n', '        require(addr != address(this));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * CONSTRUCTOR \n', '     * \n', '     * @dev Initialize the Seele Token\n', '     * @param _minter The SeeleCrowdSale Contract \n', '     * @param _maxTotalSupply total supply token    \n', '     */\n', '    function SeeleToken(address _minter, address _admin, uint _maxTotalSupply) \n', '        public \n', '        validAddress(_admin)\n', '        validAddress(_minter)\n', '        {\n', '        minter = _minter;\n', '        totalSupply = _maxTotalSupply;\n', '        claimedFlag = false;\n', '        paused = true;\n', '        transferOwnership(_admin);\n', '    }\n', '\n', '    /**\n', '     * EXTERNAL FUNCTION \n', '     * \n', '     * @dev SeeleCrowdSale contract instance mint token\n', '     * @param receipent The destination account owned mint tokens    \n', '     * @param amount The amount of mint token\n', '     * @param isLock Lock token flag\n', '     * be sent to this address.\n', '     */\n', '\n', '    function mint(address receipent, uint amount, bool isLock)\n', '        external\n', '        onlyMinter\n', '        maxTokenAmountNotReached(amount)\n', '        returns (bool)\n', '    {\n', '        if (isLock ) {\n', '            lockedBalances[receipent] = lockedBalances[receipent].add(amount);\n', '        } else {\n', '            balances[receipent] = balances[receipent].add(amount);\n', '        }\n', '        currentSupply = currentSupply.add(amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function setClaimedFlag(bool flag) \n', '        public\n', '        onlyOwner \n', '    {\n', '        claimedFlag = flag;\n', '    }\n', '\n', '     /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    /// @dev Locking period has passed - Locked tokens have turned into tradeable\n', '    function claimTokens(address[] receipents)\n', '        external\n', '        onlyOwner\n', '        canClaimed\n', '    {        \n', '        for (uint i = 0; i < receipents.length; i++) {\n', '            address receipent = receipents[i];\n', '            balances[receipent] = balances[receipent].add(lockedBalances[receipent]);\n', '            lockedBalances[receipent] = 0;\n', '        }\n', '    }\n', '\n', '    function airdrop(address[] receipents, uint[] tokens)\n', '        external\n', '    {        \n', '        for (uint i = 0; i < receipents.length; i++) {\n', '            address receipent = receipents[i];\n', '            uint token = tokens[i];\n', '            if(balances[msg.sender] >= token ){\n', '                balances[msg.sender] = balances[msg.sender].sub(token);\n', '                balances[receipent] = balances[receipent].add(token);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/SeeleCrowdSale.sol\n', '\n', '/// @title SeeleCrowdSale Contract\n', '/// For more information about this token sale, please visit https://seele.pro\n', '/// @author reedhong\n', 'contract SeeleCrowdSale is Pausable {\n', '    using SafeMath for uint;\n', '\n', '    /// Constant fields\n', '    /// seele total tokens supply\n', '    uint public constant SEELE_TOTAL_SUPPLY = 1000000000 ether;\n', '    uint public constant MAX_SALE_DURATION = 4 days;\n', '    uint public constant STAGE_1_TIME =  6 hours;\n', '    uint public constant STAGE_2_TIME = 12 hours;\n', '    uint public constant MIN_LIMIT = 0.1 ether;\n', '    uint public constant MAX_STAGE_1_LIMIT = 1 ether;\n', '    uint public constant MAX_STAGE_2_LIMIT = 2 ether;\n', '\n', '    uint public constant STAGE_1 = 1;\n', '    uint public constant STAGE_2 = 2;\n', '    uint public constant STAGE_3 = 3;\n', '\n', '\n', '    /// Exchange rates\n', '    uint public  exchangeRate = 12500;\n', '\n', '\n', '    uint public constant MINER_STAKE = 3000;    // for minter\n', '    uint public constant OPEN_SALE_STAKE = 625; // for public\n', '    uint public constant OTHER_STAKE = 6375;    // for others\n', '\n', '    \n', '    uint public constant DIVISOR_STAKE = 10000;\n', '\n', '    // max open sale tokens\n', '    uint public constant MAX_OPEN_SOLD = SEELE_TOTAL_SUPPLY * OPEN_SALE_STAKE / DIVISOR_STAKE;\n', '    uint public constant STAKE_MULTIPLIER = SEELE_TOTAL_SUPPLY / DIVISOR_STAKE;\n', '\n', '    /// All deposited ETH will be instantly forwarded to this address.\n', '    address public wallet;\n', '    address public minerAddress;\n', '    address public otherAddress;\n', '\n', '    /// Contribution start time\n', '    uint public startTime;\n', '    /// Contribution end time\n', '    uint public endTime;\n', '\n', '    /// Fields that can be changed by functions\n', '    /// Accumulator for open sold tokens\n', '    uint public openSoldTokens;\n', '    /// ERC20 compilant seele token contact instance\n', '    SeeleToken public seeleToken; \n', '\n', '    SeeleToken public oldSeeleToken;\n', '\n', '    /// tags show address can join in open sale\n', '    mapping (address => bool) public fullWhiteList;\n', '\n', '    mapping (address => bool) public vistFlagList;\n', '\n', '    mapping (address => uint) public firstStageFund;\n', '    mapping (address => uint) public secondStageFund;\n', '\n', '    /*\n', '     * EVENTS\n', '     */\n', '    event NewSale(address indexed destAddress, uint ethCost, uint gotTokens);\n', '    event NewWallet(address onwer, address oldWallet, address newWallet);\n', '\n', '    modifier notEarlierThan(uint x) {\n', '        require(now >= x);\n', '        _;\n', '    }\n', '\n', '    modifier earlierThan(uint x) {\n', '        require(now < x);\n', '        _;\n', '    }\n', '\n', '    modifier ceilingNotReached() {\n', '        require(openSoldTokens < MAX_OPEN_SOLD);\n', '        _;\n', '    }  \n', '\n', '    modifier isSaleEnded() {\n', '        require(now > endTime || openSoldTokens >= MAX_OPEN_SOLD);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress( address addr ) {\n', '        require(addr != address(0x0));\n', '        require(addr != address(this));\n', '        _;\n', '    }\n', '\n', '    function SeeleCrowdSale (\n', '        address _wallet, \n', '        address _minerAddress,\n', '        address _otherAddress\n', '        ) public \n', '        validAddress(_wallet) \n', '        validAddress(_minerAddress) \n', '        validAddress(_otherAddress) \n', '        {\n', '        paused = true;  \n', '        wallet = _wallet;\n', '        minerAddress = _minerAddress;\n', '        otherAddress = _otherAddress;     \n', '\n', '        openSoldTokens = 0;\n', '        /// Create seele token contract instance\n', '        seeleToken = new SeeleToken(this, msg.sender, SEELE_TOTAL_SUPPLY);\n', '\n', '        seeleToken.mint(minerAddress, MINER_STAKE * STAKE_MULTIPLIER, false);\n', '        seeleToken.mint(otherAddress, OTHER_STAKE * STAKE_MULTIPLIER, false);\n', '    }\n', '\n', '    function setOldSeelToken(address addr)\n', '        public\n', '        onlyOwner\n', '    {\n', '        oldSeeleToken = SeeleToken(addr);\n', '    }\n', '\n', '    function setExchangeRate(uint256 rate)\n', '        public\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        exchangeRate = rate;\n', '    }\n', '\n', '    function setStartTime(uint _startTime )\n', '        public\n', '        onlyOwner\n', '    {\n', '        startTime = _startTime;\n', '        endTime = startTime + MAX_SALE_DURATION;\n', '    }\n', '\n', '    /// @dev batch set quota for user admin\n', '    /// if openTag <=0, removed \n', '    function setWhiteList(address[] users, bool openTag)\n', '        external\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        require(saleNotEnd());\n', '        for (uint i = 0; i < users.length; i++) {\n', '            address receipient = users[i];\n', '            bool visitFlag = vistFlagList[receipient];\n', '            if( openTag == true && visitFlag == false){\n', '                uint token = oldSeeleToken.lockedBalances(receipient);\n', '                if( token > 0){\n', '                    seeleToken.mint(receipient, token,true);\n', '                    openSoldTokens = openSoldTokens.add(token);\n', '                }\n', '                vistFlagList[receipient] = true;\n', '            }\n', '            fullWhiteList[receipient] = openTag;\n', '        }\n', '    }\n', '\n', '\n', '    /// @dev batch set quota for early user quota\n', '    /// if openTag <=0, removed \n', '    function addWhiteList(address user, bool openTag)\n', '        external\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        require(saleNotEnd());\n', '        fullWhiteList[user] = openTag;\n', '\n', '    }\n', '\n', '    /// @dev Emergency situation\n', '    function setWallet(address newAddress)  external onlyOwner { \n', '        NewWallet(owner, wallet, newAddress);\n', '        wallet = newAddress; \n', '    }\n', '\n', '    /// @return true if sale not ended, false otherwise.\n', '    function saleNotEnd() constant internal returns (bool) {\n', '        return now < endTime && openSoldTokens < MAX_OPEN_SOLD;\n', '    }\n', '\n', '    /**\n', '     * Fallback function \n', '     * \n', '     * @dev If anybody sends Ether directly to this  contract, consider he is getting seele token\n', '     */\n', '    function () public payable {\n', '        buySeele(msg.sender);\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '    /// @dev Exchange msg.value ether to Seele for account recepient\n', '    /// @param receipient Seele tokens receiver\n', '    function buySeele(address receipient) \n', '        internal \n', '        whenNotPaused  \n', '        ceilingNotReached \n', '        notEarlierThan(startTime)\n', '        earlierThan(endTime)\n', '        validAddress(receipient)\n', '        returns (bool) \n', '    {\n', '        // Do not allow contracts to game the system\n', '        require(!isContract(msg.sender));    \n', '        require(tx.gasprice <= 100000000000 wei);\n', '        require(msg.value >= MIN_LIMIT);\n', '\n', '        bool inWhiteListTag = fullWhiteList[receipient];       \n', '        require(inWhiteListTag == true);\n', '\n', '        uint stage = STAGE_3;\n', '        if ( startTime <= now && now < startTime + STAGE_1_TIME ) {\n', '            stage = STAGE_1;\n', '            require(msg.value <= MAX_STAGE_1_LIMIT);\n', '            uint fund1 = firstStageFund[receipient];\n', '            require (fund1 < MAX_STAGE_1_LIMIT );\n', '        }else if ( startTime + STAGE_1_TIME <= now && now < startTime + STAGE_2_TIME ) {\n', '            stage = STAGE_2;\n', '            require(msg.value <= MAX_STAGE_2_LIMIT);\n', '            uint fund2 = secondStageFund[receipient];\n', '            require (fund2 < MAX_STAGE_2_LIMIT );\n', '        }\n', '\n', '        doBuy(receipient, stage);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @dev Buy seele token normally\n', '    function doBuy(address receipient, uint stage) internal {\n', '        // protect partner quota in stage one\n', '        uint value = msg.value;\n', '\n', '        if ( stage == STAGE_1 ) {\n', '            uint fund1 = firstStageFund[receipient];\n', '            fund1 = fund1.add(value);\n', '            if (fund1 > MAX_STAGE_1_LIMIT ) {\n', '                uint refund1 = fund1.sub(MAX_STAGE_1_LIMIT);\n', '                value = value.sub(refund1);\n', '                msg.sender.transfer(refund1);\n', '            }\n', '        }else if ( stage == STAGE_2 ) {\n', '            uint fund2 = secondStageFund[receipient];\n', '            fund2 = fund2.add(value);\n', '            if (fund2 > MAX_STAGE_2_LIMIT) {\n', '                uint refund2 = fund2.sub(MAX_STAGE_2_LIMIT);\n', '                value = value.sub(refund2);\n', '                msg.sender.transfer(refund2);\n', '            }            \n', '        }\n', '\n', '        uint tokenAvailable = MAX_OPEN_SOLD.sub(openSoldTokens);\n', '        require(tokenAvailable > 0);\n', '        uint toFund;\n', '        uint toCollect;\n', '        (toFund, toCollect) = costAndBuyTokens(tokenAvailable, value);\n', '        if (toFund > 0) {\n', '            require(seeleToken.mint(receipient, toCollect,true));         \n', '            wallet.transfer(toFund);\n', '            openSoldTokens = openSoldTokens.add(toCollect);\n', '            NewSale(receipient, toFund, toCollect);             \n', '        }\n', '\n', '        // not enough token sale, just return eth\n', '        uint toReturn = value.sub(toFund);\n', '        if (toReturn > 0) {\n', '            msg.sender.transfer(toReturn);\n', '        }\n', '\n', '        if ( stage == STAGE_1 ) {\n', '            firstStageFund[receipient] = firstStageFund[receipient].add(toFund);\n', '        }else if ( stage == STAGE_2 ) {\n', '            secondStageFund[receipient] = secondStageFund[receipient].add(toFund);          \n', '        }\n', '    }\n', '\n', '    /// @dev Utility function for calculate available tokens and cost ethers\n', '    function costAndBuyTokens(uint availableToken, uint value) constant internal returns (uint costValue, uint getTokens) {\n', '        // all conditions has checked in the caller functions\n', '        getTokens = exchangeRate * value;\n', '\n', '        if (availableToken >= getTokens) {\n', '            costValue = value;\n', '        } else {\n', '            costValue = availableToken / exchangeRate;\n', '            getTokens = availableToken;\n', '        }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) {\n', '            return false;\n', '        }\n', '\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '}']
