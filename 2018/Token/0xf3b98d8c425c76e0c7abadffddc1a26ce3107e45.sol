['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) canMint internal returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() canMint internal returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract MTF is MintableToken, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    //The name of the  token\n', '    string public constant name = "MintFlint Token";\n', '    //The token symbol\n', '    string public constant symbol = "MTF";\n', '    //The precision used in the balance calculations in contract\n', '    uint8 public constant decimals = 18;\n', '\n', '    //maximum cap to be sold on ICO\n', '    uint256 public constant maxCap = 1500000000e18;\n', '    //to save total number of ethers received\n', '    uint256 public totalWeiReceived;\n', '\n', '    //time when the sale starts\n', '    uint256 public startTime;\n', '    //time when the presale ends\n', '    uint256 public endTime;\n', '    //to check the sale status\n', '    bool public paused;\n', '\n', '    //events\n', '    event StateChanged(bool);\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function MTF(uint256 _startTime, uint256 _endTime) public {\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        paused = false;\n', '        totalSupply_ = 0;\n', '    }\n', '\n', '    modifier whenSaleEnded() {\n', '        require(now >= endTime);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev to determine the timeframe of sale\n', '     */\n', '    modifier validTimeframe() {\n', '        require(!paused && now >=startTime && now < endTime);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allocate tokens to team members\n', '     */\n', '    function teamAllocation(address _airdropAddress) public onlyOwner whenSaleEnded {\n', '        uint256 toDistribute = totalSupply_.mul(2);\n', '        // Receiver1 3.0%\n', '        uint256 part1 = toDistribute.mul(3).div(400);\n', '        mint(0x1117Db9F1bf18C91233Bff3BF2676137709463B3, part1);\n', '        mint(0x6C137b489cEE58C32fd8Aec66EAdC4B959550198, part1);\n', '        mint(0x450023b2D943498949f0A9cdb1DbBd827844EE78, part1);\n', '        mint(0x89080db76A555c42D7b43556E40AcaAFeB786CDD, part1);\n', '\n', '        // Receiver2 19.5%\n', '        uint256 part2 = toDistribute.mul(195).div(4000);\n', '        mint(0xcFc43257606C6a642d9438dCd82bf5b39A17dbAB, part2);\n', '        mint(0x4a8C5Ea0619c40070f288c8aC289ef2f6Bb87cff, part2);\n', '        mint(0x947251376EeAFb0B0CD1bD47cC6056A5162bEaF4, part2);\n', '        mint(0x39A49403eFB1e85F835A9e5dc82706B970D112e4, part2);\n', '\n', '        // Receiver3 2.0% 0x733bc7201261aC3c9508D20a811D99179304240a\n', '        mint(0x733bc7201261aC3c9508D20a811D99179304240a, toDistribute.mul(2).div(100));\n', '\n', '        // Receiver4 18.0% 0x4b6716bd349dC65d07152844ed4990C2077cF1a7\n', '        mint(0x4b6716bd349dC65d07152844ed4990C2077cF1a7, toDistribute.mul(18).div(100));\n', '\n', '        // Receiver5 6% 0xEf628A29668C00d5C7C4D915F07188dC96cF24eb\n', '        uint256 part5 = toDistribute.mul(6).div(400);\n', '        mint(0xEf628A29668C00d5C7C4D915F07188dC96cF24eb, part5);\n', '        mint(0xF28a5e85316E0C950f8703e2d99F15A7c077014c, part5);\n', '        mint(0x0c8C9Dcfa4ed27e02349D536fE30957a32b44a04, part5);\n', '        mint(0x0A86174f18D145D3850501e2f4C160519207B829, part5);\n', '\n', '        // Receiver6 1.50%\n', '        // 0.75% in 0x35eeb3216E2Ff669F2c1Ff90A08A22F60e6c5728 and\n', '        // 0.75% in 0x28dcC9Af670252A5f76296207cfcC29B4E3C68D5\n', '        mint(0x35eeb3216E2Ff669F2c1Ff90A08A22F60e6c5728, toDistribute.mul(75).div(10000));\n', '        mint(0x28dcC9Af670252A5f76296207cfcC29B4E3C68D5, toDistribute.mul(75).div(10000));\n', '\n', '        mint(_airdropAddress, 175000000 ether);\n', '\n', '        finishMinting();\n', '    }\n', '\n', '    function transfer(address _to, uint _value) whenSaleEnded public returns(bool _success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) whenSaleEnded public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate number of tokens that will be received in one ether\n', '    *\n', '    */\n', '    function getPrice() public pure returns(uint256) {\n', '        return 100000;\n', '    }\n', '\n', '    /**\n', '    * @dev to enable pause sale for break in ICO and Pre-ICO\n', '    *\n', '    */\n', '    function pauseSale() public onlyOwner {\n', '        require(!paused);\n', '        paused = true;\n', '    }\n', '\n', '    /**\n', '    * @dev to resume paused sale\n', '    *\n', '    */\n', '    function resumeSale() public onlyOwner {\n', '        require(paused);\n', '        paused = false;\n', '    }\n', '\n', '    function buyTokens(address beneficiary) internal validTimeframe {\n', '        uint256 tokensBought = msg.value.mul(getPrice());\n', '        totalWeiReceived = totalWeiReceived.add(msg.value);\n', '        emit TokenPurchase(beneficiary, msg.value, tokensBought);\n', '        mint(beneficiary, tokensBought);\n', '        require(totalSupply_ <= maxCap);\n', '    }\n', '\n', '    function () public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Failsafe drain.\n', '    */\n', '    function drain() public onlyOwner whenSaleEnded {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) canMint internal returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() canMint internal returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract MTF is MintableToken, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    //The name of the  token\n', '    string public constant name = "MintFlint Token";\n', '    //The token symbol\n', '    string public constant symbol = "MTF";\n', '    //The precision used in the balance calculations in contract\n', '    uint8 public constant decimals = 18;\n', '\n', '    //maximum cap to be sold on ICO\n', '    uint256 public constant maxCap = 1500000000e18;\n', '    //to save total number of ethers received\n', '    uint256 public totalWeiReceived;\n', '\n', '    //time when the sale starts\n', '    uint256 public startTime;\n', '    //time when the presale ends\n', '    uint256 public endTime;\n', '    //to check the sale status\n', '    bool public paused;\n', '\n', '    //events\n', '    event StateChanged(bool);\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function MTF(uint256 _startTime, uint256 _endTime) public {\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        paused = false;\n', '        totalSupply_ = 0;\n', '    }\n', '\n', '    modifier whenSaleEnded() {\n', '        require(now >= endTime);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev to determine the timeframe of sale\n', '     */\n', '    modifier validTimeframe() {\n', '        require(!paused && now >=startTime && now < endTime);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allocate tokens to team members\n', '     */\n', '    function teamAllocation(address _airdropAddress) public onlyOwner whenSaleEnded {\n', '        uint256 toDistribute = totalSupply_.mul(2);\n', '        // Receiver1 3.0%\n', '        uint256 part1 = toDistribute.mul(3).div(400);\n', '        mint(0x1117Db9F1bf18C91233Bff3BF2676137709463B3, part1);\n', '        mint(0x6C137b489cEE58C32fd8Aec66EAdC4B959550198, part1);\n', '        mint(0x450023b2D943498949f0A9cdb1DbBd827844EE78, part1);\n', '        mint(0x89080db76A555c42D7b43556E40AcaAFeB786CDD, part1);\n', '\n', '        // Receiver2 19.5%\n', '        uint256 part2 = toDistribute.mul(195).div(4000);\n', '        mint(0xcFc43257606C6a642d9438dCd82bf5b39A17dbAB, part2);\n', '        mint(0x4a8C5Ea0619c40070f288c8aC289ef2f6Bb87cff, part2);\n', '        mint(0x947251376EeAFb0B0CD1bD47cC6056A5162bEaF4, part2);\n', '        mint(0x39A49403eFB1e85F835A9e5dc82706B970D112e4, part2);\n', '\n', '        // Receiver3 2.0% 0x733bc7201261aC3c9508D20a811D99179304240a\n', '        mint(0x733bc7201261aC3c9508D20a811D99179304240a, toDistribute.mul(2).div(100));\n', '\n', '        // Receiver4 18.0% 0x4b6716bd349dC65d07152844ed4990C2077cF1a7\n', '        mint(0x4b6716bd349dC65d07152844ed4990C2077cF1a7, toDistribute.mul(18).div(100));\n', '\n', '        // Receiver5 6% 0xEf628A29668C00d5C7C4D915F07188dC96cF24eb\n', '        uint256 part5 = toDistribute.mul(6).div(400);\n', '        mint(0xEf628A29668C00d5C7C4D915F07188dC96cF24eb, part5);\n', '        mint(0xF28a5e85316E0C950f8703e2d99F15A7c077014c, part5);\n', '        mint(0x0c8C9Dcfa4ed27e02349D536fE30957a32b44a04, part5);\n', '        mint(0x0A86174f18D145D3850501e2f4C160519207B829, part5);\n', '\n', '        // Receiver6 1.50%\n', '        // 0.75% in 0x35eeb3216E2Ff669F2c1Ff90A08A22F60e6c5728 and\n', '        // 0.75% in 0x28dcC9Af670252A5f76296207cfcC29B4E3C68D5\n', '        mint(0x35eeb3216E2Ff669F2c1Ff90A08A22F60e6c5728, toDistribute.mul(75).div(10000));\n', '        mint(0x28dcC9Af670252A5f76296207cfcC29B4E3C68D5, toDistribute.mul(75).div(10000));\n', '\n', '        mint(_airdropAddress, 175000000 ether);\n', '\n', '        finishMinting();\n', '    }\n', '\n', '    function transfer(address _to, uint _value) whenSaleEnded public returns(bool _success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) whenSaleEnded public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate number of tokens that will be received in one ether\n', '    *\n', '    */\n', '    function getPrice() public pure returns(uint256) {\n', '        return 100000;\n', '    }\n', '\n', '    /**\n', '    * @dev to enable pause sale for break in ICO and Pre-ICO\n', '    *\n', '    */\n', '    function pauseSale() public onlyOwner {\n', '        require(!paused);\n', '        paused = true;\n', '    }\n', '\n', '    /**\n', '    * @dev to resume paused sale\n', '    *\n', '    */\n', '    function resumeSale() public onlyOwner {\n', '        require(paused);\n', '        paused = false;\n', '    }\n', '\n', '    function buyTokens(address beneficiary) internal validTimeframe {\n', '        uint256 tokensBought = msg.value.mul(getPrice());\n', '        totalWeiReceived = totalWeiReceived.add(msg.value);\n', '        emit TokenPurchase(beneficiary, msg.value, tokensBought);\n', '        mint(beneficiary, tokensBought);\n', '        require(totalSupply_ <= maxCap);\n', '    }\n', '\n', '    function () public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Failsafe drain.\n', '    */\n', '    function drain() public onlyOwner whenSaleEnded {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}']
