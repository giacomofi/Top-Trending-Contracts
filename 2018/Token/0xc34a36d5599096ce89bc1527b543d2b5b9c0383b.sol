['// File: contracts/GodMode.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/// @title God Mode\n', '/// @author Anthony Burzillo <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f89a8d8a82b89a8d8a82969d8b8cd69b9795">[email&#160;protected]</a>>\n', '/// @dev This contract provides a basic interface for God\n', '///  in a contract as well as the ability for God to pause\n', '///  the contract\n', 'contract GodMode {\n', '    /// @dev Is the contract paused?\n', '    bool public isPaused;\n', '\n', '    /// @dev God&#39;s address\n', '    address public god;\n', '\n', '    /// @dev Only God can run this function\n', '    modifier onlyGod()\n', '    {\n', '        require(god == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// @dev This function can only be run while the contract\n', '    ///  is not paused\n', '    modifier notPaused()\n', '    {\n', '        require(!isPaused);\n', '        _;\n', '    }\n', '\n', '    /// @dev This event is fired when the contract is paused\n', '    event GodPaused();\n', '\n', '    /// @dev This event is fired when the contract is unpaused\n', '    event GodUnpaused();\n', '\n', '    constructor() public\n', '    {\n', '        // Make the creator of the contract God\n', '        god = msg.sender;\n', '    }\n', '\n', '    /// @dev God can change the address of God\n', '    /// @param _newGod The new address for God\n', '    function godChangeGod(address _newGod) public onlyGod\n', '    {\n', '        god = _newGod;\n', '    }\n', '\n', '    /// @dev God can pause the game\n', '    function godPause() public onlyGod\n', '    {\n', '        isPaused = true;\n', '\n', '        emit GodPaused();\n', '    }\n', '\n', '    /// @dev God can unpause the game\n', '    function godUnpause() public onlyGod\n', '    {\n', '        isPaused = false;\n', '\n', '        emit GodUnpaused();\n', '    }\n', '}\n', '\n', '// File: contracts/KingOfEthResourcesInterfaceReferencer.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/// @title King of Eth: Resources Interface Referencer\n', '/// @author Anthony Burzillo <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ef8d9a9d95af8d9a9d95818a9c9bc18c8082">[email&#160;protected]</a>>\n', '/// @dev Provides functionality to reference the resource interface contract\n', 'contract KingOfEthResourcesInterfaceReferencer is GodMode {\n', '    /// @dev The interface contract&#39;s address\n', '    address public interfaceContract;\n', '\n', '    /// @dev Only the interface contract can run this function\n', '    modifier onlyInterfaceContract()\n', '    {\n', '        require(interfaceContract == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// @dev God can set the realty contract\n', '    /// @param _interfaceContract The new address\n', '    function godSetInterfaceContract(address _interfaceContract)\n', '        public\n', '        onlyGod\n', '    {\n', '        interfaceContract = _interfaceContract;\n', '    }\n', '}\n', '\n', '// File: contracts/KingOfEthResource.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/// @title ERC20Interface\n', '/// @dev ERC20 token interface contract\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns(uint);\n', '    function balanceOf(address _tokenOwner) public constant returns(uint balance);\n', '    function allowance(address _tokenOwner, address _spender) public constant returns(uint remaining);\n', '    function transfer(address _to, uint _tokens) public returns(bool success);\n', '    function approve(address _spender, uint _tokens) public returns(bool success);\n', '    function transferFrom(address _from, address _to, uint _tokens) public returns(bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/// @title King of Eth: Resource\n', '/// @author Anthony Burzillo <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bbd9cec9c1fbd9cec9c1d5dec8cf95d8d4d6">[email&#160;protected]</a>>\n', '/// @dev Common contract implementation for resources\n', 'contract KingOfEthResource is\n', '      ERC20Interface\n', '    , GodMode\n', '    , KingOfEthResourcesInterfaceReferencer\n', '{\n', '    /// @dev Current resource supply\n', '    uint public resourceSupply;\n', '\n', '    /// @dev ERC20 token&#39;s decimals\n', '    uint8 public constant decimals = 0;\n', '\n', '    /// @dev mapping of addresses to holdings\n', '    mapping (address => uint) holdings;\n', '\n', '    /// @dev mapping of addresses to amount of tokens frozen\n', '    mapping (address => uint) frozenHoldings;\n', '\n', '    /// @dev mapping of addresses to mapping of allowances for an address\n', '    mapping (address => mapping (address => uint)) allowances;\n', '\n', '    /// @dev ERC20 total supply\n', '    /// @return The current total supply of the resource\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns(uint)\n', '    {\n', '        return resourceSupply;\n', '    }\n', '\n', '    /// @dev ERC20 balance of address\n', '    /// @param _tokenOwner The address to look up\n', '    /// @return The balance of the address\n', '    function balanceOf(address _tokenOwner)\n', '        public\n', '        constant\n', '        returns(uint balance)\n', '    {\n', '        return holdings[_tokenOwner];\n', '    }\n', '\n', '    /// @dev Total resources frozen for an address\n', '    /// @param _tokenOwner The address to look up\n', '    /// @return The frozen balance of the address\n', '    function frozenTokens(address _tokenOwner)\n', '        public\n', '        constant\n', '        returns(uint balance)\n', '    {\n', '        return frozenHoldings[_tokenOwner];\n', '    }\n', '\n', '    /// @dev The allowance for a spender on an account\n', '    /// @param _tokenOwner The account that allows withdrawels\n', '    /// @param _spender The account that is allowed to withdraw\n', '    /// @return The amount remaining in the allowance\n', '    function allowance(address _tokenOwner, address _spender)\n', '        public\n', '        constant\n', '        returns(uint remaining)\n', '    {\n', '        return allowances[_tokenOwner][_spender];\n', '    }\n', '\n', '    /// @dev Only run if player has at least some amount of tokens\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of tokens required\n', '    modifier hasAvailableTokens(address _owner, uint _tokens)\n', '    {\n', '        require(holdings[_owner] - frozenHoldings[_owner] >= _tokens);\n', '        _;\n', '    }\n', '\n', '    /// @dev Only run if player has at least some amount of tokens frozen\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of frozen tokens required\n', '    modifier hasFrozenTokens(address _owner, uint _tokens)\n', '    {\n', '        require(frozenHoldings[_owner] >= _tokens);\n', '        _;\n', '    }\n', '\n', '    /// @dev Set up the exact same state in each resource\n', '    constructor() public\n', '    {\n', '        // God gets 200 to put on exchange\n', '        holdings[msg.sender] = 200;\n', '\n', '        resourceSupply = 200;\n', '    }\n', '\n', '    /// @dev The resources interface can burn tokens for building\n', '    ///  roads or houses\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of tokens to burn\n', '    function interfaceBurnTokens(address _owner, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '        hasAvailableTokens(_owner, _tokens)\n', '    {\n', '        holdings[_owner] -= _tokens;\n', '\n', '        resourceSupply -= _tokens;\n', '\n', '        // Pretend the tokens were sent to 0x0\n', '        emit Transfer(_owner, 0x0, _tokens);\n', '    }\n', '\n', '    /// @dev The resources interface contract can mint tokens for houses\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of tokens to burn\n', '    function interfaceMintTokens(address _owner, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '    {\n', '        holdings[_owner] += _tokens;\n', '\n', '        resourceSupply += _tokens;\n', '\n', '        // Pretend the tokens were sent from the interface contract\n', '        emit Transfer(interfaceContract, _owner, _tokens);\n', '    }\n', '\n', '    /// @dev The interface can freeze tokens\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of tokens to freeze\n', '    function interfaceFreezeTokens(address _owner, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '        hasAvailableTokens(_owner, _tokens)\n', '    {\n', '        frozenHoldings[_owner] += _tokens;\n', '    }\n', '\n', '    /// @dev The interface can thaw tokens\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of tokens to thaw\n', '    function interfaceThawTokens(address _owner, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '        hasFrozenTokens(_owner, _tokens)\n', '    {\n', '        frozenHoldings[_owner] -= _tokens;\n', '    }\n', '\n', '    /// @dev The interface can transfer tokens\n', '    /// @param _from The owner of the tokens\n', '    /// @param _to The new owner of the tokens\n', '    /// @param _tokens The amount of tokens to transfer\n', '    function interfaceTransfer(address _from, address _to, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '    {\n', '        assert(holdings[_from] >= _tokens);\n', '\n', '        holdings[_from] -= _tokens;\n', '        holdings[_to]   += _tokens;\n', '\n', '        emit Transfer(_from, _to, _tokens);\n', '    }\n', '\n', '    /// @dev The interface can transfer frozend tokens\n', '    /// @param _from The owner of the tokens\n', '    /// @param _to The new owner of the tokens\n', '    /// @param _tokens The amount of frozen tokens to transfer\n', '    function interfaceFrozenTransfer(address _from, address _to, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '        hasFrozenTokens(_from, _tokens)\n', '    {\n', '        // Make sure to deduct the tokens from both the total and frozen amounts\n', '        holdings[_from]       -= _tokens;\n', '        frozenHoldings[_from] -= _tokens;\n', '        holdings[_to]         += _tokens;\n', '\n', '        emit Transfer(_from, _to, _tokens);\n', '    }\n', '\n', '    /// @dev ERC20 transfer\n', '    /// @param _to The address to transfer to\n', '    /// @param _tokens The amount of tokens to transfer\n', '    function transfer(address _to, uint _tokens)\n', '        public\n', '        hasAvailableTokens(msg.sender, _tokens)\n', '        returns(bool success)\n', '    {\n', '        holdings[_to]        += _tokens;\n', '        holdings[msg.sender] -= _tokens;\n', '\n', '        emit Transfer(msg.sender, _to, _tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev ERC20 approve\n', '    /// @param _spender The address to approve\n', '    /// @param _tokens The amount of tokens to approve\n', '    function approve(address _spender, uint _tokens)\n', '        public\n', '        returns(bool success)\n', '    {\n', '        allowances[msg.sender][_spender] = _tokens;\n', '\n', '        emit Approval(msg.sender, _spender, _tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev ERC20 transfer from\n', '    /// @param _from The address providing the allowance\n', '    /// @param _to The address using the allowance\n', '    /// @param _tokens The amount of tokens to transfer\n', '    function transferFrom(address _from, address _to, uint _tokens)\n', '        public\n', '        hasAvailableTokens(_from, _tokens)\n', '        returns(bool success)\n', '    {\n', '        require(allowances[_from][_to] >= _tokens);\n', '\n', '        holdings[_to]          += _tokens;\n', '        holdings[_from]        -= _tokens;\n', '        allowances[_from][_to] -= _tokens;\n', '\n', '        emit Transfer(_from, _to, _tokens);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/resources/KingOfEthResourceOre.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/// @title King of Eth Resource: Ore\n', '/// @author Anthony Burzillo <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="aac8dfd8d0eac8dfd8d0c4cfd9de84c9c5c7">[email&#160;protected]</a>>\n', '/// @dev ERC20 contract for the ore resource\n', 'contract KingOfEthResourceOre is KingOfEthResource {\n', '    /// @dev The ERC20 token name\n', '    string public constant name = "King of Eth Resource: Ore";\n', '\n', '    /// @dev The ERC20 token symbol\n', '    string public constant symbol = "KEOR";\n', '}']
['// File: contracts/GodMode.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/// @title God Mode\n', '/// @author Anthony Burzillo <burz@burznest.com>\n', '/// @dev This contract provides a basic interface for God\n', '///  in a contract as well as the ability for God to pause\n', '///  the contract\n', 'contract GodMode {\n', '    /// @dev Is the contract paused?\n', '    bool public isPaused;\n', '\n', "    /// @dev God's address\n", '    address public god;\n', '\n', '    /// @dev Only God can run this function\n', '    modifier onlyGod()\n', '    {\n', '        require(god == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// @dev This function can only be run while the contract\n', '    ///  is not paused\n', '    modifier notPaused()\n', '    {\n', '        require(!isPaused);\n', '        _;\n', '    }\n', '\n', '    /// @dev This event is fired when the contract is paused\n', '    event GodPaused();\n', '\n', '    /// @dev This event is fired when the contract is unpaused\n', '    event GodUnpaused();\n', '\n', '    constructor() public\n', '    {\n', '        // Make the creator of the contract God\n', '        god = msg.sender;\n', '    }\n', '\n', '    /// @dev God can change the address of God\n', '    /// @param _newGod The new address for God\n', '    function godChangeGod(address _newGod) public onlyGod\n', '    {\n', '        god = _newGod;\n', '    }\n', '\n', '    /// @dev God can pause the game\n', '    function godPause() public onlyGod\n', '    {\n', '        isPaused = true;\n', '\n', '        emit GodPaused();\n', '    }\n', '\n', '    /// @dev God can unpause the game\n', '    function godUnpause() public onlyGod\n', '    {\n', '        isPaused = false;\n', '\n', '        emit GodUnpaused();\n', '    }\n', '}\n', '\n', '// File: contracts/KingOfEthResourcesInterfaceReferencer.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/// @title King of Eth: Resources Interface Referencer\n', '/// @author Anthony Burzillo <burz@burznest.com>\n', '/// @dev Provides functionality to reference the resource interface contract\n', 'contract KingOfEthResourcesInterfaceReferencer is GodMode {\n', "    /// @dev The interface contract's address\n", '    address public interfaceContract;\n', '\n', '    /// @dev Only the interface contract can run this function\n', '    modifier onlyInterfaceContract()\n', '    {\n', '        require(interfaceContract == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// @dev God can set the realty contract\n', '    /// @param _interfaceContract The new address\n', '    function godSetInterfaceContract(address _interfaceContract)\n', '        public\n', '        onlyGod\n', '    {\n', '        interfaceContract = _interfaceContract;\n', '    }\n', '}\n', '\n', '// File: contracts/KingOfEthResource.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/// @title ERC20Interface\n', '/// @dev ERC20 token interface contract\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns(uint);\n', '    function balanceOf(address _tokenOwner) public constant returns(uint balance);\n', '    function allowance(address _tokenOwner, address _spender) public constant returns(uint remaining);\n', '    function transfer(address _to, uint _tokens) public returns(bool success);\n', '    function approve(address _spender, uint _tokens) public returns(bool success);\n', '    function transferFrom(address _from, address _to, uint _tokens) public returns(bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/// @title King of Eth: Resource\n', '/// @author Anthony Burzillo <burz@burznest.com>\n', '/// @dev Common contract implementation for resources\n', 'contract KingOfEthResource is\n', '      ERC20Interface\n', '    , GodMode\n', '    , KingOfEthResourcesInterfaceReferencer\n', '{\n', '    /// @dev Current resource supply\n', '    uint public resourceSupply;\n', '\n', "    /// @dev ERC20 token's decimals\n", '    uint8 public constant decimals = 0;\n', '\n', '    /// @dev mapping of addresses to holdings\n', '    mapping (address => uint) holdings;\n', '\n', '    /// @dev mapping of addresses to amount of tokens frozen\n', '    mapping (address => uint) frozenHoldings;\n', '\n', '    /// @dev mapping of addresses to mapping of allowances for an address\n', '    mapping (address => mapping (address => uint)) allowances;\n', '\n', '    /// @dev ERC20 total supply\n', '    /// @return The current total supply of the resource\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns(uint)\n', '    {\n', '        return resourceSupply;\n', '    }\n', '\n', '    /// @dev ERC20 balance of address\n', '    /// @param _tokenOwner The address to look up\n', '    /// @return The balance of the address\n', '    function balanceOf(address _tokenOwner)\n', '        public\n', '        constant\n', '        returns(uint balance)\n', '    {\n', '        return holdings[_tokenOwner];\n', '    }\n', '\n', '    /// @dev Total resources frozen for an address\n', '    /// @param _tokenOwner The address to look up\n', '    /// @return The frozen balance of the address\n', '    function frozenTokens(address _tokenOwner)\n', '        public\n', '        constant\n', '        returns(uint balance)\n', '    {\n', '        return frozenHoldings[_tokenOwner];\n', '    }\n', '\n', '    /// @dev The allowance for a spender on an account\n', '    /// @param _tokenOwner The account that allows withdrawels\n', '    /// @param _spender The account that is allowed to withdraw\n', '    /// @return The amount remaining in the allowance\n', '    function allowance(address _tokenOwner, address _spender)\n', '        public\n', '        constant\n', '        returns(uint remaining)\n', '    {\n', '        return allowances[_tokenOwner][_spender];\n', '    }\n', '\n', '    /// @dev Only run if player has at least some amount of tokens\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of tokens required\n', '    modifier hasAvailableTokens(address _owner, uint _tokens)\n', '    {\n', '        require(holdings[_owner] - frozenHoldings[_owner] >= _tokens);\n', '        _;\n', '    }\n', '\n', '    /// @dev Only run if player has at least some amount of tokens frozen\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of frozen tokens required\n', '    modifier hasFrozenTokens(address _owner, uint _tokens)\n', '    {\n', '        require(frozenHoldings[_owner] >= _tokens);\n', '        _;\n', '    }\n', '\n', '    /// @dev Set up the exact same state in each resource\n', '    constructor() public\n', '    {\n', '        // God gets 200 to put on exchange\n', '        holdings[msg.sender] = 200;\n', '\n', '        resourceSupply = 200;\n', '    }\n', '\n', '    /// @dev The resources interface can burn tokens for building\n', '    ///  roads or houses\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of tokens to burn\n', '    function interfaceBurnTokens(address _owner, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '        hasAvailableTokens(_owner, _tokens)\n', '    {\n', '        holdings[_owner] -= _tokens;\n', '\n', '        resourceSupply -= _tokens;\n', '\n', '        // Pretend the tokens were sent to 0x0\n', '        emit Transfer(_owner, 0x0, _tokens);\n', '    }\n', '\n', '    /// @dev The resources interface contract can mint tokens for houses\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of tokens to burn\n', '    function interfaceMintTokens(address _owner, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '    {\n', '        holdings[_owner] += _tokens;\n', '\n', '        resourceSupply += _tokens;\n', '\n', '        // Pretend the tokens were sent from the interface contract\n', '        emit Transfer(interfaceContract, _owner, _tokens);\n', '    }\n', '\n', '    /// @dev The interface can freeze tokens\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of tokens to freeze\n', '    function interfaceFreezeTokens(address _owner, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '        hasAvailableTokens(_owner, _tokens)\n', '    {\n', '        frozenHoldings[_owner] += _tokens;\n', '    }\n', '\n', '    /// @dev The interface can thaw tokens\n', '    /// @param _owner The owner of the tokens\n', '    /// @param _tokens The amount of tokens to thaw\n', '    function interfaceThawTokens(address _owner, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '        hasFrozenTokens(_owner, _tokens)\n', '    {\n', '        frozenHoldings[_owner] -= _tokens;\n', '    }\n', '\n', '    /// @dev The interface can transfer tokens\n', '    /// @param _from The owner of the tokens\n', '    /// @param _to The new owner of the tokens\n', '    /// @param _tokens The amount of tokens to transfer\n', '    function interfaceTransfer(address _from, address _to, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '    {\n', '        assert(holdings[_from] >= _tokens);\n', '\n', '        holdings[_from] -= _tokens;\n', '        holdings[_to]   += _tokens;\n', '\n', '        emit Transfer(_from, _to, _tokens);\n', '    }\n', '\n', '    /// @dev The interface can transfer frozend tokens\n', '    /// @param _from The owner of the tokens\n', '    /// @param _to The new owner of the tokens\n', '    /// @param _tokens The amount of frozen tokens to transfer\n', '    function interfaceFrozenTransfer(address _from, address _to, uint _tokens)\n', '        public\n', '        onlyInterfaceContract\n', '        hasFrozenTokens(_from, _tokens)\n', '    {\n', '        // Make sure to deduct the tokens from both the total and frozen amounts\n', '        holdings[_from]       -= _tokens;\n', '        frozenHoldings[_from] -= _tokens;\n', '        holdings[_to]         += _tokens;\n', '\n', '        emit Transfer(_from, _to, _tokens);\n', '    }\n', '\n', '    /// @dev ERC20 transfer\n', '    /// @param _to The address to transfer to\n', '    /// @param _tokens The amount of tokens to transfer\n', '    function transfer(address _to, uint _tokens)\n', '        public\n', '        hasAvailableTokens(msg.sender, _tokens)\n', '        returns(bool success)\n', '    {\n', '        holdings[_to]        += _tokens;\n', '        holdings[msg.sender] -= _tokens;\n', '\n', '        emit Transfer(msg.sender, _to, _tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev ERC20 approve\n', '    /// @param _spender The address to approve\n', '    /// @param _tokens The amount of tokens to approve\n', '    function approve(address _spender, uint _tokens)\n', '        public\n', '        returns(bool success)\n', '    {\n', '        allowances[msg.sender][_spender] = _tokens;\n', '\n', '        emit Approval(msg.sender, _spender, _tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev ERC20 transfer from\n', '    /// @param _from The address providing the allowance\n', '    /// @param _to The address using the allowance\n', '    /// @param _tokens The amount of tokens to transfer\n', '    function transferFrom(address _from, address _to, uint _tokens)\n', '        public\n', '        hasAvailableTokens(_from, _tokens)\n', '        returns(bool success)\n', '    {\n', '        require(allowances[_from][_to] >= _tokens);\n', '\n', '        holdings[_to]          += _tokens;\n', '        holdings[_from]        -= _tokens;\n', '        allowances[_from][_to] -= _tokens;\n', '\n', '        emit Transfer(_from, _to, _tokens);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/resources/KingOfEthResourceOre.sol\n', '\n', '/****************************************************\n', ' *\n', ' * Copyright 2018 BurzNest LLC. All rights reserved.\n', ' *\n', ' * The contents of this file are provided for review\n', ' * and educational purposes ONLY. You MAY NOT use,\n', ' * copy, distribute, or modify this software without\n', ' * explicit written permission from BurzNest LLC.\n', ' *\n', ' ****************************************************/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/// @title King of Eth Resource: Ore\n', '/// @author Anthony Burzillo <burz@burznest.com>\n', '/// @dev ERC20 contract for the ore resource\n', 'contract KingOfEthResourceOre is KingOfEthResource {\n', '    /// @dev The ERC20 token name\n', '    string public constant name = "King of Eth Resource: Ore";\n', '\n', '    /// @dev The ERC20 token symbol\n', '    string public constant symbol = "KEOR";\n', '}']
