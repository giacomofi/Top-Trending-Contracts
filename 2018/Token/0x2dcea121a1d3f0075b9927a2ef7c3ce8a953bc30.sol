['pragma solidity ^0.4.18;\n', '\n', '/*Deverlopment by anteros.io*/\n', '\n', '/*E-Mail:support@anteros.io*/\n', '\n', '/*twitter.com/anteros_token*/\n', '\n', '/**\n', '\n', '* @title SafeMath\n', '\n', '* @dev Math operations with safety checks that throw on error\n', '\n', '*/\n', '\n', 'library SafeMath {\n', '\n', '/**\n', '\n', '* @dev Multiplies two numbers, throws on overflow.\n', '\n', '*/\n', '\n', 'function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', 'if (a == 0) {\n', '\n', 'return 0;\n', '\n', '}\n', '\n', 'uint256 c = a * b;\n', '\n', 'assert(c / a == b);\n', '\n', 'return c;\n', '\n', '}\n', '\n', '/**\n', '\n', '* @dev Integer division of two numbers, truncating the quotient.\n', '\n', '*/\n', '\n', 'function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\n', 'uint256 c = a / b;\n', '\n', "// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', 'return c;\n', '\n', '}\n', '\n', '/**\n', '\n', '* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\n', '*/\n', '\n', 'function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', 'assert(b <= a);\n', '\n', 'return a - b;\n', '\n', '}\n', '\n', '/**\n', '\n', '* @dev Adds two numbers, throws on overflow.\n', '\n', '*/\n', '\n', 'function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', 'uint256 c = a + b;\n', '\n', 'assert(c >= a);\n', '\n', 'return c;\n', '\n', '}\n', '\n', '}\n', '\n', '/**\n', '\n', '* @title ERC20Basic\n', '\n', '* @dev Simpler version of ERC20 interface\n', '\n', '* @dev see https://github.com/ethereum/EIPs/issues/179\n', '\n', '*/\n', '\n', 'contract ERC20Basic {\n', '\n', 'function totalSupply() public view returns (uint256);\n', '\n', 'function balanceOf(address who) public view returns (uint256);\n', '\n', 'function transfer(address to, uint256 value) public returns (bool);\n', '\n', 'event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '/**\n', '\n', '* @title ERC20 interface\n', '\n', '* @dev see https://github.com/ethereum/EIPs/issues/20\n', '\n', '*/\n', '\n', 'contract ERC20 is ERC20Basic {\n', '\n', 'function allowance(address owner, address spender) public view returns (uint256);\n', '\n', 'function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', 'function approve(address spender, uint256 value) public returns (bool);\n', '\n', 'event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '/**\n', '\n', '* @title Basic token\n', '\n', '* @dev Basic version of StandardToken, with no allowances.\n', '\n', '*/\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', 'using SafeMath for uint256;\n', '\n', 'mapping(address => uint256) balances;\n', '\n', 'uint256 totalSupply_;\n', '\n', '/**\n', '\n', '* @dev total number of tokens in existence\n', '\n', '*/\n', '\n', 'function totalSupply() public view returns (uint256) {\n', '\n', 'return totalSupply_;\n', '\n', '}\n', '\n', '/**\n', '\n', '* @dev transfer token for a specified address\n', '\n', '* @param _to The address to transfer to.\n', '\n', '* @param _value The amount to be transferred.\n', '\n', '*/\n', '\n', 'function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', 'require(_to != address(0));\n', '\n', 'require(_value <= balances[msg.sender]);\n', '\n', '// SafeMath.sub will throw if there is not enough balance.\n', '\n', 'balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', 'balances[_to] = balances[_to].add(_value);\n', '\n', 'Transfer(msg.sender, _to, _value);\n', '\n', 'return true;\n', '\n', '}\n', '\n', '/**\n', '\n', '* @dev Gets the balance of the specified address.\n', '\n', '* @param _owner The address to query the the balance of.\n', '\n', '* @return An uint256 representing the amount owned by the passed address.\n', '\n', '*/\n', '\n', 'function balanceOf(address _owner) public view returns (uint256 balance) {\n', '\n', 'return balances[_owner];\n', '\n', '}\n', '\n', '}\n', '\n', '/**\n', '\n', '* @title Standard ERC20 token\n', '\n', '*\n', '\n', '* @dev Implementation of the basic standard token.\n', '\n', '* @dev https://github.com/ethereum/EIPs/issues/20\n', '\n', '* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '\n', '*/\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', 'mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '/**\n', '\n', '* @dev Transfer tokens from one address to another\n', '\n', '* @param _from address The address which you want to send tokens from\n', '\n', '* @param _to address The address which you want to transfer to\n', '\n', '* @param _value uint256 the amount of tokens to be transferred\n', '\n', '*/\n', '\n', 'function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\n', 'require(_to != address(0));\n', '\n', 'require(_value <= balances[_from]);\n', '\n', 'require(_value <= allowed[_from][msg.sender]);\n', '\n', 'balances[_from] = balances[_from].sub(_value);\n', '\n', 'balances[_to] = balances[_to].add(_value);\n', '\n', 'allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', 'Transfer(_from, _to, _value);\n', '\n', 'return true;\n', '\n', '}\n', '\n', '/**\n', '\n', '* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\n', '*\n', '\n', '* Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\n', '* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '\n', "* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '\n', '* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '* @param _spender The address which will spend the funds.\n', '\n', '* @param _value The amount of tokens to be spent.\n', '\n', '*/\n', '\n', 'function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', 'allowed[msg.sender][_spender] = _value;\n', '\n', 'Approval(msg.sender, _spender, _value);\n', '\n', 'return true;\n', '\n', '}\n', '\n', '/**\n', '\n', '* @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\n', '* @param _owner address The address which owns the funds.\n', '\n', '* @param _spender address The address which will spend the funds.\n', '\n', '* @return A uint256 specifying the amount of tokens still available for the spender.\n', '\n', '*/\n', '\n', 'function allowance(address _owner, address _spender) public view returns (uint256) {\n', '\n', 'return allowed[_owner][_spender];\n', '\n', '}\n', '\n', '/**\n', '\n', '* @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\n', '*\n', '\n', '* approve should be called when allowed[_spender] == 0. To increment\n', '\n', '* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\n', '* the first transaction is mined)\n', '\n', '* From MonolithDAO Token.sol\n', '\n', '* @param _spender The address which will spend the funds.\n', '\n', '* @param _addedValue The amount of tokens to increase the allowance by.\n', '\n', '*/\n', '\n', 'function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\n', 'allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', 'Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', 'return true;\n', '\n', '}\n', '\n', '/**\n', '\n', '* @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\n', '*\n', '\n', '* approve should be called when allowed[_spender] == 0. To decrement\n', '\n', '* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\n', '* the first transaction is mined)\n', '\n', '* From MonolithDAO Token.sol\n', '\n', '* @param _spender The address which will spend the funds.\n', '\n', '* @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\n', '*/\n', '\n', 'function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\n', 'uint oldValue = allowed[msg.sender][_spender];\n', '\n', 'if (_subtractedValue > oldValue) {\n', '\n', 'allowed[msg.sender][_spender] = 0;\n', '\n', '} else {\n', '\n', 'allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\n', '}\n', '\n', 'Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', 'return true;\n', '\n', '}\n', '\n', '}\n', '\n', '/**\n', '\n', '* @title AnterosToken\n', '\n', '* @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', '\n', '* Note they can later distribute these tokens as they wish using `transfer` and other\n', '\n', '* `StandardToken` functions.\n', '\n', '*/\n', '\n', 'contract AnterosToken is StandardToken {\n', '\n', 'string public constant name = "AnterosToken";\n', '\n', 'string public constant symbol = "AOS";\n', '\n', 'uint8 public constant decimals = 0;\n', '\n', 'uint256 public constant INITIAL_SUPPLY = 30000000 * 1 wei;\n', '\n', '/**\n', '\n', '* @dev Constructor that gives msg.sender all of existing tokens.\n', '\n', '*/\n', '\n', 'function AnterosToken() public {\n', '\n', 'totalSupply_ = INITIAL_SUPPLY;\n', '\n', 'balances[msg.sender] = INITIAL_SUPPLY;\n', '\n', 'Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '\n', '}\n', '\n', '}']