['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/ERC20-token.sol\n', '\n', '/**\n', ' * @title ERC20 interface \n', ' * \n', ' */\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/OwnableMintable.sol\n', '\n', '/**\n', ' * @title OwnableMintable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * @dev Added mintOwner address how controls the minting\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract OwnableMintable {\n', '  address public owner;\n', '  address public mintOwner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  event MintOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    mintOwner = msg.sender;\n', '  }\n', '\n', '  \n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyMintOwner() {\n', '    require(msg.sender == mintOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer mint control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferMintOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit MintOwnershipTransferred(mintOwner, newOwner);\n', '    mintOwner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function uint2str(uint i) internal pure returns (string){\n', '      if (i == 0) return "0";\n', '      uint j = i;\n', '      uint length;\n', '      while (j != 0){\n', '          length++;\n', '          j /= 10;\n', '      }\n', '      bytes memory bstr = new bytes(length);\n', '      uint k = length - 1;\n', '      while (i != 0){\n', '          bstr[k--] = byte(48 + i % 10);\n', '          i /= 10;\n', '      }\n', '      return string(bstr);\n', '  }\n', ' \n', '  \n', '}\n', '\n', '// File: contracts/BYTM/BYTMToken.sol\n', '\n', '/**\n', ' *\n', ' * @title BYTMToken\n', ' * @notice An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *  \n', ' *\n', ' */\n', 'contract BYTMToken is ERC20, OwnableMintable {\n', '  using SafeMath for uint256;\n', '\n', '\n', '  string public constant name = "Bytemine";  // The Token&#39;s name\n', '  string public constant symbol = "BYTM";    // Identifier \n', '  uint8 public constant decimals = 18;      // Number of decimals \n', '\n', '  //Hardcap is 1,000,000,000 + 18 decimals\n', '  uint256  hardCap_ = 1000000000 * (10**uint256(18));\n', '  \n', '\n', '  //Balances\n', '  mapping(address => uint256) balances;\n', '  mapping(address => mapping (address => uint256)) internal allowed;\n', '\n', '  //Minting\n', '  event Mint(address indexed to, uint256 amount);\n', '  event PauseMinting(); \n', '  event UnPauseMinting(); \n', '\n', '  //If token is mintable\n', '  bool public pauseMinting = false;\n', '\n', '  //Total supply of tokens \n', '  uint256 totalSupply_ = 0;\n', '\n', '\n', '  //Constructor\n', '  constructor() public {\n', '    \n', '  }\n', '\n', '\n', '  //Fix for the ERC20 short address attack.\n', '  modifier onlyPayloadSize(uint size) {\n', '    assert(msg.data.length >= size + 4);\n', '    _;\n', '  } \n', ' \n', '\n', '  /**\n', '   * @dev total number of tokens in existence\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '   * @dev allowed total number of tokens\n', '   */\n', '  function hardCap() public view returns (uint256) {\n', '    return hardCap_;\n', '  }\n', ' \n', '  /**\n', '   * @dev transfer token for a specified address\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '    return _transfer(msg.sender, _to, _value); \n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Internal transfer, only can be called by this contract  \n', '   * @param _from is msg.sender The address to transfer from.\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function _transfer(address _from, address _to, uint _value) internal returns (bool){\n', '      require(_to != address(0)); // Prevent transfer to 0x0 address.\n', '      require(_value <= balances[msg.sender]);  // Check if the sender has enough      \n', '\n', '      // SafeMath.sub will throw if there is not enough balance.\n', '      balances[_from] = balances[_from].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      emit Transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\n', '\n', '    require(_to != address(0));                     // Prevent transfer to 0x0 address. Use burn() instead\n', '    require(_value <= balances[_from]);             // Check if the sender has enough\n', '    require(_value <= allowed[_from][msg.sender]);  // Check if the sender is allowed to send\n', '\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true; \n', '  }\n', '\n', '   \n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param _owner The address to query the the balance of.\n', '   * @return An uint256 representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spend.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', ' \n', '\n', '  /**\n', '   *  MintableToken functionality\n', '   */\n', '  modifier canMint() {\n', '    require(!pauseMinting);\n', '    _;\n', '  }\n', '  \n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyMintOwner canMint public returns (bool) {\n', '    require(_to != address(0)); // Prevent transfer to 0x0 address.\n', '    require(totalSupply_.add(_amount) <= hardCap_);\n', '\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    emit Mint(_to, _amount); \n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Function to pause minting new tokens.\n', '   * @notice Pause minting\n', '   */\n', '  function toggleMinting()  onlyOwner public {\n', '    if(pauseMinting){\n', '      pauseMinting = false;\n', '      emit UnPauseMinting();\n', '    }else{\n', '      pauseMinting = true;\n', '      emit PauseMinting();\n', '    }     \n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Owner can transfer other tokens that are sent here by mistake\n', '   * \n', '   */\n', '  function refundOtherTokens(address _recipient, ERC20 _token)  onlyOwner public {\n', '    require(_token != this);\n', '    uint256 balance = _token.balanceOf(this);\n', '    require(_token.transfer(_recipient, balance));\n', '  }\n', '\n', ' \n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/ERC20-token.sol\n', '\n', '/**\n', ' * @title ERC20 interface \n', ' * \n', ' */\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/OwnableMintable.sol\n', '\n', '/**\n', ' * @title OwnableMintable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * @dev Added mintOwner address how controls the minting\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract OwnableMintable {\n', '  address public owner;\n', '  address public mintOwner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  event MintOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    mintOwner = msg.sender;\n', '  }\n', '\n', '  \n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyMintOwner() {\n', '    require(msg.sender == mintOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer mint control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferMintOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit MintOwnershipTransferred(mintOwner, newOwner);\n', '    mintOwner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function uint2str(uint i) internal pure returns (string){\n', '      if (i == 0) return "0";\n', '      uint j = i;\n', '      uint length;\n', '      while (j != 0){\n', '          length++;\n', '          j /= 10;\n', '      }\n', '      bytes memory bstr = new bytes(length);\n', '      uint k = length - 1;\n', '      while (i != 0){\n', '          bstr[k--] = byte(48 + i % 10);\n', '          i /= 10;\n', '      }\n', '      return string(bstr);\n', '  }\n', ' \n', '  \n', '}\n', '\n', '// File: contracts/BYTM/BYTMToken.sol\n', '\n', '/**\n', ' *\n', ' * @title BYTMToken\n', ' * @notice An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *  \n', ' *\n', ' */\n', 'contract BYTMToken is ERC20, OwnableMintable {\n', '  using SafeMath for uint256;\n', '\n', '\n', '  string public constant name = "Bytemine";  // The Token\'s name\n', '  string public constant symbol = "BYTM";    // Identifier \n', '  uint8 public constant decimals = 18;      // Number of decimals \n', '\n', '  //Hardcap is 1,000,000,000 + 18 decimals\n', '  uint256  hardCap_ = 1000000000 * (10**uint256(18));\n', '  \n', '\n', '  //Balances\n', '  mapping(address => uint256) balances;\n', '  mapping(address => mapping (address => uint256)) internal allowed;\n', '\n', '  //Minting\n', '  event Mint(address indexed to, uint256 amount);\n', '  event PauseMinting(); \n', '  event UnPauseMinting(); \n', '\n', '  //If token is mintable\n', '  bool public pauseMinting = false;\n', '\n', '  //Total supply of tokens \n', '  uint256 totalSupply_ = 0;\n', '\n', '\n', '  //Constructor\n', '  constructor() public {\n', '    \n', '  }\n', '\n', '\n', '  //Fix for the ERC20 short address attack.\n', '  modifier onlyPayloadSize(uint size) {\n', '    assert(msg.data.length >= size + 4);\n', '    _;\n', '  } \n', ' \n', '\n', '  /**\n', '   * @dev total number of tokens in existence\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '   * @dev allowed total number of tokens\n', '   */\n', '  function hardCap() public view returns (uint256) {\n', '    return hardCap_;\n', '  }\n', ' \n', '  /**\n', '   * @dev transfer token for a specified address\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '    return _transfer(msg.sender, _to, _value); \n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Internal transfer, only can be called by this contract  \n', '   * @param _from is msg.sender The address to transfer from.\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function _transfer(address _from, address _to, uint _value) internal returns (bool){\n', '      require(_to != address(0)); // Prevent transfer to 0x0 address.\n', '      require(_value <= balances[msg.sender]);  // Check if the sender has enough      \n', '\n', '      // SafeMath.sub will throw if there is not enough balance.\n', '      balances[_from] = balances[_from].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      emit Transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\n', '\n', '    require(_to != address(0));                     // Prevent transfer to 0x0 address. Use burn() instead\n', '    require(_value <= balances[_from]);             // Check if the sender has enough\n', '    require(_value <= allowed[_from][msg.sender]);  // Check if the sender is allowed to send\n', '\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true; \n', '  }\n', '\n', '   \n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param _owner The address to query the the balance of.\n', '   * @return An uint256 representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spend.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', ' \n', '\n', '  /**\n', '   *  MintableToken functionality\n', '   */\n', '  modifier canMint() {\n', '    require(!pauseMinting);\n', '    _;\n', '  }\n', '  \n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyMintOwner canMint public returns (bool) {\n', '    require(_to != address(0)); // Prevent transfer to 0x0 address.\n', '    require(totalSupply_.add(_amount) <= hardCap_);\n', '\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    emit Mint(_to, _amount); \n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @dev Function to pause minting new tokens.\n', '   * @notice Pause minting\n', '   */\n', '  function toggleMinting()  onlyOwner public {\n', '    if(pauseMinting){\n', '      pauseMinting = false;\n', '      emit UnPauseMinting();\n', '    }else{\n', '      pauseMinting = true;\n', '      emit PauseMinting();\n', '    }     \n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Owner can transfer other tokens that are sent here by mistake\n', '   * \n', '   */\n', '  function refundOtherTokens(address _recipient, ERC20 _token)  onlyOwner public {\n', '    require(_token != this);\n', '    uint256 balance = _token.balanceOf(this);\n', '    require(_token.transfer(_recipient, balance));\n', '  }\n', '\n', ' \n', '}']
