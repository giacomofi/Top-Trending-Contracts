['pragma solidity ^0.4.24;\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '// File: contracts/Smartcop.sol\n', '\n', 'contract Smartcop is DetailedERC20, StandardToken {\n', '\n', '    address public owner ;\n', '\n', '    constructor() public\n', '        DetailedERC20("Azilowon", "AWN", 18)\n', '    {\n', '        totalSupply_ = 1000000000 * (uint(10)**decimals);\n', '        balances[msg.sender] = totalSupply_;\n', '        owner = msg.sender;\n', '    }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', ' /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/LockerVesting.sol\n', '\n', '/* solium-disable security/no-block-members */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title LockerVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract LockerVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public start;\n', '  uint256 public period;\n', '  uint256 public chunks;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, using chunk every period time. By period*chunks then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _start the time (as Unix time) at which point vesting starts\n', '   * @param _period duration in seconds of the period of vesting (1 month = 2630000 seconds)\n', '   * @param _chunks number of chunk for vesting and period*chunks gives duration (capped to 100 max)\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  constructor(\n', '    address _beneficiary,\n', '    uint256 _start,\n', '    uint256 _period,\n', '    uint256 _chunks,\n', '    bool _revocable\n', '  )\n', '    public\n', '  {\n', '    require(_beneficiary != address(0));\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    period = _period;\n', '    chunks = _chunks;\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic _token) public {\n', '    uint256 unreleased = releasableAmount(_token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[_token] = released[_token].add(unreleased);\n', '\n', '    _token.safeTransfer(beneficiary, unreleased);\n', '\n', '    emit Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic _token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[_token]);\n', '\n', '    uint256 balance = _token.balanceOf(address(this));\n', '\n', '    uint256 unreleased = releasableAmount(_token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[_token] = true;\n', '\n', '    _token.safeTransfer(owner, refund);\n', '\n', '    emit Revoked();\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic _token) public view returns (uint256) {\n', '    return vestedAmount(_token).sub(released[_token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic _token) public view returns (uint256) {\n', '    uint256 currentBalance = _token.balanceOf(address(this));\n', '    uint256 totalBalance = currentBalance.add(released[_token]);\n', '\n', '    require(chunks < 100);\n', '    // be sure it can&#39;t loop forever\n', '    if (block.timestamp < start) {\n', '      return 0;\n', '    } \n', '    for (uint i=0; i<chunks; i++) {\n', '      if (block.timestamp > start.add(period.mul(i)) && block.timestamp <= start.add(period.mul(i+1))) {\n', '        // send totalbalance dividev in chunk, then multiply by i+1\n', '        return totalBalance.div(chunks).mul(i+1);\n', '      } \n', '    }\n', '    return 0;\n', '  }\n', '}\n', '\n', '// File: contracts/Smartcop_Locker.sol\n', '\n', '// Copyright &#169;2018 Mangrovia Blockchain Solutions – All Right Reserved\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', 'contract Smartcop_Locker \n', '{\n', '    using SafeMath for uint;\n', '\n', '    address tokOwner;\n', '    uint startTime;\n', '    Smartcop AWN;\n', '\n', '    mapping (address => address) TTLaddress;\n', '\n', '    event LockInvestor( address indexed purchaser, uint tokens);\n', '    event LockAdvisor( address indexed purchaser, uint tokens);\n', '    event LockCompanyReserve( address indexed purchaser, uint tokens);\n', '    event LockCashBack( address indexed purchaser, uint tokens);\n', '    event LockAffiliateMarketing( address indexed purchaser, uint tokens);\n', '    event LockStrategicPartners( address indexed purchaser, uint tokens);\n', ' \n', '    // we shall hardcode all variables, it will cost less eth to deploy\n', '    constructor(address _token) public\n', '    { \n', '        AWN = Smartcop(_token);\n', '        startTime = now;\n', '        tokOwner = AWN.owner();\n', '    }\n', '\n', '    function totalTokens() public view returns(uint) {\n', '        return AWN.totalSupply();\n', '    }\n', '\n', '    function getMyLocker() public view returns(address) {\n', '        return TTLaddress[msg.sender]; \n', '    }\n', '\n', '    function PrivateSale(address buyerAddress, uint amount) public returns(bool) {\n', '        // PrivateSale receive directly the tokens\n', '        AWN.transferFrom(tokOwner, buyerAddress, amount);\n', '        emit LockInvestor( buyerAddress, amount);\n', '    }\n', '\n', '    function AdvisorsAndFounders(address buyerAddress, uint amount) public returns(bool) {\n', '        // it receive 30% immediately, and 70 vested in  14 months (5% per month)\n', '        uint tamount = amount.mul(30);\n', '        tamount = tamount.div(100);\n', '        AWN.transferFrom(tokOwner, buyerAddress, tamount );\n', '        assignTokens(buyerAddress, amount.sub(tamount), startTime, 2630000, 14);\n', '        emit LockAdvisor(buyerAddress, amount);\n', '        return true;\n', '    }\n', '    function CompanyReserve(address buyerAddress, uint amount) public returns(bool) {\n', '        // it receive the token  after 6 months, then 20% and then in 15 months the remaining\n', '        assignTokens(buyerAddress, amount ,startTime.add(15780000), 7890000, 5);\n', '        emit LockCompanyReserve(buyerAddress, amount);\n', '        return true;\n', '    }\n', '\n', '    function AffiliateMarketing(address buyerAddress, uint amount) public returns(bool) {\n', '        // it receive the tokens 10% immediatly and then 10% each month\n', '        assignTokens(buyerAddress, amount, startTime,2630000, 10);\n', '        emit LockAffiliateMarketing(buyerAddress, amount);\n', '        return true;\n', '    }\n', '\n', '    function Cashback(address buyerAddress, uint amount) public returns(bool) {\n', '        // monthly (2630000) 10 months\n', '        assignTokens(buyerAddress, amount, startTime,2630000, 10 );\n', '        emit LockCashBack(buyerAddress, amount);\n', '        return true;\n', '    }\n', '\n', '    function StrategicPartners(address buyerAddress, uint amount) public returns(bool) {\n', '        // monthly (2630000) 10 months\n', '        assignTokens(buyerAddress, amount, startTime, 2630000, 10);\n', '        emit LockStrategicPartners(buyerAddress, amount);\n', '        return true;\n', '    }\n', '\n', '    function ArbitraryLocker(address buyerAddress, uint amount, uint start, uint period, uint chunks) public returns(bool) {\n', '        assignTokens(buyerAddress, amount, start, period, chunks);\n', '        return true;\n', '    }\n', '\n', '    function assignTokens(address buyerAddress, uint amount, \n', '                                    uint start, uint period, uint chunks ) internal returns(address) {\n', '        require(amount <= AWN.allowance(tokOwner, address(this)) ,"Type 1 Not enough Tokens to transfer");\n', '        address ttl1 = getMyLocker();\n', '\n', '        if (ttl1 == 0x0) {\n', '        // this is Private Sale and Advisors/Founders TTL (30% at the end of ICO and then 5% per month)\n', '            ttl1 = new LockerVesting(buyerAddress, start, period, chunks, false);\n', '        }\n', '            \n', '        AWN.transferFrom(tokOwner, ttl1, amount);\n', '        TTLaddress[buyerAddress] = ttl1;\n', '\n', '        return ttl1;\n', '    }\n', '\n', '\n', '}']