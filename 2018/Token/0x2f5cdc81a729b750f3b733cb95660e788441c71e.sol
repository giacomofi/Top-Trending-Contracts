['pragma solidity ^0.4.19;\n', '\n', '// File: contracts/storage/interface/RocketStorageInterface.sol\n', '\n', '// Our eternal storage interface\n', 'contract RocketStorageInterface {\n', '    // Modifiers\n', '    modifier onlyLatestRocketNetworkContract() {_;}\n', '    // Getters\n', '    function getAddress(bytes32 _key) external view returns (address);\n', '    function getUint(bytes32 _key) external view returns (uint);\n', '    function getString(bytes32 _key) external view returns (string);\n', '    function getBytes(bytes32 _key) external view returns (bytes);\n', '    function getBool(bytes32 _key) external view returns (bool);\n', '    function getInt(bytes32 _key) external view returns (int);\n', '    // Setters\n', '    function setAddress(bytes32 _key, address _value) onlyLatestRocketNetworkContract external;\n', '    function setUint(bytes32 _key, uint _value) onlyLatestRocketNetworkContract external;\n', '    function setString(bytes32 _key, string _value) onlyLatestRocketNetworkContract external;\n', '    function setBytes(bytes32 _key, bytes _value) onlyLatestRocketNetworkContract external;\n', '    function setBool(bytes32 _key, bool _value) onlyLatestRocketNetworkContract external;\n', '    function setInt(bytes32 _key, int _value) onlyLatestRocketNetworkContract external;\n', '    // Deleters\n', '    function deleteAddress(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    function deleteUint(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    function deleteString(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    function deleteBytes(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    function deleteBool(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    function deleteInt(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    // Hash helpers\n', '    function kcck256str(string _key1) external pure returns (bytes32);\n', '    function kcck256strstr(string _key1, string _key2) external pure returns (bytes32);\n', '    function kcck256stradd(string _key1, address _key2) external pure returns (bytes32);\n', '    function kcck256straddadd(string _key1, address _key2, address _key3) external pure returns (bytes32);\n', '}\n', '\n', '// File: contracts/storage/RocketBase.sol\n', '\n', '/// @title Base settings / modifiers for each contract in Rocket Pool\n', '/// @author David Rugendyke\n', 'contract RocketBase {\n', '\n', '    /*** Events ****************/\n', '\n', '    event ContractAdded (\n', '        address indexed _newContractAddress,                    // Address of the new contract\n', '        uint256 created                                         // Creation timestamp\n', '    );\n', '\n', '    event ContractUpgraded (\n', '        address indexed _oldContractAddress,                    // Address of the contract being upgraded\n', '        address indexed _newContractAddress,                    // Address of the new contract\n', '        uint256 created                                         // Creation timestamp\n', '    );\n', '\n', '    /**** Properties ************/\n', '\n', '    uint8 public version;                                                   // Version of this contract\n', '\n', '\n', '    /*** Contracts **************/\n', '\n', '    RocketStorageInterface rocketStorage = RocketStorageInterface(0);       // The main storage contract where primary persistant storage is maintained\n', '\n', '\n', '    /*** Modifiers ************/\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        roleCheck("owner", msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to scope access to admins\n', '    */\n', '    modifier onlyAdmin() {\n', '        roleCheck("admin", msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to scope access to admins\n', '    */\n', '    modifier onlySuperUser() {\n', '        require(roleHas("owner", msg.sender) || roleHas("admin", msg.sender));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Reverts if the address doesn&#39;t have this role\n', '    */\n', '    modifier onlyRole(string _role) {\n', '        roleCheck(_role, msg.sender);\n', '        _;\n', '    }\n', '\n', '  \n', '    /*** Constructor **********/\n', '   \n', '    /// @dev Set the main Rocket Storage address\n', '    constructor(address _rocketStorageAddress) public {\n', '        // Update the contract address\n', '        rocketStorage = RocketStorageInterface(_rocketStorageAddress);\n', '    }\n', '\n', '\n', '    /*** Role Utilities */\n', '\n', '    /**\n', '    * @dev Check if an address is an owner\n', '    * @return bool\n', '    */\n', '    function isOwner(address _address) public view returns (bool) {\n', '        return rocketStorage.getBool(keccak256("access.role", "owner", _address));\n', '    }\n', '\n', '    /**\n', '    * @dev Check if an address has this role\n', '    * @return bool\n', '    */\n', '    function roleHas(string _role, address _address) internal view returns (bool) {\n', '        return rocketStorage.getBool(keccak256("access.role", _role, _address));\n', '    }\n', '\n', '     /**\n', '    * @dev Check if an address has this role, reverts if it doesn&#39;t\n', '    */\n', '    function roleCheck(string _role, address _address) view internal {\n', '        require(roleHas(_role, _address) == true);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Authorized.sol\n', '\n', '/**\n', ' * @title Authorized\n', ' * @dev The Authorized contract has an issuer, depository, and auditor address, and provides basic \n', ' * authorization control functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Authorized is RocketBase {\n', '\n', '    // The issuer&#39;s address\n', '    // In contract&#39;s RocketStorage \n', '    // address public token.issuer;\n', '\n', '    // The depository&#39;s address\n', '    // In contract&#39;s RocketStorage \n', '    // address public token.depository;\n', '\n', '    // The auditor&#39;s address\n', '    // In contract&#39;s RocketStorage \n', '    // address public token.auditor;\n', '\n', '    event IssuerTransferred(address indexed previousIssuer, address indexed newIssuer);\n', '    event AuditorTransferred(address indexed previousAuditor, address indexed newAuditor);\n', '    event DepositoryTransferred(address indexed previousDepository, address indexed newDepository);\n', '\n', '    /* \n', '     *  Modifiers\n', '     */\n', '\n', '    // Ensure sender is issuer   \n', '    modifier onlyIssuer {\n', '        require( msg.sender == issuer() );\n', '        _;\n', '    }\n', '\n', '    // Ensure sender is depository\n', '    modifier onlyDepository {\n', '        require( msg.sender == depository() );\n', '        _;\n', '    }\n', '\n', '    // Ensure sender is auditor\n', '    modifier onlyAuditor {\n', '        require( msg.sender == auditor() );\n', '        _;\n', '    }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to explicity assign a new issuer.\n', '   * @param newIssuer The address of the new issuer.\n', '   */\n', '  function setIssuer(address newIssuer) public onlyOwner {\n', '    require(newIssuer != address(0));\n', '    rocketStorage.setAddress(keccak256("token.issuer"), newIssuer);\n', '    emit IssuerTransferred(issuer(), newIssuer);\n', '  }\n', '\n', '  /**\n', '   * @dev Get the current issuer address from storage.\n', '   */\n', '  function issuer() public view returns (address) {\n', '    return rocketStorage.getAddress(keccak256("token.issuer"));\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to explicity assign a new auditor.\n', '   * @param newAuditor The address of the new auditor.\n', '   */\n', '  function setAuditor(address newAuditor) public onlyOwner {\n', '    require(newAuditor != address(0));\n', '    rocketStorage.setAddress(keccak256("token.auditor"), newAuditor);\n', '    emit AuditorTransferred(auditor(), newAuditor);\n', '  }\n', '\n', '  /**\n', '   * @dev Get the current auditor address from storage.\n', '   */\n', '  function auditor() public view returns (address) {\n', '    return rocketStorage.getAddress(keccak256("token.auditor"));\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to explicity assign a new depository.\n', '   * @param newDepository The address of the new depository.\n', '   */\n', '  function setDepository(address newDepository) public onlyOwner {\n', '    require(newDepository != address(0));\n', '    rocketStorage.setAddress(keccak256("token.depository"), newDepository);\n', '    emit DepositoryTransferred(depository(), newDepository);\n', '  }\n', '\n', '  /**\n', '   * @dev Get the current depository address from storage.\n', '   */\n', '  function depository() public view returns (address) {\n', '    return rocketStorage.getAddress(keccak256("token.depository"));\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/PausableRedemption.sol\n', '\n', '/**\n', ' * @title PausableRedemption\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism, specifically for redemption.\n', ' */\n', 'contract PausableRedemption is RocketBase {\n', '  event PauseRedemption();\n', '  event UnpauseRedemption();\n', '\n', '  // Whether redemption is paused or not\n', '  // Stored in RocketStorage\n', '  // bool public token.redemptionPaused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract redemption is not paused.\n', '   */\n', '  modifier whenRedemptionNotPaused() {\n', '    require(!redemptionPaused());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract redemption is paused.\n', '   */\n', '  modifier whenRedemptionPaused() {\n', '    require(redemptionPaused());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev returns the redemptionPaused status from contract storage\n', '   */\n', '  function redemptionPaused() public view returns (bool) {\n', '    return rocketStorage.getBool(keccak256("token.redemptionPaused"));\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pauseRedemption() onlyOwner whenRedemptionNotPaused public {\n', '    rocketStorage.setBool(keccak256("token.redemptionPaused"), true);\n', '    emit PauseRedemption();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause redemption, returns to normal state\n', '   */\n', '  function unpauseRedemption() onlyOwner whenRedemptionPaused public {\n', '    rocketStorage.setBool(keccak256("token.redemptionPaused"), false);\n', '    emit UnpauseRedemption();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/Issuable.sol\n', '\n', 'contract Issuable is RocketBase, Authorized, PausableRedemption {\n', '    using SafeMath for uint256;\n', '\n', '    event AssetsUpdated(address indexed depository, uint256 amount);\n', '    event CertificationUpdated(address indexed auditor, uint256 amount);\n', '\n', '    // Get assetsOnDeposit\n', '    function assetsOnDeposit() public view returns (uint256) {\n', '        return rocketStorage.getUint(keccak256("issuable.assetsOnDeposit"));\n', '    }\n', '\n', '    // Get assetsCertified\n', '    function assetsCertified() public view returns (uint256) {\n', '        return rocketStorage.getUint(keccak256("issuable.assetsCertified"));\n', '    }\n', '\n', '    /******* For paused redemption *******/\n', '\n', '    // Set assetsOnDeposit\n', '    function setAssetsOnDeposit(uint256 _total) public onlyDepository whenRedemptionPaused {\n', '        uint256 totalSupply_ = rocketStorage.getUint(keccak256("token.totalSupply"));\n', '        require(_total >= totalSupply_);\n', '        rocketStorage.setUint(keccak256("issuable.assetsOnDeposit"), _total);\n', '        emit AssetsUpdated(msg.sender, _total);\n', '    }\n', '\n', '    // Set assetsCertified\n', '    function setAssetsCertified(uint256 _total) public onlyAuditor whenRedemptionPaused {\n', '        uint256 totalSupply_ = rocketStorage.getUint(keccak256("token.totalSupply"));\n', '        require(_total >= totalSupply_);\n', '        rocketStorage.setUint(keccak256("issuable.assetsCertified"), _total);\n', '        emit CertificationUpdated(msg.sender, _total);\n', '    }\n', '\n', '    /******* For during both paused and non-paused redemption *******/\n', '\n', '    // Depository can receive assets (increasing)\n', '    function receiveAssets(uint256 _units) public onlyDepository {\n', '        uint256 total_ = assetsOnDeposit().add(_units);\n', '        rocketStorage.setUint(keccak256("issuable.assetsOnDeposit"), total_);\n', '        emit AssetsUpdated(msg.sender, total_);\n', '    }\n', '\n', '    // Depository can release assets (decreasing), but never to less than the totalSupply\n', '    function releaseAssets(uint256 _units) public onlyDepository {\n', '        uint256 totalSupply_ = rocketStorage.getUint(keccak256("token.totalSupply"));\n', '        uint256 total_ = assetsOnDeposit().sub(_units);\n', '        require(total_ >= totalSupply_);\n', '        rocketStorage.setUint(keccak256("issuable.assetsOnDeposit"), total_);\n', '        emit AssetsUpdated(msg.sender, total_);\n', '    }\n', '\n', '    // Auditor can increase certified assets\n', '    function increaseAssetsCertified(uint256 _units) public onlyAuditor {\n', '        uint256 total_ = assetsCertified().add(_units);\n', '        rocketStorage.setUint(keccak256("issuable.assetsCertified"), total_);\n', '        emit CertificationUpdated(msg.sender, total_);\n', '    }\n', '\n', '    // Auditor can decrease certified assets\n', '    function decreaseAssetsCertified(uint256 _units) public onlyAuditor {\n', '        uint256 totalSupply_ = rocketStorage.getUint(keccak256("token.totalSupply"));\n', '        uint256 total_ = assetsCertified().sub(_units);\n', '        require(total_ >= totalSupply_);\n', '        rocketStorage.setUint(keccak256("issuable.assetsCertified"), total_);\n', '        emit CertificationUpdated(msg.sender, total_);\n', '    }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/LD2Token.sol\n', '\n', '/// @title The primary ERC20 token contract, using LD2 storage\n', '/// @author Steven Brendtro\n', 'contract LD2Token is ERC20, RocketBase, Issuable {\n', '  using SafeMath for uint256;\n', '\n', '  event TokensIssued(address indexed issuer, uint256 amount);\n', '\n', '  // The balances of the token, per ERC20, but stored in contract storage (rocketStorage)\n', '  // mapping(address => uint256) token.balances;\n', '\n', '  // The totalSupply of the token, per ERC20, but stored in contract storage (rocketStorage)\n', '  // uint256 token.totalSupply;\n', '\n', '  // The authorizations of the token, per ERC20, but stored in contract storage (rocketStorage)\n', '  // This is accomplished by hashing token.allowed + _fromAddr + _toAddr\n', '  // mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return rocketStorage.getUint(keccak256("token.totalSupply"));\n', '  }\n', '\n', '  /**\n', '  * @dev increase total number of tokens in existence\n', '  */\n', '  function increaseTotalSupply(uint256 _increase) internal {\n', '    uint256 totalSupply_ = totalSupply();\n', '    totalSupply_ = totalSupply_.add(_increase);\n', '    rocketStorage.setUint(keccak256("token.totalSupply"),totalSupply_);\n', '  }\n', '\n', '  /**\n', '  * @dev decrease total number of tokens in existence\n', '  */\n', '  function decreaseTotalSupply(uint256 _decrease) internal {\n', '    uint256 totalSupply_ = totalSupply();\n', '    totalSupply_ = totalSupply_.sub(_decrease);\n', '    rocketStorage.setUint(keccak256("token.totalSupply"),totalSupply_);\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf(msg.sender));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    // Use the contract storage\n', '    setBalanceOf(msg.sender, balanceOf(msg.sender).sub(_value));\n', '    setBalanceOf(_to, balanceOf(_to).add(_value));\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return rocketStorage.getUint(keccak256("token.balances",_owner));\n', '  }\n', '\n', '  /**\n', '  * @dev Updates the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @param _balance An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function setBalanceOf(address _owner, uint256 _balance) internal {\n', '    rocketStorage.setUint(keccak256("token.balances",_owner), _balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return rocketStorage.getUint(keccak256("token.allowed",_owner,_spender));\n', '  }\n', '\n', '  /**\n', '  * @dev Updates the allowance by _owner of the _spender to have access to _balance.\n', '  * @param _owner The address to query the the balance of.\n', '  * @param _spender The address which will spend the funds\n', '  * @param _balance An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function setAllowance(address _owner, address _spender, uint256 _balance) internal {\n', '    rocketStorage.setUint(keccak256("token.allowed",_owner,_spender), _balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf(_from));\n', '    require(_value <= allowance(_from, msg.sender));\n', '    \n', '    setBalanceOf(_from, balanceOf(_from).sub(_value));\n', '    setBalanceOf(_to, balanceOf(_to).add(_value));\n', '    setAllowance(_from, msg.sender, allowance(_from, msg.sender).sub(_value));\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    setAllowance(msg.sender, _spender, _value);\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    setAllowance(msg.sender, _spender, allowance(msg.sender, _spender).add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowance(msg.sender, _spender);\n', '    if (_subtractedValue > oldValue) {\n', '      setAllowance(msg.sender, _spender, 0);\n', '    } else {\n', '      setAllowance(msg.sender, _spender, oldValue.sub(_subtractedValue));\n', '    }\n', '    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * Issuer can only issue tokens up to the lesser of assetsOnDeposit and\n', '   * assetsCertified.  This prevents issuing uncertified tokens and ensures\n', '   * that every token issued has exactly one unit of the asset backing it.\n', '   * @param _units Total amount of additional tokens to issue\n', '   */\n', '  function issueTokensForAssets( uint256 _units ) public onlyIssuer {\n', '\n', '    uint256 newSupply_ = totalSupply().add(_units);\n', '\n', '    // Find the greater of assetsOnDeposit and assetsCertified\n', '    uint256 limit_ = 0;\n', '    if ( assetsOnDeposit() > assetsCertified() )\n', '      limit_ = assetsOnDeposit();\n', '    else\n', '      limit_ = assetsCertified();\n', '\n', '    // the new supply can&#39;t be larger than our issuance limit\n', '    require( newSupply_ <= limit_ );\n', '\n', '    // Increase the total supply\n', '    increaseTotalSupply( _units );\n', '\n', '    // Increase the issuer&#39;s balance\n', '    setBalanceOf(issuer(), balanceOf(issuer()).add(_units));\n', '\n', '    emit TokensIssued(issuer(), _units);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/LD2Zero.sol\n', '\n', '/// @title The LD2-style ERC20 token for LD2.zero\n', '/// @author Steven Brendtro\n', 'contract LD2Zero is LD2Token {\n', '\n', '  string public name = "LD2.zero";\n', '  string public symbol = "XLDZ";\n', '  // Decimals are stored in RocketStorage\n', '  // uint8 public token.decimals = 18;\n', '\n', '  /*** Constructor ***********/\n', '\n', '  /// @dev LD2Zero constructor\n', '  constructor(address _rocketStorageAddress) RocketBase(_rocketStorageAddress) public {\n', '    // Set the decimals\n', '    if(decimals() == 0) {\n', '      rocketStorage.setUint(keccak256("token.decimals"),18);\n', '    }\n', '  }\n', '\n', '  function decimals() public view returns (uint8) {\n', '    return uint8(rocketStorage.getUint(keccak256("token.decimals")));\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '// File: contracts/storage/interface/RocketStorageInterface.sol\n', '\n', '// Our eternal storage interface\n', 'contract RocketStorageInterface {\n', '    // Modifiers\n', '    modifier onlyLatestRocketNetworkContract() {_;}\n', '    // Getters\n', '    function getAddress(bytes32 _key) external view returns (address);\n', '    function getUint(bytes32 _key) external view returns (uint);\n', '    function getString(bytes32 _key) external view returns (string);\n', '    function getBytes(bytes32 _key) external view returns (bytes);\n', '    function getBool(bytes32 _key) external view returns (bool);\n', '    function getInt(bytes32 _key) external view returns (int);\n', '    // Setters\n', '    function setAddress(bytes32 _key, address _value) onlyLatestRocketNetworkContract external;\n', '    function setUint(bytes32 _key, uint _value) onlyLatestRocketNetworkContract external;\n', '    function setString(bytes32 _key, string _value) onlyLatestRocketNetworkContract external;\n', '    function setBytes(bytes32 _key, bytes _value) onlyLatestRocketNetworkContract external;\n', '    function setBool(bytes32 _key, bool _value) onlyLatestRocketNetworkContract external;\n', '    function setInt(bytes32 _key, int _value) onlyLatestRocketNetworkContract external;\n', '    // Deleters\n', '    function deleteAddress(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    function deleteUint(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    function deleteString(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    function deleteBytes(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    function deleteBool(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    function deleteInt(bytes32 _key) onlyLatestRocketNetworkContract external;\n', '    // Hash helpers\n', '    function kcck256str(string _key1) external pure returns (bytes32);\n', '    function kcck256strstr(string _key1, string _key2) external pure returns (bytes32);\n', '    function kcck256stradd(string _key1, address _key2) external pure returns (bytes32);\n', '    function kcck256straddadd(string _key1, address _key2, address _key3) external pure returns (bytes32);\n', '}\n', '\n', '// File: contracts/storage/RocketBase.sol\n', '\n', '/// @title Base settings / modifiers for each contract in Rocket Pool\n', '/// @author David Rugendyke\n', 'contract RocketBase {\n', '\n', '    /*** Events ****************/\n', '\n', '    event ContractAdded (\n', '        address indexed _newContractAddress,                    // Address of the new contract\n', '        uint256 created                                         // Creation timestamp\n', '    );\n', '\n', '    event ContractUpgraded (\n', '        address indexed _oldContractAddress,                    // Address of the contract being upgraded\n', '        address indexed _newContractAddress,                    // Address of the new contract\n', '        uint256 created                                         // Creation timestamp\n', '    );\n', '\n', '    /**** Properties ************/\n', '\n', '    uint8 public version;                                                   // Version of this contract\n', '\n', '\n', '    /*** Contracts **************/\n', '\n', '    RocketStorageInterface rocketStorage = RocketStorageInterface(0);       // The main storage contract where primary persistant storage is maintained\n', '\n', '\n', '    /*** Modifiers ************/\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        roleCheck("owner", msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to scope access to admins\n', '    */\n', '    modifier onlyAdmin() {\n', '        roleCheck("admin", msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to scope access to admins\n', '    */\n', '    modifier onlySuperUser() {\n', '        require(roleHas("owner", msg.sender) || roleHas("admin", msg.sender));\n', '        _;\n', '    }\n', '\n', '    /**\n', "    * @dev Reverts if the address doesn't have this role\n", '    */\n', '    modifier onlyRole(string _role) {\n', '        roleCheck(_role, msg.sender);\n', '        _;\n', '    }\n', '\n', '  \n', '    /*** Constructor **********/\n', '   \n', '    /// @dev Set the main Rocket Storage address\n', '    constructor(address _rocketStorageAddress) public {\n', '        // Update the contract address\n', '        rocketStorage = RocketStorageInterface(_rocketStorageAddress);\n', '    }\n', '\n', '\n', '    /*** Role Utilities */\n', '\n', '    /**\n', '    * @dev Check if an address is an owner\n', '    * @return bool\n', '    */\n', '    function isOwner(address _address) public view returns (bool) {\n', '        return rocketStorage.getBool(keccak256("access.role", "owner", _address));\n', '    }\n', '\n', '    /**\n', '    * @dev Check if an address has this role\n', '    * @return bool\n', '    */\n', '    function roleHas(string _role, address _address) internal view returns (bool) {\n', '        return rocketStorage.getBool(keccak256("access.role", _role, _address));\n', '    }\n', '\n', '     /**\n', "    * @dev Check if an address has this role, reverts if it doesn't\n", '    */\n', '    function roleCheck(string _role, address _address) view internal {\n', '        require(roleHas(_role, _address) == true);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Authorized.sol\n', '\n', '/**\n', ' * @title Authorized\n', ' * @dev The Authorized contract has an issuer, depository, and auditor address, and provides basic \n', ' * authorization control functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Authorized is RocketBase {\n', '\n', "    // The issuer's address\n", "    // In contract's RocketStorage \n", '    // address public token.issuer;\n', '\n', "    // The depository's address\n", "    // In contract's RocketStorage \n", '    // address public token.depository;\n', '\n', "    // The auditor's address\n", "    // In contract's RocketStorage \n", '    // address public token.auditor;\n', '\n', '    event IssuerTransferred(address indexed previousIssuer, address indexed newIssuer);\n', '    event AuditorTransferred(address indexed previousAuditor, address indexed newAuditor);\n', '    event DepositoryTransferred(address indexed previousDepository, address indexed newDepository);\n', '\n', '    /* \n', '     *  Modifiers\n', '     */\n', '\n', '    // Ensure sender is issuer   \n', '    modifier onlyIssuer {\n', '        require( msg.sender == issuer() );\n', '        _;\n', '    }\n', '\n', '    // Ensure sender is depository\n', '    modifier onlyDepository {\n', '        require( msg.sender == depository() );\n', '        _;\n', '    }\n', '\n', '    // Ensure sender is auditor\n', '    modifier onlyAuditor {\n', '        require( msg.sender == auditor() );\n', '        _;\n', '    }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to explicity assign a new issuer.\n', '   * @param newIssuer The address of the new issuer.\n', '   */\n', '  function setIssuer(address newIssuer) public onlyOwner {\n', '    require(newIssuer != address(0));\n', '    rocketStorage.setAddress(keccak256("token.issuer"), newIssuer);\n', '    emit IssuerTransferred(issuer(), newIssuer);\n', '  }\n', '\n', '  /**\n', '   * @dev Get the current issuer address from storage.\n', '   */\n', '  function issuer() public view returns (address) {\n', '    return rocketStorage.getAddress(keccak256("token.issuer"));\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to explicity assign a new auditor.\n', '   * @param newAuditor The address of the new auditor.\n', '   */\n', '  function setAuditor(address newAuditor) public onlyOwner {\n', '    require(newAuditor != address(0));\n', '    rocketStorage.setAddress(keccak256("token.auditor"), newAuditor);\n', '    emit AuditorTransferred(auditor(), newAuditor);\n', '  }\n', '\n', '  /**\n', '   * @dev Get the current auditor address from storage.\n', '   */\n', '  function auditor() public view returns (address) {\n', '    return rocketStorage.getAddress(keccak256("token.auditor"));\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to explicity assign a new depository.\n', '   * @param newDepository The address of the new depository.\n', '   */\n', '  function setDepository(address newDepository) public onlyOwner {\n', '    require(newDepository != address(0));\n', '    rocketStorage.setAddress(keccak256("token.depository"), newDepository);\n', '    emit DepositoryTransferred(depository(), newDepository);\n', '  }\n', '\n', '  /**\n', '   * @dev Get the current depository address from storage.\n', '   */\n', '  function depository() public view returns (address) {\n', '    return rocketStorage.getAddress(keccak256("token.depository"));\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/PausableRedemption.sol\n', '\n', '/**\n', ' * @title PausableRedemption\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism, specifically for redemption.\n', ' */\n', 'contract PausableRedemption is RocketBase {\n', '  event PauseRedemption();\n', '  event UnpauseRedemption();\n', '\n', '  // Whether redemption is paused or not\n', '  // Stored in RocketStorage\n', '  // bool public token.redemptionPaused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract redemption is not paused.\n', '   */\n', '  modifier whenRedemptionNotPaused() {\n', '    require(!redemptionPaused());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract redemption is paused.\n', '   */\n', '  modifier whenRedemptionPaused() {\n', '    require(redemptionPaused());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev returns the redemptionPaused status from contract storage\n', '   */\n', '  function redemptionPaused() public view returns (bool) {\n', '    return rocketStorage.getBool(keccak256("token.redemptionPaused"));\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pauseRedemption() onlyOwner whenRedemptionNotPaused public {\n', '    rocketStorage.setBool(keccak256("token.redemptionPaused"), true);\n', '    emit PauseRedemption();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause redemption, returns to normal state\n', '   */\n', '  function unpauseRedemption() onlyOwner whenRedemptionPaused public {\n', '    rocketStorage.setBool(keccak256("token.redemptionPaused"), false);\n', '    emit UnpauseRedemption();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/Issuable.sol\n', '\n', 'contract Issuable is RocketBase, Authorized, PausableRedemption {\n', '    using SafeMath for uint256;\n', '\n', '    event AssetsUpdated(address indexed depository, uint256 amount);\n', '    event CertificationUpdated(address indexed auditor, uint256 amount);\n', '\n', '    // Get assetsOnDeposit\n', '    function assetsOnDeposit() public view returns (uint256) {\n', '        return rocketStorage.getUint(keccak256("issuable.assetsOnDeposit"));\n', '    }\n', '\n', '    // Get assetsCertified\n', '    function assetsCertified() public view returns (uint256) {\n', '        return rocketStorage.getUint(keccak256("issuable.assetsCertified"));\n', '    }\n', '\n', '    /******* For paused redemption *******/\n', '\n', '    // Set assetsOnDeposit\n', '    function setAssetsOnDeposit(uint256 _total) public onlyDepository whenRedemptionPaused {\n', '        uint256 totalSupply_ = rocketStorage.getUint(keccak256("token.totalSupply"));\n', '        require(_total >= totalSupply_);\n', '        rocketStorage.setUint(keccak256("issuable.assetsOnDeposit"), _total);\n', '        emit AssetsUpdated(msg.sender, _total);\n', '    }\n', '\n', '    // Set assetsCertified\n', '    function setAssetsCertified(uint256 _total) public onlyAuditor whenRedemptionPaused {\n', '        uint256 totalSupply_ = rocketStorage.getUint(keccak256("token.totalSupply"));\n', '        require(_total >= totalSupply_);\n', '        rocketStorage.setUint(keccak256("issuable.assetsCertified"), _total);\n', '        emit CertificationUpdated(msg.sender, _total);\n', '    }\n', '\n', '    /******* For during both paused and non-paused redemption *******/\n', '\n', '    // Depository can receive assets (increasing)\n', '    function receiveAssets(uint256 _units) public onlyDepository {\n', '        uint256 total_ = assetsOnDeposit().add(_units);\n', '        rocketStorage.setUint(keccak256("issuable.assetsOnDeposit"), total_);\n', '        emit AssetsUpdated(msg.sender, total_);\n', '    }\n', '\n', '    // Depository can release assets (decreasing), but never to less than the totalSupply\n', '    function releaseAssets(uint256 _units) public onlyDepository {\n', '        uint256 totalSupply_ = rocketStorage.getUint(keccak256("token.totalSupply"));\n', '        uint256 total_ = assetsOnDeposit().sub(_units);\n', '        require(total_ >= totalSupply_);\n', '        rocketStorage.setUint(keccak256("issuable.assetsOnDeposit"), total_);\n', '        emit AssetsUpdated(msg.sender, total_);\n', '    }\n', '\n', '    // Auditor can increase certified assets\n', '    function increaseAssetsCertified(uint256 _units) public onlyAuditor {\n', '        uint256 total_ = assetsCertified().add(_units);\n', '        rocketStorage.setUint(keccak256("issuable.assetsCertified"), total_);\n', '        emit CertificationUpdated(msg.sender, total_);\n', '    }\n', '\n', '    // Auditor can decrease certified assets\n', '    function decreaseAssetsCertified(uint256 _units) public onlyAuditor {\n', '        uint256 totalSupply_ = rocketStorage.getUint(keccak256("token.totalSupply"));\n', '        uint256 total_ = assetsCertified().sub(_units);\n', '        require(total_ >= totalSupply_);\n', '        rocketStorage.setUint(keccak256("issuable.assetsCertified"), total_);\n', '        emit CertificationUpdated(msg.sender, total_);\n', '    }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/LD2Token.sol\n', '\n', '/// @title The primary ERC20 token contract, using LD2 storage\n', '/// @author Steven Brendtro\n', 'contract LD2Token is ERC20, RocketBase, Issuable {\n', '  using SafeMath for uint256;\n', '\n', '  event TokensIssued(address indexed issuer, uint256 amount);\n', '\n', '  // The balances of the token, per ERC20, but stored in contract storage (rocketStorage)\n', '  // mapping(address => uint256) token.balances;\n', '\n', '  // The totalSupply of the token, per ERC20, but stored in contract storage (rocketStorage)\n', '  // uint256 token.totalSupply;\n', '\n', '  // The authorizations of the token, per ERC20, but stored in contract storage (rocketStorage)\n', '  // This is accomplished by hashing token.allowed + _fromAddr + _toAddr\n', '  // mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return rocketStorage.getUint(keccak256("token.totalSupply"));\n', '  }\n', '\n', '  /**\n', '  * @dev increase total number of tokens in existence\n', '  */\n', '  function increaseTotalSupply(uint256 _increase) internal {\n', '    uint256 totalSupply_ = totalSupply();\n', '    totalSupply_ = totalSupply_.add(_increase);\n', '    rocketStorage.setUint(keccak256("token.totalSupply"),totalSupply_);\n', '  }\n', '\n', '  /**\n', '  * @dev decrease total number of tokens in existence\n', '  */\n', '  function decreaseTotalSupply(uint256 _decrease) internal {\n', '    uint256 totalSupply_ = totalSupply();\n', '    totalSupply_ = totalSupply_.sub(_decrease);\n', '    rocketStorage.setUint(keccak256("token.totalSupply"),totalSupply_);\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf(msg.sender));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    // Use the contract storage\n', '    setBalanceOf(msg.sender, balanceOf(msg.sender).sub(_value));\n', '    setBalanceOf(_to, balanceOf(_to).add(_value));\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return rocketStorage.getUint(keccak256("token.balances",_owner));\n', '  }\n', '\n', '  /**\n', '  * @dev Updates the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @param _balance An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function setBalanceOf(address _owner, uint256 _balance) internal {\n', '    rocketStorage.setUint(keccak256("token.balances",_owner), _balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return rocketStorage.getUint(keccak256("token.allowed",_owner,_spender));\n', '  }\n', '\n', '  /**\n', '  * @dev Updates the allowance by _owner of the _spender to have access to _balance.\n', '  * @param _owner The address to query the the balance of.\n', '  * @param _spender The address which will spend the funds\n', '  * @param _balance An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function setAllowance(address _owner, address _spender, uint256 _balance) internal {\n', '    rocketStorage.setUint(keccak256("token.allowed",_owner,_spender), _balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf(_from));\n', '    require(_value <= allowance(_from, msg.sender));\n', '    \n', '    setBalanceOf(_from, balanceOf(_from).sub(_value));\n', '    setBalanceOf(_to, balanceOf(_to).add(_value));\n', '    setAllowance(_from, msg.sender, allowance(_from, msg.sender).sub(_value));\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    setAllowance(msg.sender, _spender, _value);\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    setAllowance(msg.sender, _spender, allowance(msg.sender, _spender).add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowance(msg.sender, _spender);\n', '    if (_subtractedValue > oldValue) {\n', '      setAllowance(msg.sender, _spender, 0);\n', '    } else {\n', '      setAllowance(msg.sender, _spender, oldValue.sub(_subtractedValue));\n', '    }\n', '    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * Issuer can only issue tokens up to the lesser of assetsOnDeposit and\n', '   * assetsCertified.  This prevents issuing uncertified tokens and ensures\n', '   * that every token issued has exactly one unit of the asset backing it.\n', '   * @param _units Total amount of additional tokens to issue\n', '   */\n', '  function issueTokensForAssets( uint256 _units ) public onlyIssuer {\n', '\n', '    uint256 newSupply_ = totalSupply().add(_units);\n', '\n', '    // Find the greater of assetsOnDeposit and assetsCertified\n', '    uint256 limit_ = 0;\n', '    if ( assetsOnDeposit() > assetsCertified() )\n', '      limit_ = assetsOnDeposit();\n', '    else\n', '      limit_ = assetsCertified();\n', '\n', "    // the new supply can't be larger than our issuance limit\n", '    require( newSupply_ <= limit_ );\n', '\n', '    // Increase the total supply\n', '    increaseTotalSupply( _units );\n', '\n', "    // Increase the issuer's balance\n", '    setBalanceOf(issuer(), balanceOf(issuer()).add(_units));\n', '\n', '    emit TokensIssued(issuer(), _units);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/LD2Zero.sol\n', '\n', '/// @title The LD2-style ERC20 token for LD2.zero\n', '/// @author Steven Brendtro\n', 'contract LD2Zero is LD2Token {\n', '\n', '  string public name = "LD2.zero";\n', '  string public symbol = "XLDZ";\n', '  // Decimals are stored in RocketStorage\n', '  // uint8 public token.decimals = 18;\n', '\n', '  /*** Constructor ***********/\n', '\n', '  /// @dev LD2Zero constructor\n', '  constructor(address _rocketStorageAddress) RocketBase(_rocketStorageAddress) public {\n', '    // Set the decimals\n', '    if(decimals() == 0) {\n', '      rocketStorage.setUint(keccak256("token.decimals"),18);\n', '    }\n', '  }\n', '\n', '  function decimals() public view returns (uint8) {\n', '    return uint8(rocketStorage.getUint(keccak256("token.decimals")));\n', '  }\n', '\n', '}']
