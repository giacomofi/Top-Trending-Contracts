['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '}\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ; }\n', '\n', 'contract TokenERC20 is SafeMath {\n', '    // Public variables of the token\n', '    string public name = "World Trading Unit";\n', '    string public symbol = "WTU";\n', '    uint8 public decimals = 8;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public TotalToken = 21000000;\n', '    uint256 public RemainingTokenStockForSale;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20() public {\n', '        RemainingTokenStockForSale = safeMul(TotalToken,10 ** uint256(decimals));  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = RemainingTokenStockForSale;                    // Give the creator all initial tokens\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = safeAdd(balanceOf[_from],balanceOf[_to]);\n', '        // Subtract from the sender\n', '        balanceOf[_from] =  safeSub(balanceOf[_from], _value);\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = safeAdd(balanceOf[_to],_value);\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(safeAdd(balanceOf[_from],balanceOf[_to]) == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender],_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender],_value);      // Subtract from the sender\n', '        RemainingTokenStockForSale = safeSub(RemainingTokenStockForSale,_value);                // Updates RemainingTokenStockForSale\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender]  = safeSub(allowance[_from][msg.sender],_value);             // Subtract from the sender&#39;s allowance\n', '        RemainingTokenStockForSale = safeSub(RemainingTokenStockForSale,_value);                              // Update RemainingTokenStockForSale\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       ADVANCED TOKEN STARTS HERE       */\n', '/******************************************/\n', '\n', 'contract MyAdvancedToken is owned, TokenERC20 {\n', '\n', '    uint256 public sellPrice = 0.001 ether;\n', '    uint256 public buyPrice = 0.001 ether;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (safeAdd(balanceOf[_to],_value) > balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] = safeSub(balanceOf[_from],_value);                         // Subtract from the sender\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);                           // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '    /// @param newSellPrice Price the users can sell to the contract\n', '    /// @param newBuyPrice Price users can buy from the contract\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buy() payable public {\n', '        uint amount = safeDiv(msg.value, buyPrice);               // calculates the amount\n', '        _transfer(this, msg.sender, amount);              // makes the transfers\n', '    }\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '    function sell(uint256 amount) public {\n', '        require(this.balance >= safeMul(amount,sellPrice));      // checks if the contract has enough ether to buy\n', '        _transfer(msg.sender, this, amount);              // makes the transfers\n', '        msg.sender.transfer(safeMul(amount, sellPrice));          // sends ether to the seller. It&#39;s important to do this last to avoid recursion attacks\n', '    }\n', '    //FallBack \n', '    function () payable public {\n', '        \n', '    }\n', '/*\n', 'Fonction de repli FallBack (fonction sans nom)\n', 'Un contrat peut avoir exactement une fonction sans nom. Cette fonction ne peut pas avoir d&#39;arguments et ne peut rien retourner. Il est ex&#233;cut&#233; sur un appel au contrat si aucune des autres fonctions ne correspond &#224; l&#39;identificateur de fonction donn&#233; (ou si aucune donn&#233;e n&#39;a &#233;t&#233; fournie).\n', '\n', 'De plus, cette fonction est ex&#233;cut&#233;e chaque fois que le contrat re&#231;oit un Ether (sans donn&#233;es). De plus, afin de recevoir Ether, la fonction de repli doit &#234;tre marqu&#233;e payable. Si aucune fonction n&#39;existe, le contrat ne peut pas recevoir Ether via des transactions r&#233;guli&#232;res.\n', '\n', 'Dans le pire des cas, la fonction de repli ne peut compter que sur 2300 gaz disponibles (par exemple lorsque l&#39;envoi ou le transfert est utilis&#233;), ne laissant pas beaucoup de place pour effectuer d&#39;autres op&#233;rations sauf la journalisation de base.\n', 'Les op&#233;rations suivantes consomment plus de gaz que l&#39;allocation de gaz 2300:\n', '\n', ' - Ecrire dans le stockage\n', ' - Cr&#233;er un contrat\n', ' - Appel d&#39;une fonction externe qui consomme une grande quantit&#233; de gaz\n', ' - Envoyer Ether\n', ' \n', 'Comme toute fonction, la fonction de repli peut ex&#233;cuter des op&#233;rations complexes tant qu&#39;il y a suffisamment de gaz.\n', '\n', 'Remarque\n', ' M&#234;me si la fonction de remplacement ne peut pas avoir d&#39;arguments, vous pouvez toujours utiliser msg.data pour r&#233;cup&#233;rer les donn&#233;es utiles fournies avec l&#39;appel.\n', '\n', 'Attention\n', ' Les contrats qui re&#231;oivent directement Ether \n', ' (sans appel de fonction, c&#39;est-&#224;-dire en utilisant send ou transfer)\n', ' mais ne d&#233;finissent pas de fonction de repli jettent une exception,\n', ' renvoyant l&#39;Ether (ceci &#233;tait diff&#233;rent avant Solidity v0.4.0).\n', ' Donc, si vous voulez que votre contrat re&#231;oive Ether, \n', ' vous devez impl&#233;menter une fonction de repli.\n', ' \n', '\n', 'Attention\n', ' Un contrat sans fonction de repli payable peut recevoir Ether \n', ' en tant que destinataire d&#39;une transaction coinbase \n', ' (r&#233;compense de bloc minier) \n', ' ou en tant que destination d&#39;un selfdestruct.\n', '\n', 'Un contrat ne peut pas r&#233;agir &#224; ces transferts Ether et ne peut donc pas les rejeter.\n', 'C&#39;est un choix de conception de l&#39;EVM et Solidity ne peut pas contourner ce probl&#232;me.\n', '\n', 'Cela signifie &#233;galement que cette valeur peut &#234;tre sup&#233;rieure &#224; la somme de certains comptes manuels impl&#233;ment&#233;s dans un contrat (c&#39;est-&#224;-dire avoir un compteur mis &#224; jour dans la fonction de repli).\n', '*/\n', '\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '}\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ; }\n', '\n', 'contract TokenERC20 is SafeMath {\n', '    // Public variables of the token\n', '    string public name = "World Trading Unit";\n', '    string public symbol = "WTU";\n', '    uint8 public decimals = 8;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public TotalToken = 21000000;\n', '    uint256 public RemainingTokenStockForSale;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20() public {\n', '        RemainingTokenStockForSale = safeMul(TotalToken,10 ** uint256(decimals));  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = RemainingTokenStockForSale;                    // Give the creator all initial tokens\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = safeAdd(balanceOf[_from],balanceOf[_to]);\n', '        // Subtract from the sender\n', '        balanceOf[_from] =  safeSub(balanceOf[_from], _value);\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = safeAdd(balanceOf[_to],_value);\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(safeAdd(balanceOf[_from],balanceOf[_to]) == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender],_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender],_value);      // Subtract from the sender\n', '        RemainingTokenStockForSale = safeSub(RemainingTokenStockForSale,_value);                // Updates RemainingTokenStockForSale\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender]  = safeSub(allowance[_from][msg.sender],_value);             // Subtract from the sender's allowance\n", '        RemainingTokenStockForSale = safeSub(RemainingTokenStockForSale,_value);                              // Update RemainingTokenStockForSale\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       ADVANCED TOKEN STARTS HERE       */\n', '/******************************************/\n', '\n', 'contract MyAdvancedToken is owned, TokenERC20 {\n', '\n', '    uint256 public sellPrice = 0.001 ether;\n', '    uint256 public buyPrice = 0.001 ether;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (safeAdd(balanceOf[_to],_value) > balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] = safeSub(balanceOf[_from],_value);                         // Subtract from the sender\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);                           // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '    /// @param newSellPrice Price the users can sell to the contract\n', '    /// @param newBuyPrice Price users can buy from the contract\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buy() payable public {\n', '        uint amount = safeDiv(msg.value, buyPrice);               // calculates the amount\n', '        _transfer(this, msg.sender, amount);              // makes the transfers\n', '    }\n', '\n', '    /// @notice Sell `amount` tokens to contract\n', '    /// @param amount amount of tokens to be sold\n', '    function sell(uint256 amount) public {\n', '        require(this.balance >= safeMul(amount,sellPrice));      // checks if the contract has enough ether to buy\n', '        _transfer(msg.sender, this, amount);              // makes the transfers\n', "        msg.sender.transfer(safeMul(amount, sellPrice));          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    }\n', '    //FallBack \n', '    function () payable public {\n', '        \n', '    }\n', '/*\n', 'Fonction de repli FallBack (fonction sans nom)\n', "Un contrat peut avoir exactement une fonction sans nom. Cette fonction ne peut pas avoir d'arguments et ne peut rien retourner. Il est exécuté sur un appel au contrat si aucune des autres fonctions ne correspond à l'identificateur de fonction donné (ou si aucune donnée n'a été fournie).\n", '\n', "De plus, cette fonction est exécutée chaque fois que le contrat reçoit un Ether (sans données). De plus, afin de recevoir Ether, la fonction de repli doit être marquée payable. Si aucune fonction n'existe, le contrat ne peut pas recevoir Ether via des transactions régulières.\n", '\n', "Dans le pire des cas, la fonction de repli ne peut compter que sur 2300 gaz disponibles (par exemple lorsque l'envoi ou le transfert est utilisé), ne laissant pas beaucoup de place pour effectuer d'autres opérations sauf la journalisation de base.\n", "Les opérations suivantes consomment plus de gaz que l'allocation de gaz 2300:\n", '\n', ' - Ecrire dans le stockage\n', ' - Créer un contrat\n', " - Appel d'une fonction externe qui consomme une grande quantité de gaz\n", ' - Envoyer Ether\n', ' \n', "Comme toute fonction, la fonction de repli peut exécuter des opérations complexes tant qu'il y a suffisamment de gaz.\n", '\n', 'Remarque\n', " Même si la fonction de remplacement ne peut pas avoir d'arguments, vous pouvez toujours utiliser msg.data pour récupérer les données utiles fournies avec l'appel.\n", '\n', 'Attention\n', ' Les contrats qui reçoivent directement Ether \n', " (sans appel de fonction, c'est-à-dire en utilisant send ou transfer)\n", ' mais ne définissent pas de fonction de repli jettent une exception,\n', " renvoyant l'Ether (ceci était différent avant Solidity v0.4.0).\n", ' Donc, si vous voulez que votre contrat reçoive Ether, \n', ' vous devez implémenter une fonction de repli.\n', ' \n', '\n', 'Attention\n', ' Un contrat sans fonction de repli payable peut recevoir Ether \n', " en tant que destinataire d'une transaction coinbase \n", ' (récompense de bloc minier) \n', " ou en tant que destination d'un selfdestruct.\n", '\n', 'Un contrat ne peut pas réagir à ces transferts Ether et ne peut donc pas les rejeter.\n', "C'est un choix de conception de l'EVM et Solidity ne peut pas contourner ce problème.\n", '\n', "Cela signifie également que cette valeur peut être supérieure à la somme de certains comptes manuels implémentés dans un contrat (c'est-à-dire avoir un compteur mis à jour dans la fonction de repli).\n", '*/\n', '\n', '\n', '}']
