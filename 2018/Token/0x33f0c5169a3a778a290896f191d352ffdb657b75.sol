['pragma solidity ^0.4.24;\n', '\n', 'contract TokenInterface {\n', '    function name() public view returns (string);\n', '    function symbol() public view returns (string);\n', '    function decimals() public view returns (uint256);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '}\n', '\n', 'contract AltTokenInterface {\n', '    function name() public view returns (bytes32);\n', '    function symbol() public view returns (bytes32);\n', '    function decimals() public view returns (uint256);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '}\n', '\n', 'contract Utils {\n', '    function contractuallyOf(address _address) public view returns(bool) {\n', '        uint length;\n', '        assembly {\n', '            length := extcodesize(_address)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    function tokenOf(address _contract, address _owner) public view returns(\n', '        bool contractually,\n', '        bool tokenized,\n', '        string name,\n', '        string symbol,\n', '        uint256 decimals,\n', '        uint256 totalSupply,\n', '        uint256 balance\n', '    ) {\n', '        contractually = contractuallyOf(_contract);\n', '        if (contractually) {\n', '            TokenInterface token = TokenInterface(_contract);\n', '            name = token.name();\n', '            symbol = token.symbol();\n', '            decimals = token.decimals();\n', '            totalSupply = token.totalSupply();\n', '            balance = token.balanceOf(_owner);\n', '            \n', '            if (bytes(name).length > 0 && bytes(symbol).length > 0) {\n', '                tokenized = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function altTokenOf(address _contract, address _owner) public view returns(\n', '        bool contractually,\n', '        bool tokenized,\n', '        string name,\n', '        string symbol,\n', '        uint256 decimals,\n', '        uint256 totalSupply,\n', '        uint256 balance\n', '    ) {\n', '        contractually = contractuallyOf(_contract);\n', '        if (contractually) {\n', '            AltTokenInterface token = AltTokenInterface(_contract);\n', '            decimals = token.decimals();\n', '            totalSupply = token.totalSupply();\n', '            balance = token.balanceOf(_owner);\n', '\n', '            bytes32 _name = token.name();\n', '            bytes32 _symbol = token.symbol();\n', '\n', '            if (_name.length > 0 && _symbol.length > 0) {\n', '                tokenized = true;\n', '            }\n', '            \n', '            name = bytes32ToString(_name);\n', '            symbol = bytes32ToString(_symbol);\n', '        }\n', '    }\n', '    \n', '    function balanceOf(address[] _contracts, address _owner) public view returns(uint256[]) {\n', '        uint8 count = uint8(_contracts.length);\n', '        if (count > 0) {\n', '            uint256[] memory balances = new uint256[](count);\n', '            for (uint8 i = 0; i < count; i++) {\n', '                TokenInterface token = TokenInterface(_contracts[i]);\n', '                balances[i] = token.balanceOf(_owner);\n', '            }\n', '            return balances;\n', '        }\n', '        return new uint256[](0);\n', '    }\n', '\n', '    function recover(bytes32 _hash, bytes _sig) public pure returns (address) {\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        if (_sig.length != 65) {\n', '            return (address(0));\n', '        }\n', '\n', '        assembly {\n', '            r := mload(add(_sig, 32))\n', '            s := mload(add(_sig, 64))\n', '            v := byte(0, mload(add(_sig, 96)))\n', '        }\n', '\n', '        if (v < 27) {\n', '            v += 27;\n', '        }\n', '\n', '        if (v != 27 && v != 28) {\n', '            return (address(0));\n', '        } else {\n', '            // solium-disable-next-line arg-overflow\n', '            return ecrecover(_hash, v, r, s);\n', '        }\n', '    }\n', '\n', '    function bytes32ToString(bytes32 _input) internal constant returns (string) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(_input) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }\n', '}']