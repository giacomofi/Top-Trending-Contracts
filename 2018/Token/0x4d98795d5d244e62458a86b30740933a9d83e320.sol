['pragma solidity ^0.4.4;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20: Token standard\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandartToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal total;\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return total;\n', '    }\n', '    \n', '    function balanceOf(address owner) public constant returns (uint256) {\n', '        return balances[owner];\n', '    }\n', '    \n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(to != address(0));\n', '        require(value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        \n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(to != address(0));\n', '        require(value <= balances[from]);\n', '        require(value <= allowed[from][msg.sender]);\n', '        \n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        \n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public constant returns (uint256 remaining) {\n', '        return allowed[owner][spender];\n', '    }\n', '}\n', '\n', 'contract BackTestToken is StandartToken\n', '{\n', '    uint8 public constant decimals = 18;\n', '    string public constant name = "Back Test Token";\n', '    string public constant symbol = "BTT";\n', '    uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals));\n', '    uint256 private constant reqvalue = 1 * (10 ** uint256(decimals));\n', '\n', '    address internal holder;\n', '\n', '    constructor() public {\n', '        holder = msg.sender;\n', '        total = INITIAL_SUPPLY;\n', '        balances[holder] = INITIAL_SUPPLY;\n', '    }\n', '\n', '    function() public payable {\n', '        require(msg.sender != address(0));\n', '        require(reqvalue <= balances[holder]);\n', '\n', '        if(msg.value > 0) msg.sender.transfer(msg.value);\n', '\n', '        balances[holder] = balances[holder].sub(reqvalue);\n', '        balances[msg.sender] = balances[msg.sender].add(reqvalue);\n', '        \n', '        emit Transfer(holder, msg.sender, reqvalue);\n', '    }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20: Token standard\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandartToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal total;\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return total;\n', '    }\n', '    \n', '    function balanceOf(address owner) public constant returns (uint256) {\n', '        return balances[owner];\n', '    }\n', '    \n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(to != address(0));\n', '        require(value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        \n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(to != address(0));\n', '        require(value <= balances[from]);\n', '        require(value <= allowed[from][msg.sender]);\n', '        \n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        \n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public constant returns (uint256 remaining) {\n', '        return allowed[owner][spender];\n', '    }\n', '}\n', '\n', 'contract BackTestToken is StandartToken\n', '{\n', '    uint8 public constant decimals = 18;\n', '    string public constant name = "Back Test Token";\n', '    string public constant symbol = "BTT";\n', '    uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals));\n', '    uint256 private constant reqvalue = 1 * (10 ** uint256(decimals));\n', '\n', '    address internal holder;\n', '\n', '    constructor() public {\n', '        holder = msg.sender;\n', '        total = INITIAL_SUPPLY;\n', '        balances[holder] = INITIAL_SUPPLY;\n', '    }\n', '\n', '    function() public payable {\n', '        require(msg.sender != address(0));\n', '        require(reqvalue <= balances[holder]);\n', '\n', '        if(msg.value > 0) msg.sender.transfer(msg.value);\n', '\n', '        balances[holder] = balances[holder].sub(reqvalue);\n', '        balances[msg.sender] = balances[msg.sender].add(reqvalue);\n', '        \n', '        emit Transfer(holder, msg.sender, reqvalue);\n', '    }\n', '}']
