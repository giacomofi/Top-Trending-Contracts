['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * Safe unsigned safe math.\n', ' *\n', ' * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\n', ' *\n', ' * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\n', ' *\n', ' * Maintained here until merged to mainline zeppelin-solidity.\n', ' *\n', ' */\n', 'library SafeMathLibExt {\n', '\n', '    function times(uint a, uint b) public pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function divides(uint a, uint b) public pure returns (uint) {\n', '        assert(b > 0);\n', '        uint c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function minus(uint a, uint b) public pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function plus(uint a, uint b) public pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Allocatable is Ownable {\n', '\n', '  /** List of agents that are allowed to allocate new tokens */\n', '    mapping (address => bool) public allocateAgents;\n', '\n', '    event AllocateAgentChanged(address addr, bool state  );\n', '\n', '  /**\n', '   * Owner can allow a crowdsale contract to allocate new tokens.\n', '   */\n', '    function setAllocateAgent(address addr, bool state) public onlyOwner  \n', '    {\n', '        allocateAgents[addr] = state;\n', '        emit AllocateAgentChanged(addr, state);\n', '    }\n', '\n', '    modifier onlyAllocateAgent() {\n', '        //Only crowdsale contracts are allowed to allocate new tokens\n', '        require(allocateAgents[msg.sender]);\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * Contract to enforce Token Vesting\n', ' */\n', 'contract TokenVesting is Allocatable {\n', '\n', '    using SafeMathLibExt for uint;\n', '\n', '    address public crowdSaleTokenAddress;\n', '\n', '    /** keep track of total tokens yet to be released, \n', '     * this should be less than or equal to UTIX tokens held by this contract. \n', '     */\n', '    uint256 public totalUnreleasedTokens;\n', '\n', '    // default vesting parameters\n', '    uint256 private startAt = 0;\n', '    uint256 private cliff = 1;\n', '    uint256 private duration = 4; \n', '    uint256 private step = 300; //15778463;  //2592000;\n', '    bool private changeFreezed = false;\n', '\n', '    struct VestingSchedule {\n', '        uint256 startAt;\n', '        uint256 cliff;\n', '        uint256 duration;\n', '        uint256 step;\n', '        uint256 amount;\n', '        uint256 amountReleased;\n', '        bool changeFreezed;\n', '    }\n', '\n', '    mapping (address => VestingSchedule) public vestingMap;\n', '\n', '    event VestedTokensReleased(address _adr, uint256 _amount);\n', '    \n', '    constructor(address _tokenAddress) public {\n', '        \n', '        crowdSaleTokenAddress = _tokenAddress;\n', '    }\n', '\n', '    /** Modifier to check if changes to vesting is freezed  */\n', '    modifier changesToVestingFreezed(address _adr) {\n', '        require(vestingMap[_adr].changeFreezed);\n', '        _;\n', '    }\n', '\n', '    /** Modifier to check if changes to vesting is not freezed yet  */\n', '    modifier changesToVestingNotFreezed(address adr) {\n', '        require(!vestingMap[adr].changeFreezed); // if vesting not set then also changeFreezed will be false\n', '        _;\n', '    }\n', '\n', '    /** Function to set default vesting schedule parameters. */\n', '    function setDefaultVestingParameters(\n', '        uint256 _startAt, uint256 _cliff, uint256 _duration,\n', '        uint256 _step, bool _changeFreezed) public onlyAllocateAgent {\n', '\n', '        // data validation\n', '        require(_step != 0);\n', '        require(_duration != 0);\n', '        require(_cliff <= _duration);\n', '\n', '        startAt = _startAt;\n', '        cliff = _cliff;\n', '        duration = _duration; \n', '        step = _step;\n', '        changeFreezed = _changeFreezed;\n', '\n', '    }\n', '\n', '    /** Function to set vesting with default schedule. */\n', '    function setVestingWithDefaultSchedule(address _adr, uint256 _amount) \n', '    public \n', '    changesToVestingNotFreezed(_adr) onlyAllocateAgent {\n', '       \n', '        setVesting(_adr, startAt, cliff, duration, step, _amount, changeFreezed);\n', '    }    \n', '\n', '    /** Function to set/update vesting schedule. PS - Amount cannot be changed once set */\n', '    function setVesting(\n', '        address _adr,\n', '        uint256 _startAt,\n', '        uint256 _cliff,\n', '        uint256 _duration,\n', '        uint256 _step,\n', '        uint256 _amount,\n', '        bool _changeFreezed) \n', '    public changesToVestingNotFreezed(_adr) onlyAllocateAgent {\n', '\n', '        VestingSchedule storage vestingSchedule = vestingMap[_adr];\n', '\n', '        // data validation\n', '        require(_step != 0);\n', '        require(_amount != 0 || vestingSchedule.amount > 0);\n', '        require(_duration != 0);\n', '        require(_cliff <= _duration);\n', '\n', '        //if startAt is zero, set current time as start time.\n', '        if (_startAt == 0) \n', '            _startAt = block.timestamp;\n', '\n', '        vestingSchedule.startAt = _startAt;\n', '        vestingSchedule.cliff = _cliff;\n', '        vestingSchedule.duration = _duration;\n', '        vestingSchedule.step = _step;\n', '\n', '        // special processing for first time vesting setting\n', '        if (vestingSchedule.amount == 0) {\n', '            // check if enough tokens are held by this contract\n', '            ERC20 token = ERC20(crowdSaleTokenAddress);\n', '            require(token.balanceOf(this) >= totalUnreleasedTokens.plus(_amount));\n', '            totalUnreleasedTokens = totalUnreleasedTokens.plus(_amount);\n', '            vestingSchedule.amount = _amount; \n', '        }\n', '\n', '        vestingSchedule.amountReleased = 0;\n', '        vestingSchedule.changeFreezed = _changeFreezed;\n', '    }\n', '\n', '    function isVestingSet(address adr) public view returns (bool isSet) {\n', '        return vestingMap[adr].amount != 0;\n', '    }\n', '\n', '    function freezeChangesToVesting(address _adr) public changesToVestingNotFreezed(_adr) onlyAllocateAgent {\n', '        require(isVestingSet(_adr)); // first check if vesting is set\n', '        vestingMap[_adr].changeFreezed = true;\n', '    }\n', '\n', '    /** Release tokens as per vesting schedule, called by contributor  */\n', '    function releaseMyVestedTokens() public changesToVestingFreezed(msg.sender) {\n', '        releaseVestedTokens(msg.sender);\n', '    }\n', '\n', '    /** Release tokens as per vesting schedule, called by anyone  */\n', '    function releaseVestedTokens(address _adr) public changesToVestingFreezed(_adr) {\n', '        VestingSchedule storage vestingSchedule = vestingMap[_adr];\n', '        \n', '        // check if all tokens are not vested\n', '        require(vestingSchedule.amount.minus(vestingSchedule.amountReleased) > 0);\n', '        \n', '        // calculate total vested tokens till now\n', '        uint256 totalTime = block.timestamp - vestingSchedule.startAt;\n', '        uint256 totalSteps = totalTime / vestingSchedule.step;\n', '\n', '        // check if cliff is passed\n', '        require(vestingSchedule.cliff <= totalSteps);\n', '\n', '        uint256 tokensPerStep = vestingSchedule.amount / vestingSchedule.duration;\n', '        // check if amount is divisble by duration\n', '        if (tokensPerStep * vestingSchedule.duration != vestingSchedule.amount) tokensPerStep++;\n', '\n', '        uint256 totalReleasableAmount = tokensPerStep.times(totalSteps);\n', '\n', '        // handle the case if user has not claimed even after vesting period is over or amount was not divisible\n', '        if (totalReleasableAmount > vestingSchedule.amount) totalReleasableAmount = vestingSchedule.amount;\n', '\n', '        uint256 amountToRelease = totalReleasableAmount.minus(vestingSchedule.amountReleased);\n', '        vestingSchedule.amountReleased = vestingSchedule.amountReleased.plus(amountToRelease);\n', '\n', '        // transfer vested tokens\n', '        ERC20 token = ERC20(crowdSaleTokenAddress);\n', '        token.transfer(_adr, amountToRelease);\n', '        // decrement overall unreleased token count\n', '        totalUnreleasedTokens = totalUnreleasedTokens.minus(amountToRelease);\n', '        emit VestedTokensReleased(_adr, amountToRelease);\n', '    }\n', '\n', '    /**\n', '    * Allow to (re)set Token.\n', '    */\n', '    function setCrowdsaleTokenExtv1(address _token) public onlyAllocateAgent {       \n', '        crowdSaleTokenAddress = _token;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * Safe unsigned safe math.\n', ' *\n', ' * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\n', ' *\n', ' * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\n', ' *\n', ' * Maintained here until merged to mainline zeppelin-solidity.\n', ' *\n', ' */\n', 'library SafeMathLibExt {\n', '\n', '    function times(uint a, uint b) public pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function divides(uint a, uint b) public pure returns (uint) {\n', '        assert(b > 0);\n', '        uint c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function minus(uint a, uint b) public pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function plus(uint a, uint b) public pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Allocatable is Ownable {\n', '\n', '  /** List of agents that are allowed to allocate new tokens */\n', '    mapping (address => bool) public allocateAgents;\n', '\n', '    event AllocateAgentChanged(address addr, bool state  );\n', '\n', '  /**\n', '   * Owner can allow a crowdsale contract to allocate new tokens.\n', '   */\n', '    function setAllocateAgent(address addr, bool state) public onlyOwner  \n', '    {\n', '        allocateAgents[addr] = state;\n', '        emit AllocateAgentChanged(addr, state);\n', '    }\n', '\n', '    modifier onlyAllocateAgent() {\n', '        //Only crowdsale contracts are allowed to allocate new tokens\n', '        require(allocateAgents[msg.sender]);\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * Contract to enforce Token Vesting\n', ' */\n', 'contract TokenVesting is Allocatable {\n', '\n', '    using SafeMathLibExt for uint;\n', '\n', '    address public crowdSaleTokenAddress;\n', '\n', '    /** keep track of total tokens yet to be released, \n', '     * this should be less than or equal to UTIX tokens held by this contract. \n', '     */\n', '    uint256 public totalUnreleasedTokens;\n', '\n', '    // default vesting parameters\n', '    uint256 private startAt = 0;\n', '    uint256 private cliff = 1;\n', '    uint256 private duration = 4; \n', '    uint256 private step = 300; //15778463;  //2592000;\n', '    bool private changeFreezed = false;\n', '\n', '    struct VestingSchedule {\n', '        uint256 startAt;\n', '        uint256 cliff;\n', '        uint256 duration;\n', '        uint256 step;\n', '        uint256 amount;\n', '        uint256 amountReleased;\n', '        bool changeFreezed;\n', '    }\n', '\n', '    mapping (address => VestingSchedule) public vestingMap;\n', '\n', '    event VestedTokensReleased(address _adr, uint256 _amount);\n', '    \n', '    constructor(address _tokenAddress) public {\n', '        \n', '        crowdSaleTokenAddress = _tokenAddress;\n', '    }\n', '\n', '    /** Modifier to check if changes to vesting is freezed  */\n', '    modifier changesToVestingFreezed(address _adr) {\n', '        require(vestingMap[_adr].changeFreezed);\n', '        _;\n', '    }\n', '\n', '    /** Modifier to check if changes to vesting is not freezed yet  */\n', '    modifier changesToVestingNotFreezed(address adr) {\n', '        require(!vestingMap[adr].changeFreezed); // if vesting not set then also changeFreezed will be false\n', '        _;\n', '    }\n', '\n', '    /** Function to set default vesting schedule parameters. */\n', '    function setDefaultVestingParameters(\n', '        uint256 _startAt, uint256 _cliff, uint256 _duration,\n', '        uint256 _step, bool _changeFreezed) public onlyAllocateAgent {\n', '\n', '        // data validation\n', '        require(_step != 0);\n', '        require(_duration != 0);\n', '        require(_cliff <= _duration);\n', '\n', '        startAt = _startAt;\n', '        cliff = _cliff;\n', '        duration = _duration; \n', '        step = _step;\n', '        changeFreezed = _changeFreezed;\n', '\n', '    }\n', '\n', '    /** Function to set vesting with default schedule. */\n', '    function setVestingWithDefaultSchedule(address _adr, uint256 _amount) \n', '    public \n', '    changesToVestingNotFreezed(_adr) onlyAllocateAgent {\n', '       \n', '        setVesting(_adr, startAt, cliff, duration, step, _amount, changeFreezed);\n', '    }    \n', '\n', '    /** Function to set/update vesting schedule. PS - Amount cannot be changed once set */\n', '    function setVesting(\n', '        address _adr,\n', '        uint256 _startAt,\n', '        uint256 _cliff,\n', '        uint256 _duration,\n', '        uint256 _step,\n', '        uint256 _amount,\n', '        bool _changeFreezed) \n', '    public changesToVestingNotFreezed(_adr) onlyAllocateAgent {\n', '\n', '        VestingSchedule storage vestingSchedule = vestingMap[_adr];\n', '\n', '        // data validation\n', '        require(_step != 0);\n', '        require(_amount != 0 || vestingSchedule.amount > 0);\n', '        require(_duration != 0);\n', '        require(_cliff <= _duration);\n', '\n', '        //if startAt is zero, set current time as start time.\n', '        if (_startAt == 0) \n', '            _startAt = block.timestamp;\n', '\n', '        vestingSchedule.startAt = _startAt;\n', '        vestingSchedule.cliff = _cliff;\n', '        vestingSchedule.duration = _duration;\n', '        vestingSchedule.step = _step;\n', '\n', '        // special processing for first time vesting setting\n', '        if (vestingSchedule.amount == 0) {\n', '            // check if enough tokens are held by this contract\n', '            ERC20 token = ERC20(crowdSaleTokenAddress);\n', '            require(token.balanceOf(this) >= totalUnreleasedTokens.plus(_amount));\n', '            totalUnreleasedTokens = totalUnreleasedTokens.plus(_amount);\n', '            vestingSchedule.amount = _amount; \n', '        }\n', '\n', '        vestingSchedule.amountReleased = 0;\n', '        vestingSchedule.changeFreezed = _changeFreezed;\n', '    }\n', '\n', '    function isVestingSet(address adr) public view returns (bool isSet) {\n', '        return vestingMap[adr].amount != 0;\n', '    }\n', '\n', '    function freezeChangesToVesting(address _adr) public changesToVestingNotFreezed(_adr) onlyAllocateAgent {\n', '        require(isVestingSet(_adr)); // first check if vesting is set\n', '        vestingMap[_adr].changeFreezed = true;\n', '    }\n', '\n', '    /** Release tokens as per vesting schedule, called by contributor  */\n', '    function releaseMyVestedTokens() public changesToVestingFreezed(msg.sender) {\n', '        releaseVestedTokens(msg.sender);\n', '    }\n', '\n', '    /** Release tokens as per vesting schedule, called by anyone  */\n', '    function releaseVestedTokens(address _adr) public changesToVestingFreezed(_adr) {\n', '        VestingSchedule storage vestingSchedule = vestingMap[_adr];\n', '        \n', '        // check if all tokens are not vested\n', '        require(vestingSchedule.amount.minus(vestingSchedule.amountReleased) > 0);\n', '        \n', '        // calculate total vested tokens till now\n', '        uint256 totalTime = block.timestamp - vestingSchedule.startAt;\n', '        uint256 totalSteps = totalTime / vestingSchedule.step;\n', '\n', '        // check if cliff is passed\n', '        require(vestingSchedule.cliff <= totalSteps);\n', '\n', '        uint256 tokensPerStep = vestingSchedule.amount / vestingSchedule.duration;\n', '        // check if amount is divisble by duration\n', '        if (tokensPerStep * vestingSchedule.duration != vestingSchedule.amount) tokensPerStep++;\n', '\n', '        uint256 totalReleasableAmount = tokensPerStep.times(totalSteps);\n', '\n', '        // handle the case if user has not claimed even after vesting period is over or amount was not divisible\n', '        if (totalReleasableAmount > vestingSchedule.amount) totalReleasableAmount = vestingSchedule.amount;\n', '\n', '        uint256 amountToRelease = totalReleasableAmount.minus(vestingSchedule.amountReleased);\n', '        vestingSchedule.amountReleased = vestingSchedule.amountReleased.plus(amountToRelease);\n', '\n', '        // transfer vested tokens\n', '        ERC20 token = ERC20(crowdSaleTokenAddress);\n', '        token.transfer(_adr, amountToRelease);\n', '        // decrement overall unreleased token count\n', '        totalUnreleasedTokens = totalUnreleasedTokens.minus(amountToRelease);\n', '        emit VestedTokensReleased(_adr, amountToRelease);\n', '    }\n', '\n', '    /**\n', '    * Allow to (re)set Token.\n', '    */\n', '    function setCrowdsaleTokenExtv1(address _token) public onlyAllocateAgent {       \n', '        crowdSaleTokenAddress = _token;\n', '    }\n', '}']
