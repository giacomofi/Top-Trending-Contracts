['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Controlled {\n', '    address public controller;\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '\n', '    // @notice Constructor\n', '    constructor() public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '// ERC Token Standard #20 Interface\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract SofiaToken is ERC20Interface,Controlled {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    /*\n', '     * @notice &#39;constructor()&#39; initiates the Token by setting its funding\n', '       parameters\n', '     * @param _totalSupply Total supply of tokens\n', '     */\n', '    constructor(uint _totalSupply) public {\n', '      symbol = "SFX";\n', '      name = "Sofia Token";\n', '      decimals = 18;\n', '      totalSupply = _totalSupply.mul(1 ether);\n', '      balances[msg.sender] = totalSupply; //transfer all Tokens to contract creator\n', '      emit Transfer(address(0),controller,totalSupply);\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to return total number of tokens\n', '     */\n', '    function totalSupply() public view returns (uint){\n', '      return totalSupply;\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to return the token balance of an address\n', '     * @param tokenOwner Address to query\n', '     */\n', '    function balanceOf(address tokenOwner) public view returns (uint balance){\n', '       return balances[tokenOwner];\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to return spending allowance\n', '     * @param tokenOwner Owner of the tokens, who allows\n', '     * @param spender Token spender\n', '     */\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining){\n', '      if (allowed[tokenOwner][spender] < balances[tokenOwner]) {\n', '        return allowed[tokenOwner][spender];\n', '      }\n', '      return balances[tokenOwner];\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to tranfer tokens\n', '     * @param to Address where the tokens will be transfered to\n', '     * @param tokens Number of tokens to be transfered\n', '     */\n', '    function transfer(address to, uint tokens) public  returns (bool success){\n', '      return doTransfer(msg.sender,to,tokens);\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to transfer tokens on someone elses behalf\n', '     * @param from Address where the tokens are held\n', '     * @param to Address where the tokens will be transfered to\n', '     * @param tokens Number of tokens to be transfered\n', '     */\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success){\n', '      if(allowed[from][msg.sender] > 0 && allowed[from][msg.sender] >= tokens)\n', '      {\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        return doTransfer(from,to,tokens);\n', '      }\n', '      return false;\n', '    }\n', '\n', '    /*\n', '     * @notice method that does the actual transfer of the tokens, to be used by both transfer and transferFrom methods\n', '     * @param from Address where the tokens are held\n', '     * @param to Address where the tokens will be transfered to\n', '     * @param tokens Number of tokens to be transfered\n', '     */\n', '    function doTransfer(address from,address to, uint tokens) internal returns (bool success){\n', '        if( tokens > 0 && balances[from] >= tokens){\n', '            balances[from] = balances[from].sub(tokens);\n', '            balances[to] = balances[to].add(tokens);\n', '            emit Transfer(from,to,tokens);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to give a spender an allowance\n', '     * @param spender Address that wil receive the allowance\n', '     * @param tokens Number of tokens in the allowance\n', '     */\n', '    function approve(address spender, uint tokens) public returns (bool success){\n', '      if(balances[msg.sender] >= tokens){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '      }\n', '      return false;\n', '    }\n', '\n', '    /*\n', '     * @notice revert any incoming ether\n', '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '  /*\n', '   * @notice a specific amount of tokens. Only controller can burn tokens\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint _value) public onlyController{\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(msg.sender, _value);\n', '    emit Transfer(msg.sender, address(0), _value);\n', '  }\n', '\n', '  /*\n', '   * Events\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '  event Burn(address indexed burner, uint value);\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Controlled {\n', '    address public controller;\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '\n', '    // @notice Constructor\n', '    constructor() public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '// ERC Token Standard #20 Interface\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract SofiaToken is ERC20Interface,Controlled {\n', '\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    /*\n', "     * @notice 'constructor()' initiates the Token by setting its funding\n", '       parameters\n', '     * @param _totalSupply Total supply of tokens\n', '     */\n', '    constructor(uint _totalSupply) public {\n', '      symbol = "SFX";\n', '      name = "Sofia Token";\n', '      decimals = 18;\n', '      totalSupply = _totalSupply.mul(1 ether);\n', '      balances[msg.sender] = totalSupply; //transfer all Tokens to contract creator\n', '      emit Transfer(address(0),controller,totalSupply);\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to return total number of tokens\n', '     */\n', '    function totalSupply() public view returns (uint){\n', '      return totalSupply;\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to return the token balance of an address\n', '     * @param tokenOwner Address to query\n', '     */\n', '    function balanceOf(address tokenOwner) public view returns (uint balance){\n', '       return balances[tokenOwner];\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to return spending allowance\n', '     * @param tokenOwner Owner of the tokens, who allows\n', '     * @param spender Token spender\n', '     */\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining){\n', '      if (allowed[tokenOwner][spender] < balances[tokenOwner]) {\n', '        return allowed[tokenOwner][spender];\n', '      }\n', '      return balances[tokenOwner];\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to tranfer tokens\n', '     * @param to Address where the tokens will be transfered to\n', '     * @param tokens Number of tokens to be transfered\n', '     */\n', '    function transfer(address to, uint tokens) public  returns (bool success){\n', '      return doTransfer(msg.sender,to,tokens);\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to transfer tokens on someone elses behalf\n', '     * @param from Address where the tokens are held\n', '     * @param to Address where the tokens will be transfered to\n', '     * @param tokens Number of tokens to be transfered\n', '     */\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success){\n', '      if(allowed[from][msg.sender] > 0 && allowed[from][msg.sender] >= tokens)\n', '      {\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        return doTransfer(from,to,tokens);\n', '      }\n', '      return false;\n', '    }\n', '\n', '    /*\n', '     * @notice method that does the actual transfer of the tokens, to be used by both transfer and transferFrom methods\n', '     * @param from Address where the tokens are held\n', '     * @param to Address where the tokens will be transfered to\n', '     * @param tokens Number of tokens to be transfered\n', '     */\n', '    function doTransfer(address from,address to, uint tokens) internal returns (bool success){\n', '        if( tokens > 0 && balances[from] >= tokens){\n', '            balances[from] = balances[from].sub(tokens);\n', '            balances[to] = balances[to].add(tokens);\n', '            emit Transfer(from,to,tokens);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /*\n', '     * @notice ERC20 Standard method to give a spender an allowance\n', '     * @param spender Address that wil receive the allowance\n', '     * @param tokens Number of tokens in the allowance\n', '     */\n', '    function approve(address spender, uint tokens) public returns (bool success){\n', '      if(balances[msg.sender] >= tokens){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '      }\n', '      return false;\n', '    }\n', '\n', '    /*\n', '     * @notice revert any incoming ether\n', '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '  /*\n', '   * @notice a specific amount of tokens. Only controller can burn tokens\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint _value) public onlyController{\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(msg.sender, _value);\n', '    emit Transfer(msg.sender, address(0), _value);\n', '  }\n', '\n', '  /*\n', '   * Events\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '  event Burn(address indexed burner, uint value);\n', '}']
