['// INTERFACE FOR TOKEN\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256 totalSupply) {}\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {}\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {}\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {}\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '///////////////////////////////////\n', '//                               //\n', '//        FORTUNITY PRESALE      //\n', '//                               //\n', '///////////////////////////////////\n', '\n', 'contract FortunityPresale is ERC20Interface {\n', '    string public constant symbol = "FTPS";\n', '    string public constant name = "FORTUNITY PRESALE";\n', '    uint8 public constant decimals = 18;\n', '    uint256 _totalSupply = 1000000000000000000000000;\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '    address public owner;\n', '    \n', '    //CONSTRUCTOR\n', '    function FortunityPresale() public {\n', '        owner               = msg.sender;\n', '        balances[owner]     = _totalSupply;\n', '    }\n', '    \n', '    //WHEN ETH IS RECEIVED DIRECTLY\n', '    function() payable {\n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '\n', '    // Get total supply\n', '    function totalSupply() public constant returns (uint256 totalSupply) {\n', '        totalSupply = _totalSupply;\n', '    }\n', '  \n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '  \n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        if (balances[msg.sender] >= _amount \n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '  \n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    \n', ' \n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']