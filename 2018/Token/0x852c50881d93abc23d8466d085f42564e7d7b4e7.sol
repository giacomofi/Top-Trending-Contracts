['pragma solidity ^0.4.23;\n', '\n', '\n', 'contract AccessAdmin {\n', '    bool public isPaused = false;\n', '    address public addrAdmin;  \n', '\n', '    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n', '\n', '    constructor() public {\n', '        addrAdmin = msg.sender;\n', '    }  \n', '\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == addrAdmin);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!isPaused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(isPaused);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _newAdmin) external onlyAdmin {\n', '        require(_newAdmin != address(0));\n', '        emit AdminTransferred(addrAdmin, _newAdmin);\n', '        addrAdmin = _newAdmin;\n', '    }\n', '\n', '    function doPause() external onlyAdmin whenNotPaused {\n', '        isPaused = true;\n', '    }\n', '\n', '    function doUnpause() external onlyAdmin whenPaused {\n', '        isPaused = false;\n', '    }\n', '}\n', '\n', 'contract AccessService is AccessAdmin {\n', '    address public addrService;\n', '    address public addrFinance;\n', '\n', '    modifier onlyService() {\n', '        require(msg.sender == addrService);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFinance() {\n', '        require(msg.sender == addrFinance);\n', '        _;\n', '    }\n', '\n', '    function setService(address _newService) external {\n', '        require(msg.sender == addrService || msg.sender == addrAdmin);\n', '        require(_newService != address(0));\n', '        addrService = _newService;\n', '    }\n', '\n', '    function setFinance(address _newFinance) external {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        require(_newFinance != address(0));\n', '        addrFinance = _newFinance;\n', '    }\n', '}\n', '\n', 'contract Random {\n', '    uint256 _seed;\n', '\n', '    function _rand() internal returns (uint256) {\n', '        _seed = uint256(keccak256(_seed, blockhash(block.number - 1), block.coinbase, block.difficulty));\n', '        return _seed;\n', '    }\n', '\n', '    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {\n', '        return uint256(keccak256(_outSeed, blockhash(block.number - 1), block.coinbase, block.difficulty));\n', '    }\n', '}\n', '\n', '/// @dev Ether League Share Token\n', 'contract ELShareToken is AccessService, Random {\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 50;\n', '    uint256 public totalSold = 0;\n', '    string public name = "Ether League Share Token";\n', '    string public symbol = "ELST";\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping(address => uint256)) allowed;\n', '    address[] shareholders;\n', '    mapping (address => uint256) addressToIndex;\n', '    uint256 public jackpotBalance;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Jackpot(address indexed _winner, uint256 _value, uint16 _type);\n', '\n', '    constructor() public {\n', '        addrAdmin = msg.sender;\n', '        addrService = msg.sender;\n', '        addrFinance = msg.sender;\n', '\n', '        balances[this] = 50;\n', '    }\n', '\n', '    function() external payable {\n', '        require(msg.value > 0);\n', '        jackpotBalance += msg.value;\n', '    }\n', '    \n', '    function totalSupply() external view returns (uint256){\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) external view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) external returns (bool) {\n', '        return _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] -= _value;\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '        uint256 oldToVal = balances[_to];\n', '        uint256 oldFromVal = balances[_from];\n', '        require(_value > 0 && _value <= oldFromVal);\n', '        uint256 newToVal = oldToVal + _value;\n', '        assert(newToVal >= oldToVal);\n', '        uint256 newFromVal = oldFromVal - _value;\n', '        balances[_from] = newFromVal;\n', '        balances[_to] = newToVal;\n', '\n', '        if (newFromVal == 0 && _from != address(this)) {\n', '            uint256 index = addressToIndex[_from];\n', '            uint256 lastIndex = shareholders.length - 1;\n', '            if (index != lastIndex) {\n', '                shareholders[index] = shareholders[lastIndex];\n', '                addressToIndex[shareholders[index]] = index;\n', '                delete addressToIndex[_from];\n', '            }\n', '            shareholders.length -= 1; \n', '        }\n', '\n', '        if (oldToVal == 0) {\n', '            addressToIndex[_to] = shareholders.length;\n', '            shareholders.push(_to);\n', '        }\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    function buy(uint256 _amount) external payable whenNotPaused {\n', '        require(_amount > 0 && _amount <= 10);\n', '        uint256 price = (1 ether) * _amount;\n', '        require(msg.value == price);\n', '        require(balances[this] > _amount);\n', '        _transfer(this, msg.sender, _amount);\n', '        totalSold += _amount;\n', '\n', '        jackpotBalance += price * 2 / 10;\n', '        addrFinance.transfer(address(this).balance - jackpotBalance);\n', '        //2%\n', '        uint256 seed = _rand();\n', '        if(seed % 100 == 66 || seed % 100 == 88){\n', '            emit Jackpot(msg.sender, jackpotBalance, 1);\n', '            msg.sender.transfer(jackpotBalance);\n', '        }\n', '    }\n', '\n', '    function getShareholders() external view returns(address[50] addrArray, uint256[50] amountArray, uint256 soldAmount) {\n', '        uint256 length = shareholders.length;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            addrArray[i] = shareholders[i];\n', '            amountArray[i] = balances[shareholders[i]];\n', '        }\n', '        soldAmount = totalSold;\n', '    }\n', '\n', '    function withdraw() external {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        addrFinance.transfer(address(this).balance);\n', '    }\n', '\n', '}']