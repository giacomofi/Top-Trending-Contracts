['pragma solidity ^0.4.22;\n', '\n', '// File: contracts/zeppelin/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  address public newOwner;\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '  \n', '  event OwnershipTransferred(address oldOwner, address newOwner);\n', '}\n', '\n', 'contract FUNToken is Ownable { //ERC - 20 token contract\n', '  using SafeMath for uint;\n', '  // Triggered when tokens are transferred.\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  string public constant symbol = "FUN"; // solium-disable-line uppercase\n', '  string public constant name = "THEFORTUNEFUND"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '  /** @dev maximum token supply\n', '  */\n', '  uint256 _totalSupply = 88888888 ether;\n', '\n', '  // Balances for each account\n', '  mapping(address => uint256) balances;\n', '\n', '  // Owner of account approves the transfer of an amount to another account\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) { //standart ERC-20 function\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {//standart ERC-20 function\n', '    return balances[_owner];\n', '  }\n', '  \n', '  // @dev is token transfer is locked\n', '  bool public locked = false;\n', '\n', '  // @dev is token transfer can be changed\n', '  bool public canChangeLocked = true;\n', '\n', '  /**\n', '  * @dev change lock transfer token (&#39;locked&#39;)\n', '  * @param _request true or false\n', '  */\n', '  function changeLockTransfer (bool _request) public onlyOwner {\n', '    require(canChangeLocked);\n', '    locked = _request;\n', '  }\n', '\n', '  /**\n', '  * @dev final unlock transfer token (&#39;locked&#39; and &#39;canChangeLocked&#39;)\n', '  * Makes for crypto exchangers to prevent the possibility of further blocking\n', '  */\n', '  function finalUnlockTransfer () public {\n', '    require (canChangeLocked);\n', '  \n', '    locked = false;\n', '    canChangeLocked = false;\n', '  }\n', '  \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _amount The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '    require(this != _to);\n', '    require (_to != address(0));\n', '    require(!locked);\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(msg.sender,_to,_amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _amount uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success){\n', '    require(this != _to);\n', '    require (_to != address(0));\n', '    require(!locked);\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(_from,_to,_amount);\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _amount The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _amount)public returns (bool success) { \n', '    allowed[msg.sender][_spender] = _amount;\n', '    emit Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /** @dev Token cunstructor\n', '    */\n', '  constructor () public {\n', '    owner = 0x85BC7DC54c637Dd432e90B91FE803AaA7744E158;\n', '    tokenHolder = 0x85BC7DC54c637Dd432e90B91FE803AaA7744E158;\n', '    balances[tokenHolder] = _totalSupply;\n', '  }\n', '\n', '  // @dev Address which contains all minted tokens\n', '  address public tokenHolder;\n', '\n', '  // @dev Crowdsale contract address\n', '  address public crowdsaleContract;\n', '\n', '  /**\n', '   * @dev setting &#39;crowdsaleContract&#39; variable. Call automatically when crowdsale contract deployed \n', '   * throws &#39;crowdsaleContract&#39; already exists\n', '   */\n', '  function setCrowdsaleContract (address _address) public{\n', '    require(crowdsaleContract == address(0));\n', '\n', '    crowdsaleContract = _address;\n', '  }\n', '\n', '  //@dev How many tokens crowdsale contract has to sell\n', '  uint public crowdsaleBalance = 77333333 ether; //Tokens\n', '  \n', '  /**\n', '   * @dev gets `_address` and `_value` as input and sells tokens to &#39;_address&#39;\n', '   * throws if not enough tokens after calculation\n', '   */\n', '  function sendCrowdsaleTokens (address _address, uint _value) public {\n', '    require(msg.sender == crowdsaleContract);\n', '\n', '    balances[tokenHolder] = balances[tokenHolder].sub(_value);\n', '    balances[_address] = balances[_address].add(_value);\n', '    \n', '    crowdsaleBalance = crowdsaleBalance.sub(_value);\n', '    \n', '    emit Transfer(tokenHolder,_address,_value);    \n', '  }\n', '\n', '  /// @dev event when someone burn Tokens\n', '  event Burn(address indexed burner, uint tokens);\n', '\n', '  /**\n', '   * @dev `_value` as input and burn tokens \n', '   * throws if message sender has not enough tokens after calculation\n', '   */\n', '  function burnTokens (uint _value) external {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '    _totalSupply = _totalSupply.sub(_value);\n', '\n', '    emit Transfer(msg.sender, 0, _value);\n', '    emit Burn(msg.sender, _value);\n', '  } \n', '}']
['pragma solidity ^0.4.22;\n', '\n', '// File: contracts/zeppelin/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  address public newOwner;\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '  \n', '  event OwnershipTransferred(address oldOwner, address newOwner);\n', '}\n', '\n', 'contract FUNToken is Ownable { //ERC - 20 token contract\n', '  using SafeMath for uint;\n', '  // Triggered when tokens are transferred.\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  string public constant symbol = "FUN"; // solium-disable-line uppercase\n', '  string public constant name = "THEFORTUNEFUND"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '  /** @dev maximum token supply\n', '  */\n', '  uint256 _totalSupply = 88888888 ether;\n', '\n', '  // Balances for each account\n', '  mapping(address => uint256) balances;\n', '\n', '  // Owner of account approves the transfer of an amount to another account\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) { //standart ERC-20 function\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {//standart ERC-20 function\n', '    return balances[_owner];\n', '  }\n', '  \n', '  // @dev is token transfer is locked\n', '  bool public locked = false;\n', '\n', '  // @dev is token transfer can be changed\n', '  bool public canChangeLocked = true;\n', '\n', '  /**\n', "  * @dev change lock transfer token ('locked')\n", '  * @param _request true or false\n', '  */\n', '  function changeLockTransfer (bool _request) public onlyOwner {\n', '    require(canChangeLocked);\n', '    locked = _request;\n', '  }\n', '\n', '  /**\n', "  * @dev final unlock transfer token ('locked' and 'canChangeLocked')\n", '  * Makes for crypto exchangers to prevent the possibility of further blocking\n', '  */\n', '  function finalUnlockTransfer () public {\n', '    require (canChangeLocked);\n', '  \n', '    locked = false;\n', '    canChangeLocked = false;\n', '  }\n', '  \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _amount The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '    require(this != _to);\n', '    require (_to != address(0));\n', '    require(!locked);\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(msg.sender,_to,_amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _amount uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success){\n', '    require(this != _to);\n', '    require (_to != address(0));\n', '    require(!locked);\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(_from,_to,_amount);\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _amount The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _amount)public returns (bool success) { \n', '    allowed[msg.sender][_spender] = _amount;\n', '    emit Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /** @dev Token cunstructor\n', '    */\n', '  constructor () public {\n', '    owner = 0x85BC7DC54c637Dd432e90B91FE803AaA7744E158;\n', '    tokenHolder = 0x85BC7DC54c637Dd432e90B91FE803AaA7744E158;\n', '    balances[tokenHolder] = _totalSupply;\n', '  }\n', '\n', '  // @dev Address which contains all minted tokens\n', '  address public tokenHolder;\n', '\n', '  // @dev Crowdsale contract address\n', '  address public crowdsaleContract;\n', '\n', '  /**\n', "   * @dev setting 'crowdsaleContract' variable. Call automatically when crowdsale contract deployed \n", "   * throws 'crowdsaleContract' already exists\n", '   */\n', '  function setCrowdsaleContract (address _address) public{\n', '    require(crowdsaleContract == address(0));\n', '\n', '    crowdsaleContract = _address;\n', '  }\n', '\n', '  //@dev How many tokens crowdsale contract has to sell\n', '  uint public crowdsaleBalance = 77333333 ether; //Tokens\n', '  \n', '  /**\n', "   * @dev gets `_address` and `_value` as input and sells tokens to '_address'\n", '   * throws if not enough tokens after calculation\n', '   */\n', '  function sendCrowdsaleTokens (address _address, uint _value) public {\n', '    require(msg.sender == crowdsaleContract);\n', '\n', '    balances[tokenHolder] = balances[tokenHolder].sub(_value);\n', '    balances[_address] = balances[_address].add(_value);\n', '    \n', '    crowdsaleBalance = crowdsaleBalance.sub(_value);\n', '    \n', '    emit Transfer(tokenHolder,_address,_value);    \n', '  }\n', '\n', '  /// @dev event when someone burn Tokens\n', '  event Burn(address indexed burner, uint tokens);\n', '\n', '  /**\n', '   * @dev `_value` as input and burn tokens \n', '   * throws if message sender has not enough tokens after calculation\n', '   */\n', '  function burnTokens (uint _value) external {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '    _totalSupply = _totalSupply.sub(_value);\n', '\n', '    emit Transfer(msg.sender, 0, _value);\n', '    emit Burn(msg.sender, _value);\n', '  } \n', '}']
