['pragma solidity ^0.4.23;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/FreezableToken.sol\n', '\n', '/**\n', '* @title Freezable Token\n', '* @dev Token that can be freezed for chosen token holder.\n', '*/\n', 'contract FreezableToken is Ownable {\n', '\n', '    mapping (address => bool) public frozenList;\n', '\n', '    event FrozenFunds(address indexed wallet, bool frozen);\n', '\n', '    /**\n', '    * @dev Owner can freeze the token balance for chosen token holder.\n', '    * @param _wallet The address of token holder whose tokens to be frozen.\n', '    */\n', '    function freezeAccount(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0));\n', '        frozenList[_wallet] = true;\n', '        emit FrozenFunds(_wallet, true);\n', '    }\n', '\n', '    /**\n', '    * @dev Owner can unfreeze the token balance for chosen token holder.\n', '    * @param _wallet The address of token holder whose tokens to be unfrozen.\n', '    */\n', '    function unfreezeAccount(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0));\n', '        frozenList[_wallet] = false;\n', '        emit FrozenFunds(_wallet, false);\n', '    }\n', '\n', '    /**\n', '    * @dev Check the specified token holder whether his/her token balance is frozen.\n', '    * @param _wallet The address of token holder to check.\n', '    */ \n', '    function isFrozen(address _wallet) public view returns (bool) {\n', '        return frozenList[_wallet];\n', '    }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/TokenTimelock.sol\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '\n', '    constructor(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '        require(_releaseTime > now);\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '    * @notice Transfers tokens held by timelock to beneficiary.\n', '    */\n', '    function release() public {\n', '        require(now >= releaseTime);\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        // Change  safeTransfer -> transfer because issue with assert function with ref type.\n', '        token.transfer(beneficiary, amount);\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SaifuToken.sol\n', '\n', 'contract SaifuToken is StandardToken, FreezableToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Saifu";\n', '    string public constant symbol = "SFU";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_TOTAL_SUPPLY = 200e6 * (10 ** uint256(decimals));\n', '    uint256 public constant AMOUNT_TOKENS_FOR_SELL = 130e6 * (10 ** uint256(decimals));\n', '\n', '    uint256 public constant RESERVE_FUND = 20e6 * (10 ** uint256(decimals));\n', '    uint256 public constant RESERVED_FOR_TEAM = 50e6 * (10 ** uint256(decimals));\n', '\n', '    uint256 public constant RESERVED_TOTAL_AMOUNT = 70e6 * (10 ** uint256(decimals));\n', '    \n', '    uint256 public alreadyReservedForTeam = 0;\n', '\n', '    address public burnAddress;\n', '\n', '    bool private isReservedFundsDone = false;\n', '\n', '    uint256 private setBurnAddressCount = 0;\n', '\n', '    // Key: address of wallet, Value: address of contract.\n', '    mapping (address => address) private lockedList;\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the burnable account.\n', '    */\n', '    modifier onlyBurnAddress() {\n', '        require(msg.sender == burnAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Create SaifuToken contract\n', '    */\n', '    constructor() public {\n', '        totalSupply_ = totalSupply_.add(INITIAL_TOTAL_SUPPLY);\n', '\n', '        balances[owner] = balances[owner].add(AMOUNT_TOKENS_FOR_SELL);\n', '        emit Transfer(address(0), owner, AMOUNT_TOKENS_FOR_SELL);\n', '\n', '        balances[this] = balances[this].add(RESERVED_TOTAL_AMOUNT);\n', '        emit Transfer(address(0), this, RESERVED_TOTAL_AMOUNT);\n', '    }\n', '\n', '     /**\n', '    * @dev Transfer token for a specified address.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(!isFrozen(msg.sender));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(!isFrozen(msg.sender));\n', '        require(!isFrozen(_from));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Set burn address.\n', '    * @param _address New burn address\n', '    */\n', '    function setBurnAddress(address _address) public onlyOwner {\n', '        require(setBurnAddressCount < 3);\n', '        require(_address != address(0));\n', '        burnAddress = _address;\n', '        setBurnAddressCount = setBurnAddressCount.add(1);\n', '    }\n', '\n', '    /**\n', '    * @dev Reserve funds.\n', '    * @param _address the address for reserve funds. \n', '    */\n', '    function reserveFunds(address _address) public onlyOwner {\n', '        require(_address != address(0));\n', '\n', '        require(!isReservedFundsDone);\n', '\n', '        sendFromContract(_address, RESERVE_FUND);\n', '        \n', '        isReservedFundsDone = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get locked contract address.\n', '    * @param _address the address of owner these tokens.\n', '    */\n', '    function getLockedContract(address _address) public view returns(address) {\n', '        return lockedList[_address];\n', '    }\n', '\n', '    /**\n', '    * @dev Reserve for team.\n', '    * @param _address the address for reserve. \n', '    * @param _amount the specified amount for reserve. \n', '    * @param _time the specified freezing time (in days). \n', '    */\n', '    function reserveForTeam(address _address, uint256 _amount, uint256  _time) public onlyOwner {\n', '        require(_address != address(0));\n', '        require(_amount > 0 && _amount <= RESERVED_FOR_TEAM.sub(alreadyReservedForTeam));\n', '\n', '        if (_time > 0) {\n', '            address lockedAddress = new TokenTimelock(this, _address, now.add(_time * 1 days));\n', '            lockedList[_address] = lockedAddress;\n', '            sendFromContract(lockedAddress, _amount);\n', '        } else {\n', '            sendFromContract(_address, _amount);\n', '        }\n', '        \n', '        alreadyReservedForTeam = alreadyReservedForTeam.add(_amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Send tokens which will be frozen for specified time.\n', '    * @param _address the address for send. \n', '    * @param _amount the specified amount for send. \n', '    * @param _time the specified freezing time (in seconds). \n', '    */\n', '    function sendWithFreeze(address _address, uint256 _amount, uint256  _time) public onlyOwner {\n', '        require(_address != address(0) && _amount > 0 && _time > 0);\n', '\n', '        address lockedAddress = new TokenTimelock(this, _address, now.add(_time));\n', '        lockedList[_address] = lockedAddress;\n', '        transfer(lockedAddress, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Unlock frozen tokens.\n', '    * @param _address the address for which to release already unlocked tokens. \n', '    */\n', '    function unlockTokens(address _address) public {\n', '        require(lockedList[_address] != address(0));\n', '\n', '        TokenTimelock lockedContract = TokenTimelock(lockedList[_address]);\n', '\n', '        lockedContract.release();\n', '    }\n', '\n', '    /**\n', '    * @dev Burn a specific amount of tokens.\n', '    * @param _amount The Amount of tokens.\n', '    */\n', '    function burnFromAddress(uint256 _amount) public onlyBurnAddress {\n', '        require(_amount > 0);\n', '        require(_amount <= balances[burnAddress]);\n', '\n', '        balances[burnAddress] = balances[burnAddress].sub(_amount);\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        emit Transfer(burnAddress, address(0), _amount);\n', '    }\n', '\n', '    /*\n', '    * @dev Send tokens from contract.\n', '    * @param _address the address destination. \n', '    * @param _amount the specified amount for send.\n', '     */\n', '    function sendFromContract(address _address, uint256 _amount) internal {\n', '        balances[this] = balances[this].sub(_amount);\n', '        balances[_address] = balances[_address].add(_amount);\n', '        emit Transfer(this, _address, _amount);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/FreezableToken.sol\n', '\n', '/**\n', '* @title Freezable Token\n', '* @dev Token that can be freezed for chosen token holder.\n', '*/\n', 'contract FreezableToken is Ownable {\n', '\n', '    mapping (address => bool) public frozenList;\n', '\n', '    event FrozenFunds(address indexed wallet, bool frozen);\n', '\n', '    /**\n', '    * @dev Owner can freeze the token balance for chosen token holder.\n', '    * @param _wallet The address of token holder whose tokens to be frozen.\n', '    */\n', '    function freezeAccount(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0));\n', '        frozenList[_wallet] = true;\n', '        emit FrozenFunds(_wallet, true);\n', '    }\n', '\n', '    /**\n', '    * @dev Owner can unfreeze the token balance for chosen token holder.\n', '    * @param _wallet The address of token holder whose tokens to be unfrozen.\n', '    */\n', '    function unfreezeAccount(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0));\n', '        frozenList[_wallet] = false;\n', '        emit FrozenFunds(_wallet, false);\n', '    }\n', '\n', '    /**\n', '    * @dev Check the specified token holder whether his/her token balance is frozen.\n', '    * @param _wallet The address of token holder to check.\n', '    */ \n', '    function isFrozen(address _wallet) public view returns (bool) {\n', '        return frozenList[_wallet];\n', '    }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/TokenTimelock.sol\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '\n', '    constructor(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '        require(_releaseTime > now);\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '    * @notice Transfers tokens held by timelock to beneficiary.\n', '    */\n', '    function release() public {\n', '        require(now >= releaseTime);\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        // Change  safeTransfer -> transfer because issue with assert function with ref type.\n', '        token.transfer(beneficiary, amount);\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SaifuToken.sol\n', '\n', 'contract SaifuToken is StandardToken, FreezableToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Saifu";\n', '    string public constant symbol = "SFU";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_TOTAL_SUPPLY = 200e6 * (10 ** uint256(decimals));\n', '    uint256 public constant AMOUNT_TOKENS_FOR_SELL = 130e6 * (10 ** uint256(decimals));\n', '\n', '    uint256 public constant RESERVE_FUND = 20e6 * (10 ** uint256(decimals));\n', '    uint256 public constant RESERVED_FOR_TEAM = 50e6 * (10 ** uint256(decimals));\n', '\n', '    uint256 public constant RESERVED_TOTAL_AMOUNT = 70e6 * (10 ** uint256(decimals));\n', '    \n', '    uint256 public alreadyReservedForTeam = 0;\n', '\n', '    address public burnAddress;\n', '\n', '    bool private isReservedFundsDone = false;\n', '\n', '    uint256 private setBurnAddressCount = 0;\n', '\n', '    // Key: address of wallet, Value: address of contract.\n', '    mapping (address => address) private lockedList;\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the burnable account.\n', '    */\n', '    modifier onlyBurnAddress() {\n', '        require(msg.sender == burnAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Create SaifuToken contract\n', '    */\n', '    constructor() public {\n', '        totalSupply_ = totalSupply_.add(INITIAL_TOTAL_SUPPLY);\n', '\n', '        balances[owner] = balances[owner].add(AMOUNT_TOKENS_FOR_SELL);\n', '        emit Transfer(address(0), owner, AMOUNT_TOKENS_FOR_SELL);\n', '\n', '        balances[this] = balances[this].add(RESERVED_TOTAL_AMOUNT);\n', '        emit Transfer(address(0), this, RESERVED_TOTAL_AMOUNT);\n', '    }\n', '\n', '     /**\n', '    * @dev Transfer token for a specified address.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(!isFrozen(msg.sender));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(!isFrozen(msg.sender));\n', '        require(!isFrozen(_from));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Set burn address.\n', '    * @param _address New burn address\n', '    */\n', '    function setBurnAddress(address _address) public onlyOwner {\n', '        require(setBurnAddressCount < 3);\n', '        require(_address != address(0));\n', '        burnAddress = _address;\n', '        setBurnAddressCount = setBurnAddressCount.add(1);\n', '    }\n', '\n', '    /**\n', '    * @dev Reserve funds.\n', '    * @param _address the address for reserve funds. \n', '    */\n', '    function reserveFunds(address _address) public onlyOwner {\n', '        require(_address != address(0));\n', '\n', '        require(!isReservedFundsDone);\n', '\n', '        sendFromContract(_address, RESERVE_FUND);\n', '        \n', '        isReservedFundsDone = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get locked contract address.\n', '    * @param _address the address of owner these tokens.\n', '    */\n', '    function getLockedContract(address _address) public view returns(address) {\n', '        return lockedList[_address];\n', '    }\n', '\n', '    /**\n', '    * @dev Reserve for team.\n', '    * @param _address the address for reserve. \n', '    * @param _amount the specified amount for reserve. \n', '    * @param _time the specified freezing time (in days). \n', '    */\n', '    function reserveForTeam(address _address, uint256 _amount, uint256  _time) public onlyOwner {\n', '        require(_address != address(0));\n', '        require(_amount > 0 && _amount <= RESERVED_FOR_TEAM.sub(alreadyReservedForTeam));\n', '\n', '        if (_time > 0) {\n', '            address lockedAddress = new TokenTimelock(this, _address, now.add(_time * 1 days));\n', '            lockedList[_address] = lockedAddress;\n', '            sendFromContract(lockedAddress, _amount);\n', '        } else {\n', '            sendFromContract(_address, _amount);\n', '        }\n', '        \n', '        alreadyReservedForTeam = alreadyReservedForTeam.add(_amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Send tokens which will be frozen for specified time.\n', '    * @param _address the address for send. \n', '    * @param _amount the specified amount for send. \n', '    * @param _time the specified freezing time (in seconds). \n', '    */\n', '    function sendWithFreeze(address _address, uint256 _amount, uint256  _time) public onlyOwner {\n', '        require(_address != address(0) && _amount > 0 && _time > 0);\n', '\n', '        address lockedAddress = new TokenTimelock(this, _address, now.add(_time));\n', '        lockedList[_address] = lockedAddress;\n', '        transfer(lockedAddress, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Unlock frozen tokens.\n', '    * @param _address the address for which to release already unlocked tokens. \n', '    */\n', '    function unlockTokens(address _address) public {\n', '        require(lockedList[_address] != address(0));\n', '\n', '        TokenTimelock lockedContract = TokenTimelock(lockedList[_address]);\n', '\n', '        lockedContract.release();\n', '    }\n', '\n', '    /**\n', '    * @dev Burn a specific amount of tokens.\n', '    * @param _amount The Amount of tokens.\n', '    */\n', '    function burnFromAddress(uint256 _amount) public onlyBurnAddress {\n', '        require(_amount > 0);\n', '        require(_amount <= balances[burnAddress]);\n', '\n', '        balances[burnAddress] = balances[burnAddress].sub(_amount);\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        emit Transfer(burnAddress, address(0), _amount);\n', '    }\n', '\n', '    /*\n', '    * @dev Send tokens from contract.\n', '    * @param _address the address destination. \n', '    * @param _amount the specified amount for send.\n', '     */\n', '    function sendFromContract(address _address, uint256 _amount) internal {\n', '        balances[this] = balances[this].sub(_amount);\n', '        balances[_address] = balances[_address].add(_amount);\n', '        emit Transfer(this, _address, _amount);\n', '    }\n', '}']
