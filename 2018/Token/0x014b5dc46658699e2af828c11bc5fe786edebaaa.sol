['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    //   mapping(address => uint256) balances;\n', '    mapping(address => uint256) freeBalances;\n', '    mapping(address => uint256) frozenBalances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= freeBalances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        freeBalances[msg.sender] = freeBalances[msg.sender].sub(_value);\n', '        freeBalances[_to] = freeBalances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return freeBalances[_owner] + frozenBalances[_owner];\n', '    }\n', '\n', '    function freeBalanceOf(address _owner) public view returns (uint256 balance) {\n', '        return freeBalances[_owner];\n', '    }\n', '\n', '    function frozenBalanceOf(address _owner) public view returns (uint256 balance) {\n', '        return frozenBalances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= freeBalances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        freeBalances[_from] = freeBalances[_from].sub(_value);\n', '        freeBalances[_to] = freeBalances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title CXTCToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract CXTCContract is StandardToken {\n', '\n', '    string public constant name = "Culture eXchange Token Chain"; // solium-disable-line uppercase\n', '    string public constant symbol = "CXTC"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 8; // solium-disable-line uppercase\n', '\n', '    uint256 public constant freeSupply = 21000000 * (10 ** uint256(decimals)); // 10%自由量\n', '    uint256 public constant frozenSupply = 189000000 * (10 ** uint256(decimals)); // 90%冻结量\n', '\n', '    address public systemAcc; // charge fee\n', '    address[] parterAcc;\n', '    uint256 internal fee;\n', '    \n', '    struct ArtInfo {\n', '        string idtReport;\n', '        string evtReport;\n', '        string escReport;\n', '        string regReport;\n', '    }\n', '    \n', '    mapping (string => ArtInfo) internal artInfos;\n', '    mapping (address => mapping (uint256 => uint256)) internal freezeRecord;\n', '\n', '    event Freeze(address indexed _addr, uint256 indexed _amount, uint256 _timestamp);\n', '    event Release(address indexed _addr, uint256 indexed _amount);\n', '    event SetParter(address indexed _addr, uint256 indexed _amount);\n', '    event SetFoundAcc(address indexed _addr);\n', '    event NewArt(string indexed _id);\n', '    event SetArtIdt(string indexed _id, string indexed _idtReport);\n', '    event SetArtEvt(string indexed _id, string indexed _evtReport);\n', '    event SetArtEsc(string indexed _id, string indexed _escReport);\n', '    event SetArtReg(string indexed _id, string indexed _regReport);\n', '    event SetFee(uint256 indexed _fee);\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    function CXTCContract() public {\n', '        owner = msg.sender;\n', '        totalSupply_ = freeSupply + frozenSupply;\n', '        freeBalances[owner] = freeSupply;\n', '        frozenBalances[owner] = frozenSupply;\n', '    }\n', '\n', '    /**\n', '     * init parter\n', '     */\n', '    function setParter(address _parter, uint256 _amount) public onlyOwner {\n', '        //require(_amount == 210000);\n', '        require(parterAcc.length <= 49);\n', '        parterAcc.push(_parter);\n', '        frozenBalances[_parter] = _amount;\n', '        SetParter(_parter, _amount);\n', '    }\n', '\n', '    /**\n', '     * set systemAccount\n', '     */\n', '    function setFoundAcc(address _sysAcc) public onlyOwner returns (bool) {\n', '        systemAcc = _sysAcc;\n', '        SetFoundAcc(_sysAcc);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * set fee\n', '     */\n', '    function setFee(uint256 _fee) public onlyOwner returns (bool) {\n', '        fee = _fee;\n', '        SetFee(_fee);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * new art hash info\n', '     */\n', '    function newArt(string _id, string _regReport) public onlyOwner returns (bool) {\n', '        ArtInfo memory info = ArtInfo({idtReport: "", evtReport: "", escReport: "", regReport: _regReport});\n', '        artInfos[_id] = info;\n', '        NewArt(_id);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * get artInfo\n', '     */\n', '    function getArt(string _id) public view returns (string, string, string, string) {\n', '        ArtInfo memory info = artInfos[_id];\n', '        return (info.regReport, info.idtReport, info.evtReport, info.escReport);\n', '    }\n', '    \n', '    /**\n', '     * set art idtReport\n', '     */\n', '    function setArtIdt(string _id, string _idtReport) public onlyOwner returns (bool) {\n', '        string idtReport = artInfos[_id].idtReport;\n', '        bytes memory idtReportLen = bytes(idtReport);\n', '        if (idtReportLen.length == 0){\n', '            artInfos[_id].idtReport = _idtReport;\n', '            SetArtIdt(_id, _idtReport);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * set art evtReport\n', '     */\n', '    function setArtEvt(string _id, string _evtReport) public onlyOwner returns (bool) {\n', '        string evtReport = artInfos[_id].evtReport;\n', '        bytes memory evtReportLen = bytes(evtReport);\n', '        if (evtReportLen.length == 0){\n', '            artInfos[_id].evtReport = _evtReport;\n', '            SetArtEvt(_id, _evtReport);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * set art escrow report\n', '     */\n', '    function setArtEsc(string _id, string _escReport) public onlyOwner returns (bool) {\n', '        string escReport = artInfos[_id].escReport;\n', '        bytes memory escReportLen = bytes(escReport);\n', '        if (escReportLen.length == 0){\n', '            artInfos[_id].escReport = _escReport;\n', '            SetArtEsc(_id, _escReport);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * distribute art coin to user.\n', '     */\n', '    function issue(address _addr, uint256 _amount, uint256 _timestamp) public onlyOwner returns (bool) {\n', '        // 2018/03/23 = 1521734400\n', '        require(frozenBalances[owner] >= _amount);\n', '        frozenBalances[owner] = frozenBalances[owner].sub(_amount);\n', '        frozenBalances[_addr]= frozenBalances[_addr].add(_amount);\n', '        freezeRecord[_addr][_timestamp] = freezeRecord[_addr][_timestamp].add(_amount);\n', '        Freeze(_addr, _amount, _timestamp);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * charge fee\n', '     */\n', '    function charge(address _to, uint256 _amount, uint256 _timestamp) internal returns (bool) {\n', '        require(freeBalances[msg.sender] >= _amount);\n', '        require(_amount >= fee);\n', '        require(_to != address(0));\n', '        uint256 toAmt = _amount.sub(fee);\n', '        freeBalances[msg.sender] = freeBalances[msg.sender].sub(_amount);\n', '        freeBalances[_to] = freeBalances[_to].add(toAmt);\n', '        // systemAcc\n', '        frozenBalances[systemAcc] = frozenBalances[systemAcc].add(fee);\n', '        freezeRecord[systemAcc][_timestamp] = freezeRecord[systemAcc][_timestamp].add(fee);\n', '        Transfer(msg.sender, _to, toAmt);\n', '        Freeze(_to, fee, _timestamp);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * user freeze free balance\n', '     */\n', '    function freeze(uint256 _amount, uint256 _timestamp) public whenNotPaused returns (bool) {\n', '        require(freeBalances[msg.sender] >= _amount);\n', '        freeBalances[msg.sender] = freeBalances[msg.sender].sub(_amount);\n', '        frozenBalances[msg.sender] = frozenBalances[msg.sender].add(_amount);\n', '        freezeRecord[msg.sender][_timestamp] = freezeRecord[msg.sender][_timestamp].add(_amount);\n', '        Freeze(msg.sender, _amount, _timestamp);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * auto release\n', '     */\n', '    function release(address[] _addressLst, uint256[] _amountLst) public onlyOwner returns (bool) {\n', '        require(_addressLst.length == _amountLst.length);\n', '        for(uint i = 0; i < _addressLst.length; i++) {\n', '            freeBalances[_addressLst[i]] = freeBalances[_addressLst[i]].add(_amountLst[i]);\n', '            frozenBalances[_addressLst[i]] = frozenBalances[_addressLst[i]].sub(_amountLst[i]);\n', '            Release(_addressLst[i], _amountLst[i]);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * bonus shares\n', '     */\n', '    function bonus(uint256 _sum, address[] _addressLst, uint256[] _amountLst) public onlyOwner returns (bool) {\n', '        require(freeBalances[systemAcc] >= _sum);\n', '        require(_addressLst.length == _amountLst.length);\n', '        for(uint i = 0; i < _addressLst.length; i++) {\n', '            freeBalances[_addressLst[i]] = freeBalances[_addressLst[i]].add(_amountLst[i]);\n', '            Transfer(systemAcc, _addressLst[i], _amountLst[i]);\n', '        }\n', '        freeBalances[systemAcc].sub(_sum);\n', '        return true;\n', '    }\n', '}']