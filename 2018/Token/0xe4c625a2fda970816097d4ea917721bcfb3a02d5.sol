['pragma solidity 0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  \n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', ' \n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  function Pausable() public {}\n', '\n', '  \n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  \n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  \n', '  function pause() public onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', ' \n', '  function unpause() public onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Changepro is Pausable, SafeMath {\n', '\n', '  uint256 public totalSupply;\n', '\n', '  mapping(address => uint) public balances;\n', '  mapping (address => mapping (address => uint)) public allowed;\n', '\n', '  \n', '  \n', '  string public constant name = "ChangePro";\n', '  string public constant symbol = "CPRO";\n', '  uint8 public constant decimals = 8;\n', '  \n', '  // coinmx properties\n', '  bool public mintingFinished = false;\n', '  uint256 public constant MINTING_LIMIT = 50000000 * 100000000;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  function Changepro() public {}\n', '\n', '  function() public payable {\n', '    revert();\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint _value) public whenNotPaused returns (bool) {\n', '\n', '    balances[msg.sender] = sub(balances[msg.sender], _value);\n', '    balances[_to] = add(balances[_to], _value);\n', '\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = add(balances[_to], _value);\n', '    balances[_from] = sub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = sub(_allowance, _value);\n', '\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint _value) public whenNotPaused returns (bool) {\n', '    \n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    \n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '    totalSupply = add(totalSupply, _amount);\n', '    require(totalSupply <= MINTING_LIMIT);\n', '    \n', '    balances[_to] = add(balances[_to], _amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() public onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '\n', '}']
['pragma solidity 0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  \n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', ' \n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  function Pausable() public {}\n', '\n', '  \n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  \n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  \n', '  function pause() public onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', ' \n', '  function unpause() public onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Changepro is Pausable, SafeMath {\n', '\n', '  uint256 public totalSupply;\n', '\n', '  mapping(address => uint) public balances;\n', '  mapping (address => mapping (address => uint)) public allowed;\n', '\n', '  \n', '  \n', '  string public constant name = "ChangePro";\n', '  string public constant symbol = "CPRO";\n', '  uint8 public constant decimals = 8;\n', '  \n', '  // coinmx properties\n', '  bool public mintingFinished = false;\n', '  uint256 public constant MINTING_LIMIT = 50000000 * 100000000;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  function Changepro() public {}\n', '\n', '  function() public payable {\n', '    revert();\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint _value) public whenNotPaused returns (bool) {\n', '\n', '    balances[msg.sender] = sub(balances[msg.sender], _value);\n', '    balances[_to] = add(balances[_to], _value);\n', '\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = add(balances[_to], _value);\n', '    balances[_from] = sub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = sub(_allowance, _value);\n', '\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint _value) public whenNotPaused returns (bool) {\n', '    \n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    \n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '    totalSupply = add(totalSupply, _amount);\n', '    require(totalSupply <= MINTING_LIMIT);\n', '    \n', '    balances[_to] = add(balances[_to], _amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() public onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '\n', '}']
