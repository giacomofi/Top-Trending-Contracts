['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract HybridBlock is ERC20 {\n', '  using SafeMath for uint256;\n', '  \n', '  // The owner of this token\n', '  address public owner;\n', '\n', '  // The balance in HybridBlock token that every address has\n', '  mapping (address => uint256) balances;\n', '\n', '  // Keeps track of allowances for particular address\n', '  mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '  /**\n', '   * The constructor for the HybridBlock token\n', '   */\n', '  function HybridBlock() public {\n', '    owner = 0x35118ba64fD141F43958cF9EB493F13aca976e6a;\n', '    name = "Hybrid Block";\n', '    symbol = "HYB";\n', '    decimals = 18;\n', '    totalSupply = 1e9 * 10 ** uint256(decimals);\n', '\n', '    // Initially allocate all minted tokens to the owner\n', '    balances[owner] = totalSupply;\n', '  }\n', '\n', '  /**\n', '   * @dev Retrieves the balance of a specified address\n', '   * @param _owner address The address to query the balance of.\n', '   * @return A uint256 representing the amount owned by the _owner\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers tokens to a specific address\n', '   * @param _to address The address to transfer tokens to\n', '   * @param _value unit256 The amount to be transferred\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '  \n', '    // Subtract first\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '    // Now add tokens\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    // Notify that a transfer has occurred\n', '    Transfer(msg.sender, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer on behalf of another address\n', '   * @param _from address The address to send tokens from\n', '   * @param _to address The address to send tokens to\n', '   * @param _value uint256 The amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    // Decrease both the _from amount and the allowed transfer amount\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '    // Give _to the tokens\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    // Notify that a transfer has occurred\n', '    Transfer(_from, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve sent address to spend the specified amount of tokens on\n', '   * behalf of msg.sender\n', '   *\n', '   * See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * for any potential security concerns\n', '   *\n', '   * @param _spender address The address that will spend funds\n', '   * @param _value uint256 The number of tokens they are allowed to spend\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(allowed[msg.sender][_spender] == 0);\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the amount a spender is allowed to spend for a particular\n', '   * address\n', '   * @param _owner address The address which owns the funds\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return uint256 The number of tokens still available for the spender\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increases the number of tokens a spender is allowed to spend for\n', '   * `msg.sender`\n', '   * @param _spender address The address of the spender\n', '   * @param _addedValue uint256 The amount to increase the spenders approval by\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decreases the number of tokens a spender is allowed to spend for\n', '   * `msg.sender`\n', '   * @param _spender address The address of the spender\n', '   * @param _subtractedValue uint256 The amount to decrease the spenders approval by\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    uint _value = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > _value) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = _value.sub(_subtractedValue);\n', '    }\n', '\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract HybridBlock is ERC20 {\n', '  using SafeMath for uint256;\n', '  \n', '  // The owner of this token\n', '  address public owner;\n', '\n', '  // The balance in HybridBlock token that every address has\n', '  mapping (address => uint256) balances;\n', '\n', '  // Keeps track of allowances for particular address\n', '  mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '  /**\n', '   * The constructor for the HybridBlock token\n', '   */\n', '  function HybridBlock() public {\n', '    owner = 0x35118ba64fD141F43958cF9EB493F13aca976e6a;\n', '    name = "Hybrid Block";\n', '    symbol = "HYB";\n', '    decimals = 18;\n', '    totalSupply = 1e9 * 10 ** uint256(decimals);\n', '\n', '    // Initially allocate all minted tokens to the owner\n', '    balances[owner] = totalSupply;\n', '  }\n', '\n', '  /**\n', '   * @dev Retrieves the balance of a specified address\n', '   * @param _owner address The address to query the balance of.\n', '   * @return A uint256 representing the amount owned by the _owner\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers tokens to a specific address\n', '   * @param _to address The address to transfer tokens to\n', '   * @param _value unit256 The amount to be transferred\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '  \n', '    // Subtract first\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '    // Now add tokens\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    // Notify that a transfer has occurred\n', '    Transfer(msg.sender, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer on behalf of another address\n', '   * @param _from address The address to send tokens from\n', '   * @param _to address The address to send tokens to\n', '   * @param _value uint256 The amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    // Decrease both the _from amount and the allowed transfer amount\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '    // Give _to the tokens\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    // Notify that a transfer has occurred\n', '    Transfer(_from, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve sent address to spend the specified amount of tokens on\n', '   * behalf of msg.sender\n', '   *\n', '   * See https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * for any potential security concerns\n', '   *\n', '   * @param _spender address The address that will spend funds\n', '   * @param _value uint256 The number of tokens they are allowed to spend\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(allowed[msg.sender][_spender] == 0);\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the amount a spender is allowed to spend for a particular\n', '   * address\n', '   * @param _owner address The address which owns the funds\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return uint256 The number of tokens still available for the spender\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increases the number of tokens a spender is allowed to spend for\n', '   * `msg.sender`\n', '   * @param _spender address The address of the spender\n', '   * @param _addedValue uint256 The amount to increase the spenders approval by\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decreases the number of tokens a spender is allowed to spend for\n', '   * `msg.sender`\n', '   * @param _spender address The address of the spender\n', '   * @param _subtractedValue uint256 The amount to decrease the spenders approval by\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    uint _value = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > _value) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = _value.sub(_subtractedValue);\n', '    }\n', '\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}']
