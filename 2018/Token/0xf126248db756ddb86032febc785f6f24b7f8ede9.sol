['pragma solidity ^0.4.18;\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/XdacToken.sol\n', '\n', 'contract XdacToken is StandardToken, Ownable {\n', '    string public name = "XDAC COIN";\n', '    string public symbol = "XDAC";\n', '    uint8 public decimals = 18;\n', '    /**\n', '     * @dev Constructor that gives msg.sender all of existing tokens.\n', '     */\n', '    function XdacToken(uint256 _initial_supply) public {\n', '        totalSupply_ = _initial_supply;\n', '        balances[msg.sender] = _initial_supply;\n', '        Transfer(0x0, msg.sender, _initial_supply);\n', '    }\n', '}\n', '\n', '// File: contracts/XdacTokenCrowdsale.sol\n', '\n', '/**\n', ' * @title XdacTokenCrowdsale\n', ' */\n', 'contract XdacTokenCrowdsale is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    uint256[] roundGoals;\n', '    uint256[] roundRates;\n', '    uint256 minContribution;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    mapping(address => Contributor) public contributors;\n', '    //Array of the addresses who participated\n', '    address[] addresses;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiDelivered;\n', '\n', '\n', '    event TokenRefund(address indexed purchaser, uint256 amount);\n', '    event TokenPurchase(address indexed purchaser, address indexed contributor, uint256 value, uint256 amount);\n', '\n', '    struct Contributor {\n', '        uint256 eth;\n', '        bool whitelisted;\n', '        bool created;\n', '    }\n', '\n', '\n', '    function XdacTokenCrowdsale(\n', '        address _wallet,\n', '        uint256[] _roundGoals,\n', '        uint256[] _roundRates,\n', '        uint256 _minContribution,\n', '        uint256 _initial_supply\n', '    ) public {\n', '        require(_wallet != address(0));\n', '        require(_roundRates.length == 5);\n', '        require(_roundGoals.length == 5);\n', '        roundGoals = _roundGoals;\n', '        roundRates = _roundRates;\n', '        minContribution = _minContribution;\n', '        token = new XdacToken(_initial_supply);\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev fallback function\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev token purchase\n', '     * @param _contributor Address performing the token purchase\n', '     */\n', '    function buyTokens(address _contributor) public payable {\n', '        require(_contributor != address(0));\n', '        require(msg.value != 0);\n', '        require(msg.value >= minContribution);\n', '        require(weiDelivered.add(msg.value) <= roundGoals[4]);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(msg.value);\n', '\n', '        TokenPurchase(msg.sender, _contributor, msg.value, tokens);\n', '        _forwardFunds();\n', '    }\n', '\n', '    /**********internal***********/\n', '    function _getCurrentRound() internal view returns (uint) {\n', '        for (uint i = 0; i < 5; i++) {\n', '            if (weiDelivered < roundGoals[i]) {\n', '                return i;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint curRound = _getCurrentRound();\n', '        uint256 calculatedTokenAmount = 0;\n', '        uint256 roundWei = 0;\n', '        uint256 weiRaisedIntermediate = weiDelivered;\n', '        uint256 weiAmount = _weiAmount;\n', '\n', '        for (curRound; curRound < 5; curRound++) {\n', '            if (weiRaisedIntermediate.add(weiAmount) > roundGoals[curRound]) {\n', '                roundWei = roundGoals[curRound].sub(weiRaisedIntermediate);\n', '                weiRaisedIntermediate = weiRaisedIntermediate.add(roundWei);\n', '                weiAmount = weiAmount.sub(roundWei);\n', '                calculatedTokenAmount = calculatedTokenAmount.add(roundWei.mul(roundRates[curRound]));\n', '            }\n', '            else {\n', '                calculatedTokenAmount = calculatedTokenAmount.add(weiAmount.mul(roundRates[curRound]));\n', '                break;\n', '            }\n', '        }\n', '        return calculatedTokenAmount;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev the way in which tokens is converted to ether.\n', '     * @param _tokenAmount Value in token to be converted into wei\n', '     * @return Number of ether that required to purchase with the specified _tokenAmount\n', '     */\n', '    function _getEthAmount(uint256 _tokenAmount) internal view returns (uint256) {\n', '        uint curRound = _getCurrentRound();\n', '        uint256 calculatedWeiAmount = 0;\n', '        uint256 roundWei = 0;\n', '        uint256 weiRaisedIntermediate = weiDelivered;\n', '        uint256 tokenAmount = _tokenAmount;\n', '\n', '        for (curRound; curRound < 5; curRound++) {\n', '            if(weiRaisedIntermediate.add(tokenAmount.div(roundRates[curRound])) > roundGoals[curRound]) {\n', '                roundWei = roundGoals[curRound].sub(weiRaisedIntermediate);\n', '                weiRaisedIntermediate = weiRaisedIntermediate.add(roundWei);\n', '                tokenAmount = tokenAmount.sub(roundWei.div(roundRates[curRound]));\n', '                calculatedWeiAmount = calculatedWeiAmount.add(tokenAmount.div(roundRates[curRound]));\n', '            }\n', '            else {\n', '                calculatedWeiAmount = calculatedWeiAmount.add(tokenAmount.div(roundRates[curRound]));\n', '                break;\n', '            }\n', '        }\n', '\n', '        return calculatedWeiAmount;\n', '    }\n', '\n', '    function _forwardFunds() internal {\n', '        Contributor storage contributor = contributors[msg.sender];\n', '        contributor.eth = contributor.eth.add(msg.value);\n', '        if (contributor.created == false) {\n', '            contributor.created = true;\n', '            addresses.push(msg.sender);\n', '        }\n', '        if (contributor.whitelisted) {\n', '            _deliverTokens(msg.sender);\n', '        }\n', '    }\n', '\n', '    function _deliverTokens(address _contributor) internal {\n', '        Contributor storage contributor = contributors[_contributor];\n', '        uint256 amountEth = contributor.eth;\n', '        uint256 amountToken = _getTokenAmount(amountEth);\n', '        require(amountToken > 0);\n', '        require(amountEth > 0);\n', '        require(contributor.whitelisted);\n', '        contributor.eth = 0;\n', '        weiDelivered = weiDelivered.add(amountEth);\n', '        wallet.transfer(amountEth);\n', '        token.transfer(_contributor, amountToken);\n', '    }\n', '\n', '    function _refundTokens(address _contributor) internal {\n', '        Contributor storage contributor = contributors[_contributor];\n', '        uint256 ethAmount = contributor.eth;\n', '        require(ethAmount > 0);\n', '        contributor.eth = 0;\n', '        TokenRefund(_contributor, ethAmount);\n', '        _contributor.transfer(ethAmount);\n', '    }\n', '\n', '    function _whitelistAddress(address _contributor) internal {\n', '        Contributor storage contributor = contributors[_contributor];\n', '        contributor.whitelisted = true;\n', '        if (contributor.created == false) {\n', '            contributor.created = true;\n', '            addresses.push(_contributor);\n', '        }\n', '        //Auto deliver tokens\n', '        if (contributor.eth > 0) {\n', '            _deliverTokens(_contributor);\n', '        }\n', '    }\n', '\n', '    function _sendToken(address _address, uint256 _amountTokens) internal{\n', '        XdacToken _token = XdacToken(token);\n', '        require(_token.balanceOf(_token.owner()) >= _amountTokens);\n', '        _token.transfer(_address, _amountTokens);\n', '    }\n', '\n', '    /**********************owner*************************/\n', '\n', '    function whitelistAddresses(address[] _contributors) public onlyOwner {\n', '        for (uint256 i = 0; i < _contributors.length; i++) {\n', '            _whitelistAddress(_contributors[i]);\n', '        }\n', '    }\n', '\n', '\n', '    function whitelistAddress(address _contributor) public onlyOwner {\n', '        _whitelistAddress(_contributor);\n', '    }\n', '\n', '    function transferTokenOwnership(address _newOwner) public onlyOwner returns(bool success) {\n', '        XdacToken _token = XdacToken(token);\n', '        _token.transfer(_newOwner, _token.balanceOf(_token.owner()));\n', '        _token.transferOwnership(_newOwner);\n', '        return true;\n', '    }\n', '\n', '    function sendToken(address _address, uint256 _amountTokens) public onlyOwner returns(bool success) {\n', '        _sendToken(_address, _amountTokens);\n', '        return true;\n', '    }\n', '\n', '    function sendTokens(address[] _addresses, uint256[] _amountTokens) public onlyOwner returns(bool success) {\n', '        require(_addresses.length > 0);\n', '        require(_amountTokens.length > 0);\n', '        require(_addresses.length  == _amountTokens.length);\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            _sendToken(_addresses[i], _amountTokens[i]);\n', '        }\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Refound tokens. For owner\n', '     */\n', '    function refundTokensForAddress(address _contributor) public onlyOwner {\n', '        _refundTokens(_contributor);\n', '    }\n', '\n', '\n', '    /**********************contributor*************************/\n', '\n', '    function getAddresses() public onlyOwner view returns (address[] )  {\n', '        return addresses;\n', '    }\n', '\n', '    /**\n', '    * @dev Refound tokens. For contributors\n', '    */\n', '    function refundTokens() public {\n', '        _refundTokens(msg.sender);\n', '    }\n', '    /**\n', '     * @dev Returns tokens according to rate\n', '     */\n', '    function getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\n', '        return _getTokenAmount(_weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns ether according to rate\n', '     */\n', '    function getEthAmount(uint256 _tokenAmount) public view returns (uint256) {\n', '        return _getEthAmount(_tokenAmount);\n', '    }\n', '\n', '    function getCurrentRate() public view returns (uint256) {\n', '        return roundRates[_getCurrentRound()];\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/XdacToken.sol\n', '\n', 'contract XdacToken is StandardToken, Ownable {\n', '    string public name = "XDAC COIN";\n', '    string public symbol = "XDAC";\n', '    uint8 public decimals = 18;\n', '    /**\n', '     * @dev Constructor that gives msg.sender all of existing tokens.\n', '     */\n', '    function XdacToken(uint256 _initial_supply) public {\n', '        totalSupply_ = _initial_supply;\n', '        balances[msg.sender] = _initial_supply;\n', '        Transfer(0x0, msg.sender, _initial_supply);\n', '    }\n', '}\n', '\n', '// File: contracts/XdacTokenCrowdsale.sol\n', '\n', '/**\n', ' * @title XdacTokenCrowdsale\n', ' */\n', 'contract XdacTokenCrowdsale is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    uint256[] roundGoals;\n', '    uint256[] roundRates;\n', '    uint256 minContribution;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    mapping(address => Contributor) public contributors;\n', '    //Array of the addresses who participated\n', '    address[] addresses;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiDelivered;\n', '\n', '\n', '    event TokenRefund(address indexed purchaser, uint256 amount);\n', '    event TokenPurchase(address indexed purchaser, address indexed contributor, uint256 value, uint256 amount);\n', '\n', '    struct Contributor {\n', '        uint256 eth;\n', '        bool whitelisted;\n', '        bool created;\n', '    }\n', '\n', '\n', '    function XdacTokenCrowdsale(\n', '        address _wallet,\n', '        uint256[] _roundGoals,\n', '        uint256[] _roundRates,\n', '        uint256 _minContribution,\n', '        uint256 _initial_supply\n', '    ) public {\n', '        require(_wallet != address(0));\n', '        require(_roundRates.length == 5);\n', '        require(_roundGoals.length == 5);\n', '        roundGoals = _roundGoals;\n', '        roundRates = _roundRates;\n', '        minContribution = _minContribution;\n', '        token = new XdacToken(_initial_supply);\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev fallback function\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev token purchase\n', '     * @param _contributor Address performing the token purchase\n', '     */\n', '    function buyTokens(address _contributor) public payable {\n', '        require(_contributor != address(0));\n', '        require(msg.value != 0);\n', '        require(msg.value >= minContribution);\n', '        require(weiDelivered.add(msg.value) <= roundGoals[4]);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(msg.value);\n', '\n', '        TokenPurchase(msg.sender, _contributor, msg.value, tokens);\n', '        _forwardFunds();\n', '    }\n', '\n', '    /**********internal***********/\n', '    function _getCurrentRound() internal view returns (uint) {\n', '        for (uint i = 0; i < 5; i++) {\n', '            if (weiDelivered < roundGoals[i]) {\n', '                return i;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint curRound = _getCurrentRound();\n', '        uint256 calculatedTokenAmount = 0;\n', '        uint256 roundWei = 0;\n', '        uint256 weiRaisedIntermediate = weiDelivered;\n', '        uint256 weiAmount = _weiAmount;\n', '\n', '        for (curRound; curRound < 5; curRound++) {\n', '            if (weiRaisedIntermediate.add(weiAmount) > roundGoals[curRound]) {\n', '                roundWei = roundGoals[curRound].sub(weiRaisedIntermediate);\n', '                weiRaisedIntermediate = weiRaisedIntermediate.add(roundWei);\n', '                weiAmount = weiAmount.sub(roundWei);\n', '                calculatedTokenAmount = calculatedTokenAmount.add(roundWei.mul(roundRates[curRound]));\n', '            }\n', '            else {\n', '                calculatedTokenAmount = calculatedTokenAmount.add(weiAmount.mul(roundRates[curRound]));\n', '                break;\n', '            }\n', '        }\n', '        return calculatedTokenAmount;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev the way in which tokens is converted to ether.\n', '     * @param _tokenAmount Value in token to be converted into wei\n', '     * @return Number of ether that required to purchase with the specified _tokenAmount\n', '     */\n', '    function _getEthAmount(uint256 _tokenAmount) internal view returns (uint256) {\n', '        uint curRound = _getCurrentRound();\n', '        uint256 calculatedWeiAmount = 0;\n', '        uint256 roundWei = 0;\n', '        uint256 weiRaisedIntermediate = weiDelivered;\n', '        uint256 tokenAmount = _tokenAmount;\n', '\n', '        for (curRound; curRound < 5; curRound++) {\n', '            if(weiRaisedIntermediate.add(tokenAmount.div(roundRates[curRound])) > roundGoals[curRound]) {\n', '                roundWei = roundGoals[curRound].sub(weiRaisedIntermediate);\n', '                weiRaisedIntermediate = weiRaisedIntermediate.add(roundWei);\n', '                tokenAmount = tokenAmount.sub(roundWei.div(roundRates[curRound]));\n', '                calculatedWeiAmount = calculatedWeiAmount.add(tokenAmount.div(roundRates[curRound]));\n', '            }\n', '            else {\n', '                calculatedWeiAmount = calculatedWeiAmount.add(tokenAmount.div(roundRates[curRound]));\n', '                break;\n', '            }\n', '        }\n', '\n', '        return calculatedWeiAmount;\n', '    }\n', '\n', '    function _forwardFunds() internal {\n', '        Contributor storage contributor = contributors[msg.sender];\n', '        contributor.eth = contributor.eth.add(msg.value);\n', '        if (contributor.created == false) {\n', '            contributor.created = true;\n', '            addresses.push(msg.sender);\n', '        }\n', '        if (contributor.whitelisted) {\n', '            _deliverTokens(msg.sender);\n', '        }\n', '    }\n', '\n', '    function _deliverTokens(address _contributor) internal {\n', '        Contributor storage contributor = contributors[_contributor];\n', '        uint256 amountEth = contributor.eth;\n', '        uint256 amountToken = _getTokenAmount(amountEth);\n', '        require(amountToken > 0);\n', '        require(amountEth > 0);\n', '        require(contributor.whitelisted);\n', '        contributor.eth = 0;\n', '        weiDelivered = weiDelivered.add(amountEth);\n', '        wallet.transfer(amountEth);\n', '        token.transfer(_contributor, amountToken);\n', '    }\n', '\n', '    function _refundTokens(address _contributor) internal {\n', '        Contributor storage contributor = contributors[_contributor];\n', '        uint256 ethAmount = contributor.eth;\n', '        require(ethAmount > 0);\n', '        contributor.eth = 0;\n', '        TokenRefund(_contributor, ethAmount);\n', '        _contributor.transfer(ethAmount);\n', '    }\n', '\n', '    function _whitelistAddress(address _contributor) internal {\n', '        Contributor storage contributor = contributors[_contributor];\n', '        contributor.whitelisted = true;\n', '        if (contributor.created == false) {\n', '            contributor.created = true;\n', '            addresses.push(_contributor);\n', '        }\n', '        //Auto deliver tokens\n', '        if (contributor.eth > 0) {\n', '            _deliverTokens(_contributor);\n', '        }\n', '    }\n', '\n', '    function _sendToken(address _address, uint256 _amountTokens) internal{\n', '        XdacToken _token = XdacToken(token);\n', '        require(_token.balanceOf(_token.owner()) >= _amountTokens);\n', '        _token.transfer(_address, _amountTokens);\n', '    }\n', '\n', '    /**********************owner*************************/\n', '\n', '    function whitelistAddresses(address[] _contributors) public onlyOwner {\n', '        for (uint256 i = 0; i < _contributors.length; i++) {\n', '            _whitelistAddress(_contributors[i]);\n', '        }\n', '    }\n', '\n', '\n', '    function whitelistAddress(address _contributor) public onlyOwner {\n', '        _whitelistAddress(_contributor);\n', '    }\n', '\n', '    function transferTokenOwnership(address _newOwner) public onlyOwner returns(bool success) {\n', '        XdacToken _token = XdacToken(token);\n', '        _token.transfer(_newOwner, _token.balanceOf(_token.owner()));\n', '        _token.transferOwnership(_newOwner);\n', '        return true;\n', '    }\n', '\n', '    function sendToken(address _address, uint256 _amountTokens) public onlyOwner returns(bool success) {\n', '        _sendToken(_address, _amountTokens);\n', '        return true;\n', '    }\n', '\n', '    function sendTokens(address[] _addresses, uint256[] _amountTokens) public onlyOwner returns(bool success) {\n', '        require(_addresses.length > 0);\n', '        require(_amountTokens.length > 0);\n', '        require(_addresses.length  == _amountTokens.length);\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            _sendToken(_addresses[i], _amountTokens[i]);\n', '        }\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Refound tokens. For owner\n', '     */\n', '    function refundTokensForAddress(address _contributor) public onlyOwner {\n', '        _refundTokens(_contributor);\n', '    }\n', '\n', '\n', '    /**********************contributor*************************/\n', '\n', '    function getAddresses() public onlyOwner view returns (address[] )  {\n', '        return addresses;\n', '    }\n', '\n', '    /**\n', '    * @dev Refound tokens. For contributors\n', '    */\n', '    function refundTokens() public {\n', '        _refundTokens(msg.sender);\n', '    }\n', '    /**\n', '     * @dev Returns tokens according to rate\n', '     */\n', '    function getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\n', '        return _getTokenAmount(_weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns ether according to rate\n', '     */\n', '    function getEthAmount(uint256 _tokenAmount) public view returns (uint256) {\n', '        return _getEthAmount(_tokenAmount);\n', '    }\n', '\n', '    function getCurrentRate() public view returns (uint256) {\n', '        return roundRates[_getCurrentRound()];\n', '    }\n', '}']
