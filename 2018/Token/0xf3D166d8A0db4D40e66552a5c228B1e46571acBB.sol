['pragma solidity ^0.4.20;\n', '\n', 'contract owned {\n', '    address public owner;\n', '    \n', '    event Log(string s);\n', '    \n', '    constructor() public payable{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '    function isOwner()public{\n', '        if(msg.sender==owner)emit Log("Owner");\n', '        else{\n', '            emit Log("Not Owner");\n', '        }\n', '    }\n', '}\n', 'contract ERC20 is owned{\n', '\n', '    string public name;\n', '    string public symbol;\n', '\n', '    uint256 public totalSupply;\n', '    uint8 public constant decimals = 4;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '    constructor(uint256 _totalSupply,string tokenName,string tokenSymbol) public {\n', '        symbol = tokenSymbol;\n', '        name = tokenName;\n', '        totalSupply = _totalSupply;\n', '        balances[owner] = totalSupply;\n', '        emit Transfer(address(0), owner, totalSupply);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint){\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender ]- tokens;\n', '        balances[to] = balances[to] + tokens;\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from] - tokens;\n', '        allowed[from][msg.sender] = allowed[from][msg.sender] - (tokens);\n', '        balances[to] = balances[to]+(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '}\n', '\n', 'contract EPLAY is ERC20 {\n', '    \n', '    uint256 activeUsers;\n', '\n', '    mapping(address => bool) isRegistered;\n', '    mapping(address => uint256) accountID;\n', '    mapping(uint256 => address) accountFromID;\n', '    mapping(address => bool) isTrusted;\n', '\n', '    event Burn(address _from,uint256 _value);\n', '    \n', '    modifier isTrustedContract{\n', '        require(isTrusted[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    modifier registered{\n', '        require(isRegistered[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    constructor(\n', '        string tokenName,\n', '        string tokenSymbol) public payable\n', '        ERC20(74145513585,tokenName,tokenSymbol)\n', '    {\n', '       \n', '    }\n', '    \n', '    function distribute(address[] users,uint256[] balances) public onlyOwner {\n', '         uint i;\n', '        for(i = 0;i <users.length;i++){\n', '            transferFrom(owner,users[i],balances[i]);\n', '        }\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) internal returns (bool success) {\n', '        require(balances[_from] >= _value);\n', '        balances[_from] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    function contractBurn(address _for,uint256 value)external isTrustedContract{\n', '        burnFrom(_for,value);\n', '    }\n', '\n', '    function burn(uint256 val)public{\n', '        burnFrom(msg.sender,val);\n', '    }\n', '\n', '    function registerAccount(address user)internal{\n', '        if(!isRegistered[user]){\n', '            isRegistered[user] = true;\n', '            activeUsers += 1;\n', '            accountID[user] = activeUsers;\n', '            accountFromID[activeUsers] = user;\n', '        }\n', '    }\n', '    \n', '    function registerExternal()external{\n', '        registerAccount(msg.sender);\n', '    }\n', '    \n', '    function register() public {\n', '        registerAccount(msg.sender);\n', '    }\n', '\n', '    function testConnection() external {\n', '        emit Log("CONNECTED");\n', '    }\n', '}']