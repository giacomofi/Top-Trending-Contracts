['pragma solidity >= 0.4.24 < 0.6.0;\n', '\n', '\n', '/**\n', ' * @title Cat Coin for bbulddong\n', ' * @author Willy Lee\n', ' * See the manuals.\n', ' */\n', '\n', '\n', '/**\n', ' * @title ERC20 Standard Interface\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * removed functions : transferFrom, approve, allowance\n', ' * removed events : Approval\n', ' * Some functions are restricted.\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    //function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    //function approve(address spender, uint256 value) external returns (bool);\n', '    //function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    //event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title CatCoin implementation\n', ' * @author Willy Lee\n', ' */\n', 'contract CatCoin is IERC20 {\n', '    //using SafeMath for uint256;   //  unnecessary lib\n', '\n', '    string public name = "뻘쭘이코인";\n', '    string public symbol = "BBOL";\n', '    uint8 public decimals = 18;\n', '    \n', '    uint256 totalCoins;\n', '    mapping(address => uint256) balances;\n', '\n', '    // Admin Address\n', '    address public owner;\n', '    \n', '    // keep reserved coins in vault for each purpose\n', '    enum VaultEnum {mining, mkt, op, team, presale}\n', '    string[] VaultName = ["mining", "mkt", "op", "team", "presale"];\n', '    mapping(string => uint256) vault;\n', '\n', '    modifier isOwner {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    event BurnCoin(uint256 amount);\n', '\n', '    constructor() public {\n', '        uint256 discardCoins;    //  burning amount at initial time\n', '\n', '        owner = msg.sender;\n', '\n', '        setVaultBalance(VaultEnum.mining,   10000000000);   //  10 B\n', '        setVaultBalance(VaultEnum.mkt,      1000000000);    //  1 B\n', '        setVaultBalance(VaultEnum.op,       2000000000);    //  2 B\n', '        setVaultBalance(VaultEnum.team,     3000000000);    //  3 B, time lock to 2019-12-17\n', '        setVaultBalance(VaultEnum.presale,  3000000000);    //  3 B\n', '\n', '        discardCoins = convertToWei(1000000000);            //  1 B\n', '\n', '        // total must be 20 B\n', '        totalCoins = \n', '            getVaultBalance(VaultEnum.mining) +\n', '            getVaultBalance(VaultEnum.mkt) +\n', '            getVaultBalance(VaultEnum.op) +\n', '            getVaultBalance(VaultEnum.team) +\n', '            getVaultBalance(VaultEnum.presale) +\n', '            discardCoins;\n', '            \n', '        require(totalCoins == convertToWei(20000000000));\n', '        \n', '        totalCoins -= getVaultBalance(VaultEnum.team);    // exclude locked coins from total supply\n', '        balances[owner] = totalCoins;\n', '\n', '        emit Transfer(address(0), owner, balances[owner]);\n', '        burnCoin(discardCoins);\n', '    }\n', '    \n', '    /** @dev transfer mining coins to Megabit Exchanges address\n', '     */\n', '    function transferForMining(address to) external isOwner {\n', '        withdrawCoins(VaultName[uint256(VaultEnum.mining)], to);\n', '    }\n', '    \n', '    /** @dev withdraw coins for marketing budget to specified address\n', '     */\n', '    function withdrawForMkt(address to) external isOwner {\n', '        withdrawCoins(VaultName[uint256(VaultEnum.mkt)], to);\n', '    }\n', '    \n', '    /** @dev withdraw coins for maintenance cost to specified address\n', '     */\n', '    function withdrawForOp(address to) external isOwner {\n', '        withdrawCoins(VaultName[uint256(VaultEnum.op)], to);\n', '    }\n', '\n', '    /** @dev withdraw coins for Megabit team to specified address after locked date\n', '     */\n', '    function withdrawForTeam(address to) external isOwner {\n', '        uint256 balance = getVaultBalance(VaultEnum.team);\n', '        require(balance > 0);\n', '        require(now >= 1576594800);     // lock to 2019-12-17\n', '        //require(now >= 1544761320);     // test date for dev\n', '        \n', '        balances[owner] += balance;\n', '        totalCoins += balance;\n', '        withdrawCoins(VaultName[uint256(VaultEnum.team)], to);\n', '    }\n', '\n', '    /** @dev transfer sold(pre-sale) coins to specified address\n', '     */\n', '    function transferSoldCoins(address to, uint256 amount) external isOwner {\n', '        require(balances[owner] >= amount);\n', '        require(getVaultBalance(VaultEnum.presale) >= amount);\n', '        \n', '        balances[owner] -= amount;\n', '        balances[to] += amount;\n', '        setVaultBalance(VaultEnum.presale, getVaultBalance(VaultEnum.presale) - amount);\n', '\n', '        emit Transfer(owner, to, amount);\n', '    }\n', '\n', '    /** @dev implementation of withdrawal\n', '     *  @dev it is available once for each vault\n', '     */\n', '    function withdrawCoins(string vaultName, address to) private returns (uint256) {\n', '        uint256 balance = vault[vaultName];\n', '        \n', '        require(balance > 0);\n', '        require(balances[owner] >= balance);\n', '        require(owner != to);\n', '\n', '        balances[owner] -= balance;\n', '        balances[to] += balance;\n', '        vault[vaultName] = 0;\n', '        \n', '        emit Transfer(owner, to, balance);\n', '        return balance;\n', '    }\n', '    \n', '    function burnCoin(uint256 amount) public isOwner {\n', '        require(balances[msg.sender] >= amount);\n', '        require(totalCoins >= amount);\n', '\n', '        balances[msg.sender] -= amount;\n', '        totalCoins -= amount;\n', '\n', '        emit BurnCoin(amount);\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalCoins;\n', '    }\n', '\n', '    function balanceOf(address who) public view returns (uint256) {\n', '        return balances[who];\n', '    }\n', '    \n', '    function transfer(address to, uint256 value) public returns (bool success) {\n', '        require(msg.sender != to);\n', '        require(value > 0);\n', '        \n', '        require( balances[msg.sender] >= value );\n', '        require( balances[to] + value >= balances[to] );    // prevent overflow\n', '\n', '        balances[msg.sender] -= value;\n', '        balances[to] += value;\n', '\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    /** @dev private functions for manage vault\n', '     */\n', '    function setVaultBalance(VaultEnum vaultNum, uint256 amount) private {\n', '        vault[VaultName[uint256(vaultNum)]] = convertToWei(amount);\n', '    }\n', '    \n', '    function getVaultBalance(VaultEnum vaultNum) private constant returns (uint256) {\n', '        return vault[VaultName[uint256(vaultNum)]];\n', '    }\n', '    \n', '    function convertToWei(uint256 value) private constant returns (uint256) {\n', '        return value * (10 ** uint256(decimals));\n', '    }\n', '}']