['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Own() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '     emit   OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Flame is ERC20Interface, Owned {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public _maxSupply;\n', '    uint public _ratio;\n', '    bool disabled;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '\n', '\n', '    function Flames() public {\n', '            disabled = false;\n', '        symbol = "FLAME";\n', '\n', '        name = "Flame";\n', '        decimals = 18;\n', '        _totalSupply = 25000 * 10**uint(decimals);      \n', '\n', '        _ratio = 1000;\n', '\n', '        _maxSupply = 125000 * 10**uint(decimals);    \n', '        balances[owner] = _totalSupply;\n', ' \n', '      emit  Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', ' \n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(balances[msg.sender] >= tokens);\n', '        balances[msg.sender] -= tokens;\n', '        balances[to] += tokens;\n', '      emit  Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '     emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', ' function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require (allowed[from][msg.sender] >= tokens);\n', '        require (balances[from] >= tokens);\n', '        \n', '        balances[from] -= tokens;\n', '        allowed[from][msg.sender] -= tokens;\n', '        balances[to] += tokens;\n', '      emit  Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '      emit  Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    function disablePresale(bool _disabled) public onlyOwner returns (bool success) {\n', '        disabled = _disabled;\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '        require(msg.value >= 100000000000);\n', '        require(_totalSupply+(msg.value*_ratio)<=_maxSupply);\n', '        \n', '        uint tokens;\n', '        tokens = msg.value*_ratio;\n', '\n', '        balances[msg.sender] += tokens;\n', '        _totalSupply += tokens;\n', '     emit   Transfer(address(0), msg.sender, tokens);\n', '    }\n', '\n', '\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '\n', '\n', '    function checkBalance() public constant returns (uint checkBal) {\n', '        return address(this).balance;\n', '    }\n', '\n', '\n', '\n', '    function transferFunds(address _address, uint amount) public onlyOwner {\n', '       require(amount <= address(this).balance);\n', '        _address.transfer(amount);\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Own() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '     emit   OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Flame is ERC20Interface, Owned {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public _maxSupply;\n', '    uint public _ratio;\n', '    bool disabled;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '\n', '\n', '    function Flames() public {\n', '            disabled = false;\n', '        symbol = "FLAME";\n', '\n', '        name = "Flame";\n', '        decimals = 18;\n', '        _totalSupply = 25000 * 10**uint(decimals);      \n', '\n', '        _ratio = 1000;\n', '\n', '        _maxSupply = 125000 * 10**uint(decimals);    \n', '        balances[owner] = _totalSupply;\n', ' \n', '      emit  Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', ' \n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(balances[msg.sender] >= tokens);\n', '        balances[msg.sender] -= tokens;\n', '        balances[to] += tokens;\n', '      emit  Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '     emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', ' function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require (allowed[from][msg.sender] >= tokens);\n', '        require (balances[from] >= tokens);\n', '        \n', '        balances[from] -= tokens;\n', '        allowed[from][msg.sender] -= tokens;\n', '        balances[to] += tokens;\n', '      emit  Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '      emit  Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    function disablePresale(bool _disabled) public onlyOwner returns (bool success) {\n', '        disabled = _disabled;\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '        require(msg.value >= 100000000000);\n', '        require(_totalSupply+(msg.value*_ratio)<=_maxSupply);\n', '        \n', '        uint tokens;\n', '        tokens = msg.value*_ratio;\n', '\n', '        balances[msg.sender] += tokens;\n', '        _totalSupply += tokens;\n', '     emit   Transfer(address(0), msg.sender, tokens);\n', '    }\n', '\n', '\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '\n', '\n', '    function checkBalance() public constant returns (uint checkBal) {\n', '        return address(this).balance;\n', '    }\n', '\n', '\n', '\n', '    function transferFunds(address _address, uint amount) public onlyOwner {\n', '       require(amount <= address(this).balance);\n', '        _address.transfer(amount);\n', '    }\n', '}']
