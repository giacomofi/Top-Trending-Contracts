['pragma solidity ^0.4.20;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/// @title BlockchainCuties Presale\n', 'contract BlockchainCutiesPresale is Pausable\n', '{\n', '\tstruct Purchase\n', '\t{\n', '\t\taddress owner;\n', '\t\tuint32 cutieKind;\n', '\t}\n', '\tPurchase[] public purchases;\n', '\n', '\tmapping (uint32 => uint256) public prices;\n', '\tmapping (uint32 => uint256) public leftCount;\n', '\n', '\tevent Bid(address indexed owner, uint32 indexed cutieKind);\n', '\n', '\tfunction addCutie(uint32 id, uint256 price, uint256 count) public onlyOwner\n', '\t{\n', '\t\tprices[id] = price;\n', '\t\tleftCount[id] = count;\n', '\t}\n', '\n', '\tfunction isAvailable(uint32 cutieKind) public view returns (bool)\n', '\t{\n', '\t\treturn leftCount[cutieKind] > 0;\n', '\t}\n', '\n', '\tfunction getPrice(uint32 cutieKind) public view returns (uint256 price, uint256 left)\n', '\t{\n', '\t\tprice = prices[cutieKind];\n', '\t\tleft = leftCount[cutieKind];\n', '\t}\n', '\n', '\tfunction bid(uint32 cutieKind) public payable whenNotPaused\n', '\t{\n', '\t\trequire(isAvailable(cutieKind));\n', '\t\trequire(prices[cutieKind] <= msg.value);\n', '\n', '\t\tpurchases.push(Purchase(msg.sender, cutieKind));\n', '\t\tleftCount[cutieKind]--;\n', '\n', '\t\temit Bid(msg.sender, cutieKind);\n', '\t}\n', '\n', '\tfunction purchasesCount() public view returns (uint256)\n', '\t{\n', '\t\treturn purchases.length;\n', '\t}\n', '\n', '    function destroyContract() public onlyOwner {\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        address(msg.sender).transfer(address(this).balance);\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/// @title BlockchainCuties Presale\n', 'contract BlockchainCutiesPresale is Pausable\n', '{\n', '\tstruct Purchase\n', '\t{\n', '\t\taddress owner;\n', '\t\tuint32 cutieKind;\n', '\t}\n', '\tPurchase[] public purchases;\n', '\n', '\tmapping (uint32 => uint256) public prices;\n', '\tmapping (uint32 => uint256) public leftCount;\n', '\n', '\tevent Bid(address indexed owner, uint32 indexed cutieKind);\n', '\n', '\tfunction addCutie(uint32 id, uint256 price, uint256 count) public onlyOwner\n', '\t{\n', '\t\tprices[id] = price;\n', '\t\tleftCount[id] = count;\n', '\t}\n', '\n', '\tfunction isAvailable(uint32 cutieKind) public view returns (bool)\n', '\t{\n', '\t\treturn leftCount[cutieKind] > 0;\n', '\t}\n', '\n', '\tfunction getPrice(uint32 cutieKind) public view returns (uint256 price, uint256 left)\n', '\t{\n', '\t\tprice = prices[cutieKind];\n', '\t\tleft = leftCount[cutieKind];\n', '\t}\n', '\n', '\tfunction bid(uint32 cutieKind) public payable whenNotPaused\n', '\t{\n', '\t\trequire(isAvailable(cutieKind));\n', '\t\trequire(prices[cutieKind] <= msg.value);\n', '\n', '\t\tpurchases.push(Purchase(msg.sender, cutieKind));\n', '\t\tleftCount[cutieKind]--;\n', '\n', '\t\temit Bid(msg.sender, cutieKind);\n', '\t}\n', '\n', '\tfunction purchasesCount() public view returns (uint256)\n', '\t{\n', '\t\treturn purchases.length;\n', '\t}\n', '\n', '    function destroyContract() public onlyOwner {\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '    function withdraw() public onlyOwner {\n', '        address(msg.sender).transfer(address(this).balance);\n', '    }\n', '}']
