['pragma solidity^0.4.24;\n', ' //////// https://M2D.win \\\\\\\\\\\\\\\n', '////////   Laughing Man   \\\\\\\\\\\\\\\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract StandardToken  {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier hasMintPermission() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '      )\n', '      public\n', '      hasMintPermission\n', '      canMint\n', '      returns (bool)\n', '    {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() public onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MobiusToken is MintableToken {\n', '\n', '    using SafeMath for uint;\n', '    address creator = msg.sender;\n', '    uint8 public decimals = 18;\n', '    string public name = "M&#246;bius 2D";\n', '    string public symbol = "M2D";\n', '\n', '    uint public totalDividends;\n', '    uint public lastRevenueBnum;\n', '\n', '    uint public unclaimedDividends;\n', '\n', '    struct DividendAccount {\n', '        uint balance;\n', '        uint lastCumulativeDividends;\n', '        uint lastWithdrawnBnum;\n', '    }\n', '\n', '    mapping (address => DividendAccount) public dividendAccounts;\n', '\n', '    modifier onlyTokenHolders{\n', '        require(balances[msg.sender] > 0, "Not a token owner!");\n', '        _;\n', '    }\n', '    \n', '    modifier updateAccount(address _of) {\n', '        _updateDividends(_of);\n', '        _;\n', '    }\n', '\n', '    event DividendsWithdrawn(address indexed from, uint value);\n', '    event DividendsTransferred(address indexed from, address indexed to, uint value);\n', '    event DividendsDisbursed(uint value);\n', '        \n', '    function mint(address _to, uint256 _amount) public \n', '    returns (bool)\n', '    {   \n', '        // devs get 33.3% of all tokens. Much of this will be used for bounties and community incentives\n', '        super.mint(creator, _amount/2);\n', '        // When an investor gets 2 tokens, devs get 1\n', '        return super.mint(_to, _amount);\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        \n', '        _transferDividends(msg.sender, _to, _value);\n', '        require(super.transfer(_to, _value), "Failed to transfer tokens!");\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        \n', '        _transferDividends(_from, _to, _value);\n', '        require(super.transferFrom(_from, _to, _value), "Failed to transfer tokens!");\n', '        return true;\n', '    }\n', '\n', '    // Devs can move tokens without dividends during the ICO for bounty purposes\n', '    function donate(address _to, uint _value) public returns (bool success) {\n', '        require(msg.sender == creator, "You can&#39;t do that!");\n', '        require(!mintingFinished, "ICO Period is over - use a normal transfer.");\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function withdrawDividends() public onlyTokenHolders {\n', '        uint amount = _getDividendsBalance(msg.sender);\n', '        require(amount > 0, "Nothing to withdraw!");\n', '        unclaimedDividends = unclaimedDividends.sub(amount);\n', '        dividendAccounts[msg.sender].balance = 0;\n', '        dividendAccounts[msg.sender].lastWithdrawnBnum = block.number;\n', '        msg.sender.transfer(amount);\n', '        emit DividendsWithdrawn(msg.sender, amount);\n', '    }\n', '\n', '    function dividendsAvailable(address _for) public view returns(bool) {\n', '        return lastRevenueBnum >= dividendAccounts[_for].lastWithdrawnBnum;\n', '    }\n', '\n', '    function getDividendsBalance(address _of) external view returns(uint) {\n', '        uint outstanding = _dividendsOutstanding(_of);\n', '        if (outstanding > 0) {\n', '            return dividendAccounts[_of].balance.add(outstanding);\n', '        }\n', '        return dividendAccounts[_of].balance;\n', '    }\n', '\n', '    function disburseDividends() public payable {\n', '        if(msg.value == 0) {\n', '            return;\n', '        }\n', '        totalDividends = totalDividends.add(msg.value);\n', '        unclaimedDividends = unclaimedDividends.add(msg.value);\n', '        lastRevenueBnum = block.number;\n', '        emit DividendsDisbursed(msg.value);\n', '    }\n', '\n', '    function () public payable {\n', '        disburseDividends();\n', '    }\n', '\n', '    function _transferDividends(address _from, address _to, uint _tokensValue) internal \n', '    updateAccount(_from)\n', '    updateAccount(_to) \n', '    {\n', '        uint amount = dividendAccounts[_from].balance.mul(_tokensValue).div(balances[_from]);\n', '        if(amount > 0) {\n', '            dividendAccounts[_from].balance = dividendAccounts[_from].balance.sub(amount);\n', '            dividendAccounts[_to].balance = dividendAccounts[_to].balance.add(amount); \n', '            dividendAccounts[_to].lastWithdrawnBnum = dividendAccounts[_from].lastWithdrawnBnum;\n', '            emit DividendsTransferred(_from, _to, amount);\n', '        }\n', '    }\n', '    \n', '    function _getDividendsBalance(address _holder) internal\n', '    updateAccount(_holder)\n', '    returns(uint) \n', '    {\n', '        return dividendAccounts[_holder].balance;\n', '    }    \n', '\n', '    function _updateDividends(address _holder) internal {\n', '        require(mintingFinished, "Can&#39;t calculate balances if still minting tokens!");\n', '        uint outstanding = _dividendsOutstanding(_holder);\n', '        if (outstanding > 0) {\n', '            dividendAccounts[_holder].balance = dividendAccounts[_holder].balance.add(outstanding);\n', '        }\n', '        dividendAccounts[_holder].lastCumulativeDividends = totalDividends;\n', '    }\n', '\n', '    function _dividendsOutstanding(address _holder) internal view returns(uint) {\n', '        uint newDividends = totalDividends.sub(dividendAccounts[_holder].lastCumulativeDividends);\n', '        \n', '        if(newDividends == 0) {\n', '            return 0;\n', '        } else {\n', '            return newDividends.mul(balances[_holder]).div(totalSupply_);\n', '        }\n', '    }   \n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}']
['pragma solidity^0.4.24;\n', ' //////// https://M2D.win \\\\\\\\\\\\\\\n', '////////   Laughing Man   \\\\\\\\\\\\\\\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract StandardToken  {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier hasMintPermission() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '      )\n', '      public\n', '      hasMintPermission\n', '      canMint\n', '      returns (bool)\n', '    {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() public onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MobiusToken is MintableToken {\n', '\n', '    using SafeMath for uint;\n', '    address creator = msg.sender;\n', '    uint8 public decimals = 18;\n', '    string public name = "Möbius 2D";\n', '    string public symbol = "M2D";\n', '\n', '    uint public totalDividends;\n', '    uint public lastRevenueBnum;\n', '\n', '    uint public unclaimedDividends;\n', '\n', '    struct DividendAccount {\n', '        uint balance;\n', '        uint lastCumulativeDividends;\n', '        uint lastWithdrawnBnum;\n', '    }\n', '\n', '    mapping (address => DividendAccount) public dividendAccounts;\n', '\n', '    modifier onlyTokenHolders{\n', '        require(balances[msg.sender] > 0, "Not a token owner!");\n', '        _;\n', '    }\n', '    \n', '    modifier updateAccount(address _of) {\n', '        _updateDividends(_of);\n', '        _;\n', '    }\n', '\n', '    event DividendsWithdrawn(address indexed from, uint value);\n', '    event DividendsTransferred(address indexed from, address indexed to, uint value);\n', '    event DividendsDisbursed(uint value);\n', '        \n', '    function mint(address _to, uint256 _amount) public \n', '    returns (bool)\n', '    {   \n', '        // devs get 33.3% of all tokens. Much of this will be used for bounties and community incentives\n', '        super.mint(creator, _amount/2);\n', '        // When an investor gets 2 tokens, devs get 1\n', '        return super.mint(_to, _amount);\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        \n', '        _transferDividends(msg.sender, _to, _value);\n', '        require(super.transfer(_to, _value), "Failed to transfer tokens!");\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        \n', '        _transferDividends(_from, _to, _value);\n', '        require(super.transferFrom(_from, _to, _value), "Failed to transfer tokens!");\n', '        return true;\n', '    }\n', '\n', '    // Devs can move tokens without dividends during the ICO for bounty purposes\n', '    function donate(address _to, uint _value) public returns (bool success) {\n', '        require(msg.sender == creator, "You can\'t do that!");\n', '        require(!mintingFinished, "ICO Period is over - use a normal transfer.");\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function withdrawDividends() public onlyTokenHolders {\n', '        uint amount = _getDividendsBalance(msg.sender);\n', '        require(amount > 0, "Nothing to withdraw!");\n', '        unclaimedDividends = unclaimedDividends.sub(amount);\n', '        dividendAccounts[msg.sender].balance = 0;\n', '        dividendAccounts[msg.sender].lastWithdrawnBnum = block.number;\n', '        msg.sender.transfer(amount);\n', '        emit DividendsWithdrawn(msg.sender, amount);\n', '    }\n', '\n', '    function dividendsAvailable(address _for) public view returns(bool) {\n', '        return lastRevenueBnum >= dividendAccounts[_for].lastWithdrawnBnum;\n', '    }\n', '\n', '    function getDividendsBalance(address _of) external view returns(uint) {\n', '        uint outstanding = _dividendsOutstanding(_of);\n', '        if (outstanding > 0) {\n', '            return dividendAccounts[_of].balance.add(outstanding);\n', '        }\n', '        return dividendAccounts[_of].balance;\n', '    }\n', '\n', '    function disburseDividends() public payable {\n', '        if(msg.value == 0) {\n', '            return;\n', '        }\n', '        totalDividends = totalDividends.add(msg.value);\n', '        unclaimedDividends = unclaimedDividends.add(msg.value);\n', '        lastRevenueBnum = block.number;\n', '        emit DividendsDisbursed(msg.value);\n', '    }\n', '\n', '    function () public payable {\n', '        disburseDividends();\n', '    }\n', '\n', '    function _transferDividends(address _from, address _to, uint _tokensValue) internal \n', '    updateAccount(_from)\n', '    updateAccount(_to) \n', '    {\n', '        uint amount = dividendAccounts[_from].balance.mul(_tokensValue).div(balances[_from]);\n', '        if(amount > 0) {\n', '            dividendAccounts[_from].balance = dividendAccounts[_from].balance.sub(amount);\n', '            dividendAccounts[_to].balance = dividendAccounts[_to].balance.add(amount); \n', '            dividendAccounts[_to].lastWithdrawnBnum = dividendAccounts[_from].lastWithdrawnBnum;\n', '            emit DividendsTransferred(_from, _to, amount);\n', '        }\n', '    }\n', '    \n', '    function _getDividendsBalance(address _holder) internal\n', '    updateAccount(_holder)\n', '    returns(uint) \n', '    {\n', '        return dividendAccounts[_holder].balance;\n', '    }    \n', '\n', '    function _updateDividends(address _holder) internal {\n', '        require(mintingFinished, "Can\'t calculate balances if still minting tokens!");\n', '        uint outstanding = _dividendsOutstanding(_holder);\n', '        if (outstanding > 0) {\n', '            dividendAccounts[_holder].balance = dividendAccounts[_holder].balance.add(outstanding);\n', '        }\n', '        dividendAccounts[_holder].lastCumulativeDividends = totalDividends;\n', '    }\n', '\n', '    function _dividendsOutstanding(address _holder) internal view returns(uint) {\n', '        uint newDividends = totalDividends.sub(dividendAccounts[_holder].lastCumulativeDividends);\n', '        \n', '        if(newDividends == 0) {\n', '            return 0;\n', '        } else {\n', '            return newDividends.mul(balances[_holder]).div(totalSupply_);\n', '        }\n', '    }   \n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}']
