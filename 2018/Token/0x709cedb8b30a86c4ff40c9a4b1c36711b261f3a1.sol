['pragma solidity ^0.4.16;\n', '\n', 'contract ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public constant returns(uint);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function safemul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safediv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function safesub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeadd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '    string internal _symbol;\n', '    string internal _name;\n', '    uint8 internal _decimals;\n', '    uint internal _totalSupply = 1000;\n', '    mapping (address => uint) internal _balanceOf;\n', '    mapping (address => mapping(address => uint)) internal _allowances;\n', '    \n', '    constructor(string symbol, string name, uint8 decimals, uint totalSupply) public {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply;\n', '    }\n', '    \n', '    function name() public constant returns (string) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public constant returns (string) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() public constant returns (uint8){\n', '        return _decimals;\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint){\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _addr) public constant returns (uint);\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '}\n', '\n', 'contract PapaBoxToken is Token("PaPB", "Papa Box Beta", 6, 10 ** 15 ), ERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    constructor() public {\n', '        _balanceOf[msg.sender] = _totalSupply;\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address addr) public constant returns(uint) {\n', '        return _balanceOf[addr];\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool){\n', '        if(_value > 0 &&\n', '            _value <= _balanceOf[msg.sender] &&\n', '            !isContract(_to)) {\n', '                \n', '            _balanceOf[msg.sender] = _balanceOf[msg.sender].safesub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].safeadd(_value);\n', '            \n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function isContract(address _addr) private constant returns(bool) {\n', '        uint codeSize;\n', '        _addr = _addr;\n', '        assembly {\n', '            codeSize := extcodesize(_addr)\n', '        }\n', '        return codeSize > 0;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns(bool)  {\n', '        if(_allowances[_from][msg.sender] > 0 &&\n', '            _value > 0 &&\n', '            _allowances[_from][msg.sender] >= _value) {\n', '                \n', '                _balanceOf[_from] = _balanceOf[_from].safesub(_value);\n', '                _balanceOf[_to] = _balanceOf[_to].safeadd(_value);\n', '                return true;\n', '            }\n', '            return false;\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        _allowances[msg.sender][_spender] = _value; \n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return _allowances[_owner][_spender];\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public constant returns(uint);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function safemul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safediv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function safesub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeadd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '    string internal _symbol;\n', '    string internal _name;\n', '    uint8 internal _decimals;\n', '    uint internal _totalSupply = 1000;\n', '    mapping (address => uint) internal _balanceOf;\n', '    mapping (address => mapping(address => uint)) internal _allowances;\n', '    \n', '    constructor(string symbol, string name, uint8 decimals, uint totalSupply) public {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply;\n', '    }\n', '    \n', '    function name() public constant returns (string) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public constant returns (string) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() public constant returns (uint8){\n', '        return _decimals;\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint){\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _addr) public constant returns (uint);\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '}\n', '\n', 'contract PapaBoxToken is Token("PaPB", "Papa Box Beta", 6, 10 ** 15 ), ERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    constructor() public {\n', '        _balanceOf[msg.sender] = _totalSupply;\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address addr) public constant returns(uint) {\n', '        return _balanceOf[addr];\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool){\n', '        if(_value > 0 &&\n', '            _value <= _balanceOf[msg.sender] &&\n', '            !isContract(_to)) {\n', '                \n', '            _balanceOf[msg.sender] = _balanceOf[msg.sender].safesub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].safeadd(_value);\n', '            \n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function isContract(address _addr) private constant returns(bool) {\n', '        uint codeSize;\n', '        _addr = _addr;\n', '        assembly {\n', '            codeSize := extcodesize(_addr)\n', '        }\n', '        return codeSize > 0;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns(bool)  {\n', '        if(_allowances[_from][msg.sender] > 0 &&\n', '            _value > 0 &&\n', '            _allowances[_from][msg.sender] >= _value) {\n', '                \n', '                _balanceOf[_from] = _balanceOf[_from].safesub(_value);\n', '                _balanceOf[_to] = _balanceOf[_to].safeadd(_value);\n', '                return true;\n', '            }\n', '            return false;\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        _allowances[msg.sender][_spender] = _value; \n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return _allowances[_owner][_spender];\n', '    }\n', '    \n', '}']
