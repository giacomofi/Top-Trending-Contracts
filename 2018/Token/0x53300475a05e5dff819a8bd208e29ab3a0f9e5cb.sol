['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', '\n', 'library SafeMath {\n', '  function safeMul(uint256 a, uint256 b)  internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', 'contract InTestPro1{\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '    bool public movePermissionStat = false;\n', '    bool public isLockTransfer = false;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '  \tmapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool)  public lockOf;\n', '\n', '    event AddSupply(address indexed from,uint256 _value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event BurnSupply(address indexed from, uint256 _value);\n', '\n', '    /* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 _value);\n', '\n', '  \t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 _value);\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    event MovePermission(address indexed form ,address indexed to);\n', '\n', '\n', '    constructor(uint256 initialSupply,  string tokenName, uint8 decimalUnits,  string tokenSymbol) public{\n', '      balanceOf[msg.sender] = initialSupply;\n', '      totalSupply = initialSupply;\n', '      name=tokenName;\n', '      symbol =tokenSymbol;\n', '      decimals = decimalUnits;\n', '      owner = msg.sender;\n', '    }\n', '\n', '    // function InTokenTest1130(uint256 initialSupply,\n', '    //                       string tokenName,\n', '    //                       uint8 decimalUnits,\n', '    //                       string tokenSymbol)  public {\n', '\n', '    //   balanceOf[msg.sender] = initialSupply;\n', '    //   totalSupply = initialSupply;\n', '    //   name=tokenName;\n', '    //   symbol =tokenSymbol;\n', '    //   decimals = decimalUnits;\n', '    //   owner = msg.sender;\n', '    // }\n', '\n', '    modifier onlyOwner{\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier canTransfer{\n', '        require(!isLockTransfer && !lockOf[msg.sender] );\n', '        _;\n', '    }\n', '\n', '    /* Change contract name */\n', '    function changeTokenName(string _tokenName) onlyOwner public returns (bool){\n', '        name = _tokenName;\n', '        return true;\n', '    }\n', '\n', '    /* Change contract symbol */\n', '    function changeSymbol(string tokenSymbol)  onlyOwner public returns (bool){\n', '         symbol = tokenSymbol;\n', '    }\n', '\n', '    /* Add supply symbol  */\n', '    function addSupply(uint256 _addSupply)  onlyOwner public returns (bool){\n', '        require(_addSupply>0);\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender],_addSupply);\n', '        totalSupply = SafeMath.safeAdd(totalSupply,_addSupply);\n', '        emit AddSupply(msg.sender,_addSupply);\n', '        return true;\n', '    }\n', '\n', '    /* burn symbol */\n', '    function burnSupply(uint256 supply) onlyOwner public returns (bool){\n', '        require(supply>0);\n', '        balanceOf[owner] = SafeMath.safeSub(balanceOf[owner],supply);\n', '        totalSupply = SafeMath.safeSub(totalSupply,supply);\n', '        emit BurnSupply(msg.sender,supply);\n', '        return true;\n', '    }\n', '\n', '    /* setter MovePermissionStat */\n', '    function setMovePermissionStat(bool status) onlyOwner public {\n', '       movePermissionStat = status;\n', '    }\n', '\n', '    /* move  permissions */\n', '    function movePermission(address to) onlyOwner public returns (bool){\n', '       require(movePermissionStat);\n', '       balanceOf[to] = SafeMath.safeAdd(balanceOf[to],balanceOf[owner]);\n', '       balanceOf[owner] = 0;\n', '       owner = to;\n', '       emit MovePermission(msg.sender,to);\n', '       return true;\n', '    }\n', '\n', '    function freezeAll(address to)  public returns (bool) {\n', '       return  freeze(to,balanceOf[to]);\n', '    }\n', '\n', '    function freeze(address to,uint256 _value) onlyOwner public returns (bool) {\n', '        require(to != 0x0 && to != owner && _value > 0) ;\n', '        /* banlanceof */\n', '        balanceOf[to] = SafeMath.safeSub(balanceOf[to],_value);\n', '        freezeOf[to] = SafeMath.safeAdd(freezeOf[to],_value);\n', '        emit Freeze(to,_value);\n', '        return true;\n', '    }\n', '\n', '    /* unFreeze value  */\n', '    function unFreeze(address to,uint256 _value) onlyOwner public returns (bool) {\n', '       require(to != 0x0 && to != owner && _value > 0);\n', '       freezeOf[to] = SafeMath.safeSub(freezeOf[to],_value);\n', '       balanceOf[to] = SafeMath.safeAdd(balanceOf[to],_value);\n', '       emit Unfreeze(to,_value);\n', '       return true;\n', '    }\n', '\n', '    /* unFreeze all  */\n', '    function unFreezeAll(address to) public returns (bool) {\n', '        return unFreeze(to,freezeOf[to]);\n', '    }\n', '\n', '    function lockAccount(address to) onlyOwner public returns (bool){\n', '       lockOf[to] = true;\n', '       return true;\n', '    }\n', '\n', '    function unlockAccount(address to) onlyOwner public returns (bool){\n', '       lockOf[to] = false;\n', '       return true;\n', '    }\n', '\n', '    function lockTransfer() onlyOwner public returns (bool){\n', '       isLockTransfer = true;\n', '       return true;\n', '    }\n', '\n', '    function unlockTransfer() onlyOwner public returns (bool){\n', '       isLockTransfer = false;\n', '       return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) canTransfer public {\n', '       require (_to != 0x0 && _value > 0 ) ;\n', '       require (balanceOf[msg.sender] >= _value) ;\n', '       balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);\n', '       balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n', '       emit Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)  public returns (bool) {\n', '        require ( _spender!=0x0 && _value > 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender,_spender,_value);\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool) {\n', '        require(_to != 0x0 && _value > 0);\n', '        require( !isLockTransfer && !lockOf[_from] && balanceOf[_from] >= _value && _value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function kill() onlyOwner  public {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}']