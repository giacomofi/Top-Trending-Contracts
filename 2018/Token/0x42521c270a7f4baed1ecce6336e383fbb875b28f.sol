['pragma solidity ^0.4.18;\n', '/*\n', 'The OCTIRON\n', '\n', 'ERC-20 Token Standard Compliant\n', 'EIP-621 Compliant\n', '\n', 'Contract developer: Oyewole Samuel <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6a08031e090f181e2a0d070b030644090507">[email&#160;protected]</a>\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * This contract is administered\n', ' */\n', '\n', 'contract admined {\n', '    address public admin; //Admin address is public\n', '    address public allowed;//Allowed addres is public\n', '\n', '    bool public locked = true; //initially locked\n', '    /**\n', '    * @dev This constructor set the initial admin of the contract\n', '    */\n', '    function admined() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-allowed functions\n', '        require(msg.sender == admin || msg.sender == allowed);\n', '        _;\n', '    }\n', '\n', '    modifier lock() { //A modifier to lock specific supply functions\n', '        require(locked == false);\n', '        _;\n', '    }\n', '\n', '\n', '    function allowedAddress(address _allowed) onlyAdmin public {\n', '        allowed = _allowed;\n', '        Allowed(_allowed);\n', '    }\n', '    /**\n', '    * @dev Transfer the adminship of the contract\n', '    * @param _newAdmin The address of the new admin.\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != address(0));\n', '        admin = _newAdmin;\n', '        TransferAdminship(admin);\n', '    }\n', '    /**\n', '    * @dev Enable or disable lock\n', '    * @param _locked Status.\n', '    */\n', '    function lockSupply(bool _locked) onlyAdmin public {\n', '        locked = _locked;\n', '        LockedSupply(locked);\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event TransferAdminship(address newAdmin);\n', '    event Admined(address administrador);\n', '    event LockedSupply(bool status);\n', '    event Allowed(address allow);\n', '}\n', '\n', '\n', '/**\n', ' * Token contract interface for external use\n', ' */\n', 'contract ERC20TokenInterface {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', 'contract ERC20Token is admined, ERC20TokenInterface { //Standar definition of an ERC20Token\n', '    using SafeMath for uint256;\n', '    uint256 totalSupply_;\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '\n', '    /**\n', '    * @dev Get the balance of an specified address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '      return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }    \n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token from an address to another specified address using allowance\n', '    * @param _from The address where token comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Assign allowance to an specified address to use the owner balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '      allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    *Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Octiron is admined, ERC20Token {\n', '    string public name = "Octiron";\n', '    string public symbol = "OCT1";\n', '    string public version = "1.0";\n', '    uint8 public decimals = 18;\n', '    address public owner = 0x29E4885Af72C8872aC8873da17a1B88b9Ab8134f;\n', '\n', '    function Octiron() public {\n', '        totalSupply_ = 500000000 * (10**uint256(decimals));\n', '        balances[this] = totalSupply_;\n', '        allowed[this][owner] = balances[this]; //Contract balance is allowed to creator\n', '\n', '        _transferTokenToOwner();\n', '        \n', '        /**\n', '        *Log Events\n', '        */\n', '        Transfer(0, this, totalSupply_);\n', '        Approval(this, owner, balances[this]);\n', '\n', '    }\n', '    \n', '    function _transferTokenToOwner() internal {\n', '        balances[this] = balances[this].sub(totalSupply_);\n', '        balances[owner] = balances[owner].add(totalSupply_);\n', '        Transfer(this, owner, totalSupply_);\n', '    }\n', '    \n', '    /**\n', '    *@dev Function to handle callback calls\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '}']