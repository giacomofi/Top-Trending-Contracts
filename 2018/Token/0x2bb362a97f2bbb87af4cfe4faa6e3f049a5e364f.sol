['pragma solidity ^0.4.20;\n', '\n', '//*************** SafeMath ***************\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b > 0);\n', '      uint256 c = a / b;\n', '      return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '  }\n', '}\n', '\n', '//*************** Ownable ***************\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() public {\n', '      owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '  function transferOwnership(address newOwner)public onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '  }\n', '}\n', '\n', '//************* ERC20 ***************\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address who)public constant returns (uint256);\n', '  function transfer(address to, uint256 value)public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value)public returns (bool);\n', '  function allowance(address owner, address spender)public constant returns (uint256);\n', '  function approve(address spender, uint256 value)public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//************* DoctorChain Token *************\n', '\n', 'contract DoctorChainToken is ERC20,Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\t// Token Info.\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint256 public totalSupply;\n', '\tuint256 public constant decimals = 18;\n', '\taddress[] private walletArr;\n', '\tuint walletIdx = 0;\n', '\tmapping (address => uint256) public balanceOf;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\tevent FundTransfer(address fundWallet, uint256 amount);\n', '\tfunction DoctorChainToken( ) public {\n', '\t\tname="DoctorChain";\n', '\t\tsymbol="DCH";\n', '\t\ttotalSupply = 1000000000*(10**decimals);\n', '\t\tbalanceOf[msg.sender] = totalSupply;\n', '\t\twalletArr.push(0x5Db3F5FD3081Eb6ADdc873ac79B6A7139422d168);\n', '\t}\n', '\tfunction balanceOf(address _who)public constant returns (uint256 balance) {\n', '\t    return balanceOf[_who];\n', '\t}\n', '\tfunction _transferFrom(address _from, address _to, uint256 _value)  internal {\n', '\t    require(_to != 0x0);\n', '\t    require(balanceOf[_from] >= _value);\n', '\t    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\t    uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\t    balanceOf[_from] = balanceOf[_from].sub(_value);\n', '\t    balanceOf[_to] = balanceOf[_to].add(_value);\n', '\t    emit Transfer(_from, _to, _value);\n', '\t    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '\t}\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool){\n', '\t    _transferFrom(msg.sender,_to,_value);\n', '\t    return true;\n', '\t}\n', '\tfunction ()public payable {\n', '\t    _tokenPurchase( msg.value);\n', '\t}\n', '\tfunction _tokenPurchase( uint256 _value) internal {\n', '\t    require(_value >= 0.1 ether);\n', '\t    address wallet = walletArr[walletIdx];\n', '\t    walletIdx = (walletIdx+1) % walletArr.length;\n', '\t    wallet.transfer(msg.value);\n', '\t    emit FundTransfer(wallet, msg.value);\n', '\t}\n', '\tfunction supply()  internal constant  returns (uint256) {\n', '\t    return balanceOf[owner];\n', '\t}\n', '\tfunction allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '\t    return allowed[_owner][_spender];\n', '\t}\n', '\tfunction approve(address _spender, uint256 _value)public returns (bool) {\n', '\t    allowed[msg.sender][_spender] = _value;\n', '\t    emit Approval(msg.sender, _spender, _value);\n', '\t    return true;\n', '\t}\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n', '\t    require(_value > 0);\n', '\t    require (allowed[_from][msg.sender] >= _value);\n', '\t    require(_to != 0x0);\n', '\t    require(balanceOf[_from] >= _value);\n', '\t    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\t    balanceOf[_from] = balanceOf[_from].sub(_value);\n', '\t    balanceOf[_to] = balanceOf[_to].add(_value);\n', '\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t    emit Transfer(_from, _to, _value);\n', '\t    return true;\n', '\t  }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '//*************** SafeMath ***************\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b > 0);\n', '      uint256 c = a / b;\n', '      return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '  }\n', '}\n', '\n', '//*************** Ownable ***************\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() public {\n', '      owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '  function transferOwnership(address newOwner)public onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '  }\n', '}\n', '\n', '//************* ERC20 ***************\n', '\n', 'contract ERC20 {\n', '  function balanceOf(address who)public constant returns (uint256);\n', '  function transfer(address to, uint256 value)public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value)public returns (bool);\n', '  function allowance(address owner, address spender)public constant returns (uint256);\n', '  function approve(address spender, uint256 value)public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//************* DoctorChain Token *************\n', '\n', 'contract DoctorChainToken is ERC20,Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\t// Token Info.\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint256 public totalSupply;\n', '\tuint256 public constant decimals = 18;\n', '\taddress[] private walletArr;\n', '\tuint walletIdx = 0;\n', '\tmapping (address => uint256) public balanceOf;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\tevent FundTransfer(address fundWallet, uint256 amount);\n', '\tfunction DoctorChainToken( ) public {\n', '\t\tname="DoctorChain";\n', '\t\tsymbol="DCH";\n', '\t\ttotalSupply = 1000000000*(10**decimals);\n', '\t\tbalanceOf[msg.sender] = totalSupply;\n', '\t\twalletArr.push(0x5Db3F5FD3081Eb6ADdc873ac79B6A7139422d168);\n', '\t}\n', '\tfunction balanceOf(address _who)public constant returns (uint256 balance) {\n', '\t    return balanceOf[_who];\n', '\t}\n', '\tfunction _transferFrom(address _from, address _to, uint256 _value)  internal {\n', '\t    require(_to != 0x0);\n', '\t    require(balanceOf[_from] >= _value);\n', '\t    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\t    uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\t    balanceOf[_from] = balanceOf[_from].sub(_value);\n', '\t    balanceOf[_to] = balanceOf[_to].add(_value);\n', '\t    emit Transfer(_from, _to, _value);\n', '\t    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '\t}\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool){\n', '\t    _transferFrom(msg.sender,_to,_value);\n', '\t    return true;\n', '\t}\n', '\tfunction ()public payable {\n', '\t    _tokenPurchase( msg.value);\n', '\t}\n', '\tfunction _tokenPurchase( uint256 _value) internal {\n', '\t    require(_value >= 0.1 ether);\n', '\t    address wallet = walletArr[walletIdx];\n', '\t    walletIdx = (walletIdx+1) % walletArr.length;\n', '\t    wallet.transfer(msg.value);\n', '\t    emit FundTransfer(wallet, msg.value);\n', '\t}\n', '\tfunction supply()  internal constant  returns (uint256) {\n', '\t    return balanceOf[owner];\n', '\t}\n', '\tfunction allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '\t    return allowed[_owner][_spender];\n', '\t}\n', '\tfunction approve(address _spender, uint256 _value)public returns (bool) {\n', '\t    allowed[msg.sender][_spender] = _value;\n', '\t    emit Approval(msg.sender, _spender, _value);\n', '\t    return true;\n', '\t}\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n', '\t    require(_value > 0);\n', '\t    require (allowed[_from][msg.sender] >= _value);\n', '\t    require(_to != 0x0);\n', '\t    require(balanceOf[_from] >= _value);\n', '\t    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\t    balanceOf[_from] = balanceOf[_from].sub(_value);\n', '\t    balanceOf[_to] = balanceOf[_to].add(_value);\n', '\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t    emit Transfer(_from, _to, _value);\n', '\t    return true;\n', '\t  }\n', '}']
