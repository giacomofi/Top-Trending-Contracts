['pragma solidity ^0.4.24;\n', '\n', '/*\n', 'https://donutchain.io/\n', '\n', '  WARNING\n', '\n', '  All users are forbidden to interact with this contract \n', '  if this contract is inconflict with userâ€™s local regulations and laws.  \n', '\n', '  DonutChain - is a game designed to explore human behavior \n', '  via  token redistribution through open source smart contract code and pre-defined rules.\n', '  \n', '  This system is for internal use only \n', '  and all could be lost  by sending anything to this contract address.\n', '  \n', '  No one can change anything once the contract has been deployed.\n', '*/\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '  \n', '  mapping (address => uint256) private balances_;\n', '\n', '  mapping (address => mapping (address => uint256)) private allowed_;\n', '\n', '  uint256 private totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances_[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    external\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed_[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) external returns (bool) {\n', '    require(_value <= balances_[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances_[msg.sender] = balances_[msg.sender].sub(_value);\n', '    balances_[_to] = balances_[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) external returns (bool) {\n', '    allowed_[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    external\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances_[_from]);\n', '    require(_value <= allowed_[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances_[_from] = balances_[_from].sub(_value);\n', '    balances_[_to] = balances_[_to].add(_value);\n', '    allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    external\n', '    returns (bool)\n', '  {\n', '    allowed_[msg.sender][_spender] = (\n', '      allowed_[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    external\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed_[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed_[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed_[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param _account The account that will receive the created tokens.\n', '   * @param _amount The amount that will be created.\n', '   */\n', '  function _mint(address _account, uint256 _amount) internal {\n', '    require(_account != 0);\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances_[_account] = balances_[_account].add(_amount);\n', '    emit Transfer(address(0), _account, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param _account The account whose tokens will be burnt.\n', '   * @param _amount The amount that will be burnt.\n', '   */\n', '  function _burn(address _account, uint256 _amount) internal {\n', '    require(_account != 0);\n', '    require(_amount <= balances_[_account]);\n', '\n', '    totalSupply_ = totalSupply_.sub(_amount);\n', '    balances_[_account] = balances_[_account].sub(_amount);\n', '    emit Transfer(_account, address(0), _amount);\n', '  }\n', '\n', '}\n', '\n', 'contract DonutChain is ERC20 {\n', '    \n', '  event TokensBurned(address indexed burner, uint256 value);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  uint8  public constant decimals = 0;\n', '  string public constant name = "donutchain.io token #1";\n', '  string public constant symbol = "DNT1";\n', '  bool public flag = true;\n', '  uint256 public endBlock;\n', '  uint256 public mainGift;\n', '  uint256 public amount = 0.001 ether;\n', '  uint256 public increment = 0.000001 ether;\n', '  address public donee;\n', '\n', '  constructor() public {\n', '    endBlock = block.number + 24 * 60 * 4;\n', '  }\n', '  function() external payable {\n', '    require(flag);\n', '    flag = false;\n', '    if (endBlock > block.number) {\n', '      require(msg.value >= amount);\n', '      uint256 tokenAmount =  msg.value / amount;\n', '      uint256 change = msg.value - tokenAmount * amount;\n', '        if (change > 0 )\n', '          msg.sender.transfer(change);\n', '        if (msg.data.length == 20) {\n', '          address refAddress = bToAddress(bytes(msg.data));\n', '          refAddress.transfer(msg.value / 10); // 10%\n', '        } \n', '          mainGift += msg.value / 5; // 20%\n', '          donee = msg.sender;\n', '          endBlock = block.number + 24 * 60 * 4; // ~24h\n', '          amount += increment * tokenAmount;\n', '          _mint(msg.sender, tokenAmount);\n', '          emit Mint(msg.sender, tokenAmount);\n', '          flag = true;\n', '        } else {\n', '          msg.sender.transfer(msg.value);\n', '          emit MintFinished();\n', '          selfdestruct(donee);\n', '        }\n', '  }\n', '  /**  \n', '   * @dev Function to check the amount of ether per a token.\n', '   * @return A uint256 specifying the amount of ether per a token available for gift.\n', '   */\n', '\n', '  function etherPerToken() public view returns (uint256) {\n', '    uint256 sideETH = address(this).balance - mainGift;\n', '    if (totalSupply() == 0)\n', '        return 0;\n', '    return sideETH / totalSupply();\n', '  }\n', '\n', '  /**  \n', '   * @dev Function to calculate size of a gift for token owner.\n', '   * @param _who address The address of a token owner.\n', '   * @return A uint256 specifying the amount of gift in ether.\n', '   */\n', '  function giftAmount(address _who) external view returns (uint256) {\n', '    return etherPerToken() * balanceOf(_who);\n', '  }\n', '  \n', '  /**\n', '  * @dev Transfer gift from contract to tokens owner.\n', '  * @param _amount The amount of gift.\n', '  */\n', '  function transferGift(uint256 _amount) external {\n', '    require(balanceOf(msg.sender) >= _amount);\n', '    uint256 ept = etherPerToken();\n', '    _burn(msg.sender, _amount);\n', '    emit TokensBurned(msg.sender, _amount);\n', '    msg.sender.transfer(_amount * ept);\n', '  }\n', '\n', '  function bToAddress(\n', '    bytes _bytesData\n', '  )\n', '    internal\n', '    pure\n', '    returns(address _refAddress) \n', '  {\n', '    assembly {\n', '      _refAddress := mload(add(_bytesData,0x14))\n', '    }\n', '    return _refAddress;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '}']