['pragma solidity 0.4.20;\n', '/**\n', '* @notice TOKEN CONTRACT\n', '* @dev ERC-20 Token Standard Compliant\n', '* @author Fares A. Akel C. f.antonio.akel@gmail.com\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20TokenInterface\n', ' * @dev Token contract interface for external use\n', ' */\n', 'contract ERC20TokenInterface {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    }\n', '\n', '\n', '/**\n', '* @title ERC20Token\n', '* @notice Token definition contract\n', '*/\n', 'contract ERC20Token is ERC20TokenInterface { //Standard definition of an ERC20Token\n', '    using SafeMath for uint256; //SafeMath is used for uint256 operations\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '    uint256 public totalSupply;\n', '    \n', '    /**\n', '    * @notice Get the balance of an _owner address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 bal) {\n', '      return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @notice transfer _value tokens to address _to\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return success with boolean value true if done\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Transfer _value tokens from address _from to address _to using allowance msg.sender allowance on _from\n', '    * @param _from The address where tokens comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return success with boolean value true if done\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Assign allowance _value to _spender address to use the msg.sender balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    * @return success with boolean value true\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    * @return remaining with the allowance value\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', '* @title Asset\n', '* @notice Token creation.\n', '* @dev ERC20 Token\n', '*/\n', 'contract Asset is ERC20Token {\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', "    string public version = '1';\n", '    \n', '    /**\n', '    * @notice token constructor.\n', '    */\n', '    function Asset() public {\n', '\n', "        name = 'Big Balls Token';\n", '        decimals = 18;\n', "        symbol = 'BBT';\n", '        totalSupply = 150000000 * 10 ** uint256(decimals); //Tokens initial supply;\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(0, this, totalSupply);\n', '        Transfer(this, msg.sender, balances[msg.sender]);\n', '        \n', '    }\n', '    \n', '    /**\n', '    * @notice this contract will revert on direct non-function calls\n', '    * @dev Function to handle callback calls\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '}']