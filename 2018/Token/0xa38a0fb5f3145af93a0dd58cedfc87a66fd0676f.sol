['pragma solidity 0.4.24;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/GolixToken.sol\n', '\n', '/**\n', ' * @title Golix Token contract - ERC20 compatible token contract.\n', ' * @author Gustavo Guimaraes - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f79082848396819890829e9a9685969284b7909a969e9bd994989a">[email&#160;protected]</a>>\n', ' */\n', 'contract GolixToken is PausableToken, MintableToken {\n', '    string public constant name = "Golix Token";\n', '    string public constant symbol = "GLX";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '     * @dev Allow for staking of GLX tokens\n', '     * function is called only from owner which is the GLX token distribution contract\n', '     * is only triggered for a period of time and only if there are still tokens from crowdsale\n', '     * @param staker Address of token holder\n', '     * @param glxStakingContract Address where staking tokens goes to\n', '     */\n', '    function stakeGLX(address staker, address glxStakingContract) public onlyOwner {\n', '        uint256 stakerGLXBalance = balanceOf(staker);\n', '        balances[staker] = 0;\n', '        balances[glxStakingContract] = balances[glxStakingContract].add(stakerGLXBalance);\n', '        emit Transfer(staker, glxStakingContract, stakerGLXBalance);\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/VestTokenAllocation.sol\n', '\n', '/**\n', ' * @title VestTokenAllocation contract\n', ' * @author Gustavo Guimaraes - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ec8b999f988d9a838b9985818d9e8d899fac8b818d8580c28f8381">[email&#160;protected]</a>>\n', ' */\n', 'contract VestTokenAllocation is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20;\n', '\n', '    uint256 public cliff;\n', '    uint256 public start;\n', '    uint256 public duration;\n', '    uint256 public allocatedTokens;\n', '    uint256 public canSelfDestruct;\n', '\n', '    mapping (address => uint256) public totalTokensLocked;\n', '    mapping (address => uint256) public releasedTokens;\n', '\n', '    ERC20 public golix;\n', '    address public tokenDistribution;\n', '\n', '    event Released(address beneficiary, uint256 amount);\n', '\n', '    /**\n', '     * @dev creates the locking contract with vesting mechanism\n', '     * as well as ability to set tokens for addresses and time contract can self-destruct\n', '     * @param _token GolixToken address\n', '     * @param _tokenDistribution GolixTokenDistribution contract address\n', '     * @param _start timestamp representing the beginning of the token vesting process\n', '     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest. ie 1 year in secs\n', '     * @param _duration time in seconds of the period in which the tokens completely vest. ie 4 years in secs\n', '     * @param _canSelfDestruct timestamp of when contract is able to selfdestruct\n', '     */\n', '    function VestTokenAllocation\n', '        (\n', '            ERC20 _token,\n', '            address _tokenDistribution,\n', '            uint256 _start,\n', '            uint256 _cliff,\n', '            uint256 _duration,\n', '            uint256 _canSelfDestruct\n', '        )\n', '        public\n', '    {\n', '        require(_token != address(0) && _cliff != 0);\n', '        require(_cliff <= _duration);\n', '        require(_start > now);\n', '        require(_canSelfDestruct > _duration.add(_start));\n', '\n', '        duration = _duration;\n', '        cliff = _start.add(_cliff);\n', '        start = _start;\n', '\n', '        golix = ERC20(_token);\n', '        tokenDistribution = _tokenDistribution;\n', '        canSelfDestruct = _canSelfDestruct;\n', '    }\n', '\n', '    modifier onlyOwnerOrTokenDistributionContract() {\n', '        require(msg.sender == address(owner) || msg.sender == address(tokenDistribution));\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Adds vested token allocation\n', '     * @param beneficiary Ethereum address of a person\n', '     * @param allocationValue Number of tokens allocated to person\n', '     */\n', '    function addVestTokenAllocation(address beneficiary, uint256 allocationValue)\n', '        external\n', '        onlyOwnerOrTokenDistributionContract\n', '    {\n', '        require(totalTokensLocked[beneficiary] == 0 && beneficiary != address(0)); // can only add once.\n', '\n', '        allocatedTokens = allocatedTokens.add(allocationValue);\n', '        require(allocatedTokens <= golix.balanceOf(this));\n', '\n', '        totalTokensLocked[beneficiary] = allocationValue;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers vested tokens to beneficiary.\n', '     */\n', '    function release() public {\n', '        uint256 unreleased = releasableAmount();\n', '\n', '        require(unreleased > 0);\n', '\n', '        releasedTokens[msg.sender] = releasedTokens[msg.sender].add(unreleased);\n', '\n', '        golix.safeTransfer(msg.sender, unreleased);\n', '\n', '        emit Released(msg.sender, unreleased);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '     */\n', '    function releasableAmount() public view returns (uint256) {\n', '        return vestedAmount().sub(releasedTokens[msg.sender]);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     */\n', '    function vestedAmount() public view returns (uint256) {\n', '        uint256 totalBalance = totalTokensLocked[msg.sender];\n', '\n', '        if (now < cliff) {\n', '            return 0;\n', '        } else if (now >= start.add(duration)) {\n', '            return totalBalance;\n', '        } else {\n', '            return totalBalance.mul(now.sub(start)).div(duration);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allow for selfdestruct possibility and sending funds to owner\n', '     */\n', '    function kill() public onlyOwner {\n', '        require(now >= canSelfDestruct);\n', '        uint256 balance = golix.balanceOf(this);\n', '\n', '        if (balance > 0) {\n', '            golix.transfer(msg.sender, balance);\n', '        }\n', '\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: contracts/GolixTokenDistribution.sol\n', '\n', '/**\n', ' * @title Golix token distribution contract - crowdsale contract for the Golix tokens.\n', ' * @author Gustavo Guimaraes - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9cfbe9efe8fdeaf3fbe9f5f1fdeefdf9efdcfbf1fdf5f0b2fff3f1">[email&#160;protected]</a>>\n', ' */\n', 'contract GolixTokenDistribution is FinalizableCrowdsale {\n', '    uint256 constant public TOTAL_TOKENS_SUPPLY = 1274240097e18; // 1,274,240,097 tokens\n', '    // =~ 10% for Marketing, investment fund, partners\n', '    uint256 constant public MARKETING_SHARE = 127424009e18;\n', '    // =~ 15% for issued to investors, shareholders\n', '    uint256 constant public SHAREHOLDERS_SHARE = 191136015e18;\n', '    // =~ 25% for founding team, future employees\n', '    uint256 constant public FOUNDERS_SHARE = 318560024e18;\n', '    uint256 constant public TOTAL_TOKENS_FOR_CROWDSALE = 637120049e18; // =~ 50 % of total token supply\n', '\n', '    VestTokenAllocation public teamVestTokenAllocation;\n', '    VestTokenAllocation public contributorsVestTokenAllocation;\n', '    address public marketingWallet;\n', '    address public shareHoldersWallet;\n', '\n', '    bool public canFinalizeEarly;\n', '    bool public isStakingPeriod;\n', '\n', '    mapping (address => uint256) public icoContributions;\n', '\n', '    event MintedTokensFor(address indexed investor, uint256 tokensPurchased);\n', '    event GLXStaked(address indexed staker, uint256 amount);\n', '\n', '    /**\n', '     * @dev Contract constructor function\n', '     * @param _startTime The timestamp of the beginning of the crowdsale\n', '     * @param _endTime Timestamp when the crowdsale will finish\n', '     * @param _rate The token rate per ETH\n', '     * @param _wallet Multisig wallet that will hold the crowdsale funds.\n', '     * @param _marketingWallet address that will hold tokens for marketing campaign.\n', '     * @param _shareHoldersWallet address that will distribute shareholders tokens.\n', '     */\n', '    function GolixTokenDistribution\n', '        (\n', '            uint256 _startTime,\n', '            uint256 _endTime,\n', '            uint256 _rate,\n', '            address _wallet,\n', '            address _marketingWallet,\n', '            address _shareHoldersWallet\n', '        )\n', '        public\n', '        FinalizableCrowdsale()\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    {\n', '        require(_marketingWallet != address(0) && _shareHoldersWallet != address(0));\n', '        require(\n', '            MARKETING_SHARE + SHAREHOLDERS_SHARE + FOUNDERS_SHARE + TOTAL_TOKENS_FOR_CROWDSALE\n', '            == TOTAL_TOKENS_SUPPLY\n', '        );\n', '\n', '        marketingWallet = _marketingWallet;\n', '        shareHoldersWallet = _shareHoldersWallet;\n', '\n', '        GolixToken(token).pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Mint tokens for crowdsale participants\n', '     * @param investorsAddress List of Purchasers addresses\n', '     * @param amountOfTokens List of token amounts for investor\n', '     */\n', '    function mintTokensForCrowdsaleParticipants(address[] investorsAddress, uint256[] amountOfTokens)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(investorsAddress.length == amountOfTokens.length);\n', '\n', '        for (uint256 i = 0; i < investorsAddress.length; i++) {\n', '            require(token.totalSupply().add(amountOfTokens[i]) <= TOTAL_TOKENS_FOR_CROWDSALE);\n', '\n', '            token.mint(investorsAddress[i], amountOfTokens[i]);\n', '            icoContributions[investorsAddress[i]] = icoContributions[investorsAddress[i]].add(amountOfTokens[i]);\n', '\n', '            emit MintedTokensFor(investorsAddress[i], amountOfTokens[i]);\n', '        }\n', '    }\n', '    \n', '    // override buytokens so all minting comes from Golix\n', '    function buyTokens(address beneficiary) public payable {\n', '        revert();\n', '    }\n', '    \n', '    /**\n', '     * @dev Set addresses which should receive the vested team tokens share on finalization\n', '     * @param _teamVestTokenAllocation address of team and advisor allocation contract\n', '     * @param _contributorsVestTokenAllocation address of ico contributors\n', '     * who for glx staking event in case there is still left over tokens from crowdsale\n', '     */\n', '    function setVestTokenAllocationAddresses\n', '        (\n', '            address _teamVestTokenAllocation,\n', '            address _contributorsVestTokenAllocation\n', '        )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_teamVestTokenAllocation != address(0) && _contributorsVestTokenAllocation != address(0));\n', '\n', '        teamVestTokenAllocation = VestTokenAllocation(_teamVestTokenAllocation);\n', '        contributorsVestTokenAllocation = VestTokenAllocation(_contributorsVestTokenAllocation);\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        if (canFinalizeEarly) {\n', '            return true;\n', '        }\n', '\n', '        return super.hasEnded();\n', '    }\n', '\n', '    /**\n', '     * @dev Allow for staking of GLX tokens from crowdsale participants\n', '     * only works if tokens from token distribution are not sold out.\n', '     * investors must have GLX tokens in the same amount as it purchased during crowdsale\n', '     */\n', '    function stakeGLXForContributors() public {\n', '        uint256 senderGlxBalance = token.balanceOf(msg.sender);\n', '        require(senderGlxBalance == icoContributions[msg.sender] && isStakingPeriod);\n', '\n', '        GolixToken(token).stakeGLX(msg.sender, contributorsVestTokenAllocation);\n', '        contributorsVestTokenAllocation.addVestTokenAllocation(msg.sender, senderGlxBalance);\n', '        emit GLXStaked(msg.sender, senderGlxBalance);\n', '    }\n', '\n', '    /**\n', '    * @dev enables early finalization of crowdsale\n', '    */\n', '    function prepareForEarlyFinalization() public onlyOwner {\n', '        canFinalizeEarly = true;\n', '    }\n', '\n', '    /**\n', '    * @dev disables staking period\n', '    */\n', '    function disableStakingPeriod() public onlyOwner {\n', '        isStakingPeriod = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates Golix token contract. This is called on the constructor function of the Crowdsale contract\n', '     */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new GolixToken();\n', '    }\n', '\n', '    /**\n', '     * @dev finalizes crowdsale\n', '     */\n', '    function finalization() internal {\n', '        // This must have been set manually prior to finalize() call.\n', '        require(teamVestTokenAllocation != address(0) && contributorsVestTokenAllocation != address(0));\n', '\n', '        if (TOTAL_TOKENS_FOR_CROWDSALE > token.totalSupply()) {\n', '            uint256 remainingTokens = TOTAL_TOKENS_FOR_CROWDSALE.sub(token.totalSupply());\n', '            token.mint(contributorsVestTokenAllocation, remainingTokens);\n', '            isStakingPeriod = true;\n', '        }\n', '\n', '        // final minting\n', '        token.mint(marketingWallet, MARKETING_SHARE);\n', '        token.mint(shareHoldersWallet, SHAREHOLDERS_SHARE);\n', '        token.mint(teamVestTokenAllocation, FOUNDERS_SHARE);\n', '\n', '        token.finishMinting();\n', '        GolixToken(token).unpause();\n', '        super.finalization();\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/GolixToken.sol\n', '\n', '/**\n', ' * @title Golix Token contract - ERC20 compatible token contract.\n', ' * @author Gustavo Guimaraes - <gustavoguimaraes@gmail.com>\n', ' */\n', 'contract GolixToken is PausableToken, MintableToken {\n', '    string public constant name = "Golix Token";\n', '    string public constant symbol = "GLX";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '     * @dev Allow for staking of GLX tokens\n', '     * function is called only from owner which is the GLX token distribution contract\n', '     * is only triggered for a period of time and only if there are still tokens from crowdsale\n', '     * @param staker Address of token holder\n', '     * @param glxStakingContract Address where staking tokens goes to\n', '     */\n', '    function stakeGLX(address staker, address glxStakingContract) public onlyOwner {\n', '        uint256 stakerGLXBalance = balanceOf(staker);\n', '        balances[staker] = 0;\n', '        balances[glxStakingContract] = balances[glxStakingContract].add(stakerGLXBalance);\n', '        emit Transfer(staker, glxStakingContract, stakerGLXBalance);\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/VestTokenAllocation.sol\n', '\n', '/**\n', ' * @title VestTokenAllocation contract\n', ' * @author Gustavo Guimaraes - <gustavoguimaraes@gmail.com>\n', ' */\n', 'contract VestTokenAllocation is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20;\n', '\n', '    uint256 public cliff;\n', '    uint256 public start;\n', '    uint256 public duration;\n', '    uint256 public allocatedTokens;\n', '    uint256 public canSelfDestruct;\n', '\n', '    mapping (address => uint256) public totalTokensLocked;\n', '    mapping (address => uint256) public releasedTokens;\n', '\n', '    ERC20 public golix;\n', '    address public tokenDistribution;\n', '\n', '    event Released(address beneficiary, uint256 amount);\n', '\n', '    /**\n', '     * @dev creates the locking contract with vesting mechanism\n', '     * as well as ability to set tokens for addresses and time contract can self-destruct\n', '     * @param _token GolixToken address\n', '     * @param _tokenDistribution GolixTokenDistribution contract address\n', '     * @param _start timestamp representing the beginning of the token vesting process\n', '     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest. ie 1 year in secs\n', '     * @param _duration time in seconds of the period in which the tokens completely vest. ie 4 years in secs\n', '     * @param _canSelfDestruct timestamp of when contract is able to selfdestruct\n', '     */\n', '    function VestTokenAllocation\n', '        (\n', '            ERC20 _token,\n', '            address _tokenDistribution,\n', '            uint256 _start,\n', '            uint256 _cliff,\n', '            uint256 _duration,\n', '            uint256 _canSelfDestruct\n', '        )\n', '        public\n', '    {\n', '        require(_token != address(0) && _cliff != 0);\n', '        require(_cliff <= _duration);\n', '        require(_start > now);\n', '        require(_canSelfDestruct > _duration.add(_start));\n', '\n', '        duration = _duration;\n', '        cliff = _start.add(_cliff);\n', '        start = _start;\n', '\n', '        golix = ERC20(_token);\n', '        tokenDistribution = _tokenDistribution;\n', '        canSelfDestruct = _canSelfDestruct;\n', '    }\n', '\n', '    modifier onlyOwnerOrTokenDistributionContract() {\n', '        require(msg.sender == address(owner) || msg.sender == address(tokenDistribution));\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Adds vested token allocation\n', '     * @param beneficiary Ethereum address of a person\n', '     * @param allocationValue Number of tokens allocated to person\n', '     */\n', '    function addVestTokenAllocation(address beneficiary, uint256 allocationValue)\n', '        external\n', '        onlyOwnerOrTokenDistributionContract\n', '    {\n', '        require(totalTokensLocked[beneficiary] == 0 && beneficiary != address(0)); // can only add once.\n', '\n', '        allocatedTokens = allocatedTokens.add(allocationValue);\n', '        require(allocatedTokens <= golix.balanceOf(this));\n', '\n', '        totalTokensLocked[beneficiary] = allocationValue;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers vested tokens to beneficiary.\n', '     */\n', '    function release() public {\n', '        uint256 unreleased = releasableAmount();\n', '\n', '        require(unreleased > 0);\n', '\n', '        releasedTokens[msg.sender] = releasedTokens[msg.sender].add(unreleased);\n', '\n', '        golix.safeTransfer(msg.sender, unreleased);\n', '\n', '        emit Released(msg.sender, unreleased);\n', '    }\n', '\n', '    /**\n', "     * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '     */\n', '    function releasableAmount() public view returns (uint256) {\n', '        return vestedAmount().sub(releasedTokens[msg.sender]);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     */\n', '    function vestedAmount() public view returns (uint256) {\n', '        uint256 totalBalance = totalTokensLocked[msg.sender];\n', '\n', '        if (now < cliff) {\n', '            return 0;\n', '        } else if (now >= start.add(duration)) {\n', '            return totalBalance;\n', '        } else {\n', '            return totalBalance.mul(now.sub(start)).div(duration);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allow for selfdestruct possibility and sending funds to owner\n', '     */\n', '    function kill() public onlyOwner {\n', '        require(now >= canSelfDestruct);\n', '        uint256 balance = golix.balanceOf(this);\n', '\n', '        if (balance > 0) {\n', '            golix.transfer(msg.sender, balance);\n', '        }\n', '\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: contracts/GolixTokenDistribution.sol\n', '\n', '/**\n', ' * @title Golix token distribution contract - crowdsale contract for the Golix tokens.\n', ' * @author Gustavo Guimaraes - <gustavoguimaraes@gmail.com>\n', ' */\n', 'contract GolixTokenDistribution is FinalizableCrowdsale {\n', '    uint256 constant public TOTAL_TOKENS_SUPPLY = 1274240097e18; // 1,274,240,097 tokens\n', '    // =~ 10% for Marketing, investment fund, partners\n', '    uint256 constant public MARKETING_SHARE = 127424009e18;\n', '    // =~ 15% for issued to investors, shareholders\n', '    uint256 constant public SHAREHOLDERS_SHARE = 191136015e18;\n', '    // =~ 25% for founding team, future employees\n', '    uint256 constant public FOUNDERS_SHARE = 318560024e18;\n', '    uint256 constant public TOTAL_TOKENS_FOR_CROWDSALE = 637120049e18; // =~ 50 % of total token supply\n', '\n', '    VestTokenAllocation public teamVestTokenAllocation;\n', '    VestTokenAllocation public contributorsVestTokenAllocation;\n', '    address public marketingWallet;\n', '    address public shareHoldersWallet;\n', '\n', '    bool public canFinalizeEarly;\n', '    bool public isStakingPeriod;\n', '\n', '    mapping (address => uint256) public icoContributions;\n', '\n', '    event MintedTokensFor(address indexed investor, uint256 tokensPurchased);\n', '    event GLXStaked(address indexed staker, uint256 amount);\n', '\n', '    /**\n', '     * @dev Contract constructor function\n', '     * @param _startTime The timestamp of the beginning of the crowdsale\n', '     * @param _endTime Timestamp when the crowdsale will finish\n', '     * @param _rate The token rate per ETH\n', '     * @param _wallet Multisig wallet that will hold the crowdsale funds.\n', '     * @param _marketingWallet address that will hold tokens for marketing campaign.\n', '     * @param _shareHoldersWallet address that will distribute shareholders tokens.\n', '     */\n', '    function GolixTokenDistribution\n', '        (\n', '            uint256 _startTime,\n', '            uint256 _endTime,\n', '            uint256 _rate,\n', '            address _wallet,\n', '            address _marketingWallet,\n', '            address _shareHoldersWallet\n', '        )\n', '        public\n', '        FinalizableCrowdsale()\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    {\n', '        require(_marketingWallet != address(0) && _shareHoldersWallet != address(0));\n', '        require(\n', '            MARKETING_SHARE + SHAREHOLDERS_SHARE + FOUNDERS_SHARE + TOTAL_TOKENS_FOR_CROWDSALE\n', '            == TOTAL_TOKENS_SUPPLY\n', '        );\n', '\n', '        marketingWallet = _marketingWallet;\n', '        shareHoldersWallet = _shareHoldersWallet;\n', '\n', '        GolixToken(token).pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Mint tokens for crowdsale participants\n', '     * @param investorsAddress List of Purchasers addresses\n', '     * @param amountOfTokens List of token amounts for investor\n', '     */\n', '    function mintTokensForCrowdsaleParticipants(address[] investorsAddress, uint256[] amountOfTokens)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(investorsAddress.length == amountOfTokens.length);\n', '\n', '        for (uint256 i = 0; i < investorsAddress.length; i++) {\n', '            require(token.totalSupply().add(amountOfTokens[i]) <= TOTAL_TOKENS_FOR_CROWDSALE);\n', '\n', '            token.mint(investorsAddress[i], amountOfTokens[i]);\n', '            icoContributions[investorsAddress[i]] = icoContributions[investorsAddress[i]].add(amountOfTokens[i]);\n', '\n', '            emit MintedTokensFor(investorsAddress[i], amountOfTokens[i]);\n', '        }\n', '    }\n', '    \n', '    // override buytokens so all minting comes from Golix\n', '    function buyTokens(address beneficiary) public payable {\n', '        revert();\n', '    }\n', '    \n', '    /**\n', '     * @dev Set addresses which should receive the vested team tokens share on finalization\n', '     * @param _teamVestTokenAllocation address of team and advisor allocation contract\n', '     * @param _contributorsVestTokenAllocation address of ico contributors\n', '     * who for glx staking event in case there is still left over tokens from crowdsale\n', '     */\n', '    function setVestTokenAllocationAddresses\n', '        (\n', '            address _teamVestTokenAllocation,\n', '            address _contributorsVestTokenAllocation\n', '        )\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(_teamVestTokenAllocation != address(0) && _contributorsVestTokenAllocation != address(0));\n', '\n', '        teamVestTokenAllocation = VestTokenAllocation(_teamVestTokenAllocation);\n', '        contributorsVestTokenAllocation = VestTokenAllocation(_contributorsVestTokenAllocation);\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        if (canFinalizeEarly) {\n', '            return true;\n', '        }\n', '\n', '        return super.hasEnded();\n', '    }\n', '\n', '    /**\n', '     * @dev Allow for staking of GLX tokens from crowdsale participants\n', '     * only works if tokens from token distribution are not sold out.\n', '     * investors must have GLX tokens in the same amount as it purchased during crowdsale\n', '     */\n', '    function stakeGLXForContributors() public {\n', '        uint256 senderGlxBalance = token.balanceOf(msg.sender);\n', '        require(senderGlxBalance == icoContributions[msg.sender] && isStakingPeriod);\n', '\n', '        GolixToken(token).stakeGLX(msg.sender, contributorsVestTokenAllocation);\n', '        contributorsVestTokenAllocation.addVestTokenAllocation(msg.sender, senderGlxBalance);\n', '        emit GLXStaked(msg.sender, senderGlxBalance);\n', '    }\n', '\n', '    /**\n', '    * @dev enables early finalization of crowdsale\n', '    */\n', '    function prepareForEarlyFinalization() public onlyOwner {\n', '        canFinalizeEarly = true;\n', '    }\n', '\n', '    /**\n', '    * @dev disables staking period\n', '    */\n', '    function disableStakingPeriod() public onlyOwner {\n', '        isStakingPeriod = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates Golix token contract. This is called on the constructor function of the Crowdsale contract\n', '     */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new GolixToken();\n', '    }\n', '\n', '    /**\n', '     * @dev finalizes crowdsale\n', '     */\n', '    function finalization() internal {\n', '        // This must have been set manually prior to finalize() call.\n', '        require(teamVestTokenAllocation != address(0) && contributorsVestTokenAllocation != address(0));\n', '\n', '        if (TOTAL_TOKENS_FOR_CROWDSALE > token.totalSupply()) {\n', '            uint256 remainingTokens = TOTAL_TOKENS_FOR_CROWDSALE.sub(token.totalSupply());\n', '            token.mint(contributorsVestTokenAllocation, remainingTokens);\n', '            isStakingPeriod = true;\n', '        }\n', '\n', '        // final minting\n', '        token.mint(marketingWallet, MARKETING_SHARE);\n', '        token.mint(shareHoldersWallet, SHAREHOLDERS_SHARE);\n', '        token.mint(teamVestTokenAllocation, FOUNDERS_SHARE);\n', '\n', '        token.finishMinting();\n', '        GolixToken(token).unpause();\n', '        super.finalization();\n', '    }\n', '}']
