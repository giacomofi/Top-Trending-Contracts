['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title DividendDistributingToken\n', ' * @dev An ERC20-compliant token that distributes any Ether it receives to its token holders proportionate to their share.\n', ' *\n', ' * Implementation exactly based on: https://blog.pennyether.com/posts/realtime-dividend-token.html#the-token\n', ' *\n', ' * The user is responsible for when they transact tokens (transacting before a dividend payout is probably not ideal).\n', ' *\n', ' * `TokenizedProperty` inherits from `this` and is the front-facing contract representing the rights / ownership to a property.\n', ' */\n', 'contract DividendDistributingToken is StandardToken {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public constant POINTS_PER_WEI = uint256(10) ** 32;\n', '\n', '  uint256 public pointsPerToken = 0;\n', '  mapping(address => uint256) public credits;\n', '  mapping(address => uint256) public lastPointsPerToken;\n', '\n', '  event DividendsDeposited(address indexed payer, uint256 amount);\n', '  event DividendsCollected(address indexed collector, uint256 amount);\n', '\n', '  function collectOwedDividends() public {\n', '    creditAccount(msg.sender);\n', '\n', '    uint256 _wei = credits[msg.sender] / POINTS_PER_WEI;\n', '\n', '    credits[msg.sender] = 0;\n', '\n', '    msg.sender.transfer(_wei);\n', '    emit DividendsCollected(msg.sender, _wei);\n', '  }\n', '\n', '  function creditAccount(address _account) internal {\n', '    uint256 amount = balanceOf(_account).mul(pointsPerToken.sub(lastPointsPerToken[_account]));\n', '    credits[_account] = credits[_account].add(amount);\n', '    lastPointsPerToken[_account] = pointsPerToken;\n', '  }\n', '\n', '  function deposit(uint256 _value) internal {\n', '    pointsPerToken = pointsPerToken.add(_value.mul(POINTS_PER_WEI) / totalSupply_);\n', '    emit DividendsDeposited(msg.sender, _value);\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract LandRegistryInterface {\n', '  function getProperty(string _eGrid) public view returns (address property);\n', '}\n', '\n', '\n', 'contract LandRegistryProxyInterface {\n', '  function owner() public view returns (address);\n', '  function landRegistry() public view returns (LandRegistryInterface);\n', '}\n', '\n', '\n', 'contract WhitelistInterface {\n', '  function checkRole(address _operator, string _permission) public view;\n', '}\n', '\n', '\n', 'contract WhitelistProxyInterface {\n', '  function whitelist() public view returns (WhitelistInterface);\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenizedProperty\n', ' * @dev An asset-backed security token (a property as identified by its E-GRID (a UUID) in the (Swiss) land registry).\n', ' *\n', ' * Ownership of `this` must be transferred to `ShareholderDAO` before blockimmo will verify `this` as legitimate in `LandRegistry`.\n', ' * Until verified legitimate, transferring tokens is not possible (locked).\n', ' *\n', ' * Tokens can be freely listed on exchanges (especially decentralized / 0x).\n', ' *\n', ' * `this.owner` can make two suggestions that blockimmo will always (try) to take: `setManagementCompany` and `untokenize`.\n', ' * `this.owner` can also transfer or rescind ownership.\n', ' * See `ShareholderDAO` documentation for more information...\n', ' *\n', ' * Our legal framework requires a `TokenizedProperty` must be possible to `untokenize`.\n', ' * Un-tokenizing is also the first step to upgrading or an outright sale of `this`.\n', ' *\n', ' * For both:\n', ' *   1. `owner` emits an `UntokenizeRequest`\n', ' *   2. blockimmo removes `this` from the `LandRegistry`\n', ' *\n', ' * Upgrading:\n', ' *   3. blockimmo migrates `this` to the new `TokenizedProperty` (ie perfectly preserving `this.balances`)\n', ' *   4. blockimmo attaches `owner` to the property (1)\n', ' *   5. blockimmo adds the property to `LandRegistry`\n', ' *\n', ' * Outright sale:\n', ' *   3. blockimmo deploys a new `TokenizedProperty` and adds it to the `LandRegistry`\n', ' *   4. blockimmo configures and deploys a `TokenSale` for the property with `TokenSale.wallet == address(this)`\n', ' *      (raised Ether distributed to current token holders as a dividend payout)\n', ' *        - if the sale is unsuccessful, the new property is removed from the `LandRegistry`, and `this` is added back\n', ' */\n', 'contract TokenizedProperty is Ownable, DividendDistributingToken {\n', '  address public constant LAND_REGISTRY_PROXY_ADDRESS = 0xe72AD2A335AE18e6C7cdb6dAEB64b0330883CD56;  // 0xec8be1a5630364292e56d01129e8ee8a9578d7d8\n', '  address public constant WHITELIST_PROXY_ADDRESS = 0x7223b032180CDb06Be7a3D634B1E10032111F367;  // 0xc4c7497fbe1a886841a195a5d622cd60053c1376;\n', '\n', '  LandRegistryProxyInterface public registryProxy = LandRegistryProxyInterface(LAND_REGISTRY_PROXY_ADDRESS);\n', '  WhitelistProxyInterface public whitelistProxy = WhitelistProxyInterface(WHITELIST_PROXY_ADDRESS);\n', '\n', '  uint8 public constant decimals = 18;\n', '  uint256 public constant NUM_TOKENS = 1000000;\n', '  string public symbol;\n', '\n', '  string public managementCompany;\n', '  string public name;\n', '\n', '  mapping(address => uint256) public lastTransferBlock;\n', '  mapping(address => uint256) public minTransferAccepted;\n', '\n', '  event MinTransferSet(address indexed account, uint256 minTransfer);\n', '  event ManagementCompanySet(string managementCompany);\n', '  event UntokenizeRequest();\n', '  event Generic(string generic);\n', '\n', '  modifier isValid() {\n', '    LandRegistryInterface registry = LandRegistryInterface(registryProxy.landRegistry());\n', '    require(registry.getProperty(name) == address(this), "invalid TokenizedProperty");\n', '    _;\n', '  }\n', '\n', '  constructor(string _eGrid, string _grundstuckNumber) public {\n', '    require(bytes(_eGrid).length > 0, "eGrid must be non-empty string");\n', '    require(bytes(_grundstuckNumber).length > 0, "grundstuck must be non-empty string");\n', '    name = _eGrid;\n', '    symbol = _grundstuckNumber;\n', '\n', '    totalSupply_ = NUM_TOKENS * (uint256(10) ** decimals);\n', '    balances[msg.sender] = totalSupply_;\n', '    emit Transfer(address(0), msg.sender, totalSupply_);\n', '  }\n', '\n', '  function () public payable {  // dividends\n', '    uint256 value = msg.value;\n', '    require(value > 0, "must send wei in fallback");\n', '\n', '    address blockimmo = registryProxy.owner();\n', '    if (blockimmo != address(0)) {  // 1% blockimmo fee\n', '      uint256 fee = value / 100;\n', '      blockimmo.transfer(fee);\n', '      value = value.sub(fee);\n', '    }\n', '\n', '    deposit(value);\n', '  }\n', '\n', '  function setManagementCompany(string _managementCompany) public onlyOwner isValid {\n', '    managementCompany = _managementCompany;\n', '    emit ManagementCompanySet(managementCompany);\n', '  }\n', '\n', '  function untokenize() public onlyOwner isValid {\n', '    emit UntokenizeRequest();\n', '  }\n', '\n', '  function emitGenericProposal(string _generic) public onlyOwner isValid {\n', '    emit Generic(_generic);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public isValid returns (bool) {\n', '    require(_value >= minTransferAccepted[_to], "tokens transferred less than _to\'s minimum accepted transfer");\n', '    transferBookKeeping(msg.sender, _to);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public isValid returns (bool) {\n', '    require(_value >= minTransferAccepted[_to], "tokens transferred less than _to\'s minimum accepted transfer");\n', '    transferBookKeeping(_from, _to);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function setMinTransfer(uint256 _amount) public {\n', '    minTransferAccepted[msg.sender] = _amount;\n', '    emit MinTransferSet(msg.sender, _amount);\n', '  }\n', '\n', '  function transferBookKeeping(address _from, address _to) internal {\n', '    whitelistProxy.whitelist().checkRole(_to, "authorized");\n', '\n', '    creditAccount(_from);  // required for dividends...\n', '    creditAccount(_to);\n', '\n', '    lastTransferBlock[_from] = block.number;  //required for voting\n', '    lastTransferBlock[_to] = block.number;\n', '  }\n', '}']