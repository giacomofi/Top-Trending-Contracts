['pragma solidity ^0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// @Project YouRyuCoin (YRC)\n', '// @Creator RyuChain\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// @Name SafeMath\n', '// @Desc Math operations with safety checks that throw on error\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name YouRyuCoinBase\n', '// @Desc ERC20-based token\n', '// ----------------------------------------------------------------------------\n', 'contract YouRyuCoinBase is ERC20Interface {\n', '    using SafeMath for uint;\n', '\n', '    uint                                                _totalSupply;\n', '    mapping(address => uint256)                         _balances;\n', '    mapping(address => mapping(address => uint256))     _allowed;\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return _balances[tokenOwner];\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return _allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require( _balances[msg.sender] >= tokens);\n', '\n', '        _balances[msg.sender] = _balances[msg.sender].sub(tokens);\n', '        _balances[to] = _balances[to].add(tokens);\n', '\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        _allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(tokens <= _balances[from]);\n', '        require(tokens <= _allowed[from][msg.sender]);\n', '        \n', '        _balances[from] = _balances[from].sub(tokens);\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokens);\n', '        _balances[to] = _balances[to].add(tokens);\n', '\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name YouRyuCoin (YRC)\n', '// @Desc Cutie Ryu\n', '// ----------------------------------------------------------------------------\n', 'contract YouRyuCoin is YouRyuCoinBase {\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '\n', '    // Admin Ryu Address\n', '    address public owner;\n', '\n', '    modifier isOwner {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    event EventBurnCoin(address a_burnAddress, uint a_amount);\n', '    event EventAddCoin(uint a_amount, uint a_totalSupply);\n', '\n', '     function YouRyuCoin(uint a_totalSupply, string a_tokenName, string a_tokenSymbol, uint8 a_decimals) public {\n', '        owner = msg.sender;\n', '        \n', '        _totalSupply = a_totalSupply;\n', '        _balances[msg.sender] = a_totalSupply;\n', '\n', '        name = a_tokenName;\n', '        symbol = a_tokenSymbol;\n', '        decimals = a_decimals;\n', '    }\n', '\n', '    function burnCoin(uint a_coinAmount) external isOwner\n', '    {\n', '        require(_balances[msg.sender] >= a_coinAmount);\n', '\n', '        _balances[msg.sender] = _balances[msg.sender].sub(a_coinAmount);\n', '        _totalSupply = _totalSupply.sub(a_coinAmount);\n', '\n', '        emit EventBurnCoin(msg.sender, a_coinAmount);\n', '    }\n', '\n', '    function addCoin(uint a_coinAmount) external isOwner\n', '    {\n', '        _balances[msg.sender] = _balances[msg.sender].add(a_coinAmount);\n', '        _totalSupply = _totalSupply.add(a_coinAmount);\n', '\n', '        emit EventAddCoin(a_coinAmount, _totalSupply);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// @Project YouRyuCoin (YRC)\n', '// @Creator RyuChain\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// @Name SafeMath\n', '// @Desc Math operations with safety checks that throw on error\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '// ----------------------------------------------------------------------------\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name YouRyuCoinBase\n', '// @Desc ERC20-based token\n', '// ----------------------------------------------------------------------------\n', 'contract YouRyuCoinBase is ERC20Interface {\n', '    using SafeMath for uint;\n', '\n', '    uint                                                _totalSupply;\n', '    mapping(address => uint256)                         _balances;\n', '    mapping(address => mapping(address => uint256))     _allowed;\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return _balances[tokenOwner];\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return _allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require( _balances[msg.sender] >= tokens);\n', '\n', '        _balances[msg.sender] = _balances[msg.sender].sub(tokens);\n', '        _balances[to] = _balances[to].add(tokens);\n', '\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        _allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(tokens <= _balances[from]);\n', '        require(tokens <= _allowed[from][msg.sender]);\n', '        \n', '        _balances[from] = _balances[from].sub(tokens);\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(tokens);\n', '        _balances[to] = _balances[to].add(tokens);\n', '\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Name YouRyuCoin (YRC)\n', '// @Desc Cutie Ryu\n', '// ----------------------------------------------------------------------------\n', 'contract YouRyuCoin is YouRyuCoinBase {\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '\n', '    // Admin Ryu Address\n', '    address public owner;\n', '\n', '    modifier isOwner {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    event EventBurnCoin(address a_burnAddress, uint a_amount);\n', '    event EventAddCoin(uint a_amount, uint a_totalSupply);\n', '\n', '     function YouRyuCoin(uint a_totalSupply, string a_tokenName, string a_tokenSymbol, uint8 a_decimals) public {\n', '        owner = msg.sender;\n', '        \n', '        _totalSupply = a_totalSupply;\n', '        _balances[msg.sender] = a_totalSupply;\n', '\n', '        name = a_tokenName;\n', '        symbol = a_tokenSymbol;\n', '        decimals = a_decimals;\n', '    }\n', '\n', '    function burnCoin(uint a_coinAmount) external isOwner\n', '    {\n', '        require(_balances[msg.sender] >= a_coinAmount);\n', '\n', '        _balances[msg.sender] = _balances[msg.sender].sub(a_coinAmount);\n', '        _totalSupply = _totalSupply.sub(a_coinAmount);\n', '\n', '        emit EventBurnCoin(msg.sender, a_coinAmount);\n', '    }\n', '\n', '    function addCoin(uint a_coinAmount) external isOwner\n', '    {\n', '        _balances[msg.sender] = _balances[msg.sender].add(a_coinAmount);\n', '        _totalSupply = _totalSupply.add(a_coinAmount);\n', '\n', '        emit EventAddCoin(a_coinAmount, _totalSupply);\n', '    }\n', '}']
