['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/BuildersCoin.sol\n', '\n', 'contract BuildersCoin is MintableToken {\n', '\n', "  string public constant name = 'Builders Coin';\n", "  string public constant symbol = 'BLD';\n", '  uint32 public constant decimals = 18;\n', '  address public saleAgent;\n', '  bool public transferLocked = true;\n', '\n', '  modifier notLocked() {\n', '    require(msg.sender == owner || msg.sender == saleAgent || !transferLocked);\n', '    _;\n', '  }\n', '\n', '  modifier onlyOwnerOrSaleAgent() {\n', '    require(msg.sender == owner || msg.sender == saleAgent);\n', '    _;\n', '  }\n', '\n', '  function setSaleAgent(address newSaleAgnet) public {\n', '    require(msg.sender == owner || msg.sender == saleAgent);\n', '    saleAgent = newSaleAgnet;\n', '  }\n', '\n', '  function unlockTransfer() onlyOwnerOrSaleAgent public {\n', '    if (transferLocked) {\n', '      transferLocked = false;\n', '    }\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwnerOrSaleAgent canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() public onlyOwnerOrSaleAgent returns (bool) {\n', '    unlockTransfer();\n', '    return super.finishMinting();\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Presale.sol\n', '\n', 'contract Presale is Ownable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  uint public price;\n', '  uint public start;\n', '  uint public end;\n', '  uint public duration;\n', '  uint public softcap = 157000000000000000000; // 157 ETH\n', '  uint public hardcap;\n', '  uint public minInvestmentLimit;\n', '  uint public investedWei;\n', '  uint public directMintLimit;\n', '  uint public mintedDirectly;\n', '  uint public devLimit = 3500000000000000000; // 3.5 ETH\n', '  bool public softcapReached;\n', '  bool public hardcapReached;\n', '  bool public refundIsAvailable;\n', '  bool public devWithdrawn;\n', '  address public directMintAgent;\n', '  address public wallet;\n', '  address public devWallet = 0xEA15Adb66DC92a4BbCcC8Bf32fd25E2e86a2A770;\n', '  BuildersCoin public token;\n', '  mapping(address => uint) public balances;\n', '\n', '  event SoftcapReached();\n', '  event HardcapReached();\n', '  event RefundIsAvailable();\n', '\n', '  modifier onlyOwnerOrDirectMintAgent() {\n', '    require(msg.sender == owner || msg.sender == directMintAgent);\n', '    _;\n', '  }\n', '\n', '  //---------------------------------------------------------------------------\n', '  // Configuration setters\n', '  //---------------------------------------------------------------------------\n', '\n', '  function setDirectMintAgent(address _directMintAgent) public onlyOwner {\n', '    directMintAgent = _directMintAgent;\n', '  }\n', '\n', '  function setDirectMintLimit(uint _directMintLimit) public onlyOwner {\n', '    directMintLimit = _directMintLimit;\n', '  }\n', '\n', '  function setMinInvestmentLimit(uint _minInvestmentLimit) public onlyOwner {\n', '    minInvestmentLimit = _minInvestmentLimit;\n', '  }\n', '\n', '  function setPrice(uint _price) public onlyOwner {\n', '    price = _price;\n', '  }\n', '\n', '  function setToken(address _token) public onlyOwner {\n', '    token = BuildersCoin(_token);\n', '  }\n', '\n', '  function setWallet(address _wallet) public onlyOwner {\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function setStart(uint _start) public onlyOwner {\n', '    start = _start;\n', '  }\n', '\n', '  function setDuration(uint _duration) public onlyOwner {\n', '    duration = _duration;\n', '    end = start.add(_duration.mul(1 days));\n', '  }\n', '\n', '  function setHardcap(uint _hardcap) public onlyOwner {\n', '    hardcap = _hardcap;\n', '  }\n', '\n', '  //---------------------------------------------------------------------------\n', '  // Mint functions\n', '  //---------------------------------------------------------------------------\n', '\n', '  function mintAndTransfer(address _to, uint _tokens) internal {\n', '    token.mint(this, _tokens);\n', '    token.transfer(_to, _tokens);\n', '  }\n', '\n', '  function mint(address _to, uint _investedWei) internal {\n', '    require(_investedWei >= minInvestmentLimit && !hardcapReached && now >= start && now < end);\n', '    uint tokens = _investedWei.mul(price).div(1 ether);\n', '    mintAndTransfer(_to, tokens);\n', '    balances[_to] = balances[_to].add(_investedWei);\n', '    investedWei = investedWei.add(_investedWei);\n', '    if (investedWei >= softcap && ! softcapReached) {\n', '      SoftcapReached();\n', '      softcapReached = true;\n', '    }\n', '    if (investedWei >= hardcap) {\n', '      HardcapReached();\n', '      hardcapReached = true;\n', '    }\n', '  }\n', '\n', '  function directMint(address _to, uint _tokens) public onlyOwnerOrDirectMintAgent {\n', '    mintedDirectly = mintedDirectly.add(_tokens);\n', '    require(mintedDirectly <= directMintLimit);\n', '    mintAndTransfer(_to, _tokens);\n', '  }\n', '\n', '  //---------------------------------------------------------------------------\n', '  // Withdraw functions\n', '  //---------------------------------------------------------------------------\n', '\n', '  function refund() public {\n', '    require(refundIsAvailable && balances[msg.sender] > 0);\n', '    uint value = balances[msg.sender];\n', '    balances[msg.sender] = 0;\n', '    msg.sender.transfer(value);\n', '  }\n', '\n', '  function withdraw() public onlyOwner {\n', '    require(softcapReached);\n', '    widthrawDev();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function widthrawDev() public {\n', '    require(softcapReached);\n', '    require(msg.sender == devWallet || msg.sender == owner);\n', '    if (!devWithdrawn) {\n', '      devWithdrawn = true;\n', '      devWallet.transfer(devLimit);\n', '    }\n', '  }\n', '\n', '  function retrieveTokens(address _to, address _anotherToken) public onlyOwner {\n', '    ERC20 alienToken = ERC20(_anotherToken);\n', '    alienToken.transfer(_to, alienToken.balanceOf(this));\n', '  }\n', '\n', '  //---------------------------------------------------------------------------\n', '  // Service functions\n', '  //---------------------------------------------------------------------------\n', '\n', '  function finish() public onlyOwner {\n', '    if (investedWei < softcap) {\n', '      RefundIsAvailable();\n', '      refundIsAvailable = true;\n', '    } else {\n', '      withdraw();\n', '    }\n', '  }\n', '\n', '  //---------------------------------------------------------------------------\n', '  // Fallback function\n', '  //---------------------------------------------------------------------------\n', '\n', '  function () external payable {\n', '    mint(msg.sender, msg.value);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Configurator.sol\n', '\n', 'contract Configurator is Ownable {\n', '\n', '  BuildersCoin public token;\n', '  Presale public presale;\n', '\n', '  function deploy() public onlyOwner {\n', '\n', '    token = new BuildersCoin();\n', '    presale = new Presale();\n', '\n', '    presale.setPrice(1400000000000000000000); // 1 ETH = 1400 BLD\n', '    presale.setMinInvestmentLimit(100000000000000000); // 0.1 ETH\n', '    presale.setDirectMintLimit(1000000000000000000000000); // 1 000 000 BLD\n', '    presale.setHardcap(357142857000000000000); // 357.142857 ETH\n', '    presale.setStart(1521543600); // Mar 20 2018 14:00:00 GMT+0300\n', '    presale.setDuration(30); // 30 days\n', '    presale.setWallet(0x8617f1ba539d45dcefbb18c40141e861abf288b7);\n', '    presale.setToken(token);\n', '\n', '    token.setSaleAgent(presale);\n', '\n', '    address manager = 0x9DFF939e27e992Ac8635291263c3aa41654f3228;\n', '\n', '    token.transferOwnership(manager);\n', '    presale.transferOwnership(manager);\n', '  }\n', '\n', '}']