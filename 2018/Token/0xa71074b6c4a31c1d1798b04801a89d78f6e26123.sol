['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue compatible ERC20Basic Token\n', '     *\n', '     * @param _token ERC20Basic The address of the token contract\n', '     */\n', '    function rescueTokens(ERC20Basic _token) external onlyOwner {\n', '        uint256 balance = _token.balanceOf(this);\n', '        assert(_token.transfer(owner, balance));\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw Ether\n', '     */\n', '    function withdrawEther() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token, Lockable\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => uint256) lockedBalanceMap;    // locked balance: address => amount\n', '    mapping(address => uint256) releaseTimeMap;      // release time: address => timestamp\n', '\n', '    event BalanceLocked(address indexed _addr, uint256 _amount);\n', '\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev function to make sure the balance is not locked\n', '     * @param _addr address\n', '     * @param _value uint256\n', '     */\n', '    function checkNotLocked(address _addr, uint256 _value) internal view returns (bool) {\n', '        uint256 balance = balances[_addr].sub(_value);\n', '        if (releaseTimeMap[_addr] > block.timestamp && balance < lockedBalanceMap[_addr]) {\n', '            revert();\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        checkNotLocked(msg.sender, _value);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return Amount.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the locked balance of the specified address.\n', '     * @param _owner The address to query.\n', '     * @return Amount.\n', '     */\n', '    function lockedBalanceOf(address _owner) public view returns (uint256) {\n', '        return lockedBalanceMap[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the release timestamp of the specified address if it has a locked balance.\n', '     * @param _owner The address to query.\n', '     * @return Timestamp.\n', '     */\n', '    function releaseTimeOf(address _owner) public view returns (uint256) {\n', '        return releaseTimeMap[_owner];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        checkNotLocked(_from, _value);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Abstract Standard ERC20 token\n', ' */\n', 'contract AbstractToken is Ownable, StandardToken {\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals;\n', '\n', '    string public value;        // Stable Value\n', '    string public description;  // Description\n', '    string public website;      // Website\n', '    string public email;        // Email\n', '    string public news;         // Latest News\n', '    uint256 public cap;         // Cap Limit\n', '\n', '\n', '    mapping (address => bool) public mintAgents;  // Mint Agents\n', '\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    event MintAgentChanged(address _addr, bool _state);\n', '    event NewsPublished(string _news);\n', '\n', '\n', '    /**\n', '     * @dev Set Info\n', '     * \n', '     * @param _description string\n', '     * @param _website string\n', '     * @param _email string\n', '     */\n', '    function setInfo(string _description, string _website, string _email) external onlyOwner returns (bool) {\n', '        description = _description;\n', '        website = _website;\n', '        email = _email;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Set News\n', '     * \n', '     * @param _news string\n', '     */\n', '    function setNews(string _news) external onlyOwner returns (bool) {\n', '        news = _news;\n', '        emit NewsPublished(_news);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Set a mint agent address\n', '     * \n', '     * @param _addr  address  The address that will receive the minted tokens.\n', '     * @param _state bool     The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function setMintAgent(address _addr, bool _state) onlyOwner public returns (bool) {\n', '        mintAgents[_addr] = _state;\n', '        emit MintAgentChanged(_addr, _state);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor() public {\n', '        setMintAgent(msg.sender, true);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev VNET Token for Vision Network Project\n', ' */\n', 'contract VNETToken is Ownable, AbstractToken {\n', '    event Donate(address indexed _from, uint256 _amount);\n', '\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor() public {\n', '        name = "VNET Token";\n', '        symbol = "VNET";\n', '        decimals = 6;\n', '        value = "1 Token = 100 GByte client newtwork traffic flow";\n', '\n', '        // 35 Billion Total\n', '        cap = 35000000000 * (10 ** decimals);\n', '    }\n', '\n', '    /**\n', '     * @dev Sending eth to this contract will be considered as a donation\n', '     */\n', '    function () public payable {\n', '        emit Donate(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) external returns (bool) {\n', '        require(mintAgents[msg.sender] && totalSupply_.add(_amount) <= cap);\n', '\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens, and lock some of them with a release time\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @param _lockedAmount The amount of tokens to be locked.\n', '     * @param _releaseTime The timestamp about to release, which could be set just once.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintWithLock(address _to, uint256 _amount, uint256 _lockedAmount, uint256 _releaseTime) external returns (bool) {\n', '        require(mintAgents[msg.sender] && totalSupply_.add(_amount) <= cap);\n', '        require(_amount >= _lockedAmount);\n', '\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        lockedBalanceMap[_to] = lockedBalanceMap[_to] > 0 ? lockedBalanceMap[_to].add(_lockedAmount) : _lockedAmount;\n', '        releaseTimeMap[_to] = releaseTimeMap[_to] > 0 ? releaseTimeMap[_to] : _releaseTime;\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        emit BalanceLocked(_to, _lockedAmount);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue compatible ERC20Basic Token\n', '     *\n', '     * @param _token ERC20Basic The address of the token contract\n', '     */\n', '    function rescueTokens(ERC20Basic _token) external onlyOwner {\n', '        uint256 balance = _token.balanceOf(this);\n', '        assert(_token.transfer(owner, balance));\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw Ether\n', '     */\n', '    function withdrawEther() external onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token, Lockable\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => uint256) lockedBalanceMap;    // locked balance: address => amount\n', '    mapping(address => uint256) releaseTimeMap;      // release time: address => timestamp\n', '\n', '    event BalanceLocked(address indexed _addr, uint256 _amount);\n', '\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev function to make sure the balance is not locked\n', '     * @param _addr address\n', '     * @param _value uint256\n', '     */\n', '    function checkNotLocked(address _addr, uint256 _value) internal view returns (bool) {\n', '        uint256 balance = balances[_addr].sub(_value);\n', '        if (releaseTimeMap[_addr] > block.timestamp && balance < lockedBalanceMap[_addr]) {\n', '            revert();\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        checkNotLocked(msg.sender, _value);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return Amount.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the locked balance of the specified address.\n', '     * @param _owner The address to query.\n', '     * @return Amount.\n', '     */\n', '    function lockedBalanceOf(address _owner) public view returns (uint256) {\n', '        return lockedBalanceMap[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the release timestamp of the specified address if it has a locked balance.\n', '     * @param _owner The address to query.\n', '     * @return Timestamp.\n', '     */\n', '    function releaseTimeOf(address _owner) public view returns (uint256) {\n', '        return releaseTimeMap[_owner];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        checkNotLocked(_from, _value);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Abstract Standard ERC20 token\n', ' */\n', 'contract AbstractToken is Ownable, StandardToken {\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals;\n', '\n', '    string public value;        // Stable Value\n', '    string public description;  // Description\n', '    string public website;      // Website\n', '    string public email;        // Email\n', '    string public news;         // Latest News\n', '    uint256 public cap;         // Cap Limit\n', '\n', '\n', '    mapping (address => bool) public mintAgents;  // Mint Agents\n', '\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    event MintAgentChanged(address _addr, bool _state);\n', '    event NewsPublished(string _news);\n', '\n', '\n', '    /**\n', '     * @dev Set Info\n', '     * \n', '     * @param _description string\n', '     * @param _website string\n', '     * @param _email string\n', '     */\n', '    function setInfo(string _description, string _website, string _email) external onlyOwner returns (bool) {\n', '        description = _description;\n', '        website = _website;\n', '        email = _email;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Set News\n', '     * \n', '     * @param _news string\n', '     */\n', '    function setNews(string _news) external onlyOwner returns (bool) {\n', '        news = _news;\n', '        emit NewsPublished(_news);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Set a mint agent address\n', '     * \n', '     * @param _addr  address  The address that will receive the minted tokens.\n', '     * @param _state bool     The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function setMintAgent(address _addr, bool _state) onlyOwner public returns (bool) {\n', '        mintAgents[_addr] = _state;\n', '        emit MintAgentChanged(_addr, _state);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor() public {\n', '        setMintAgent(msg.sender, true);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev VNET Token for Vision Network Project\n', ' */\n', 'contract VNETToken is Ownable, AbstractToken {\n', '    event Donate(address indexed _from, uint256 _amount);\n', '\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor() public {\n', '        name = "VNET Token";\n', '        symbol = "VNET";\n', '        decimals = 6;\n', '        value = "1 Token = 100 GByte client newtwork traffic flow";\n', '\n', '        // 35 Billion Total\n', '        cap = 35000000000 * (10 ** decimals);\n', '    }\n', '\n', '    /**\n', '     * @dev Sending eth to this contract will be considered as a donation\n', '     */\n', '    function () public payable {\n', '        emit Donate(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) external returns (bool) {\n', '        require(mintAgents[msg.sender] && totalSupply_.add(_amount) <= cap);\n', '\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens, and lock some of them with a release time\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @param _lockedAmount The amount of tokens to be locked.\n', '     * @param _releaseTime The timestamp about to release, which could be set just once.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintWithLock(address _to, uint256 _amount, uint256 _lockedAmount, uint256 _releaseTime) external returns (bool) {\n', '        require(mintAgents[msg.sender] && totalSupply_.add(_amount) <= cap);\n', '        require(_amount >= _lockedAmount);\n', '\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        lockedBalanceMap[_to] = lockedBalanceMap[_to] > 0 ? lockedBalanceMap[_to].add(_lockedAmount) : _lockedAmount;\n', '        releaseTimeMap[_to] = releaseTimeMap[_to] > 0 ? releaseTimeMap[_to] : _releaseTime;\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        emit BalanceLocked(_to, _lockedAmount);\n', '        return true;\n', '    }\n', '}']
