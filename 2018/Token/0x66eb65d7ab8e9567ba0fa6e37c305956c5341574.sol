['/* Helex is a Ethereum Token property of Helex Corporation  */\n', '    \n', '    /* Helex will be used as a form of payment for services and goods*/\n', ' \n', '    pragma solidity ^0.4.9;\n', '\n', '\n', '    library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    }\n', '    contract  Helex{\n', '    \n', '\t\n', '\tstring public standard = &#39;Helex 7.0&#39;;\n', '    using SafeMath for uint256;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    mapping(address => uint256) balances;\n', '    uint256 public totalSupply;\n', '    uint256 public decimals;\n', '    address public owner;\n', '    bytes32 public symbol;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed spender, uint256 value);\n', '   \n', '    /* Public variables of the Helex Token. Total Supply 21 million */\n', '   \n', '    function  Helex() \n', '    {\n', '        totalSupply = 2100000000000;\n', '        symbol = &#39;HLX&#39;;\n', '        owner = 0x27d5DacEDc4F1C98B56723174eEab8E4EFc9AbA6;\n', '        balances[owner] = 2100000000000;\n', '        decimals = 5;\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant returns(uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns(bool)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns(bool) \n', '    {\n', '        var _allowance = allowed[_from][msg.sender];\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns(bool) \n', '    {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function() \n', '    {\n', '        revert();\n', '    }\n', '}']
['/* Helex is a Ethereum Token property of Helex Corporation  */\n', '    \n', '    /* Helex will be used as a form of payment for services and goods*/\n', ' \n', '    pragma solidity ^0.4.9;\n', '\n', '\n', '    library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    }\n', '    contract  Helex{\n', '    \n', '\t\n', "\tstring public standard = 'Helex 7.0';\n", '    using SafeMath for uint256;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    mapping(address => uint256) balances;\n', '    uint256 public totalSupply;\n', '    uint256 public decimals;\n', '    address public owner;\n', '    bytes32 public symbol;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed spender, uint256 value);\n', '   \n', '    /* Public variables of the Helex Token. Total Supply 21 million */\n', '   \n', '    function  Helex() \n', '    {\n', '        totalSupply = 2100000000000;\n', "        symbol = 'HLX';\n", '        owner = 0x27d5DacEDc4F1C98B56723174eEab8E4EFc9AbA6;\n', '        balances[owner] = 2100000000000;\n', '        decimals = 5;\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant returns(uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns(bool)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns(bool) \n', '    {\n', '        var _allowance = allowed[_from][msg.sender];\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns(bool) \n', '    {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function() \n', '    {\n', '        revert();\n', '    }\n', '}']
