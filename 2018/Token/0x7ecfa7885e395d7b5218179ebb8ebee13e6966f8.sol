['pragma solidity ^0.4.25;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC827 interface, an extension of ERC20 token standard\n', ' *\n', ' * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool);\n', '\n', '    function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool);\n', '\n', '    function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public payable returns (bool);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' */\n', 'contract ERC20Token is ERC20 {\n', '    using SafeMath for uint256;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC827, an extension of ERC20 token standard\n', ' *\n', ' * @dev Implementation the ERC827, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' *\n', ' * @dev Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, ERC20Token {\n', '    /**\n', '     * @dev Addition to ERC20 token methods. It allows to\n', '     * @dev approve the transfer of value and execute a call with the sent data.\n', '     *\n', '     * @dev Beware that changing an allowance with this method brings the risk that\n', '     * @dev someone may use both the old and the new allowance by unfortunate\n', '     * @dev transaction ordering. One possible solution to mitigate this race condition\n', '     * @dev is to first reduce the spender&#39;s allowance to 0 and set the desired value\n', '     * @dev afterwards:\n', '     * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * @param _spender The address that will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @param _data ABI-encoded contract call to call `_to` address.\n', '     *\n', '     * @return true if the call function was executed successfully\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool) {\n', '        require(_spender != address(this));\n', '        super.approve(_spender, _value);\n', '        // solium-disable-next-line security/no-call-value\n', '        require(_spender.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '     * @dev address and execute a call with the sent data on the same transaction\n', '     *\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     * @param _data ABI-encoded contract call to call `_to` address.\n', '     *\n', '     * @return true if the call function was executed successfully\n', '     */\n', '    function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\n', '        require(_to != address(this));\n', '        super.transfer(_to, _value);\n', '        require(_to.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '     * @dev another and make a contract call on the same transaction\n', '     *\n', '     * @param _from The address which you want to send tokens from\n', '     * @param _to The address which you want to transfer to\n', '     * @param _value The amout of tokens to be transferred\n', '     * @param _data ABI-encoded contract call to call `_to` address.\n', '     *\n', '     * @return true if the call function was executed successfully\n', '     */\n', '    function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public payable returns (bool) {\n', '        require(_to != address(this));\n', '        super.transferFrom(_from, _to, _value);\n', '        require(_to.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '     * @dev an owner allowed to a spender and execute a call with the sent data.\n', '     *\n', '     * @dev approve should be called when allowed[_spender] == 0. To increment\n', '     * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * @dev the first transaction is mined)\n', '     * @dev From MonolithDAO Token.sol\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     * @param _data ABI-encoded contract call to call `_spender` address.\n', '     */\n', '    function increaseApprovalAndCall(address _spender, uint _addedValue, bytes _data) public payable returns (bool) {\n', '        require(_spender != address(this));\n', '        super.increaseApproval(_spender, _addedValue);\n', '        require(_spender.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '     * @dev an owner allowed to a spender and execute a call with the sent data.\n', '     *\n', '     * @dev approve should be called when allowed[_spender] == 0. To decrement\n', '     * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * @dev the first transaction is mined)\n', '     * @dev From MonolithDAO Token.sol\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     * @param _data ABI-encoded contract call to call `_spender` address.\n', '     */\n', '    function decreaseApprovalAndCall(address _spender, uint _subtractedValue, bytes _data) public payable returns (bool) {\n', '        require(_spender != address(this));\n', '        super.decreaseApproval(_spender, _subtractedValue);\n', '        require(_spender.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title  Burnable and Pause Token\n', ' * @dev    StandardToken modified with pausable transfers.\n', ' */\n', 'contract PauseBurnableERC827Token is ERC827Token, Ownable {\n', '    using SafeMath for uint256;\n', '    event Pause();\n', '    event Unpause();\n', '    event PauseOperatorTransferred(address indexed previousOperator, address indexed newOperator);\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    bool public paused = false;\n', '    address public pauseOperator;\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyPauseOperator() {\n', '        require(msg.sender == pauseOperator || msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev The constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        pauseOperator = msg.sender;\n', '    }\n', '    /**\n', '     * @dev called by the operator to set the new operator to pause the token\n', '     */\n', '    function transferPauseOperator(address newPauseOperator) onlyPauseOperator public {\n', '        require(newPauseOperator != address(0));\n', '        emit PauseOperatorTransferred(pauseOperator, newPauseOperator);\n', '        pauseOperator = newPauseOperator;\n', '    }\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyPauseOperator whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyPauseOperator whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public whenNotPaused {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '        balances[_who] = balances[_who].sub(_value);\n', '        // Subtract from the sender\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _value uint256 The amount of token to be burned\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public whenNotPaused {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _burn(_from, _value);\n', '    }\n', '}\n', '\n', 'contract XCoin is PauseBurnableERC827Token {\n', '    string  public  name;\n', '    string  public  symbol;\n', '    uint8   public constant decimals = 18;\n', '\n', '    constructor(string _name, string _symbol, uint256 _totalSupply, address _owner) public {\n', '        if (_owner != address(0x0)) {\n', '            pauseOperator = _owner;\n', '            owner = _owner;\n', '        }\n', '        totalSupply_ = _totalSupply;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(0x0, msg.sender, _totalSupply);\n', '    }\n', '    function batchTransfer(address[] _tos, uint256 _value) public whenNotPaused returns (bool) {\n', '        uint256 all = _value.mul(_tos.length);\n', '        require(balances[msg.sender] >= all);\n', '        for (uint i = 0; i < _tos.length; i++) {\n', '            require(_tos[i] != address(0));\n', '            require(_tos[i] != msg.sender);\n', '            balances[_tos[i]] = balances[_tos[i]].add(_value);\n', '            emit Transfer(msg.sender, _tos[i], _value);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(all);\n', '        return true;\n', '    }\n', '\n', '    function multiTransfer(address[] _tos, uint256[] _values) public whenNotPaused returns (bool) {\n', '        require(_tos.length == _values.length);\n', '        uint256 all = 0;\n', '        for (uint i = 0; i < _tos.length; i++) {\n', '            require(_tos[i] != address(0));\n', '            require(_tos[i] != msg.sender);\n', '            all = all.add(_values[i]);\n', '            balances[_tos[i]] = balances[_tos[i]].add(_values[i]);\n', '            emit Transfer(msg.sender, _tos[i], _values[i]);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(all);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC827 interface, an extension of ERC20 token standard\n', ' *\n', ' * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool);\n', '\n', '    function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool);\n', '\n', '    function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public payable returns (bool);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' */\n', 'contract ERC20Token is ERC20 {\n', '    using SafeMath for uint256;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC827, an extension of ERC20 token standard\n', ' *\n', ' * @dev Implementation the ERC827, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' *\n', ' * @dev Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, ERC20Token {\n', '    /**\n', '     * @dev Addition to ERC20 token methods. It allows to\n', '     * @dev approve the transfer of value and execute a call with the sent data.\n', '     *\n', '     * @dev Beware that changing an allowance with this method brings the risk that\n', '     * @dev someone may use both the old and the new allowance by unfortunate\n', '     * @dev transaction ordering. One possible solution to mitigate this race condition\n', "     * @dev is to first reduce the spender's allowance to 0 and set the desired value\n", '     * @dev afterwards:\n', '     * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * @param _spender The address that will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @param _data ABI-encoded contract call to call `_to` address.\n', '     *\n', '     * @return true if the call function was executed successfully\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool) {\n', '        require(_spender != address(this));\n', '        super.approve(_spender, _value);\n', '        // solium-disable-next-line security/no-call-value\n', '        require(_spender.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '     * @dev address and execute a call with the sent data on the same transaction\n', '     *\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     * @param _data ABI-encoded contract call to call `_to` address.\n', '     *\n', '     * @return true if the call function was executed successfully\n', '     */\n', '    function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\n', '        require(_to != address(this));\n', '        super.transfer(_to, _value);\n', '        require(_to.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '     * @dev another and make a contract call on the same transaction\n', '     *\n', '     * @param _from The address which you want to send tokens from\n', '     * @param _to The address which you want to transfer to\n', '     * @param _value The amout of tokens to be transferred\n', '     * @param _data ABI-encoded contract call to call `_to` address.\n', '     *\n', '     * @return true if the call function was executed successfully\n', '     */\n', '    function transferFromAndCall(address _from, address _to, uint256 _value, bytes _data) public payable returns (bool) {\n', '        require(_to != address(this));\n', '        super.transferFrom(_from, _to, _value);\n', '        require(_to.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '     * @dev an owner allowed to a spender and execute a call with the sent data.\n', '     *\n', '     * @dev approve should be called when allowed[_spender] == 0. To increment\n', '     * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * @dev the first transaction is mined)\n', '     * @dev From MonolithDAO Token.sol\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     * @param _data ABI-encoded contract call to call `_spender` address.\n', '     */\n', '    function increaseApprovalAndCall(address _spender, uint _addedValue, bytes _data) public payable returns (bool) {\n', '        require(_spender != address(this));\n', '        super.increaseApproval(_spender, _addedValue);\n', '        require(_spender.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '     * @dev an owner allowed to a spender and execute a call with the sent data.\n', '     *\n', '     * @dev approve should be called when allowed[_spender] == 0. To decrement\n', '     * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * @dev the first transaction is mined)\n', '     * @dev From MonolithDAO Token.sol\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     * @param _data ABI-encoded contract call to call `_spender` address.\n', '     */\n', '    function decreaseApprovalAndCall(address _spender, uint _subtractedValue, bytes _data) public payable returns (bool) {\n', '        require(_spender != address(this));\n', '        super.decreaseApproval(_spender, _subtractedValue);\n', '        require(_spender.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title  Burnable and Pause Token\n', ' * @dev    StandardToken modified with pausable transfers.\n', ' */\n', 'contract PauseBurnableERC827Token is ERC827Token, Ownable {\n', '    using SafeMath for uint256;\n', '    event Pause();\n', '    event Unpause();\n', '    event PauseOperatorTransferred(address indexed previousOperator, address indexed newOperator);\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    bool public paused = false;\n', '    address public pauseOperator;\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyPauseOperator() {\n', '        require(msg.sender == pauseOperator || msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev The constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        pauseOperator = msg.sender;\n', '    }\n', '    /**\n', '     * @dev called by the operator to set the new operator to pause the token\n', '     */\n', '    function transferPauseOperator(address newPauseOperator) onlyPauseOperator public {\n', '        require(newPauseOperator != address(0));\n', '        emit PauseOperatorTransferred(pauseOperator, newPauseOperator);\n', '        pauseOperator = newPauseOperator;\n', '    }\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyPauseOperator whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyPauseOperator whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public whenNotPaused {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '        balances[_who] = balances[_who].sub(_value);\n', '        // Subtract from the sender\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _value uint256 The amount of token to be burned\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public whenNotPaused {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _burn(_from, _value);\n', '    }\n', '}\n', '\n', 'contract XCoin is PauseBurnableERC827Token {\n', '    string  public  name;\n', '    string  public  symbol;\n', '    uint8   public constant decimals = 18;\n', '\n', '    constructor(string _name, string _symbol, uint256 _totalSupply, address _owner) public {\n', '        if (_owner != address(0x0)) {\n', '            pauseOperator = _owner;\n', '            owner = _owner;\n', '        }\n', '        totalSupply_ = _totalSupply;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(0x0, msg.sender, _totalSupply);\n', '    }\n', '    function batchTransfer(address[] _tos, uint256 _value) public whenNotPaused returns (bool) {\n', '        uint256 all = _value.mul(_tos.length);\n', '        require(balances[msg.sender] >= all);\n', '        for (uint i = 0; i < _tos.length; i++) {\n', '            require(_tos[i] != address(0));\n', '            require(_tos[i] != msg.sender);\n', '            balances[_tos[i]] = balances[_tos[i]].add(_value);\n', '            emit Transfer(msg.sender, _tos[i], _value);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(all);\n', '        return true;\n', '    }\n', '\n', '    function multiTransfer(address[] _tos, uint256[] _values) public whenNotPaused returns (bool) {\n', '        require(_tos.length == _values.length);\n', '        uint256 all = 0;\n', '        for (uint i = 0; i < _tos.length; i++) {\n', '            require(_tos[i] != address(0));\n', '            require(_tos[i] != msg.sender);\n', '            all = all.add(_values[i]);\n', '            balances[_tos[i]] = balances[_tos[i]].add(_values[i]);\n', '            emit Transfer(msg.sender, _tos[i], _values[i]);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(all);\n', '        return true;\n', '    }\n', '}']
