['pragma solidity ^0.4.25;\n', '\n', 'contract GitmanIssue {\n', '\n', '    address private mediator;\n', '    address public parent; // deposit contract\n', '    string public owner;\n', '    string public repository;\n', '    string public issue;\n', '\n', '    constructor (string ownerId, string repositoryId, string issueId, address mediatorAddress) public payable { \n', '        parent = msg.sender;\n', '        mediator = mediatorAddress;\n', '        owner = ownerId;\n', '        repository = repositoryId;\n', '        issue = issueId;\n', '    }\n', '\n', '    function resolve(address developerAddress) public {\n', '        require (msg.sender == mediator, "sender not authorized");\n', '        selfdestruct(developerAddress);\n', '    }\n', '\n', '    function recall() public {\n', '        require (msg.sender == mediator, "sender not authorized");\n', '        selfdestruct(parent);\n', '    }\n', '}\n', '\n', 'contract GitmanFactory {\n', '    \n', '    address private mediator;\n', '    uint16 public share = 10;\n', '\n', '    event IssueCreated(address contractAddress, string issue);\n', '\n', '    constructor () public {     //address ownerAddress, \n', '        mediator = msg.sender;\n', '    }\n', '\n', '    function setShare(uint8 value) public {\n', '        require(value > 0 && value <= 100, "share must be between 1 and 100");\n', '        share = value;\n', '    }\n', '\n', '    function createIssue(string user, string repository, string issue) public payable { // returns (address)\n', '        require(msg.value > 0, "reward must be greater than 0");\n', '\n', '        uint cut = msg.value / share;\n', '        uint reward = msg.value - cut;\n', '        mediator.transfer(cut);\n', '        \n', '        address issueContract = (new GitmanIssue).value(reward)(user, repository, issue, mediator);\n', '        emit IssueCreated(issueContract, issue);\n', '    }\n', '}']