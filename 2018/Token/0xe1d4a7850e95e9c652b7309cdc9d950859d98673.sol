['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract ERC20{\n', '\n', 'bool public isERC20 = true;\n', '\n', 'function balanceOf(address who) constant returns (uint256);\n', '\n', 'function transfer(address _to, uint256 _value) returns (bool);\n', '\n', 'function transferFrom(address _from, address _to, uint256 _value) returns (bool);\n', '\n', 'function approve(address _spender, uint256 _value) returns (bool);\n', '\n', 'function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '}\n', '\n', '\n', '\n', 'contract Candy is Pausable {\n', '  ERC20 public erc20;\n', '  //uint256 public candy;\n', '\n', '  function Candy(address _address){\n', '        ERC20 candidateContract = ERC20(_address);\n', '        require(candidateContract.isERC20());\n', '        erc20 = candidateContract;\n', '  }\t\n', '  \n', '  function() external payable {\n', '        require(\n', '            msg.sender != address(0)\n', '        );\n', '      erc20.transfer(msg.sender,uint256(5000000000000000000)); \n', '      //THX! This donation will drive us. \n', '      //Each sender can only get 5 BUN per time.\n', '  }\n', '  \n', '  function withdrawBalance() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '  }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract ERC20{\n', '\n', 'bool public isERC20 = true;\n', '\n', 'function balanceOf(address who) constant returns (uint256);\n', '\n', 'function transfer(address _to, uint256 _value) returns (bool);\n', '\n', 'function transferFrom(address _from, address _to, uint256 _value) returns (bool);\n', '\n', 'function approve(address _spender, uint256 _value) returns (bool);\n', '\n', 'function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '}\n', '\n', '\n', '\n', 'contract Candy is Pausable {\n', '  ERC20 public erc20;\n', '  //uint256 public candy;\n', '\n', '  function Candy(address _address){\n', '        ERC20 candidateContract = ERC20(_address);\n', '        require(candidateContract.isERC20());\n', '        erc20 = candidateContract;\n', '  }\t\n', '  \n', '  function() external payable {\n', '        require(\n', '            msg.sender != address(0)\n', '        );\n', '      erc20.transfer(msg.sender,uint256(5000000000000000000)); \n', '      //THX! This donation will drive us. \n', '      //Each sender can only get 5 BUN per time.\n', '  }\n', '  \n', '  function withdrawBalance() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '  }\n', '}']
