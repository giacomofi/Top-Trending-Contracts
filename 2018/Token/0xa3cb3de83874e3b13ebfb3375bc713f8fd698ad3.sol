['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipRenounced(\n', '        address indexed previousOwner\n', '    );\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract ERC223Interface {\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transfer(address to, uint256 value, bytes data) public returns (bool);\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value,\n', '        bytes data\n', '    );\n', '}\n', '\n', 'contract ERC223ReceivingContract {\n', '    /**\n', '     * @dev Standard ERC223 function that will handle incoming token transfers.\n', '     *\n', '     * @param _from  Token sender address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @title PoSTokenStandard\n', ' * @dev the interface of PoSTokenStandard\n', ' */\n', 'contract PoSTokenStandard {\n', '    uint256 public stakeStartTime;\n', '    uint256 public stakeMinAge;\n', '    uint256 public stakeMaxAge;\n', '    function mint() public returns (bool);\n', '    function coinAge() public view returns (uint256);\n', '    function annualInterest() public view returns (uint256);\n', '    function calculateReward() public view returns (uint256);\n', '    function calculateRewardAt(uint256 _now) public view returns (uint256);\n', '    event Mint(\n', '        address indexed _address,\n', '        uint256 _reward\n', '    );\n', '}\n', '\n', '/**\n', ' * @title TRUE Token\n', ' * @dev ERC20, ERC223, PoS Token for TrueDeck Platform\n', ' */\n', 'contract TrueToken is ERC20, ERC223Interface, PoSTokenStandard, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    event CoinAgeRecordEvent(\n', '        address indexed who,\n', '        uint256 value,\n', '        uint64 time\n', '    );\n', '    event CoinAgeResetEvent(\n', '        address indexed who,\n', '        uint256 value,\n', '        uint64 time\n', '    );\n', '\n', '    string public constant name = "TRUE Token";\n', '    string public constant symbol = "TRUE";\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev Total Number of TRUE tokens that can ever be created.\n', '    *      200M TRUE Tokens\n', '    */\n', '    uint256 public MAX_TOTAL_SUPPLY = 200000000 *  10 ** uint256(decimals);\n', '\n', '    /**\n', '    * @dev Initial supply of TRUE tokens.\n', '    *      70M TRUE Tokens\n', '    *      35% of Maximum Total Supply\n', '    *      Will be distributed as follows:\n', '    *           5% : Platform Partners\n', '    *           1% : Pre-Airdrop\n', '    *          15% : Mega-Airdrop\n', '    *           4% : Bounty (Vested over 6 months)\n', '    *          10% : Development (Vested over 12 months)\n', '    */\n', '    uint256 public INITIAL_SUPPLY = 70000000 *  10 ** uint256(decimals);\n', '\n', '    /**\n', '    * @dev Time at which the contract was deployed\n', '    */\n', '    uint256 public chainStartTime;\n', '\n', '    /**\n', '    * @dev Ethereum Blockchain Block Number at time the contract was deployed\n', '    */\n', '    uint256 public chainStartBlockNumber;\n', '\n', '    /**\n', '    * @dev To keep the record of a single incoming token transfer\n', '    */\n', '    struct CoinAgeRecord {\n', '        uint256 amount;\n', '        uint64 time;\n', '    }\n', '\n', '    /**\n', '    * @dev To keep the coin age record for all addresses\n', '    */\n', '    mapping(address => CoinAgeRecord[]) coinAgeRecordMap;\n', '\n', '    /**\n', '     * @dev Modifier to make contract mint new tokens only\n', '     *      - Staking has started.\n', '     *      - When total supply has not reached MAX_TOTAL_SUPPLY.\n', '     */\n', '    modifier canMint() {\n', '        require(stakeStartTime > 0 && now >= stakeStartTime && totalSupply_ < MAX_TOTAL_SUPPLY);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        chainStartTime = now;\n', '        chainStartBlockNumber = block.number;\n', '\n', '        stakeMinAge = 3 days;\n', '        stakeMaxAge = 60 days;\n', '\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '    }\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer the specified amount of tokens to the specified address.\n', '    *      - Invokes the `tokenFallback` function if the recipient is a contract.\n', '    *        The token transfer fails if the recipient is a contract\n', '    *        but does not implement the `tokenFallback` function\n', '    *        or the fallback function to receive funds.\n', '    *      - Records coin age if the recipient is not a contract\n', '    *\n', '    * @param _to    Receiver address.\n', '    * @param _value Amount of tokens that will be transferred.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        if (msg.sender == _to) {\n', '            return mint();\n', '        }\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        bool flag = isContract(_to);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if (flag) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '\n', '        logCoinAgeRecord(msg.sender, _to, _value, flag);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer the specified amount of tokens to the specified address.\n', '    *      This function works the same with the previous one\n', '    *      but doesn&#39;t contain `_data` param.\n', '    *      Added due to backwards compatibility reasons.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        if (msg.sender == _to) {\n', '            return mint();\n', '        }\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        bytes memory empty;\n', '        bool flag = isContract(_to);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if (flag) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value, empty);\n', '\n', '        logCoinAgeRecord(msg.sender, _to, _value, flag);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        // Coin age should not be recorded if receiver is the sender.\n', '        if (_from != _to) {\n', '            logCoinAgeRecord(_from, _to, _value, isContract(_to));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        require(_spender != address(0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool) {\n', '        require(_spender != address(0));\n', '        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool) {\n', '        require(_spender != address(0));\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Mints new TRUE token and rewards to caller as per the coin age.\n', '    *      Deletes all previous coinage records and resets with new coin age record.\n', '    */\n', '    function mint() public whenNotPaused canMint returns (bool) {\n', '        if (balances[msg.sender] <= 0) {\n', '            return false;\n', '        }\n', '\n', '        if (coinAgeRecordMap[msg.sender].length <= 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 reward = calculateRewardInternal(msg.sender, now);\n', '        if (reward <= 0) {\n', '            return false;\n', '        }\n', '\n', '        if (reward > MAX_TOTAL_SUPPLY.sub(totalSupply_)) {\n', '            reward = MAX_TOTAL_SUPPLY.sub(totalSupply_);\n', '        }\n', '\n', '        totalSupply_ = totalSupply_.add(reward);\n', '        balances[msg.sender] = balances[msg.sender].add(reward);\n', '        emit Mint(msg.sender, reward);\n', '\n', '        uint64 _now = uint64(now);\n', '        delete coinAgeRecordMap[msg.sender];\n', '        coinAgeRecordMap[msg.sender].push(CoinAgeRecord(balances[msg.sender], _now));\n', '        emit CoinAgeResetEvent(msg.sender, balances[msg.sender], _now);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns coinage for the caller address\n', '    */\n', '    function coinAge() public view returns (uint256) {\n', '         return getCoinAgeInternal(msg.sender, now);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns current annual interest\n', '    */\n', '    function annualInterest() public view returns(uint256) {\n', '        return getAnnualInterest(now);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates and returns proof-of-stake reward\n', '    */\n', '    function calculateReward() public view returns (uint256) {\n', '        return calculateRewardInternal(msg.sender, now);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates and returns proof-of-stake reward for provided time\n', '    *\n', '    * @param _now timestamp The time for which the reward will be calculated\n', '    */\n', '    function calculateRewardAt(uint256 _now) public view returns (uint256) {\n', '        return calculateRewardInternal(msg.sender, _now);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns coinage record for the given address and index\n', '    *\n', '    * @param _address address The address for which coinage record will be fetched\n', '    * @param _index index The index of coinage record for that address\n', '    */\n', '    function coinAgeRecordForAddress(address _address, uint256 _index) public view onlyOwner returns (uint256, uint64) {\n', '        if (coinAgeRecordMap[_address].length > _index) {\n', '            return (coinAgeRecordMap[_address][_index].amount, coinAgeRecordMap[_address][_index].time);\n', '        } else {\n', '            return (0, 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Returns coinage for the caller address\n', '    *\n', '    * @param _address address The address for which coinage will be calculated\n', '    */\n', '    function coinAgeForAddress(address _address) public view onlyOwner returns (uint256) {\n', '         return getCoinAgeInternal(_address, now);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns coinage for the caller address\n', '    *\n', '    * @param _address address The address for which coinage will be calculated\n', '    * @param _now timestamp The time for which the coinage will be calculated\n', '    */\n', '    function coinAgeForAddressAt(address _address, uint256 _now) public view onlyOwner returns (uint256) {\n', '         return getCoinAgeInternal(_address, _now);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates and returns proof-of-stake reward for provided address and time\n', '    *\n', '    * @param _address address The address for which reward will be calculated\n', '    */\n', '    function calculateRewardForAddress(address _address) public view onlyOwner returns (uint256) {\n', '        return calculateRewardInternal(_address, now);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates and returns proof-of-stake reward for provided address and time\n', '    *\n', '    * @param _address address The address for which reward will be calculated\n', '    * @param _now timestamp The time for which the reward will be calculated\n', '    */\n', '    function calculateRewardForAddressAt(address _address, uint256 _now) public view onlyOwner returns (uint256) {\n', '        return calculateRewardInternal(_address, _now);\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the stake start time\n', '    */\n', '    function startStakingAt(uint256 timestamp) public onlyOwner {\n', '        require(stakeStartTime <= 0 && timestamp >= chainStartTime && timestamp > now);\n', '        stakeStartTime = timestamp;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns true if the given _address is a contract, false otherwise.\n', '    */\n', '    function isContract(address _address) private view returns (bool) {\n', '        uint256 length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_address)\n', '        }\n', '        return (length>0);\n', '    }\n', '\n', '    /**\n', '    * @dev Logs coinage record for sender and receiver.\n', '    *      Deletes sender&#39;s previous coinage records if any.\n', '    *\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    * @param _isContract bool if the receiver is a contract\n', '    */\n', '    function logCoinAgeRecord(address _from, address _to, uint256 _value, bool _isContract) private returns (bool) {\n', '        if (coinAgeRecordMap[_from].length > 0) {\n', '            delete coinAgeRecordMap[_from];\n', '        }\n', '\n', '        uint64 _now = uint64(now);\n', '\n', '        if (balances[_from] != 0) {\n', '            coinAgeRecordMap[_from].push(CoinAgeRecord(balances[_from], _now));\n', '            emit CoinAgeResetEvent(_from, balances[_from], _now);\n', '        }\n', '\n', '        if (_value != 0 && !_isContract) {\n', '            coinAgeRecordMap[_to].push(CoinAgeRecord(_value, _now));\n', '            emit CoinAgeRecordEvent(_to, _value, _now);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates and returns proof-of-stake reward for provided address\n', '    *\n', '    * @param _address address The address for which reward will be calculated\n', '    * @param _now timestamp The time for which the reward will be calculated\n', '    */\n', '    function calculateRewardInternal(address _address, uint256 _now) private view returns (uint256) {\n', '        uint256 _coinAge = getCoinAgeInternal(_address, _now);\n', '        if (_coinAge <= 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 interest = getAnnualInterest(_now);\n', '\n', '        return (_coinAge.mul(interest)).div(365 * 100);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the coin age for given address and time.\n', '    *\n', '    * @param _address address The address for which coinage will be calculated\n', '    * @param _now timestamp The time for which the coinage will be calculated\n', '    */\n', '    function getCoinAgeInternal(address _address, uint256 _now) private view returns (uint256 _coinAge) {\n', '        if (coinAgeRecordMap[_address].length <= 0) {\n', '            return 0;\n', '        }\n', '\n', '        for (uint256 i = 0; i < coinAgeRecordMap[_address].length; i++) {\n', '            if (_now < uint256(coinAgeRecordMap[_address][i].time).add(stakeMinAge)) {\n', '                continue;\n', '            }\n', '\n', '            uint256 secondsPassed = _now.sub(uint256(coinAgeRecordMap[_address][i].time));\n', '            if (secondsPassed > stakeMaxAge ) {\n', '                secondsPassed = stakeMaxAge;\n', '            }\n', '\n', '            _coinAge = _coinAge.add((coinAgeRecordMap[_address][i].amount).mul(secondsPassed.div(1 days)));\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the annual interest rate for given time\n', '    *\n', '    * @param _now timestamp The time for which the annual interest will be calculated\n', '    */\n', '    function getAnnualInterest(uint256 _now) private view returns(uint256 interest) {\n', '        if (stakeStartTime > 0 && _now >= stakeStartTime && totalSupply_ < MAX_TOTAL_SUPPLY) {\n', '            uint256 secondsPassed = _now.sub(stakeStartTime);\n', '            // 1st Year = 30% annually\n', '            if (secondsPassed <= 365 days) {\n', '                interest = 30;\n', '            } else if (secondsPassed <= 547 days) {  // 2nd Year, 1st Half = 25% annually\n', '                interest = 25;\n', '            } else if (secondsPassed <= 730 days) {  // 2nd Year, 2nd Half = 20% annually\n', '                interest = 20;\n', '            } else if (secondsPassed <= 911 days) {  // 3rd Year, 1st Half = 15% annually\n', '                interest = 15;\n', '            } else if (secondsPassed <= 1094 days) {  // 3rd Year, 2nd Half = 10% annually\n', '                interest = 10;\n', '            } else {  // 4th Year Onwards = 5% annually\n', '                interest = 5;\n', '            }\n', '        } else {\n', '            interest = 0;\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipRenounced(\n', '        address indexed previousOwner\n', '    );\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract ERC223Interface {\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transfer(address to, uint256 value, bytes data) public returns (bool);\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value,\n', '        bytes data\n', '    );\n', '}\n', '\n', 'contract ERC223ReceivingContract {\n', '    /**\n', '     * @dev Standard ERC223 function that will handle incoming token transfers.\n', '     *\n', '     * @param _from  Token sender address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @title PoSTokenStandard\n', ' * @dev the interface of PoSTokenStandard\n', ' */\n', 'contract PoSTokenStandard {\n', '    uint256 public stakeStartTime;\n', '    uint256 public stakeMinAge;\n', '    uint256 public stakeMaxAge;\n', '    function mint() public returns (bool);\n', '    function coinAge() public view returns (uint256);\n', '    function annualInterest() public view returns (uint256);\n', '    function calculateReward() public view returns (uint256);\n', '    function calculateRewardAt(uint256 _now) public view returns (uint256);\n', '    event Mint(\n', '        address indexed _address,\n', '        uint256 _reward\n', '    );\n', '}\n', '\n', '/**\n', ' * @title TRUE Token\n', ' * @dev ERC20, ERC223, PoS Token for TrueDeck Platform\n', ' */\n', 'contract TrueToken is ERC20, ERC223Interface, PoSTokenStandard, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    event CoinAgeRecordEvent(\n', '        address indexed who,\n', '        uint256 value,\n', '        uint64 time\n', '    );\n', '    event CoinAgeResetEvent(\n', '        address indexed who,\n', '        uint256 value,\n', '        uint64 time\n', '    );\n', '\n', '    string public constant name = "TRUE Token";\n', '    string public constant symbol = "TRUE";\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev Total Number of TRUE tokens that can ever be created.\n', '    *      200M TRUE Tokens\n', '    */\n', '    uint256 public MAX_TOTAL_SUPPLY = 200000000 *  10 ** uint256(decimals);\n', '\n', '    /**\n', '    * @dev Initial supply of TRUE tokens.\n', '    *      70M TRUE Tokens\n', '    *      35% of Maximum Total Supply\n', '    *      Will be distributed as follows:\n', '    *           5% : Platform Partners\n', '    *           1% : Pre-Airdrop\n', '    *          15% : Mega-Airdrop\n', '    *           4% : Bounty (Vested over 6 months)\n', '    *          10% : Development (Vested over 12 months)\n', '    */\n', '    uint256 public INITIAL_SUPPLY = 70000000 *  10 ** uint256(decimals);\n', '\n', '    /**\n', '    * @dev Time at which the contract was deployed\n', '    */\n', '    uint256 public chainStartTime;\n', '\n', '    /**\n', '    * @dev Ethereum Blockchain Block Number at time the contract was deployed\n', '    */\n', '    uint256 public chainStartBlockNumber;\n', '\n', '    /**\n', '    * @dev To keep the record of a single incoming token transfer\n', '    */\n', '    struct CoinAgeRecord {\n', '        uint256 amount;\n', '        uint64 time;\n', '    }\n', '\n', '    /**\n', '    * @dev To keep the coin age record for all addresses\n', '    */\n', '    mapping(address => CoinAgeRecord[]) coinAgeRecordMap;\n', '\n', '    /**\n', '     * @dev Modifier to make contract mint new tokens only\n', '     *      - Staking has started.\n', '     *      - When total supply has not reached MAX_TOTAL_SUPPLY.\n', '     */\n', '    modifier canMint() {\n', '        require(stakeStartTime > 0 && now >= stakeStartTime && totalSupply_ < MAX_TOTAL_SUPPLY);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        chainStartTime = now;\n', '        chainStartBlockNumber = block.number;\n', '\n', '        stakeMinAge = 3 days;\n', '        stakeMaxAge = 60 days;\n', '\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '    }\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer the specified amount of tokens to the specified address.\n', '    *      - Invokes the `tokenFallback` function if the recipient is a contract.\n', '    *        The token transfer fails if the recipient is a contract\n', '    *        but does not implement the `tokenFallback` function\n', '    *        or the fallback function to receive funds.\n', '    *      - Records coin age if the recipient is not a contract\n', '    *\n', '    * @param _to    Receiver address.\n', '    * @param _value Amount of tokens that will be transferred.\n', '    * @param _data  Transaction metadata.\n', '    */\n', '    function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        if (msg.sender == _to) {\n', '            return mint();\n', '        }\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        bool flag = isContract(_to);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if (flag) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '\n', '        logCoinAgeRecord(msg.sender, _to, _value, flag);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer the specified amount of tokens to the specified address.\n', '    *      This function works the same with the previous one\n', "    *      but doesn't contain `_data` param.\n", '    *      Added due to backwards compatibility reasons.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        if (msg.sender == _to) {\n', '            return mint();\n', '        }\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        bytes memory empty;\n', '        bool flag = isContract(_to);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if (flag) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value, empty);\n', '\n', '        logCoinAgeRecord(msg.sender, _to, _value, flag);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        // Coin age should not be recorded if receiver is the sender.\n', '        if (_from != _to) {\n', '            logCoinAgeRecord(_from, _to, _value, isContract(_to));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        require(_spender != address(0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool) {\n', '        require(_spender != address(0));\n', '        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool) {\n', '        require(_spender != address(0));\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Mints new TRUE token and rewards to caller as per the coin age.\n', '    *      Deletes all previous coinage records and resets with new coin age record.\n', '    */\n', '    function mint() public whenNotPaused canMint returns (bool) {\n', '        if (balances[msg.sender] <= 0) {\n', '            return false;\n', '        }\n', '\n', '        if (coinAgeRecordMap[msg.sender].length <= 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 reward = calculateRewardInternal(msg.sender, now);\n', '        if (reward <= 0) {\n', '            return false;\n', '        }\n', '\n', '        if (reward > MAX_TOTAL_SUPPLY.sub(totalSupply_)) {\n', '            reward = MAX_TOTAL_SUPPLY.sub(totalSupply_);\n', '        }\n', '\n', '        totalSupply_ = totalSupply_.add(reward);\n', '        balances[msg.sender] = balances[msg.sender].add(reward);\n', '        emit Mint(msg.sender, reward);\n', '\n', '        uint64 _now = uint64(now);\n', '        delete coinAgeRecordMap[msg.sender];\n', '        coinAgeRecordMap[msg.sender].push(CoinAgeRecord(balances[msg.sender], _now));\n', '        emit CoinAgeResetEvent(msg.sender, balances[msg.sender], _now);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns coinage for the caller address\n', '    */\n', '    function coinAge() public view returns (uint256) {\n', '         return getCoinAgeInternal(msg.sender, now);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns current annual interest\n', '    */\n', '    function annualInterest() public view returns(uint256) {\n', '        return getAnnualInterest(now);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates and returns proof-of-stake reward\n', '    */\n', '    function calculateReward() public view returns (uint256) {\n', '        return calculateRewardInternal(msg.sender, now);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates and returns proof-of-stake reward for provided time\n', '    *\n', '    * @param _now timestamp The time for which the reward will be calculated\n', '    */\n', '    function calculateRewardAt(uint256 _now) public view returns (uint256) {\n', '        return calculateRewardInternal(msg.sender, _now);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns coinage record for the given address and index\n', '    *\n', '    * @param _address address The address for which coinage record will be fetched\n', '    * @param _index index The index of coinage record for that address\n', '    */\n', '    function coinAgeRecordForAddress(address _address, uint256 _index) public view onlyOwner returns (uint256, uint64) {\n', '        if (coinAgeRecordMap[_address].length > _index) {\n', '            return (coinAgeRecordMap[_address][_index].amount, coinAgeRecordMap[_address][_index].time);\n', '        } else {\n', '            return (0, 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Returns coinage for the caller address\n', '    *\n', '    * @param _address address The address for which coinage will be calculated\n', '    */\n', '    function coinAgeForAddress(address _address) public view onlyOwner returns (uint256) {\n', '         return getCoinAgeInternal(_address, now);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns coinage for the caller address\n', '    *\n', '    * @param _address address The address for which coinage will be calculated\n', '    * @param _now timestamp The time for which the coinage will be calculated\n', '    */\n', '    function coinAgeForAddressAt(address _address, uint256 _now) public view onlyOwner returns (uint256) {\n', '         return getCoinAgeInternal(_address, _now);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates and returns proof-of-stake reward for provided address and time\n', '    *\n', '    * @param _address address The address for which reward will be calculated\n', '    */\n', '    function calculateRewardForAddress(address _address) public view onlyOwner returns (uint256) {\n', '        return calculateRewardInternal(_address, now);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates and returns proof-of-stake reward for provided address and time\n', '    *\n', '    * @param _address address The address for which reward will be calculated\n', '    * @param _now timestamp The time for which the reward will be calculated\n', '    */\n', '    function calculateRewardForAddressAt(address _address, uint256 _now) public view onlyOwner returns (uint256) {\n', '        return calculateRewardInternal(_address, _now);\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the stake start time\n', '    */\n', '    function startStakingAt(uint256 timestamp) public onlyOwner {\n', '        require(stakeStartTime <= 0 && timestamp >= chainStartTime && timestamp > now);\n', '        stakeStartTime = timestamp;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns true if the given _address is a contract, false otherwise.\n', '    */\n', '    function isContract(address _address) private view returns (bool) {\n', '        uint256 length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_address)\n', '        }\n', '        return (length>0);\n', '    }\n', '\n', '    /**\n', '    * @dev Logs coinage record for sender and receiver.\n', "    *      Deletes sender's previous coinage records if any.\n", '    *\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    * @param _isContract bool if the receiver is a contract\n', '    */\n', '    function logCoinAgeRecord(address _from, address _to, uint256 _value, bool _isContract) private returns (bool) {\n', '        if (coinAgeRecordMap[_from].length > 0) {\n', '            delete coinAgeRecordMap[_from];\n', '        }\n', '\n', '        uint64 _now = uint64(now);\n', '\n', '        if (balances[_from] != 0) {\n', '            coinAgeRecordMap[_from].push(CoinAgeRecord(balances[_from], _now));\n', '            emit CoinAgeResetEvent(_from, balances[_from], _now);\n', '        }\n', '\n', '        if (_value != 0 && !_isContract) {\n', '            coinAgeRecordMap[_to].push(CoinAgeRecord(_value, _now));\n', '            emit CoinAgeRecordEvent(_to, _value, _now);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates and returns proof-of-stake reward for provided address\n', '    *\n', '    * @param _address address The address for which reward will be calculated\n', '    * @param _now timestamp The time for which the reward will be calculated\n', '    */\n', '    function calculateRewardInternal(address _address, uint256 _now) private view returns (uint256) {\n', '        uint256 _coinAge = getCoinAgeInternal(_address, _now);\n', '        if (_coinAge <= 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 interest = getAnnualInterest(_now);\n', '\n', '        return (_coinAge.mul(interest)).div(365 * 100);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the coin age for given address and time.\n', '    *\n', '    * @param _address address The address for which coinage will be calculated\n', '    * @param _now timestamp The time for which the coinage will be calculated\n', '    */\n', '    function getCoinAgeInternal(address _address, uint256 _now) private view returns (uint256 _coinAge) {\n', '        if (coinAgeRecordMap[_address].length <= 0) {\n', '            return 0;\n', '        }\n', '\n', '        for (uint256 i = 0; i < coinAgeRecordMap[_address].length; i++) {\n', '            if (_now < uint256(coinAgeRecordMap[_address][i].time).add(stakeMinAge)) {\n', '                continue;\n', '            }\n', '\n', '            uint256 secondsPassed = _now.sub(uint256(coinAgeRecordMap[_address][i].time));\n', '            if (secondsPassed > stakeMaxAge ) {\n', '                secondsPassed = stakeMaxAge;\n', '            }\n', '\n', '            _coinAge = _coinAge.add((coinAgeRecordMap[_address][i].amount).mul(secondsPassed.div(1 days)));\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the annual interest rate for given time\n', '    *\n', '    * @param _now timestamp The time for which the annual interest will be calculated\n', '    */\n', '    function getAnnualInterest(uint256 _now) private view returns(uint256 interest) {\n', '        if (stakeStartTime > 0 && _now >= stakeStartTime && totalSupply_ < MAX_TOTAL_SUPPLY) {\n', '            uint256 secondsPassed = _now.sub(stakeStartTime);\n', '            // 1st Year = 30% annually\n', '            if (secondsPassed <= 365 days) {\n', '                interest = 30;\n', '            } else if (secondsPassed <= 547 days) {  // 2nd Year, 1st Half = 25% annually\n', '                interest = 25;\n', '            } else if (secondsPassed <= 730 days) {  // 2nd Year, 2nd Half = 20% annually\n', '                interest = 20;\n', '            } else if (secondsPassed <= 911 days) {  // 3rd Year, 1st Half = 15% annually\n', '                interest = 15;\n', '            } else if (secondsPassed <= 1094 days) {  // 3rd Year, 2nd Half = 10% annually\n', '                interest = 10;\n', '            } else {  // 4th Year Onwards = 5% annually\n', '                interest = 5;\n', '            }\n', '        } else {\n', '            interest = 0;\n', '        }\n', '    }\n', '}']
