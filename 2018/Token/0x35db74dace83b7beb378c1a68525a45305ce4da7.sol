['pragma solidity ^0.4.23;\n', '// Made By PinkCherry - <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e58c8b96848b8c919c968e848ba58288848c89cb868a88">[email&#160;protected]</a> - https://blog.naver.com/soolmini\n', '\n', 'library SafeMath\n', '{\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract OwnerHelper\n', '{\n', '    address public owner;\n', '\n', '    event OwnerTransferPropose(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor() public\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address _to) onlyOwner public\n', '    {\n', '        require(_to != owner);\n', '        require(_to != address(0x0));\n', '        owner = _to;\n', '        emit OwnerTransferPropose(owner, _to);\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Interface\n', '{\n', '    event Transfer( address indexed _from, address indexed _to, uint _value);\n', '    event Approval( address indexed _owner, address indexed _spender, uint _value);\n', '    \n', '    function totalSupply() constant public returns (uint _supply);\n', '    function balanceOf( address _who ) public view returns (uint _value);\n', '    function transfer( address _to, uint _value) public returns (bool _success);\n', '    function approve( address _spender, uint _value ) public returns (bool _success);\n', '    function allowance( address _owner, address _spender ) public view returns (uint _allowance);\n', '    function transferFrom( address _from, address _to, uint _value) public returns (bool _success);\n', '}\n', '\n', 'contract GemmyCoin is ERC20Interface, OwnerHelper\n', '{\n', '    using SafeMath for uint;\n', '    \n', '    string public name;\n', '    uint public decimals;\n', '    string public symbol;\n', '    address public wallet;\n', '\n', '    uint public totalSupply;\n', '    \n', '    uint constant public saleSupply = 4000000000 * E18;\n', '    uint constant public rewardPoolSupply = 2500000000 * E18;\n', '    uint constant public foundationSupply = 500000000 * E18;\n', '    uint constant public gemmyMusicSupply = 1500000000 * E18;\n', '    uint constant public advisorSupply = 700000000 * E18;\n', '    uint constant public mktSupply = 800000000 * E18;\n', '    uint constant public maxSupply = 10000000000 * E18;\n', '    \n', '    uint public coinIssuedSale = 0;\n', '    uint public coinIssuedRewardPool = 0;\n', '    uint public coinIssuedFoundation = 0;\n', '    uint public coinIssuedGemmyMusic = 0;\n', '    uint public coinIssuedAdvisor = 0;\n', '    uint public coinIssuedMkt = 0;\n', '    uint public coinIssuedTotal = 0;\n', '    uint public coinIssuedBurn = 0;\n', '    \n', '    uint public saleEtherReceived = 0;\n', '\n', '    uint constant private E18 = 1000000000000000000;\n', '    uint constant private ethPerCoin = 35000;\n', '    \n', '    uint private UTC9 = 9 * 60 * 60;\n', '    uint public privateSaleDate = 1526223600 + UTC9;        // 2018-05-14 00:00:00 (UTC + 9)\n', '    uint public privateSaleEndDate = 1527951600 + UTC9;     // 2018-06-03 00:00:00 (UTC + 9)\n', '    \n', '    uint public firstPreSaleDate = 1528038000 + UTC9;       // 2018-06-04 00:00:00 (UTC + 9)\n', '    uint public firstPreSaleEndDate = 1528988400 + UTC9;    // 2018-06-15 00:00:00 (UTC + 9)\n', '    \n', '    uint public secondPreSaleDate = 1529852400 + UTC9;      // 2018-06-25 00:00:00 (UTC + 9)\n', '    uint public secondPreSaleEndDate = 1530802800 + UTC9;   // 2018-07-06 00:00:00 (UTC + 9)\n', '    \n', '    uint public firstCrowdSaleDate = 1531062000 + UTC9;     // 2018-07-09 00:00:00 (UTC + 9)\n', '    uint public firstCrowdSaleEndDate = 1532012400 + UTC9;  // 2018-07-20 00:00:00 (UTC + 9)\n', '\n', '    uint public secondCrowdSaleDate = 1532271600 + UTC9;    // 2018-07-23 00:00:00 (UTC + 9)\n', '    uint public secondCrowdSaleEndDate = 1532962800 + UTC9; // 2018-07-31 00:00:00 (UTC + 9)\n', '    \n', '    bool public totalCoinLock;\n', '    uint public gemmyMusicLockTime;\n', '    \n', '    uint public advisorFirstLockTime;\n', '    uint public advisorSecondLockTime;\n', '    \n', '    mapping (address => uint) internal balances;\n', '    mapping (address => mapping ( address => uint )) internal approvals;\n', '\n', '    mapping (address => bool) internal personalLocks;\n', '    mapping (address => bool) internal gemmyMusicLocks;\n', '    \n', '    mapping (address => uint) internal advisorFirstLockBalances;\n', '    mapping (address => uint) internal advisorSecondLockBalances;\n', '    \n', '    mapping (address => uint) internal  icoEtherContributeds;\n', '    \n', '    event CoinIssuedSale(address indexed _who, uint _coins, uint _balances, uint _ether);\n', '    event RemoveTotalCoinLock();\n', '    event SetAdvisorLockTime(uint _first, uint _second);\n', '    event RemovePersonalLock(address _who);\n', '    event RemoveGemmyMusicLock(address _who);\n', '    event RemoveAdvisorFirstLock(address _who);\n', '    event RemoveAdvisorSecondLock(address _who);\n', '    event WithdrawRewardPool(address _who, uint _value);\n', '    event WithdrawFoundation(address _who, uint _value);\n', '    event WithdrawGemmyMusic(address _who, uint _value);\n', '    event WithdrawAdvisor(address _who, uint _value);\n', '    event WithdrawMkt(address _who, uint _value);\n', '    event ChangeWallet(address _who);\n', '    event BurnCoin(uint _value);\n', '\n', '    constructor() public\n', '    {\n', '        name = "GemmyMusicCoin";\n', '        decimals = 18;\n', '        symbol = "GMM";\n', '        totalSupply = 0;\n', '        \n', '        owner = msg.sender;\n', '        wallet = msg.sender;\n', '        \n', '        require(maxSupply == saleSupply + rewardPoolSupply + foundationSupply + gemmyMusicSupply + advisorSupply + mktSupply);\n', '        \n', '        totalCoinLock = true;\n', '        gemmyMusicLockTime = privateSaleDate + (365 * 24 * 60 * 60);\n', '        advisorFirstLockTime = gemmyMusicLockTime;   // if tokenUnLock == timeChange\n', '        advisorSecondLockTime = gemmyMusicLockTime;  // if tokenUnLock == timeChange\n', '    }\n', '\n', '    function atNow() public view returns (uint)\n', '    {\n', '        return now;\n', '    }\n', '    \n', '    function () payable public\n', '    {\n', '        require(saleSupply > coinIssuedSale);\n', '        buyCoin();\n', '    }\n', '    \n', '    function buyCoin() private\n', '    {\n', '        uint saleTime = 0; // 1 : privateSale, 2 : firstPreSale, 3 : secondPreSale, 4 : firstCrowdSale, 5 : secondCrowdSale\n', '        uint coinBonus = 0;\n', '        \n', '        uint minEth = 0.1 ether;\n', '        uint maxEth = 100000 ether;\n', '        \n', '        uint nowTime = atNow();\n', '        \n', '        if( nowTime >= privateSaleDate && nowTime < privateSaleEndDate )\n', '        {\n', '            saleTime = 1;\n', '            coinBonus = 40;\n', '        }\n', '        else if( nowTime >= firstPreSaleDate && nowTime < firstPreSaleEndDate )\n', '        {\n', '            saleTime = 2;\n', '            coinBonus = 20;\n', '        }\n', '        else if( nowTime >= secondPreSaleDate && nowTime < secondPreSaleEndDate )\n', '        {\n', '            saleTime = 3;\n', '            coinBonus = 15;\n', '        }\n', '        else if( nowTime >= firstCrowdSaleDate && nowTime < firstCrowdSaleEndDate )\n', '        {\n', '            saleTime = 4;\n', '            coinBonus = 5;\n', '        }\n', '        else if( nowTime >= secondCrowdSaleDate && nowTime < secondCrowdSaleEndDate )\n', '        {\n', '            saleTime = 5;\n', '            coinBonus = 0;\n', '        }\n', '        \n', '        require(saleTime >= 1 && saleTime <= 5);\n', '        require(msg.value >= minEth && icoEtherContributeds[msg.sender].add(msg.value) <= maxEth);\n', '\n', '        uint coins = ethPerCoin.mul(msg.value);\n', '        coins = coins.mul(100 + coinBonus) / 100;\n', '        \n', '        require(saleSupply >= coinIssuedSale.add(coins));\n', '\n', '        totalSupply = totalSupply.add(coins);\n', '        coinIssuedSale = coinIssuedSale.add(coins);\n', '        saleEtherReceived = saleEtherReceived.add(msg.value);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(coins);\n', '        icoEtherContributeds[msg.sender] = icoEtherContributeds[msg.sender].add(msg.value);\n', '        personalLocks[msg.sender] = true;\n', '\n', '        emit Transfer(0x0, msg.sender, coins);\n', '        emit CoinIssuedSale(msg.sender, coins, balances[msg.sender], msg.value);\n', '\n', '        wallet.transfer(address(this).balance);\n', '    }\n', '    \n', '    function isTransferLock(address _from, address _to) constant private returns (bool _success)\n', '    {\n', '        _success = false;\n', '\n', '        if(totalCoinLock == true)\n', '        {\n', '            _success = true;\n', '        }\n', '        \n', '        if(personalLocks[_from] == true || personalLocks[_to] == true)\n', '        {\n', '            _success = true;\n', '        }\n', '        \n', '        if(gemmyMusicLocks[_from] == true || gemmyMusicLocks[_to] == true)\n', '        {\n', '            _success = true;\n', '        }\n', '        \n', '        return _success;\n', '    }\n', '    \n', '    function isPersonalLock(address _who) constant public returns (bool)\n', '    {\n', '        return personalLocks[_who];\n', '    }\n', '    \n', '    function removeTotalCoinLock() onlyOwner public\n', '    {\n', '        require(totalCoinLock == true);\n', '        \n', '        uint nowTime = atNow();\n', '        advisorFirstLockTime = nowTime + (2 * 30 * 24 * 60 * 60);\n', '        advisorSecondLockTime = nowTime + (4 * 30 * 24 * 60 * 60);\n', '    \n', '        totalCoinLock = false;\n', '        \n', '        emit RemoveTotalCoinLock();\n', '        emit SetAdvisorLockTime(advisorFirstLockTime, advisorSecondLockTime);\n', '    }\n', '    \n', '    function removePersonalLock(address _who) onlyOwner public\n', '    {\n', '        require(personalLocks[_who] == true);\n', '        \n', '        personalLocks[_who] = false;\n', '        \n', '        emit RemovePersonalLock(_who);\n', '    }\n', '    \n', '    function removePersonalLockMultiple(address[] _addresses) onlyOwner public\n', '    {\n', '        for(uint i = 0; i < _addresses.length; i++)\n', '        {\n', '        \n', '            require(personalLocks[_addresses[i]] == true);\n', '        \n', '            personalLocks[_addresses[i]] = false;\n', '        \n', '            emit RemovePersonalLock(_addresses[i]);\n', '        }\n', '    }\n', '    \n', '    function removeGemmyMusicLock(address _who) onlyOwner public\n', '    {\n', '        require(atNow() > gemmyMusicLockTime);\n', '        require(gemmyMusicLocks[_who] == true);\n', '        \n', '        gemmyMusicLocks[_who] = false;\n', '        \n', '        emit RemoveGemmyMusicLock(_who);\n', '    }\n', '    \n', '    function removeFirstAdvisorLock(address _who) onlyOwner public\n', '    {\n', '        require(atNow() > advisorFirstLockTime);\n', '        require(advisorFirstLockBalances[_who] > 0);\n', '        require(personalLocks[_who] == true);\n', '        \n', '        balances[_who] = balances[_who].add(advisorFirstLockBalances[_who]);\n', '        advisorFirstLockBalances[_who] = 0;\n', '        \n', '        emit RemoveAdvisorFirstLock(_who);\n', '    }\n', '    \n', '    function removeSecondAdvisorLock(address _who) onlyOwner public\n', '    {\n', '        require(atNow() > advisorSecondLockTime);\n', '        require(advisorFirstLockBalances[_who] > 0);\n', '        require(personalLocks[_who] == true);\n', '        \n', '        balances[_who] = balances[_who].add(advisorFirstLockBalances[_who]);\n', '        advisorFirstLockBalances[_who] = 0;\n', '        \n', '        emit RemoveAdvisorFirstLock(_who);\n', '    }\n', '    \n', '    function totalSupply() constant public returns (uint) \n', '    {\n', '        return totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _who) public view returns (uint) \n', '    {\n', '        return balances[_who].add(advisorFirstLockBalances[_who].add(advisorSecondLockBalances[_who]));\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns (bool) \n', '    {\n', '        require(balances[msg.sender] >= _value);\n', '        require(isTransferLock(msg.sender, _to) == false);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferMultiple(address[] _addresses, uint[] _values) onlyOwner public returns (bool) \n', '    {\n', '        require(_addresses.length == _values.length);\n', '        \n', '        for(uint i = 0; i < _addresses.length; i++)\n', '        {\n', '            require(balances[msg.sender] >= _values[i]);\n', '            require(isTransferLock(msg.sender, _addresses[i]) == false);\n', '            \n', '            balances[msg.sender] = balances[msg.sender].sub(_values[i]);\n', '            balances[_addresses[i]] = balances[_addresses[i]].add(_values[i]);\n', '            \n', '            emit Transfer(msg.sender, _addresses[i], _values[i]);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) public returns (bool)\n', '    {\n', '        require(balances[msg.sender] >= _value);\n', '        require(isTransferLock(msg.sender, _spender) == false);\n', '        \n', '        approvals[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint) \n', '    {\n', '        return approvals[_owner][_spender];\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) \n', '    {\n', '        require(balances[_from] >= _value);\n', '        require(approvals[_from][msg.sender] >= _value);\n', '        require(isTransferLock(msg.sender, _to) == false);\n', '        \n', '        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to]  = balances[_to].add(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function withdrawRewardPool(address _who, uint _value) onlyOwner public\n', '    {\n', '        uint coins = _value * E18;\n', '        \n', '        require(rewardPoolSupply >= coinIssuedRewardPool.add(coins));\n', '\n', '        totalSupply = totalSupply.add(coins);\n', '        coinIssuedRewardPool = coinIssuedRewardPool.add(coins);\n', '        coinIssuedTotal = coinIssuedTotal.add(coins);\n', '\n', '        balances[_who] = balances[_who].add(coins);\n', '        personalLocks[_who] = true;\n', '\n', '        emit Transfer(0x0, msg.sender, coins);\n', '        emit WithdrawRewardPool(_who, coins);\n', '    }\n', '    \n', '    function withdrawFoundation(address _who, uint _value) onlyOwner public\n', '    {\n', '        uint coins = _value * E18;\n', '        \n', '        require(foundationSupply >= coinIssuedFoundation.add(coins));\n', '\n', '        totalSupply = totalSupply.add(coins);\n', '        coinIssuedFoundation = coinIssuedFoundation.add(coins);\n', '        coinIssuedTotal = coinIssuedTotal.add(coins);\n', '\n', '        balances[_who] = balances[_who].add(coins);\n', '        personalLocks[_who] = true;\n', '\n', '        emit Transfer(0x0, msg.sender, coins);\n', '        emit WithdrawFoundation(_who, coins);\n', '    }\n', '    \n', '    function withdrawGemmyMusic(address _who, uint _value) onlyOwner public\n', '    {\n', '        uint coins = _value * E18;\n', '        \n', '        require(gemmyMusicSupply >= coinIssuedGemmyMusic.add(coins));\n', '\n', '        totalSupply = totalSupply.add(coins);\n', '        coinIssuedGemmyMusic = coinIssuedGemmyMusic.add(coins);\n', '        coinIssuedTotal = coinIssuedTotal.add(coins);\n', '\n', '        balances[_who] = balances[_who].add(coins);\n', '        gemmyMusicLocks[_who] = true;\n', '\n', '        emit Transfer(0x0, msg.sender, coins);\n', '        emit WithdrawGemmyMusic(_who, coins);\n', '    }\n', '    \n', '    function withdrawAdvisor(address _who, uint _value) onlyOwner public\n', '    {\n', '        uint coins = _value * E18;\n', '        \n', '        require(advisorSupply >= coinIssuedAdvisor.add(coins));\n', '\n', '        totalSupply = totalSupply.add(coins);\n', '        coinIssuedAdvisor = coinIssuedAdvisor.add(coins);\n', '        coinIssuedTotal = coinIssuedTotal.add(coins);\n', '\n', '        balances[_who] = balances[_who].add(coins * 20 / 100);\n', '        advisorFirstLockBalances[_who] = advisorFirstLockBalances[_who].add(coins * 40 / 100);\n', '        advisorSecondLockBalances[_who] = advisorSecondLockBalances[_who].add(coins * 40 / 100);\n', '        personalLocks[_who] = true;\n', '\n', '        emit Transfer(0x0, msg.sender, coins);\n', '        emit WithdrawAdvisor(_who, coins);\n', '    }\n', '    \n', '    function withdrawMkt(address _who, uint _value) onlyOwner public\n', '    {\n', '        uint coins = _value * E18;\n', '        \n', '        require(mktSupply >= coinIssuedMkt.add(coins));\n', '\n', '        totalSupply = totalSupply.add(coins);\n', '        coinIssuedMkt = coinIssuedMkt.add(coins);\n', '        coinIssuedTotal = coinIssuedTotal.add(coins);\n', '\n', '        balances[_who] = balances[_who].add(coins);\n', '        personalLocks[_who] = true;\n', '\n', '        emit Transfer(0x0, msg.sender, coins);\n', '        emit WithdrawMkt(_who, coins);\n', '    }\n', '    \n', '    function burnCoin() onlyOwner public\n', '    {\n', '        require(atNow() > secondCrowdSaleEndDate);\n', '        require(saleSupply - coinIssuedSale > 0);\n', '\n', '        uint coins = saleSupply - coinIssuedSale;\n', '        \n', '        balances[0x0] = balances[0x0].add(coins);\n', '        coinIssuedSale = coinIssuedSale.add(coins);\n', '        coinIssuedBurn = coinIssuedBurn.add(coins);\n', '\n', '        emit BurnCoin(coins);\n', '    }\n', '    \n', '    function changeWallet(address _who) onlyOwner public\n', '    {\n', '        require(_who != address(0x0));\n', '        require(_who != wallet);\n', '        \n', '        wallet = _who;\n', '        \n', '        emit ChangeWallet(_who);\n', '    }\n', '}']