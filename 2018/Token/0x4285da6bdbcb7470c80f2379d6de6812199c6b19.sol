['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(_to!=0x0);\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', 'contract NT is StandardToken { \n', '\n', '    string public name;                  \n', '    uint8 public decimals;              \n', '    string public symbol;                 \n', '    string public version = &#39;1.0&#39;; \n', '    uint256 public Rate;     \n', '    uint256 public totalEthInWei;      \n', '    address public fundsWallet; \n', '\n', '    function NT(\n', '        ) {\n', '        totalSupply = 100000000000;                   \n', '        fundsWallet = 0x3D2546E4B2e28CF9450C0CFb213377A50D8f5c02;   \n', '        balances[fundsWallet] = 100000000000;\n', '        name = "NewToken";                                        \n', '        decimals = 2;                                  \n', '        symbol = "NT";                                            \n', '        Rate = 1;                                      \n', '    }\n', '    \n', '    function setCurrentRate(uint256 _rate) public {\n', '        if(msg.sender != fundsWallet) { throw; }\n', '        Rate = _rate;\n', '    }    \n', '\n', '    function setCurrentVersion(string _ver) public {\n', '        if(msg.sender != fundsWallet) { throw; }\n', '        version = _ver;\n', '    }  \n', '\n', '    function() payable{\n', ' \n', '        totalEthInWei = totalEthInWei + msg.value;\n', '  \n', '        uint256 amount = msg.value * Rate;\n', '\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '\n', '        Transfer(fundsWallet, msg.sender, amount); \n', '\n', ' \n', '        fundsWallet.transfer(msg.value);                               \n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(_to!=0x0);\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', 'contract NT is StandardToken { \n', '\n', '    string public name;                  \n', '    uint8 public decimals;              \n', '    string public symbol;                 \n', "    string public version = '1.0'; \n", '    uint256 public Rate;     \n', '    uint256 public totalEthInWei;      \n', '    address public fundsWallet; \n', '\n', '    function NT(\n', '        ) {\n', '        totalSupply = 100000000000;                   \n', '        fundsWallet = 0x3D2546E4B2e28CF9450C0CFb213377A50D8f5c02;   \n', '        balances[fundsWallet] = 100000000000;\n', '        name = "NewToken";                                        \n', '        decimals = 2;                                  \n', '        symbol = "NT";                                            \n', '        Rate = 1;                                      \n', '    }\n', '    \n', '    function setCurrentRate(uint256 _rate) public {\n', '        if(msg.sender != fundsWallet) { throw; }\n', '        Rate = _rate;\n', '    }    \n', '\n', '    function setCurrentVersion(string _ver) public {\n', '        if(msg.sender != fundsWallet) { throw; }\n', '        version = _ver;\n', '    }  \n', '\n', '    function() payable{\n', ' \n', '        totalEthInWei = totalEthInWei + msg.value;\n', '  \n', '        uint256 amount = msg.value * Rate;\n', '\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '\n', '        Transfer(fundsWallet, msg.sender, amount); \n', '\n', ' \n', '        fundsWallet.transfer(msg.value);                               \n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
