['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/IEscrow.sol\n', '\n', '/**\n', ' * @title Escrow interface\n', ' *\n', ' * @dev https://send.sd/token\n', ' */\n', 'interface IEscrow {\n', '\n', '  event Created(\n', '    address indexed sender,\n', '    address indexed recipient,\n', '    address indexed arbitrator,\n', '    uint256 transactionId\n', '  );\n', '  event Released(address indexed arbitrator, address indexed sentTo, uint256 transactionId);\n', '  event Dispute(address indexed arbitrator, uint256 transactionId);\n', '  event Paid(address indexed arbitrator, uint256 transactionId);\n', '\n', '  function create(\n', '      address _sender,\n', '      address _recipient,\n', '      address _arbitrator,\n', '      uint256 _transactionId,\n', '      uint256 _tokens,\n', '      uint256 _fee,\n', '      uint256 _expiration\n', '  ) public;\n', '\n', '  function fund(\n', '      address _sender,\n', '      address _arbitrator,\n', '      uint256 _transactionId,\n', '      uint256 _tokens,\n', '      uint256 _fee\n', '  ) public;\n', '\n', '}\n', '\n', '// File: contracts/ISendToken.sol\n', '\n', '/**\n', ' * @title ISendToken - Send Consensus Network Token interface\n', ' * @dev token interface built on top of ERC20 standard interface\n', ' * @dev see https://send.sd/token\n', ' */\n', 'interface ISendToken {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '\n', '  function isVerified(address _address) public constant returns(bool);\n', '\n', '  function verify(address _address) public;\n', '\n', '  function unverify(address _address) public;\n', '\n', '  function verifiedTransferFrom(\n', '      address from,\n', '      address to,\n', '      uint256 value,\n', '      uint256 referenceId,\n', '      uint256 exchangeRate,\n', '      uint256 fee\n', '  ) public;\n', '\n', '  function issueExchangeRate(\n', '      address _from,\n', '      address _to,\n', '      address _verifiedAddress,\n', '      uint256 _value,\n', '      uint256 _referenceId,\n', '      uint256 _exchangeRate\n', '  ) public;\n', '\n', '  event VerifiedTransfer(\n', '      address indexed from,\n', '      address indexed to,\n', '      address indexed verifiedAddress,\n', '      uint256 value,\n', '      uint256 referenceId,\n', '      uint256 exchangeRate\n', '  );\n', '}\n', '\n', '// File: contracts/ISnapshotToken.sol\n', '\n', '/**\n', ' * @title Snapshot Token\n', ' *\n', ' * @dev Snapshot Token interface\n', ' * @dev https://send.sd/token\n', ' */\n', 'interface ISnapshotToken {\n', '  function requestSnapshots(uint256 _blockNumber) public;\n', '  function takeSnapshot(address _owner) public returns(uint256);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SnapshotToken.sol\n', '\n', '/**\n', ' * @title Snapshot Token\n', ' *\n', ' * @dev Snapshot Token implementtion\n', ' * @dev https://send.sd/token\n', ' */\n', 'contract SnapshotToken is ISnapshotToken, StandardToken, Ownable {\n', '  uint256 public snapshotBlock;\n', '\n', '  mapping (address => Snapshot) internal snapshots;\n', '\n', '  struct Snapshot {\n', '    uint256 block;\n', '    uint256 balance;\n', '  }\n', '\n', '  address public polls;\n', '\n', '  modifier isPolls() {\n', '    require(msg.sender == address(polls));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove Verified status of a given address\n', '   * @notice Only contract owner\n', '   * @param _address Address to unverify\n', '   */\n', '  function setPolls(address _address) public onlyOwner {\n', '    polls = _address;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend OpenZeppelin&#39;s BasicToken transfer function to store snapshot\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    takeSnapshot(msg.sender);\n', '    takeSnapshot(_to);\n', '    return BasicToken.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Extend OpenZeppelin&#39;s StandardToken transferFrom function to store snapshot\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    takeSnapshot(_from);\n', '    takeSnapshot(_to);\n', '    return StandardToken.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Take snapshot\n', '   * @param _owner address The address to take snapshot from\n', '   */\n', '  function takeSnapshot(address _owner) public returns(uint256) {\n', '    if (snapshots[_owner].block < snapshotBlock) {\n', '      snapshots[_owner].block = snapshotBlock;\n', '      snapshots[_owner].balance = balanceOf(_owner);\n', '    }\n', '    return snapshots[_owner].balance;\n', '  }\n', '\n', '  /**\n', '   * @dev Set snacpshot block\n', '   * @param _blockNumber uint256 The new blocknumber for snapshots\n', '   */\n', '  function requestSnapshots(uint256 _blockNumber) public isPolls {\n', '    snapshotBlock = _blockNumber;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/SendToken.sol\n', '\n', '/**\n', ' * @title Send token\n', ' *\n', ' * @dev Implementation of Send Consensus network Standard\n', ' * @dev https://send.sd/token\n', ' */\n', 'contract SendToken is ISendToken, SnapshotToken, BurnableToken {\n', '  IEscrow public escrow;\n', '\n', '  mapping (address => bool) internal verifiedAddresses;\n', '\n', '  modifier verifiedResticted() {\n', '    require(verifiedAddresses[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  modifier escrowResticted() {\n', '    require(msg.sender == address(escrow));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Check if an address is whitelisted by SEND\n', '   * @param _address Address to check\n', '   * @return bool\n', '   */\n', '  function isVerified(address _address) public view returns(bool) {\n', '    return verifiedAddresses[_address];\n', '  }\n', '\n', '  /**\n', '   * @dev Verify an addres\n', '   * @notice Only contract owner\n', '   * @param _address Address to verify\n', '   */\n', '  function verify(address _address) public onlyOwner {\n', '    verifiedAddresses[_address] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove Verified status of a given address\n', '   * @notice Only contract owner\n', '   * @param _address Address to unverify\n', '   */\n', '  function unverify(address _address) public onlyOwner {\n', '    verifiedAddresses[_address] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove Verified status of a given address\n', '   * @notice Only contract owner\n', '   * @param _address Address to unverify\n', '   */\n', '  function setEscrow(address _address) public onlyOwner {\n', '    escrow = IEscrow(_address);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer from one address to another issuing ane xchange rate\n', '   * @notice Only verified addresses\n', '   * @notice Exchange rate has 18 decimal places\n', '   * @notice Value + fee <= allowance\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   * @param _referenceId internal app/user ID\n', '   * @param _exchangeRate Exchange rate to sign transaction\n', '   * @param _fee fee tot ake from sender\n', '   */\n', '  function verifiedTransferFrom(\n', '      address _from,\n', '      address _to,\n', '      uint256 _value,\n', '      uint256 _referenceId,\n', '      uint256 _exchangeRate,\n', '      uint256 _fee\n', '  ) public verifiedResticted {\n', '    require(_exchangeRate > 0);\n', '\n', '    transferFrom(_from, _to, _value);\n', '    transferFrom(_from, msg.sender, _fee);\n', '\n', '    VerifiedTransfer(\n', '      _from,\n', '      _to,\n', '      msg.sender,\n', '      _value,\n', '      _referenceId,\n', '      _exchangeRate\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev create an escrow transfer being the arbitrator\n', '   * @param _sender Address to send tokens\n', '   * @param _recipient Address to receive tokens\n', '   * @param _transactionId internal ID for arbitrator\n', '   * @param _tokens Amount of tokens to lock\n', '   * @param _fee A fee to be paid to arbitrator (may be 0)\n', '   * @param _expiration After this timestamp, user can claim tokens back.\n', '   */\n', '  function createEscrow(\n', '      address _sender,\n', '      address _recipient,\n', '      uint256 _transactionId,\n', '      uint256 _tokens,\n', '      uint256 _fee,\n', '      uint256 _expiration\n', '  ) public {\n', '    escrow.create(\n', '      _sender,\n', '      _recipient,\n', '      msg.sender,\n', '      _transactionId,\n', '      _tokens,\n', '      _fee,\n', '      _expiration\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev fund escrow\n', '   * @dev specified amount will be locked on escrow contract\n', '   * @param _arbitrator Address of escrow arbitrator\n', '   * @param _transactionId internal ID for arbitrator\n', '   * @param _tokens Amount of tokens to lock\n', '   * @param _fee A fee to be paid to arbitrator (may be 0)\n', '   */\n', '  function fundEscrow(\n', '      address _arbitrator,\n', '      uint256 _transactionId,\n', '      uint256 _tokens,\n', '      uint256 _fee\n', '  ) public {\n', '    uint256 total = _tokens.add(_fee);\n', '    transfer(escrow, total);\n', '\n', '    escrow.fund(\n', '      msg.sender,\n', '      _arbitrator,\n', '      _transactionId,\n', '      _tokens,\n', '      _fee\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Issue exchange rates from escrow contract\n', '   * @param _from Address to send tokens\n', '   * @param _to Address to receive tokens\n', '   * @param _verifiedAddress Address issuing the exchange rate\n', '   * @param _value amount\n', '   * @param _transactionId internal ID for issuer&#39;s reference\n', '   * @param _exchangeRate exchange rate\n', '   */\n', '  function issueExchangeRate(\n', '      address _from,\n', '      address _to,\n', '      address _verifiedAddress,\n', '      uint256 _value,\n', '      uint256 _transactionId,\n', '      uint256 _exchangeRate\n', '  ) public escrowResticted {\n', '    bool noRate = (_exchangeRate == 0);\n', '    if (isVerified(_verifiedAddress)) {\n', '      require(!noRate);\n', '      VerifiedTransfer(\n', '        _from,\n', '        _to,\n', '        _verifiedAddress,\n', '        _value,\n', '        _transactionId,\n', '        _exchangeRate\n', '      );\n', '    } else {\n', '      require(noRate);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/SDT.sol\n', '\n', '/**\n', ' * @title To instance SendToken for SEND foundation crowdasale\n', ' * @dev see https://send.sd/token\n', ' */\n', 'contract SDT is SendToken {\n', '  string constant public name = "SEND Token";\n', '  string constant public symbol = "SDT";\n', '  uint256 constant public decimals = 18;\n', '\n', '  modifier validAddress(address _address) {\n', '    require(_address != address(0x0));\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Constructor\n', '  * @param _sale Address that will hold all vesting allocated tokens\n', '  * @notice contract owner will have special powers in the contract\n', '  * @notice _sale should hold all tokens in production as all pool will be vested\n', '  * @return A uint256 representing the locked amount of tokens\n', '  */\n', '  function SDT(address _sale) public validAddress(_sale) {\n', '    verifiedAddresses[owner] = true;\n', '    totalSupply = 700000000 * 10 ** decimals;\n', '    balances[_sale] = totalSupply;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/IEscrow.sol\n', '\n', '/**\n', ' * @title Escrow interface\n', ' *\n', ' * @dev https://send.sd/token\n', ' */\n', 'interface IEscrow {\n', '\n', '  event Created(\n', '    address indexed sender,\n', '    address indexed recipient,\n', '    address indexed arbitrator,\n', '    uint256 transactionId\n', '  );\n', '  event Released(address indexed arbitrator, address indexed sentTo, uint256 transactionId);\n', '  event Dispute(address indexed arbitrator, uint256 transactionId);\n', '  event Paid(address indexed arbitrator, uint256 transactionId);\n', '\n', '  function create(\n', '      address _sender,\n', '      address _recipient,\n', '      address _arbitrator,\n', '      uint256 _transactionId,\n', '      uint256 _tokens,\n', '      uint256 _fee,\n', '      uint256 _expiration\n', '  ) public;\n', '\n', '  function fund(\n', '      address _sender,\n', '      address _arbitrator,\n', '      uint256 _transactionId,\n', '      uint256 _tokens,\n', '      uint256 _fee\n', '  ) public;\n', '\n', '}\n', '\n', '// File: contracts/ISendToken.sol\n', '\n', '/**\n', ' * @title ISendToken - Send Consensus Network Token interface\n', ' * @dev token interface built on top of ERC20 standard interface\n', ' * @dev see https://send.sd/token\n', ' */\n', 'interface ISendToken {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '\n', '  function isVerified(address _address) public constant returns(bool);\n', '\n', '  function verify(address _address) public;\n', '\n', '  function unverify(address _address) public;\n', '\n', '  function verifiedTransferFrom(\n', '      address from,\n', '      address to,\n', '      uint256 value,\n', '      uint256 referenceId,\n', '      uint256 exchangeRate,\n', '      uint256 fee\n', '  ) public;\n', '\n', '  function issueExchangeRate(\n', '      address _from,\n', '      address _to,\n', '      address _verifiedAddress,\n', '      uint256 _value,\n', '      uint256 _referenceId,\n', '      uint256 _exchangeRate\n', '  ) public;\n', '\n', '  event VerifiedTransfer(\n', '      address indexed from,\n', '      address indexed to,\n', '      address indexed verifiedAddress,\n', '      uint256 value,\n', '      uint256 referenceId,\n', '      uint256 exchangeRate\n', '  );\n', '}\n', '\n', '// File: contracts/ISnapshotToken.sol\n', '\n', '/**\n', ' * @title Snapshot Token\n', ' *\n', ' * @dev Snapshot Token interface\n', ' * @dev https://send.sd/token\n', ' */\n', 'interface ISnapshotToken {\n', '  function requestSnapshots(uint256 _blockNumber) public;\n', '  function takeSnapshot(address _owner) public returns(uint256);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SnapshotToken.sol\n', '\n', '/**\n', ' * @title Snapshot Token\n', ' *\n', ' * @dev Snapshot Token implementtion\n', ' * @dev https://send.sd/token\n', ' */\n', 'contract SnapshotToken is ISnapshotToken, StandardToken, Ownable {\n', '  uint256 public snapshotBlock;\n', '\n', '  mapping (address => Snapshot) internal snapshots;\n', '\n', '  struct Snapshot {\n', '    uint256 block;\n', '    uint256 balance;\n', '  }\n', '\n', '  address public polls;\n', '\n', '  modifier isPolls() {\n', '    require(msg.sender == address(polls));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove Verified status of a given address\n', '   * @notice Only contract owner\n', '   * @param _address Address to unverify\n', '   */\n', '  function setPolls(address _address) public onlyOwner {\n', '    polls = _address;\n', '  }\n', '\n', '  /**\n', "   * @dev Extend OpenZeppelin's BasicToken transfer function to store snapshot\n", '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    takeSnapshot(msg.sender);\n', '    takeSnapshot(_to);\n', '    return BasicToken.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', "   * @dev Extend OpenZeppelin's StandardToken transferFrom function to store snapshot\n", '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    takeSnapshot(_from);\n', '    takeSnapshot(_to);\n', '    return StandardToken.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Take snapshot\n', '   * @param _owner address The address to take snapshot from\n', '   */\n', '  function takeSnapshot(address _owner) public returns(uint256) {\n', '    if (snapshots[_owner].block < snapshotBlock) {\n', '      snapshots[_owner].block = snapshotBlock;\n', '      snapshots[_owner].balance = balanceOf(_owner);\n', '    }\n', '    return snapshots[_owner].balance;\n', '  }\n', '\n', '  /**\n', '   * @dev Set snacpshot block\n', '   * @param _blockNumber uint256 The new blocknumber for snapshots\n', '   */\n', '  function requestSnapshots(uint256 _blockNumber) public isPolls {\n', '    snapshotBlock = _blockNumber;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/SendToken.sol\n', '\n', '/**\n', ' * @title Send token\n', ' *\n', ' * @dev Implementation of Send Consensus network Standard\n', ' * @dev https://send.sd/token\n', ' */\n', 'contract SendToken is ISendToken, SnapshotToken, BurnableToken {\n', '  IEscrow public escrow;\n', '\n', '  mapping (address => bool) internal verifiedAddresses;\n', '\n', '  modifier verifiedResticted() {\n', '    require(verifiedAddresses[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  modifier escrowResticted() {\n', '    require(msg.sender == address(escrow));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Check if an address is whitelisted by SEND\n', '   * @param _address Address to check\n', '   * @return bool\n', '   */\n', '  function isVerified(address _address) public view returns(bool) {\n', '    return verifiedAddresses[_address];\n', '  }\n', '\n', '  /**\n', '   * @dev Verify an addres\n', '   * @notice Only contract owner\n', '   * @param _address Address to verify\n', '   */\n', '  function verify(address _address) public onlyOwner {\n', '    verifiedAddresses[_address] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove Verified status of a given address\n', '   * @notice Only contract owner\n', '   * @param _address Address to unverify\n', '   */\n', '  function unverify(address _address) public onlyOwner {\n', '    verifiedAddresses[_address] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove Verified status of a given address\n', '   * @notice Only contract owner\n', '   * @param _address Address to unverify\n', '   */\n', '  function setEscrow(address _address) public onlyOwner {\n', '    escrow = IEscrow(_address);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer from one address to another issuing ane xchange rate\n', '   * @notice Only verified addresses\n', '   * @notice Exchange rate has 18 decimal places\n', '   * @notice Value + fee <= allowance\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   * @param _referenceId internal app/user ID\n', '   * @param _exchangeRate Exchange rate to sign transaction\n', '   * @param _fee fee tot ake from sender\n', '   */\n', '  function verifiedTransferFrom(\n', '      address _from,\n', '      address _to,\n', '      uint256 _value,\n', '      uint256 _referenceId,\n', '      uint256 _exchangeRate,\n', '      uint256 _fee\n', '  ) public verifiedResticted {\n', '    require(_exchangeRate > 0);\n', '\n', '    transferFrom(_from, _to, _value);\n', '    transferFrom(_from, msg.sender, _fee);\n', '\n', '    VerifiedTransfer(\n', '      _from,\n', '      _to,\n', '      msg.sender,\n', '      _value,\n', '      _referenceId,\n', '      _exchangeRate\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev create an escrow transfer being the arbitrator\n', '   * @param _sender Address to send tokens\n', '   * @param _recipient Address to receive tokens\n', '   * @param _transactionId internal ID for arbitrator\n', '   * @param _tokens Amount of tokens to lock\n', '   * @param _fee A fee to be paid to arbitrator (may be 0)\n', '   * @param _expiration After this timestamp, user can claim tokens back.\n', '   */\n', '  function createEscrow(\n', '      address _sender,\n', '      address _recipient,\n', '      uint256 _transactionId,\n', '      uint256 _tokens,\n', '      uint256 _fee,\n', '      uint256 _expiration\n', '  ) public {\n', '    escrow.create(\n', '      _sender,\n', '      _recipient,\n', '      msg.sender,\n', '      _transactionId,\n', '      _tokens,\n', '      _fee,\n', '      _expiration\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev fund escrow\n', '   * @dev specified amount will be locked on escrow contract\n', '   * @param _arbitrator Address of escrow arbitrator\n', '   * @param _transactionId internal ID for arbitrator\n', '   * @param _tokens Amount of tokens to lock\n', '   * @param _fee A fee to be paid to arbitrator (may be 0)\n', '   */\n', '  function fundEscrow(\n', '      address _arbitrator,\n', '      uint256 _transactionId,\n', '      uint256 _tokens,\n', '      uint256 _fee\n', '  ) public {\n', '    uint256 total = _tokens.add(_fee);\n', '    transfer(escrow, total);\n', '\n', '    escrow.fund(\n', '      msg.sender,\n', '      _arbitrator,\n', '      _transactionId,\n', '      _tokens,\n', '      _fee\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Issue exchange rates from escrow contract\n', '   * @param _from Address to send tokens\n', '   * @param _to Address to receive tokens\n', '   * @param _verifiedAddress Address issuing the exchange rate\n', '   * @param _value amount\n', "   * @param _transactionId internal ID for issuer's reference\n", '   * @param _exchangeRate exchange rate\n', '   */\n', '  function issueExchangeRate(\n', '      address _from,\n', '      address _to,\n', '      address _verifiedAddress,\n', '      uint256 _value,\n', '      uint256 _transactionId,\n', '      uint256 _exchangeRate\n', '  ) public escrowResticted {\n', '    bool noRate = (_exchangeRate == 0);\n', '    if (isVerified(_verifiedAddress)) {\n', '      require(!noRate);\n', '      VerifiedTransfer(\n', '        _from,\n', '        _to,\n', '        _verifiedAddress,\n', '        _value,\n', '        _transactionId,\n', '        _exchangeRate\n', '      );\n', '    } else {\n', '      require(noRate);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/SDT.sol\n', '\n', '/**\n', ' * @title To instance SendToken for SEND foundation crowdasale\n', ' * @dev see https://send.sd/token\n', ' */\n', 'contract SDT is SendToken {\n', '  string constant public name = "SEND Token";\n', '  string constant public symbol = "SDT";\n', '  uint256 constant public decimals = 18;\n', '\n', '  modifier validAddress(address _address) {\n', '    require(_address != address(0x0));\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Constructor\n', '  * @param _sale Address that will hold all vesting allocated tokens\n', '  * @notice contract owner will have special powers in the contract\n', '  * @notice _sale should hold all tokens in production as all pool will be vested\n', '  * @return A uint256 representing the locked amount of tokens\n', '  */\n', '  function SDT(address _sale) public validAddress(_sale) {\n', '    verifiedAddresses[owner] = true;\n', '    totalSupply = 700000000 * 10 ** decimals;\n', '    balances[_sale] = totalSupply;\n', '  }\n', '}']
