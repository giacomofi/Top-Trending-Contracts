['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract OperatableBasic {\n', '    function setPrimaryOperator (address addr) public;\n', '    function setSecondaryOperator (address addr) public;\n', '    function isPrimaryOperator(address addr) public view returns (bool);\n', '    function isSecondaryOperator(address addr) public view returns (bool);\n', '}\n', '\n', 'contract Operatable is Ownable, OperatableBasic {\n', '    address public primaryOperator;\n', '    address public secondaryOperator;\n', '\n', '    modifier canOperate() {\n', '        require(msg.sender == primaryOperator || msg.sender == secondaryOperator || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Operatable() public {\n', '        primaryOperator = owner;\n', '        secondaryOperator = owner;\n', '    }\n', '\n', '    function setPrimaryOperator (address addr) public onlyOwner {\n', '        primaryOperator = addr;\n', '    }\n', '\n', '    function setSecondaryOperator (address addr) public onlyOwner {\n', '        secondaryOperator = addr;\n', '    }\n', '\n', '    function isPrimaryOperator(address addr) public view returns (bool) {\n', '        return (addr == primaryOperator);\n', '    }\n', '\n', '    function isSecondaryOperator(address addr) public view returns (bool) {\n', '        return (addr == secondaryOperator);\n', '    }\n', '}\n', '\n', '\n', 'contract XClaimable is Claimable {\n', '\n', '    function cancelOwnershipTransfer() onlyOwner public {\n', '        pendingOwner = owner;\n', '    }\n', '\n', '}\n', '\n', 'contract VUULRTokenConfig {\n', '    string public constant NAME = "Vuulr Token";\n', '    string public constant SYMBOL = "VUU";\n', '    uint8 public constant DECIMALS = 18;\n', '    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\n', '    uint public constant TOTALSUPPLY = 1000000000 * DECIMALSFACTOR;\n', '}\n', '\n', '\n', '\n', 'contract Salvageable is Operatable {\n', '    // Salvage other tokens that are accidentally sent into this token\n', '    function emergencyERC20Drain(ERC20 oddToken, uint amount) public canOperate {\n', '        if (address(oddToken) == address(0)) {\n', '            owner.transfer(amount);\n', '            return;\n', '        }\n', '        oddToken.transfer(owner, amount);\n', '    }\n', '}\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n', '}\n', '\n', '\n', 'contract VUULRToken is XClaimable, PausableToken, VUULRTokenConfig, Salvageable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = NAME;\n', '    string public symbol = SYMBOL;\n', '    uint8 public decimals = DECIMALS;\n', '    bool public mintingFinished = false;\n', '\n', '    event Mint(address indexed to, uint amount);\n', '    event MintFinished();\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) canOperate canMint public returns (bool) {\n', '        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract VUULRVesting is XClaimable, Salvageable {\n', '    using SafeMath for uint;\n', '\n', '    struct VestingSchedule {\n', '        uint lockPeriod;        // Amount of time in seconds between withdrawal periods. (EG. 6 months or 1 month)\n', '        uint numPeriods;        // number of periods until done.\n', '        uint tokens;       // Total amount of tokens to be vested.\n', '        uint amountWithdrawn;   // The amount that has been withdrawn.\n', '        uint startTime;\n', '    }\n', '\n', '    bool public started;\n', '\n', '\n', '    VUULRToken public vestingToken;\n', '    address public vestingWallet;\n', '    uint public vestingOwing;\n', '    uint public decimals;\n', '\n', '\n', '    // Vesting schedule attached to a specific address.\n', '    mapping (address => VestingSchedule) public vestingSchedules;\n', '\n', '    event VestingScheduleRegistered(address registeredAddress, address theWallet, uint lockPeriod,  uint tokens);\n', '    event Started(uint start);\n', '    event Withdraw(address registeredAddress, uint amountWithdrawn);\n', '    event VestingRevoked(address revokedAddress, uint amountWithdrawn, uint amountRefunded);\n', '    event VestingAddressChanged(address oldAddress, address newAddress);\n', '\n', '    function VUULRVesting(VUULRToken _vestingToken, address _vestingWallet ) public {\n', '        require(_vestingToken != address(0));\n', '        require(_vestingWallet != address(0));\n', '        vestingToken = _vestingToken;\n', '        vestingWallet = _vestingWallet;\n', '        decimals = uint(vestingToken.decimals());\n', '    }\n', '\n', '    // Start vesting, Vesting starts now !!!\n', '    // as long as TOKEN IS NOT PAUSED\n', '    function start() public onlyOwner {\n', '        require(!started);\n', '        require(!vestingToken.paused());\n', '        started = true;\n', '        emit Started(now);\n', '\n', '        // catch up on owing transfers\n', '        if (vestingOwing > 0) {\n', '            require(vestingToken.transferFrom(vestingWallet, address(this), vestingOwing));\n', '            vestingOwing = 0;\n', '        }\n', '    }\n', '\n', '    // Register a vesting schedule to transfer SENC from a group SENC wallet to an individual\n', '    // wallet. For instance, from pre-sale wallet to individual presale contributor address.\n', '    function registerVestingSchedule(address _newAddress, uint _numDays,\n', '        uint _numPeriods, uint _tokens, uint startFrom)\n', '        public\n', '        canOperate\n', '    {\n', '\n', '        uint _lockPeriod;\n', '\n', '        // Let&#39;s not allow the common mistake....\n', '        require(_newAddress != address(0));\n', '        // Check that beneficiary is not already registered\n', '        require(vestingSchedules[_newAddress].tokens == 0);\n', '\n', '        // Some lock period sanity checks.\n', '        require(_numDays > 0);\n', '        require(_numPeriods > 0);\n', '\n', '        _lockPeriod = _numDays * 1 days;\n', '\n', '        vestingSchedules[_newAddress] = VestingSchedule({\n', '            lockPeriod : _lockPeriod,\n', '            numPeriods : _numPeriods,\n', '            tokens : _tokens,\n', '            amountWithdrawn : 0,\n', '            startTime : startFrom\n', '        });\n', '        if (started) {\n', '            require(vestingToken.transferFrom(vestingWallet, address(this), _tokens));\n', '        } else {\n', '            vestingOwing = vestingOwing.add(_tokens);\n', '        }\n', '\n', '        emit VestingScheduleRegistered(_newAddress, vestingWallet, _lockPeriod, _tokens);\n', '    }\n', '\n', '    // whichPeriod returns the vesting period we are in\n', '    // 0 - before start or not eligible\n', '    // 1 - n : the timeperiod we are in\n', '    function whichPeriod(address whom, uint time) public view returns (uint period) {\n', '        VestingSchedule memory v = vestingSchedules[whom];\n', '        if (started && (v.tokens > 0) && (time >= v.startTime)) {\n', '            period = Math.min256(1 + (time - v.startTime) / v.lockPeriod,v.numPeriods);\n', '        }\n', '    }\n', '\n', '    // Returns the amount of tokens you can withdraw\n', '    function vested(address beneficiary) public view returns (uint _amountVested) {\n', '        VestingSchedule memory _vestingSchedule = vestingSchedules[beneficiary];\n', '        // If it&#39;s past the end time, the whole amount is available.\n', '        if ((_vestingSchedule.tokens == 0) || (_vestingSchedule.numPeriods == 0) || (now < _vestingSchedule.startTime)){\n', '            return 0;\n', '        }\n', '        uint _end = _vestingSchedule.lockPeriod.mul(_vestingSchedule.numPeriods);\n', '        if (now >= _vestingSchedule.startTime.add(_end)) {\n', '            return _vestingSchedule.tokens;\n', '        }\n', '        uint period = now.sub(_vestingSchedule.startTime).div(_vestingSchedule.lockPeriod)+1;\n', '        if (period >= _vestingSchedule.numPeriods) {\n', '            return _vestingSchedule.tokens;\n', '        }\n', '        uint _lockAmount = _vestingSchedule.tokens.div(_vestingSchedule.numPeriods);\n', '\n', '        uint vestedAmount = period.mul(_lockAmount);\n', '        return vestedAmount;\n', '    }\n', '\n', '\n', '    function withdrawable(address beneficiary) public view returns (uint amount) {\n', '        return vested(beneficiary).sub(vestingSchedules[beneficiary].amountWithdrawn);\n', '    }\n', '\n', '    function withdrawVestedTokens() public {\n', '        VestingSchedule storage vestingSchedule = vestingSchedules[msg.sender];\n', '        if (vestingSchedule.tokens == 0)\n', '            return;\n', '\n', '        uint _vested = vested(msg.sender);\n', '        uint _withdrawable = withdrawable(msg.sender);\n', '        vestingSchedule.amountWithdrawn = _vested;\n', '\n', '        if (_withdrawable > 0) {\n', '            require(vestingToken.transfer(msg.sender, _withdrawable));\n', '            emit Withdraw(msg.sender, _withdrawable);\n', '        }\n', '    }\n', '\n', '    function revokeSchedule(address _addressToRevoke, address _addressToRefund) public onlyOwner {\n', '        require(_addressToRefund != 0x0);\n', '\n', '        uint _withdrawable = withdrawable(_addressToRevoke);\n', '        uint _refundable = vestingSchedules[_addressToRevoke].tokens.sub(vested(_addressToRevoke));\n', '\n', '        delete vestingSchedules[_addressToRevoke];\n', '        if (_withdrawable > 0)\n', '            require(vestingToken.transfer(_addressToRevoke, _withdrawable));\n', '        if (_refundable > 0)\n', '            require(vestingToken.transfer(_addressToRefund, _refundable));\n', '        emit VestingRevoked(_addressToRevoke, _withdrawable, _refundable);\n', '    }\n', '\n', '    function changeVestingAddress(address _oldAddress, address _newAddress) public onlyOwner {\n', '        VestingSchedule memory vestingSchedule = vestingSchedules[_oldAddress];\n', '        require(vestingSchedule.tokens > 0);\n', '        require(_newAddress != 0x0);\n', '        require(vestingSchedules[_newAddress].tokens == 0x0);\n', '\n', '        VestingSchedule memory newVestingSchedule = vestingSchedule;\n', '        delete vestingSchedules[_oldAddress];\n', '        vestingSchedules[_newAddress] = newVestingSchedule;\n', '\n', '        emit VestingAddressChanged(_oldAddress, _newAddress);\n', '    }\n', '\n', '    function emergencyERC20Drain( ERC20 oddToken, uint amount ) public canOperate {\n', '        // Cannot withdraw VUULRToken if vesting started\n', '        require(!started || address(oddToken) != address(vestingToken));\n', '        super.emergencyERC20Drain(oddToken,amount);\n', '    }\n', '}']