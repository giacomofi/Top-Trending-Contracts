['pragma solidity ^0.4.18;\n', '\n', '/** ----------------------------------------------------------------------------------------------\n', ' * ENGINE_Token by ENGINE Limited.\n', ' * An ERC20 standard\n', ' *\n', ' * author: ENGINE Team\n', ' */\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error.\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract EEEToken is ERC20, Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  \n', '  // the controller of minting and destroying tokens\n', '  address public engDevAddress = 0x6d3E0B5abFc141cAa674a3c11e1580e6fff2a0B9;\n', '  // the controller of approving of minting and withdraw tokens\n', '  address public engCommunityAddress = 0x4885B422656D4B316C9C7Abc0c0Ab31A2677d9f0;\n', '\n', '  struct TokensWithLock {\n', '    uint256 value;\n', '    uint256 blockNumber;\n', '  }\n', '  // Balances for each account\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping(address => TokensWithLock) lockTokens;\n', '  \n', '  mapping (address => mapping (address => uint256)) public allowance;\n', '  \n', '  // Owner of account approves the transfer of an amount to another account\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '  // Token Cap\n', '  uint256 public totalSupplyCap = 1e28;\n', '  // Token Info\n', '  string public name = "EEE_Token";\n', '  string public symbol = "EEE";\n', '  uint8 public decimals = 18;\n', '\n', '  // True if transfers are allowed\n', '  bool public transferable = false;\n', '  // True if the transferable can be change\n', '  bool public canSetTransferable = true;\n', '\n', '\n', '  modifier only(address _address) {\n', '    require(msg.sender == _address);\n', '    _;\n', '  }\n', '\n', '  modifier nonZeroAddress(address _address) {\n', '    require(_address != address(0));\n', '    _;\n', '  }\n', '\n', '  modifier canTransfer() {\n', '    require(transferable == true);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '    if(msg.data.length < size + 4) {\n', '       revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '\n', '\n', '  event Burn(address indexed from, uint256 value);\n', '  event SetTransferable(address indexed _address, bool _transferable);\n', '  event SetENGDevAddress(address indexed _old, address indexed _new);\n', '  event SetENGCommunityAddress(address indexed _old, address indexed _new);\n', '  event DisableSetTransferable(address indexed _address, bool _canSetTransferable);\n', '\n', ' /**\n', '   * @dev transfer token for a specified address\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) canTransfer public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    require(_value >= 0);\n', '    require(balances[_to] + _value > balances[_to]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param _owner The address to query the the balance of.\n', '   * @return An uint256 representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value > 0);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) canTransfer public returns (bool) {\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue) canTransfer public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) canTransfer public returns (bool) {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Enables token holders to transfer their tokens freely if true\n', '   * @param _transferable True if transfers are allowed\n', '   */\n', '  function setTransferable(bool _transferable) only(engDevAddress) public {\n', '    require(canSetTransferable == true);\n', '    transferable = _transferable;\n', '    SetTransferable(msg.sender, _transferable);\n', '  }\n', '\n', '  /**\n', '   * @dev disable the canSetTransferable\n', '   */\n', '  function disableSetTransferable() only(engDevAddress) public {\n', '    transferable = true;\n', '    canSetTransferable = false;\n', '    DisableSetTransferable(msg.sender, false);\n', '  }\n', '\n', '  /**\n', '   * @dev Set the engAddress\n', '   * @param _engDevAddress The new engAddress\n', '   */\n', '  function setENGDevAddress(address _engDevAddress) only(engDevAddress) nonZeroAddress(_engDevAddress) public {\n', '    engDevAddress = _engDevAddress;\n', '    SetENGDevAddress(msg.sender, _engDevAddress);\n', '  }\n', '  /**\n', '   * @dev Set the engCommunityAddress\n', '   * @param _engCommunityAddress The new engCommunityAddress\n', '   */\n', '  function setENGCommunityAddress(address _engCommunityAddress) only(engCommunityAddress) nonZeroAddress(_engCommunityAddress) public {\n', '    engCommunityAddress = _engCommunityAddress;\n', '    SetENGCommunityAddress(msg.sender, _engCommunityAddress);\n', '  }\n', '\n', '  /**\n', '   * @dev Get the quantity of locked tokens\n', '   * @param _owner The address of locked tokens\n', '   * @return the quantity and the lock time of locked tokens\n', '   */\n', '   function getLockTokens(address _owner) nonZeroAddress(_owner) view public returns (uint256 value, uint256 blockNumber) {\n', '     return (lockTokens[_owner].value, lockTokens[_owner].blockNumber);\n', '   }\n', '\n', '  /**\n', '   * @dev Transfer tokens to multiple addresses\n', '   * @param _addresses The addresses that will receieve tokens\n', '   * @param _amounts The quantity of tokens that will be transferred\n', '   * @return True if the tokens are transferred correctly\n', '   */\n', '  function transferForMultiAddresses(address[] _addresses, uint256[] _amounts) canTransfer public returns (bool) {\n', '    for (uint256 i = 0; i < _addresses.length; i++) {\n', '      require(_addresses[i] != address(0));\n', '      require(_amounts[i] <= balances[msg.sender]);\n', '      require(_amounts[i] > 0);\n', '\n', '      // SafeMath.sub will throw if there is not enough balance.\n', '      balances[msg.sender] = balances[msg.sender].sub(_amounts[i]);\n', '      balances[_addresses[i]] = balances[_addresses[i]].add(_amounts[i]);\n', '      Transfer(msg.sender, _addresses[i], _amounts[i]);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n', '        balances[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balances[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']