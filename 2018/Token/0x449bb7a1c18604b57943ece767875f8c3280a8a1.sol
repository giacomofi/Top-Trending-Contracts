['pragma solidity 0.4.24;\n', '\n', 'contract ERC820Registry {\n', '    function getManager(address addr) public view returns(address);\n', '    function setManager(address addr, address newManager) public;\n', '    function getInterfaceImplementer(address addr, bytes32 iHash) public constant returns (address);\n', '    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public;\n', '}\n', '\n', 'contract ERC820Implementer {\n', '    ERC820Registry erc820Registry = ERC820Registry(0x991a1bcb077599290d7305493c9A630c20f8b798);\n', '\n', '    function setInterfaceImplementation(string ifaceLabel, address impl) internal {\n', '        bytes32 ifaceHash = keccak256(ifaceLabel);\n', '        erc820Registry.setInterfaceImplementer(this, ifaceHash, impl);\n', '    }\n', '\n', '    function interfaceAddr(address addr, string ifaceLabel) internal constant returns(address) {\n', '        bytes32 ifaceHash = keccak256(ifaceLabel);\n', '        return erc820Registry.getInterfaceImplementer(addr, ifaceHash);\n', '    }\n', '\n', '    function delegateManagement(address newManager) internal {\n', '        erc820Registry.setManager(this, newManager);\n', '    }\n', '}\n', '\n', 'interface ERC777TokensRecipient {\n', '    function tokensReceived(address operator, address from, address to, uint amount, bytes userData, bytes operatorData) external;\n', '}\n', '\n', 'contract BurnableToken {\n', '    event Burned(address indexed operator, address indexed from, uint256 amount, bytes userData, bytes operatorData);\n', '    function burn(uint256 _amount, bytes _userData) public {\n', '        emit Burned(msg.sender, msg.sender, _amount, _userData, "");\n', '    }\n', '}\n', '\n', '/**\n', ' * The Pay contract helps people to burn JaroCoin tokens (pay for Jaro services)\n', ' * without knowing how to touch `burn` function from JaroCoin Token smart contract.\n', ' */\n', 'contract Pay is ERC820Implementer, ERC777TokensRecipient {\n', '    BurnableToken public token;\n', '\n', '    event Payed(address operator, address from, address to, uint amount, bytes userData, bytes operatorData);\n', '\n', '    constructor(address _token) public {\n', '        setInterfaceImplementation("ERC777TokensRecipient", this);\n', '        token = BurnableToken(_token);\n', '    }\n', '\n', '    // ERC777 tokens receiver callback\n', '    function tokensReceived(address operator, address from, address to, uint amount, bytes userData, bytes operatorData) external {\n', '        token.burn(amount, userData);\n', '        emit Payed(operator, from, to, amount, userData, operatorData);\n', '    }\n', '}']