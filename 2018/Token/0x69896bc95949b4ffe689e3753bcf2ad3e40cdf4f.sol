['pragma solidity ^0.4.4;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeWallet Coin\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract SafeWalletCoin is ERC20Basic {\n', '  \n', '  using SafeMath for uint256;\n', '  \n', '  string public name = "SafeWallet Coin";\n', '  string public symbol = "SWC";\n', '  uint8 public decimals = 0;\n', '  uint256 public airDropNum = 1000;\n', '  uint256 public totalSupply = 100000000;\n', '  address public owner;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', ' \n', '  //event Burn(address indexed from, uint256 value);\n', ' \n', '  function SafeWalletCoin() public {\n', '\n', '    totalSupply_ = totalSupply;\n', '    owner = msg.sender;\n', '    balances[msg.sender] = totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(msg.sender == owner);\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\t\n', '    balances[msg.sender] = SafeMath.sub(balances[msg.sender],(_value));\n', '    balances[_to] = SafeMath.add(balances[_to],(_value));\n', '\n', '    return true;\n', '  }\n', '  \n', '  function multyTransfer(address[] arrAddr, uint256[] value) public{\n', '    require(msg.sender == owner);\n', '    require(arrAddr.length == value.length);\n', '    for(uint i = 0; i < arrAddr.length; i++) {\n', '      transfer(arrAddr[i],value[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  /**\n', '  * @dev recycle token for a specified address\n', '  * @param _user user address.\n', '  * @param _value The amount to be burnned.\n', '  */\n', '  function recycle(address _user,uint256 _value) returns (bool success) {\n', '\trequire(msg.sender == owner);\n', '    require(balances[_user] >= _value);\n', '\trequire(_value > 0);\n', '\tbalances[msg.sender] = SafeMath.add(balances[msg.sender],(_value));\n', '\tbalances[_user] = SafeMath.sub(balances[_user],(_value));           \n', '    //Burn(msg.sender, _value);\n', '    return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.4;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeWallet Coin\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract SafeWalletCoin is ERC20Basic {\n', '  \n', '  using SafeMath for uint256;\n', '  \n', '  string public name = "SafeWallet Coin";\n', '  string public symbol = "SWC";\n', '  uint8 public decimals = 0;\n', '  uint256 public airDropNum = 1000;\n', '  uint256 public totalSupply = 100000000;\n', '  address public owner;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', ' \n', '  //event Burn(address indexed from, uint256 value);\n', ' \n', '  function SafeWalletCoin() public {\n', '\n', '    totalSupply_ = totalSupply;\n', '    owner = msg.sender;\n', '    balances[msg.sender] = totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(msg.sender == owner);\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\t\n', '    balances[msg.sender] = SafeMath.sub(balances[msg.sender],(_value));\n', '    balances[_to] = SafeMath.add(balances[_to],(_value));\n', '\n', '    return true;\n', '  }\n', '  \n', '  function multyTransfer(address[] arrAddr, uint256[] value) public{\n', '    require(msg.sender == owner);\n', '    require(arrAddr.length == value.length);\n', '    for(uint i = 0; i < arrAddr.length; i++) {\n', '      transfer(arrAddr[i],value[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  /**\n', '  * @dev recycle token for a specified address\n', '  * @param _user user address.\n', '  * @param _value The amount to be burnned.\n', '  */\n', '  function recycle(address _user,uint256 _value) returns (bool success) {\n', '\trequire(msg.sender == owner);\n', '    require(balances[_user] >= _value);\n', '\trequire(_value > 0);\n', '\tbalances[msg.sender] = SafeMath.add(balances[msg.sender],(_value));\n', '\tbalances[_user] = SafeMath.sub(balances[_user],(_value));           \n', '    //Burn(msg.sender, _value);\n', '    return true;\n', '    }\n', '\n', '}']
