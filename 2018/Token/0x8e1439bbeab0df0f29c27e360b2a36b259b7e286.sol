['pragma solidity ^0.4.24;\n', '/**\n', ' * Implementation of the basic standard token\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract TokenERC20 {\n', '    // [ERC20] the name of the token - e.g. "Vehicle Owner’s Benefit"\n', '    string public name;\n', '    // [ERC20] the symbol of the token. E.g. "VOB".\n', '    string public symbol;\n', '    // [ERC20] the total token supply\n', '    uint256 public totalSupply;\n', '    // [ERC20] the number of decimals the token uses - e.g. 18\n', '    uint8 public decimals = 18;\n', '\n', '    // [ERC20] the account balance of another account with address _owner\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    // [ERC20]the amount which _spender is still allowed to withdraw from _owner.\n', '    mapping(address => mapping(address => uint256)) allowance;\n', '\n', '\n', '    mapping (address => uint256) public freezeOf;\n', '\n', '    // [ERC20] MUST trigger when tokens are transferred, including zero value transfers.\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // [ERC20] MUST trigger on any successful call to approve\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '\n', '    // This notifies clients about the amount frozen\n', '    event Freeze(address indexed from, uint256 value);\n', '\n', '    // This notifies clients about the amount unfrozen\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    constructor(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimalUnits) public {\n', '        totalSupply = _initialSupply;\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = _tokenName;\n', '        symbol = _tokenSymbol;\n', '        decimals = _decimalUnits;\n', '    }\n', '\n', '    /**\n', '     * Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '\n', '        // the _to account address is not invalid\n', '        require(_to != 0x0);\n', '\n', '        // the _from account balance has enough tokens to spend\n', '        require(balanceOf[_from] >= _value);\n', '\n', '        // the _to account balance must not be overflowing after transfer\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        // emit event\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * [ERC20]\n', '     * Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n', '     * The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\n', '        _transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * [ERC20]\n', '     * Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n', '     * The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.\n', '     * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.\n', '     * The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(allowance[_from][msg.sender] >= _value);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * [ERC20]\n', '     * Allows _spender to withdraw from your account multiple times, up to the _value amount.\n', '     * If this function is called again it overwrites the current allowance with _value.\n', '     *\n', '     * NOTE: To prevent attack vectors like the one described here and discussed here,\n', '     * clients SHOULD make sure to create user interfaces in such a way that they set the allowance first to 0 before setting it to another value for the same spender.\n', '     * THOUGH The contract itself shouldn&#39;t enforce it, to allow backwards compatibility with contracts deployed before\n', '     *\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function freeze(uint256 _value) returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);            // Check if the sender has enough\n', '        require(_value > 0);\n', '        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        freezeOf[msg.sender] += _value;\n', '        Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function unfreeze(uint256 _value) returns (bool success) {\n', '        require(freezeOf[msg.sender]>= _value);            // Check if the sender has enough\n', '        require(_value > 0);\n', '        freezeOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        balanceOf[msg.sender] += _value;\n', '        Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '/**\n', ' * Implementation of the basic standard token\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract TokenERC20 {\n', '    // [ERC20] the name of the token - e.g. "Vehicle Owner’s Benefit"\n', '    string public name;\n', '    // [ERC20] the symbol of the token. E.g. "VOB".\n', '    string public symbol;\n', '    // [ERC20] the total token supply\n', '    uint256 public totalSupply;\n', '    // [ERC20] the number of decimals the token uses - e.g. 18\n', '    uint8 public decimals = 18;\n', '\n', '    // [ERC20] the account balance of another account with address _owner\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    // [ERC20]the amount which _spender is still allowed to withdraw from _owner.\n', '    mapping(address => mapping(address => uint256)) allowance;\n', '\n', '\n', '    mapping (address => uint256) public freezeOf;\n', '\n', '    // [ERC20] MUST trigger when tokens are transferred, including zero value transfers.\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // [ERC20] MUST trigger on any successful call to approve\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '\n', '    // This notifies clients about the amount frozen\n', '    event Freeze(address indexed from, uint256 value);\n', '\n', '    // This notifies clients about the amount unfrozen\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    constructor(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimalUnits) public {\n', '        totalSupply = _initialSupply;\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = _tokenName;\n', '        symbol = _tokenSymbol;\n', '        decimals = _decimalUnits;\n', '    }\n', '\n', '    /**\n', '     * Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '\n', '        // the _to account address is not invalid\n', '        require(_to != 0x0);\n', '\n', '        // the _from account balance has enough tokens to spend\n', '        require(balanceOf[_from] >= _value);\n', '\n', '        // the _to account balance must not be overflowing after transfer\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        // emit event\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * [ERC20]\n', '     * Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n', '     * The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\n', '        _transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * [ERC20]\n', '     * Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n', '     * The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.\n', '     * This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies.\n', '     * The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(allowance[_from][msg.sender] >= _value);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * [ERC20]\n', '     * Allows _spender to withdraw from your account multiple times, up to the _value amount.\n', '     * If this function is called again it overwrites the current allowance with _value.\n', '     *\n', '     * NOTE: To prevent attack vectors like the one described here and discussed here,\n', '     * clients SHOULD make sure to create user interfaces in such a way that they set the allowance first to 0 before setting it to another value for the same spender.\n', "     * THOUGH The contract itself shouldn't enforce it, to allow backwards compatibility with contracts deployed before\n", '     *\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function freeze(uint256 _value) returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);            // Check if the sender has enough\n', '        require(_value > 0);\n', '        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        freezeOf[msg.sender] += _value;\n', '        Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function unfreeze(uint256 _value) returns (bool success) {\n', '        require(freezeOf[msg.sender]>= _value);            // Check if the sender has enough\n', '        require(_value > 0);\n', '        freezeOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        balanceOf[msg.sender] += _value;\n', '        Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '}']
