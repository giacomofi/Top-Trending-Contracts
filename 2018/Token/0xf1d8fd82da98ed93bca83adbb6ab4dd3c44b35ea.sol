['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address _newOwner) onlyOwner public {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'contract GOG is owned {\n', '    // Public variables of the GOG token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 6;\n', '    // 6 decimals for GOG\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balances;\n', '    // this creates an 2 x 2 array with allowances\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    // This creates an array with all frozenFunds\n', '    mapping (address => uint256) public frozenFunds;\n', '    // This generates a public event on the blockchain that will notify clients freezing of funds\n', '    event FrozenFunds(address target, uint256 funds);\n', '        // This generates a public event on the blockchain that will notify clients unfreezing of funds\n', '    event UnFrozenFunds(address target, uint256 funds);\n', '    // This generates a public event on the blockchain that will notify clients transfering of funds\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    // This notifies clients about approval of allowances\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function GOG() public {\n', "        totalSupply = 10000000000000000;               // GOG's total supply is 10 billion with 6 decimals\n", '        balances[msg.sender] = totalSupply;          // Give the creator all initial tokens\n', '        name = "GoGlobe Token";                       // Token name is GoGlobe Token\n', '        symbol = "GOG";                               // token symbol is GOG\n', '    }\n', '\n', '    /**\n', '     * Freeze funds on account\n', '     * @param _target The account will be freezed\n', '     * @param _funds The amount of funds will be freezed\n', '     */\n', '    function freezeAccount(address _target, uint256 _funds) public onlyOwner {\n', '        if (_funds == 0x0)\n', '            frozenFunds[_target] = balances[_target];\n', '        else\n', '            frozenFunds[_target] = _funds;\n', '        FrozenFunds(_target, _funds);\n', '    }\n', '\n', '    /**\n', '     * unfreeze funds on account\n', '     * @param _target The account will be unfreezed\n', '     * @param _funds The amount of funds will be unfreezed\n', '     */\n', '    function unFreezeAccount(address _target, uint256 _funds) public onlyOwner {\n', '        require(_funds > 0x0);\n', '        uint256 temp = frozenFunds[_target];\n', '        temp = temp < _funds ? 0x0 : temp - _funds;\n', '        frozenFunds[_target] = temp;\n', '        UnFrozenFunds(_target, _funds);\n', '    }\n', '\n', '    /**\n', '     * get the balance of account\n', '     * @param _owner The account address\n', '     */\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * get the frozen balance of account\n', '     * @param _owner The account address\n', '     */\n', '    function frozenFundsOf(address _owner) constant public returns (uint256) {\n', '        return frozenFunds[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require((_value == 0) || (allowance[msg.sender][_spender] == 0));\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowance to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '\n', '        // Check if the sender has enough\n', '        require(balances[_from] > frozenFunds[_from]);\n', '        require((balances[_from] - frozenFunds[_from]) >= _value);\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balances[_from] + balances[_to];\n', '        // Subtract from the sender\n', '        balances[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     * Send `_value` tokens to `_to` from your account\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     * Remove `_value` tokens from the system irreversibly\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool) {\n', '        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n', '        balances[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool) {\n', '        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balances[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']