['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 public totalSupply_;\n', '  \n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title CoinnupCrowdsaleToken\n', ' * @dev ERC20-compliant Token that can be minted.\n', ' */\n', '\n', 'contract CoinnupToken is StandardToken, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "Coinnup Coin"; // solium-disable-line uppercase\n', '  string public constant symbol = "CU"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '  /// @dev store how much in eth users invested to give them a refund in case refund happens\n', '  mapping ( address => uint256 ) public investments;\n', '  /// @dev to have how much one user bought tokens\n', '  mapping ( address => uint256 ) public tokensBought;\n', '\n', '  event investmentReceived(\n', '    address sender, \n', '    uint weis, \n', '    uint total\n', '  );\n', '\n', '  uint256 public maxSupply = 298500000000000000000000000;\n', '  uint256 public allowedToBeSold = 104475000000000000000000000;\n', '  address public founder = address( 0x3abb86C7C1a533Eb0464E9BD870FD1b501C7A8A8 );\n', '  uint256 public rate = 2800;\n', '  uint256 public bonus = 30;\n', '  uint256 public softCap = 1850000000000000000000;\n', '\n', '  uint256 public _sold; //eth\n', '\n', '  bool public isPaused;\n', '\n', '  struct Round {\n', '    uint256 openingTime;\n', '    uint256 closingTime;\n', '    uint256 allocatedCoins;\n', '    uint256 minPurchase;\n', '    uint256 maxPurchase;\n', '    uint256 soldCoins;\n', '  }\n', '\n', '  Round[] public rounds;\n', '\n', '  /** @dev Token cunstructor\n', '    */\n', '  constructor () public {\n', '    require(maxSupply > 0);\n', '    require(founder != address(0) && founder != address(this));\n', '    require(rate > 0);\n', '    require(bonus >= 0 && bonus <= 100); // in percentage\n', '    require(allowedToBeSold > 0 && allowedToBeSold < maxSupply);\n', '\n', '    require(softCap > 0);\n', '\n', '    for (uint8 i = 0; i < 5; i++) {\n', '      rounds.push( Round(0, 0, 0, 0, 0, 0) );\n', '    }\n', '    \n', '    // mint tokens which initially belongs to founder\n', '    uint256 _forFounder = maxSupply.sub(allowedToBeSold);\n', '    mint(founder, _forFounder);\n', '\n', '    // waiting for admin to set round dates\n', '    // and to unpause by admin\n', '    triggerICOState(true);\n', '  }\n', '\n', '  /// @dev in payable we shold keep only forwarding call\n', '  function () public onlyWhileOpen isNotPaused payable {\n', '    require(_buyTokens(msg.sender, msg.value));\n', '  }\n', '\n', '  /**\n', '   * @dev gets `_sender` and `_value` as input and sells tokens with bonus\n', '   * throws if not enough tokens after calculation\n', '   * @return isSold bool whether tokens bought\n', '   */\n', '  function _buyTokens(address _sender, uint256 _value) internal isNotPaused returns (bool) {\n', '    uint256 amount = _getTokenAmount(_value, bonus);\n', '    uint256 amount_without_bonus = _getTokenAmount(_value, 0);\n', '    uint8 _currentRound = _getCurrentRound(now);\n', '\n', '    require(rounds[_currentRound].allocatedCoins >= amount + rounds[_currentRound].soldCoins);\n', '    require(totalSupply_ + amount <= maxSupply); // if we have enough tokens to be minted\n', '\n', '    require(\n', '      rounds[_currentRound].minPurchase <= amount_without_bonus &&\n', '      rounds[_currentRound].maxPurchase >= amount_without_bonus\n', '    );\n', '\n', '    _sold = _sold.add(_value); // in wei\n', '    investments[_sender] = investments[_sender].add(_value); // in wei\n', '\n', '    // minting tokens for investores\n', '    // after we recorded how much he sent ether and other params\n', '    mint(_sender, amount);\n', '    rounds[_currentRound].soldCoins = rounds[_currentRound].soldCoins.add(amount);\n', '    tokensBought[_sender] = tokensBought[_sender].add(amount);\n', '\n', '    emit investmentReceived(\n', '      _sender, \n', '      _value, \n', '      amount_without_bonus\n', '    );\n', '\n', '    return true;\n', '  }\n', '\n', '  /// @dev system can mint tokens for users if they sent funds to BTC, LTC, etc wallets we allow\n', '  function mintForInvestor(address _to, uint256 _tokens) public onlyOwner onlyWhileOpen isNotPaused {\n', '    uint8 _round = _getCurrentRound(now);\n', '    require(_round >= 0 && _round <= 4);\n', '    require(_to != address(0)); // handling incorrect values from system in addresses\n', '    require(_tokens >= 0); // handing incorrect values from system in tokens calculation\n', '    require(rounds[_currentRound].allocatedCoins >= _tokens + rounds[_currentRound].soldCoins);\n', '    \n', '    uint8 _currentRound = _getCurrentRound(now);\n', '\n', '    // minting tokens for investors\n', '    mint(_to, _tokens); // _tokens in wei\n', '    rounds[_currentRound].soldCoins = rounds[_currentRound].soldCoins.add(_tokens);\n', '    tokensBought[_to] = tokensBought[_to].add(_tokens); // tokens in wei\n', '\n', '    _sold = _sold.add(_tokens); // in wei\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) internal {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(address(this), _to, _amount);\n', '  }\n', '\n', '    /**\n', '   * @dev The way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @param _bonus Bonus in percents\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount, uint _bonus) internal view returns (uint256) {\n', '    uint256 _coins_in_wei = rate.mul(_weiAmount);\n', '    uint256 _bonus_value_in_wei = 0;\n', '    uint256 bonusValue = 0;\n', '\n', '    _bonus_value_in_wei = (_coins_in_wei.mul(_bonus)).div(100);\n', '    bonusValue = _bonus_value_in_wei;\n', '\n', '    uint256 coins = _coins_in_wei;\n', '    uint256 total = coins.add(bonusValue);\n', '\n', '    return total;\n', '  }\n', '\n', '  /**\n', '   * @dev sets a rate for ico rounds\n', '   * @param _rate Rate for token\n', '   */\n', '  function setRate(uint256 _rate) public {\n', '    require(msg.sender == owner);\n', '    require(_rate > 0);\n', '\n', '    rate = _rate;\n', '  }\n', '\n', '  /// @dev get total coins sold per current round\n', '  function soldPerCurrentRound() public view returns (uint256) {\n', '    return rounds[_getCurrentRound(now)].soldCoins;\n', '  }\n', '\n', '  /// @dev pause and unpause an ICO, only sender allowed to\n', '  function triggerICOState(bool state) public onlyOwner {\n', '    isPaused = state;\n', '  }\n', '\n', '  /**\n', '   * @dev changes current bonus rate\n', '   * @param _bonus Bonus to change\n', '   * @return bool - Changed or not\n', '   */\n', '  function setBonus(uint256 _bonus) onlyOwner public {\n', '    require(_bonus >= 0 && _bonus <= 100); //%\n', '    bonus = _bonus;\n', '  }\n', '\n', '  // Don&#39;t like this code. Don&#39;t know yet how to make it nicer\n', '  function _getCurrentRound(uint256 _time) public view returns (uint8) {\n', '    for (uint8 i = 0; i < 5; i++) {\n', '      if (rounds[i].openingTime < _time && rounds[i].closingTime > _time) {\n', '        return i;\n', '      }\n', '    }\n', '\n', '    return 100;\n', '  }\n', '\n', '  function setRoundParams(\n', '    uint8 _round,\n', '    uint256 _openingTime,\n', '    uint256 _closingTime,\n', '    uint256 _maxPurchase,\n', '    uint256 _minPurchase,\n', '    uint256 _allocatedCoins\n', '  ) public onlyOwner {\n', '    require(msg.sender == owner);\n', '\n', '    rounds[_round].openingTime = _openingTime;\n', '    rounds[_round].closingTime = _closingTime;\n', '    rounds[_round].maxPurchase = _maxPurchase;\n', '    rounds[_round].minPurchase = _minPurchase;\n', '    rounds[_round].allocatedCoins = _allocatedCoins;\n', '  }\n', '\n', '  /**\n', '   * @dev withdrawing funds to founder&#39;s wallet\n', '   * @return bool Whether success or not\n', '   */\n', '  function withdraw() public {\n', '    // only founder is able to withdraw funds\n', '    require(msg.sender == founder);\n', '    founder.transfer(address(this).balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Claims for refund if ICO finished and soft cap not reached\n', '   */\n', '  function refund() public whenICOFinished capNotReached {\n', '    require(investments[msg.sender] > 0);\n', '    msg.sender.transfer(investments[msg.sender]);\n', '    investments[msg.sender] = 0;\n', '  }\n', '\n', '  modifier onlyWhileOpen {\n', '    uint8 _round = _getCurrentRound(now);\n', '    require(_round >= 0 && _round <= 4); // we hae 5 rounds, other values are invalid \n', '    _;\n', '  }\n', '\n', '  /// @dev when ico finishes we can perform other actions\n', '  modifier whenICOFinished {\n', '    uint8 _round = _getCurrentRound(now);\n', '    require(_round < 0 || _round > 4); // if we do not get current valid round number ICO finished\n', '    _;\n', '  }\n', '\n', '  /// @dev _sold in weis, softCap in weis\n', '  modifier capNotReached {\n', '    require(softCap > _sold);\n', '    _;\n', '  }\n', '\n', '  /// @dev if isPaused true then investments cannot be accepted\n', '  modifier isNotPaused {\n', '    require(!isPaused);\n', '    _;\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 public totalSupply_;\n', '  \n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title CoinnupCrowdsaleToken\n', ' * @dev ERC20-compliant Token that can be minted.\n', ' */\n', '\n', 'contract CoinnupToken is StandardToken, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "Coinnup Coin"; // solium-disable-line uppercase\n', '  string public constant symbol = "CU"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '  /// @dev store how much in eth users invested to give them a refund in case refund happens\n', '  mapping ( address => uint256 ) public investments;\n', '  /// @dev to have how much one user bought tokens\n', '  mapping ( address => uint256 ) public tokensBought;\n', '\n', '  event investmentReceived(\n', '    address sender, \n', '    uint weis, \n', '    uint total\n', '  );\n', '\n', '  uint256 public maxSupply = 298500000000000000000000000;\n', '  uint256 public allowedToBeSold = 104475000000000000000000000;\n', '  address public founder = address( 0x3abb86C7C1a533Eb0464E9BD870FD1b501C7A8A8 );\n', '  uint256 public rate = 2800;\n', '  uint256 public bonus = 30;\n', '  uint256 public softCap = 1850000000000000000000;\n', '\n', '  uint256 public _sold; //eth\n', '\n', '  bool public isPaused;\n', '\n', '  struct Round {\n', '    uint256 openingTime;\n', '    uint256 closingTime;\n', '    uint256 allocatedCoins;\n', '    uint256 minPurchase;\n', '    uint256 maxPurchase;\n', '    uint256 soldCoins;\n', '  }\n', '\n', '  Round[] public rounds;\n', '\n', '  /** @dev Token cunstructor\n', '    */\n', '  constructor () public {\n', '    require(maxSupply > 0);\n', '    require(founder != address(0) && founder != address(this));\n', '    require(rate > 0);\n', '    require(bonus >= 0 && bonus <= 100); // in percentage\n', '    require(allowedToBeSold > 0 && allowedToBeSold < maxSupply);\n', '\n', '    require(softCap > 0);\n', '\n', '    for (uint8 i = 0; i < 5; i++) {\n', '      rounds.push( Round(0, 0, 0, 0, 0, 0) );\n', '    }\n', '    \n', '    // mint tokens which initially belongs to founder\n', '    uint256 _forFounder = maxSupply.sub(allowedToBeSold);\n', '    mint(founder, _forFounder);\n', '\n', '    // waiting for admin to set round dates\n', '    // and to unpause by admin\n', '    triggerICOState(true);\n', '  }\n', '\n', '  /// @dev in payable we shold keep only forwarding call\n', '  function () public onlyWhileOpen isNotPaused payable {\n', '    require(_buyTokens(msg.sender, msg.value));\n', '  }\n', '\n', '  /**\n', '   * @dev gets `_sender` and `_value` as input and sells tokens with bonus\n', '   * throws if not enough tokens after calculation\n', '   * @return isSold bool whether tokens bought\n', '   */\n', '  function _buyTokens(address _sender, uint256 _value) internal isNotPaused returns (bool) {\n', '    uint256 amount = _getTokenAmount(_value, bonus);\n', '    uint256 amount_without_bonus = _getTokenAmount(_value, 0);\n', '    uint8 _currentRound = _getCurrentRound(now);\n', '\n', '    require(rounds[_currentRound].allocatedCoins >= amount + rounds[_currentRound].soldCoins);\n', '    require(totalSupply_ + amount <= maxSupply); // if we have enough tokens to be minted\n', '\n', '    require(\n', '      rounds[_currentRound].minPurchase <= amount_without_bonus &&\n', '      rounds[_currentRound].maxPurchase >= amount_without_bonus\n', '    );\n', '\n', '    _sold = _sold.add(_value); // in wei\n', '    investments[_sender] = investments[_sender].add(_value); // in wei\n', '\n', '    // minting tokens for investores\n', '    // after we recorded how much he sent ether and other params\n', '    mint(_sender, amount);\n', '    rounds[_currentRound].soldCoins = rounds[_currentRound].soldCoins.add(amount);\n', '    tokensBought[_sender] = tokensBought[_sender].add(amount);\n', '\n', '    emit investmentReceived(\n', '      _sender, \n', '      _value, \n', '      amount_without_bonus\n', '    );\n', '\n', '    return true;\n', '  }\n', '\n', '  /// @dev system can mint tokens for users if they sent funds to BTC, LTC, etc wallets we allow\n', '  function mintForInvestor(address _to, uint256 _tokens) public onlyOwner onlyWhileOpen isNotPaused {\n', '    uint8 _round = _getCurrentRound(now);\n', '    require(_round >= 0 && _round <= 4);\n', '    require(_to != address(0)); // handling incorrect values from system in addresses\n', '    require(_tokens >= 0); // handing incorrect values from system in tokens calculation\n', '    require(rounds[_currentRound].allocatedCoins >= _tokens + rounds[_currentRound].soldCoins);\n', '    \n', '    uint8 _currentRound = _getCurrentRound(now);\n', '\n', '    // minting tokens for investors\n', '    mint(_to, _tokens); // _tokens in wei\n', '    rounds[_currentRound].soldCoins = rounds[_currentRound].soldCoins.add(_tokens);\n', '    tokensBought[_to] = tokensBought[_to].add(_tokens); // tokens in wei\n', '\n', '    _sold = _sold.add(_tokens); // in wei\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) internal {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(address(this), _to, _amount);\n', '  }\n', '\n', '    /**\n', '   * @dev The way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @param _bonus Bonus in percents\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount, uint _bonus) internal view returns (uint256) {\n', '    uint256 _coins_in_wei = rate.mul(_weiAmount);\n', '    uint256 _bonus_value_in_wei = 0;\n', '    uint256 bonusValue = 0;\n', '\n', '    _bonus_value_in_wei = (_coins_in_wei.mul(_bonus)).div(100);\n', '    bonusValue = _bonus_value_in_wei;\n', '\n', '    uint256 coins = _coins_in_wei;\n', '    uint256 total = coins.add(bonusValue);\n', '\n', '    return total;\n', '  }\n', '\n', '  /**\n', '   * @dev sets a rate for ico rounds\n', '   * @param _rate Rate for token\n', '   */\n', '  function setRate(uint256 _rate) public {\n', '    require(msg.sender == owner);\n', '    require(_rate > 0);\n', '\n', '    rate = _rate;\n', '  }\n', '\n', '  /// @dev get total coins sold per current round\n', '  function soldPerCurrentRound() public view returns (uint256) {\n', '    return rounds[_getCurrentRound(now)].soldCoins;\n', '  }\n', '\n', '  /// @dev pause and unpause an ICO, only sender allowed to\n', '  function triggerICOState(bool state) public onlyOwner {\n', '    isPaused = state;\n', '  }\n', '\n', '  /**\n', '   * @dev changes current bonus rate\n', '   * @param _bonus Bonus to change\n', '   * @return bool - Changed or not\n', '   */\n', '  function setBonus(uint256 _bonus) onlyOwner public {\n', '    require(_bonus >= 0 && _bonus <= 100); //%\n', '    bonus = _bonus;\n', '  }\n', '\n', "  // Don't like this code. Don't know yet how to make it nicer\n", '  function _getCurrentRound(uint256 _time) public view returns (uint8) {\n', '    for (uint8 i = 0; i < 5; i++) {\n', '      if (rounds[i].openingTime < _time && rounds[i].closingTime > _time) {\n', '        return i;\n', '      }\n', '    }\n', '\n', '    return 100;\n', '  }\n', '\n', '  function setRoundParams(\n', '    uint8 _round,\n', '    uint256 _openingTime,\n', '    uint256 _closingTime,\n', '    uint256 _maxPurchase,\n', '    uint256 _minPurchase,\n', '    uint256 _allocatedCoins\n', '  ) public onlyOwner {\n', '    require(msg.sender == owner);\n', '\n', '    rounds[_round].openingTime = _openingTime;\n', '    rounds[_round].closingTime = _closingTime;\n', '    rounds[_round].maxPurchase = _maxPurchase;\n', '    rounds[_round].minPurchase = _minPurchase;\n', '    rounds[_round].allocatedCoins = _allocatedCoins;\n', '  }\n', '\n', '  /**\n', "   * @dev withdrawing funds to founder's wallet\n", '   * @return bool Whether success or not\n', '   */\n', '  function withdraw() public {\n', '    // only founder is able to withdraw funds\n', '    require(msg.sender == founder);\n', '    founder.transfer(address(this).balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Claims for refund if ICO finished and soft cap not reached\n', '   */\n', '  function refund() public whenICOFinished capNotReached {\n', '    require(investments[msg.sender] > 0);\n', '    msg.sender.transfer(investments[msg.sender]);\n', '    investments[msg.sender] = 0;\n', '  }\n', '\n', '  modifier onlyWhileOpen {\n', '    uint8 _round = _getCurrentRound(now);\n', '    require(_round >= 0 && _round <= 4); // we hae 5 rounds, other values are invalid \n', '    _;\n', '  }\n', '\n', '  /// @dev when ico finishes we can perform other actions\n', '  modifier whenICOFinished {\n', '    uint8 _round = _getCurrentRound(now);\n', '    require(_round < 0 || _round > 4); // if we do not get current valid round number ICO finished\n', '    _;\n', '  }\n', '\n', '  /// @dev _sold in weis, softCap in weis\n', '  modifier capNotReached {\n', '    require(softCap > _sold);\n', '    _;\n', '  }\n', '\n', '  /// @dev if isPaused true then investments cannot be accepted\n', '  modifier isNotPaused {\n', '    require(!isPaused);\n', '    _;\n', '  }\n', '\n', '}']
