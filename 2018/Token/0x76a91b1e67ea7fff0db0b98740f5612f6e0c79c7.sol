['pragma solidity 0.4.24;\n', '\n', 'contract StarRocket\n', '{\n', '    using SafeMath for *;\n', '\n', '    address public master;\n', '\n', '    mapping(uint256 => mapping(uint256 => uint256)) results;\n', '\n', '    bool public paused = false;\n', '\n', '    constructor() public {\n', '        master = msg.sender;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier onlyMaster() {\n', '        require(msg.sender == master);\n', '        _;\n', '    }\n', '\n', '    function pause() public whenNotPaused onlyMaster {\n', '        paused = true;\n', '    }\n', '\n', '    function unpause() public whenPaused onlyMaster {\n', '        paused = false;\n', '    }\n', '\n', '    function makeRandomResult(uint256 guessType, uint256 period, uint256 seed, uint256 maxNumber) onlyMaster\n', '        public returns (bool)  {\n', '        require(guessType > 0);\n', '        require(period > 0);\n', '        require(seed >= 0);\n', '        require(maxNumber > 0);\n', '        require(results[guessType][period] <= 0);\n', '        require(maxNumber <= 1000000);\n', '        uint256 random = uint256(keccak256(abi.encodePacked(\n', '                (block.timestamp).add\n', '                (block.difficulty).add\n', '                (guessType).add\n', '                (period).add\n', '                (seed)))) % maxNumber;\n', '        results[guessType][period] = random;\n', '        return true;\n', '    }\n', '\n', '    function getResult(uint256 guessType, uint256 period)\n', '        public view returns (uint256){\n', '        require(guessType > 0);\n', '        require(period > 0);\n', '        require(results[guessType][period] > 0);\n', '        return results[guessType][period];\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}']