['pragma solidity ^0.4.24;\n', '\n', 'contract TokenX {\n', '\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '\n', '    uint private constant MAX_UINT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    string public constant name = "Token X";\n', '    string public constant symbol = "TKX";\n', '    uint public constant decimals = 2;\n', '    uint public constant totalSupply = 10000 * (10 ** decimals);\n', '\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '\n', '    constructor() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '        emit Transfer(0, msg.sender, totalSupply);\n', '    }\n', '\n', '    function transfer(address to, uint amount) external returns (bool) {\n', '        require(to != address(this));\n', '        require(to != 0);\n', '        uint balanceOfMsgSender = balanceOf[msg.sender];\n', '        require(balanceOfMsgSender >= amount);\n', '        balanceOf[msg.sender] = balanceOfMsgSender - amount;\n', '        balanceOf[to] += amount;\n', '        emit Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint amount) external returns (bool) {\n', '        require(to != address(this));\n', '        require(to != 0);\n', '        uint allowanceMsgSender = allowance[from][msg.sender];\n', '        require(allowanceMsgSender >= amount);\n', '        if (allowanceMsgSender != MAX_UINT) {\n', '            allowance[from][msg.sender] = allowanceMsgSender - amount;\n', '        }\n', '        uint balanceOfFrom = balanceOf[from];\n', '        require(balanceOfFrom >= amount);\n', '        balanceOf[from] = balanceOfFrom - amount;\n', '        balanceOf[to] += amount;\n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint amount) external returns (bool) {\n', '        allowance[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract TokenX {\n', '\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '\n', '    uint private constant MAX_UINT = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    string public constant name = "Token X";\n', '    string public constant symbol = "TKX";\n', '    uint public constant decimals = 2;\n', '    uint public constant totalSupply = 10000 * (10 ** decimals);\n', '\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '\n', '    constructor() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '        emit Transfer(0, msg.sender, totalSupply);\n', '    }\n', '\n', '    function transfer(address to, uint amount) external returns (bool) {\n', '        require(to != address(this));\n', '        require(to != 0);\n', '        uint balanceOfMsgSender = balanceOf[msg.sender];\n', '        require(balanceOfMsgSender >= amount);\n', '        balanceOf[msg.sender] = balanceOfMsgSender - amount;\n', '        balanceOf[to] += amount;\n', '        emit Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint amount) external returns (bool) {\n', '        require(to != address(this));\n', '        require(to != 0);\n', '        uint allowanceMsgSender = allowance[from][msg.sender];\n', '        require(allowanceMsgSender >= amount);\n', '        if (allowanceMsgSender != MAX_UINT) {\n', '            allowance[from][msg.sender] = allowanceMsgSender - amount;\n', '        }\n', '        uint balanceOfFrom = balanceOf[from];\n', '        require(balanceOfFrom >= amount);\n', '        balanceOf[from] = balanceOfFrom - amount;\n', '        balanceOf[to] += amount;\n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint amount) external returns (bool) {\n', '        allowance[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '}']
