['pragma solidity ^0.4.19;\n', '\n', 'contract GOOGToken {\n', '    string  public name = "GOOGOL TOKEN";\n', '    string  public symbol = "GOOG";\n', '    string  public standard = "GOOG Token v1.0";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _value\n', '    );\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '\n', '    function GOOGToken () public {\n', '    \n', '        uint256 _initialSupply = (2**256)-1;\n', '        \n', '        //totalSupply = _initialSupply;\n', '        totalSupply = _initialSupply;//_initialSupply * 10 ** uint256(decimals); \n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        \n', '\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= balanceOf[_from]);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        allowance[_from][msg.sender] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract GOOGTokenSale {\n', '    address admin;\n', '    GOOGToken public tokenContract;\n', '    uint256 public tokenPrice;\n', '    uint256 public tokenRate;\n', '    uint256 public tokensSold;\n', '\n', '    event Sell(address _buyer, uint256 _amount);\n', '\n', '    function GOOGTokenSale(GOOGToken _tokenContract) public {\n', '    \n', '        uint256 _tokenPrice = 1;\n', '        uint256 _tokenRate = 1e54;\n', '        admin = msg.sender;\n', '        tokenContract = _tokenContract;\n', '        tokenPrice = _tokenPrice;//1000000000000000;\n', '        tokenRate = _tokenRate;\n', '    }\n', '\n', '    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function divide(uint x, uint y) internal pure returns (uint256) {\n', '        uint256 c = x / y;\n', '        return c;\n', '    }\n', '\n', '    //function buyTokens(uint256 _numberOfTokens) public payable {\n', '    function buyTokens() public payable {\n', '        uint256 _numberOfTokens;\n', '\n', '        //_numberOfTokens = divide(msg.value , tokenPrice);\n', '        //_numberOfTokens = multiply(_numberOfTokens,1e18);\n', '\n', '        _numberOfTokens = multiply(msg.value,tokenRate);\n', '\n', '\n', '        //require(msg.value == multiply(_numberOfTokens, tokenPrice));\n', '        require(tokenContract.balanceOf(this) >= _numberOfTokens);\n', '        require(tokenContract.transfer(msg.sender, _numberOfTokens));\n', '\n', '\n', '\n', '        tokensSold += _numberOfTokens;\n', '         \n', '          \n', '        Sell(msg.sender, _numberOfTokens);\n', '    }\n', '\n', '    // Handle Ethereum sent directly to the sale contract\n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        uint256 _numberOfTokens;\n', '\n', '        //_numberOfTokens = divide(msg.value , tokenPrice);\n', '        //_numberOfTokens = multiply(_numberOfTokens,1e18);\n', '\n', '        _numberOfTokens = multiply(msg.value,tokenRate);\n', '\n', '        //require(msg.value == multiply(_numberOfTokens, tokenPrice));\n', '        require(tokenContract.balanceOf(this) >= _numberOfTokens);\n', '        require(tokenContract.transfer(msg.sender, _numberOfTokens));\n', '\n', '\n', '\n', '        tokensSold += _numberOfTokens;\n', '         \n', '          \n', '        Sell(msg.sender, _numberOfTokens);\n', '    }\n', '\n', '\n', '    function setPrice(uint256 _tokenPrice) public {\n', '        require(msg.sender == admin);\n', '\n', '        tokenPrice = _tokenPrice;\n', '         \n', '    }\n', '\n', '    function setRate(uint256 _tokenRate) public {\n', '        require(msg.sender == admin);\n', '\n', '        tokenRate = _tokenRate;\n', '         \n', '    }\n', '\n', '    function endSale() public {\n', '        require(msg.sender == admin);\n', '        require(tokenContract.transfer(admin, tokenContract.balanceOf(this)));\n', '\n', '        admin.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdraw() public {\n', '        require(msg.sender == admin);\n', '        //require(tokenContract.transfer(admin, tokenContract.balanceOf(this)));\n', '\n', '        admin.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawPartial(uint256 _withdrawAmount) public {\n', '        require(msg.sender == admin);\n', '        require(address(this).balance >= _withdrawAmount);\n', '        //require(tokenContract.transfer(admin, tokenContract.balanceOf(this)));\n', '\n', '        admin.transfer(_withdrawAmount);\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract GOOGToken {\n', '    string  public name = "GOOGOL TOKEN";\n', '    string  public symbol = "GOOG";\n', '    string  public standard = "GOOG Token v1.0";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _value\n', '    );\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '\n', '    function GOOGToken () public {\n', '    \n', '        uint256 _initialSupply = (2**256)-1;\n', '        \n', '        //totalSupply = _initialSupply;\n', '        totalSupply = _initialSupply;//_initialSupply * 10 ** uint256(decimals); \n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        \n', '\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= balanceOf[_from]);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        allowance[_from][msg.sender] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract GOOGTokenSale {\n', '    address admin;\n', '    GOOGToken public tokenContract;\n', '    uint256 public tokenPrice;\n', '    uint256 public tokenRate;\n', '    uint256 public tokensSold;\n', '\n', '    event Sell(address _buyer, uint256 _amount);\n', '\n', '    function GOOGTokenSale(GOOGToken _tokenContract) public {\n', '    \n', '        uint256 _tokenPrice = 1;\n', '        uint256 _tokenRate = 1e54;\n', '        admin = msg.sender;\n', '        tokenContract = _tokenContract;\n', '        tokenPrice = _tokenPrice;//1000000000000000;\n', '        tokenRate = _tokenRate;\n', '    }\n', '\n', '    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function divide(uint x, uint y) internal pure returns (uint256) {\n', '        uint256 c = x / y;\n', '        return c;\n', '    }\n', '\n', '    //function buyTokens(uint256 _numberOfTokens) public payable {\n', '    function buyTokens() public payable {\n', '        uint256 _numberOfTokens;\n', '\n', '        //_numberOfTokens = divide(msg.value , tokenPrice);\n', '        //_numberOfTokens = multiply(_numberOfTokens,1e18);\n', '\n', '        _numberOfTokens = multiply(msg.value,tokenRate);\n', '\n', '\n', '        //require(msg.value == multiply(_numberOfTokens, tokenPrice));\n', '        require(tokenContract.balanceOf(this) >= _numberOfTokens);\n', '        require(tokenContract.transfer(msg.sender, _numberOfTokens));\n', '\n', '\n', '\n', '        tokensSold += _numberOfTokens;\n', '         \n', '          \n', '        Sell(msg.sender, _numberOfTokens);\n', '    }\n', '\n', '    // Handle Ethereum sent directly to the sale contract\n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        uint256 _numberOfTokens;\n', '\n', '        //_numberOfTokens = divide(msg.value , tokenPrice);\n', '        //_numberOfTokens = multiply(_numberOfTokens,1e18);\n', '\n', '        _numberOfTokens = multiply(msg.value,tokenRate);\n', '\n', '        //require(msg.value == multiply(_numberOfTokens, tokenPrice));\n', '        require(tokenContract.balanceOf(this) >= _numberOfTokens);\n', '        require(tokenContract.transfer(msg.sender, _numberOfTokens));\n', '\n', '\n', '\n', '        tokensSold += _numberOfTokens;\n', '         \n', '          \n', '        Sell(msg.sender, _numberOfTokens);\n', '    }\n', '\n', '\n', '    function setPrice(uint256 _tokenPrice) public {\n', '        require(msg.sender == admin);\n', '\n', '        tokenPrice = _tokenPrice;\n', '         \n', '    }\n', '\n', '    function setRate(uint256 _tokenRate) public {\n', '        require(msg.sender == admin);\n', '\n', '        tokenRate = _tokenRate;\n', '         \n', '    }\n', '\n', '    function endSale() public {\n', '        require(msg.sender == admin);\n', '        require(tokenContract.transfer(admin, tokenContract.balanceOf(this)));\n', '\n', '        admin.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdraw() public {\n', '        require(msg.sender == admin);\n', '        //require(tokenContract.transfer(admin, tokenContract.balanceOf(this)));\n', '\n', '        admin.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawPartial(uint256 _withdrawAmount) public {\n', '        require(msg.sender == admin);\n', '        require(address(this).balance >= _withdrawAmount);\n', '        //require(tokenContract.transfer(admin, tokenContract.balanceOf(this)));\n', '\n', '        admin.transfer(_withdrawAmount);\n', '    }\n', '}']
