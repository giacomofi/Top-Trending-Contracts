['pragma solidity ^0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// (c) BokkyPooBah / Bok Consulting Pty Ltd 2017. The MIT Licence.\n', '// modified by Team Chibi Fighters, thanks heaps BokkyPooBah!\n', '//\n', '// massive shoutout to https://cryptozombies.io\n', '// best solidity learning series out there!\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract owner and transfer functions\n', '// just in case someone wants to get my bacon\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 compliant Founder Chibi Token\n', '// Receives ETH and generates Founder Chibi Token\n', '// 1 Founder Chibi Fighter can be exchanged for 1 Founder Chibi in our upcoming game\n', '// https://chibifighters.io Chibi Fighters\n', '// ----------------------------------------------------------------------------\n', 'contract Founders is ERC20Interface, Owned {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public _ratio;\n', '    bool disabled;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Launched once when contract starts\n', '    // ------------------------------------------------------------------------\n', '    function Founders() public {\n', '        disabled = false;\n', '        symbol = "FCF";\n', '        name = "Founder Chibi Fighters";\n', '        decimals = 18;\n', '        // the first coins go to creator to share among GARRY investors\n', '        _totalSupply = 330 * 10**uint(decimals);      \n', '        // set ratio, get 100 Founders for 1 Ether\n', '        _ratio = 100;\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(balances[msg.sender] >= tokens);\n', '        balances[msg.sender] -= tokens;\n', '        balances[to] += tokens;\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require (allowed[from][msg.sender] >= tokens);\n', '        require (balances[from] >= tokens);\n', '        \n', '        balances[from] -= tokens;\n', '        allowed[from][msg.sender] -= tokens;\n', '        balances[to] += tokens;\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Disable minting of Founder Chibis after Release\n', '    // ------------------------------------------------------------------------\n', '    function disableContract(bool _disabled) public onlyOwner returns (bool success) {\n', '        disabled = _disabled;\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Tokens per Ethererum at a ratio of 100:1\n', '    // 0.01 is minimum to avoid spamming\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(msg.value >= 10000000000000000);\n', '        require(disabled == false);\n', '        \n', '        uint tokens;\n', '        tokens = msg.value*_ratio;\n', '\n', '        balances[msg.sender] += tokens;\n', '        _totalSupply += tokens;\n', '        emit Transfer(address(0), msg.sender, tokens);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // Only if he is in the mood though, I won&#39;t give a damn if you are an annoying bot\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Query Ethereum of contract\n', '    // ------------------------------------------------------------------------\n', '    function weiBalance() public constant returns (uint weiBal) {\n', '        return address(this).balance;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Send Contracts Ethereum to address owner\n', '    // ------------------------------------------------------------------------\n', '    function weiToOwner(address _address, uint amount) public onlyOwner {\n', '        require(amount <= address(this).balance);\n', '        _address.transfer(amount);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// (c) BokkyPooBah / Bok Consulting Pty Ltd 2017. The MIT Licence.\n', '// modified by Team Chibi Fighters, thanks heaps BokkyPooBah!\n', '//\n', '// massive shoutout to https://cryptozombies.io\n', '// best solidity learning series out there!\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract owner and transfer functions\n', '// just in case someone wants to get my bacon\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 compliant Founder Chibi Token\n', '// Receives ETH and generates Founder Chibi Token\n', '// 1 Founder Chibi Fighter can be exchanged for 1 Founder Chibi in our upcoming game\n', '// https://chibifighters.io Chibi Fighters\n', '// ----------------------------------------------------------------------------\n', 'contract Founders is ERC20Interface, Owned {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public _ratio;\n', '    bool disabled;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Launched once when contract starts\n', '    // ------------------------------------------------------------------------\n', '    function Founders() public {\n', '        disabled = false;\n', '        symbol = "FCF";\n', '        name = "Founder Chibi Fighters";\n', '        decimals = 18;\n', '        // the first coins go to creator to share among GARRY investors\n', '        _totalSupply = 330 * 10**uint(decimals);      \n', '        // set ratio, get 100 Founders for 1 Ether\n', '        _ratio = 100;\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(balances[msg.sender] >= tokens);\n', '        balances[msg.sender] -= tokens;\n', '        balances[to] += tokens;\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require (allowed[from][msg.sender] >= tokens);\n', '        require (balances[from] >= tokens);\n', '        \n', '        balances[from] -= tokens;\n', '        allowed[from][msg.sender] -= tokens;\n', '        balances[to] += tokens;\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Disable minting of Founder Chibis after Release\n', '    // ------------------------------------------------------------------------\n', '    function disableContract(bool _disabled) public onlyOwner returns (bool success) {\n', '        disabled = _disabled;\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Tokens per Ethererum at a ratio of 100:1\n', '    // 0.01 is minimum to avoid spamming\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(msg.value >= 10000000000000000);\n', '        require(disabled == false);\n', '        \n', '        uint tokens;\n', '        tokens = msg.value*_ratio;\n', '\n', '        balances[msg.sender] += tokens;\n', '        _totalSupply += tokens;\n', '        emit Transfer(address(0), msg.sender, tokens);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', "    // Only if he is in the mood though, I won't give a damn if you are an annoying bot\n", '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Query Ethereum of contract\n', '    // ------------------------------------------------------------------------\n', '    function weiBalance() public constant returns (uint weiBal) {\n', '        return address(this).balance;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Send Contracts Ethereum to address owner\n', '    // ------------------------------------------------------------------------\n', '    function weiToOwner(address _address, uint amount) public onlyOwner {\n', '        require(amount <= address(this).balance);\n', '        _address.transfer(amount);\n', '    }\n', '}']
