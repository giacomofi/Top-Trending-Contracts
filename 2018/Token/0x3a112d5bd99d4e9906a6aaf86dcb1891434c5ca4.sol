['pragma solidity ^0.4.13;\n', '\n', 'contract Utils {\n', '\n', '    // verifies that an amount is greater than zero\n', '    modifier greaterThanZero(uint256 _amount) {\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', '     // verifies that an amount is greater or equal to zero\n', '    modifier greaterOrEqualThanZero(uint256 _amount) {\n', '        require(_amount >= 0);\n', '        _;\n', '    }\n', '\n', '    // validates an address - currently only checks that it isn&#39;t null\n', '    modifier validAddress(address _address) {\n', '        require(_address != 0x0 && _address != address(0) && _address != 0);\n', '        _;\n', '    }\n', '\n', '    // validates multiple addresses - currently only checks that it isn&#39;t null\n', '    modifier validAddresses(address _address, address _anotherAddress) {\n', '        require((_address != 0x0         && _address != address(0)        && _address != 0 ) &&\n', '                ( _anotherAddress != 0x0 && _anotherAddress != address(0) && _anotherAddress != 0)\n', '        );\n', '        _;\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '    // verifies that an amount is greater than zero\n', '    modifier greaterThanNow(uint256 _startTime) {\n', '         require(_startTime >= now);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ERC23Receiver {\n', '    function tokenFallback(address _sender, address _origin, uint256 _value, bytes _data) returns (bool success);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC23Basic is ERC20Basic {\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n', '    function contractFallback(address _origin, address _to, uint _value, bytes _data) internal returns (bool success);\n', '    function isContract(address _addr) internal returns (bool is_contract);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes indexed _data);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract Basic23Token is Utils, ERC23Basic, BasicToken {\n', '  \n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred\n', '    * @param _data is arbitrary data sent with the token transferFrom. Simulates ether tx.data\n', '    * @return bool successful or not\n', '    */\n', '    function transfer(address _to, uint _value, bytes _data) \n', '        public\n', '        validAddress(_to) \n', '        notThis(_to)\n', '        greaterThanZero(_value)\n', '        returns (bool success)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);            // Ensure Sender has enough balance to send amount and ensure the sent _value is greater than 0\n', '        require(balances[_to].add(_value) > balances[_to]);  // Detect balance overflow\n', '    \n', '        assert(super.transfer(_to, _value));               //@dev Save transfer\n', '\n', '        if (isContract(_to)){\n', '          return contractFallback(msg.sender, _to, _value, _data);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) \n', '        public\n', '        validAddress(_to) \n', '        notThis(_to)\n', '        greaterThanZero(_value)\n', '        returns (bool success)\n', '    {        \n', '        return transfer(_to, _value, new bytes(0));\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of. \n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) \n', '        public\n', '        validAddress(_owner) \n', '        constant returns (uint256 balance)\n', '    {\n', '        return super.balanceOf(_owner);\n', '    }\n', '\n', '    //function that is called when transaction target is a contract\n', '    function contractFallback(address _origin, address _to, uint _value, bytes _data) internal returns (bool success) {\n', '        ERC23Receiver reciever = ERC23Receiver(_to);\n', '        return reciever.tokenFallback(msg.sender, _origin, _value, _data);\n', '    }\n', '\n', '    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) internal returns (bool is_contract) {\n', '        // retrieve the size of the code on target address, this needs assembly\n', '        uint length;\n', '        assembly { length := extcodesize(_addr) }\n', '        return length > 0;\n', '    }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC23 is ERC20{\n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool success);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Standard23Token is Utils, ERC23, Basic23Token, StandardToken {\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @dev Full compliance to ERC-20 and predictable behavior\n', '     * https://docs.google.com/presentation/d/1sOuulAU1QirYtwHJxEbCsM_5LvuQs0YTbtLau8rRxpk/edit#slide=id.p24\n', '     * \n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     * @param _data is arbitrary data sent with the token transferFrom. Simulates ether tx.data\n', '     * @return bool successful or not\n', '   */\n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data)\n', '        public\n', '        validAddresses(_from, _to) \n', '        notThis(_to)\n', '        greaterThanZero(_value)\n', '        returns (bool success)\n', '    {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(balances[_to].add(_value) > balances[_to]);  // Detect balance overflow\n', '        require(_value <= allowance);                        // ensure allowed[_from][msg.sender] is greate or equal to send amount to send\n', '        if (_value > 0 && _from != _to) {\n', '            require(transferFromInternal(_from, _to, _value)); // do a normal token transfer\n', '            if (isContract(_to)) {\n', '                return contractFallback(_from, _to, _value, _data);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @dev Full compliance to ERC-20 and predictable behavior\n', '     * https://docs.google.com/presentation/d/1sOuulAU1QirYtwHJxEbCsM_5LvuQs0YTbtLau8rRxpk/edit#slide=id.p24\n', '     * \n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     * @return bool successful or not\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        validAddresses(_from, _to) \n', '        greaterThanZero(_value)\n', '        returns (bool success)\n', '    {\n', '        return transferFrom(_from, _to, _value, new bytes(0));\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @dev Full compliance to ERC-20 and predictable behavior\n', '     * https://docs.google.com/presentation/d/1sOuulAU1QirYtwHJxEbCsM_5LvuQs0YTbtLau8rRxpk/edit#slide=id.p24\n', '     * \n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     * @return bool successful or not\n', '    */\n', '    function transferFromInternal(address _from, address _to, uint256 _value)\n', '        internal\n', '        validAddresses(_from, _to) \n', '        greaterThanZero(_value)\n', '        returns (bool success)\n', '    {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Mintable23Token is Standard23Token, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(0x0, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() public onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MavroToken is Mintable23Token {\n', '\n', '    string public constant name = "Mavro Token";\n', '    string public constant symbol = "MVR";\n', '    uint8 public constant decimals = 18;\n', '    bool public TRANSFERS_ALLOWED = false;\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value, address victim) public {\n', '        require(_value <= balances[victim]);\n', '        balances[victim] = balances[victim].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(victim, _value);\n', '    }\n', '\n', '    function transferFromInternal(address _from, address _to, uint256 _value)\n', '    internal\n', '    returns (bool success)\n', '    {\n', '        require(TRANSFERS_ALLOWED || msg.sender == owner);\n', '        super.transferFromInternal(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) returns (bool success){\n', '        require(TRANSFERS_ALLOWED || msg.sender == owner);\n', '        super.transfer(_to, _value, _data);\n', '    }\n', '\n', '    function switchTransfers() onlyOwner {\n', '        TRANSFERS_ALLOWED = !TRANSFERS_ALLOWED;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract Utils {\n', '\n', '    // verifies that an amount is greater than zero\n', '    modifier greaterThanZero(uint256 _amount) {\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', '     // verifies that an amount is greater or equal to zero\n', '    modifier greaterOrEqualThanZero(uint256 _amount) {\n', '        require(_amount >= 0);\n', '        _;\n', '    }\n', '\n', "    // validates an address - currently only checks that it isn't null\n", '    modifier validAddress(address _address) {\n', '        require(_address != 0x0 && _address != address(0) && _address != 0);\n', '        _;\n', '    }\n', '\n', "    // validates multiple addresses - currently only checks that it isn't null\n", '    modifier validAddresses(address _address, address _anotherAddress) {\n', '        require((_address != 0x0         && _address != address(0)        && _address != 0 ) &&\n', '                ( _anotherAddress != 0x0 && _anotherAddress != address(0) && _anotherAddress != 0)\n', '        );\n', '        _;\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '    // verifies that an amount is greater than zero\n', '    modifier greaterThanNow(uint256 _startTime) {\n', '         require(_startTime >= now);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ERC23Receiver {\n', '    function tokenFallback(address _sender, address _origin, uint256 _value, bytes _data) returns (bool success);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC23Basic is ERC20Basic {\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n', '    function contractFallback(address _origin, address _to, uint _value, bytes _data) internal returns (bool success);\n', '    function isContract(address _addr) internal returns (bool is_contract);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes indexed _data);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract Basic23Token is Utils, ERC23Basic, BasicToken {\n', '  \n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred\n', '    * @param _data is arbitrary data sent with the token transferFrom. Simulates ether tx.data\n', '    * @return bool successful or not\n', '    */\n', '    function transfer(address _to, uint _value, bytes _data) \n', '        public\n', '        validAddress(_to) \n', '        notThis(_to)\n', '        greaterThanZero(_value)\n', '        returns (bool success)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);            // Ensure Sender has enough balance to send amount and ensure the sent _value is greater than 0\n', '        require(balances[_to].add(_value) > balances[_to]);  // Detect balance overflow\n', '    \n', '        assert(super.transfer(_to, _value));               //@dev Save transfer\n', '\n', '        if (isContract(_to)){\n', '          return contractFallback(msg.sender, _to, _value, _data);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) \n', '        public\n', '        validAddress(_to) \n', '        notThis(_to)\n', '        greaterThanZero(_value)\n', '        returns (bool success)\n', '    {        \n', '        return transfer(_to, _value, new bytes(0));\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of. \n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) \n', '        public\n', '        validAddress(_owner) \n', '        constant returns (uint256 balance)\n', '    {\n', '        return super.balanceOf(_owner);\n', '    }\n', '\n', '    //function that is called when transaction target is a contract\n', '    function contractFallback(address _origin, address _to, uint _value, bytes _data) internal returns (bool success) {\n', '        ERC23Receiver reciever = ERC23Receiver(_to);\n', '        return reciever.tokenFallback(msg.sender, _origin, _value, _data);\n', '    }\n', '\n', '    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) internal returns (bool is_contract) {\n', '        // retrieve the size of the code on target address, this needs assembly\n', '        uint length;\n', '        assembly { length := extcodesize(_addr) }\n', '        return length > 0;\n', '    }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC23 is ERC20{\n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool success);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Standard23Token is Utils, ERC23, Basic23Token, StandardToken {\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @dev Full compliance to ERC-20 and predictable behavior\n', '     * https://docs.google.com/presentation/d/1sOuulAU1QirYtwHJxEbCsM_5LvuQs0YTbtLau8rRxpk/edit#slide=id.p24\n', '     * \n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     * @param _data is arbitrary data sent with the token transferFrom. Simulates ether tx.data\n', '     * @return bool successful or not\n', '   */\n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data)\n', '        public\n', '        validAddresses(_from, _to) \n', '        notThis(_to)\n', '        greaterThanZero(_value)\n', '        returns (bool success)\n', '    {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(balances[_to].add(_value) > balances[_to]);  // Detect balance overflow\n', '        require(_value <= allowance);                        // ensure allowed[_from][msg.sender] is greate or equal to send amount to send\n', '        if (_value > 0 && _from != _to) {\n', '            require(transferFromInternal(_from, _to, _value)); // do a normal token transfer\n', '            if (isContract(_to)) {\n', '                return contractFallback(_from, _to, _value, _data);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @dev Full compliance to ERC-20 and predictable behavior\n', '     * https://docs.google.com/presentation/d/1sOuulAU1QirYtwHJxEbCsM_5LvuQs0YTbtLau8rRxpk/edit#slide=id.p24\n', '     * \n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     * @return bool successful or not\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        validAddresses(_from, _to) \n', '        greaterThanZero(_value)\n', '        returns (bool success)\n', '    {\n', '        return transferFrom(_from, _to, _value, new bytes(0));\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @dev Full compliance to ERC-20 and predictable behavior\n', '     * https://docs.google.com/presentation/d/1sOuulAU1QirYtwHJxEbCsM_5LvuQs0YTbtLau8rRxpk/edit#slide=id.p24\n', '     * \n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     * @return bool successful or not\n', '    */\n', '    function transferFromInternal(address _from, address _to, uint256 _value)\n', '        internal\n', '        validAddresses(_from, _to) \n', '        greaterThanZero(_value)\n', '        returns (bool success)\n', '    {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Mintable23Token is Standard23Token, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(0x0, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() public onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MavroToken is Mintable23Token {\n', '\n', '    string public constant name = "Mavro Token";\n', '    string public constant symbol = "MVR";\n', '    uint8 public constant decimals = 18;\n', '    bool public TRANSFERS_ALLOWED = false;\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value, address victim) public {\n', '        require(_value <= balances[victim]);\n', '        balances[victim] = balances[victim].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(victim, _value);\n', '    }\n', '\n', '    function transferFromInternal(address _from, address _to, uint256 _value)\n', '    internal\n', '    returns (bool success)\n', '    {\n', '        require(TRANSFERS_ALLOWED || msg.sender == owner);\n', '        super.transferFromInternal(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) returns (bool success){\n', '        require(TRANSFERS_ALLOWED || msg.sender == owner);\n', '        super.transfer(_to, _value, _data);\n', '    }\n', '\n', '    function switchTransfers() onlyOwner {\n', '        TRANSFERS_ALLOWED = !TRANSFERS_ALLOWED;\n', '    }\n', '\n', '}']
