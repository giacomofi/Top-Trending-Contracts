['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Token{\n', '    //ERC20 base standard\n', '    uint256 public totalSupply;\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '// From https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable{\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '// Put the additional safe module here, safe math and pausable\n', '// From https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/lifecycle/Pausable.sol\n', '// And https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', 'contract Safe is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '    bool public paused = false;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '    \n', '    // Check if it is safe to add two numbers\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    // Check if it is safe to subtract two numbers\n', '    function safeSubtract(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint c = a - b;\n', '        assert(b <= a && c <= a);\n', '        return c;\n', '    }\n', '    // Check if it is safe to multiply two numbers\n', '    function safeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint c = a * b;\n', '        assert(a == 0 || (c / a) == b);\n', '        return c;\n', '    }\n', '\n', '    // reject any ether\n', '    function () public payable {\n', '        require(msg.value == 0);\n', '    }\n', '}\n', '\n', '// Adapted from zeppelin-solidity&#39;s BasicToken, StandardToken and BurnableToken contracts\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/BurnableToken.sol\n', 'contract imaxChainToken is Safe, ERC20Token {\n', '    string public constant name = &#39;Inverstment Management Asset Exchange&#39;;              // Set the token name for display\n', '    string public constant symbol = &#39;IMAX&#39;;                                  // Set the token symbol for display\n', '    uint8 public constant decimals = 18;                                     // Set the number of decimals for display\n', '    uint256 public constant INITIAL_SUPPLY = 1e9 * 10**uint256(decimals);\n', '    uint256 public totalSupply;\n', '    string public version = &#39;1&#39;;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => uint256) freeze;\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '    \n', '    modifier whenNotFreeze() {\n', '        require(freeze[msg.sender]==0);\n', '        _;\n', '    }\n', '    \n', '    function imaxChainToken() public {\n', '        totalSupply = INITIAL_SUPPLY;                              // Set the total supply\n', '        balances[msg.sender] = INITIAL_SUPPLY;                     // Creator address is assigned all\n', '        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value)  whenNotPaused whenNotFreeze public returns (bool success) {\n', '        require(_to != address(this));\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused whenNotFreeze public returns (bool success) {\n', '        require(_to != address(this));\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = safeSubtract(balances[_from],_value);\n', '        balances[_to] = safeAdd(balances[_to],_value);\n', '        allowed[_from][msg.sender] = safeSubtract(allowed[_from][msg.sender],_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '\n', '    function approve(address _spender, uint256 _value) whenNotFreeze public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) whenNotFreeze public returns (bool) {\n', '        allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender],_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) whenNotFreeze public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '        allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '        allowed[msg.sender][_spender] = safeSubtract(oldValue,_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function updateFreeze(address account) onlyOwner public returns(bool success){\n', '        if (freeze[account]==0){\n', '          freeze[account]=1;\n', '        }else{\n', '          freeze[account]=0;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function freezeOf(address account) public view returns (uint256 status) {\n', '        return freeze[account];\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '      require(_value <= balances[msg.sender]);\n', '      address burner = msg.sender;\n', '      balances[burner] = safeSubtract(balances[burner],_value);\n', '      totalSupply = safeSubtract(totalSupply, _value);\n', '      Burn(burner, _value);\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { revert(); }\n', '        return true;\n', '    }\n', '\n', '\n', '}']