['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '    address public manager;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManager {\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '\n', '    function setManager(address newManager) onlyOwner public {\n', '        manager = newManager;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '    string public name = "Robot Trading Token";\n', '    string public detail = "Robot Trading token ERC20";\n', '    string public symbol ="RTD";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 0;\n', '    address public owner;\n', '    address[] public owners;\n', '\n', '    mapping (address => bool) ownerAppended;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event FrozenFunds(address target, bool frozen);\n', '    event AirDropCoin(address target, uint256 token, uint256 rate, uint256 amount);\n', '    event AirDropToken(address token_address, address target, uint256 token, uint256 rate, uint256 amount);\n', '\n', '    constructor() public {}\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function getOwner(uint index) public view returns (address, uint256) {\n', '        return (owners[index], balanceOf[owners[index]]);\n', '    }\n', '\n', '    function getOwnerCount() public view returns (uint) {\n', '        return owners.length;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        if(!ownerAppended[_to]) {\n', '            ownerAppended[_to] = true;\n', '            owners.push(_to);\n', '        }\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Coin{\n', '  function transfer(address to, uint value) public returns (bool);\n', '}\n', '\n', 'contract Token is owned, TokenERC20 {\n', '    address public ico_address;\n', '    address public old_address;\n', '    address public app_address;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setDetail(string tokenDetail) onlyOwner public {\n', '        detail = tokenDetail;\n', '    }\n', '\n', '    function() payable public {}\n', '\n', '    function setApp(address _app_address) onlyOwner public {\n', '        app_address = _app_address;\n', '    }\n', '\n', '    function importFromOld(address _ico_address, address _old_address, address[] _to, uint256[] _value) onlyOwner public {\n', '        ico_address = _ico_address;\n', '        old_address = _old_address;\n', '        for (uint256 i = 0; i < _to.length; i++) {\n', '            balanceOf[_to[i]] += _value[i] * 10 ** uint256(12);\n', '            totalSupply += _value[i] * 10 ** uint256(12);\n', '            if(!ownerAppended[_to[i]]) {\n', '                ownerAppended[_to[i]] = true;\n', '                owners.push(_to[i]);\n', '            }\n', '            emit Transfer(old_address, _to[i], _value[i] * 10 ** uint256(12));\n', '        }\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '\n', '        if(!ownerAppended[target]) {\n', '            ownerAppended[target] = true;\n', '            owners.push(target);\n', '        }\n', '\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function withdrawEther() onlyOwner public {\n', '        manager.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawToken(address _tokenAddr,uint256 _value) onlyOwner public {\n', '        assert(Coin(_tokenAddr).transfer(owner, _value) == true);\n', '    }\n', '\n', '    function airDropCoin(uint256 _value)  onlyOwner public {\n', '        for (uint256 i = 0; i < owners.length; i++) {\n', '            address(owners[i]).transfer(balanceOf[owners[i]]/_value);\n', '            emit AirDropCoin(address(owners[i]), balanceOf[owners[i]], _value, (balanceOf[owners[i]]/_value));\n', '        }\n', '    }\n', '\n', '    function airDropToken(address _tokenAddr,uint256 _value)  onlyOwner public {\n', '        for (uint256 i = 0; i < owners.length; i++) {\n', '             assert((Coin(_tokenAddr).transfer(address(owners[i]), balanceOf[owners[i]] / _value)) == true);\n', '             emit AirDropToken(address(_tokenAddr), address(owners[i]), balanceOf[owners[i]], _value, (balanceOf[owners[i]]/_value));\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '    address public manager;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManager {\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '\n', '    function setManager(address newManager) onlyOwner public {\n', '        manager = newManager;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '    string public name = "Robot Trading Token";\n', '    string public detail = "Robot Trading token ERC20";\n', '    string public symbol ="RTD";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 0;\n', '    address public owner;\n', '    address[] public owners;\n', '\n', '    mapping (address => bool) ownerAppended;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event FrozenFunds(address target, bool frozen);\n', '    event AirDropCoin(address target, uint256 token, uint256 rate, uint256 amount);\n', '    event AirDropToken(address token_address, address target, uint256 token, uint256 rate, uint256 amount);\n', '\n', '    constructor() public {}\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function getOwner(uint index) public view returns (address, uint256) {\n', '        return (owners[index], balanceOf[owners[index]]);\n', '    }\n', '\n', '    function getOwnerCount() public view returns (uint) {\n', '        return owners.length;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        if(!ownerAppended[_to]) {\n', '            ownerAppended[_to] = true;\n', '            owners.push(_to);\n', '        }\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Coin{\n', '  function transfer(address to, uint value) public returns (bool);\n', '}\n', '\n', 'contract Token is owned, TokenERC20 {\n', '    address public ico_address;\n', '    address public old_address;\n', '    address public app_address;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setDetail(string tokenDetail) onlyOwner public {\n', '        detail = tokenDetail;\n', '    }\n', '\n', '    function() payable public {}\n', '\n', '    function setApp(address _app_address) onlyOwner public {\n', '        app_address = _app_address;\n', '    }\n', '\n', '    function importFromOld(address _ico_address, address _old_address, address[] _to, uint256[] _value) onlyOwner public {\n', '        ico_address = _ico_address;\n', '        old_address = _old_address;\n', '        for (uint256 i = 0; i < _to.length; i++) {\n', '            balanceOf[_to[i]] += _value[i] * 10 ** uint256(12);\n', '            totalSupply += _value[i] * 10 ** uint256(12);\n', '            if(!ownerAppended[_to[i]]) {\n', '                ownerAppended[_to[i]] = true;\n', '                owners.push(_to[i]);\n', '            }\n', '            emit Transfer(old_address, _to[i], _value[i] * 10 ** uint256(12));\n', '        }\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '\n', '        if(!ownerAppended[target]) {\n', '            ownerAppended[target] = true;\n', '            owners.push(target);\n', '        }\n', '\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function withdrawEther() onlyOwner public {\n', '        manager.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawToken(address _tokenAddr,uint256 _value) onlyOwner public {\n', '        assert(Coin(_tokenAddr).transfer(owner, _value) == true);\n', '    }\n', '\n', '    function airDropCoin(uint256 _value)  onlyOwner public {\n', '        for (uint256 i = 0; i < owners.length; i++) {\n', '            address(owners[i]).transfer(balanceOf[owners[i]]/_value);\n', '            emit AirDropCoin(address(owners[i]), balanceOf[owners[i]], _value, (balanceOf[owners[i]]/_value));\n', '        }\n', '    }\n', '\n', '    function airDropToken(address _tokenAddr,uint256 _value)  onlyOwner public {\n', '        for (uint256 i = 0; i < owners.length; i++) {\n', '             assert((Coin(_tokenAddr).transfer(address(owners[i]), balanceOf[owners[i]] / _value)) == true);\n', '             emit AirDropToken(address(_tokenAddr), address(owners[i]), balanceOf[owners[i]], _value, (balanceOf[owners[i]]/_value));\n', '        }\n', '    }\n', '}']
