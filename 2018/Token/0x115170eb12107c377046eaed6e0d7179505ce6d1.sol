['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Description: This code is for creating a token contract\n', ' * This contract is mintable, pausable, burnable, administered, admin-transferrable and \n', ' * has safety Maths and security operations checks done and yet have been kept short and simple\n', ' * It has got 3 contracts\n', ' * 1. Manager Contract - This contract gives a user the power to manage the token functions\n', ' * 2. ERC20 Standard Contract - It implements ERC20 pre requisites\n', ' * 3. WIMT Token Contract - It is a custom contract that inherits from the above two contracts\n', ' * This source code was tested with Remix and solidity compiler version 0.4.21\n', ' * The source code was adapted and modified by wims.io\n', ' * source : https://github.com/tintinweb/smart-contract-sanctuary/blob/master/contracts/ropsten/46/46b8357a9a9361258358308d3668e2072d6732a9_AxelToken.sol\n', ' */\n', '\n', ' /**\n', ' * @notice Manager contract\n', ' */\n', ' \n', 'contract Manager\n', '{\n', '    address public contractManager; //address to manage the token contract\n', '    \n', '    bool public paused = false; // Indicates whether the token contract is paused or not.\n', '\t\n', '\tevent NewContractManager(address newManagerAddress); //Will display change of token manager\n', '\n', '    /**\n', '    * @notice Function constructor for contract Manager with no parameters\n', '    * \n', '    */\n', '    function Manager() public\n', '\t{\n', '        contractManager = msg.sender; //address that creates contracts will manage it\n', '    }\n', '\n', '\t/**\n', '\t* @notice onlyManager restrict management operations to the Manager of contract\n', '\t*/\n', '    modifier onlyManager()\n', '\t{\n', '        require(msg.sender == contractManager); \n', '        _;\n', '    }\n', '    \n', '\t/**\n', '\t* @notice Manager set a new manager\n', '\t*/\n', '    function newManager(address newManagerAddress) public onlyManager \n', '\t{\n', '\t\trequire(newManagerAddress != 0);\n', '\t\t\n', '        contractManager = newManagerAddress;\n', '\t\t\n', '\t\temit NewContractManager(newManagerAddress);\n', '\n', '    }\n', '    \n', '    /**\n', '     * @dev Event fired when the token contracts gets paused.\n', '     */\n', '    event Pause();\n', '\n', '    /**\n', '     * @notice Event fired when the token contracts gets unpaused.\n', '     */\n', '    event Unpause();\n', '\n', '    /**\n', '     * @notice Allows a function to be called only when the token contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Pauses the token contract.\n', '     */\n', '    function pause() public onlyManager whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @notice Unpauses the token contract.\n', '     */\n', '    function unpause() public onlyManager {\n', '        require(paused);\n', '\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '\n', '}\n', '\n', '/**\n', ' *@notice ERC20 This is the traditional ERC20 contract\n', ' */\n', 'contract ERC20 is Manager\n', '{\n', '\n', '    mapping(address => uint256) public balanceOf; //this variable displays users balances\n', '    \n', '    string public name;//this variable displays token contract name\n', '\t\n', '    string public symbol;//this variable displays token contract ticker symbol\n', '\t\n', '    uint256 public decimal; //this variable displays the number of decimals for the token\n', '\t\n', '    uint256 public totalSupply;//this variable displays the total supply of tokens\n', '    \n', '    mapping(address => mapping(address => uint256)) public allowance;//this will list of addresses a user will allow to Transfer his/her tokens\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value); //this event will notifies Transfers\n', '\t\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);//this event will notifies Approval\n', '    \n', '    /**\n', '    * @notice Function constructor for ERC20 contract\n', '    */\n', '    function ERC20(uint256 initialSupply, string _name, string _symbol, uint256 _decimal)  public\n', '\t{\n', '\t\trequire(initialSupply >= 0);//prevent negative numbers\n', '\n', '\t\trequire(_decimal >= 0);//no negative decimals allowed\n', '\t\t\n', '        balanceOf[msg.sender] = initialSupply;//give the contract creator address the total created tokens\n', '\t\t\n', '        name = _name; //When the contract is being created give it a name\n', '\t\t\n', '        symbol = _symbol;//When the contract is being created give it a symbol\n', '\t\t\n', '        decimal = _decimal;//When the contract is being created give it decimals standard is  18\n', '\t\t\n', '        totalSupply = initialSupply; //When the contract is being created set the token total supply\n', '    }\n', '    \n', '    /**\n', '    * @notice function transfer which will move tokens from user account to an address specified at to parameter\n', '    *\n', '    */\n', '    function transfer(address _to, uint256 _value)public whenNotPaused returns (bool success)\n', '\t{\n', '\t\trequire(_value > 0);//prevent transferring nothing\n', '\t\t\n', '\t\trequire(balanceOf[msg.sender] >= _value);//the token sender must have tokens to transfer\n', '\t\t\n', '\t\trequire(balanceOf[_to] + _value >= balanceOf[_to]);//the token receiver balance must change and be bigger\n', '\n', '        balanceOf[msg.sender] -= _value;//the balance of the token sender must decrease accordingly\n', '\t\t\n', '        balanceOf[_to] += _value;//effect the actual transfer of tokens\n', '\t\t\n', '        emit Transfer(msg.sender, _to, _value);//publish addresses and amount Transferred\n', '\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @notice function approve gives an address power to spend specified amount\n', '    *\n', '    */\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) \n', '\t{\n', '\t\trequire(_value > 0); //approved amount must be greater than zero\n', '\t\t\n', "\t\tallowance[msg.sender][_spender] = _value;//_spender will be approved to spend _value from as user's address that called this function\n", '\n', '        emit Approval(msg.sender, _spender, _value);//broadcast the activity\n', '\t\t\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @notice function allowance : displays address allow to transfer tokens from owner\n', '    * \n', '    */    \n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) \n', '\t{\n', '      return allowance[_owner][_spender];\n', '    }\n', '\n', '\t/**\n', '    * @notice function transferFrom : moves tokens from one address to another\n', '    * \n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)public whenNotPaused returns (bool success)\n', '\t{\n', '\t\trequire(_value > 0); //move at least 1 token\n', '\t\t\n', '        require(balanceOf[_from] >= _value);//check that there tokens to move\n', '\t\t\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);//after the move the new value must be greater\n', '        \n', '        require(_value <= allowance[_from][msg.sender]); //only authorized addresses can transferFrom\n', '\n', '        balanceOf[_from] -= _value;//remove tokens from _from address\n', '\t\t\n', '        balanceOf[_to] += _value;//add these tokens to _to address\n', '        \n', '        allowance[_from][msg.sender] -= _value; //change the base token balance\n', '\n', '        emit Transfer(_from, _to, _value);//publish transferFrom activity to network\n', '\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @notice function balanceOf will display balance of given address\n', '    * \n', '    */\n', '    function balanceOf(address _owner)public constant returns (uint256 balance) \n', '\t{\n', '        return balanceOf[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' *@notice  WIMT Token implements Manager and ERC contracts\n', ' */\n', 'contract WIMT is Manager, ERC20\n', '{\n', '    /**\n', '     * @notice function constructor for the WIMT contract\n', '     */\n', '     \n', '    function WIMT(uint256 _totalSupply, string _name, string _symbol, uint8 _decimal ) public  ERC20(_totalSupply, _name, _symbol, _decimal)\n', '\t{\n', '\n', '        contractManager = msg.sender;\n', '\n', '        balanceOf[contractManager] = _totalSupply;\n', '\t\t\n', '        totalSupply = _totalSupply;\n', '\t\t\n', '\t\tdecimal = _decimal;\n', '\n', '    }\n', '    \n', '    /**\n', '    * @notice function mint to be executed by Manager of token\n', '    * \n', '    */\n', '    function mint(address target, uint256 mintedAmount)public onlyManager whenNotPaused\n', '\t{\n', '\t\trequire(target != 0);//check executor is supplied \n', '\t\t\n', '\t\trequire(mintedAmount > 0);//disallow negative minting\n', '\t\t\n', '\t    require(balanceOf[target] + mintedAmount >= balanceOf[target]);//after the move the new value must be greater\n', '        \n', '        require(totalSupply + mintedAmount >= totalSupply);//after the move the new value must be greater\n', '        \n', '        balanceOf[target] += mintedAmount;//add tokens to address target\n', '\t\t\n', '        totalSupply += mintedAmount;//increase totalSupply\n', '\t\t\n', '        emit Transfer(0, this, mintedAmount);//publish transfer\n', '\t\t\n', '        emit Transfer(this, target, mintedAmount);//publish transfer\n', '    }\n', '    \n', '\t/**\n', '    * @notice function burn decrease total Supply of tokens\n', '    * \n', '    */\n', '\tfunction burn(uint256 mintedAmount) public onlyManager whenNotPaused\n', '\t{\n', '\t\t\n', '\t\trequire(mintedAmount > 0);//at least 1 token must be destroyed\n', '\t\t\n', '\t\trequire(totalSupply - mintedAmount <= totalSupply);//after the move the new value must be greater\n', '        \n', '\t    require(balanceOf[msg.sender] - mintedAmount <= balanceOf[msg.sender]);//after the move the new value must be greater\n', '\n', '        balanceOf[msg.sender] -= mintedAmount;//decrease balance of destroyer\n', '\t\t\n', '        totalSupply -= mintedAmount;//decrease totalSupply by destroyed tokens\n', '\t\t\n', '        emit Transfer(0, msg.sender, mintedAmount);//publish burn activity\n', '\t\t\n', '        \n', '\n', '    }\n', '\n', '}']