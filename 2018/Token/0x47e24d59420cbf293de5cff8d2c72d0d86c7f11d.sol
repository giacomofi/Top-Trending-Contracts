['pragma solidity ^0.4.17;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract LibraToken is StandardToken {\n', '\n', '    string public constant name = "LibraToken"; // solium-disable-line uppercase\n', '    string public constant symbol = "LBA"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    uint256 public constant INITIAL_SUPPLY = (10 ** 9) * (10 ** uint256(decimals));\n', '\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function LibraToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '}\n', '\n', 'contract AirdropLibraToken is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    uint256 decimal = 10**uint256(18);\n', '\n', '    //How many tokens has been distributed\n', '    uint256 distributedTotal = 0;\n', '\n', '    uint256 airdropStartTime;\n', '    uint256 airdropEndTime;\n', '\n', '    // The LBA token\n', '    LibraToken private token;\n', '\n', '    // List of admins\n', '    mapping (address => bool) public airdropAdmins;\n', '\n', '\n', '\n', '    //the map that has been airdropped, key -- address ,value -- amount\n', '    mapping(address => uint256) public airdropDoneAmountMap;\n', '    //the list that has been airdropped addresses\n', '    address[] public airdropDoneList;\n', '\n', '\n', '    //airdrop event\n', '    event Airdrop(address _receiver, uint256 amount);\n', '\n', '    event AddAdmin(address _admin);\n', '\n', '    event RemoveAdmin(address _admin);\n', '\n', '    event UpdateEndTime(address _operator, uint256 _oldTime, uint256 _newTime);\n', '\n', '\n', '\n', '    modifier onlyOwnerOrAdmin() {\n', '        require(msg.sender == owner || airdropAdmins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '\n', '    function addAdmin(address _admin) public onlyOwner {\n', '        airdropAdmins[_admin] = true;\n', '        AddAdmin(_admin);\n', '    }\n', '\n', '    function removeAdmin(address _admin) public onlyOwner {\n', '        if(isAdmin(_admin)){\n', '            airdropAdmins[_admin] = false;\n', '            RemoveAdmin(_admin);\n', '        }\n', '    }\n', '\n', '\n', '    modifier onlyWhileAirdropPhaseOpen {\n', '        require(block.timestamp > airdropStartTime && block.timestamp < airdropEndTime);\n', '        _;\n', '    }\n', '\n', '\n', '    function AirdropLibraToken(\n', '        ERC20 _token,\n', '        uint256 _airdropStartTime,\n', '        uint256 _airdropEndTime\n', '    ) public {\n', '        token = LibraToken(_token);\n', '        airdropStartTime = _airdropStartTime;\n', '        airdropEndTime = _airdropEndTime;\n', '\n', '    }\n', '\n', '\n', '    function airdropTokens(address _recipient, uint256 amount) public onlyOwnerOrAdmin onlyWhileAirdropPhaseOpen {\n', '        require(amount > 0);\n', '\n', '        uint256 lbaBalance = token.balanceOf(this);\n', '\n', '        require(lbaBalance >= amount);\n', '\n', '        require(token.transfer(_recipient, amount));\n', '\n', '\n', '        //put address into has done list\n', '        airdropDoneList.push(_recipient);\n', '\n', '        //update airdropped actually\n', '        uint256 airDropAmountThisAddr = 0;\n', '        if(airdropDoneAmountMap[_recipient] > 0){\n', '            airDropAmountThisAddr = airdropDoneAmountMap[_recipient].add(amount);\n', '        }else{\n', '            airDropAmountThisAddr = amount;\n', '        }\n', '\n', '        airdropDoneAmountMap[_recipient] = airDropAmountThisAddr;\n', '\n', '        distributedTotal = distributedTotal.add(amount);\n', '\n', '        Airdrop(_recipient, amount);\n', '\n', '    }\n', '\n', '    //batch airdrop, key-- the receiver&#39;s address, value -- receiver&#39;s amount\n', '    function airdropTokensBatch(address[] receivers, uint256[] amounts) public onlyOwnerOrAdmin onlyWhileAirdropPhaseOpen{\n', '        require(receivers.length > 0 && receivers.length == amounts.length);\n', '        for (uint256 i = 0; i < receivers.length; i++){\n', '            airdropTokens(receivers[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function transferOutBalance() public onlyOwner view returns (bool){\n', '        address creator = msg.sender;\n', '        uint256 _balanceOfThis = token.balanceOf(this);\n', '        if(_balanceOfThis > 0){\n', '            LibraToken(token).approve(this, _balanceOfThis);\n', '            LibraToken(token).transferFrom(this, creator, _balanceOfThis);\n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '    }\n', '\n', '    //How many tokens are left without payment\n', '    function balanceOfThis() public view returns (uint256){\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    //how many tokens have been distributed\n', '    function getDistributedTotal() public view returns (uint256){\n', '        return distributedTotal;\n', '    }\n', '\n', '\n', '    function isAdmin(address _addr) public view returns (bool){\n', '        return airdropAdmins[_addr];\n', '    }\n', '\n', '    function updateAirdropEndTime(uint256 _newEndTime) public onlyOwnerOrAdmin {\n', '        UpdateEndTime(msg.sender, airdropEndTime, _newEndTime);\n', '        airdropEndTime = _newEndTime;\n', '    }\n', '\n', '    //get all addresses that has been airdropped\n', '    function getDoneAddresses() public constant returns (address[]){\n', '        return airdropDoneList;\n', '    }\n', '\n', '    //get the amount has been dropped by user&#39;s address\n', '    function getDoneAirdropAmount(address _addr) public view returns (uint256){\n', '        return airdropDoneAmountMap[_addr];\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.17;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract LibraToken is StandardToken {\n', '\n', '    string public constant name = "LibraToken"; // solium-disable-line uppercase\n', '    string public constant symbol = "LBA"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    uint256 public constant INITIAL_SUPPLY = (10 ** 9) * (10 ** uint256(decimals));\n', '\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function LibraToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '}\n', '\n', 'contract AirdropLibraToken is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    uint256 decimal = 10**uint256(18);\n', '\n', '    //How many tokens has been distributed\n', '    uint256 distributedTotal = 0;\n', '\n', '    uint256 airdropStartTime;\n', '    uint256 airdropEndTime;\n', '\n', '    // The LBA token\n', '    LibraToken private token;\n', '\n', '    // List of admins\n', '    mapping (address => bool) public airdropAdmins;\n', '\n', '\n', '\n', '    //the map that has been airdropped, key -- address ,value -- amount\n', '    mapping(address => uint256) public airdropDoneAmountMap;\n', '    //the list that has been airdropped addresses\n', '    address[] public airdropDoneList;\n', '\n', '\n', '    //airdrop event\n', '    event Airdrop(address _receiver, uint256 amount);\n', '\n', '    event AddAdmin(address _admin);\n', '\n', '    event RemoveAdmin(address _admin);\n', '\n', '    event UpdateEndTime(address _operator, uint256 _oldTime, uint256 _newTime);\n', '\n', '\n', '\n', '    modifier onlyOwnerOrAdmin() {\n', '        require(msg.sender == owner || airdropAdmins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '\n', '    function addAdmin(address _admin) public onlyOwner {\n', '        airdropAdmins[_admin] = true;\n', '        AddAdmin(_admin);\n', '    }\n', '\n', '    function removeAdmin(address _admin) public onlyOwner {\n', '        if(isAdmin(_admin)){\n', '            airdropAdmins[_admin] = false;\n', '            RemoveAdmin(_admin);\n', '        }\n', '    }\n', '\n', '\n', '    modifier onlyWhileAirdropPhaseOpen {\n', '        require(block.timestamp > airdropStartTime && block.timestamp < airdropEndTime);\n', '        _;\n', '    }\n', '\n', '\n', '    function AirdropLibraToken(\n', '        ERC20 _token,\n', '        uint256 _airdropStartTime,\n', '        uint256 _airdropEndTime\n', '    ) public {\n', '        token = LibraToken(_token);\n', '        airdropStartTime = _airdropStartTime;\n', '        airdropEndTime = _airdropEndTime;\n', '\n', '    }\n', '\n', '\n', '    function airdropTokens(address _recipient, uint256 amount) public onlyOwnerOrAdmin onlyWhileAirdropPhaseOpen {\n', '        require(amount > 0);\n', '\n', '        uint256 lbaBalance = token.balanceOf(this);\n', '\n', '        require(lbaBalance >= amount);\n', '\n', '        require(token.transfer(_recipient, amount));\n', '\n', '\n', '        //put address into has done list\n', '        airdropDoneList.push(_recipient);\n', '\n', '        //update airdropped actually\n', '        uint256 airDropAmountThisAddr = 0;\n', '        if(airdropDoneAmountMap[_recipient] > 0){\n', '            airDropAmountThisAddr = airdropDoneAmountMap[_recipient].add(amount);\n', '        }else{\n', '            airDropAmountThisAddr = amount;\n', '        }\n', '\n', '        airdropDoneAmountMap[_recipient] = airDropAmountThisAddr;\n', '\n', '        distributedTotal = distributedTotal.add(amount);\n', '\n', '        Airdrop(_recipient, amount);\n', '\n', '    }\n', '\n', "    //batch airdrop, key-- the receiver's address, value -- receiver's amount\n", '    function airdropTokensBatch(address[] receivers, uint256[] amounts) public onlyOwnerOrAdmin onlyWhileAirdropPhaseOpen{\n', '        require(receivers.length > 0 && receivers.length == amounts.length);\n', '        for (uint256 i = 0; i < receivers.length; i++){\n', '            airdropTokens(receivers[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function transferOutBalance() public onlyOwner view returns (bool){\n', '        address creator = msg.sender;\n', '        uint256 _balanceOfThis = token.balanceOf(this);\n', '        if(_balanceOfThis > 0){\n', '            LibraToken(token).approve(this, _balanceOfThis);\n', '            LibraToken(token).transferFrom(this, creator, _balanceOfThis);\n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '    }\n', '\n', '    //How many tokens are left without payment\n', '    function balanceOfThis() public view returns (uint256){\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    //how many tokens have been distributed\n', '    function getDistributedTotal() public view returns (uint256){\n', '        return distributedTotal;\n', '    }\n', '\n', '\n', '    function isAdmin(address _addr) public view returns (bool){\n', '        return airdropAdmins[_addr];\n', '    }\n', '\n', '    function updateAirdropEndTime(uint256 _newEndTime) public onlyOwnerOrAdmin {\n', '        UpdateEndTime(msg.sender, airdropEndTime, _newEndTime);\n', '        airdropEndTime = _newEndTime;\n', '    }\n', '\n', '    //get all addresses that has been airdropped\n', '    function getDoneAddresses() public constant returns (address[]){\n', '        return airdropDoneList;\n', '    }\n', '\n', "    //get the amount has been dropped by user's address\n", '    function getDoneAirdropAmount(address _addr) public view returns (uint256){\n', '        return airdropDoneAmountMap[_addr];\n', '    }\n', '\n', '}']
