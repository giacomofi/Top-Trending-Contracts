['/**\n', ' *   Golden Union - Blockchain platform for direct investment in gold mining\n', ' *   https://goldenunion.org\n', ' *   ----------------------------\n', ' *   telegram @golden_union\n', ' *   developed by Inout Corp\n', ' */\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) \n', '        public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '            address indexed owner,\n', '            address indexed spender,\n', '            uint256 value\n', '    );\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function transferWholeTokens(address _to, uint256 _value) public returns (bool) {\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        value = value.mul(1 ether);\n', '        return transfer(_to, value);\n', '    }\n', '\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '      public\n', '      view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract GoldenUnitToken is StandardToken {\n', '    string public constant name = "Golden Unite Token";\n', '    string public constant symbol = "GUT";\n', '    uint32 public constant decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = 50000 * 1 ether;\n', '    address public CrowdsaleAddress;\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    \n', '    constructor(address _CrowdsaleAddress) public {\n', '      \n', '        CrowdsaleAddress = _CrowdsaleAddress;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;      \n', '    }\n', '  \n', '    modifier onlyOwner() {\n', '        require(msg.sender == CrowdsaleAddress);\n', '        _;\n', '    }\n', '\n', '    function acceptTokens(address _from, uint256 _value) public onlyOwner returns (bool){\n', '        require (balances[_from] >= _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_value);\n', '        emit Transfer(_from, CrowdsaleAddress, _value);\n', '        return true;\n', '    }\n', '  \n', '    function mint(uint256 _amount)  public onlyOwner returns (bool){\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_amount);\n', '        emit Mint(CrowdsaleAddress, _amount);\n', '        emit Transfer(address(0), CrowdsaleAddress, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function() external payable {\n', '        // The token contract don`t receive ether\n', '        revert();\n', '    }  \n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address candidate;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        candidate = newOwner;\n', '    }\n', '\n', '    function confirmOwnership() public {\n', '        require(candidate == msg.sender);\n', '        owner = candidate;\n', '        delete candidate;\n', '    }\n', '\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint; \n', '    address myAddress = this;\n', '    uint public  saleRate = 30;  //tokens for 1 ether\n', '    uint public  purchaseRate = 30;  //tokens for 1 ether\n', '    bool public purchaseTokens = false;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event SaleRates(uint256 indexed value);\n', '    event PurchaseRates(uint256 indexed value);\n', '    event Withdraw(address indexed from, address indexed to, uint256 amount);\n', '\n', '    modifier purchaseAlloved() {\n', '        // The contract accept tokens\n', '        require(purchaseTokens);\n', '        _;\n', '    }\n', '\n', '\n', '    GoldenUnitToken public token = new GoldenUnitToken(myAddress);\n', '  \n', '\n', '    function mintTokens(uint256 _amount) public onlyOwner returns (bool){\n', '        //_amount in tokens. 1 = 1 token\n', '        uint256 amount = _amount;\n', '        require (amount <= 1000000);\n', '        amount = amount.mul(1 ether);\n', '        token.mint(amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function giveTokens(address _newInvestor, uint256 _value) public onlyOwner payable {\n', '        // the function give tokens to new investors\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (_newInvestor != address(0));\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        token.transfer(_newInvestor, value);\n', '    }  \n', '    \n', '    function takeTokens(address _Investor, uint256 _value) public onlyOwner payable {\n', '        // the function take tokens from users to contract\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (_Investor != address(0));\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        token.acceptTokens(_Investor, value);    \n', '    }  \n', '\n', ' \n', ' \n', '    function setSaleRate(uint256 newRate) public onlyOwner {\n', '        saleRate = newRate;\n', '        emit SaleRates(newRate);\n', '    }\n', '  \n', '    function setPurchaseRate(uint256 newRate) public onlyOwner {\n', '        purchaseRate = newRate;\n', '        emit PurchaseRates(newRate);\n', '    }  \n', '   \n', '    function startPurchaseTokens() public onlyOwner {\n', '        purchaseTokens = true;\n', '    }\n', '\n', '    function stopPurchaseTokens() public onlyOwner {\n', '        purchaseTokens = false;\n', '    }\n', '  \n', '    function purchase (uint256 _valueTokens) public purchaseAlloved payable {\n', '        // function purchase tokens and send ether to sender\n', '        address profitOwner = msg.sender;\n', '        require(profitOwner != address(0));\n', '        require(_valueTokens > 0);\n', '        uint256 valueTokens = _valueTokens;\n', '        valueTokens = valueTokens.mul(1 ether);\n', '        // check client tokens balance\n', '        require (token.balanceOf(profitOwner) >= valueTokens);\n', '        // calc amount of ether\n', '        require (purchaseRate>0);\n', '        uint256 valueEther = valueTokens.div(purchaseRate);\n', '        // check balance contract\n', '        require (myAddress.balance >= valueEther);\n', '        // transfer tokens\n', '        if (token.acceptTokens(msg.sender, valueTokens)){\n', '        // transfer ether\n', '            profitOwner.transfer(valueEther);\n', '        }\n', '    }\n', '  \n', '    function WithdrawProfit (address _to, uint256 _value) public onlyOwner payable {\n', '        // function withdraw prohit\n', '        require (myAddress.balance >= _value);\n', '        require(_to != address(0));\n', '        _to.transfer(_value);\n', '        emit Withdraw(msg.sender, _to, _value);\n', '    }\n', ' \n', '    function saleTokens() internal {\n', '        require (msg.value >= 1 ether);  //minimum 1 ether\n', '        uint tokens = saleRate.mul(msg.value);\n', '        token.transfer(msg.sender, tokens);\n', '    }\n', ' \n', '    function() external payable {\n', '        saleTokens();\n', '    }    \n', '}']
['/**\n', ' *   Golden Union - Blockchain platform for direct investment in gold mining\n', ' *   https://goldenunion.org\n', ' *   ----------------------------\n', ' *   telegram @golden_union\n', ' *   developed by Inout Corp\n', ' */\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) \n', '        public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '            address indexed owner,\n', '            address indexed spender,\n', '            uint256 value\n', '    );\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function transferWholeTokens(address _to, uint256 _value) public returns (bool) {\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        value = value.mul(1 ether);\n', '        return transfer(_to, value);\n', '    }\n', '\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '      public\n', '      view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '      public\n', '      returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract GoldenUnitToken is StandardToken {\n', '    string public constant name = "Golden Unite Token";\n', '    string public constant symbol = "GUT";\n', '    uint32 public constant decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = 50000 * 1 ether;\n', '    address public CrowdsaleAddress;\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    \n', '    constructor(address _CrowdsaleAddress) public {\n', '      \n', '        CrowdsaleAddress = _CrowdsaleAddress;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;      \n', '    }\n', '  \n', '    modifier onlyOwner() {\n', '        require(msg.sender == CrowdsaleAddress);\n', '        _;\n', '    }\n', '\n', '    function acceptTokens(address _from, uint256 _value) public onlyOwner returns (bool){\n', '        require (balances[_from] >= _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_value);\n', '        emit Transfer(_from, CrowdsaleAddress, _value);\n', '        return true;\n', '    }\n', '  \n', '    function mint(uint256 _amount)  public onlyOwner returns (bool){\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_amount);\n', '        emit Mint(CrowdsaleAddress, _amount);\n', '        emit Transfer(address(0), CrowdsaleAddress, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function() external payable {\n', '        // The token contract don`t receive ether\n', '        revert();\n', '    }  \n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address candidate;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        candidate = newOwner;\n', '    }\n', '\n', '    function confirmOwnership() public {\n', '        require(candidate == msg.sender);\n', '        owner = candidate;\n', '        delete candidate;\n', '    }\n', '\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint; \n', '    address myAddress = this;\n', '    uint public  saleRate = 30;  //tokens for 1 ether\n', '    uint public  purchaseRate = 30;  //tokens for 1 ether\n', '    bool public purchaseTokens = false;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event SaleRates(uint256 indexed value);\n', '    event PurchaseRates(uint256 indexed value);\n', '    event Withdraw(address indexed from, address indexed to, uint256 amount);\n', '\n', '    modifier purchaseAlloved() {\n', '        // The contract accept tokens\n', '        require(purchaseTokens);\n', '        _;\n', '    }\n', '\n', '\n', '    GoldenUnitToken public token = new GoldenUnitToken(myAddress);\n', '  \n', '\n', '    function mintTokens(uint256 _amount) public onlyOwner returns (bool){\n', '        //_amount in tokens. 1 = 1 token\n', '        uint256 amount = _amount;\n', '        require (amount <= 1000000);\n', '        amount = amount.mul(1 ether);\n', '        token.mint(amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function giveTokens(address _newInvestor, uint256 _value) public onlyOwner payable {\n', '        // the function give tokens to new investors\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (_newInvestor != address(0));\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        token.transfer(_newInvestor, value);\n', '    }  \n', '    \n', '    function takeTokens(address _Investor, uint256 _value) public onlyOwner payable {\n', '        // the function take tokens from users to contract\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (_Investor != address(0));\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        token.acceptTokens(_Investor, value);    \n', '    }  \n', '\n', ' \n', ' \n', '    function setSaleRate(uint256 newRate) public onlyOwner {\n', '        saleRate = newRate;\n', '        emit SaleRates(newRate);\n', '    }\n', '  \n', '    function setPurchaseRate(uint256 newRate) public onlyOwner {\n', '        purchaseRate = newRate;\n', '        emit PurchaseRates(newRate);\n', '    }  \n', '   \n', '    function startPurchaseTokens() public onlyOwner {\n', '        purchaseTokens = true;\n', '    }\n', '\n', '    function stopPurchaseTokens() public onlyOwner {\n', '        purchaseTokens = false;\n', '    }\n', '  \n', '    function purchase (uint256 _valueTokens) public purchaseAlloved payable {\n', '        // function purchase tokens and send ether to sender\n', '        address profitOwner = msg.sender;\n', '        require(profitOwner != address(0));\n', '        require(_valueTokens > 0);\n', '        uint256 valueTokens = _valueTokens;\n', '        valueTokens = valueTokens.mul(1 ether);\n', '        // check client tokens balance\n', '        require (token.balanceOf(profitOwner) >= valueTokens);\n', '        // calc amount of ether\n', '        require (purchaseRate>0);\n', '        uint256 valueEther = valueTokens.div(purchaseRate);\n', '        // check balance contract\n', '        require (myAddress.balance >= valueEther);\n', '        // transfer tokens\n', '        if (token.acceptTokens(msg.sender, valueTokens)){\n', '        // transfer ether\n', '            profitOwner.transfer(valueEther);\n', '        }\n', '    }\n', '  \n', '    function WithdrawProfit (address _to, uint256 _value) public onlyOwner payable {\n', '        // function withdraw prohit\n', '        require (myAddress.balance >= _value);\n', '        require(_to != address(0));\n', '        _to.transfer(_value);\n', '        emit Withdraw(msg.sender, _to, _value);\n', '    }\n', ' \n', '    function saleTokens() internal {\n', '        require (msg.value >= 1 ether);  //minimum 1 ether\n', '        uint tokens = saleRate.mul(msg.value);\n', '        token.transfer(msg.sender, tokens);\n', '    }\n', ' \n', '    function() external payable {\n', '        saleTokens();\n', '    }    \n', '}']
