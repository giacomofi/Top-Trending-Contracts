['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * Import SafeMath source from OpenZeppelin\n', ' * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' */\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface Token {\n', '\n', '    /**\n', '     * @return total amount of tokens\n', '     * function totalSupply() public constant returns (uint256 supply);\n', '     * do not declare totalSupply() here, see https://github.com/OpenZeppelin/zeppelin-solidity/issues/434\n', '     */\n', '\n', '    /**\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) external constant returns (uint256 balance);\n', '\n', '    /**\n', '     * @notice send `_value` token to `_to` from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of wei to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', '/** @title Coinweb (XCOe) contract **/\n', '\n', 'contract Coinweb is Token {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Coinweb";\n', '    string public constant symbol = "XCOe";\n', '    uint256 public constant decimals = 8;\n', '    uint256 public constant totalSupply = 2400000000 * 10**decimals;\n', '    address public founder = 0x51Db57ABe0Fc0393C0a81c0656C7291aB7Dc0fDe; // Founder&#39;s address\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    /**\n', '     * If transfers are locked, only the contract founder can send funds.\n', '     * Contract starts its lifecycle in a locked transfer state.\n', '     */\n', '    bool public transfersAreLocked = true;\n', '\n', '    /**\n', '     * Construct Coinweb contract.\n', '     * Set the founder balance as the total supply and emit Transfer event.\n', '     */\n', '    constructor() public {\n', '        balances[founder] = totalSupply;\n', '        emit Transfer(address(0), founder, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * Modifier to check whether transfers are unlocked or the\n', '     * founder is sending the funds\n', '     */\n', '    modifier canTransfer() {\n', '        require(msg.sender == founder || !transfersAreLocked);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Modifier to allow only the founder to perform some contract call.\n', '     */\n', '    modifier onlyFounder() {\n', '        require(msg.sender == founder);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public canTransfer returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * Set transfer locking state. Effectively locks/unlocks token sending.\n', '     * @param _transfersAreLocked Boolean whether transfers are locked or not\n', '     * @return Whether the transaction was successful or not\n', '     */\n', '    function setTransferLock(bool _transfersAreLocked) public onlyFounder returns (bool) {\n', '        transfersAreLocked = _transfersAreLocked;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Contract calls revert on public method as it&#39;s not supposed to deal with\n', '     * Ether and should not have payable methods.\n', '     */\n', '    function() public {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * Import SafeMath source from OpenZeppelin\n', ' * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' */\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface Token {\n', '\n', '    /**\n', '     * @return total amount of tokens\n', '     * function totalSupply() public constant returns (uint256 supply);\n', '     * do not declare totalSupply() here, see https://github.com/OpenZeppelin/zeppelin-solidity/issues/434\n', '     */\n', '\n', '    /**\n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) external constant returns (uint256 balance);\n', '\n', '    /**\n', '     * @notice send `_value` token to `_to` from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of wei to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    /**\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', '/** @title Coinweb (XCOe) contract **/\n', '\n', 'contract Coinweb is Token {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Coinweb";\n', '    string public constant symbol = "XCOe";\n', '    uint256 public constant decimals = 8;\n', '    uint256 public constant totalSupply = 2400000000 * 10**decimals;\n', "    address public founder = 0x51Db57ABe0Fc0393C0a81c0656C7291aB7Dc0fDe; // Founder's address\n", '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    /**\n', '     * If transfers are locked, only the contract founder can send funds.\n', '     * Contract starts its lifecycle in a locked transfer state.\n', '     */\n', '    bool public transfersAreLocked = true;\n', '\n', '    /**\n', '     * Construct Coinweb contract.\n', '     * Set the founder balance as the total supply and emit Transfer event.\n', '     */\n', '    constructor() public {\n', '        balances[founder] = totalSupply;\n', '        emit Transfer(address(0), founder, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * Modifier to check whether transfers are unlocked or the\n', '     * founder is sending the funds\n', '     */\n', '    modifier canTransfer() {\n', '        require(msg.sender == founder || !transfersAreLocked);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Modifier to allow only the founder to perform some contract call.\n', '     */\n', '    modifier onlyFounder() {\n', '        require(msg.sender == founder);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public canTransfer returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * Set transfer locking state. Effectively locks/unlocks token sending.\n', '     * @param _transfersAreLocked Boolean whether transfers are locked or not\n', '     * @return Whether the transaction was successful or not\n', '     */\n', '    function setTransferLock(bool _transfersAreLocked) public onlyFounder returns (bool) {\n', '        transfersAreLocked = _transfersAreLocked;\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * Contract calls revert on public method as it's not supposed to deal with\n", '     * Ether and should not have payable methods.\n', '     */\n', '    function() public {\n', '        revert();\n', '    }\n', '}']
