['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply()public view returns (uint256 total_Supply);\n', '  function balanceOf(address who)public view returns (uint256);\n', '  function allowance(address owner, address spender)public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value)public returns (bool ok);\n', '  function approve(address spender, uint256 value)public returns (bool ok);\n', '  function transfer(address to, uint256 value)public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract WGP is ERC20 { \n', '    using SafeMath for uint256;\n', '    //--- Token configurations ----// \n', '    string public constant name = "W GREEN PAY";\n', '    string public constant symbol = "WGP";\n', '    uint8 public constant decimals = 18;\n', '    uint public maxCap = 1000000000 ether;\n', '    \n', '    //--- Token allocations -------//\n', '    uint256 public _totalsupply;\n', '    uint256 public mintedTokens;\n', '\n', '    //--- Address -----------------//\n', '    address public owner; //Management\n', '    address public ethFundMain;\n', '   \n', '    //--- Milestones --------------//\n', '    uint256 public icoStartDate = 1538366400; // 01-10-2018 12:00 pm\n', '    uint256 public icoEndDate = 1539489600; // 14-10-2018 12:00 pm\n', '    \n', '    //--- Variables ---------------//\n', '    bool public lockstatus = true;\n', '    bool public stopped = false;\n', '    \n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '    event Mint(address indexed from, address indexed to, uint256 amount);\n', '    event Burn(address indexed from, uint256 amount);\n', '    \n', '    modifier onlyOwner() {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyICO() {\n', '        require(now >= icoStartDate && now < icoEndDate);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFinishedICO() {\n', '        require(now >= icoEndDate);\n', '        _;\n', '    }\n', '    \n', '    constructor() public\n', '    {\n', '        owner = msg.sender;\n', '        ethFundMain = 0x67fd4721d490A5E609cF8e09FCE0a217b91F1546;\n', '    }\n', '\n', '    function () public payable onlyICO {\n', '        \n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 total_Supply) {\n', '        total_Supply = _totalsupply;\n', '    }\n', '    \n', '    function balanceOf(address _owner)public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom( address _from, address _to, uint256 _amount ) public onlyFinishedICO returns (bool success)  {\n', '        require( _to != 0x0);\n', '        require(!lockstatus);\n', '        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n', '        balances[_from] = (balances[_from]).sub(_amount);\n', '        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n', '        balances[_to] = (balances[_to]).add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _amount)public onlyFinishedICO returns (bool success)  {\n', '        require(!lockstatus);\n', '        require( _spender != 0x0);\n', '        require(balances[msg.sender] >= _amount);\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '  \n', '    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n', '        require( _owner != 0x0 && _spender !=0x0);\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount)public onlyFinishedICO returns (bool success) {\n', '        require(!lockstatus);\n', '        require( _to != 0x0);\n', '        require(balances[msg.sender] >= _amount && _amount >= 0);\n', '        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n', '        balances[_to] = (balances[_to]).add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 value) public onlyOwner returns (bool success) {\n', '        uint256 _value = value.mul(10 ** 18);\n', '        require(balances[msg.sender] >= _value);   \n', '        balances[msg.sender] = (balances[msg.sender]).sub(_value);            \n', '        _totalsupply = _totalsupply.sub(_value);                     \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stopTransferToken() external onlyOwner onlyFinishedICO {\n', '        require(!lockstatus);\n', '        lockstatus = true;\n', '    }\n', '\n', '    function startTransferToken() external onlyOwner onlyFinishedICO {\n', '        require(lockstatus);\n', '        lockstatus = false;\n', '    }\n', '\n', '    function manualMint(address receiver, uint256 _value) public onlyOwner returns (bool){\n', '        uint256 value = _value.mul(10 ** 18);\n', '        require(receiver != 0x0 && _value > 0);\n', '\n', '        balances[receiver] = balances[receiver].add(value);\n', '        _totalsupply = _totalsupply.add(value);\n', '        mintedTokens = mintedTokens.add(value);\n', '\n', '        require(_totalsupply <= maxCap);\n', '        emit Mint(owner, receiver, value);\n', '        emit Transfer(0, receiver, value);\n', '    }\n', '    \n', '    function haltCrowdSale() external onlyOwner onlyICO {\n', '        require(!stopped);\n', '        stopped = true;\n', '    }\n', '\n', '    function resumeCrowdSale() external onlyOwner onlyICO {\n', '        require(stopped);\n', '        stopped = false;\n', '    }\n', '    \n', '    function changeReceiveWallet(address newAddress) external onlyOwner {\n', '        require(newAddress != 0x0);\n', '        ethFundMain = newAddress;\n', '    }\n', '\n', '\tfunction assignOwnership(address newOwner) public onlyOwner {\n', '\t    require(newOwner != 0x0);\n', '\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\n', '\t    balances[owner] = 0;\n', '\t    owner = newOwner;\n', '\t    emit Transfer(msg.sender, newOwner, balances[newOwner]);\n', '\t}\n', '\n', '    function forwardFunds() external onlyOwner { \n', '        address myAddress = this;\n', '        ethFundMain.transfer(myAddress.balance);\n', '    }\n', '}']
['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply()public view returns (uint256 total_Supply);\n', '  function balanceOf(address who)public view returns (uint256);\n', '  function allowance(address owner, address spender)public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value)public returns (bool ok);\n', '  function approve(address spender, uint256 value)public returns (bool ok);\n', '  function transfer(address to, uint256 value)public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract WGP is ERC20 { \n', '    using SafeMath for uint256;\n', '    //--- Token configurations ----// \n', '    string public constant name = "W GREEN PAY";\n', '    string public constant symbol = "WGP";\n', '    uint8 public constant decimals = 18;\n', '    uint public maxCap = 1000000000 ether;\n', '    \n', '    //--- Token allocations -------//\n', '    uint256 public _totalsupply;\n', '    uint256 public mintedTokens;\n', '\n', '    //--- Address -----------------//\n', '    address public owner; //Management\n', '    address public ethFundMain;\n', '   \n', '    //--- Milestones --------------//\n', '    uint256 public icoStartDate = 1538366400; // 01-10-2018 12:00 pm\n', '    uint256 public icoEndDate = 1539489600; // 14-10-2018 12:00 pm\n', '    \n', '    //--- Variables ---------------//\n', '    bool public lockstatus = true;\n', '    bool public stopped = false;\n', '    \n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '    event Mint(address indexed from, address indexed to, uint256 amount);\n', '    event Burn(address indexed from, uint256 amount);\n', '    \n', '    modifier onlyOwner() {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyICO() {\n', '        require(now >= icoStartDate && now < icoEndDate);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFinishedICO() {\n', '        require(now >= icoEndDate);\n', '        _;\n', '    }\n', '    \n', '    constructor() public\n', '    {\n', '        owner = msg.sender;\n', '        ethFundMain = 0x67fd4721d490A5E609cF8e09FCE0a217b91F1546;\n', '    }\n', '\n', '    function () public payable onlyICO {\n', '        \n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 total_Supply) {\n', '        total_Supply = _totalsupply;\n', '    }\n', '    \n', '    function balanceOf(address _owner)public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom( address _from, address _to, uint256 _amount ) public onlyFinishedICO returns (bool success)  {\n', '        require( _to != 0x0);\n', '        require(!lockstatus);\n', '        require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n', '        balances[_from] = (balances[_from]).sub(_amount);\n', '        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n', '        balances[_to] = (balances[_to]).add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _amount)public onlyFinishedICO returns (bool success)  {\n', '        require(!lockstatus);\n', '        require( _spender != 0x0);\n', '        require(balances[msg.sender] >= _amount);\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '  \n', '    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n', '        require( _owner != 0x0 && _spender !=0x0);\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount)public onlyFinishedICO returns (bool success) {\n', '        require(!lockstatus);\n', '        require( _to != 0x0);\n', '        require(balances[msg.sender] >= _amount && _amount >= 0);\n', '        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n', '        balances[_to] = (balances[_to]).add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 value) public onlyOwner returns (bool success) {\n', '        uint256 _value = value.mul(10 ** 18);\n', '        require(balances[msg.sender] >= _value);   \n', '        balances[msg.sender] = (balances[msg.sender]).sub(_value);            \n', '        _totalsupply = _totalsupply.sub(_value);                     \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stopTransferToken() external onlyOwner onlyFinishedICO {\n', '        require(!lockstatus);\n', '        lockstatus = true;\n', '    }\n', '\n', '    function startTransferToken() external onlyOwner onlyFinishedICO {\n', '        require(lockstatus);\n', '        lockstatus = false;\n', '    }\n', '\n', '    function manualMint(address receiver, uint256 _value) public onlyOwner returns (bool){\n', '        uint256 value = _value.mul(10 ** 18);\n', '        require(receiver != 0x0 && _value > 0);\n', '\n', '        balances[receiver] = balances[receiver].add(value);\n', '        _totalsupply = _totalsupply.add(value);\n', '        mintedTokens = mintedTokens.add(value);\n', '\n', '        require(_totalsupply <= maxCap);\n', '        emit Mint(owner, receiver, value);\n', '        emit Transfer(0, receiver, value);\n', '    }\n', '    \n', '    function haltCrowdSale() external onlyOwner onlyICO {\n', '        require(!stopped);\n', '        stopped = true;\n', '    }\n', '\n', '    function resumeCrowdSale() external onlyOwner onlyICO {\n', '        require(stopped);\n', '        stopped = false;\n', '    }\n', '    \n', '    function changeReceiveWallet(address newAddress) external onlyOwner {\n', '        require(newAddress != 0x0);\n', '        ethFundMain = newAddress;\n', '    }\n', '\n', '\tfunction assignOwnership(address newOwner) public onlyOwner {\n', '\t    require(newOwner != 0x0);\n', '\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\n', '\t    balances[owner] = 0;\n', '\t    owner = newOwner;\n', '\t    emit Transfer(msg.sender, newOwner, balances[newOwner]);\n', '\t}\n', '\n', '    function forwardFunds() external onlyOwner { \n', '        address myAddress = this;\n', '        ethFundMain.transfer(myAddress.balance);\n', '    }\n', '}']
