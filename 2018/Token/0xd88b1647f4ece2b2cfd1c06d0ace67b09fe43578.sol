['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    Revoked();\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', '  * @title  RateToken\n', '  * @dev Rate Token Contract implementation \n', '*/\n', 'contract RateToken is Ownable {\n', '    using SafeMath for uint256;\n', '    //struct that holds values for specific discount\n', '    struct Discount {\n', '        //min number of tokens expected to be bought\n', '        uint256 minTokens;\n', '        //discount percentage\n', '        uint256 percent;\n', '    }\n', '    //Discount per address\n', '    mapping(address => Discount) private discounts;\n', '    //Token conversion rate\n', '    uint256 public rate;\n', '\n', '   /**\n', '    * @dev Event which is fired when Rate is set\n', '    */\n', '    event RateSet(uint256 rate);\n', '\n', '   \n', '    function RateToken(uint256 _initialRate) public {\n', '        setRate(_initialRate);\n', '    }\n', '\n', '   /**\n', '   * @dev Function that sets the conversion rate\n', '   * @param _rateInWei The amount of rate to be set\n', '    */\n', '    function setRate(uint _rateInWei) onlyOwner public {\n', '        require(_rateInWei > 0);\n', '        rate = _rateInWei;\n', '        RateSet(rate);\n', '    }\n', '\n', '   /**\n', '   * @dev Function for adding discount for concrete buyer, only available for the owner.  \n', '   * @param _buyer The address of the buyer.\n', '   * @param _minTokens The amount of tokens.\n', '   * @param _percent The amount of discount in percents.\n', '   * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    \n', '    // NOTE FROM BLOCKERA - PERCENTAGE COULD BE UINT8 (0 - 255)\n', '    function addDiscount(address _buyer, uint256 _minTokens, uint256 _percent) public onlyOwner returns (bool) { \n', '        require(_buyer != address(0));\n', '        require(_minTokens > 0);\n', '        require(_percent > 0);\n', '        require(_percent < 100);\n', '        Discount memory discount;\n', '        discount.minTokens = _minTokens;\n', '        discount.percent = _percent;\n', '        discounts[_buyer] = discount;\n', '        return true;\n', '    }\n', '\n', '   /**\n', '   * @dev Function to remove discount.\n', '   * @param _buyer The address to remove the discount from.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '    function removeDiscount(address _buyer) public onlyOwner {\n', '        require(_buyer != address(0));\n', '        removeExistingDiscount(_buyer);\n', '    }\n', '\n', '    /**\n', '    * @dev Public Function that calculates the amount in wei for specific number of tokens\n', '    * @param _buyer address.\n', '    * @param _tokens The amount of tokens.\n', '    * @return uint256 the price for tokens in wei.\n', '    */\n', '    function calculateWeiNeeded(address _buyer, uint _tokens) public view returns (uint256) {\n', '        require(_buyer != address(0));\n', '        require(_tokens > 0);\n', '\n', '        Discount memory discount = discounts[_buyer];\n', '        require(_tokens >= discount.minTokens);\n', '        if (discount.minTokens == 0) {\n', '            return _tokens.div(rate);\n', '        }\n', '\n', '        uint256 costOfTokensNormally = _tokens.div(rate);\n', '        return costOfTokensNormally.mul(100 - discount.percent).div(100);\n', '\n', '    }\n', '    \n', '    /**\n', '     * @dev Removes discount for concrete buyer.\n', '     * @param _buyer the address for which the discount will be removed.\n', '     */\n', '    function removeExistingDiscount(address _buyer) internal {\n', '        delete(discounts[_buyer]);\n', '    }\n', '\n', '    /**\n', '    * @dev Function that converts wei into tokens.\n', '    * @param _buyer address of the buyer.\n', '    * @param _buyerAmountInWei amount of ether in wei. \n', '    * @return uint256 value of the calculated tokens.\n', '    */\n', '    function calculateTokens(address _buyer, uint256 _buyerAmountInWei) internal view returns (uint256) {\n', '        Discount memory discount = discounts[_buyer];\n', '        if (discount.minTokens == 0) {\n', '            return _buyerAmountInWei.mul(rate);\n', '        }\n', '\n', '        uint256 normalTokens = _buyerAmountInWei.mul(rate);\n', '        uint256 discountBonus = normalTokens.mul(discount.percent).div(100);\n', '        uint256 tokens = normalTokens + discountBonus;\n', '        require(tokens >= discount.minTokens);\n', '        return tokens;\n', '    }  \n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Caerus token.\n', ' * @dev Implementation of the Caerus token.\n', ' */\n', 'contract CaerusToken is RateToken, PausableToken, DetailedERC20 {\n', '    mapping (address => uint256) public contributions;\n', '    uint256 public tokenSold = 0; \n', '    uint256 public weiRaised = 0; \n', '    address transferAddress;\n', '    \n', '    mapping (address => TokenVesting) public vestedTokens;\n', '\n', '    event TokensBought(address indexed buyer, uint256 tokens);\n', '    event Contribution(address indexed buyer, uint256 amountInWei);\n', '    event VestedTokenCreated(address indexed beneficiary, uint256 duration, uint256 tokens);\n', '    event TokensSpent(address indexed tokensHolder, uint256 tokens);\n', '\n', '    function CaerusToken(address _transferAddress, uint _initialRate) public RateToken(_initialRate) DetailedERC20("Caerus Token", "CAER", 18) {\n', '        totalSupply_ = 73000000 * 10 ** 18;\n', '        transferAddress = _transferAddress;\n', '        balances[owner] = totalSupply_;\n', '  \t}\n', '    /**\n', '    * @dev Sets the address to transfer funds.\n', '    * @param _transferAddress An address to transfer funds.\n', '    */\n', '    function setTransferAddress(address _transferAddress) onlyOwner public {\n', '        transferAddress = _transferAddress;\n', '    }\n', '    /**\n', '    * @dev Fallback function when receiving Ether.\n', '    */\n', '    function() payable public {\n', '        buyTokens();\n', '    }\n', '\n', '    /**\n', '    * @dev Allow addresses to buy tokens.\n', '    */\n', '    function buyTokens() payable public whenNotPaused {\n', '        require(msg.value > 0);\n', '        \n', '        uint256 tokens = calculateTokens(msg.sender, msg.value);\n', '        transferTokens(owner, msg.sender, tokens);\n', '\n', '        markTokenSold(tokens);\n', '        markContribution();\n', '        removeExistingDiscount(msg.sender);\n', '        transferAddress.transfer(msg.value);\n', '        TokensBought(msg.sender, tokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from owner to specific address, available only for the owner.\n', '    * @param _to The address where tokens are transfered.\n', '    * @param _tokens Amount of tokens that need to be transfered.\n', '    * @return Boolean representing the successful execution of the function.\n', '    */\n', '    // Owner could use regular transfer method if they wanted to\n', '    function markTransferTokens(address _to, uint256 _tokens) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        transferTokens(owner, _to, _tokens);\n', '        markTokenSold(_tokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred.\n', '   * @param _start time when vesting starts.\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest.\n', '   * @param _duration duration in seconds of the period in which the tokens will vest.\n', '   * @param _tokens Amount of tokens that need to be vested.\n', '   * @return Boolean representing the successful execution of the function.\n', '   */\n', '    function createVestedToken(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, uint256 _tokens) onlyOwner public returns (bool) {\n', '        TokenVesting vestedToken = new TokenVesting(_beneficiary, _start, _cliff, _duration, false);\n', '        vestedTokens[_beneficiary] = vestedToken;\n', '        address vestedAddress = address(vestedToken);\n', '        transferTokens(owner, vestedAddress, _tokens);\n', '        VestedTokenCreated(_beneficiary, _duration, _tokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from address to owner address.\n', '    * @param _tokens Amount of tokens that need to be transfered.\n', '    * @return Boolean representing the successful execution of the function.\n', '    */\n', '    function spendToken(uint256 _tokens) public returns (bool) {\n', '        transferTokens(msg.sender, owner, _tokens);\n', '        TokensSpent(msg.sender, _tokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    * @return Boolean representing the successful execution of the function.\n', '    */\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        //  To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n', '\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another.\n', '    * @param _from The address which you want to send tokens from.\n', '    * @param _to The address which you want to transfer to.\n', '    * @param _tokens the amount of tokens to be transferred.\n', '    */\n', '    function transferTokens(address _from, address _to, uint256 _tokens) private {\n', '        require(_tokens > 0);\n', '        require(balances[_from] >= _tokens);\n', '        \n', '        balances[_from] = balances[_from].sub(_tokens);\n', '        balances[_to] = balances[_to].add(_tokens);\n', '        Transfer(_from, _to, _tokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Adds or updates contributions\n', '    */\n', '    function markContribution() private {\n', '        contributions[msg.sender] = contributions[msg.sender].add(msg.value);\n', '        weiRaised = weiRaised.add(msg.value);\n', '        Contribution(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '    * @dev Increase token sold amount.\n', '    * @param _tokens Amount of tokens that are sold.\n', '    */\n', '    function markTokenSold(uint256 _tokens) private {\n', '        tokenSold = tokenSold.add(_tokens);\n', '    }\n', '    \n', '    /**\n', '    * @dev Owner can transfer out any accidentally sent Caerus tokens.\n', '    * @param _tokenAddress The address which you want to send tokens from.\n', '    * @param _tokens the amount of tokens to be transferred.\n', '    */    \n', '    function transferAnyCaerusToken(address _tokenAddress, uint _tokens) public onlyOwner returns (bool success) {\n', '        transferTokens(_tokenAddress, owner, _tokens);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    Revoked();\n', '  }\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', '  * @title  RateToken\n', '  * @dev Rate Token Contract implementation \n', '*/\n', 'contract RateToken is Ownable {\n', '    using SafeMath for uint256;\n', '    //struct that holds values for specific discount\n', '    struct Discount {\n', '        //min number of tokens expected to be bought\n', '        uint256 minTokens;\n', '        //discount percentage\n', '        uint256 percent;\n', '    }\n', '    //Discount per address\n', '    mapping(address => Discount) private discounts;\n', '    //Token conversion rate\n', '    uint256 public rate;\n', '\n', '   /**\n', '    * @dev Event which is fired when Rate is set\n', '    */\n', '    event RateSet(uint256 rate);\n', '\n', '   \n', '    function RateToken(uint256 _initialRate) public {\n', '        setRate(_initialRate);\n', '    }\n', '\n', '   /**\n', '   * @dev Function that sets the conversion rate\n', '   * @param _rateInWei The amount of rate to be set\n', '    */\n', '    function setRate(uint _rateInWei) onlyOwner public {\n', '        require(_rateInWei > 0);\n', '        rate = _rateInWei;\n', '        RateSet(rate);\n', '    }\n', '\n', '   /**\n', '   * @dev Function for adding discount for concrete buyer, only available for the owner.  \n', '   * @param _buyer The address of the buyer.\n', '   * @param _minTokens The amount of tokens.\n', '   * @param _percent The amount of discount in percents.\n', '   * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    \n', '    // NOTE FROM BLOCKERA - PERCENTAGE COULD BE UINT8 (0 - 255)\n', '    function addDiscount(address _buyer, uint256 _minTokens, uint256 _percent) public onlyOwner returns (bool) { \n', '        require(_buyer != address(0));\n', '        require(_minTokens > 0);\n', '        require(_percent > 0);\n', '        require(_percent < 100);\n', '        Discount memory discount;\n', '        discount.minTokens = _minTokens;\n', '        discount.percent = _percent;\n', '        discounts[_buyer] = discount;\n', '        return true;\n', '    }\n', '\n', '   /**\n', '   * @dev Function to remove discount.\n', '   * @param _buyer The address to remove the discount from.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '    function removeDiscount(address _buyer) public onlyOwner {\n', '        require(_buyer != address(0));\n', '        removeExistingDiscount(_buyer);\n', '    }\n', '\n', '    /**\n', '    * @dev Public Function that calculates the amount in wei for specific number of tokens\n', '    * @param _buyer address.\n', '    * @param _tokens The amount of tokens.\n', '    * @return uint256 the price for tokens in wei.\n', '    */\n', '    function calculateWeiNeeded(address _buyer, uint _tokens) public view returns (uint256) {\n', '        require(_buyer != address(0));\n', '        require(_tokens > 0);\n', '\n', '        Discount memory discount = discounts[_buyer];\n', '        require(_tokens >= discount.minTokens);\n', '        if (discount.minTokens == 0) {\n', '            return _tokens.div(rate);\n', '        }\n', '\n', '        uint256 costOfTokensNormally = _tokens.div(rate);\n', '        return costOfTokensNormally.mul(100 - discount.percent).div(100);\n', '\n', '    }\n', '    \n', '    /**\n', '     * @dev Removes discount for concrete buyer.\n', '     * @param _buyer the address for which the discount will be removed.\n', '     */\n', '    function removeExistingDiscount(address _buyer) internal {\n', '        delete(discounts[_buyer]);\n', '    }\n', '\n', '    /**\n', '    * @dev Function that converts wei into tokens.\n', '    * @param _buyer address of the buyer.\n', '    * @param _buyerAmountInWei amount of ether in wei. \n', '    * @return uint256 value of the calculated tokens.\n', '    */\n', '    function calculateTokens(address _buyer, uint256 _buyerAmountInWei) internal view returns (uint256) {\n', '        Discount memory discount = discounts[_buyer];\n', '        if (discount.minTokens == 0) {\n', '            return _buyerAmountInWei.mul(rate);\n', '        }\n', '\n', '        uint256 normalTokens = _buyerAmountInWei.mul(rate);\n', '        uint256 discountBonus = normalTokens.mul(discount.percent).div(100);\n', '        uint256 tokens = normalTokens + discountBonus;\n', '        require(tokens >= discount.minTokens);\n', '        return tokens;\n', '    }  \n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Caerus token.\n', ' * @dev Implementation of the Caerus token.\n', ' */\n', 'contract CaerusToken is RateToken, PausableToken, DetailedERC20 {\n', '    mapping (address => uint256) public contributions;\n', '    uint256 public tokenSold = 0; \n', '    uint256 public weiRaised = 0; \n', '    address transferAddress;\n', '    \n', '    mapping (address => TokenVesting) public vestedTokens;\n', '\n', '    event TokensBought(address indexed buyer, uint256 tokens);\n', '    event Contribution(address indexed buyer, uint256 amountInWei);\n', '    event VestedTokenCreated(address indexed beneficiary, uint256 duration, uint256 tokens);\n', '    event TokensSpent(address indexed tokensHolder, uint256 tokens);\n', '\n', '    function CaerusToken(address _transferAddress, uint _initialRate) public RateToken(_initialRate) DetailedERC20("Caerus Token", "CAER", 18) {\n', '        totalSupply_ = 73000000 * 10 ** 18;\n', '        transferAddress = _transferAddress;\n', '        balances[owner] = totalSupply_;\n', '  \t}\n', '    /**\n', '    * @dev Sets the address to transfer funds.\n', '    * @param _transferAddress An address to transfer funds.\n', '    */\n', '    function setTransferAddress(address _transferAddress) onlyOwner public {\n', '        transferAddress = _transferAddress;\n', '    }\n', '    /**\n', '    * @dev Fallback function when receiving Ether.\n', '    */\n', '    function() payable public {\n', '        buyTokens();\n', '    }\n', '\n', '    /**\n', '    * @dev Allow addresses to buy tokens.\n', '    */\n', '    function buyTokens() payable public whenNotPaused {\n', '        require(msg.value > 0);\n', '        \n', '        uint256 tokens = calculateTokens(msg.sender, msg.value);\n', '        transferTokens(owner, msg.sender, tokens);\n', '\n', '        markTokenSold(tokens);\n', '        markContribution();\n', '        removeExistingDiscount(msg.sender);\n', '        transferAddress.transfer(msg.value);\n', '        TokensBought(msg.sender, tokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from owner to specific address, available only for the owner.\n', '    * @param _to The address where tokens are transfered.\n', '    * @param _tokens Amount of tokens that need to be transfered.\n', '    * @return Boolean representing the successful execution of the function.\n', '    */\n', '    // Owner could use regular transfer method if they wanted to\n', '    function markTransferTokens(address _to, uint256 _tokens) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        transferTokens(owner, _to, _tokens);\n', '        markTokenSold(_tokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred.\n', '   * @param _start time when vesting starts.\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest.\n', '   * @param _duration duration in seconds of the period in which the tokens will vest.\n', '   * @param _tokens Amount of tokens that need to be vested.\n', '   * @return Boolean representing the successful execution of the function.\n', '   */\n', '    function createVestedToken(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, uint256 _tokens) onlyOwner public returns (bool) {\n', '        TokenVesting vestedToken = new TokenVesting(_beneficiary, _start, _cliff, _duration, false);\n', '        vestedTokens[_beneficiary] = vestedToken;\n', '        address vestedAddress = address(vestedToken);\n', '        transferTokens(owner, vestedAddress, _tokens);\n', '        VestedTokenCreated(_beneficiary, _duration, _tokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from address to owner address.\n', '    * @param _tokens Amount of tokens that need to be transfered.\n', '    * @return Boolean representing the successful execution of the function.\n', '    */\n', '    function spendToken(uint256 _tokens) public returns (bool) {\n', '        transferTokens(msg.sender, owner, _tokens);\n', '        TokensSpent(msg.sender, _tokens);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    * @return Boolean representing the successful execution of the function.\n', '    */\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        //  To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n', '\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another.\n', '    * @param _from The address which you want to send tokens from.\n', '    * @param _to The address which you want to transfer to.\n', '    * @param _tokens the amount of tokens to be transferred.\n', '    */\n', '    function transferTokens(address _from, address _to, uint256 _tokens) private {\n', '        require(_tokens > 0);\n', '        require(balances[_from] >= _tokens);\n', '        \n', '        balances[_from] = balances[_from].sub(_tokens);\n', '        balances[_to] = balances[_to].add(_tokens);\n', '        Transfer(_from, _to, _tokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Adds or updates contributions\n', '    */\n', '    function markContribution() private {\n', '        contributions[msg.sender] = contributions[msg.sender].add(msg.value);\n', '        weiRaised = weiRaised.add(msg.value);\n', '        Contribution(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '    * @dev Increase token sold amount.\n', '    * @param _tokens Amount of tokens that are sold.\n', '    */\n', '    function markTokenSold(uint256 _tokens) private {\n', '        tokenSold = tokenSold.add(_tokens);\n', '    }\n', '    \n', '    /**\n', '    * @dev Owner can transfer out any accidentally sent Caerus tokens.\n', '    * @param _tokenAddress The address which you want to send tokens from.\n', '    * @param _tokens the amount of tokens to be transferred.\n', '    */    \n', '    function transferAnyCaerusToken(address _tokenAddress, uint _tokens) public onlyOwner returns (bool success) {\n', '        transferTokens(_tokenAddress, owner, _tokens);\n', '        return true;\n', '    }\n', '}']
