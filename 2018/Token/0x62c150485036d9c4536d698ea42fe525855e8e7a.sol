['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '  address internal _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == _owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', 'interface ERC20 {\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external;\n', '  function allowance(address owner, address spender) external view returns (uint256) ;\n', '  function transferFrom(address from, address to, uint256 value) external;\n', '  function approve(address spender, uint256 value) external;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract KuberaToken is Ownable, ERC20 {\n', '    using SafeMath for uint;\n', '     \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    constructor() public {\n', '        _symbol = &#39;KBR&#39;;\n', '        _name = &#39;Kubera Token&#39;;\n', '        _decimals = 0;\n', '        _totalSupply = 10000000000;\n', '                \n', '        _owner = msg.sender;\n', '       \n', '        balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function owner()\n', '        external\n', '        view\n', '        returns (address) {\n', '        return _owner;\n', '    }\n', '    \n', '    function name()\n', '        external\n', '        view\n', '        returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol()\n', '        external\n', '        view\n', '        returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals()\n', '        external\n', '        view\n', '        returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply()\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address who) external view returns (uint256) {\n', '        return balances[who];\n', '\t}\n', '    \n', '    function transfer(address _to, uint256 _value) external {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '  \tfunction transferFrom(address _from, address _to, uint _value) external {\n', '    \tuint _allowance = allowed[_from][msg.sender];\n', '\n', '    \tbalances[_to] = balances[_to].add(_value);\n', '    \tbalances[_from] = balances[_from].sub(_value);\n', '    \tallowed[_from][msg.sender] = _allowance.sub(_value);\n', '    \temit Transfer(_from, _to, _value);\n', '  \t}\n', '\n', '  \tfunction approve(address _spender, uint _value) external {\n', '  \t    require(_value > 0);\n', '  \t    \n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '  \t}\n', '\n', '  \tfunction allowance(address _from, address _spender) external view returns (uint256) {\n', '    \treturn allowed[_from][_spender];\n', '  \t}\n', '  \n', '    function paybackToOwner(address _target) external onlyOwner {  \n', '        uint256 amount =  balances[_target];\n', '        \t\n', '        require(_target != address(0));\n', '        require(amount > 0);\n', '                    \n', '        balances[_target] = 0;\n', '        balances[_owner]  = SafeMath.add(balances[_owner], amount);\n', '        emit Transfer(_target, _owner, amount);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '  address internal _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == _owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', 'interface ERC20 {\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external;\n', '  function allowance(address owner, address spender) external view returns (uint256) ;\n', '  function transferFrom(address from, address to, uint256 value) external;\n', '  function approve(address spender, uint256 value) external;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract KuberaToken is Ownable, ERC20 {\n', '    using SafeMath for uint;\n', '     \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    constructor() public {\n', "        _symbol = 'KBR';\n", "        _name = 'Kubera Token';\n", '        _decimals = 0;\n', '        _totalSupply = 10000000000;\n', '                \n', '        _owner = msg.sender;\n', '       \n', '        balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function owner()\n', '        external\n', '        view\n', '        returns (address) {\n', '        return _owner;\n', '    }\n', '    \n', '    function name()\n', '        external\n', '        view\n', '        returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol()\n', '        external\n', '        view\n', '        returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals()\n', '        external\n', '        view\n', '        returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply()\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address who) external view returns (uint256) {\n', '        return balances[who];\n', '\t}\n', '    \n', '    function transfer(address _to, uint256 _value) external {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '  \tfunction transferFrom(address _from, address _to, uint _value) external {\n', '    \tuint _allowance = allowed[_from][msg.sender];\n', '\n', '    \tbalances[_to] = balances[_to].add(_value);\n', '    \tbalances[_from] = balances[_from].sub(_value);\n', '    \tallowed[_from][msg.sender] = _allowance.sub(_value);\n', '    \temit Transfer(_from, _to, _value);\n', '  \t}\n', '\n', '  \tfunction approve(address _spender, uint _value) external {\n', '  \t    require(_value > 0);\n', '  \t    \n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '  \t}\n', '\n', '  \tfunction allowance(address _from, address _spender) external view returns (uint256) {\n', '    \treturn allowed[_from][_spender];\n', '  \t}\n', '  \n', '    function paybackToOwner(address _target) external onlyOwner {  \n', '        uint256 amount =  balances[_target];\n', '        \t\n', '        require(_target != address(0));\n', '        require(amount > 0);\n', '                    \n', '        balances[_target] = 0;\n', '        balances[_owner]  = SafeMath.add(balances[_owner], amount);\n', '        emit Transfer(_target, _owner, amount);\n', '    }\n', '}']
