['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(\n', '    address previousOwner,\n', '    address newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner || msg.sender == address(this));\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause(bool isPause);\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause(paused);\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Pause(paused);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  \n', '  struct Purchase {\n', '    uint unlockTokens;\n', '    uint unlockDate;\n', '  }\n', '  mapping(address => Purchase[]) balancesLock;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  address public rubusBlackAddress;\n', '  uint256 public priceEthPerToken;\n', '  uint256 public depositCommission;\n', '  uint256 public withdrawCommission;\n', '  uint256 public investCommission;\n', '  address public depositWallet;\n', '  address public withdrawWallet;\n', '  address public investWallet;\n', '  bool public lock;\n', '  uint256 public minimalEthers;\n', '  uint256 public lockTokensPercent;\n', '  uint256 public lockTimestamp;\n', '  event Deposit(address indexed buyer, uint256 weiAmount, uint256 tokensAmount, uint256 tokenPrice, uint256 commission);\n', '  event Withdraw(address indexed buyer, uint256 weiAmount, uint256 tokensAmount, uint256 tokenPrice, uint256 commission);\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    require(_value <= checkVesting(msg.sender));\n', '\n', '    if (_to == rubusBlackAddress) {\n', '      require(!lock);\n', '      uint256 weiAmount = _value.mul(withdrawCommission).div(priceEthPerToken);\n', '      require(weiAmount <= uint256(address(this).balance));\n', '      \n', '      totalSupply_ = totalSupply_.sub(_value);\n', '      msg.sender.transfer(weiAmount);\n', '      withdrawWallet.transfer(weiAmount.mul(uint256(100).sub(withdrawCommission)).div(100));\n', '      \n', '      emit Withdraw(msg.sender, weiAmount, _value, priceEthPerToken, withdrawCommission);\n', '    } else {\n', '      balances[_to] = balances[_to].add(_value);\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  function getPurchases(address sender, uint index) public view returns(uint, uint) {\n', '    return (balancesLock[sender][index].unlockTokens, balancesLock[sender][index].unlockDate);\n', '  }\n', '  \n', '  function checkVesting(address sender) public view returns (uint256) {\n', '    uint256 availableTokens = 0;\n', '    for (uint i = 0; i < balancesLock[sender].length; i++) {\n', '      (uint lockTokens, uint lockTime) = getPurchases(sender, i);\n', '      if(now >= lockTime) {\n', '        availableTokens = availableTokens.add(lockTokens);\n', '      }\n', '    }\n', '    \n', '    return availableTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return checkVesting(_owner);\n', '  }\n', '  \n', '  function balanceOfUnlockTokens(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_value <= checkVesting(_from));\n', '\n', '    if (_to == rubusBlackAddress) {\n', '      require(!lock);\n', '      uint256 weiAmount = _value.mul(withdrawCommission).div(priceEthPerToken);\n', '      require(weiAmount <= uint256(address(this).balance));\n', '      \n', '      totalSupply_ = totalSupply_.sub(_value);\n', '      msg.sender.transfer(weiAmount);\n', '      withdrawWallet.transfer(weiAmount.mul(uint256(100).sub(withdrawCommission)).div(100));\n', '      \n', '      emit Withdraw(msg.sender, weiAmount, _value, priceEthPerToken, withdrawCommission);\n', '    } else {\n', '      balances[_to] = balances[_to].add(_value);\n', '    }\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract RubusFundBlackToken is StandardToken {\n', '\n', '  string constant public name = "Rubus Fund Black Token";\n', '  uint256 constant public decimals = 18;\n', '  string constant public symbol = "RTB";\n', '\n', '  event Lock(bool lockStatus);\n', '  event DeleteTokens(address user, uint256 tokensAmount);\n', '  event AddTokens(address user, uint256 tokensAmount);\n', '  event NewTokenPrice(uint256 tokenPrice);\n', '  event GetWei(uint256 weiAmount);\n', '  event AddWei(uint256 weiAmount);\n', '  \n', '  event DepositCommission(uint256 deposit);\n', '  event InvestCommission(uint256 invest);\n', '  event WithdrawCommission(uint256 withdraw);\n', '  \n', '  event DepositWallet(address deposit);\n', '  event InvestWallet(address invest);\n', '  event WithdrawWallet(address withdraw);\n', '\n', '  constructor() public {\n', '    rubusBlackAddress = address(this);\n', '    setNewPrice(33333);\n', '    lockUp(false);\n', '    newDepositCommission(100);\n', '    newInvestCommission(80);\n', '    newWithdrawCommission(100);\n', '    newMinimalEthers(500000000000000000);\n', '    newTokenUnlockPercent(100);\n', '    newLockTimestamp(2592000);\n', '    newDepositWallet(0x73D5f035B8CB58b4aF065d6cE49fC8E7288536F3);\n', '    newInvestWallet(0xf0EF10870308013903bd6Dc8f86E7a7EAF1a86Ab);\n', '    newWithdraWallet(0x7c4C8b371d4348f7A1fd2e76f05aa60846b442DD);\n', '  }\n', '  \n', '  function _lockPaymentTokens(address sender, uint _amount, uint _date) internal {\n', '    balancesLock[sender].push(Purchase(_amount, _date));\n', '  }\n', '\n', '  function () payable external whenNotPaused {\n', '    require(msg.value >= minimalEthers);\n', '    uint256 tokens = msg.value.mul(depositCommission).mul(priceEthPerToken).div(10000);\n', '    \n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    uint256 lockTokens = tokens.mul(100).div(lockTokensPercent);\n', '    \n', '    // balancesLock[msg.sender] = balancesLock[msg.sender].add(tokens);\n', '    _lockPaymentTokens(msg.sender, lockTokens, now.add(lockTimestamp));\n', '    \n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '\n', '    investWallet.transfer(msg.value.mul(investCommission).div(100));\n', '    depositWallet.transfer(msg.value.mul(uint256(100).sub(depositCommission)).div(100)); \n', '    \n', '    emit Transfer(rubusBlackAddress, msg.sender, tokens);\n', '    emit Deposit(msg.sender, msg.value, tokens, priceEthPerToken, depositCommission);\n', '  }\n', '\n', '  function getWei(uint256 weiAmount) external onlyOwner {\n', '    owner.transfer(weiAmount);\n', '    emit GetWei(weiAmount);\n', '  }\n', '\n', '  function addEther() payable external onlyOwner {\n', '    emit AddWei(msg.value);\n', '  }\n', '\n', '  function airdrop(address[] receiver, uint256[] amount) external onlyOwner {\n', '    require(receiver.length > 0 && receiver.length == amount.length);\n', '    \n', '    for(uint256 i = 0; i < receiver.length; i++) {\n', '      uint256 tokens = amount[i];\n', '      totalSupply_ = totalSupply_.add(tokens);\n', '      balances[receiver[i]] = balances[receiver[i]].add(tokens);\n', '      emit Transfer(address(this), receiver[i], tokens);\n', '      emit AddTokens(receiver[i], tokens);\n', '    }\n', '  }\n', '  \n', '  function deleteInvestorTokens(address[] user, uint256[] amount) external onlyOwner {\n', '    require(user.length > 0 && user.length == amount.length);\n', '    \n', '    for(uint256 i = 0; i < user.length; i++) {\n', '      uint256 tokens = amount[i];\n', '      require(tokens <= balances[user[i]]);\n', '      totalSupply_ = totalSupply_.sub(tokens);\n', '      balances[user[i]] = balances[user[i]].sub(tokens);\n', '      emit Transfer(user[i], address(this), tokens);\n', '      emit DeleteTokens(user[i], tokens);\n', '    }\n', '  }\n', '  \n', '  function setNewPrice(uint256 _ethPerToken) public onlyOwner {\n', '    priceEthPerToken = _ethPerToken;\n', '    emit NewTokenPrice(priceEthPerToken);\n', '  }\n', '\n', '  function newDepositCommission(uint256 _newDepositCommission) public onlyOwner {\n', '    depositCommission = _newDepositCommission;\n', '    emit DepositCommission(depositCommission);\n', '  }\n', '  \n', '  function newInvestCommission(uint256 _newInvestCommission) public onlyOwner {\n', '    investCommission = _newInvestCommission;\n', '    emit InvestCommission(investCommission);\n', '  }\n', '  \n', '  function newWithdrawCommission(uint256 _newWithdrawCommission) public onlyOwner {\n', '    withdrawCommission = _newWithdrawCommission;\n', '    emit WithdrawCommission(withdrawCommission);\n', '  }\n', '  \n', '  function newDepositWallet(address _depositWallet) public onlyOwner {\n', '    depositWallet = _depositWallet;\n', '    emit DepositWallet(depositWallet);\n', '  }\n', '  \n', '  function newInvestWallet(address _investWallet) public onlyOwner {\n', '    investWallet = _investWallet;\n', '    emit InvestWallet(investWallet);\n', '  }\n', '  \n', '  function newWithdraWallet(address _withdrawWallet) public onlyOwner {\n', '    withdrawWallet = _withdrawWallet;\n', '    emit WithdrawWallet(withdrawWallet);\n', '  }\n', '\n', '  function lockUp(bool _lock) public onlyOwner {\n', '    lock = _lock;\n', '    emit Lock(lock);\n', '  }\n', '  \n', '  function newMinimalEthers(uint256 _weiAMount) public onlyOwner {\n', '    minimalEthers = _weiAMount;\n', '  }\n', '  \n', '  function newTokenUnlockPercent(uint256 _lockTokensPercent) public onlyOwner {\n', '    lockTokensPercent = _lockTokensPercent;\n', '  }\n', '  \n', '  function newLockTimestamp(uint256 _lockTimestamp) public onlyOwner {\n', '    lockTimestamp = _lockTimestamp;\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(\n', '    address previousOwner,\n', '    address newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner || msg.sender == address(this));\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause(bool isPause);\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause(paused);\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Pause(paused);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  \n', '  struct Purchase {\n', '    uint unlockTokens;\n', '    uint unlockDate;\n', '  }\n', '  mapping(address => Purchase[]) balancesLock;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  address public rubusBlackAddress;\n', '  uint256 public priceEthPerToken;\n', '  uint256 public depositCommission;\n', '  uint256 public withdrawCommission;\n', '  uint256 public investCommission;\n', '  address public depositWallet;\n', '  address public withdrawWallet;\n', '  address public investWallet;\n', '  bool public lock;\n', '  uint256 public minimalEthers;\n', '  uint256 public lockTokensPercent;\n', '  uint256 public lockTimestamp;\n', '  event Deposit(address indexed buyer, uint256 weiAmount, uint256 tokensAmount, uint256 tokenPrice, uint256 commission);\n', '  event Withdraw(address indexed buyer, uint256 weiAmount, uint256 tokensAmount, uint256 tokenPrice, uint256 commission);\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    require(_value <= checkVesting(msg.sender));\n', '\n', '    if (_to == rubusBlackAddress) {\n', '      require(!lock);\n', '      uint256 weiAmount = _value.mul(withdrawCommission).div(priceEthPerToken);\n', '      require(weiAmount <= uint256(address(this).balance));\n', '      \n', '      totalSupply_ = totalSupply_.sub(_value);\n', '      msg.sender.transfer(weiAmount);\n', '      withdrawWallet.transfer(weiAmount.mul(uint256(100).sub(withdrawCommission)).div(100));\n', '      \n', '      emit Withdraw(msg.sender, weiAmount, _value, priceEthPerToken, withdrawCommission);\n', '    } else {\n', '      balances[_to] = balances[_to].add(_value);\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  function getPurchases(address sender, uint index) public view returns(uint, uint) {\n', '    return (balancesLock[sender][index].unlockTokens, balancesLock[sender][index].unlockDate);\n', '  }\n', '  \n', '  function checkVesting(address sender) public view returns (uint256) {\n', '    uint256 availableTokens = 0;\n', '    for (uint i = 0; i < balancesLock[sender].length; i++) {\n', '      (uint lockTokens, uint lockTime) = getPurchases(sender, i);\n', '      if(now >= lockTime) {\n', '        availableTokens = availableTokens.add(lockTokens);\n', '      }\n', '    }\n', '    \n', '    return availableTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return checkVesting(_owner);\n', '  }\n', '  \n', '  function balanceOfUnlockTokens(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_value <= checkVesting(_from));\n', '\n', '    if (_to == rubusBlackAddress) {\n', '      require(!lock);\n', '      uint256 weiAmount = _value.mul(withdrawCommission).div(priceEthPerToken);\n', '      require(weiAmount <= uint256(address(this).balance));\n', '      \n', '      totalSupply_ = totalSupply_.sub(_value);\n', '      msg.sender.transfer(weiAmount);\n', '      withdrawWallet.transfer(weiAmount.mul(uint256(100).sub(withdrawCommission)).div(100));\n', '      \n', '      emit Withdraw(msg.sender, weiAmount, _value, priceEthPerToken, withdrawCommission);\n', '    } else {\n', '      balances[_to] = balances[_to].add(_value);\n', '    }\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract RubusFundBlackToken is StandardToken {\n', '\n', '  string constant public name = "Rubus Fund Black Token";\n', '  uint256 constant public decimals = 18;\n', '  string constant public symbol = "RTB";\n', '\n', '  event Lock(bool lockStatus);\n', '  event DeleteTokens(address user, uint256 tokensAmount);\n', '  event AddTokens(address user, uint256 tokensAmount);\n', '  event NewTokenPrice(uint256 tokenPrice);\n', '  event GetWei(uint256 weiAmount);\n', '  event AddWei(uint256 weiAmount);\n', '  \n', '  event DepositCommission(uint256 deposit);\n', '  event InvestCommission(uint256 invest);\n', '  event WithdrawCommission(uint256 withdraw);\n', '  \n', '  event DepositWallet(address deposit);\n', '  event InvestWallet(address invest);\n', '  event WithdrawWallet(address withdraw);\n', '\n', '  constructor() public {\n', '    rubusBlackAddress = address(this);\n', '    setNewPrice(33333);\n', '    lockUp(false);\n', '    newDepositCommission(100);\n', '    newInvestCommission(80);\n', '    newWithdrawCommission(100);\n', '    newMinimalEthers(500000000000000000);\n', '    newTokenUnlockPercent(100);\n', '    newLockTimestamp(2592000);\n', '    newDepositWallet(0x73D5f035B8CB58b4aF065d6cE49fC8E7288536F3);\n', '    newInvestWallet(0xf0EF10870308013903bd6Dc8f86E7a7EAF1a86Ab);\n', '    newWithdraWallet(0x7c4C8b371d4348f7A1fd2e76f05aa60846b442DD);\n', '  }\n', '  \n', '  function _lockPaymentTokens(address sender, uint _amount, uint _date) internal {\n', '    balancesLock[sender].push(Purchase(_amount, _date));\n', '  }\n', '\n', '  function () payable external whenNotPaused {\n', '    require(msg.value >= minimalEthers);\n', '    uint256 tokens = msg.value.mul(depositCommission).mul(priceEthPerToken).div(10000);\n', '    \n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    uint256 lockTokens = tokens.mul(100).div(lockTokensPercent);\n', '    \n', '    // balancesLock[msg.sender] = balancesLock[msg.sender].add(tokens);\n', '    _lockPaymentTokens(msg.sender, lockTokens, now.add(lockTimestamp));\n', '    \n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '\n', '    investWallet.transfer(msg.value.mul(investCommission).div(100));\n', '    depositWallet.transfer(msg.value.mul(uint256(100).sub(depositCommission)).div(100)); \n', '    \n', '    emit Transfer(rubusBlackAddress, msg.sender, tokens);\n', '    emit Deposit(msg.sender, msg.value, tokens, priceEthPerToken, depositCommission);\n', '  }\n', '\n', '  function getWei(uint256 weiAmount) external onlyOwner {\n', '    owner.transfer(weiAmount);\n', '    emit GetWei(weiAmount);\n', '  }\n', '\n', '  function addEther() payable external onlyOwner {\n', '    emit AddWei(msg.value);\n', '  }\n', '\n', '  function airdrop(address[] receiver, uint256[] amount) external onlyOwner {\n', '    require(receiver.length > 0 && receiver.length == amount.length);\n', '    \n', '    for(uint256 i = 0; i < receiver.length; i++) {\n', '      uint256 tokens = amount[i];\n', '      totalSupply_ = totalSupply_.add(tokens);\n', '      balances[receiver[i]] = balances[receiver[i]].add(tokens);\n', '      emit Transfer(address(this), receiver[i], tokens);\n', '      emit AddTokens(receiver[i], tokens);\n', '    }\n', '  }\n', '  \n', '  function deleteInvestorTokens(address[] user, uint256[] amount) external onlyOwner {\n', '    require(user.length > 0 && user.length == amount.length);\n', '    \n', '    for(uint256 i = 0; i < user.length; i++) {\n', '      uint256 tokens = amount[i];\n', '      require(tokens <= balances[user[i]]);\n', '      totalSupply_ = totalSupply_.sub(tokens);\n', '      balances[user[i]] = balances[user[i]].sub(tokens);\n', '      emit Transfer(user[i], address(this), tokens);\n', '      emit DeleteTokens(user[i], tokens);\n', '    }\n', '  }\n', '  \n', '  function setNewPrice(uint256 _ethPerToken) public onlyOwner {\n', '    priceEthPerToken = _ethPerToken;\n', '    emit NewTokenPrice(priceEthPerToken);\n', '  }\n', '\n', '  function newDepositCommission(uint256 _newDepositCommission) public onlyOwner {\n', '    depositCommission = _newDepositCommission;\n', '    emit DepositCommission(depositCommission);\n', '  }\n', '  \n', '  function newInvestCommission(uint256 _newInvestCommission) public onlyOwner {\n', '    investCommission = _newInvestCommission;\n', '    emit InvestCommission(investCommission);\n', '  }\n', '  \n', '  function newWithdrawCommission(uint256 _newWithdrawCommission) public onlyOwner {\n', '    withdrawCommission = _newWithdrawCommission;\n', '    emit WithdrawCommission(withdrawCommission);\n', '  }\n', '  \n', '  function newDepositWallet(address _depositWallet) public onlyOwner {\n', '    depositWallet = _depositWallet;\n', '    emit DepositWallet(depositWallet);\n', '  }\n', '  \n', '  function newInvestWallet(address _investWallet) public onlyOwner {\n', '    investWallet = _investWallet;\n', '    emit InvestWallet(investWallet);\n', '  }\n', '  \n', '  function newWithdraWallet(address _withdrawWallet) public onlyOwner {\n', '    withdrawWallet = _withdrawWallet;\n', '    emit WithdrawWallet(withdrawWallet);\n', '  }\n', '\n', '  function lockUp(bool _lock) public onlyOwner {\n', '    lock = _lock;\n', '    emit Lock(lock);\n', '  }\n', '  \n', '  function newMinimalEthers(uint256 _weiAMount) public onlyOwner {\n', '    minimalEthers = _weiAMount;\n', '  }\n', '  \n', '  function newTokenUnlockPercent(uint256 _lockTokensPercent) public onlyOwner {\n', '    lockTokensPercent = _lockTokensPercent;\n', '  }\n', '  \n', '  function newLockTimestamp(uint256 _lockTimestamp) public onlyOwner {\n', '    lockTimestamp = _lockTimestamp;\n', '  }\n', '}']
