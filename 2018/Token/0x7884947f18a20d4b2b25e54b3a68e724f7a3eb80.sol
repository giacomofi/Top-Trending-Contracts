['pragma solidity ^0.4.24;  \n', '\n', '\n', 'library SafeMath {\n', '\tfunction mul(uint a, uint b) internal pure returns(uint) {  \n', '\t\tuint c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint a, uint b) internal pure returns(uint) { \n', '\t\tuint c = a / b;\n', '\t\treturn c; \n', '\t}\n', '\n', '\tfunction sub(uint a, uint b) internal pure returns(uint) {  \n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint a, uint b) internal pure returns(uint) {  \n', '\t\tuint c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '\tfunction max64(uint64 a, uint64 b) internal pure  returns(uint64) { \n', '\t\treturn a >= b ? a : b;\n', '\t}\n', '\n', '\tfunction min64(uint64 a, uint64 b) internal pure  returns(uint64) { \n', '\t\treturn a < b ? a : b;\n', '\t}\n', '\n', '\tfunction max256(uint256 a, uint256 b) internal pure returns(uint256) { \n', '\t\treturn a >= b ? a : b;\n', '\t}\n', '\n', '\tfunction min256(uint256 a, uint256 b) internal pure returns(uint256) {  \n', '\t\treturn a < b ? a : b;\n', '\t}\n', ' \n', '}\n', '\n', 'contract ERC20Basic {\n', '\tuint public totalSupply;\n', '\tfunction balanceOf(address who) public constant returns(uint);  \n', '\tfunction transfer(address to, uint value) public;  \n', '\tevent Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) public constant returns(uint);  \n', '\tfunction transferFrom(address from, address to, uint value) public;  \n', '\tfunction approve(address spender, uint value) public;  \n', '\tevent Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A contract can unlock token at designated time.\n', ' */\n', 'contract TokenVesting  {\n', '  using SafeMath for uint256;\n', '\n', '  event Released(uint256 amounts);\n', '\n', '  address[] private _beneficiary ;\n', '  uint256[] private _unlocktime;  \n', '  uint256[] private _amount;\n', '\n', '  constructor() public\n', '  {\n', '   \t _beneficiary = [0x9138D3b9d45cd8901aD1C2e670428Bc51f85c350,\n', '   \t 0x2968d05dCF6e706F68ca8fC16F6e430fd822d742,\n', '   \t 0xCD2C7D18325B7E09DA08DBA6f58D0E6F0e6BDf68,\n', '   \t 0xA29459226F9aFa33b2b22093f5f9FCB9B16a9851,\n', '   \t 0xD20D3CaC06BfC68f1d0e84855c3395D2D10CDb14,\n', '   \t 0xd8B5C428E7F37e84d13a25C400a35fD97a2BfaBd,\n', '   \t 0x2e5f02cb099c2b6ddc71694cafa6801eb30b60ce,\n', '   \t 0x4e8b6b5b94ffc827b1ec2f6c172a93067248c4fa,\n', '   \t 0xbe4c612de6221f557799b7ed456572f0c0a14bd1,\n', '   \t 0xbe4c612de6221f557799b7ed456572f0c0a14bd1,\n', '   \t 0x9c0A93e70143611fD5107eb865963b1E4670C852,\n', '   \t 0x7A2D687BEDeb0B0C6e7Ef27db97Bcc5ab4d68c02,\n', '   \t 0xf5991c3be1677F62Ac7A631108D56300634CFAcF];\n', '   \t \n', '     _unlocktime = [1546272000,1572969600,1572969600,1572969600,1569859200,1546185600,1556640000,1559318400,1551369600,1569859200,1545321600,1557244800,1564416000];\n', '     _amount=[227500000,773500000,136500000,91000000,1708182733,9614599,39173094,15054061,230700000,384500000,9000000,17500000,7500000];\n', '     \n', '  }\n', '\n', '  /**\n', '   * @return the beneficiary of the tokens.\n', '   */\n', '  function beneficiary() public view returns(address[]) {\n', '    return _beneficiary;\n', '  }\n', '\n', '  /**\n', '   * @return the unlocktime time of the token vesting.\n', '   */\n', '  function unlocktime() public view returns(uint256[]) {\n', '    return _unlocktime;\n', '  }\n', '   /**\n', '   * @return the amount of the tokens.\n', '   */\n', '  function amount() public view returns(uint256[]) {\n', '    return _amount;\n', '  }\n', ' \n', ' \n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20 token) public {\n', '       for(uint i = 0; i < _beneficiary.length; i++) {\n', '            if(block.timestamp >= _unlocktime[i] ){\n', '                   token.transfer(_beneficiary[i], _amount[i].mul(10**18));\n', '                    emit Released( _amount[i]);\n', '                    _amount[i]=0;\n', '            }\n', '       }\n', '  }\n', '\n', '  /**\n', '   * @notice Release the unexpected token.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  \n', '    function checkRelease(ERC20 token) public {\n', '        \n', '       uint num = 0;\n', '        for(uint i = 0; i < _amount.length; i++) {\n', '            num = num.add(_amount[i]); \n', '        }\n', '        if(num==0){\n', '             token.transfer(_beneficiary[0],token.balanceOf(this));\n', '        }\n', '        \n', '  }\n', '\n', '}']