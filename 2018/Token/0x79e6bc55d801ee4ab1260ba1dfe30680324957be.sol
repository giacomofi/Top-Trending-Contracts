['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' * @dev part of Daonomic platform\n', ' */\n', 'contract QashbackCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '   * @dev This event should be emitted when user buys something\n', '   */\n', '  event Purchase(address indexed buyer, address token, uint256 value, uint256 sold, uint256 bonus, bytes txId);\n', '  /**\n', '   * @dev Should be emitted if new payment method added\n', '   */\n', '  event RateAdd(address token);\n', '  /**\n', '   * @dev Should be emitted if payment method removed\n', '   */\n', '  event RateRemove(address token);\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    (uint256 tokens, uint256 left) = _getTokenAmount(weiAmount);\n', '    uint256 weiEarned = weiAmount.sub(left);\n', '    uint256 bonus = _getBonus(tokens);\n', '    uint256 withBonus = tokens.add(bonus);\n', '\n', '    _preValidatePurchase(_beneficiary, weiAmount, tokens, bonus);\n', '\n', '    _processPurchase(_beneficiary, withBonus);\n', '    emit Purchase(\n', '      _beneficiary,\n', '      address(0),\n', '        weiEarned,\n', '      tokens,\n', '      bonus,\n', '      ""\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiEarned, withBonus);\n', '    _postValidatePurchase(_beneficiary, weiEarned);\n', '\n', '    if (left > 0) {\n', '      _beneficiary.transfer(left);\n', '    }\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount,\n', '    uint256 _tokens,\n', '    uint256 _bonus\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '    require(_tokens != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  ) internal;\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount,\n', '    uint256 _tokens\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   *         and wei left (if no more tokens can be sold)\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256 tokens, uint256 weiLeft);\n', '\n', '  function _getBonus(uint256 _tokens) internal view returns (uint256);\n', '}\n', '\n', 'contract MintingQashbackCrowdsale is QashbackCrowdsale {\n', '    MintableToken public token;\n', '\n', '    constructor(MintableToken _token) public {\n', '        token = _token;\n', '    }\n', '\n', '    function _deliverTokens(\n', '        address _beneficiary,\n', '        uint256 _tokenAmount\n', '    ) internal {\n', '        token.mint(_beneficiary, _tokenAmount);\n', '    }\n', '}\n', '\n', 'contract Whitelist {\n', '  function isInWhitelist(address addr) public view returns (bool);\n', '}\n', '\n', 'contract WhitelistQashbackCrowdsale is QashbackCrowdsale {\n', '  Whitelist public whitelist;\n', '\n', '  constructor (Whitelist _whitelist) public {\n', '    whitelist = _whitelist;\n', '  }\n', '\n', '  function getWhitelists() view public returns (Whitelist[]) {\n', '    Whitelist[] memory result = new Whitelist[](1);\n', '    result[0] = whitelist;\n', '    return result;\n', '  }\n', '\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount,\n', '    uint256 _tokens,\n', '    uint256 _bonus\n', '  ) internal {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount, _tokens, _bonus);\n', '    require(canBuy(_beneficiary), "investor is not verified by Whitelist");\n', '  }\n', '\n', '  function canBuy(address _beneficiary) view public returns (bool) {\n', '    return whitelist.isInWhitelist(_beneficiary);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Counting Crowdsale\n', ' * @dev calculates amount of sold tokens\n', ' */\n', 'contract CountingQashbackCrowdsale is QashbackCrowdsale {\n', '    uint256 public sold;\n', '\n', '    function _updatePurchasingState(\n', '        address _beneficiary,\n', '        uint256 _weiAmount,\n', '        uint256 _tokens\n', '    ) internal {\n', '        super._updatePurchasingState(_beneficiary, _weiAmount, _tokens);\n', '\n', '        sold = sold.add(_tokens);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract QBKToken is BurnableToken, PausableToken, MintableToken {\n', '  string public constant name = "QashBack";\n', '  string public constant symbol = "QBK";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 public constant MAX_TOTAL_SUPPLY = 1000000000 * 10 ** 18;\n', '\n', '  function mint(address _to, uint256 _amount) public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= MAX_TOTAL_SUPPLY);\n', '    return super.mint(_to, _amount);\n', '  }\n', '}\n', '\n', 'contract PausingQashbackSale is Ownable {\n', '    Pausable public pausableToken;\n', '\n', '    constructor(Pausable _pausableToken) public {\n', '        pausableToken = _pausableToken;\n', '    }\n', '\n', '    function pauseToken() onlyOwner public {\n', '        pausableToken.pause();\n', '    }\n', '\n', '    function unpauseToken() onlyOwner public {\n', '        pausableToken.unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Token Holder with vesting period\n', ' * @dev holds any amount of tokens and allows to release selected number of tokens after every vestingInterval seconds\n', ' */\n', 'contract TokenHolder is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    event Released(uint amount);\n', '\n', '    /**\n', '     * @dev start of the vesting period\n', '     */\n', '    uint public start;\n', '    /**\n', '     * @dev interval between token releases\n', '     */\n', '    uint public vestingInterval;\n', '    /**\n', '     * @dev already released value\n', '     */\n', '    uint public released;\n', '    /**\n', '     * @dev value can be released every period\n', '     */\n', '    uint public value;\n', '    /**\n', '     * @dev holding token\n', '     */\n', '    ERC20Basic public token;\n', '\n', '    constructor(uint _start, uint _vestingInterval, uint _value, ERC20Basic _token) public {\n', '        start = _start;\n', '        vestingInterval = _vestingInterval;\n', '        value = _value;\n', '        token = _token;\n', '    }\n', '\n', '    /**\n', '     * @dev transfers vested tokens to beneficiary (to the owner of the contract)\n', '     * @dev automatically calculates amount to release\n', '     */\n', '    function release() onlyOwner public {\n', '        uint toRelease = calculateVestedAmount().sub(released);\n', '        uint left = token.balanceOf(this);\n', '        if (left < toRelease) {\n', '            toRelease = left;\n', '        }\n', '        require(toRelease > 0, "nothing to release");\n', '        released = released.add(toRelease);\n', '        require(token.transfer(msg.sender, toRelease));\n', '        emit Released(toRelease);\n', '    }\n', '\n', '    function calculateVestedAmount() view internal returns (uint) {\n', '        return now.sub(start).div(vestingInterval).mul(value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title PoolDaonomicCrowdsale\n', ' * @dev can create TokenHolders\n', ' */\n', 'contract PoolQashbackCrowdsale is Ownable, MintingQashbackCrowdsale {\n', '    enum StartType { Fixed, Floating }\n', '\n', '    event PoolCreatedEvent(string name, uint maxAmount, uint start, uint vestingInterval, uint value, StartType startType);\n', '    event TokenHolderCreatedEvent(string name, address addr, uint amount);\n', '\n', '    mapping(string => PoolDescription) pools;\n', '\n', '    struct PoolDescription {\n', '        /**\n', '         * @dev maximal amount of tokens in this pool\n', '         */\n', '        uint maxAmount;\n', '        /**\n', '         * @dev amount of tokens already released\n', '         */\n', '        uint releasedAmount;\n', '        /**\n', '         * @dev start of the vesting period\n', '         */\n', '        uint start;\n', '        /**\n', '         * @dev interval between token releases\n', '         */\n', '        uint vestingInterval;\n', '        /**\n', '         * @dev value which is released every vestingInterval (in percent)\n', '         */\n', '        uint value;\n', '        /**\n', '         * @dev start type of the holder (fixed - date is set in seconds since 01.01.1970, floating - date is set in seconds since holder creation)\n', '         */\n', '        StartType startType;\n', '    }\n', '\n', '    constructor(MintableToken _token) MintingQashbackCrowdsale(_token) public {\n', '\n', '    }\n', '\n', '    function registerPool(string _name, uint _maxAmount, uint _start, uint _vestingInterval, uint _value, StartType _startType) internal {\n', '        require(_maxAmount > 0, "maxAmount should be greater than 0");\n', '        require(_vestingInterval > 0, "vestingInterval should be greater than 0");\n', '        require(_value > 0 && _value <= 100, "value should be >0 and <=100");\n', '        pools[_name] = PoolDescription(_maxAmount, 0, _start, _vestingInterval, _value, _startType);\n', '        emit PoolCreatedEvent(_name, _maxAmount, _start, _vestingInterval, _value, _startType);\n', '    }\n', '\n', '    function createHolder(string _name, address _beneficiary, uint _amount) onlyOwner public returns (TokenHolder) {\n', '        PoolDescription storage pool = pools[_name];\n', '        require(pool.maxAmount != 0, "pool is not defined");\n', '        require(_amount.add(pool.releasedAmount) <= pool.maxAmount, "pool is depleted");\n', '        pool.releasedAmount = _amount.add(pool.releasedAmount);\n', '        uint start;\n', '        if (pool.startType == StartType.Fixed) {\n', '            start = pool.start;\n', '        } else {\n', '            start = now + pool.start;\n', '        }\n', '        TokenHolder created = new TokenHolder(start, pool.vestingInterval, _amount.mul(pool.value).div(100), token);\n', '        created.transferOwnership(_beneficiary);\n', '        token.mint(created, _amount);\n', '        emit TokenHolderCreatedEvent(_name, created, _amount);\n', '        return created;\n', '    }\n', '\n', '    function getTokensLeft(string _name) view public returns (uint) {\n', '        PoolDescription storage pool = pools[_name];\n', '        require(pool.maxAmount != 0, "pool is not defined");\n', '        return pool.maxAmount.sub(pool.releasedAmount);\n', '    }\n', '}\n', '\n', '/*\n', '   token:\n', '     burnable\n', '     pausable\n', '     mintable\n', '     with max total supply\n', '     paused at start\n', '   sale:\n', '     with hard cap\n', '     single eth rate (set via setUsdEthRate)\n', '     no bonus\n', '     start immediately, end on 12/21/2018 @ 12:00pm (UTC)\n', '     with direct transfer (capped with 100M tokens)\n', '     with timelocks (for Category_2 .. Category_10)\n', '     owner can withdraw eth immediately\n', '*/\n', 'contract QBKSale is PausingQashbackSale, PoolQashbackCrowdsale, CountingQashbackCrowdsale, WhitelistQashbackCrowdsale {\n', '    uint constant public HARD_CAP = 30000000 * 10 ** 18;\n', '    uint constant public TRANSFER_HARD_CAP = 100000000 * 10 ** 18;\n', '    uint constant public SUPPLY_HARD_CAP = 1000000000 * 10 ** 18;\n', '    uint256 constant public START = 1541073600; // 11/01/2018 @ 12:00pm (UTC)\n', '    uint256 constant public END = 1545393600; // 12/21/2018 @ 12:00pm (UTC)\n', '\n', '    uint256 public rate;\n', '    uint256 public transferred;\n', '    address public operator;\n', '\n', '    event UsdEthRateChange(uint256 rate);\n', '    event Withdraw(address to, uint256 value);\n', '\n', '    constructor(QBKToken _token, Whitelist _whitelist, uint256 _usdEthRate)\n', '        PausingQashbackSale(_token)\n', '        PoolQashbackCrowdsale(_token)\n', '        WhitelistQashbackCrowdsale(_whitelist)\n', '        public {\n', '\n', '        operator = owner;\n', '        //needed for Daonomic UI\n', '        emit RateAdd(address(0));\n', '        setUsdEthRate(_usdEthRate);\n', '        registerPool("Category_2", SUPPLY_HARD_CAP, 86400 * 365 * 10, 1, 100, StartType.Floating); //10 Years\n', '        registerPool("Category_3", SUPPLY_HARD_CAP, 86400, 1, 100, StartType.Floating); //1 day\n', '        registerPool("Category_4", SUPPLY_HARD_CAP, 86400 * 7, 1, 100, StartType.Floating); //7 days\n', '        registerPool("Category_5", SUPPLY_HARD_CAP, 86400 * 30, 1, 100, StartType.Floating); //30 days\n', '        registerPool("Category_6", SUPPLY_HARD_CAP, 86400 * 90, 1, 100, StartType.Floating); //90 days\n', '        registerPool("Category_7", SUPPLY_HARD_CAP, 86400 * 180, 1, 100, StartType.Floating); //180 days\n', '        registerPool("Category_8", SUPPLY_HARD_CAP, 86400 * 270, 1, 100, StartType.Floating); //270 days\n', '        registerPool("Category_9", SUPPLY_HARD_CAP, 86400 * 365, 1, 100, StartType.Floating); //365 days\n', '    }\n', '\n', '    function _preValidatePurchase(\n', '        address _beneficiary,\n', '        uint256 _weiAmount,\n', '        uint256 _tokens,\n', '        uint256 _bonus\n', '    ) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount, _tokens, _bonus);\n', '        require(now >= START);\n', '        require(now < END);\n', '    }\n', '\n', '    function setUsdEthRate(uint256 _usdEthRate) onlyOperatorOrOwner public {\n', '        rate = _usdEthRate.mul(10).div(4);\n', '        emit UsdEthRateChange(_usdEthRate);\n', '    }\n', '\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256 tokens, uint256 weiLeft) {\n', '        tokens = _weiAmount.mul(rate);\n', '        if (sold.add(tokens) > HARD_CAP) {\n', '            tokens = HARD_CAP.sub(sold);\n', '            //alternative to Math.ceil(tokens / rate)\n', '            uint256 weiSpent = (tokens.add(rate).sub(1)).div(rate);\n', '            weiLeft =_weiAmount.sub(weiSpent);\n', '        } else {\n', '            weiLeft = 0;\n', '        }\n', '    }\n', '\n', '    function directTransfer(address _beneficiary, uint _amount) onlyOwner public {\n', '        require(transferred.add(_amount) <= TRANSFER_HARD_CAP);\n', '        token.mint(_beneficiary, _amount);\n', '        transferred = transferred.add(_amount);\n', '    }\n', '\n', '    function withdrawEth(address _to, uint256 _value) onlyOwner public {\n', '        _to.transfer(_value);\n', '        emit Withdraw(_to, _value);\n', '    }\n', '\n', '    function _getBonus(uint256) internal view returns (uint256) {\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev function for Daonomic UI\n', '     */\n', '    function getRate(address _token) public view returns (uint256) {\n', '        if (_token == address(0)) {\n', '            return rate * 10 ** 18;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev function for Daonomic UI\n', '     */\n', '    function start() public pure returns (uint256) {\n', '        return START;\n', '    }\n', '\n', '    /**\n', '     * @dev function for Daonomic UI\n', '     */\n', '    function end() public pure returns (uint256) {\n', '        return END;\n', '    }\n', '\n', '    /**\n', '      * @dev function for Daonomic UI\n', '      */\n', '    function initialCap() public pure returns (uint256) {\n', '        return HARD_CAP;\n', '    }\n', '\n', '    function setOperator(address _operator) onlyOwner public {\n', '        operator = _operator;\n', '    }\n', '\n', '    modifier onlyOperatorOrOwner() {\n', '        require(msg.sender == operator || msg.sender == owner);\n', '        _;\n', '    }\n', '}']