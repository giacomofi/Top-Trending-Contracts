['pragma solidity ^0.4.18;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address tokenOwner) public view returns (uint256);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint256);\n', '    function transfer(address to, uint256 tokens) public returns (bool);\n', '    function approve(address spender, uint256 tokens) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public {\n', '        require(msg.sender == owner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'contract ToniToken is ERC20Interface, Owned, SafeMath {\n', '\n', '    string constant public symbol = "TOTO";\n', '    string constant public name = "Toni Token";\n', '    uint8 constant public decimals = 2;\n', '\n', '    //SNB M3: 2018-01, 1036.941 Mrd. CHF\n', '    uint256 public totalSupply = 1000 * 10**uint256(decimals);\n', '\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    function ToToken() public {\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _tokenOwner) public view returns (uint256) {\n', '        return balances[_tokenOwner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _tokens) public returns (bool) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _tokens);\n', '        balances[_to] = safeAdd(balances[_to], _tokens);\n', '        emit Transfer(msg.sender, _to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    function bulkTransfer(address[] _tos, uint256[] _tokens) public returns (bool) {\n', '\n', '        for (uint i = 0; i < _tos.length; i++) {\n', '            require(transfer(_tos[i], _tokens[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _tokens) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _tokens;\n', '        emit Approval(msg.sender, _spender, _tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokens) public returns (bool) {\n', '        balances[_from] = safeSub(balances[_from], _tokens);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _tokens);\n', '        balances[_to] = safeAdd(balances[_to], _tokens);\n', '        emit Transfer(_from, _to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _tokenOwner, address _spender) public view returns (uint256) {\n', '        return allowed[_tokenOwner][_spender];\n', '    }\n', '}']