['pragma solidity 0.4.21;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0) && newOwner != owner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract UserTokensControl is Ownable {\n', '    address companyReserve;\n', '    address founderReserve;\n', '}\n', '\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\n', '        _from;\n', '        _value;\n', '        _data;\n', '    }\n', '}\n', '\n', 'contract ERC223 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '}\n', '\n', 'contract ERC20 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract BasicToken is ERC20, ERC223, UserTokensControl {\n', '    uint256 public totalSupply;\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) internal returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function transferToContract(address _to, uint256 _value, bytes _data) internal returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(_value > 0);\n', '\n', '        uint256 codeLength;\n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '    \n', '        if(codeLength > 0) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(_value > 0);\n', '\n', '        uint256 codeLength;\n', '        bytes memory empty;\n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        if(codeLength > 0) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _address) public constant returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '}\n', '\n', 'contract StandardToken is BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '}\n', '\n', 'contract Deedcoin is StandardToken {\n', '    string public constant name = "Deedcoin";\n', '    uint public constant decimals = 18;\n', '    string public constant symbol = "DEED";\n', '\n', '    function Deedcoin() public {\n', '        totalSupply=29809525 *(10**decimals);\n', '        owner = msg.sender;\n', '        companyReserve = 0xbBE0805F7660aE0C4C7484dBee097398329eD5f2;\n', '        founderReserve = 0x63547A5423652ABaF323c5B4fae848C7686B28Bf;\n', '        balances[msg.sender] = 20866667 * (10**decimals);\n', '        balances[companyReserve] = 4471429 * (10**decimals); \n', '        balances[founderReserve] = 4471429 * (10**decimals);\n', '    }\n', '\n', '    function() public {\n', '        revert();\n', '    }\n', '}']
['pragma solidity 0.4.21;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0) && newOwner != owner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract UserTokensControl is Ownable {\n', '    address companyReserve;\n', '    address founderReserve;\n', '}\n', '\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\n', '        _from;\n', '        _value;\n', '        _data;\n', '    }\n', '}\n', '\n', 'contract ERC223 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '}\n', '\n', 'contract ERC20 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract BasicToken is ERC20, ERC223, UserTokensControl {\n', '    uint256 public totalSupply;\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) internal returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function transferToContract(address _to, uint256 _value, bytes _data) internal returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(_value > 0);\n', '\n', '        uint256 codeLength;\n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '    \n', '        if(codeLength > 0) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(_value > 0);\n', '\n', '        uint256 codeLength;\n', '        bytes memory empty;\n', '        assembly {\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        if(codeLength > 0) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _address) public constant returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '}\n', '\n', 'contract StandardToken is BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '}\n', '\n', 'contract Deedcoin is StandardToken {\n', '    string public constant name = "Deedcoin";\n', '    uint public constant decimals = 18;\n', '    string public constant symbol = "DEED";\n', '\n', '    function Deedcoin() public {\n', '        totalSupply=29809525 *(10**decimals);\n', '        owner = msg.sender;\n', '        companyReserve = 0xbBE0805F7660aE0C4C7484dBee097398329eD5f2;\n', '        founderReserve = 0x63547A5423652ABaF323c5B4fae848C7686B28Bf;\n', '        balances[msg.sender] = 20866667 * (10**decimals);\n', '        balances[companyReserve] = 4471429 * (10**decimals); \n', '        balances[founderReserve] = 4471429 * (10**decimals);\n', '    }\n', '\n', '    function() public {\n', '        revert();\n', '    }\n', '}']
