['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    assert(b != 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) pure internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '  function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) pure internal returns (uint256) {\n', '      return div(mul(number, numerator), denominator);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '\n', '  // timestamps until all tokens transfers are blocked\n', '  uint256 public blockedTimeForBountyTokens = 0;\n', '  uint256 public blockedTimeForInvestedTokens = 0;\n', '\n', '  // minimum timestamp that tokens will be blocked for transfers\n', '  uint256 constant MIN_blockedTimeForBountyTokens = 1524949200; //29.04.2018, 0:00:00\n', '  uint256 constant MIN_blockedTimeForInvestedTokens = 1521061200; //15.03.2018, 0:00:00\n', '\n', '  //Addresses pre-ico investors\n', '  mapping(address => bool) preIcoAccounts;\n', '\n', '  //Addresses bounty campaign\n', '  mapping(address => bool) bountyAccounts;\n', '\n', '  //Addresses with founders tokens and flag is it blocking transfers from this address\n', '  mapping(address => uint) founderAccounts; // 1 - block transfers, 2 - do not block transfers\n', '\n', '  function Pausable() public {\n', '    blockedTimeForBountyTokens = MIN_blockedTimeForBountyTokens;\n', '    blockedTimeForInvestedTokens = MIN_blockedTimeForInvestedTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev called by owner for changing blockedTimeForBountyTokens\n', '  */\n', '  function changeBlockedTimeForBountyTokens(uint256 _blockedTime) onlyOwner external {\n', '    require(_blockedTime < MIN_blockedTimeForBountyTokens);\n', '    blockedTimeForBountyTokens = _blockedTime;\n', '  }\n', '\n', '  /**\n', '* @dev called by owner for changing blockedTimeForInvestedTokens\n', '*/\n', '  function changeBlockedTimeForInvestedTokens(uint256 _blockedTime) onlyOwner external {\n', '    require(_blockedTime < MIN_blockedTimeForInvestedTokens);\n', '    blockedTimeForInvestedTokens = _blockedTime;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!getPaused());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(getPaused());\n', '    _;\n', '  }\n', '\n', '  function getPaused() internal returns (bool) {\n', '    if (now > blockedTimeForBountyTokens && now > blockedTimeForInvestedTokens) {\n', '      return false;\n', '    } else {\n', '      uint256 blockedTime = checkTimeForTransfer(msg.sender);\n', '      return now < blockedTime;\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev called by owner, add preIcoAccount\n', '  */\n', '  function addPreIcoAccounts(address _addr) onlyOwner internal {\n', '    require(_addr != 0x0);\n', '    preIcoAccounts[_addr] = true;\n', '  }\n', '\n', '  /**\n', '  * @dev called by owner, add addBountyAccount\n', '  */\n', '  function addBountyAccounts(address _addr) onlyOwner internal {\n', '    require(_addr != 0x0);\n', '    preIcoAccounts[_addr] = true;\n', '  }\n', '\n', '  /**\n', '  * @dev called by owner, add founderAccount\n', '  */\n', '  function addFounderAccounts(address _addr, uint _flag) onlyOwner external {\n', '    require(_addr != 0x0);\n', '    founderAccounts[_addr] = _flag;\n', '  }\n', '\n', '  /**\n', '   * @dev called by external contract (ImmlaToken) for checking rights for transfers, depends on who owner of this address\n', '   */\n', '  function checkTimeForTransfer(address _account) internal returns (uint256) {\n', '    if (founderAccounts[_account] == 1) {\n', '      return blockedTimeForInvestedTokens;\n', '    } else if(founderAccounts[_account] == 2) {\n', '      return 1; //do not block transfers\n', '    } else if (preIcoAccounts[_account]) {\n', '      return blockedTimeForInvestedTokens;\n', '    } else if (bountyAccounts[_account]) {\n', '      return blockedTimeForBountyTokens;\n', '    } else {\n', '      return blockedTimeForInvestedTokens;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is PausableToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to mint tokens for pre-ico\n', '   */\n', '  function multiMintPreico(address[] _dests, uint256[] _values) onlyOwner canMint public returns (uint256) {\n', '    uint256 i = 0;\n', '    uint256 count = _dests.length;\n', '    while (i < count) {\n', '      totalSupply = totalSupply.add(_values[i]);\n', '      balances[_dests[i]] = balances[_dests[i]].add(_values[i]);\n', '      addPreIcoAccounts(_dests[i]);\n', '      Mint(_dests[i], _values[i]);\n', '      Transfer(address(0), _dests[i], _values[i]);\n', '      i += 1;\n', '    }\n', '    return(i);\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to mint tokens for pre-ico\n', '   */\n', '  function multiMintBounty(address[] _dests, uint256[] _values) onlyOwner canMint public returns (uint256) {\n', '    uint256 i = 0;\n', '    uint256 count = _dests.length;\n', '    while (i < count) {\n', '      totalSupply = totalSupply.add(_values[i]);\n', '      balances[_dests[i]] = balances[_dests[i]].add(_values[i]);\n', '      addBountyAccounts(_dests[i]);\n', '      Mint(_dests[i], _values[i]);\n', '      Transfer(address(0), _dests[i], _values[i]);\n', '      i += 1;\n', '    }\n', '    return(i);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 token that transferable by owner\n', ' */\n', 'contract TransferableByOwner is StandardToken, Ownable {\n', '\n', '  // timestamp until owner could transfer all tokens\n', '  uint256 constant public OWNER_TRANSFER_TOKENS = now + 1 years;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another by owner\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferByOwner(address _from, address _to, uint256 _value) onlyOwner public returns (bool) {\n', '    require(now < OWNER_TRANSFER_TOKENS);\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract ImmlaToken is MintableToken, TransferableByOwner {\n', '    using SafeMath for uint256;\n', '\n', '    /*\n', '     * Token meta data\n', '     */\n', '    string public constant name = "IMMLA";\n', '    string public constant symbol = "IML";\n', '    uint8 public constant decimals = 18;\n', '}\n', '\n', '\n', '\n', 'contract ImmlaDistribution is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // minimum amount of tokens a buyer gets per 1 ether\n', '    uint256 constant RATE_MIN = 3640;\n', '\n', '    // timestamp until owner could transfer all tokens\n', '    uint256 constant public OWNER_TRANSFER_TOKENS = now + 1 years;\n', '\n', '    // The token being sold\n', '    ImmlaToken public token;\n', '\n', '    //maximum tokens for mint in additional emission\n', '    uint256 public constant emissionLimit = 418124235 * 1 ether;\n', '\n', '    // amount of tokens that already minted in additional emission\n', '    uint256 public additionalEmission = 0;\n', '\n', '    // amount of token that currently available for buying\n', '    uint256 public availableEmission = 0;\n', '\n', '    bool public mintingPreIcoFinish = false;\n', '    bool public mintingBountyFinish = false;\n', '    bool public mintingFoundersFinish = false;\n', '\n', '    // address where funds are collected (by default t_Slava address)\n', '    address public wallet;\n', '\n', '    // how many token units a buyer gets per 1 ether\n', '    uint256 public rate;\n', '\n', '    address constant public t_ImmlaTokenDepository = 0x64075EEf64d9E105A61227CcCd5fA9F6b54DB278;\n', '    address constant public t_ImmlaTokenDepository2 = 0x2Faaf371Af6392fdd3016E111fB4b3B551Ee46aB;\n', '    address constant public t_ImmlaBountyTokenDepository = 0x5AB08C5Dfd53b8f6f6C3e3bbFDb521170C3863B0;\n', '    address constant public t_Andrey = 0x027810A9C17cb0E739a33769A9E794AAF40D2338;\n', '    address constant public t_Michail = 0x00af06cF0Ae6BD83fC36b6Ae092bb4F669B6dbF0;\n', '    address constant public t_Slava = 0x00c11E5B0b5db0234DfF9a357F56077c9a7A83D0;\n', '    address constant public t_Andrey2 = 0xC7e788FeaE61503136021cC48a0c95bB66d0B9f2;\n', '    address constant public t_Michail2 = 0xb6f4ED2CE19A08c164790419D5d87D3074D4Bd92;\n', '    address constant public t_Slava2 = 0x00ded30026135fBC460c2A9bf7beC06c7F31101a;\n', '\n', '    /**\n', '     * @dev Proposals for mint tokens to some address\n', '     */\n', '    mapping(address => Proposal) public proposals;\n', '\n', '    struct Proposal {\n', '        address wallet;\n', '        uint256 amount;\n', '        uint256 numberOfVotes;\n', '        mapping(address => bool) voted;\n', '    }\n', '\n', '    /**\n', '     * @dev Members of congress\n', '     */\n', '    mapping(address => bool) public congress;\n', '\n', '    /**\n', '     * @dev Minimal quorum value\n', '     */\n', '    uint256 public minimumQuorum = 1;\n', '\n', '    /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev On proposal added\n', '     * @param congressman Congressman address\n', '     * @param wallet Wallet\n', '     * @param amount Amount of wei to transfer\n', '     */\n', '    event ProposalAdded(address indexed congressman, address indexed wallet, uint256 indexed amount);\n', '\n', '    /**\n', '     * @dev On proposal passed\n', '     * @param congressman Congressman address\n', '     * @param wallet Wallet\n', '     * @param amount Amount of wei to transfer\n', '     */\n', '    event ProposalPassed(address indexed congressman, address indexed wallet, uint256 indexed amount);\n', '\n', '    /**\n', '   * @dev Modifier to make a function callable only when the minting for pre-ico is not paused.\n', '   */\n', '    modifier whenNotPreIcoFinish() {\n', '        require(!mintingPreIcoFinish);\n', '        _;\n', '    }\n', '\n', '    /**\n', '   * @dev Modifier to make a function callable only when the minting for bounty is not paused.\n', '   */\n', '    modifier whenNotBountyFinish() {\n', '        require(!mintingBountyFinish);\n', '        _;\n', '    }\n', '\n', '    /**\n', '   * @dev Modifier to make a function callable only when the minting for bounty is not paused.\n', '   */\n', '    modifier whenNotMintingFounders() {\n', '        require(!mintingFoundersFinish);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier that allows only congress to vote and create new proposals\n', '     */\n', '    modifier onlyCongress {\n', '        require (congress[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * ImmlaDistribution constructor\n', '     */\n', '    function ImmlaDistribution(address _token) public payable { // gas 6297067\n', '        token = ImmlaToken(_token);\n', '\n', '        //@TODO - change this to t_Slava (0x00c11E5B0b5db0234DfF9a357F56077c9a7A83D0) address or deploy contract from this address\n', '        owner = 0x00c11E5B0b5db0234DfF9a357F56077c9a7A83D0;\n', '\n', '        wallet = owner;\n', '        rate = RATE_MIN;\n', '\n', '        congress[t_Andrey] = true;\n', '        congress[t_Michail] = true;\n', '        congress[t_Slava] = true;\n', '        minimumQuorum = 3;\n', '    }\n', '\n', '    /**\n', '   * @dev called by the owner to mint tokens to founders\n', '   */\n', '    function mintToFounders() onlyOwner whenNotMintingFounders public returns (bool) {\n', '        mintToFounders(t_ImmlaTokenDepository, 52000 * 1 ether, 2);\n', '        mintToFounders(t_ImmlaTokenDepository2, 0, 2);\n', '        mintToFounders(t_ImmlaBountyTokenDepository, 0, 2);\n', '        mintToFounders(t_Andrey,   525510849836086000000000, 1);\n', '        mintToFounders(t_Michail,  394133137377065000000000, 1);\n', '        mintToFounders(t_Slava,    394133137377065000000000, 1);\n', '        mintToFounders(t_Andrey2,  284139016853060000000000, 2);\n', '        mintToFounders(t_Michail2, 213104262639795000000000, 2);\n', '        mintToFounders(t_Slava2,   213104262639795000000000, 2);\n', '        mintingFoundersFinish = true;\n', '\n', '        return true;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens();\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens() public payable {\n', '        require(availableEmission > 0);\n', '        require(msg.value != 0);\n', '\n', '        address investor = msg.sender;\n', '        uint256 weiAmount = msg.value;\n', '\n', '        uint256 tokensAmount = weiAmount.mul(rate);\n', '\n', '        //calculate change\n', '        uint256 tokensChange = 0;\n', '        if (tokensAmount > availableEmission) {\n', '            tokensChange = tokensAmount - availableEmission;\n', '            tokensAmount = availableEmission;\n', '        }\n', '\n', '        //make change\n', '        uint256 weiChange = 0;\n', '        if (tokensChange > 0) {\n', '            weiChange = tokensChange.div(rate);\n', '            investor.transfer(weiChange);\n', '        }\n', '\n', '        uint256 weiRaised = weiAmount - weiChange;\n', '\n', '        // update raised amount and additional emission\n', '        additionalEmission = additionalEmission.add(tokensAmount);\n', '        availableEmission = availableEmission.sub(tokensAmount);\n', '\n', '        //send tokens to investor\n', '        token.mint(investor, tokensAmount);\n', '        TokenPurchase(investor, weiRaised, tokensAmount);\n', '        mintBonusToFounders(tokensAmount);\n', '\n', '        //send ether to owner wallet\n', '        wallet.transfer(weiRaised);\n', '    }\n', '\n', '    /**\n', '   * @dev called by the owner to make additional emission\n', '   */\n', '    function updateAdditionalEmission(uint256 _amount, uint256 _rate) onlyOwner public { // gas 48191\n', '        require(_amount > 0);\n', '        require(_amount < (emissionLimit - additionalEmission));\n', '\n', '        availableEmission = _amount;\n', '        if (_rate > RATE_MIN) {\n', '            rate = RATE_MIN;\n', '        } else {\n', '            rate = _rate;\n', '        }\n', '    }\n', '\n', '    /**\n', '   * @dev called by the owner to stop minting\n', '   */\n', '    function stopPreIcoMint() onlyOwner whenNotPreIcoFinish public {\n', '        mintingPreIcoFinish = true;\n', '    }\n', '\n', '    /**\n', '   * @dev called by the owner to stop minting\n', '   */\n', '    function stopBountyMint() onlyOwner whenNotBountyFinish public {\n', '        mintingBountyFinish = true;\n', '    }\n', '\n', '    /**\n', '   * @dev called by the owner to mint tokens for pre-ico\n', '   */\n', '    function multiMintPreIco(address[] _dests, uint256[] _values) onlyOwner whenNotPreIcoFinish public returns (bool) {\n', '        token.multiMintPreico(_dests, _values);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '   * @dev called by the owner to mint tokens for bounty\n', '   */\n', '    function multiMintBounty(address[] _dests, uint256[] _values) onlyOwner whenNotBountyFinish public returns (bool) {\n', '        token.multiMintBounty(_dests, _values);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '   * @dev called to mint tokens to founders\n', '   */\n', '    function mintToFounders(address _dest, uint256 _value, uint _flag) internal {\n', '        token.mint(_dest, _value);\n', '        token.addFounderAccounts(_dest, _flag);\n', '    }\n', '\n', '    /**\n', '   * @dev called to mint bonus tokens to founders\n', '   */\n', '    function mintBonusToFounders(uint256 _value) internal {\n', '\n', '        uint256 valueWithCoefficient = (_value * 1000) / 813;\n', '        uint256 valueWithMultiplier1 = valueWithCoefficient / 10;\n', '        uint256 valueWithMultiplier2 = (valueWithCoefficient * 7) / 100;\n', '\n', '        token.mint(t_Andrey, (valueWithMultiplier1 * 4) / 10);\n', '        token.mint(t_Michail, (valueWithMultiplier1 * 3) / 10);\n', '        token.mint(t_Slava, (valueWithMultiplier1 * 3) / 10);\n', '        token.mint(t_Andrey2, (valueWithMultiplier2 * 4) / 10);\n', '        token.mint(t_Michail2, (valueWithMultiplier2 * 3) / 10);\n', '        token.mint(t_Slava2, (valueWithMultiplier2 * 3) / 10);\n', '        token.mint(t_ImmlaBountyTokenDepository, (valueWithCoefficient * 15) / 1000);\n', '    }\n', '\n', '    /**\n', '  * @dev called by owner for changing blockedTimeForBountyTokens\n', '  */\n', '    function changeBlockedTimeForBountyTokens(uint256 _blockedTime) onlyOwner public {\n', '        token.changeBlockedTimeForBountyTokens(_blockedTime);\n', '    }\n', '\n', '    /**\n', '  * @dev called by owner for changing blockedTimeForInvestedTokens\n', '  */\n', '    function changeBlockedTimeForInvestedTokens(uint256 _blockedTime) onlyOwner public {\n', '        token.changeBlockedTimeForInvestedTokens(_blockedTime);\n', '    }\n', '\n', '    /**\n', '     * @dev Create a new proposal\n', '     * @param _wallet Beneficiary account address\n', '     * @param _amount Amount of tokens\n', '     */\n', '    function proposal(address _wallet, uint256 _amount) onlyCongress public {\n', '        require(availableEmission > 0);\n', '        require(_amount > 0);\n', '        require(_wallet != 0x0);\n', '        \n', '        if (proposals[_wallet].amount > 0) {\n', '            require(proposals[_wallet].voted[msg.sender] != true); // If has already voted, cancel\n', '            require(proposals[_wallet].amount == _amount); // If amounts is equal\n', '\n', '            proposals[_wallet].voted[msg.sender] = true; // Set this voter as having voted\n', '            proposals[_wallet].numberOfVotes++; // Increase the number of votes\n', '\n', '            //proposal passed\n', '            if (proposals[_wallet].numberOfVotes >= minimumQuorum) {\n', '                if (_amount > availableEmission) {\n', '                    _amount = availableEmission;\n', '                }\n', '\n', '                // update raised amount and additional emission\n', '                additionalEmission = additionalEmission.add(_amount);\n', '                availableEmission = availableEmission.sub(_amount);\n', '\n', '                token.mint(_wallet, _amount);\n', '                TokenPurchase(_wallet, 0, _amount);\n', '                ProposalPassed(msg.sender, _wallet, _amount);\n', '\n', '                mintBonusToFounders(_amount);\n', '                delete proposals[_wallet];\n', '            }\n', '\n', '        } else {\n', '            Proposal storage p = proposals[_wallet];\n', '\n', '            p.wallet           = _wallet;\n', '            p.amount           = _amount;\n', '            p.numberOfVotes    = 1;\n', '            p.voted[msg.sender] = true;\n', '\n', '            ProposalAdded(msg.sender, _wallet, _amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '  * @dev called by owner for transfer tokens\n', '  */\n', '    function transferTokens(address _from, address _to, uint256 _amount) onlyOwner public {\n', '        require(_amount > 0);\n', '\n', "        //can't transfer after OWNER_TRANSFER_TOKENS date (after 1 year)\n", '        require(now < OWNER_TRANSFER_TOKENS);\n', '\n', "        //can't transfer from and to congressman addresses\n", '        require(!congress[_from]);\n', '        require(!congress[_to]);\n', '\n', '        token.transferByOwner(_from, _to, _amount);\n', '    }\n', '}']