['pragma solidity ^0.4.23;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/EubChainIco.sol\n', '\n', 'contract EubChainIco is PausableToken {\n', '\n', '  using SafeMath for uint;\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for StandardToken;\n', '\n', '  string public name = &#39;EUB Chain&#39;;\n', '  string public symbol = &#39;EUBC&#39;;\n', '  uint8 public decimals = 8;\n', '\n', '  uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);  // 1 billion tokens\n', '\n', '  uint public startTime;  // contract deployed timestamp\n', '\n', '  uint256 public tokenSold = 0; // total token sold\n', '\n', '  uint8 private teamShare = 10; // 10 percent\n', '  uint8 private teamExtraShare = 2; // 2 percent\n', '  uint8 private communityShare = 10; // 10 percent\n', '  uint8 private foundationShare = 10; // 10 percent\n', '  uint8 private operationShare = 40; // 40 percent\n', '\n', '  uint8 private icoShare = 30; // 30 percent\n', '  uint256 private icoCap = totalSupply.mul(icoShare).div(100);\n', '\n', '  uint256 private teamLockPeriod = 365 days;\n', '  uint256 private minVestLockMonths = 3;\n', '\n', '  address private fundsWallet;\n', '  address private teamWallet; // for team, lock for 1 year (can not transfer)\n', '  address private communityWallet; // for community group\n', '  address private foundationWallet; // for the foundation group\n', '\n', '  struct Locking {\n', '    uint256 amount;\n', '    uint endTime;\n', '  }\n', '  struct Vesting {\n', '    uint256 amount;\n', '    uint startTime;\n', '    uint lockMonths;\n', '    uint256 released;\n', '  }\n', '\n', '  mapping (address => Locking) private lockingMap;\n', '  mapping (address => Vesting) private vestingMap;\n', '\n', '  event VestTransfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 amount, \n', '    uint startTime, \n', '    uint lockMonths\n', '  );\n', '  event Release(address indexed to, uint256 amount);\n', '\n', '  /*\n', '    Contract constructor\n', '\n', '    @param _fundsWallet - funding wallet address\n', '    @param _teamWallet - team wallet address\n', '\n', '    @return address of created contract\n', '  */\n', '  constructor () public {\n', '\n', '    startTime = now;\n', '    uint teamLockEndTime = startTime.add(teamLockPeriod);\n', '\n', '    // save wallet addresses\n', '    fundsWallet = 0x1D64D9957e54711bf681985dB11Ac4De6508d2d8;\n', '    teamWallet = 0xe0f58e3b40d5B97aa1C72DD4853cb462E8628386;\n', '    communityWallet = 0x12bEfdd7D64312353eA0Cb0803b14097ee4cE28F;\n', '    foundationWallet = 0x8e037d80dD9FF654a17A4a009B49BfB71a992Cab;\n', '\n', '    // calculate token/allocation for each wallet type\n', '    uint256 teamTokens = totalSupply.mul(teamShare).div(100);\n', '    uint256 teamExtraTokens = totalSupply.mul(teamExtraShare).div(100);\n', '    uint256 communityTokens = totalSupply.mul(communityShare).div(100);\n', '    uint256 foundationTokens = totalSupply.mul(foundationShare).div(100);\n', '    uint256 operationTokens = totalSupply.mul(operationShare).div(100);\n', '\n', '    // team wallet enter vesting period after lock period\n', '    Vesting storage teamVesting = vestingMap[teamWallet];\n', '    teamVesting.amount = teamTokens;\n', '    teamVesting.startTime = teamLockEndTime;\n', '    teamVesting.lockMonths = 6;\n', '    emit VestTransfer(0x0, teamWallet, teamTokens, teamLockEndTime, teamVesting.lockMonths);\n', '\n', '    // transfer tokens to wallets\n', '    balances[communityWallet] = communityTokens;\n', '    emit Transfer(0x0, communityWallet, communityTokens);\n', '    balances[foundationWallet] = foundationTokens;\n', '    emit Transfer(0x0, foundationWallet, foundationTokens);\n', '\n', '    // transfer extra tokens from community wallet to team wallet\n', '    balances[communityWallet] = balances[communityWallet].sub(teamExtraTokens);\n', '    balances[teamWallet] = balances[teamWallet].add(teamExtraTokens);\n', '    emit Transfer(communityWallet, teamWallet, teamExtraTokens);\n', '  \n', '    // assign the rest to the funds wallet\n', '    uint256 restOfTokens = (\n', '      totalSupply\n', '        .sub(teamTokens)\n', '        .sub(communityTokens)\n', '        .sub(foundationTokens)\n', '        .sub(operationTokens)\n', '    );\n', '    balances[fundsWallet] = restOfTokens;\n', '    emit Transfer(0x0, fundsWallet, restOfTokens);\n', '    \n', '  }\n', '\n', '  /*\n', '    transfer vested tokens to receiver with lock period in months\n', '\n', '    @param _to - address of token receiver \n', '    @param _amount - amount of token allocate \n', '    @param _lockMonths - number of months to vest\n', '\n', '    @return true if the transfer is done\n', '  */\n', '  function vestedTransfer(address _to, uint256 _amount, uint _lockMonths) public whenNotPaused onlyPayloadSize(3 * 32) returns (bool) {\n', '    require(\n', '      msg.sender == fundsWallet ||\n', '      msg.sender == teamWallet\n', '    );\n', '  \n', '    // minimum vesting 3 months\n', '    require(_lockMonths >= minVestLockMonths);\n', '\n', '    // make sure it is a brand new vesting on the address\n', '    Vesting storage vesting = vestingMap[_to];\n', '    require(vesting.amount == 0);\n', '\n', '    if (msg.sender == fundsWallet) {\n', '      // check if token amount exceeds ico token cap\n', '      require(allowPurchase(_amount));\n', '      require(isPurchaseWithinCap(tokenSold, _amount));\n', '    \n', '      // check if msg.sender allow to send the amount\n', '      require(allowTransfer(msg.sender, _amount));\n', '\n', '      uint256 transferAmount = _amount.mul(15).div(100);\n', '      uint256 vestingAmount = _amount.sub(transferAmount);\n', '\n', '      vesting.amount = vestingAmount;\n', '      vesting.startTime = now;\n', '      vesting.lockMonths = _lockMonths;\n', '\n', '      emit VestTransfer(msg.sender, _to, vesting.amount, vesting.startTime, _lockMonths);\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '      tokenSold = tokenSold.add(_amount);\n', '\n', '      balances[_to] = balances[_to].add(transferAmount);\n', '      emit Transfer(msg.sender, _to, transferAmount);\n', '    } else if (msg.sender == teamWallet) {\n', '      Vesting storage teamVesting = vestingMap[teamWallet];\n', '\n', '      require(now < teamVesting.startTime);\n', '      require(\n', '        teamVesting.amount.sub(teamVesting.released) > _amount\n', '      );\n', '\n', '      teamVesting.amount = teamVesting.amount.sub(_amount);\n', '\n', '      vesting.amount = _amount;\n', '      vesting.startTime = teamVesting.startTime;\n', '      vesting.lockMonths = _lockMonths;\n', '\n', '      emit VestTransfer(msg.sender, _to, vesting.amount, vesting.startTime, _lockMonths);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  // @return true if ico is open\n', '  function isIcoOpen() public view returns (bool) {\n', '    bool capReached = tokenSold >= icoCap;\n', '    return !capReached;\n', '  }\n', '\n', '  /*\n', '    check if purchase amount exists ico cap\n', '\n', '    @param _tokenSold - amount of token sold \n', '    @param _purchaseAmount - amount of token want to purchase\n', '\n', '    @return true if _purchaseAmount is allowed\n', '  */\n', '  function isPurchaseWithinCap(uint256 _tokenSold, uint256 _purchaseAmount) internal view returns(bool) {\n', '    bool isLessThanCap = _tokenSold.add(_purchaseAmount) <= icoCap;\n', '    return isLessThanCap;\n', '  }\n', '\n', '  /*\n', '    @param _amount - amount of token\n', '    @return true if the purchase is valid\n', '  */\n', '  function allowPurchase(uint256 _amount) internal view returns (bool) {\n', '    bool nonZeroPurchase = _amount != 0;\n', '    return nonZeroPurchase && isIcoOpen();\n', '  }\n', '\n', '  /*\n', '    @param _wallet - wallet address of the token sender\n', '    @param _amount - amount of token\n', '    @return true if the transfer is valid\n', '  */\n', '  function allowTransfer(address _wallet, uint256 _amount) internal view returns (bool) {\n', '    Locking memory locking = lockingMap[_wallet];\n', '    if (locking.endTime > now) {\n', '      return balances[_wallet].sub(_amount) >= locking.amount;\n', '    } else {\n', '      return balances[_wallet] >= _amount;\n', '    }\n', '  }\n', '\n', '  /*\n', '    transfer token from caller to receiver\n', '\n', '    @param _to - wallet address of the token receiver\n', '    @param _value - amount of token to be transferred\n', '\n', '    @return true if the transfer is done\n', '  */\n', '  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '    require(allowTransfer(msg.sender, _value));\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /*\n', '    transfer token from sender to receiver \n', '\n', '    @param _from - wallet address of the token sender\n', '    @param _to - wallet address of the token receiver\n', '    @param _value - amount of token to be transferred\n', '\n', '    @return true if the transfer is done\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value)  onlyPayloadSize(3 * 32) public returns (bool) {\n', '    require(allowTransfer(_from, _value));\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /*\n', '    @param _wallet - wallet address wanted to check\n', '    @return amount of token allocated\n', '  */\n', '  function allocationOf(address _wallet) public view returns (uint256) {\n', '    Vesting memory vesting = vestingMap[_wallet];\n', '    return vesting.amount;\n', '  }\n', '\n', '  /*\n', '    get the releasable tokens\n', '    @return amount of released tokens\n', '  */\n', '  function release() public onlyPayloadSize(0 * 32) returns (uint256) {\n', '    uint256 unreleased = releasableAmount(msg.sender);\n', '    Vesting storage vesting = vestingMap[msg.sender];\n', '\n', '    if (unreleased > 0) {\n', '      vesting.released = vesting.released.add(unreleased);\n', '      emit Release(msg.sender, unreleased);\n', '\n', '      balances[msg.sender] = balances[msg.sender].add(unreleased);\n', '      emit Transfer(0x0, msg.sender, unreleased);\n', '    }\n', '\n', '    return unreleased;\n', '  }\n', '\n', '  /*\n', '    @param _wallet - wallet address wanted to check\n', '    @return amount of releasable token\n', '  */\n', '  function releasableAmount(address _wallet) public view returns (uint256) {\n', '    Vesting memory vesting = vestingMap[_wallet];\n', '    return vestedAmount(_wallet).sub(vesting.released);\n', '  }\n', '\n', '  /*\n', '    @param _wallet - wallet address wanted to check\n', '    @return amount of vested token\n', '  */\n', '  function vestedAmount(address _wallet) public view returns (uint256) {\n', '    uint amonth = 30 days;\n', '    Vesting memory vesting = vestingMap[_wallet];\n', '    uint lockPeriod = vesting.lockMonths.mul(amonth);\n', '    uint lockEndTime = vesting.startTime.add(lockPeriod);\n', '\n', '    if (now >= lockEndTime) {\n', '      return vesting.amount;\n', '    } else if (now > vesting.startTime) {\n', '      // vest a portion of token each month\n', '      \n', '      uint roundedPeriod = now\n', '        .sub(vesting.startTime)\n', '        .div(amonth)\n', '        .mul(amonth);\n', '\n', '      return vesting.amount\n', '        .mul(roundedPeriod)\n', '        .div(lockPeriod);\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  /*\n', '    modifiers to avoid short address attack\n', '  */\n', '  modifier onlyPayloadSize(uint size) {\n', '    assert(msg.data.length == size + 4);\n', '    _;\n', '  } \n', '  \n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/EubChainIco.sol\n', '\n', 'contract EubChainIco is PausableToken {\n', '\n', '  using SafeMath for uint;\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for StandardToken;\n', '\n', "  string public name = 'EUB Chain';\n", "  string public symbol = 'EUBC';\n", '  uint8 public decimals = 8;\n', '\n', '  uint256 public totalSupply = 1000000000 * (uint256(10) ** decimals);  // 1 billion tokens\n', '\n', '  uint public startTime;  // contract deployed timestamp\n', '\n', '  uint256 public tokenSold = 0; // total token sold\n', '\n', '  uint8 private teamShare = 10; // 10 percent\n', '  uint8 private teamExtraShare = 2; // 2 percent\n', '  uint8 private communityShare = 10; // 10 percent\n', '  uint8 private foundationShare = 10; // 10 percent\n', '  uint8 private operationShare = 40; // 40 percent\n', '\n', '  uint8 private icoShare = 30; // 30 percent\n', '  uint256 private icoCap = totalSupply.mul(icoShare).div(100);\n', '\n', '  uint256 private teamLockPeriod = 365 days;\n', '  uint256 private minVestLockMonths = 3;\n', '\n', '  address private fundsWallet;\n', '  address private teamWallet; // for team, lock for 1 year (can not transfer)\n', '  address private communityWallet; // for community group\n', '  address private foundationWallet; // for the foundation group\n', '\n', '  struct Locking {\n', '    uint256 amount;\n', '    uint endTime;\n', '  }\n', '  struct Vesting {\n', '    uint256 amount;\n', '    uint startTime;\n', '    uint lockMonths;\n', '    uint256 released;\n', '  }\n', '\n', '  mapping (address => Locking) private lockingMap;\n', '  mapping (address => Vesting) private vestingMap;\n', '\n', '  event VestTransfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 amount, \n', '    uint startTime, \n', '    uint lockMonths\n', '  );\n', '  event Release(address indexed to, uint256 amount);\n', '\n', '  /*\n', '    Contract constructor\n', '\n', '    @param _fundsWallet - funding wallet address\n', '    @param _teamWallet - team wallet address\n', '\n', '    @return address of created contract\n', '  */\n', '  constructor () public {\n', '\n', '    startTime = now;\n', '    uint teamLockEndTime = startTime.add(teamLockPeriod);\n', '\n', '    // save wallet addresses\n', '    fundsWallet = 0x1D64D9957e54711bf681985dB11Ac4De6508d2d8;\n', '    teamWallet = 0xe0f58e3b40d5B97aa1C72DD4853cb462E8628386;\n', '    communityWallet = 0x12bEfdd7D64312353eA0Cb0803b14097ee4cE28F;\n', '    foundationWallet = 0x8e037d80dD9FF654a17A4a009B49BfB71a992Cab;\n', '\n', '    // calculate token/allocation for each wallet type\n', '    uint256 teamTokens = totalSupply.mul(teamShare).div(100);\n', '    uint256 teamExtraTokens = totalSupply.mul(teamExtraShare).div(100);\n', '    uint256 communityTokens = totalSupply.mul(communityShare).div(100);\n', '    uint256 foundationTokens = totalSupply.mul(foundationShare).div(100);\n', '    uint256 operationTokens = totalSupply.mul(operationShare).div(100);\n', '\n', '    // team wallet enter vesting period after lock period\n', '    Vesting storage teamVesting = vestingMap[teamWallet];\n', '    teamVesting.amount = teamTokens;\n', '    teamVesting.startTime = teamLockEndTime;\n', '    teamVesting.lockMonths = 6;\n', '    emit VestTransfer(0x0, teamWallet, teamTokens, teamLockEndTime, teamVesting.lockMonths);\n', '\n', '    // transfer tokens to wallets\n', '    balances[communityWallet] = communityTokens;\n', '    emit Transfer(0x0, communityWallet, communityTokens);\n', '    balances[foundationWallet] = foundationTokens;\n', '    emit Transfer(0x0, foundationWallet, foundationTokens);\n', '\n', '    // transfer extra tokens from community wallet to team wallet\n', '    balances[communityWallet] = balances[communityWallet].sub(teamExtraTokens);\n', '    balances[teamWallet] = balances[teamWallet].add(teamExtraTokens);\n', '    emit Transfer(communityWallet, teamWallet, teamExtraTokens);\n', '  \n', '    // assign the rest to the funds wallet\n', '    uint256 restOfTokens = (\n', '      totalSupply\n', '        .sub(teamTokens)\n', '        .sub(communityTokens)\n', '        .sub(foundationTokens)\n', '        .sub(operationTokens)\n', '    );\n', '    balances[fundsWallet] = restOfTokens;\n', '    emit Transfer(0x0, fundsWallet, restOfTokens);\n', '    \n', '  }\n', '\n', '  /*\n', '    transfer vested tokens to receiver with lock period in months\n', '\n', '    @param _to - address of token receiver \n', '    @param _amount - amount of token allocate \n', '    @param _lockMonths - number of months to vest\n', '\n', '    @return true if the transfer is done\n', '  */\n', '  function vestedTransfer(address _to, uint256 _amount, uint _lockMonths) public whenNotPaused onlyPayloadSize(3 * 32) returns (bool) {\n', '    require(\n', '      msg.sender == fundsWallet ||\n', '      msg.sender == teamWallet\n', '    );\n', '  \n', '    // minimum vesting 3 months\n', '    require(_lockMonths >= minVestLockMonths);\n', '\n', '    // make sure it is a brand new vesting on the address\n', '    Vesting storage vesting = vestingMap[_to];\n', '    require(vesting.amount == 0);\n', '\n', '    if (msg.sender == fundsWallet) {\n', '      // check if token amount exceeds ico token cap\n', '      require(allowPurchase(_amount));\n', '      require(isPurchaseWithinCap(tokenSold, _amount));\n', '    \n', '      // check if msg.sender allow to send the amount\n', '      require(allowTransfer(msg.sender, _amount));\n', '\n', '      uint256 transferAmount = _amount.mul(15).div(100);\n', '      uint256 vestingAmount = _amount.sub(transferAmount);\n', '\n', '      vesting.amount = vestingAmount;\n', '      vesting.startTime = now;\n', '      vesting.lockMonths = _lockMonths;\n', '\n', '      emit VestTransfer(msg.sender, _to, vesting.amount, vesting.startTime, _lockMonths);\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '      tokenSold = tokenSold.add(_amount);\n', '\n', '      balances[_to] = balances[_to].add(transferAmount);\n', '      emit Transfer(msg.sender, _to, transferAmount);\n', '    } else if (msg.sender == teamWallet) {\n', '      Vesting storage teamVesting = vestingMap[teamWallet];\n', '\n', '      require(now < teamVesting.startTime);\n', '      require(\n', '        teamVesting.amount.sub(teamVesting.released) > _amount\n', '      );\n', '\n', '      teamVesting.amount = teamVesting.amount.sub(_amount);\n', '\n', '      vesting.amount = _amount;\n', '      vesting.startTime = teamVesting.startTime;\n', '      vesting.lockMonths = _lockMonths;\n', '\n', '      emit VestTransfer(msg.sender, _to, vesting.amount, vesting.startTime, _lockMonths);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  // @return true if ico is open\n', '  function isIcoOpen() public view returns (bool) {\n', '    bool capReached = tokenSold >= icoCap;\n', '    return !capReached;\n', '  }\n', '\n', '  /*\n', '    check if purchase amount exists ico cap\n', '\n', '    @param _tokenSold - amount of token sold \n', '    @param _purchaseAmount - amount of token want to purchase\n', '\n', '    @return true if _purchaseAmount is allowed\n', '  */\n', '  function isPurchaseWithinCap(uint256 _tokenSold, uint256 _purchaseAmount) internal view returns(bool) {\n', '    bool isLessThanCap = _tokenSold.add(_purchaseAmount) <= icoCap;\n', '    return isLessThanCap;\n', '  }\n', '\n', '  /*\n', '    @param _amount - amount of token\n', '    @return true if the purchase is valid\n', '  */\n', '  function allowPurchase(uint256 _amount) internal view returns (bool) {\n', '    bool nonZeroPurchase = _amount != 0;\n', '    return nonZeroPurchase && isIcoOpen();\n', '  }\n', '\n', '  /*\n', '    @param _wallet - wallet address of the token sender\n', '    @param _amount - amount of token\n', '    @return true if the transfer is valid\n', '  */\n', '  function allowTransfer(address _wallet, uint256 _amount) internal view returns (bool) {\n', '    Locking memory locking = lockingMap[_wallet];\n', '    if (locking.endTime > now) {\n', '      return balances[_wallet].sub(_amount) >= locking.amount;\n', '    } else {\n', '      return balances[_wallet] >= _amount;\n', '    }\n', '  }\n', '\n', '  /*\n', '    transfer token from caller to receiver\n', '\n', '    @param _to - wallet address of the token receiver\n', '    @param _value - amount of token to be transferred\n', '\n', '    @return true if the transfer is done\n', '  */\n', '  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '    require(allowTransfer(msg.sender, _value));\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /*\n', '    transfer token from sender to receiver \n', '\n', '    @param _from - wallet address of the token sender\n', '    @param _to - wallet address of the token receiver\n', '    @param _value - amount of token to be transferred\n', '\n', '    @return true if the transfer is done\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value)  onlyPayloadSize(3 * 32) public returns (bool) {\n', '    require(allowTransfer(_from, _value));\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /*\n', '    @param _wallet - wallet address wanted to check\n', '    @return amount of token allocated\n', '  */\n', '  function allocationOf(address _wallet) public view returns (uint256) {\n', '    Vesting memory vesting = vestingMap[_wallet];\n', '    return vesting.amount;\n', '  }\n', '\n', '  /*\n', '    get the releasable tokens\n', '    @return amount of released tokens\n', '  */\n', '  function release() public onlyPayloadSize(0 * 32) returns (uint256) {\n', '    uint256 unreleased = releasableAmount(msg.sender);\n', '    Vesting storage vesting = vestingMap[msg.sender];\n', '\n', '    if (unreleased > 0) {\n', '      vesting.released = vesting.released.add(unreleased);\n', '      emit Release(msg.sender, unreleased);\n', '\n', '      balances[msg.sender] = balances[msg.sender].add(unreleased);\n', '      emit Transfer(0x0, msg.sender, unreleased);\n', '    }\n', '\n', '    return unreleased;\n', '  }\n', '\n', '  /*\n', '    @param _wallet - wallet address wanted to check\n', '    @return amount of releasable token\n', '  */\n', '  function releasableAmount(address _wallet) public view returns (uint256) {\n', '    Vesting memory vesting = vestingMap[_wallet];\n', '    return vestedAmount(_wallet).sub(vesting.released);\n', '  }\n', '\n', '  /*\n', '    @param _wallet - wallet address wanted to check\n', '    @return amount of vested token\n', '  */\n', '  function vestedAmount(address _wallet) public view returns (uint256) {\n', '    uint amonth = 30 days;\n', '    Vesting memory vesting = vestingMap[_wallet];\n', '    uint lockPeriod = vesting.lockMonths.mul(amonth);\n', '    uint lockEndTime = vesting.startTime.add(lockPeriod);\n', '\n', '    if (now >= lockEndTime) {\n', '      return vesting.amount;\n', '    } else if (now > vesting.startTime) {\n', '      // vest a portion of token each month\n', '      \n', '      uint roundedPeriod = now\n', '        .sub(vesting.startTime)\n', '        .div(amonth)\n', '        .mul(amonth);\n', '\n', '      return vesting.amount\n', '        .mul(roundedPeriod)\n', '        .div(lockPeriod);\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  /*\n', '    modifiers to avoid short address attack\n', '  */\n', '  modifier onlyPayloadSize(uint size) {\n', '    assert(msg.data.length == size + 4);\n', '    _;\n', '  } \n', '  \n', '}']
