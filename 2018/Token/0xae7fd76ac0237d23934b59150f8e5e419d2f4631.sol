['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '    * Constructor function\n', '    *\n', '    * Initializes contract with initial supply tokens to the creator of the contract\n', '    */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '    * Internal transfer, only can be called by this contract\n', '    */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '\n', '        // Check for overflows\n', '        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '\n', '        // Subtract from the sender\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '    }\n', '\n', '    /**\n', '    * Transfer tokens\n', '    *\n', '    * Send `_value` tokens to `_to` from your account\n', '    *\n', '    * @param _to The address of the recipient\n', '    * @param _value the amount to send\n', '    */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * Transfer tokens from other address\n', '    *\n', '    * Send `_value` tokens to `_to` in behalf of `_from`\n', '    *\n', '    * @param _from The address of the sender\n', '    * @param _to The address of the recipient\n', '    * @param _value the amount to send\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        //allowance[_from][msg.sender] -= _value;\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Set allowance for other address\n', '    *\n', '    * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '    *\n', '    * @param _spender The address authorized to spend\n', '    * @param _value the max amount they can spend\n', '    */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Set allowance for other address and notify\n', '    *\n', '    * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '    *\n', '    * @param _spender The address authorized to spend\n', '    * @param _value the max amount they can spend\n', '    * @param _extraData some extra information to send to the approved contract\n', '    */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\t\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       ADVANCED TOKEN STARTS HERE       */\n', '/******************************************/\n', 'contract CinociCoin is Ownable, TokenERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => bool)    public  frozenAccount;\n', '    mapping (address => uint256) public freezingPeriod; // how many days the account must remain frozen?\n', '\n', '    mapping (address => bool) public exchangesAccounts;\n', '\n', '    address public bountyManagerAddress;\n', '    address public bountyManagerDistributionContract = 0x0;\n', '\n', '    address public fundAccount; \t// ballast fund address\n', '    bool public isSetFund = false;\t// if ballast fund is set\n', '\n', '    uint256 public creationDate;\n', '    uint256 public constant frozenDaysForAdvisor       = 187;  \n', '    uint256 public constant frozenDaysForBounty        = 187;\n', '    uint256 public constant frozenDaysForEarlyInvestor = 52;\n', '    uint256 public constant frozenDaysForICO           = 66;   \n', '    uint256 public constant frozenDaysForPartner       = 370;\n', '    uint256 public constant frozenDaysForPreICO        = 52;\n', '    uint256 public constant frozenDaysforTestExchange  = 0;\n', '\n', '    /**\n', '    * allowed for a bounty manager account only\n', '    */\n', '    modifier onlyBountyManager(){\n', '        require((msg.sender == bountyManagerDistributionContract) || (msg.sender == bountyManagerAddress));\n', '        _;\n', '    }\n', '\n', '    modifier onlyExchangesAccounts(){\n', '        require(exchangesAccounts[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * allowed for a fund account only\n', '    */\n', '    modifier onlyFund(){\n', '        require(msg.sender == fundAccount);\n', '        _;\n', '    }\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /**\n', '    * Initializes contract with initial supply tokens to the creator of the contract\n', '    *\n', '    *\n', '    */\n', '    function CinociCoin(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public \n', '    {\n', '        /* solium-disable-next-line */\n', '        creationDate = now;\n', '\n', '        address advisor = 0x32c5Ec858c52F8635Bd92e44d8797e5d356eBd05;\n', '        address bountyManager = 0xdDa9bcf30AFDC40a5fFa6e1b6f70ef030A3E32f4;\n', '        address earlyInvestor = 0x02FF2bA62440c92D2A02D95Df6fc233eA68c2091;\n', '        address partner = 0x6A45baAEb21D49fD85B309235Ef2920d3A648858;\n', '        address exchange1 = 0x8Bd10d3383504a12FD27A1Fd5c0E7bCeae3C8997;\n', '        address exchange2 = 0xce8b8e7113072C5308cec669375E0Ab364b3435C;\n', '\n', '        _initializeAccount(partner, frozenDaysForPartner, 30000000);\n', '        _initializeAccount(advisor, frozenDaysForAdvisor, 20000000);\n', '        _initializeAccount(earlyInvestor, frozenDaysForEarlyInvestor, 10000000);  \n', '        _initializeAccount(exchange1, frozenDaysforTestExchange, 1000);\n', '        _initializeAccount(exchange2, frozenDaysforTestExchange, 1000);\n', '        _initializeAccount(bountyManager, frozenDaysForBounty, 15000000);\n', '        bountyManagerAddress = bountyManager;\n', '    }\n', '\n', '    /**\n', '    * Only owner function to set ballast fund account address\n', '    * \n', '    * @dev it can be set only once\n', '    * @param _address smart contract address of ballast fund\n', '    */\n', '    function setFundAccount(address _address) onlyOwner public{\n', '        require (_address != 0x0);\n', '        require (!isSetFund);\n', '        fundAccount = _address;\n', '        isSetFund = true;    \n', '    }\n', '\n', '    function addExchangeAccounts(address _address) onlyOwner public{\n', '        require(_address != 0x0);\n', '        exchangesAccounts[_address] = true;\n', '    }\n', '\n', '    function removeExchangeAccounts(address _address) onlyOwner public{\n', '        delete exchangesAccounts[_address];\n', '    }\n', '\n', '    /**\n', '    * Initialize accounts when token deploy occurs\n', '    *\n', '    * initialize `_address` account, with balance equal `_value` and frozen for `_frozenDays`\n', '    *\n', '    * @param _address wallet address to initialize\n', '    * @param _frozenDays quantity of days to freeze account\n', '    * @param _value quantity of tokens to send to account\n', '    */\n', '    function _initializeAccount(address _address, uint _frozenDays, uint _value) internal{\n', '        _transfer(msg.sender, _address, _value * 10 ** uint256(decimals));\n', '        freezingPeriod[_address] = _frozenDays;\n', '        _freezeAccount(_address, true);\n', '    }\n', '\n', '    /**\n', '    * Check if account freezing period expired\n', '    *\n', '    * `now` has to be greater or equal than `creationDate` + `freezingPeriod[_address]` * `1 day`\n', '    *\n', '    * @param _address account address to check if allowed to transfer tokens\n', '    * @return bool true if is allowed to transfer and false if not\n', '    */\n', '    function _isTransferAllowed( address _address ) view public returns (bool)\n', '    {\n', '        /* solium-disable-next-line */\n', '        if( now >= creationDate + freezingPeriod[_address] * 1 days ){\n', '            return ( true );\n', '        } else {\n', '            return ( false );\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Internal function to transfer tokens\n', '    *\n', '    * @param _from account to withdraw tokens\n', '    * @param _to account to receive tokens\n', '    * @param _value quantity of tokens to transfer\n', '    */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                                  // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);                  // Check if the sender has enough\n', '        require (balanceOf[_to].add(_value) > balanceOf[_to]); // Check for overflows\n', '\n', '        // check if the sender is under a freezing period\n', '        if(_isTransferAllowed(_from)){ \n', '            _setFreezingPeriod(_from, false, 0);\n', '        }\n', '\n', '        // check if the recipient is under a freezing period\n', '        if(_isTransferAllowed(_to)){\n', '            _setFreezingPeriod(_to, false, 0);\n', '        }\n', '\n', '        require(!frozenAccount[_from]);     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);       // Check if recipient is frozen                \n', '        \n', '        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    /**\n', '    * Internal function to deliver tokens for bounty, pre-ICO or ICO with determined freezing periods\n', '    *\n', '    * @param _from account address to withdraw tokens\n', '    * @param _to account address to send tokens\n', '    * @param _value quantity of tokes to send\n', '    * @param _frozenDays quantity of days to freeze account\n', '    */\n', '    function _tokenDelivery(address _from, address _to, uint _value, uint _frozenDays) internal {\n', '        freezingPeriod[_to] = 0;\n', '        _freezeAccount(_to, false);\n', '        _transfer(_from, _to, _value);\n', '        freezingPeriod[_to] = _frozenDays;\n', '        _freezeAccount(_to, true); \n', '    }\n', '    \n', '    /**\n', '    * Only owner function to deliver tokens for pre-ICO investors\n', '    *\n', '    * @param _to account address who will receive the tokens\n', '    * @param _value quantity of tokens to deliver\n', '    */\n', '    function preICOTokenDelivery(address _to, uint _value) onlyOwner public {\n', '        _tokenDelivery(msg.sender, _to, _value, frozenDaysForPreICO);\n', '    }\n', '    \n', '    /**\n', '    * Only owner function to deliver tokens for ICO investors\n', '    *\n', '    * @param _to account address who will receive tokens\n', '    * @param _value quantity of tokens to deliver\n', '    */\n', '    function ICOTokenDelivery(address _to, uint _value) onlyOwner public {\n', '        _tokenDelivery(msg.sender, _to, _value, frozenDaysForICO);\n', '    }\n', '    \n', '    function setBountyDistributionContract(address _contractAddress) onlyOwner public {\n', '        bountyManagerDistributionContract = _contractAddress;\n', '    }\n', '\n', '    /**onlyBounty\n', '    * Only bounty manager distribution contract function to deliver tokens for bounty community\n', '    *\n', '    * @param _to account addres who will receive tokens\n', '    * @param _value quantity of tokens to deliver\n', '    */\n', '    function bountyTransfer(address _to, uint _value) onlyBountyManager public {\n', '        _freezeAccount(bountyManagerAddress, false);\n', '        _tokenDelivery(bountyManagerAddress, _to, _value, frozenDaysForBounty);\n', '        _freezeAccount(bountyManagerAddress, true);\n', '    }\n', '\n', '    /**\n', '    * Function to get days to unfreeze some account\n', '    *\n', '    * @param _address account address to get days\n', '    * @return result quantity of days to unfreeze `address`\n', '    */\n', '    function daysToUnfreeze(address _address) public view returns (uint256) {\n', '        require(_address != 0x0);\n', '\n', '        /* solium-disable-next-line */\n', '        uint256 _now = now;\n', '        uint256 result = 0;\n', '\n', '        if( _now <= creationDate + freezingPeriod[_address] * 1 days ) {\n', '            // still under the freezing period.\n', '            uint256 finalPeriod = (creationDate + freezingPeriod[_address] * 1 days) / 1 days;\n', '            uint256 currePeriod = _now / 1 days;\n', '            result = finalPeriod - currePeriod;\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '    * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    * @param target Address to be frozen\n', '    * @param freeze either to freeze it or not\n', '    */\n', '    function _freezeAccount(address target, bool freeze) internal {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /**\n', '    * Only owner function to call `_freezeAccount` directly\n', '    *\n', '    * @param target account address to freeze\n', '    * @param freeze true to freeze account and false to unfreeze\n', '    */\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        _freezeAccount(target, freeze);\n', '    }\n', '    \n', '    /**\n', '    * Internal call to set freezing period for some account\n', '    *\n', '    * @param _target account address to freeze\n', '    * @param _freeze true to freeze account and false to unfreeze\n', '    * @param _days period to keep account frozen\n', '    */\n', '    function _setFreezingPeriod(address _target, bool _freeze, uint256 _days) internal {\n', '        _freezeAccount(_target, _freeze);\n', '        freezingPeriod[_target] = _days;\n', '    }\n', '    \n', '    /**\n', '    * Only owner function to call `_setFreezingPeriod` directly\n', '    *\n', '    * @param _target account address to freeze\n', '    * @param _freeze true to freeze account and false to unfreeze\n', '    * @param _days period to keep account frozen\n', '    */\n', '    function setFreezingPeriod(address _target, bool _freeze, uint256 _days) onlyOwner public {\n', '        _setFreezingPeriod(_target, _freeze, _days);\n', '    }\n', '    \n', '    /**\n', '    * Transfer tokens from other address\n', '    *\n', '    * Send `_value` tokens to `_to` in behalf of `_from`\n', '    *\n', '    * @param _from The address of the sender\n', '    * @param _to The address of the recipient\n', '    * @param _value the amount to send\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        //allowance[_from][msg.sender] -= _value;\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Set allowance for other address\n', '    *\n', '    * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '    *\n', '    * @param _spender The address authorized to spend\n', '    * @param _value the max amount they can spend\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // check if the sender is under a freezing period\n', '        if( _isTransferAllowed(msg.sender) )  {\n', '            _setFreezingPeriod(msg.sender, false, 0);\n', '        }\n', '        \n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Set allowance for other address and notify\n', '    *\n', '    * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '    *\n', '    * @param _spender The address authorized to spend\n', '    * @param _value the max amount they can spend\n', '    * @param _extraData some extra information to send to the approved contract\n', '    */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        // check if the sender is under a freezing period\n', '        if( _isTransferAllowed(msg.sender) ) {\n', '            _setFreezingPeriod(msg.sender, false, 0);\n', '        }\n', '\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Destroy tokens\n', '    *\n', '    * Remove `_value` tokens from the system irreversibly\n', '    *\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        return _burn(msg.sender, _value);\n', '    }\n', '\n', '    /**\n', '    *\n', '     */\n', '    function _burn(address _from, uint256 _value) internal returns (bool success) {\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);            // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Destroy tokens from other account\n', '    *\n', '    * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '    *\n', '    * @param _from the address of the sender\n', '    * @param _value the amount of money to burn\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                                     // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);                         // Check allowance\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Subtract from the sender&#39;s allowance\n', '        return _burn(_from, _value);\n', '    }\n', '\n', '    /**\n', '    * Only ballast fund function to burn tokens from account\n', '    *\n', '    * Allows `fundAccount` burn tokens to send equivalent ether for account that claimed it\n', '    * @param _from account address to burn tokens\n', '    * @param _value quantity of tokens to burn\n', '    */\n', '    function redemptionBurn(address _from, uint256 _value) onlyFund public{\n', '        _burn(_from, _value);\n', '    }   \n', '}']