['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant public returns (uint256 supply);\n', '    function balanceOf(address _owner) constant public returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public returns (uint remaining);\n', '    event Transfer(address _from, address _to, uint _value);\n', '    event Approval(address _owner, address _spender, uint _value);\n', '}\n', '\n', 'contract Token is ERC20 {\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\taddress public owner;\n', '    mapping (address=>uint256) balances;\n', '    mapping (address=>mapping (address=>uint256)) allowed;\n', '    \n', '    function totalSupply() constant public returns (uint256 supply) {\n', '        supply = totalSupply;\n', '    }\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {return balances[_owner];}\n', '    \n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n', '        balances[msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(msg.sender,_to,_amount);\n', '        return true;\n', '    }\n', '  \n', '    function transferFrom(address _from,address _to,uint256 _amount) public returns (bool success) {\n', '        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n', '        balances[_from]-=_amount;\n', '        allowed[_from][msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '  \n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender]=_amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract GDC is Token{\n', '\tmodifier onlyOwner() {\n', '      if (msg.sender!=owner) revert();\n', '      _;\n', '    }\n', '    \n', '    constructor() public{\n', '        symbol = "GDC";\n', '        name = "GOLDENCOIN";\n', '        decimals = 4;\n', '        totalSupply = 2000000000000;\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require (newOwner!=0);\n', '        owner = newOwner;\n', '    }\n', '    \n', '    function () payable public {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant public returns (uint256 supply);\n', '    function balanceOf(address _owner) constant public returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public returns (uint remaining);\n', '    event Transfer(address _from, address _to, uint _value);\n', '    event Approval(address _owner, address _spender, uint _value);\n', '}\n', '\n', 'contract Token is ERC20 {\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\taddress public owner;\n', '    mapping (address=>uint256) balances;\n', '    mapping (address=>mapping (address=>uint256)) allowed;\n', '    \n', '    function totalSupply() constant public returns (uint256 supply) {\n', '        supply = totalSupply;\n', '    }\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {return balances[_owner];}\n', '    \n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n', '        balances[msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(msg.sender,_to,_amount);\n', '        return true;\n', '    }\n', '  \n', '    function transferFrom(address _from,address _to,uint256 _amount) public returns (bool success) {\n', '        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n', '        balances[_from]-=_amount;\n', '        allowed[_from][msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '  \n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender]=_amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract GDC is Token{\n', '\tmodifier onlyOwner() {\n', '      if (msg.sender!=owner) revert();\n', '      _;\n', '    }\n', '    \n', '    constructor() public{\n', '        symbol = "GDC";\n', '        name = "GOLDENCOIN";\n', '        decimals = 4;\n', '        totalSupply = 2000000000000;\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require (newOwner!=0);\n', '        owner = newOwner;\n', '    }\n', '    \n', '    function () payable public {\n', '        revert();\n', '    }\n', '}']
