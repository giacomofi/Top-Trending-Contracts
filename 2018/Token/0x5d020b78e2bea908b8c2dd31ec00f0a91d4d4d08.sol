['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '   /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '   /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '   /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '   /**\n', '    * @dev Transfers control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "      // benefit is lost if 'b' is also tested.\n", '      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address owner) external view returns (uint256);\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract ERC20Token is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '   /**\n', '    * @dev ERC20 token with the addition properties name, symbol, and decimals. \n', '    * Added mint, burn, burnFrom methods\n', '    */\n', '    mapping (address => uint256) internal _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    uint256 internal _totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '   /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '   /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '   /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param owner address The address which owns the funds.\n', '    * @param spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '   /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(value <= _balances[msg.sender]);\n', '        require(to != address(0));\n', '\n', '        _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param spender The address which will spend the funds.\n', '    * @param value The amount of tokens to be spent.\n', '    */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param from address The address which you want to send tokens from\n', '    * @param to address The address which you want to transfer to\n', '    * @param value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(value <= _balances[from]);\n', '        require(value <= _allowed[from][msg.sender]);\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    * @dev Internal function that forces a token transfer from one address to another\n', '    * @param from address The address which you want to send tokens from\n', '    * @param to address The address which you want to transfer to\n', '    * @param value uint256 the amount of tokens to be transferred\n', '    */\n', '    function _forceTransfer(address from, address to, uint256 value) internal returns (bool) {\n', '        require(value <= _balances[from]);\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    * @dev Internal function that mints an amount of the token and assigns it to\n', '    * an account. This encapsulates the modification of balances such that the\n', '    * proper events are emitted.\n', '    * @param account The account that will receive the created tokens.\n', '    * @param amount The amount that will be created.\n', '    */\n', '    function _mint(address account, uint256 amount) internal returns (bool) {\n', '        require(account != 0);\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    * @dev Internal function that burns an amount of the token of a given\n', '    * account.\n', '    * @param account The account whose tokens will be burnt.\n', '    * @param amount The amount that will be burnt.\n', '    */\n', '    function _burn(address account, uint256 amount) internal returns (bool) {\n', '        require(account != 0);\n', '        require(amount <= _balances[account]);\n', '\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[account] = _balances[account].sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract RegulatorService {\n', '\n', '    function verify(address _token, address _spender, address _from, address _to, uint256 _amount) \n', '        public \n', '        view \n', '        returns (byte) \n', '    {\n', '        return hex"A3";\n', '    }\n', '\n', '    function restrictionMessage(byte restrictionCode)\n', '        public\n', '        view\n', '        returns (string)\n', '    {\n', '    \tif(restrictionCode == hex"01") {\n', '    \t\treturn "No restrictions detected";\n', '        }\n', '        if(restrictionCode == hex"10") {\n', '            return "One of the accounts is not on the whitelist";\n', '        }\n', '        if(restrictionCode == hex"A3") {\n', '            return "The lockup period is in progress";\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract AtomicDSS is ERC20Token, Ownable {\n', '    byte public constant SUCCESS_CODE = hex"01";\n', '    string public constant SUCCESS_MESSAGE = "SUCCESS";\n', '    RegulatorService public regulator;\n', '  \n', '    event ReplaceRegulator(address oldRegulator, address newRegulator);\n', '\n', '    modifier notRestricted (address from, address to, uint256 value) {\n', '        byte restrictionCode = regulator.verify(this, msg.sender, from, to, value);\n', '        require(restrictionCode == SUCCESS_CODE, regulator.restrictionMessage(restrictionCode));\n', '        _;\n', '    }\n', '\n', '    constructor(RegulatorService _regulator, address[] wallets, uint256[] amounts, address owner) public {\n', '            regulator = _regulator;\n', '            symbol = "ATOM";\n', '            name = "Atomic Capital, Inc.C-Corp.Delaware.Equity.1.Common.";\n', '            decimals = 18;\n', '            for (uint256 i = 0; i < wallets.length; i++){\n', '                mint(wallets[i], amounts[i]);\n', '                if(i == 10){\n', '                    break;\n', '                }\n', '            }\n', '            transferOwnership(owner);\n', '    }\n', '\n', '  /**\n', '   * @dev Validate contract address\n', '   * Credit: https://github.com/Dexaran/ERC223-token-standard/blob/Recommended/ERC223_Token.sol#L107-L114\n', '   *\n', '   * @param _addr The address of a smart contract\n', '   */\n', '    modifier isContract (address _addr) {\n', '        uint length;\n', '        assembly { length := extcodesize(_addr) }\n', '        require(length > 0);\n', '        _;\n', '    }\n', '\n', '    function replaceRegulator(RegulatorService _regulator) \n', '        public \n', '        onlyOwner \n', '        isContract(_regulator) \n', '    {\n', '        address oldRegulator = regulator;\n', '        regulator = _regulator;\n', '        emit ReplaceRegulator(oldRegulator, regulator);\n', '    }\n', '\n', '    function transfer(address to, uint256 value)\n', '        public\n', '        notRestricted(msg.sender, to, value)\n', '        returns (bool)\n', '    {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public\n', '        notRestricted(from, to, value)\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function forceTransfer(address from, address to, uint256 value)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return super._forceTransfer(from, to, value);\n', '    }\n', '\n', '    function mint(address account, uint256 amount) \n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return super._mint(account, amount);\n', '    }\n', '\n', '    function burn(address account, uint256 amount) \n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return super._burn(account, amount);\n', '    }\n', '}']