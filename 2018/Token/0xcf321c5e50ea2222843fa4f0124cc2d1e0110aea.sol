['pragma solidity ^0.4.19;\n', '\n', '//vicent nos & enrique santos\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '\n', '  function Ownable() internal {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '//////////////////////////////////////////////////////////////\n', '//                                                          //\n', "//  Lescovex, Shareholder's ERC20  //\n", '//                                                          //\n', '//////////////////////////////////////////////////////////////\n', '\n', '\n', 'contract Lescovex is Ownable {\n', '  uint256 public totalSupply;\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  mapping(address => uint256) holded;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', ' event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    require(block.timestamp>blockEndICO || msg.sender==owner);\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    holded[_to]=block.number;\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '\n', '    \n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function holdedOf(address _owner) public view returns (uint256 balance) {\n', '    return holded[_owner];\n', '  }\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    holded[_to]=block.number;\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function burn(address addr) public onlyOwner{\n', '    balances[addr]=0;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public onlyOwner returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public onlyOwner returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public onlyOwner returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '    string public constant standard = "ERC20 Lescovex";\n', '\n', '    /* Public variables for the ERC20 token, defined when calling the constructor */\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public constant decimals = 8; // hardcoded to be a constant\n', '\n', '    // Contract variables and constants\n', '    uint256 public constant minPrice = 7500000000000000;\n', '    uint256 public constant blockEndICO = 1524182460;\n', '    uint256 public buyPrice = minPrice;\n', '\n', '    uint256 constant initialSupply=0;\n', '    string constant tokenName="Lescovex Shareholder\'s";\n', '    string constant tokenSymbol="LCX";\n', '\n', '    uint256 public tokenReward = 0;\n', '    // constant to simplify conversion of token amounts into integer form\n', '    uint256 public tokenUnit = uint256(10)**decimals;\n', '    \n', '    // Spread in parts per 100 millions, such that expressing percentages is \n', "    // just to append the postfix 'e6'. For example, 4.53% is: spread = 4.53e6\n", '    address public LescovexAddr = 0xD26286eb9E6E623dba88Ed504b628F648ADF7a0E;\n', '\n', '    //Declare logging events\n', '    event LogDeposit(address sender, uint amount);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function Lescovex() public {\n', '       \n', '        totalSupply = initialSupply;  // Update total supply\n', '        name = tokenName;             // Set the name for display purposes\n', '        symbol = tokenSymbol;         // Set the symbol for display purposes\n', '    }\n', '\n', '    function () public payable {\n', '        buy();   // Allow to buy tokens sending ether direcly to contract\n', '    }\n', '    \n', '\n', '    modifier status() {\n', '        _;  // modified function code should go before prices update\n', '\n', '    if(block.timestamp<1519862460){ //until 1 march 2018\n', '      if(totalSupply<50000000000000){\n', '        buyPrice=7500000000000000;\n', '      }else{\n', '        buyPrice=8000000000000000;\n', '      }\n', '  \n', '    }else if(block.timestamp<1520640060){ // until 10 march 2018\n', '\n', '      buyPrice=8000000000000000;\n', '    }else if(block.timestamp<1521504060){ //until 20 march 2018\n', '\n', '      buyPrice=8500000000000000;\n', '    }else if(block.timestamp<1522368060){ //until 30 march 2018\n', '\n', '      buyPrice=9000000000000000;\n', '\n', '    }else if(block.timestamp<1523232060){ //until 9 april 2018\n', '      buyPrice=9500000000000000;\n', '\n', '    }else{\n', '\n', '      buyPrice=10000000000000000;\n', '    }\n', '\n', '        \n', '    }\n', '\n', '    function deposit() public payable status returns(bool success) {\n', '        // Check for overflows;\n', '        assert (this.balance + msg.value >= this.balance); // Check for overflows\n', '      tokenReward=this.balance/totalSupply;\n', '        //executes event to reflect the changes\n', '        LogDeposit(msg.sender, msg.value);\n', '        \n', '        return true;\n', '    }\n', '\n', '  function withdrawReward() public status {\n', '    require (block.number - holded[msg.sender] > 172800); //1 month\n', '    \n', '    holded[msg.sender] = block.number;\n', '    uint256 ethAmount = tokenReward * balances[msg.sender];\n', '\n', '    //send eth to owner address\n', '    msg.sender.transfer(ethAmount);\n', '      \n', '    //executes event ro register the changes\n', '    LogWithdrawal(msg.sender, ethAmount);\n', '  }\n', '\n', '\n', '  event LogWithdrawal(address receiver, uint amount);\n', '  \n', '  function withdraw(uint value) public onlyOwner {\n', '    //send eth to owner address\n', '    msg.sender.transfer(value);\n', '    //executes event ro register the changes\n', '    LogWithdrawal(msg.sender, value);\n', '  }\n', '\n', '\n', '    function transferBuy(address _to, uint256 _value) internal returns (bool) {\n', '      require(_to != address(0));\n', '      \n', '\n', '      // SafeMath.sub will throw if there is not enough balance.\n', '\n', '      totalSupply=totalSupply.add(_value*2);\n', '      holded[_to]=block.number;\n', '      balances[LescovexAddr] = balances[LescovexAddr].add(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '\n', '      Transfer(this, _to, _value);\n', '      return true;\n', '      \n', '    }\n', '\n', '  \n', '           \n', '    function buy() public payable status{\n', '     \n', '      require (totalSupply<=1000000000000000);\n', '      require(block.timestamp<blockEndICO);\n', '\n', '      uint256 tokenAmount = (msg.value / buyPrice)*tokenUnit ;  // calculates the amount\n', '\n', '      transferBuy(msg.sender, tokenAmount);\n', '      LescovexAddr.transfer(msg.value);\n', '    \n', '    }\n', '\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public onlyOwner returns (bool success) {    \n', '\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public ; \n', '}']