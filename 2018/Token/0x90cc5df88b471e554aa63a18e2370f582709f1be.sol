['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', '*/\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', '\n', 'interface ERC20 {\n', '\n', '    //Returns the account balance of another account with address _owner.\n', '    function balanceOf(address _owner) external constant returns (uint256 balance);\n', '\n', '    //Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n', '    //The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n', '    //\n', '    //Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    //Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n', '    //\n', '    //The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.\n', '    //This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge\n', '    //fees in sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized\n', '    //the sender of the message via some mechanism.\n', '    //\n', '    //Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    //Allows _spender to withdraw from your account multiple times, up to the _value amount.\n', '    //If this function is called again it overwrites the current allowance with _value.\n', '    //\n', '    //NOTE: To prevent attack vectors like the one described here and discussed here, clients SHOULD make\n', '    //sure to create user interfaces in such a way that they set the allowance first to 0 before setting it\n', '    //to another value for the same spender. THOUGH The contract itself shouldn&#39;t enforce it, to allow\n', '    //backwards compatibility with contracts deployed before\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    //Returns the amount which _spender is still allowed to withdraw from _owner.\n', '    function allowance(address _owner, address _spender) external returns (uint256 remaining);\n', '\n', '    //MUST trigger when tokens are transferred, including zero value transfers.\n', '    //\n', '    //A token contract which creates new tokens SHOULD trigger a Transfer event with the _from\n', '    //address set to 0x0 when tokens are created.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    //MUST trigger on any successful call to approve(address _spender, uint256 _value).\n', '    event Approval(address indexed _owner, address indexed _spender, uint256  _value);\n', '}\n', '\n', '\n', 'contract POMZ is ERC20 {\n', '\n', '    //use libraries section\n', '\tusing SafeMath for uint256;\n', '\n', '    //token characteristics section\n', '    uint public constant decimals = 8;\n', '    uint256 public totalSupply = 5000000000 * 10 ** decimals;\n', '    string public constant name = "POMZ";\n', '    string public constant symbol = "POMZ";\n', '\n', '    //storage section\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    //all token to creator\n', '\tconstructor() public {\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '    //Returns the account balance of another account with address _owner.\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '\t    return balances[_owner];\n', '    }\n', '\n', '    //Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n', '    //The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        uint256 previousBalances = balances[_to];\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        assert(balances[_to].sub(_value) == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    //Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        uint256 previousBalances = balances[_to];\n', '\t    balances[_from] = balances[_from].sub(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\t\tassert(balances[_to].sub(_value) == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    //Allows _spender to withdraw from your account multiple times, up to the _value amount.\n', '    //If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    //Returns the amount which _spender is still allowed to withdraw from _owner.\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // If ether is sent to this address, send it back.\n', '\tfunction () public {\n', '        revert();\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', '*/\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', '\n', 'interface ERC20 {\n', '\n', '    //Returns the account balance of another account with address _owner.\n', '    function balanceOf(address _owner) external constant returns (uint256 balance);\n', '\n', '    //Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n', '    //The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n', '    //\n', '    //Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    //Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n', '    //\n', '    //The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf.\n', '    //This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge\n', '    //fees in sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized\n', '    //the sender of the message via some mechanism.\n', '    //\n', '    //Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    //Allows _spender to withdraw from your account multiple times, up to the _value amount.\n', '    //If this function is called again it overwrites the current allowance with _value.\n', '    //\n', '    //NOTE: To prevent attack vectors like the one described here and discussed here, clients SHOULD make\n', '    //sure to create user interfaces in such a way that they set the allowance first to 0 before setting it\n', "    //to another value for the same spender. THOUGH The contract itself shouldn't enforce it, to allow\n", '    //backwards compatibility with contracts deployed before\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    //Returns the amount which _spender is still allowed to withdraw from _owner.\n', '    function allowance(address _owner, address _spender) external returns (uint256 remaining);\n', '\n', '    //MUST trigger when tokens are transferred, including zero value transfers.\n', '    //\n', '    //A token contract which creates new tokens SHOULD trigger a Transfer event with the _from\n', '    //address set to 0x0 when tokens are created.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    //MUST trigger on any successful call to approve(address _spender, uint256 _value).\n', '    event Approval(address indexed _owner, address indexed _spender, uint256  _value);\n', '}\n', '\n', '\n', 'contract POMZ is ERC20 {\n', '\n', '    //use libraries section\n', '\tusing SafeMath for uint256;\n', '\n', '    //token characteristics section\n', '    uint public constant decimals = 8;\n', '    uint256 public totalSupply = 5000000000 * 10 ** decimals;\n', '    string public constant name = "POMZ";\n', '    string public constant symbol = "POMZ";\n', '\n', '    //storage section\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    //all token to creator\n', '\tconstructor() public {\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '    //Returns the account balance of another account with address _owner.\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '\t    return balances[_owner];\n', '    }\n', '\n', '    //Transfers _value amount of tokens to address _to, and MUST fire the Transfer event.\n', '    //The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        uint256 previousBalances = balances[_to];\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        assert(balances[_to].sub(_value) == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    //Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        uint256 previousBalances = balances[_to];\n', '\t    balances[_from] = balances[_from].sub(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\t\tassert(balances[_to].sub(_value) == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    //Allows _spender to withdraw from your account multiple times, up to the _value amount.\n', '    //If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    //Returns the amount which _spender is still allowed to withdraw from _owner.\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // If ether is sent to this address, send it back.\n', '\tfunction () public {\n', '        revert();\n', '    }\n', '\n', '}']
