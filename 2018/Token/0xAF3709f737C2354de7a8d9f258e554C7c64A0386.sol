['pragma solidity ^0.4.18;\n', '\n', 'contract Mobilink {\n', '\n', '    function Mobilink() public {\n', '    }\n', '\n', '    function createERC20(address _initialOwner, uint256 _initialAmount, \n', 'string _name, uint8 _decimals, string _symbol)\n', '        public\n', '    returns (address) {\n', '\n', '        ERC20 newToken = (new ERC20(_initialOwner, _initialAmount, \n', '_name, _decimals, _symbol));\n', '\n', '        return address(newToken);\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Interface {\n', '\n', '    uint256 public totalSupply = 9000000000000000000000000000;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 \n', 'balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool \n', 'success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', 'public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns \n', '(bool success);\n', '\n', '    function allowance(address _owner, address _spender) public view \n', 'returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 \n', '_value);\n', '    event Approval(address indexed _owner, address indexed _spender, \n', 'uint256 _value);\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', 'contract ERC20 is ERC20Interface {\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    string public name ="MobilinkToken";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "MLK";\n', '\n', '    function ERC20(\n', '        address _initialOwner,\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '    ) public {\n', '        balances[_initialOwner] = _initialAmount;\n', '        totalSupply = _initialAmount;\n', '        name = _tokenName;\n', '        decimals = _decimalUnits;\n', '        symbol = _tokenSymbol;\n', '        emit Transfer(_initialOwner, _initialOwner, _initialAmount);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool \n', 'success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', 'public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 \n', 'balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns \n', '(bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view \n', 'returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']