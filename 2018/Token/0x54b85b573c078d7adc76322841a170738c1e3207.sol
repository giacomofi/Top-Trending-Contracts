['pragma solidity 0.4.24;\n', '/**\n', ' * @title ERC20 Interface\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SwapToken\n', ' */\n', 'contract  SwapToken{\n', '    using SafeMath for uint256;\n', '    ERC20 public oldToken;\n', '    ERC20 public newToken;\n', '    address public tokenOwner;\n', '\n', '    address public owner;\n', '    bool public swap_able;\n', '    bool public setup_token;\n', '\n', '    event Swap(address sender, uint256 amount);\n', '    event SwapAble(bool swapable);\n', '\n', '    modifier isOwner() {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isSwap() {\n', '        require (swap_able);\n', '        _;\n', '    }\n', '\n', '    modifier isNotSetup() {\n', '        require (!setup_token);\n', '        _;\n', '    }\n', '\n', '    constructor()\n', '    public\n', '    {\n', '        owner = msg.sender;\n', '        swap_able = false;\n', '    }\n', '\n', '    function setupToken(address _oldToken, address _newToken, address _tokenOwner)\n', '    public\n', '    isNotSetup\n', '    isOwner\n', '    {\n', '        require(_oldToken != 0 && _newToken != 0 && _tokenOwner != 0);\n', '        oldToken = ERC20(_oldToken);\n', '        newToken = ERC20(_newToken);\n', '        tokenOwner = _tokenOwner;\n', '        setup_token = true;\n', '    }\n', '\n', '    function swapAble(bool _swap_able)\n', '    public\n', '    isOwner\n', '    {\n', '        swap_able = _swap_able;\n', '        emit SwapAble(_swap_able);\n', '    }\n', '\n', '    function withdrawOldToken(address to, uint256 amount)\n', '    public\n', '    isOwner\n', '    returns (bool success)\n', '    {\n', '        require(oldToken.transfer(to, amount));\n', '        return true;\n', '    }\n', '\n', '    function swapAbleToken()\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return newToken.allowance(tokenOwner, this);\n', '    }\n', '\n', '    function swapToken(uint256 amount)\n', '    public\n', '    isSwap\n', '    returns (bool success)\n', '    {\n', '        require(newToken.allowance(tokenOwner, this) >= amount);\n', '        require(oldToken.transferFrom(msg.sender, this, amount));\n', '        require(newToken.transferFrom(tokenOwner, msg.sender, amount));\n', '        emit Swap(msg.sender, amount);\n', '        return true;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '/**\n', ' * @title ERC20 Interface\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SwapToken\n', ' */\n', 'contract  SwapToken{\n', '    using SafeMath for uint256;\n', '    ERC20 public oldToken;\n', '    ERC20 public newToken;\n', '    address public tokenOwner;\n', '\n', '    address public owner;\n', '    bool public swap_able;\n', '    bool public setup_token;\n', '\n', '    event Swap(address sender, uint256 amount);\n', '    event SwapAble(bool swapable);\n', '\n', '    modifier isOwner() {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isSwap() {\n', '        require (swap_able);\n', '        _;\n', '    }\n', '\n', '    modifier isNotSetup() {\n', '        require (!setup_token);\n', '        _;\n', '    }\n', '\n', '    constructor()\n', '    public\n', '    {\n', '        owner = msg.sender;\n', '        swap_able = false;\n', '    }\n', '\n', '    function setupToken(address _oldToken, address _newToken, address _tokenOwner)\n', '    public\n', '    isNotSetup\n', '    isOwner\n', '    {\n', '        require(_oldToken != 0 && _newToken != 0 && _tokenOwner != 0);\n', '        oldToken = ERC20(_oldToken);\n', '        newToken = ERC20(_newToken);\n', '        tokenOwner = _tokenOwner;\n', '        setup_token = true;\n', '    }\n', '\n', '    function swapAble(bool _swap_able)\n', '    public\n', '    isOwner\n', '    {\n', '        swap_able = _swap_able;\n', '        emit SwapAble(_swap_able);\n', '    }\n', '\n', '    function withdrawOldToken(address to, uint256 amount)\n', '    public\n', '    isOwner\n', '    returns (bool success)\n', '    {\n', '        require(oldToken.transfer(to, amount));\n', '        return true;\n', '    }\n', '\n', '    function swapAbleToken()\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return newToken.allowance(tokenOwner, this);\n', '    }\n', '\n', '    function swapToken(uint256 amount)\n', '    public\n', '    isSwap\n', '    returns (bool success)\n', '    {\n', '        require(newToken.allowance(tokenOwner, this) >= amount);\n', '        require(oldToken.transferFrom(msg.sender, this, amount));\n', '        require(newToken.transferFrom(tokenOwner, msg.sender, amount));\n', '        emit Swap(msg.sender, amount);\n', '        return true;\n', '    }\n', '}']
