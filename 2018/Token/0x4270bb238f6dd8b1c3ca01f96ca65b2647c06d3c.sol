['pragma solidity ^0.4.18;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool ok){\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) \n', '        public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0);\n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal  pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract LockedToken is owned, TokenERC20, SafeMath {\n', '\n', '    struct TokenLocked {\n', '        uint256 amount;\n', '        uint256 startDate;\n', '        uint256 lastDate;  \n', '        uint256 batches;\n', '    }\n', '\n', '    mapping (address => TokenLocked) internal lockedTokenOf;\n', '    mapping (address => bool) internal isLocked;\n', '\n', '    modifier canTransfer(address _sender, uint256 _value) {\n', '        require(_value <= spendableBalanceOf(_sender));\n', '        _;\n', '    }   \n', '\n', '    function LockedToken (\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    )TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    function transfer(address _to, uint256 _value)\n', '            canTransfer(msg.sender, _value)\n', '            public\n', '            returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '            canTransfer(_from, _value)\n', '            public\n', '            returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transferAndLock(\n', '            address _to, \n', '            uint256 _value,\n', '            uint256 _startDate,\n', '            uint256 _lastDate,\n', '            uint256 _batches) \n', '            onlyOwner public {\n', '        //doLock\n', '        require(_to != 0x0);\n', '        require(_startDate < _lastDate);\n', '        require(_batches > 0);\n', '        TokenLocked memory tokenLocked = TokenLocked(_value, _startDate, _lastDate, _batches);\n', '        lockedTokenOf[_to] = tokenLocked;\n', '        isLocked[_to] = true;\n', '\n', '        //doTransfer\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    function spendableBalanceOf(address _holder) constant public returns (uint) {\n', '        return transferableTokens(_holder, uint64(now));\n', '    }\n', '\n', '    function transferableTokens(address holder, uint256 time) constant public returns (uint256) {\n', '        \n', '        TokenLocked storage tokenLocked = lockedTokenOf[holder];\n', '\n', '        if (!isLocked[holder]) return balanceOf[holder];\n', '\n', '        uint256 amount = tokenLocked.amount;\n', '        uint256 startDate = tokenLocked.startDate;\n', '        uint256 lastDate = tokenLocked.lastDate;\n', '        uint256 batches = tokenLocked.batches;\n', '\n', '        if (time < startDate) return 0;\n', '        if (time >= lastDate) return balanceOf[holder]; \n', '\n', '        //caculate transferableTokens     \n', '        uint256 originalTransferableTokens = safeMul(safeDiv(amount, batches), \n', '                                        safeDiv(\n', '                                        safeMul(safeSub(time, startDate), batches),\n', '                                        safeSub(lastDate, startDate)\n', '                                        ));\n', '\n', '        uint256 lockedAmount = safeSub(amount, originalTransferableTokens);\n', '\n', '        if (balanceOf[holder] <= lockedAmount) return 0;\n', '\n', '        uint256 actualTransferableTokens = safeSub(balanceOf[holder], lockedAmount);                             \n', '\n', '        return  actualTransferableTokens;\n', '    }\n', '\n', '    function  lastTokenIsTransferableDate(address holder) constant public returns(uint256 date) {\n', '        date = uint256(now);\n', '        if (!isLocked[holder]) return date;\n', '        \n', '        TokenLocked storage tokenLocked = lockedTokenOf[holder];       \n', '        return tokenLocked.lastDate;\n', '    }\n', '\n', '    function ()  payable public {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool ok){\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) \n', '        public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0);\n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal  pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract LockedToken is owned, TokenERC20, SafeMath {\n', '\n', '    struct TokenLocked {\n', '        uint256 amount;\n', '        uint256 startDate;\n', '        uint256 lastDate;  \n', '        uint256 batches;\n', '    }\n', '\n', '    mapping (address => TokenLocked) internal lockedTokenOf;\n', '    mapping (address => bool) internal isLocked;\n', '\n', '    modifier canTransfer(address _sender, uint256 _value) {\n', '        require(_value <= spendableBalanceOf(_sender));\n', '        _;\n', '    }   \n', '\n', '    function LockedToken (\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    )TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    function transfer(address _to, uint256 _value)\n', '            canTransfer(msg.sender, _value)\n', '            public\n', '            returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '            canTransfer(_from, _value)\n', '            public\n', '            returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transferAndLock(\n', '            address _to, \n', '            uint256 _value,\n', '            uint256 _startDate,\n', '            uint256 _lastDate,\n', '            uint256 _batches) \n', '            onlyOwner public {\n', '        //doLock\n', '        require(_to != 0x0);\n', '        require(_startDate < _lastDate);\n', '        require(_batches > 0);\n', '        TokenLocked memory tokenLocked = TokenLocked(_value, _startDate, _lastDate, _batches);\n', '        lockedTokenOf[_to] = tokenLocked;\n', '        isLocked[_to] = true;\n', '\n', '        //doTransfer\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    function spendableBalanceOf(address _holder) constant public returns (uint) {\n', '        return transferableTokens(_holder, uint64(now));\n', '    }\n', '\n', '    function transferableTokens(address holder, uint256 time) constant public returns (uint256) {\n', '        \n', '        TokenLocked storage tokenLocked = lockedTokenOf[holder];\n', '\n', '        if (!isLocked[holder]) return balanceOf[holder];\n', '\n', '        uint256 amount = tokenLocked.amount;\n', '        uint256 startDate = tokenLocked.startDate;\n', '        uint256 lastDate = tokenLocked.lastDate;\n', '        uint256 batches = tokenLocked.batches;\n', '\n', '        if (time < startDate) return 0;\n', '        if (time >= lastDate) return balanceOf[holder]; \n', '\n', '        //caculate transferableTokens     \n', '        uint256 originalTransferableTokens = safeMul(safeDiv(amount, batches), \n', '                                        safeDiv(\n', '                                        safeMul(safeSub(time, startDate), batches),\n', '                                        safeSub(lastDate, startDate)\n', '                                        ));\n', '\n', '        uint256 lockedAmount = safeSub(amount, originalTransferableTokens);\n', '\n', '        if (balanceOf[holder] <= lockedAmount) return 0;\n', '\n', '        uint256 actualTransferableTokens = safeSub(balanceOf[holder], lockedAmount);                             \n', '\n', '        return  actualTransferableTokens;\n', '    }\n', '\n', '    function  lastTokenIsTransferableDate(address holder) constant public returns(uint256 date) {\n', '        date = uint256(now);\n', '        if (!isLocked[holder]) return date;\n', '        \n', '        TokenLocked storage tokenLocked = lockedTokenOf[holder];       \n', '        return tokenLocked.lastDate;\n', '    }\n', '\n', '    function ()  payable public {\n', '        revert();\n', '    }\n', '}']
