['pragma solidity ^0.4.20;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/// @title BlockchainCuties Presale\n', 'contract BlockchainCutiesPresale is Pausable\n', '{\n', '    struct Purchase\n', '    {\n', '        address owner;\n', '        uint32 cutieKind;\n', '        uint128 price;\n', '    }\n', '    Purchase[] public purchases;\n', '\n', '    struct Cutie\n', '    {\n', '        uint128 price;\n', '        uint128 leftCount;\n', '        uint128 priceMul;\n', '        uint128 priceAdd;\n', '    }\n', '\n', '    mapping (uint32 => Cutie) public cutie;\n', '\n', '    event Bid(uint256 indexed purchaseId);\n', '\n', '    function addCutie(uint32 id, uint128 price, uint128 count, uint128 priceMul, uint128 priceAdd) public onlyOwner\n', '    {\n', '        cutie[id] = Cutie(price, count, priceMul, priceAdd);\n', '    }\n', '\n', '    function isAvailable(uint32 cutieKind) public view returns (bool)\n', '    {\n', '        return cutie[cutieKind].leftCount > 0;\n', '    }\n', '\n', '    function getPrice(uint32 cutieKind) public view returns (uint256 price, uint256 left)\n', '    {\n', '        price = cutie[cutieKind].price;\n', '        left = cutie[cutieKind].leftCount;\n', '    }\n', '\n', '    function bid(uint32 cutieKind) public payable whenNotPaused\n', '    {\n', '        Cutie storage p = cutie[cutieKind];\n', '        require(isAvailable(cutieKind));\n', '        require(p.price <= msg.value);\n', '\n', '        uint256 length = purchases.push(Purchase(msg.sender, cutieKind, uint128(msg.value)));\n', '\n', '        emit Bid(length - 1);\n', '\n', '        p.leftCount--;\n', '        p.price = uint128(uint256(p.price)*p.priceMul / 1000000000000000000 + p.priceAdd);\n', '    }\n', '\n', '    function purchasesCount() public view returns (uint256)\n', '    {\n', '        return purchases.length;\n', '    }\n', '\n', '    function destroyContract() public onlyOwner {\n', '        require(address(this).balance == 0);\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '    address party1address;\n', '    address party2address;\n', '    address party3address;\n', '    address party4address;\n', '    address party5address;\n', '\n', '    /// @dev Setup project owners\n', '    function setParties(address _party1, address _party2, address _party3, address _party4, address _party5) public onlyOwner\n', '    {\n', '        require(_party1 != address(0));\n', '        require(_party2 != address(0));\n', '        require(_party3 != address(0));\n', '        require(_party4 != address(0));\n', '        require(_party5 != address(0));\n', '\n', '        party1address = _party1;\n', '        party2address = _party2;\n', '        party3address = _party3;\n', '        party4address = _party4;\n', '        party5address = _party5;\n', '    }\n', '\n', '    /// @dev Reject all Ether\n', '    function() external payable {\n', '        revert();\n', '    }\n', '\n', '    /// @dev The balance transfer to project owners\n', '    function withdrawEthFromBalance() external\n', '    {\n', '        require(\n', '            msg.sender == party1address ||\n', '            msg.sender == party2address ||\n', '            msg.sender == party3address ||\n', '            msg.sender == party4address ||\n', '            msg.sender == party5address ||\n', '            msg.sender == owner);\n', '\n', '        require(party1address != 0);\n', '        require(party2address != 0);\n', '        require(party3address != 0);\n', '        require(party4address != 0);\n', '        require(party5address != 0);\n', '\n', '        uint256 total = address(this).balance;\n', '\n', '        party1address.transfer(total*105/1000);\n', '        party2address.transfer(total*105/1000);\n', '        party3address.transfer(total*140/1000);\n', '        party4address.transfer(total*140/1000);\n', '        party5address.transfer(total*510/1000);\n', '    }    \n', '}']
['pragma solidity ^0.4.20;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/// @title BlockchainCuties Presale\n', 'contract BlockchainCutiesPresale is Pausable\n', '{\n', '    struct Purchase\n', '    {\n', '        address owner;\n', '        uint32 cutieKind;\n', '        uint128 price;\n', '    }\n', '    Purchase[] public purchases;\n', '\n', '    struct Cutie\n', '    {\n', '        uint128 price;\n', '        uint128 leftCount;\n', '        uint128 priceMul;\n', '        uint128 priceAdd;\n', '    }\n', '\n', '    mapping (uint32 => Cutie) public cutie;\n', '\n', '    event Bid(uint256 indexed purchaseId);\n', '\n', '    function addCutie(uint32 id, uint128 price, uint128 count, uint128 priceMul, uint128 priceAdd) public onlyOwner\n', '    {\n', '        cutie[id] = Cutie(price, count, priceMul, priceAdd);\n', '    }\n', '\n', '    function isAvailable(uint32 cutieKind) public view returns (bool)\n', '    {\n', '        return cutie[cutieKind].leftCount > 0;\n', '    }\n', '\n', '    function getPrice(uint32 cutieKind) public view returns (uint256 price, uint256 left)\n', '    {\n', '        price = cutie[cutieKind].price;\n', '        left = cutie[cutieKind].leftCount;\n', '    }\n', '\n', '    function bid(uint32 cutieKind) public payable whenNotPaused\n', '    {\n', '        Cutie storage p = cutie[cutieKind];\n', '        require(isAvailable(cutieKind));\n', '        require(p.price <= msg.value);\n', '\n', '        uint256 length = purchases.push(Purchase(msg.sender, cutieKind, uint128(msg.value)));\n', '\n', '        emit Bid(length - 1);\n', '\n', '        p.leftCount--;\n', '        p.price = uint128(uint256(p.price)*p.priceMul / 1000000000000000000 + p.priceAdd);\n', '    }\n', '\n', '    function purchasesCount() public view returns (uint256)\n', '    {\n', '        return purchases.length;\n', '    }\n', '\n', '    function destroyContract() public onlyOwner {\n', '        require(address(this).balance == 0);\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '    address party1address;\n', '    address party2address;\n', '    address party3address;\n', '    address party4address;\n', '    address party5address;\n', '\n', '    /// @dev Setup project owners\n', '    function setParties(address _party1, address _party2, address _party3, address _party4, address _party5) public onlyOwner\n', '    {\n', '        require(_party1 != address(0));\n', '        require(_party2 != address(0));\n', '        require(_party3 != address(0));\n', '        require(_party4 != address(0));\n', '        require(_party5 != address(0));\n', '\n', '        party1address = _party1;\n', '        party2address = _party2;\n', '        party3address = _party3;\n', '        party4address = _party4;\n', '        party5address = _party5;\n', '    }\n', '\n', '    /// @dev Reject all Ether\n', '    function() external payable {\n', '        revert();\n', '    }\n', '\n', '    /// @dev The balance transfer to project owners\n', '    function withdrawEthFromBalance() external\n', '    {\n', '        require(\n', '            msg.sender == party1address ||\n', '            msg.sender == party2address ||\n', '            msg.sender == party3address ||\n', '            msg.sender == party4address ||\n', '            msg.sender == party5address ||\n', '            msg.sender == owner);\n', '\n', '        require(party1address != 0);\n', '        require(party2address != 0);\n', '        require(party3address != 0);\n', '        require(party4address != 0);\n', '        require(party5address != 0);\n', '\n', '        uint256 total = address(this).balance;\n', '\n', '        party1address.transfer(total*105/1000);\n', '        party2address.transfer(total*105/1000);\n', '        party3address.transfer(total*140/1000);\n', '        party4address.transfer(total*140/1000);\n', '        party5address.transfer(total*510/1000);\n', '    }    \n', '}']
