['pragma solidity ^0.4.20;\n', '\n', 'contract ERC20Interface\n', '{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'contract BFToken is ERC20Interface\n', '{\n', '\n', '  mapping (address => uint256) public balanceOf;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  //init\n', '  function BFToken(string _name,string _symbol,uint8 _decimals,uint _totalSupply) public\n', '  {\n', '     name = _name;\n', '     symbol = _symbol;\n', '     decimals = _decimals;\n', '     totalSupply = _totalSupply;\n', '     balanceOf[msg.sender] = totalSupply;\n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool success)\n', '  {\n', '      require(_to != address(0));\n', '      require(balanceOf[msg.sender] >= _value);\n', '      require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '\n', '      balanceOf[msg.sender] -= _value;\n', '      balanceOf[_to] += _value;\n', '\n', '      emit Transfer(msg.sender,_to,_value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)\n', '  {\n', '      require(_to != address(0));\n', '      require(balanceOf[_from] >= _value);\n', '      require(allowed[_from][msg.sender] >= _value);\n', '      require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '      balanceOf[_from] -= _value;\n', '      balanceOf[_to] += _value;\n', '\n', '      emit Transfer(_from,_to,_value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success)\n', '  {\n', '     allowed[msg.sender][_spender] = _value;\n', '\n', '     emit Approval(msg.sender,_spender,_value);\n', '\n', '\n', '     success = true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) view returns (uint256 remaining)\n', '  {\n', '     return allowed[_owner][_spender];\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'contract ERC20Interface\n', '{\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'contract BFToken is ERC20Interface\n', '{\n', '\n', '  mapping (address => uint256) public balanceOf;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  //init\n', '  function BFToken(string _name,string _symbol,uint8 _decimals,uint _totalSupply) public\n', '  {\n', '     name = _name;\n', '     symbol = _symbol;\n', '     decimals = _decimals;\n', '     totalSupply = _totalSupply;\n', '     balanceOf[msg.sender] = totalSupply;\n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool success)\n', '  {\n', '      require(_to != address(0));\n', '      require(balanceOf[msg.sender] >= _value);\n', '      require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '\n', '      balanceOf[msg.sender] -= _value;\n', '      balanceOf[_to] += _value;\n', '\n', '      emit Transfer(msg.sender,_to,_value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)\n', '  {\n', '      require(_to != address(0));\n', '      require(balanceOf[_from] >= _value);\n', '      require(allowed[_from][msg.sender] >= _value);\n', '      require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '      balanceOf[_from] -= _value;\n', '      balanceOf[_to] += _value;\n', '\n', '      emit Transfer(_from,_to,_value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success)\n', '  {\n', '     allowed[msg.sender][_spender] = _value;\n', '\n', '     emit Approval(msg.sender,_spender,_value);\n', '\n', '\n', '     success = true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) view returns (uint256 remaining)\n', '  {\n', '     return allowed[_owner][_spender];\n', '  }\n', '\n', '}']
