['contract Ownable {\n', '  address public owner;\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC200Interface {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public  decimals;\n', '  uint public totalSupply;\n', '  address public owner;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\n', '  function approve(address _spender, uint256 _value)  public returns (bool success);\n', '  function allowance(address _owner, address _spender)  public  view returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ERC200T is ERC200Interface, Pausable{\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) public balanceOf;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  mapping(address => uint) pendingReturns;\n', '\n', '  constructor() public {\n', '      totalSupply = 21000000000000;\n', '      name = "KKKMToken";\n', '      symbol = "KKKM";\n', '      decimals = 3;\n', '      owner=msg.sender;\n', '      balanceOf[msg.sender] = totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _owner)  public  view returns (uint256 balance) {\n', '      return balanceOf[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf[msg.sender]);\n', '    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '\n', '    balanceOf[msg.sender] =balanceOf[msg.sender].sub(_value);\n', '    balanceOf[_to] =balanceOf[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)  public  whenNotPaused returns (bool success) {\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '    balanceOf[_from] -= _value;\n', '    balanceOf[_to] += _value;\n', '\n', '    allowed[_from][msg.sender] -= _value;\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view onlyOwner returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '  }\n', '  function () public payable {\n', '    pendingReturns[msg.sender] += msg.value;\n', '  }\n', '  function withdraw() public returns (bool) {\n', '        uint amount = pendingReturns[msg.sender];\n', '        if (amount > 0) {\n', '            pendingReturns[msg.sender] = 0;\n', '            if (!msg.sender.send(amount)) {\n', '                pendingReturns[msg.sender] = amount;\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '}']
['contract Ownable {\n', '  address public owner;\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC200Interface {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public  decimals;\n', '  uint public totalSupply;\n', '  address public owner;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\n', '  function approve(address _spender, uint256 _value)  public returns (bool success);\n', '  function allowance(address _owner, address _spender)  public  view returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ERC200T is ERC200Interface, Pausable{\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) public balanceOf;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  mapping(address => uint) pendingReturns;\n', '\n', '  constructor() public {\n', '      totalSupply = 21000000000000;\n', '      name = "KKKMToken";\n', '      symbol = "KKKM";\n', '      decimals = 3;\n', '      owner=msg.sender;\n', '      balanceOf[msg.sender] = totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _owner)  public  view returns (uint256 balance) {\n', '      return balanceOf[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf[msg.sender]);\n', '    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '\n', '    balanceOf[msg.sender] =balanceOf[msg.sender].sub(_value);\n', '    balanceOf[_to] =balanceOf[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)  public  whenNotPaused returns (bool success) {\n', '    require(_to != address(0));\n', '    require(_value <= balanceOf[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '    balanceOf[_from] -= _value;\n', '    balanceOf[_to] += _value;\n', '\n', '    allowed[_from][msg.sender] -= _value;\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view onlyOwner returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '  }\n', '  function () public payable {\n', '    pendingReturns[msg.sender] += msg.value;\n', '  }\n', '  function withdraw() public returns (bool) {\n', '        uint amount = pendingReturns[msg.sender];\n', '        if (amount > 0) {\n', '            pendingReturns[msg.sender] = 0;\n', '            if (!msg.sender.send(amount)) {\n', '                pendingReturns[msg.sender] = amount;\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '}']
