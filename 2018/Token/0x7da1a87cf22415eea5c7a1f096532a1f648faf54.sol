['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SimpleToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract FIN is StandardToken {\n', '  string public constant name = "Financial Incentive Network Points";\n', '  string public constant symbol = "FIN";\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '  uint256 private constant OFFSET = 10 ** uint256(decimals);\n', '  uint256 private constant BILLION = (10 ** 9) * OFFSET; // 1 billion is a 1 followed by 9 zeroes\n', '  \n', '  uint256 private TOTAL_SUPPLY;\n', '\n', '  constructor(address _holderA, address _holderB, address _holderC) public {\n', '    balances[_holderA] = BILLION;\n', '    emit Transfer(0x0, _holderA, BILLION);\n', '\n', '    balances[_holderB] = BILLION;\n', '    emit Transfer(0x0, _holderB, BILLION);\n', '\n', '    balances[_holderC] = BILLION / 2;\n', '    emit Transfer(0x0, _holderC, BILLION / 2);\n', '    \n', '    TOTAL_SUPPLY = balances[_holderA] + balances[_holderB] + balances[_holderC];\n', '  }\n', '  \n', '  function totalSupply() public view returns (uint256) {\n', '      return TOTAL_SUPPLY;\n', '  }\n', '}\n', '\n', '\n', 'interface TokenValidator {\n', '  function check(\n', '    address _token,\n', '    address _user\n', '  ) external returns(byte result);\n', '\n', '  function check(\n', '    address _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _amount\n', '  ) external returns (byte result);\n', '}\n', '\n', '\n', 'interface ValidatedToken {\n', '  event Validation(\n', '    byte    indexed result,\n', '    address indexed user\n', '  );\n', '\n', '  event Validation(\n', '    byte    indexed result,\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256         value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract ReferenceToken is Ownable, ERC20, ValidatedToken {\n', '    using SafeMath for uint256;\n', '\n', '    string internal mName;\n', '    string internal mSymbol;\n', '\n', '    uint256 internal mGranularity;\n', '    uint256 internal mTotalSupply;\n', '\n', '    mapping(address => uint) internal mBalances;\n', '    mapping(address => mapping(address => bool)) internal mAuthorized;\n', '    mapping(address => mapping(address => uint256)) internal mAllowed;\n', '\n', '    uint8 public decimals = 18;\n', '\n', '    // Single validator\n', '    TokenValidator internal validator;\n', '\n', '    constructor(\n', '        string         _name,\n', '        string         _symbol,\n', '        uint256        _granularity,\n', '        TokenValidator _validator\n', '    ) public {\n', '        require(_granularity >= 1);\n', '\n', '        mName = _name;\n', '        mSymbol = _symbol;\n', '        mTotalSupply = 0;\n', '        mGranularity = _granularity;\n', '        validator = TokenValidator(_validator);\n', '    }\n', '\n', '    // Validation Helpers\n', '\n', '    function validate(address _user) internal returns (byte) {\n', '        byte checkResult = validator.check(this, _user);\n', '        emit Validation(checkResult, _user);\n', '        return checkResult;\n', '    }\n', '\n', '    function validate(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal returns (byte) {\n', '        byte checkResult = validator.check(this, _from, _to, _amount);\n', '        emit Validation(checkResult, _from, _to, _amount);\n', '        return checkResult;\n', '    }\n', '\n', '    // Status Code Helpers\n', '\n', '    function isOk(byte _statusCode) internal pure returns (bool) {\n', '        return (_statusCode & hex"0F") == 1;\n', '    }\n', '\n', '    function requireOk(byte _statusCode) internal pure {\n', '        require(isOk(_statusCode));\n', '    }\n', '\n', '    function name() public constant returns (string) {\n', '        return mName;\n', '    }\n', '\n', '    function symbol() public constant returns(string) {\n', '        return mSymbol;\n', '    }\n', '\n', '    function granularity() public constant returns(uint256) {\n', '        return mGranularity;\n', '    }\n', '\n', '    function totalSupply() public constant returns(uint256) {\n', '        return mTotalSupply;\n', '    }\n', '\n', '    function balanceOf(address _tokenHolder) public constant returns (uint256) {\n', '        return mBalances[_tokenHolder];\n', '    }\n', '\n', '    function isMultiple(uint256 _amount) internal view returns (bool) {\n', '      return _amount.div(mGranularity).mul(mGranularity) == _amount;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        if(validate(msg.sender, _spender, _amount) != 1) { return false; }\n', '\n', '        mAllowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return mAllowed[_owner][_spender];\n', '    }\n', '\n', '    function mint(address _tokenHolder, uint256 _amount) public onlyOwner {\n', '        requireOk(validate(_tokenHolder));\n', '        require(isMultiple(_amount));\n', '\n', '        mTotalSupply = mTotalSupply.add(_amount);\n', '        mBalances[_tokenHolder] = mBalances[_tokenHolder].add(_amount);\n', '\n', '        emit Transfer(0x0, _tokenHolder, _amount);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        doSend(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        require(_amount <= mAllowed[_from][msg.sender]);\n', '\n', '        mAllowed[_from][msg.sender] = mAllowed[_from][msg.sender].sub(_amount);\n', '        doSend(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function doSend(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        require(canTransfer(_from, _to, _amount));\n', '\n', '        mBalances[_from] = mBalances[_from].sub(_amount);\n', '        mBalances[_to] = mBalances[_to].add(_amount);\n', '\n', '        emit Transfer(_from, _to, _amount);\n', '    }\n', '\n', '    function canTransfer(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal returns (bool) {\n', '        return (\n', '            (_to != address(0)) // Forbid sending to 0x0 (=burning)\n', '            && isMultiple(_amount)\n', '            && (mBalances[_from] >= _amount) // Ensure enough funds\n', '            && isOk(validate(_from, _to, _amount)) // Ensure passes validation\n', '        );\n', '    }\n', '}\n', '\n', '\n', 'contract Lunar is ReferenceToken {\n', '    constructor(TokenValidator _validator)\n', '      ReferenceToken("Lunar Token - SAMPLE NO VALUE", "LNRX", 1, _validator)\n', '      public {\n', '          uint256 supply = 5000000;\n', '\n', '          mTotalSupply = supply;\n', '          mBalances[msg.sender] = supply;\n', '\n', '          emit Transfer(0x0, msg.sender, supply);\n', '      }\n', '}\n', '\n', '\n', 'contract SimpleAuthorization is TokenValidator, Ownable {\n', '    mapping(address => bool) private auths;\n', '\n', '    constructor() public {}\n', '\n', '    function check(\n', '        address /* token */,\n', '        address _address\n', '    ) external returns (byte resultCode) {\n', '        if (auths[_address]) {\n', '            return hex"11";\n', '        } else {\n', '            return hex"10";\n', '        }\n', '    }\n', '\n', '    function check(\n', '        address /* _token */,\n', '        address _from,\n', '        address _to,\n', '        uint256 /* _amount */\n', '    ) external returns (byte resultCode) {\n', '        if (auths[_from] && auths[_to]) {\n', '            return hex"11";\n', '        } else {\n', '            return hex"10";\n', '        }\n', '    }\n', '\n', '    function setAuthorized(address _address, bool _status) public onlyOwner {\n', '        auths[_address] = _status;\n', '    }\n', '}']