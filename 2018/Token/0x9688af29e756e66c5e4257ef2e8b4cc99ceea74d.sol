['pragma solidity ^0.4.18;\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t// &#39;INC&#39; token contract\n', '\n', '\t//\n', '\n', '\t// Deployed to : 0x264db562cc95fA0EB20e66C9FE4074e7C10372a1\n', '\n', '\t// Symbol      : INC\n', '\n', '\t// Name        : InterNetworkCrypto\n', '\n', '\t// Total supply: 10000000000000000000000000000\n', '\n', '\t// Decimals    : 18\n', '\n', '\t//\n', '\n', '\t// Enjoy.\n', '\n', '\t//\n', '\n', '\t// (c) by Moritz Neto with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence.\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t// Safe maths\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\tcontract SafeMath {\n', '\n', '\t    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '\n', '\t        c = a + b;\n', '\n', '\t        require(c >= a);\n', '\n', '\t    }\n', '\n', '\t    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '\n', '\t        require(b <= a);\n', '\n', '\t        c = a - b;\n', '\n', '\t    }\n', '\n', '\t    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '\n', '\t        c = a * b;\n', '\n', '\t        require(a == 0 || c / a == b);\n', '\n', '\t    }\n', '\n', '\t    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '\n', '\t        require(b > 0);\n', '\n', '\t        c = a / b;\n', '\n', '\t    }\n', '\n', '\t}\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t// ERC Token Standard #20 Interface\n', '\n', '\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\tcontract ERC20Interface {\n', '\n', '\t    function totalSupply() public constant returns (uint);\n', '\n', '\t    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '\n', '\t    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '\n', '\t    function transfer(address to, uint tokens) public returns (bool success);\n', '\n', '\t    function approve(address spender, uint tokens) public returns (bool success);\n', '\n', '\t    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '\t\n', '\n', '\t    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '\t    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '\t}\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t// Contract function to receive approval and execute function in one call\n', '\n', '\t//\n', '\n', '\t// Borrowed from MiniMeToken\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\tcontract ApproveAndCallFallBack {\n', '\n', '\t    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '\n', '\t}\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t// Owned contract\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\tcontract Owned {\n', '\n', '\t    address public owner;\n', '\n', '\t    address public newOwner;\n', '\n', '\t\n', '\n', '\t    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '\t\n', '\n', '\t    function Owned() public {\n', '\n', '\t        owner = msg.sender;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t    modifier onlyOwner {\n', '\n', '\t        require(msg.sender == owner);\n', '\n', '\t        _;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t    function transferOwnership(address _newOwner) public onlyOwner {\n', '\n', '\t        newOwner = _newOwner;\n', '\n', '\t    }\n', '\n', '\t    function acceptOwnership() public {\n', '\n', '\t        require(msg.sender == newOwner);\n', '\n', '\t        OwnershipTransferred(owner, newOwner);\n', '\n', '\t        owner = newOwner;\n', '\n', '\t        newOwner = address(0);\n', '\n', '\t    }\n', '\n', '\t}\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '\n', '\t// token transfers\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\tcontract INC is ERC20Interface, Owned, SafeMath {\n', '\n', '\t    string public symbol;\n', '\n', '\t    string public  name;\n', '\n', '\t    uint8 public decimals;\n', '\n', '\t    uint public _totalSupply;\n', '\n', '\t\n', '\n', '\t    mapping(address => uint) balances;\n', '\n', '\t    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Constructor\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function INC() public {\n', '\n', '\t        symbol = "INC";\n', '\n', '\t        name = " InterNetworkCrypto";\n', '\n', '\t        decimals = 18;\n', '\n', '\t        _totalSupply = 10000000000000000000000000000;\n', '\n', '\t        balances[0x264db562cc95fA0EB20e66C9FE4074e7C10372a1] = _totalSupply;\n', '\n', '\t        Transfer(address(0), 0x264db562cc95fA0EB20e66C9FE4074e7C10372a1, _totalSupply);\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Total supply\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function totalSupply() public constant returns (uint) {\n', '\n', '\t        return _totalSupply  - balances[address(0)];\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Get the token balance for account tokenOwner\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '\n', '\t        return balances[tokenOwner];\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Transfer the balance from token owner&#39;s account to to account\n', '\n', '\t    // - Owner&#39;s account must have sufficient balance to transfer\n', '\n', '\t    // - 0 value transfers are allowed\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function transfer(address to, uint tokens) public returns (bool success) {\n', '\n', '\t        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '\n', '\t        balances[to] = safeAdd(balances[to], tokens);\n', '\n', '\t        Transfer(msg.sender, to, tokens);\n', '\n', '\t        return true;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Token owner can approve for spender to transferFrom(...) tokens\n', '\n', '\t    // from the token owner&#39;s account\n', '\n', '\t    //\n', '\n', '\t    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '\n', '\t    // recommends that there are no checks for the approval double-spend attack\n', '\n', '\t    // as this should be implemented in user interfaces \n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function approve(address spender, uint tokens) public returns (bool success) {\n', '\n', '\t        allowed[msg.sender][spender] = tokens;\n', '\n', '\t        Approval(msg.sender, spender, tokens);\n', '\n', '\t        return true;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Transfer tokens from the from account to the to account\n', '\n', '\t    // \n', '\n', '\t    // The calling account must already have sufficient tokens approve(...)-d\n', '\n', '\t    // for spending from the from account and\n', '\n', '\t    // - From account must have sufficient balance to transfer\n', '\n', '\t    // - Spender must have sufficient allowance to transfer\n', '\n', '\t    // - 0 value transfers are allowed\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '\n', '\t        balances[from] = safeSub(balances[from], tokens);\n', '\n', '\t        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '\n', '\t        balances[to] = safeAdd(balances[to], tokens);\n', '\n', '\t        Transfer(from, to, tokens);\n', '\n', '\t        return true;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Returns the amount of tokens approved by the owner that can be\n', '\n', '\t    // transferred to the spender&#39;s account\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '\n', '\t        return allowed[tokenOwner][spender];\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Token owner can approve for spender to transferFrom(...) tokens\n', '\n', '\t    // from the token owner&#39;s account. The spender contract function\n', '\n', '\t    // receiveApproval(...) is then executed\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '\n', '\t        allowed[msg.sender][spender] = tokens;\n', '\n', '\t        Approval(msg.sender, spender, tokens);\n', '\n', '\t        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '\n', '\t        return true;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Don&#39;t accept ETH\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function () public payable {\n', '\n', '\t        revert();\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Owner can transfer out any accidentally sent ERC20 tokens\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '\n', '\t        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '\n', '\t    }\n', '\n', '\t}']
['pragma solidity ^0.4.18;\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', "\t// 'INC' token contract\n", '\n', '\t//\n', '\n', '\t// Deployed to : 0x264db562cc95fA0EB20e66C9FE4074e7C10372a1\n', '\n', '\t// Symbol      : INC\n', '\n', '\t// Name        : InterNetworkCrypto\n', '\n', '\t// Total supply: 10000000000000000000000000000\n', '\n', '\t// Decimals    : 18\n', '\n', '\t//\n', '\n', '\t// Enjoy.\n', '\n', '\t//\n', '\n', '\t// (c) by Moritz Neto with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence.\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t// Safe maths\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\tcontract SafeMath {\n', '\n', '\t    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '\n', '\t        c = a + b;\n', '\n', '\t        require(c >= a);\n', '\n', '\t    }\n', '\n', '\t    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '\n', '\t        require(b <= a);\n', '\n', '\t        c = a - b;\n', '\n', '\t    }\n', '\n', '\t    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '\n', '\t        c = a * b;\n', '\n', '\t        require(a == 0 || c / a == b);\n', '\n', '\t    }\n', '\n', '\t    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '\n', '\t        require(b > 0);\n', '\n', '\t        c = a / b;\n', '\n', '\t    }\n', '\n', '\t}\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t// ERC Token Standard #20 Interface\n', '\n', '\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\tcontract ERC20Interface {\n', '\n', '\t    function totalSupply() public constant returns (uint);\n', '\n', '\t    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '\n', '\t    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '\n', '\t    function transfer(address to, uint tokens) public returns (bool success);\n', '\n', '\t    function approve(address spender, uint tokens) public returns (bool success);\n', '\n', '\t    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '\t\n', '\n', '\t    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '\t    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '\t}\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t// Contract function to receive approval and execute function in one call\n', '\n', '\t//\n', '\n', '\t// Borrowed from MiniMeToken\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\tcontract ApproveAndCallFallBack {\n', '\n', '\t    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '\n', '\t}\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t// Owned contract\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\tcontract Owned {\n', '\n', '\t    address public owner;\n', '\n', '\t    address public newOwner;\n', '\n', '\t\n', '\n', '\t    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '\t\n', '\n', '\t    function Owned() public {\n', '\n', '\t        owner = msg.sender;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t    modifier onlyOwner {\n', '\n', '\t        require(msg.sender == owner);\n', '\n', '\t        _;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t    function transferOwnership(address _newOwner) public onlyOwner {\n', '\n', '\t        newOwner = _newOwner;\n', '\n', '\t    }\n', '\n', '\t    function acceptOwnership() public {\n', '\n', '\t        require(msg.sender == newOwner);\n', '\n', '\t        OwnershipTransferred(owner, newOwner);\n', '\n', '\t        owner = newOwner;\n', '\n', '\t        newOwner = address(0);\n', '\n', '\t    }\n', '\n', '\t}\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\t// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '\n', '\t// token transfers\n', '\n', '\t// ----------------------------------------------------------------------------\n', '\n', '\tcontract INC is ERC20Interface, Owned, SafeMath {\n', '\n', '\t    string public symbol;\n', '\n', '\t    string public  name;\n', '\n', '\t    uint8 public decimals;\n', '\n', '\t    uint public _totalSupply;\n', '\n', '\t\n', '\n', '\t    mapping(address => uint) balances;\n', '\n', '\t    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Constructor\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function INC() public {\n', '\n', '\t        symbol = "INC";\n', '\n', '\t        name = " InterNetworkCrypto";\n', '\n', '\t        decimals = 18;\n', '\n', '\t        _totalSupply = 10000000000000000000000000000;\n', '\n', '\t        balances[0x264db562cc95fA0EB20e66C9FE4074e7C10372a1] = _totalSupply;\n', '\n', '\t        Transfer(address(0), 0x264db562cc95fA0EB20e66C9FE4074e7C10372a1, _totalSupply);\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Total supply\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function totalSupply() public constant returns (uint) {\n', '\n', '\t        return _totalSupply  - balances[address(0)];\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Get the token balance for account tokenOwner\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '\n', '\t        return balances[tokenOwner];\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', "\t    // Transfer the balance from token owner's account to to account\n", '\n', "\t    // - Owner's account must have sufficient balance to transfer\n", '\n', '\t    // - 0 value transfers are allowed\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function transfer(address to, uint tokens) public returns (bool success) {\n', '\n', '\t        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '\n', '\t        balances[to] = safeAdd(balances[to], tokens);\n', '\n', '\t        Transfer(msg.sender, to, tokens);\n', '\n', '\t        return true;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Token owner can approve for spender to transferFrom(...) tokens\n', '\n', "\t    // from the token owner's account\n", '\n', '\t    //\n', '\n', '\t    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '\n', '\t    // recommends that there are no checks for the approval double-spend attack\n', '\n', '\t    // as this should be implemented in user interfaces \n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function approve(address spender, uint tokens) public returns (bool success) {\n', '\n', '\t        allowed[msg.sender][spender] = tokens;\n', '\n', '\t        Approval(msg.sender, spender, tokens);\n', '\n', '\t        return true;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Transfer tokens from the from account to the to account\n', '\n', '\t    // \n', '\n', '\t    // The calling account must already have sufficient tokens approve(...)-d\n', '\n', '\t    // for spending from the from account and\n', '\n', '\t    // - From account must have sufficient balance to transfer\n', '\n', '\t    // - Spender must have sufficient allowance to transfer\n', '\n', '\t    // - 0 value transfers are allowed\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '\n', '\t        balances[from] = safeSub(balances[from], tokens);\n', '\n', '\t        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '\n', '\t        balances[to] = safeAdd(balances[to], tokens);\n', '\n', '\t        Transfer(from, to, tokens);\n', '\n', '\t        return true;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Returns the amount of tokens approved by the owner that can be\n', '\n', "\t    // transferred to the spender's account\n", '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '\n', '\t        return allowed[tokenOwner][spender];\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Token owner can approve for spender to transferFrom(...) tokens\n', '\n', "\t    // from the token owner's account. The spender contract function\n", '\n', '\t    // receiveApproval(...) is then executed\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '\n', '\t        allowed[msg.sender][spender] = tokens;\n', '\n', '\t        Approval(msg.sender, spender, tokens);\n', '\n', '\t        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '\n', '\t        return true;\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', "\t    // Don't accept ETH\n", '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function () public payable {\n', '\n', '\t        revert();\n', '\n', '\t    }\n', '\n', '\t\n', '\n', '\t\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    // Owner can transfer out any accidentally sent ERC20 tokens\n', '\n', '\t    // ------------------------------------------------------------------------\n', '\n', '\t    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '\n', '\t        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '\n', '\t    }\n', '\n', '\t}']
