['pragma solidity ^0.4.21;\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts\\RECORDToken.sol\n', '\n', '/**\n', ' *   RECORD token contract\n', ' */\n', 'contract RECORDToken is MintableToken, BurnableToken, Pausable {\n', '    using SafeMath for uint256;\n', '    string public name = "RECORD";\n', '    string public symbol = "RCD";\n', '    uint256 public decimals = 18;\n', '\n', '    mapping (address => bool) public lockedAddresses;\n', '\n', '    function isAddressLocked(address _adr) internal returns (bool) {\n', '        if (lockedAddresses[_adr] == true) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    function lockAddress(address _adr) onlyOwner public {\n', '        lockedAddresses[_adr] = true;\n', '    }\n', '    function unlockAddress(address _adr) onlyOwner public {\n', '        delete lockedAddresses[_adr];\n', '    }\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        lockAddress(_to);\n', '        return super.mint(_to, _amount);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        require(isAddressLocked(_to) == false);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        require(isAddressLocked(_from) == false);\n', '        require(isAddressLocked(_to) == false);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        require(isAddressLocked(_spender) == false);\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        require(isAddressLocked(_spender) == false);\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        require(isAddressLocked(_spender) == false);\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '// File: contracts\\RECORDICO.sol\n', '\n', '/**\n', '*  takes funds from users and issues tokens\n', '*/\n', 'contract RECORDICO {\n', '    // RCD - RECORD token contract\n', '    RECORDToken public RCD = new RECORDToken();\n', '    using SafeMath for uint256;\n', '\n', '    // Token price parameters\n', '    // These parametes can be changed only by manager of contract\n', '    uint256 public Rate_Eth = 690; // Rate USD per ETH\n', '\n', '    // Crowdfunding parameters\n', '    uint256 public currentInitPart = 0;\n', '    uint256 public constant RECORDPart = 18; // 18% of TotalSupply for Record Team\n', '    uint256 public constant EcosystemPart = 15; // 15% of TotalSupply for Ecosystem\n', '    uint256 public constant InvestorPart = 5; // 5% of TotalSupply for Investors\n', '    uint256 public constant AdvisorPart = 8; // 8% of TotalSupply for Advisors & Ambassadors\n', '    uint256 public constant BountyPart = 4; // 4% of TotalSupply for Bounty\n', '    uint256 public constant icoPart = 50; // 50% of TotalSupply for PublicICO and PrivateOffer\n', '    uint256 public constant PreSaleHardCap = 15000000 * 1e18;\n', '    uint256 public constant RoundAHardCap = 45000000 * 1e18;\n', '    uint256 public constant RoundBHardCap = 45000000 * 1e18;\n', '    uint256 public constant RoundCHardCap = 45000000 * 1e18;\n', '    uint256 public constant totalAmountOnICO = 300000000 * 1e18;\n', '\n', '    uint256 public PreSaleSold = 0;\n', '    uint256 public RoundASold = 0;\n', '    uint256 public RoundBSold = 0;\n', '    uint256 public RoundCSold = 0;\n', '    uint256 public EthGet = 0;\n', '    uint256 public RcdGet = 0;\n', '\n', '    // Output ethereum addresses\n', '    address Company;\n', '    address Manager; // Manager controls contract\n', '\n', '    uint256 public PreSaleStartTime;\n', '    uint256 public PreSaleCloseTime;\n', '    uint256 public IcoStartTime;\n', '    uint256 public IcoCloseTime;\n', '\n', '    // Allows execution by the contract manager only\n', '    modifier managerOnly {\n', '        require(msg.sender == Manager);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *   @dev Contract constructor function\n', '     */\n', '    function RECORDICO(\n', '        address _Company,\n', '        address _Manager,\n', '        uint256 _PreSaleStartTime,\n', '        uint256 _PreSaleCloseTime,\n', '        uint256 _IcoStartTime,\n', '        uint256 _IcoCloseTime\n', '    )\n', '    public {\n', '        Company = _Company;\n', '        Manager = _Manager;\n', '        PreSaleStartTime = _PreSaleStartTime;\n', '        PreSaleCloseTime = _PreSaleCloseTime;\n', '        IcoStartTime = _IcoStartTime;\n', '        IcoCloseTime = _IcoCloseTime;\n', '        RCD.pause(); // ICO중에는 token transfer가 되어서는 안된다.\n', '    }\n', '\n', '    function getMinMaxInvest() public returns(uint256, uint256) {\n', '        uint256 _min = 0;\n', '        uint256 _max = 0;\n', '        uint256 stage = getStage();\n', '        if (stage == 1) {\n', '            _min = 5000 * 1e18;\n', '            _max = 10000000 * 1e18;\n', '        } else if (stage == 3 || stage == 4 || stage == 5) {\n', '            _min = 5000 * 1e18;\n', '            _max = 50000000 * 1e18;\n', '        }\n', '        return (_min, _max);\n', '    }\n', '    function getRcdExchange(uint256 _ethValue) public returns(uint256, bool) {\n', '        uint256 stage = getStage();\n', '        uint256 _rcdValue = 0;\n', '        uint256 _usdValue = _ethValue.mul(Rate_Eth);\n', '        uint256 _rcdValue_Numerator = _usdValue.mul(1000);\n', '        bool exchangeSuccess = false;\n', '        if (stage == 1 || stage == 3 || stage == 4 || stage == 5 || stage == 6) {\n', '            if (stage == 1) {\n', '                _rcdValue = _rcdValue_Numerator.div(80);\n', '            } else if (stage == 3) {\n', '                _rcdValue = _rcdValue_Numerator.div(90);\n', '            } else if (stage == 4) {\n', '                _rcdValue = _rcdValue_Numerator.div(95);\n', '            } else if (stage == 5) {\n', '                _rcdValue = _rcdValue_Numerator.div(100);\n', '            } else {\n', '                _rcdValue = 0;\n', '            }\n', '        }\n', '        if (_rcdValue > 0) {\n', '            exchangeSuccess = true;\n', '        }\n', '        return (_rcdValue, exchangeSuccess);\n', '    }\n', '    function getStage() public returns(uint256) {\n', '        // 0: 프리세일 전\n', '        // 1: 프리세일 중\n', '        // 2: 프리세일 끝 / ICO 전\n', '        // 3: RoundA\n', '        // 4: RoundB\n', '        // 5: RoundC\n', '        // 6: Finish\n', '        // 0. 프리세일 기간 전\n', '        if (now < PreSaleStartTime) {\n', '            return 0;\n', '        }\n', '        // 1. 프리세일 기간 중\n', '        if (PreSaleStartTime <= now && now <= PreSaleCloseTime) {\n', '            if (PreSaleSold < PreSaleHardCap) {\n', '                return 1;\n', '            } else {\n', '                return 2;\n', '            }\n', '        }\n', '        // 2. 프리세일 기간 끝\n', '        if (PreSaleCloseTime <= now && now <= IcoStartTime) {\n', '            return 2;\n', '        }\n', '        // ICO 기간 중\n', '        if (IcoStartTime <= now && now <= IcoCloseTime) {\n', '            // 3. RoundA\n', '            if (RoundASold < RoundAHardCap) {\n', '                return 3;\n', '            }\n', '            // 4. RoundB\n', '            else if (RoundAHardCap <= RoundASold && RoundBSold < RoundBHardCap) {\n', '                return 4;\n', '            }\n', '            // 5. RoundC\n', '            else if (RoundBHardCap <= RoundBSold && RoundCSold < RoundCHardCap) {\n', '                return 5;\n', '            }\n', '            // 6. Finish\n', '            else {\n', '                return 6;\n', '            }\n', '        }\n', '        // 6. ICO기간 끝\n', '        if (IcoCloseTime < now) {\n', '            return 6;\n', '        }\n', '        return 10;\n', '    }\n', '\n', '    /**\n', '     *   @dev Set rate of ETH and update token price\n', '     *   @param _RateEth       current ETH rate\n', '     */\n', '    function setRate(uint256 _RateEth) external managerOnly {\n', '        Rate_Eth = _RateEth;\n', '    }\n', '    function setIcoCloseTime(uint256 _IcoCloseTime) external managerOnly {\n', '        IcoCloseTime = _IcoCloseTime;\n', '    }\n', '\n', '    function lockAddress(address _adr) managerOnly external {\n', '        RCD.lockAddress(_adr);\n', '    }\n', '\n', '    function unlockAddress(address _adr) managerOnly external {\n', '        RCD.unlockAddress(_adr);\n', '    }\n', '\n', '    /**\n', '     *   @dev Enable token transfers\n', '     */\n', '    function unfreeze() external managerOnly {\n', '        RCD.unpause();\n', '    }\n', '\n', '    /**\n', '     *   @dev Disable token transfers\n', '     */\n', '    function freeze() external managerOnly {\n', '        RCD.pause();\n', '    }\n', '\n', '    /**\n', '     *   @dev Fallback function calls buyTokens() function to buy tokens\n', '     *        when investor sends ETH to address of ICO contract\n', '     */\n', '    function() external payable {\n', '        buyTokens(msg.sender, msg.value);\n', '    }\n', '    /**\n', '     *   @dev Issue tokens for investors who paid in ether\n', '     *   @param _investor     address which the tokens will be issued to\n', '     *   @param _ethValue     number of Ether\n', '     */\n', '    function buyTokens(address _investor, uint256 _ethValue) internal {\n', '        uint256 _rcdValue;\n', '        bool _rcdExchangeSuccess;\n', '        uint256 _min;\n', '        uint256 _max;\n', '\n', '        (_rcdValue, _rcdExchangeSuccess) = getRcdExchange(_ethValue);\n', '        (_min, _max) = getMinMaxInvest();\n', '        require (\n', '            _rcdExchangeSuccess == true &&\n', '            _min <= _rcdValue &&\n', '            _rcdValue <= _max\n', '        );\n', '        mintICOTokens(_investor, _rcdValue, _ethValue);\n', '    }\n', '    function mintICOTokens(address _investor, uint256 _rcdValue, uint256 _ethValue) internal{\n', '        uint256 stage = getStage();\n', '        require (\n', '            stage == 1 ||\n', '            stage == 3 ||\n', '            stage == 4 ||\n', '            stage == 5\n', '        );\n', '        if (stage == 1) {\n', '            require(PreSaleSold.add(_rcdValue) <= PreSaleHardCap);\n', '            PreSaleSold = PreSaleSold.add(_rcdValue);\n', '        }\n', '        if (stage == 3) {\n', '            if (RoundASold.add(_rcdValue) <= RoundAHardCap) {\n', '                RoundASold = RoundASold.add(_rcdValue);\n', '            } else {\n', '                RoundBSold = RoundASold.add(_rcdValue) - RoundAHardCap;\n', '                RoundASold = RoundAHardCap;\n', '            }\n', '        }\n', '        if (stage == 4) {\n', '            if (RoundBSold.add(_rcdValue) <= RoundBHardCap) {\n', '                RoundBSold = RoundBSold.add(_rcdValue);\n', '            } else {\n', '                RoundCSold = RoundBSold.add(_rcdValue) - RoundBHardCap;\n', '                RoundBSold = RoundBHardCap;\n', '            }\n', '        }\n', '        if (stage == 5) {\n', '            require(RoundCSold.add(_rcdValue) <= RoundCHardCap);\n', '            RoundCSold = RoundCSold.add(_rcdValue);\n', '        }\n', '        RCD.mint(_investor, _rcdValue);\n', '        RcdGet = RcdGet.add(_rcdValue);\n', '        EthGet = EthGet.add(_ethValue);\n', '    }\n', '\n', '    function mintICOTokensFromExternal(address _investor, uint256 _rcdValue) external managerOnly{\n', '        mintICOTokens(_investor, _rcdValue, 0);\n', '    }\n', '\n', '    /*\n', '     *   @dev Allows Company withdraw investments when round is over\n', '    */\n', '    function withdrawEther() external managerOnly{\n', '        Company.transfer(address(this).balance);\n', '    }\n', '\n', '    function mintInitialTokens(address _adr, uint256 rate) external managerOnly {\n', '        require (currentInitPart.add(rate) <= 50);\n', '        RCD.mint(_adr, rate.mul(totalAmountOnICO).div(100));\n', '        currentInitPart = currentInitPart.add(rate);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external managerOnly{\n', '        RCD.transferOwnership(newOwner);\n', '    }\n', '}']