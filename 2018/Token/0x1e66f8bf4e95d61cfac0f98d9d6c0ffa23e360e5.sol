['pragma solidity ^0.4.23;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract MamaToken is ERC20Interface, Owned, SafeMath {\n', '    string public constant name = "MamaMutua";\n', '    string public constant symbol = "M2M";\n', '    uint32 public constant decimals = 18;\n', '    uint public _rate = 600;\n', '    uint256 public _totalSupply = 60000000 * (10 ** 18);\n', '    address owner;\n', '\n', '    // amount of raised money in Wei\n', '    uint256 public weiRaised;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    uint public openingTime = 1527638401; // 30 May 2018 00:01\n', '    uint public closingTime = 1546214399; // 30 Dec 2018 23:59\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = _totalSupply;\n', '        owner = msg.sender;\n', '\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '\n', '    function burn(uint256 _amount) public onlyOwner returns (bool) {\n', '        require(_amount <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _amount);\n', '        _totalSupply = safeSub(_totalSupply, _amount);\n', '        emit Transfer(msg.sender, address(0), _amount);\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\n', '        require(_totalSupply + _amount >= _totalSupply); // Overflow check\n', '\n', '        _totalSupply = safeAdd(_totalSupply, _amount);\n', '        balances[_to] = safeAdd(balances[_to], _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address to, uint256 tokens) public returns (bool success) {\n', '        /* Check if sender has balance and for overflows */\n', '        require(balances[msg.sender] >= tokens && balances[to] + tokens >= balances[to]);\n', '        // mitigates the ERC20 short address attack\n', '        if(msg.data.length < (2 * 32) + 4) { revert(); }\n', '\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (tokens != 0 && allowed[msg.sender][spender] != 0) { return false; }\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        // mitigates the ERC20 short address attack\n', '        if(msg.data.length < (3 * 32) + 4) { revert(); }\n', '\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function () external payable {\n', '        // Check ICO period\n', '        require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(beneficiary != 0x0);\n', '        require(msg.value > 1 finney);\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // update state\n', '        weiRaised = safeAdd(weiRaised, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokensIssued = safeMul(_rate, weiAmount);\n', '\n', '        // transfer tokens\n', '        balances[owner] = safeSub(balances[owner], tokensIssued);\n', '        balances[beneficiary] = safeAdd(balances[beneficiary], tokensIssued);\n', '\n', '        emit Transfer(owner, beneficiary, tokensIssued);\n', '        forwardFunds(weiAmount);\n', '    }\n', '\n', '    function forwardFunds(uint256 _weiAmount) internal {\n', '        owner.transfer(_weiAmount);\n', '    }\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract MamaToken is ERC20Interface, Owned, SafeMath {\n', '    string public constant name = "MamaMutua";\n', '    string public constant symbol = "M2M";\n', '    uint32 public constant decimals = 18;\n', '    uint public _rate = 600;\n', '    uint256 public _totalSupply = 60000000 * (10 ** 18);\n', '    address owner;\n', '\n', '    // amount of raised money in Wei\n', '    uint256 public weiRaised;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    uint public openingTime = 1527638401; // 30 May 2018 00:01\n', '    uint public closingTime = 1546214399; // 30 Dec 2018 23:59\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = _totalSupply;\n', '        owner = msg.sender;\n', '\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '\n', '    function burn(uint256 _amount) public onlyOwner returns (bool) {\n', '        require(_amount <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _amount);\n', '        _totalSupply = safeSub(_totalSupply, _amount);\n', '        emit Transfer(msg.sender, address(0), _amount);\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\n', '        require(_totalSupply + _amount >= _totalSupply); // Overflow check\n', '\n', '        _totalSupply = safeAdd(_totalSupply, _amount);\n', '        balances[_to] = safeAdd(balances[_to], _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address to, uint256 tokens) public returns (bool success) {\n', '        /* Check if sender has balance and for overflows */\n', '        require(balances[msg.sender] >= tokens && balances[to] + tokens >= balances[to]);\n', '        // mitigates the ERC20 short address attack\n', '        if(msg.data.length < (2 * 32) + 4) { revert(); }\n', '\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (tokens != 0 && allowed[msg.sender][spender] != 0) { return false; }\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        // mitigates the ERC20 short address attack\n', '        if(msg.data.length < (3 * 32) + 4) { revert(); }\n', '\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function () external payable {\n', '        // Check ICO period\n', '        require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(beneficiary != 0x0);\n', '        require(msg.value > 1 finney);\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // update state\n', '        weiRaised = safeAdd(weiRaised, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokensIssued = safeMul(_rate, weiAmount);\n', '\n', '        // transfer tokens\n', '        balances[owner] = safeSub(balances[owner], tokensIssued);\n', '        balances[beneficiary] = safeAdd(balances[beneficiary], tokensIssued);\n', '\n', '        emit Transfer(owner, beneficiary, tokensIssued);\n', '        forwardFunds(weiAmount);\n', '    }\n', '\n', '    function forwardFunds(uint256 _weiAmount) internal {\n', '        owner.transfer(_weiAmount);\n', '    }\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
