['pragma solidity ^0.4.21;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() constant returns (uint256 totalSupply);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract BroFistCoin is IERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint public _totalSupply = 0; // Begins with 0 Coins\n', '    \n', '    string public constant symbol = "BRO";\n', '    string public constant name = "BroFistCoin";\n', '    uint8 public constant decimals = 18;  \n', '         \n', '    uint public startDate = 1520776800; // GMT/UTC: Sunday, 11. March 2018 2pm \n', '    uint public endDate = 1525096800; // GMT/UTC: Monday, 30. April 2018 2pm \n', '    \n', '    uint256 public constant maxSupply = 500000000 * 10**uint(decimals); // Max possible coins while crowdsale 500000000\n', '    uint256 public RATE = 50000; // 1 BRO = 0.00002 ETH --- 1 ETH = 50000 BRO \n', '    \n', '    uint256 public constant pewdiepie = 5000000 * 10**uint(decimals); // 1% reserved for Pewdiepie 5000000\n', '    \n', '    address public owner;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '   \n', '    // Bonus     \n', '    function applyBonus(uint256 tokens) returns (uint256){\n', '        uint genesisDuration = now - startDate;\n', '        if (genesisDuration <= 168 hours) {   \n', '            tokens = (tokens.mul(150).div(100)); // First 7 days 50% Bonus\n', '        } \n', '        else if (genesisDuration <= 336 hours) {  \n', '            tokens = (tokens.mul(130).div(100)); // First 14 days 30% Bonus\n', '        }  \n', '        else if (genesisDuration <= 504 hours) {  \n', '            tokens = (tokens.mul(120).div(100)); // First 21 days 20% Bonus\n', '        } \n', '        else if (genesisDuration <= 672 hours) {  \n', '            tokens = (tokens.mul(110).div(100)); // First 28 days 10% Bonus\n', '        } \n', '        else {\n', '            tokens = tokens;\n', '        }  \n', '        return tokens;\n', '    } \n', '    function () payable {\n', '        createTokens();\n', '    }\n', '    \n', '    function BroFistCoin(){  \n', '        owner = msg.sender;  \n', '        balances[msg.sender] = pewdiepie;  \n', '        _totalSupply = _totalSupply.add(pewdiepie);\n', '    }  \n', '    function createTokens() payable{\n', '        require(msg.value > 0);  \n', '        require(now >= startDate && now <= endDate);  \n', '        require(_totalSupply < maxSupply);   \n', '          \n', '        uint256 tokens = msg.value.mul(RATE); \n', '        tokens = applyBonus(tokens); \n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        \n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint256 totalSupply){\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256 balance){\n', '        return balances[_owner];  \n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success){\n', '        require(\n', '            balances[msg.sender] >= _value\n', '            && _value > 0\n', '        );\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n', '        require(\n', '            allowed[_from][msg.sender] >= _value\n', '            && balances[_from] >= _value\n', '            && _value > 0\n', '        );\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success){\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining){\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() constant returns (uint256 totalSupply);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract BroFistCoin is IERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint public _totalSupply = 0; // Begins with 0 Coins\n', '    \n', '    string public constant symbol = "BRO";\n', '    string public constant name = "BroFistCoin";\n', '    uint8 public constant decimals = 18;  \n', '         \n', '    uint public startDate = 1520776800; // GMT/UTC: Sunday, 11. March 2018 2pm \n', '    uint public endDate = 1525096800; // GMT/UTC: Monday, 30. April 2018 2pm \n', '    \n', '    uint256 public constant maxSupply = 500000000 * 10**uint(decimals); // Max possible coins while crowdsale 500000000\n', '    uint256 public RATE = 50000; // 1 BRO = 0.00002 ETH --- 1 ETH = 50000 BRO \n', '    \n', '    uint256 public constant pewdiepie = 5000000 * 10**uint(decimals); // 1% reserved for Pewdiepie 5000000\n', '    \n', '    address public owner;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '   \n', '    // Bonus     \n', '    function applyBonus(uint256 tokens) returns (uint256){\n', '        uint genesisDuration = now - startDate;\n', '        if (genesisDuration <= 168 hours) {   \n', '            tokens = (tokens.mul(150).div(100)); // First 7 days 50% Bonus\n', '        } \n', '        else if (genesisDuration <= 336 hours) {  \n', '            tokens = (tokens.mul(130).div(100)); // First 14 days 30% Bonus\n', '        }  \n', '        else if (genesisDuration <= 504 hours) {  \n', '            tokens = (tokens.mul(120).div(100)); // First 21 days 20% Bonus\n', '        } \n', '        else if (genesisDuration <= 672 hours) {  \n', '            tokens = (tokens.mul(110).div(100)); // First 28 days 10% Bonus\n', '        } \n', '        else {\n', '            tokens = tokens;\n', '        }  \n', '        return tokens;\n', '    } \n', '    function () payable {\n', '        createTokens();\n', '    }\n', '    \n', '    function BroFistCoin(){  \n', '        owner = msg.sender;  \n', '        balances[msg.sender] = pewdiepie;  \n', '        _totalSupply = _totalSupply.add(pewdiepie);\n', '    }  \n', '    function createTokens() payable{\n', '        require(msg.value > 0);  \n', '        require(now >= startDate && now <= endDate);  \n', '        require(_totalSupply < maxSupply);   \n', '          \n', '        uint256 tokens = msg.value.mul(RATE); \n', '        tokens = applyBonus(tokens); \n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        \n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint256 totalSupply){\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256 balance){\n', '        return balances[_owner];  \n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success){\n', '        require(\n', '            balances[msg.sender] >= _value\n', '            && _value > 0\n', '        );\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n', '        require(\n', '            allowed[_from][msg.sender] >= _value\n', '            && balances[_from] >= _value\n', '            && _value > 0\n', '        );\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success){\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining){\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '}']
