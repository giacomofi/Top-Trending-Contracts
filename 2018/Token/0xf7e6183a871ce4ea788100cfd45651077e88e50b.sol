['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max(uint a, uint b) internal pure returns (uint) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min(uint a, uint b) internal pure returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '}\n', '\n', '// @title The Contract is Mongolian National MDEX Token Issue.\n', '//\n', '// @Author: Tim Wars\n', '// @Date: 2018.8.1\n', '// @Seealso: ERC20\n', '//\n', 'contract MntToken {\n', '\n', '    // === Event ===\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Burn(address indexed from, uint value);\n', '    event TransferLocked(address indexed from, address indexed to, uint value, uint8 locktype);\n', '\tevent Purchased(address indexed recipient, uint purchase, uint amount);\n', '\n', '    // === Defined ===\n', '    using SafeMath for uint;\n', '\n', '    // --- Owner Section ---\n', '    address public owner;\n', '    bool public frozen = false; //\n', '\n', '    // --- ERC20 Token Section ---\n', '    uint8 constant public decimals = 6;\n', '    uint public totalSupply = 100*10**(8+uint256(decimals));  // ***** 100 * 100 Million\n', '    string constant public name = "MDEX Platform Token | Mongolia National Blockchain Digital Assets Exchange Token";\n', '    string constant public symbol = "MNT";\n', '\n', '    mapping(address => uint) ownerance; // Owner Balance\n', '    mapping(address => mapping(address => uint)) public allowance; // Allower Balance\n', '\n', '    // --- Locked Section ---\n', '    uint8 LOCKED_TYPE_MAX = 2; // ***** Max locked type\n', '    uint private constant RELEASE_BASE_TIME = 1533686888; // ***** (2018-08-08 08:08:08) Private Lock phase start datetime (UTC seconds)\n', '    address[] private lockedOwner;\n', '    mapping(address => uint) public lockedance; // Lockeder Balance\n', '    mapping(address => uint8) public lockedtype; // Locked Type\n', '    mapping(address => uint8) public unlockedstep; // Unlocked Step\n', '\n', '    uint public totalCirculating; // Total circulating token amount\n', '\n', '    // === Modifier ===\n', '\n', '    // --- Owner Section ---\n', '    modifier isOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isNotFrozen() {\n', '        require(!frozen);\n', '        _;\n', '    }\n', '\n', '    // --- ERC20 Section ---\n', '    modifier hasEnoughBalance(uint _amount) {\n', '        require(ownerance[msg.sender] >= _amount);\n', '        _;\n', '    }\n', '\n', '    modifier overflowDetected(address _owner, uint _amount) {\n', '        require(ownerance[_owner] + _amount >= ownerance[_owner]);\n', '        _;\n', '    }\n', '\n', '    modifier hasAllowBalance(address _owner, address _allower, uint _amount) {\n', '        require(allowance[_owner][_allower] >= _amount);\n', '        _;\n', '    }\n', '\n', '    modifier isNotEmpty(address _addr, uint _value) {\n', '        require(_addr != address(0));\n', '        require(_value != 0);\n', '        _;\n', '    }\n', '\n', '    modifier isValidAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    // --- Locked Section ---\n', '    modifier hasntLockedBalance(address _checker) {\n', '        require(lockedtype[_checker] == 0);\n', '        _;\n', '    }\n', '\n', '    modifier checkLockedType(uint8 _locktype) {\n', '        require(_locktype > 0 && _locktype <= LOCKED_TYPE_MAX);\n', '        _;\n', '    }\n', '\n', '    // === Constructor ===\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        ownerance[msg.sender] = totalSupply;\n', '        totalCirculating = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    // --- ERC20 Token Section ---\n', '    function approve(address _spender, uint _value)\n', '        isNotFrozen\n', '        isValidAddress\n', '        public returns (bool success)\n', '    {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0); // must spend to 0 where pre approve balance.\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        isNotFrozen\n', '        isValidAddress\n', '        overflowDetected(_to, _value)\n', '        public returns (bool success)\n', '    {\n', '        require(ownerance[_from] >= _value);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '\n', '        ownerance[_to] = ownerance[_to].add(_value);\n', '        ownerance[_from] = ownerance[_from].sub(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public\n', '        constant returns (uint balance)\n', '    {\n', '        balance = ownerance[_owner] + lockedance[_owner];\n', '        return balance;\n', '    }\n', '\n', '\n', '    function available(address _owner) public\n', '        constant returns (uint)\n', '    {\n', '        return ownerance[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public\n', '        isNotFrozen\n', '        isValidAddress\n', '        isNotEmpty(_to, _value)\n', '        hasEnoughBalance(_value)\n', '        overflowDetected(_to, _value)\n', '        returns (bool success)\n', '    {\n', '        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\n', '        ownerance[_to] = ownerance[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // --- Owner Section ---\n', '    function transferOwner(address _newOwner)\n', '        isOwner\n', '        public returns (bool success)\n', '    {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function freeze()\n', '        isOwner\n', '        public returns (bool success)\n', '    {\n', '        frozen = true;\n', '        return true;\n', '    }\n', '\n', '    function unfreeze()\n', '        isOwner\n', '        public returns (bool success)\n', '    {\n', '        frozen = false;\n', '        return true;\n', '    }\n', '\n', '    function burn(uint _value)\n', '        isNotFrozen\n', '        isValidAddress\n', '        hasEnoughBalance(_value)\n', '        public returns (bool success)\n', '    {\n', '        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\n', '        ownerance[0x0] = ownerance[0x0].add(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalCirculating = totalCirculating.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    // --- Locked Section ---\n', '    function transferLocked(address _to, uint _value, uint8 _locktype) public\n', '        isNotFrozen\n', '        isOwner\n', '        isValidAddress\n', '        isNotEmpty(_to, _value)\n', '        hasEnoughBalance(_value)\n', '        hasntLockedBalance(_to)\n', '        checkLockedType(_locktype)\n', '        returns (bool success)\n', '    {\n', '        require(msg.sender != _to);\n', '        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\n', '        if (_locktype == 1) {\n', '            lockedance[_to] = _value;\n', '            lockedtype[_to] = _locktype;\n', '            lockedOwner.push(_to);\n', '            totalCirculating = totalCirculating.sub(_value);\n', '            emit TransferLocked(msg.sender, _to, _value, _locktype);\n', '        } else if (_locktype == 2) {\n', '            uint _first = _value / 100 * 8; // prevent overflow\n', '            ownerance[_to] = ownerance[_to].add(_first);\n', '            lockedance[_to] = _value.sub(_first);\n', '            lockedtype[_to] = _locktype;\n', '            lockedOwner.push(_to);\n', '            totalCirculating = totalCirculating.sub(_value.sub(_first));\n', '            emit Transfer(msg.sender, _to, _first);\n', '            emit TransferLocked(msg.sender, _to, _value.sub(_first), _locktype);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // *****\n', '    // Because too many unlocking steps * accounts, it will burn lots of GAS !!!!!!!!!!!!!!!!!!!!!!!!!!!\n', '    // Because too many unlocking steps * accounts, it will burn lots of GAS !!!!!!!!!!!!!!!!!!!!!!!!!!!\n', '    //\n', '    // LockedType 1 : after 6 monthes / release 10 % per month; 10 steps\n', '    // LockedType 2 :  before 0 monthes / release 8 % per month; 11 steps / 1 step has release real balance init.\n', '    function unlock(address _locker, uint _delta, uint8 _locktype) private\n', '        returns (bool success)\n', '    {\n', '        if (_locktype == 1) {\n', '            if (_delta < 6 * 30 days) {\n', '                return false;\n', '            }\n', '            uint _more1 = _delta.sub(6 * 30 days);\n', '            uint _step1 = _more1 / 30 days;\n', '            for(uint8 i = 0; i < 10; i++) {\n', '                if (unlockedstep[_locker] == i && i < 9 && i <= _step1 ) {\n', '                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker] / (10 - i));\n', '                    lockedance[_locker] = lockedance[_locker].sub(lockedance[_locker] / (10 - i));\n', '                    unlockedstep[_locker] = i + 1;\n', '                } else if (i == 9 && unlockedstep[_locker] == 9 && _step1 == 9){\n', '                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker]);\n', '                    lockedance[_locker] = 0;\n', '                    unlockedstep[_locker] = 0;\n', '                    lockedtype[_locker] = 0;\n', '                }\n', '            }\n', '        } else if (_locktype == 2) {\n', '            if (_delta < 30 days) {\n', '                return false;\n', '            }\n', '            uint _more2 = _delta - 30 days;\n', '            uint _step2 = _more2 / 30 days;\n', '            for(uint8 j = 0; j < 11; j++) {\n', '                if (unlockedstep[_locker] == j && j < 10 && j <= _step2 ) {\n', '                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker] / (11 - j));\n', '                    lockedance[_locker] = lockedance[_locker].sub(lockedance[_locker] / (11 - j));\n', '                    unlockedstep[_locker] = j + 1;\n', '                } else if (j == 10 && unlockedstep[_locker] == 10 && _step2 == 10){\n', '                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker]);\n', '                    lockedance[_locker] = 0;\n', '                    unlockedstep[_locker] = 0;\n', '                    lockedtype[_locker] = 0;\n', '                }\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function lockedCounts() public view\n', '        returns (uint counts)\n', '    {\n', '        return lockedOwner.length;\n', '    }\n', '\n', '    function releaseLocked() public\n', '        isNotFrozen\n', '        returns (bool success)\n', '    {\n', '        require(now > RELEASE_BASE_TIME);\n', '        uint delta = now - RELEASE_BASE_TIME;\n', '        uint lockedAmount;\n', '        for (uint i = 0; i < lockedOwner.length; i++) {\n', '            if ( lockedance[lockedOwner[i]] > 0) {\n', '                lockedAmount = lockedance[lockedOwner[i]];\n', '                unlock(lockedOwner[i], delta, lockedtype[lockedOwner[i]]);\n', '                totalCirculating = totalCirculating.add(lockedAmount - lockedance[lockedOwner[i]]);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max(uint a, uint b) internal pure returns (uint) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min(uint a, uint b) internal pure returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '}\n', '\n', '// @title The Contract is Mongolian National MDEX Token Issue.\n', '//\n', '// @Author: Tim Wars\n', '// @Date: 2018.8.1\n', '// @Seealso: ERC20\n', '//\n', 'contract MntToken {\n', '\n', '    // === Event ===\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Burn(address indexed from, uint value);\n', '    event TransferLocked(address indexed from, address indexed to, uint value, uint8 locktype);\n', '\tevent Purchased(address indexed recipient, uint purchase, uint amount);\n', '\n', '    // === Defined ===\n', '    using SafeMath for uint;\n', '\n', '    // --- Owner Section ---\n', '    address public owner;\n', '    bool public frozen = false; //\n', '\n', '    // --- ERC20 Token Section ---\n', '    uint8 constant public decimals = 6;\n', '    uint public totalSupply = 100*10**(8+uint256(decimals));  // ***** 100 * 100 Million\n', '    string constant public name = "MDEX Platform Token | Mongolia National Blockchain Digital Assets Exchange Token";\n', '    string constant public symbol = "MNT";\n', '\n', '    mapping(address => uint) ownerance; // Owner Balance\n', '    mapping(address => mapping(address => uint)) public allowance; // Allower Balance\n', '\n', '    // --- Locked Section ---\n', '    uint8 LOCKED_TYPE_MAX = 2; // ***** Max locked type\n', '    uint private constant RELEASE_BASE_TIME = 1533686888; // ***** (2018-08-08 08:08:08) Private Lock phase start datetime (UTC seconds)\n', '    address[] private lockedOwner;\n', '    mapping(address => uint) public lockedance; // Lockeder Balance\n', '    mapping(address => uint8) public lockedtype; // Locked Type\n', '    mapping(address => uint8) public unlockedstep; // Unlocked Step\n', '\n', '    uint public totalCirculating; // Total circulating token amount\n', '\n', '    // === Modifier ===\n', '\n', '    // --- Owner Section ---\n', '    modifier isOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isNotFrozen() {\n', '        require(!frozen);\n', '        _;\n', '    }\n', '\n', '    // --- ERC20 Section ---\n', '    modifier hasEnoughBalance(uint _amount) {\n', '        require(ownerance[msg.sender] >= _amount);\n', '        _;\n', '    }\n', '\n', '    modifier overflowDetected(address _owner, uint _amount) {\n', '        require(ownerance[_owner] + _amount >= ownerance[_owner]);\n', '        _;\n', '    }\n', '\n', '    modifier hasAllowBalance(address _owner, address _allower, uint _amount) {\n', '        require(allowance[_owner][_allower] >= _amount);\n', '        _;\n', '    }\n', '\n', '    modifier isNotEmpty(address _addr, uint _value) {\n', '        require(_addr != address(0));\n', '        require(_value != 0);\n', '        _;\n', '    }\n', '\n', '    modifier isValidAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    // --- Locked Section ---\n', '    modifier hasntLockedBalance(address _checker) {\n', '        require(lockedtype[_checker] == 0);\n', '        _;\n', '    }\n', '\n', '    modifier checkLockedType(uint8 _locktype) {\n', '        require(_locktype > 0 && _locktype <= LOCKED_TYPE_MAX);\n', '        _;\n', '    }\n', '\n', '    // === Constructor ===\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        ownerance[msg.sender] = totalSupply;\n', '        totalCirculating = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    // --- ERC20 Token Section ---\n', '    function approve(address _spender, uint _value)\n', '        isNotFrozen\n', '        isValidAddress\n', '        public returns (bool success)\n', '    {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0); // must spend to 0 where pre approve balance.\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        isNotFrozen\n', '        isValidAddress\n', '        overflowDetected(_to, _value)\n', '        public returns (bool success)\n', '    {\n', '        require(ownerance[_from] >= _value);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '\n', '        ownerance[_to] = ownerance[_to].add(_value);\n', '        ownerance[_from] = ownerance[_from].sub(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public\n', '        constant returns (uint balance)\n', '    {\n', '        balance = ownerance[_owner] + lockedance[_owner];\n', '        return balance;\n', '    }\n', '\n', '\n', '    function available(address _owner) public\n', '        constant returns (uint)\n', '    {\n', '        return ownerance[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public\n', '        isNotFrozen\n', '        isValidAddress\n', '        isNotEmpty(_to, _value)\n', '        hasEnoughBalance(_value)\n', '        overflowDetected(_to, _value)\n', '        returns (bool success)\n', '    {\n', '        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\n', '        ownerance[_to] = ownerance[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // --- Owner Section ---\n', '    function transferOwner(address _newOwner)\n', '        isOwner\n', '        public returns (bool success)\n', '    {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function freeze()\n', '        isOwner\n', '        public returns (bool success)\n', '    {\n', '        frozen = true;\n', '        return true;\n', '    }\n', '\n', '    function unfreeze()\n', '        isOwner\n', '        public returns (bool success)\n', '    {\n', '        frozen = false;\n', '        return true;\n', '    }\n', '\n', '    function burn(uint _value)\n', '        isNotFrozen\n', '        isValidAddress\n', '        hasEnoughBalance(_value)\n', '        public returns (bool success)\n', '    {\n', '        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\n', '        ownerance[0x0] = ownerance[0x0].add(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalCirculating = totalCirculating.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    // --- Locked Section ---\n', '    function transferLocked(address _to, uint _value, uint8 _locktype) public\n', '        isNotFrozen\n', '        isOwner\n', '        isValidAddress\n', '        isNotEmpty(_to, _value)\n', '        hasEnoughBalance(_value)\n', '        hasntLockedBalance(_to)\n', '        checkLockedType(_locktype)\n', '        returns (bool success)\n', '    {\n', '        require(msg.sender != _to);\n', '        ownerance[msg.sender] = ownerance[msg.sender].sub(_value);\n', '        if (_locktype == 1) {\n', '            lockedance[_to] = _value;\n', '            lockedtype[_to] = _locktype;\n', '            lockedOwner.push(_to);\n', '            totalCirculating = totalCirculating.sub(_value);\n', '            emit TransferLocked(msg.sender, _to, _value, _locktype);\n', '        } else if (_locktype == 2) {\n', '            uint _first = _value / 100 * 8; // prevent overflow\n', '            ownerance[_to] = ownerance[_to].add(_first);\n', '            lockedance[_to] = _value.sub(_first);\n', '            lockedtype[_to] = _locktype;\n', '            lockedOwner.push(_to);\n', '            totalCirculating = totalCirculating.sub(_value.sub(_first));\n', '            emit Transfer(msg.sender, _to, _first);\n', '            emit TransferLocked(msg.sender, _to, _value.sub(_first), _locktype);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // *****\n', '    // Because too many unlocking steps * accounts, it will burn lots of GAS !!!!!!!!!!!!!!!!!!!!!!!!!!!\n', '    // Because too many unlocking steps * accounts, it will burn lots of GAS !!!!!!!!!!!!!!!!!!!!!!!!!!!\n', '    //\n', '    // LockedType 1 : after 6 monthes / release 10 % per month; 10 steps\n', '    // LockedType 2 :  before 0 monthes / release 8 % per month; 11 steps / 1 step has release real balance init.\n', '    function unlock(address _locker, uint _delta, uint8 _locktype) private\n', '        returns (bool success)\n', '    {\n', '        if (_locktype == 1) {\n', '            if (_delta < 6 * 30 days) {\n', '                return false;\n', '            }\n', '            uint _more1 = _delta.sub(6 * 30 days);\n', '            uint _step1 = _more1 / 30 days;\n', '            for(uint8 i = 0; i < 10; i++) {\n', '                if (unlockedstep[_locker] == i && i < 9 && i <= _step1 ) {\n', '                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker] / (10 - i));\n', '                    lockedance[_locker] = lockedance[_locker].sub(lockedance[_locker] / (10 - i));\n', '                    unlockedstep[_locker] = i + 1;\n', '                } else if (i == 9 && unlockedstep[_locker] == 9 && _step1 == 9){\n', '                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker]);\n', '                    lockedance[_locker] = 0;\n', '                    unlockedstep[_locker] = 0;\n', '                    lockedtype[_locker] = 0;\n', '                }\n', '            }\n', '        } else if (_locktype == 2) {\n', '            if (_delta < 30 days) {\n', '                return false;\n', '            }\n', '            uint _more2 = _delta - 30 days;\n', '            uint _step2 = _more2 / 30 days;\n', '            for(uint8 j = 0; j < 11; j++) {\n', '                if (unlockedstep[_locker] == j && j < 10 && j <= _step2 ) {\n', '                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker] / (11 - j));\n', '                    lockedance[_locker] = lockedance[_locker].sub(lockedance[_locker] / (11 - j));\n', '                    unlockedstep[_locker] = j + 1;\n', '                } else if (j == 10 && unlockedstep[_locker] == 10 && _step2 == 10){\n', '                    ownerance[_locker] = ownerance[_locker].add(lockedance[_locker]);\n', '                    lockedance[_locker] = 0;\n', '                    unlockedstep[_locker] = 0;\n', '                    lockedtype[_locker] = 0;\n', '                }\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function lockedCounts() public view\n', '        returns (uint counts)\n', '    {\n', '        return lockedOwner.length;\n', '    }\n', '\n', '    function releaseLocked() public\n', '        isNotFrozen\n', '        returns (bool success)\n', '    {\n', '        require(now > RELEASE_BASE_TIME);\n', '        uint delta = now - RELEASE_BASE_TIME;\n', '        uint lockedAmount;\n', '        for (uint i = 0; i < lockedOwner.length; i++) {\n', '            if ( lockedance[lockedOwner[i]] > 0) {\n', '                lockedAmount = lockedance[lockedOwner[i]];\n', '                unlock(lockedOwner[i], delta, lockedtype[lockedOwner[i]]);\n', '                totalCirculating = totalCirculating.add(lockedAmount - lockedance[lockedOwner[i]]);\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '}']
