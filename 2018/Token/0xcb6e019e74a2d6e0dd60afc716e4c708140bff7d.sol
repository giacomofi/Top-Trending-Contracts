['pragma solidity ^0.4.24;\n', '\n', 'contract AutoChainTokenCandyInface{\n', '\n', '    function name() public constant returns (string );\n', '    function  symbol() public constant returns (string );\n', '    function  decimals()  public constant returns (uint8 );\n', '    // 返回token总量，名称为totalSupply().\n', '    function  totalSupply()  public constant returns (uint256 );\n', '\n', '    /// 获取账户_owner拥有token的数量 \n', '    function  balanceOf(address _owner)  public constant returns (uint256 );\n', '\n', '    //从消息发送者账户中往_to账户转数量为_value的token\n', '    function  transfer(address _to, uint256 _value) public returns (bool );\n', '\n', '    //从账户_from中往账户_to转数量为_value的token，与approve方法配合使用\n', '    function  transferFrom(address _from, address _to, uint256 _value) public returns   \n', '    (bool );\n', '\n', '    //消息发送账户设置账户_spender能从发送账户中转出数量为_value的token\n', '    function  approve(address _spender, uint256 _value) public returns (bool );\n', '\n', '    //获取账户_spender可以从账户_owner中转出token的数量\n', '    function  allowance(address _owner, address _spender) public constant returns \n', '    (uint256 );\n', '\n', '    //发生转账时必须要触发的事件 \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    //当函数approve(address _spender, uint256 _value)成功执行时必须触发的事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 \n', '    _value);\n', '}\n', '\n', 'contract AutoChainTokenCandy is AutoChainTokenCandyInface {\n', '\n', '    /* private variables of the token */\n', '    uint256 private _localtotalSupply;\t\t//总量\n', '    string private _localname;                   //名称: eg Simon Bucks\n', '    uint8 private _localdecimals;               //最多的小数位数，How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It&#39;s like comparing 1 wei to 1 ether.\n', '    string private _localsymbol;               //token简称: eg SBX\n', '    string private _localversion = &#39;0.01&#39;;    //版本\n', '\n', '    address private _localowner; //存储合约owner\n', '\n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '\n', '    function  AutoChainTokenCandy() public {\n', '        _localowner=msg.sender;\t\t//储存合约的owner\n', '        balances[msg.sender] = 50000000000; // 初始token数量给予消息发送者,需要增加小数点后的位数\n', '        _localtotalSupply = 50000000000;         // 设置初始总量,需要增加小数点后的位数\n', '        _localname = &#39;AutoChainTokenCandy&#39;;                   // token名称\n', '        _localdecimals = 4;           // 小数位数\n', '        _localsymbol = &#39;ATCx&#39;;             // token简称\n', '        \n', '    }\n', '\n', '    function getOwner() constant public returns (address ){\n', '        return _localowner;\n', '    }\n', '\n', '    function  name() constant public returns (string ){\n', '    \treturn _localname;\n', '    }\n', '    function  decimals() public constant returns (uint8 ){\n', '    \treturn _localdecimals;\n', '    }\n', '    function  symbol() public constant returns (string ){\n', '    \treturn _localsymbol;\n', '    }\n', '    function  version() public constant returns (string ){\n', '    \treturn _localversion;\n', '    }\n', '    function  totalSupply() public constant returns (uint256 ){\n', '    \treturn _localtotalSupply;\n', '    }\n', '    function  transfer(address _to, uint256 _value) public returns (bool ) {\n', '        //默认totalSupply 不会超过最大值 (2^256 - 1).\n', '        //如果随着时间的推移将会有新的token生成，则可以用下面这句避免溢出的异常\n', '        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value\n', '        balances[_to] += _value;//往接收账户增加token数量_value\n', '        emit Transfer(msg.sender, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '    function  transferFrom(address _from, address _to, uint256 _value) public returns \n', '    (bool ) {\n', '        require(balances[_from] >= _value &&  balances[_to] + _value > balances[_to] && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;//接收账户增加token数量_value\n', '        balances[_from] -= _value; //支出账户_from减去token数量_value\n', '        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value\n', '        emit Transfer(_from, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '    function  balanceOf(address _owner) public constant returns (uint256 ) {\n', '        return balances[_owner];\n', '    }\n', '    function  approve(address _spender, uint256 _value) public returns (bool )   \n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function  allowance(address _owner, address _spender) public constant returns (uint256 ) {\n', '        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract AutoChainTokenCandyInface{\n', '\n', '    function name() public constant returns (string );\n', '    function  symbol() public constant returns (string );\n', '    function  decimals()  public constant returns (uint8 );\n', '    // 返回token总量，名称为totalSupply().\n', '    function  totalSupply()  public constant returns (uint256 );\n', '\n', '    /// 获取账户_owner拥有token的数量 \n', '    function  balanceOf(address _owner)  public constant returns (uint256 );\n', '\n', '    //从消息发送者账户中往_to账户转数量为_value的token\n', '    function  transfer(address _to, uint256 _value) public returns (bool );\n', '\n', '    //从账户_from中往账户_to转数量为_value的token，与approve方法配合使用\n', '    function  transferFrom(address _from, address _to, uint256 _value) public returns   \n', '    (bool );\n', '\n', '    //消息发送账户设置账户_spender能从发送账户中转出数量为_value的token\n', '    function  approve(address _spender, uint256 _value) public returns (bool );\n', '\n', '    //获取账户_spender可以从账户_owner中转出token的数量\n', '    function  allowance(address _owner, address _spender) public constant returns \n', '    (uint256 );\n', '\n', '    //发生转账时必须要触发的事件 \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    //当函数approve(address _spender, uint256 _value)成功执行时必须触发的事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 \n', '    _value);\n', '}\n', '\n', 'contract AutoChainTokenCandy is AutoChainTokenCandyInface {\n', '\n', '    /* private variables of the token */\n', '    uint256 private _localtotalSupply;\t\t//总量\n', '    string private _localname;                   //名称: eg Simon Bucks\n', "    uint8 private _localdecimals;               //最多的小数位数，How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string private _localsymbol;               //token简称: eg SBX\n', "    string private _localversion = '0.01';    //版本\n", '\n', '    address private _localowner; //存储合约owner\n', '\n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '\n', '    function  AutoChainTokenCandy() public {\n', '        _localowner=msg.sender;\t\t//储存合约的owner\n', '        balances[msg.sender] = 50000000000; // 初始token数量给予消息发送者,需要增加小数点后的位数\n', '        _localtotalSupply = 50000000000;         // 设置初始总量,需要增加小数点后的位数\n', "        _localname = 'AutoChainTokenCandy';                   // token名称\n", '        _localdecimals = 4;           // 小数位数\n', "        _localsymbol = 'ATCx';             // token简称\n", '        \n', '    }\n', '\n', '    function getOwner() constant public returns (address ){\n', '        return _localowner;\n', '    }\n', '\n', '    function  name() constant public returns (string ){\n', '    \treturn _localname;\n', '    }\n', '    function  decimals() public constant returns (uint8 ){\n', '    \treturn _localdecimals;\n', '    }\n', '    function  symbol() public constant returns (string ){\n', '    \treturn _localsymbol;\n', '    }\n', '    function  version() public constant returns (string ){\n', '    \treturn _localversion;\n', '    }\n', '    function  totalSupply() public constant returns (uint256 ){\n', '    \treturn _localtotalSupply;\n', '    }\n', '    function  transfer(address _to, uint256 _value) public returns (bool ) {\n', '        //默认totalSupply 不会超过最大值 (2^256 - 1).\n', '        //如果随着时间的推移将会有新的token生成，则可以用下面这句避免溢出的异常\n', '        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value\n', '        balances[_to] += _value;//往接收账户增加token数量_value\n', '        emit Transfer(msg.sender, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '    function  transferFrom(address _from, address _to, uint256 _value) public returns \n', '    (bool ) {\n', '        require(balances[_from] >= _value &&  balances[_to] + _value > balances[_to] && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;//接收账户增加token数量_value\n', '        balances[_from] -= _value; //支出账户_from减去token数量_value\n', '        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value\n', '        emit Transfer(_from, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '    function  balanceOf(address _owner) public constant returns (uint256 ) {\n', '        return balances[_owner];\n', '    }\n', '    function  approve(address _spender, uint256 _value) public returns (bool )   \n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function  allowance(address _owner, address _spender) public constant returns (uint256 ) {\n', '        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n', '    }\n', '}']
