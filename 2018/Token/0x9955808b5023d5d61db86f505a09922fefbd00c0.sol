['pragma solidity ^0.4.8;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256 supply);\n', '    function balance() public constant returns (uint256);\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'interface Token { \n', '    function totalSupply() constant public returns (uint256 supply);\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '}\n', '\n', 'interface EOSToken {\n', '  function balanceOf(address who) constant public returns (uint value);\n', '}\n', '\n', 'contract EOSDRAM is ERC20Interface {\n', '    string public constant symbol = "DRAM";\n', '    string public constant name = "EOS DRAM";\n', '    uint8 public constant decimals = 18;\n', '\n', '    address EOSContract = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0;\n', '\n', '    // 1 DRAM is the equivalent of EOS 1 Kb of RAM\n', '    // total fixed supply is 64 GB of DRAM;\n', '    // total fixed supply = 64 * 1024 *1024 = 67108864\n', '    // unlike the EOS blockchain, 64 GB is a fixed total supply that can never be changed/increased\n', '    // having a fixed supply means that all future RAM increases on the EOS blockchain will have no effect here on DRAM\n', '    \n', '\n', '    uint256 _totalSupply = 67108864e18;\n', '    \n', '    // as per the locked EOS contract 0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0 there are 330687 EOS holders\n', '    // 10% of the total supply will be reserved for exchanges/dev and the remaining 90% will be distributed equally among the 330687 EOS holders\n', '    // this means each address receives 182 DRAM\n', '   \n', '   uint256 _airdropAmount = 182e18;\n', '    \n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => bool) initialized;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    address public owner;\n', '    \n', '    modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '    }\n', '\n', '    function EOSDRAM() public {\n', '        owner = msg.sender;\n', '        initialized[msg.sender] = true;\n', '        //~10% reserve for exchanges and dev\n', '        balances[msg.sender] = 6923830e18;\n', '        Transfer(0, owner, 6923830e18);\n', '      }\n', '\n', '    function totalSupply() public constant returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // What&#39;s my balance?\n', '    function balance() public constant returns (uint256) {\n', '        return getBalance(msg.sender);\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _address) public constant returns (uint256) {\n', '        return getBalance(_address);\n', '    }\n', '\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        initialize(msg.sender);\n', '\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0) {\n', '            initialize(_to);\n', '            if (balances[_to] + _amount > balances[_to]) {\n', '\n', '                balances[msg.sender] -= _amount;\n', '                balances[_to] += _amount;\n', '\n', '                Transfer(msg.sender, _to, _amount);\n', '\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        initialize(_from);\n', '\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0) {\n', '            initialize(_to);\n', '            if (balances[_to] + _amount > balances[_to]) {\n', '\n', '                balances[_from] -= _amount;\n', '                allowed[_from][msg.sender] -= _amount;\n', '                balances[_to] += _amount;\n', '\n', '                Transfer(_from, _to, _amount);\n', '\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // internal private functions\n', '    function initialize(address _address) internal returns (bool success) {\n', '       // ensure we only airdrop once per address\n', '        if (!initialized[_address]) {\n', '       \n', '       // we verify the balance of the EOS contract\n', '       EOSToken token = EOSToken(EOSContract);\n', '       uint256 has_eos = token.balanceOf(_address);\n', '       if (has_eos > 0) {\n', '       \t    // if the address has eos, we grant the DRAM airdrop\n', '            initialized[_address] = true;\n', '            balances[_address] = _airdropAmount;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function getBalance(address _address) internal returns (uint256) {\n', '        if (!initialized[_address]) {\n', '            EOSToken token = EOSToken(EOSContract);\n', '\t    uint256 has_eos = token.balanceOf(_address);\n', '      \t   \n', '      \t   if (has_eos > 0) {\n', '            return balances[_address] + _airdropAmount;\n', '            }\n', '            else {\n', '            return balances[_address];\n', '            }\n', '        }\n', '        else {\n', '            return balances[_address];\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.8;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256 supply);\n', '    function balance() public constant returns (uint256);\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'interface Token { \n', '    function totalSupply() constant public returns (uint256 supply);\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '}\n', '\n', 'interface EOSToken {\n', '  function balanceOf(address who) constant public returns (uint value);\n', '}\n', '\n', 'contract EOSDRAM is ERC20Interface {\n', '    string public constant symbol = "DRAM";\n', '    string public constant name = "EOS DRAM";\n', '    uint8 public constant decimals = 18;\n', '\n', '    address EOSContract = 0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0;\n', '\n', '    // 1 DRAM is the equivalent of EOS 1 Kb of RAM\n', '    // total fixed supply is 64 GB of DRAM;\n', '    // total fixed supply = 64 * 1024 *1024 = 67108864\n', '    // unlike the EOS blockchain, 64 GB is a fixed total supply that can never be changed/increased\n', '    // having a fixed supply means that all future RAM increases on the EOS blockchain will have no effect here on DRAM\n', '    \n', '\n', '    uint256 _totalSupply = 67108864e18;\n', '    \n', '    // as per the locked EOS contract 0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0 there are 330687 EOS holders\n', '    // 10% of the total supply will be reserved for exchanges/dev and the remaining 90% will be distributed equally among the 330687 EOS holders\n', '    // this means each address receives 182 DRAM\n', '   \n', '   uint256 _airdropAmount = 182e18;\n', '    \n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => bool) initialized;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    address public owner;\n', '    \n', '    modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '    }\n', '\n', '    function EOSDRAM() public {\n', '        owner = msg.sender;\n', '        initialized[msg.sender] = true;\n', '        //~10% reserve for exchanges and dev\n', '        balances[msg.sender] = 6923830e18;\n', '        Transfer(0, owner, 6923830e18);\n', '      }\n', '\n', '    function totalSupply() public constant returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', "    // What's my balance?\n", '    function balance() public constant returns (uint256) {\n', '        return getBalance(msg.sender);\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _address) public constant returns (uint256) {\n', '        return getBalance(_address);\n', '    }\n', '\n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        initialize(msg.sender);\n', '\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0) {\n', '            initialize(_to);\n', '            if (balances[_to] + _amount > balances[_to]) {\n', '\n', '                balances[msg.sender] -= _amount;\n', '                balances[_to] += _amount;\n', '\n', '                Transfer(msg.sender, _to, _amount);\n', '\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        initialize(_from);\n', '\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0) {\n', '            initialize(_to);\n', '            if (balances[_to] + _amount > balances[_to]) {\n', '\n', '                balances[_from] -= _amount;\n', '                allowed[_from][msg.sender] -= _amount;\n', '                balances[_to] += _amount;\n', '\n', '                Transfer(_from, _to, _amount);\n', '\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // internal private functions\n', '    function initialize(address _address) internal returns (bool success) {\n', '       // ensure we only airdrop once per address\n', '        if (!initialized[_address]) {\n', '       \n', '       // we verify the balance of the EOS contract\n', '       EOSToken token = EOSToken(EOSContract);\n', '       uint256 has_eos = token.balanceOf(_address);\n', '       if (has_eos > 0) {\n', '       \t    // if the address has eos, we grant the DRAM airdrop\n', '            initialized[_address] = true;\n', '            balances[_address] = _airdropAmount;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function getBalance(address _address) internal returns (uint256) {\n', '        if (!initialized[_address]) {\n', '            EOSToken token = EOSToken(EOSContract);\n', '\t    uint256 has_eos = token.balanceOf(_address);\n', '      \t   \n', '      \t   if (has_eos > 0) {\n', '            return balances[_address] + _airdropAmount;\n', '            }\n', '            else {\n', '            return balances[_address];\n', '            }\n', '        }\n', '        else {\n', '            return balances[_address];\n', '        }\n', '    }\n', '}']
