['pragma solidity ^0.4.11;\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function toUINT112(uint256 a) internal constant returns(uint112) {\n', '    assert(uint112(a) == a);\n', '    return uint112(a);\n', '  }\n', '\n', '  function toUINT120(uint256 a) internal constant returns(uint120) {\n', '    assert(uint120(a) == a);\n', '    return uint120(a);\n', '  }\n', '\n', '  function toUINT128(uint256 a) internal constant returns(uint128) {\n', '    assert(uint128(a) == a);\n', '    return uint128(a);\n', '  }\n', '}\n', '\n', 'contract Token {\n', '    function totalSupply() constant returns (uint256 supply);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract COOToken is Token, Owned {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name    = "Chief Operating Officer Token"; \n', '    uint8 public constant decimals = 18;\n', '    string public constant symbol  = "COO";\n', '\n', '    // The current total token supply.\n', '    uint256 currentTotalSupply;\n', '    uint256 limitTotalSupply = 10000000000000000000000000000;        //upper limit Supply\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    event Aditional(address indexed _owner,uint256 _value);\n', '\n', '    function COOToken(uint256 _initialAmount) {\n', '        if(_initialAmount > limitTotalSupply) throw;\n', '        balances[msg.sender] = _initialAmount;\n', '        currentTotalSupply = _initialAmount;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256 supply){\n', '        return currentTotalSupply;\n', '    }\n', '    \n', '    function limitSupply() constant returns (uint256 supply){\n', '        return limitTotalSupply;\n', '    }\n', '\n', '    function () {\n', '        revert();\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '    \n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        \n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from,address _to,uint256 _value) returns (bool success) {\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function additional(uint256 _amount) public onlyOwner{\n', '        require(currentTotalSupply.add(_amount) <= limitTotalSupply);\n', '        currentTotalSupply = currentTotalSupply.add(_amount);\n', '        balances[msg.sender] = balances[msg.sender].add(_amount);\n', '        Aditional(msg.sender, _amount);\n', '    }\n', '}']