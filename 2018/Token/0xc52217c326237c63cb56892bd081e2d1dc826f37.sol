['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title VeloxToken\n', ' * @dev VeloxCoin => VeloxToken ERC20 token contract\n', ' * This contract supports POS-style staking\n', ' */\n', 'contract VeloxToken is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Velox";\n', '    string public constant symbol = "VLX";\n', '    uint8 public constant decimals = 2;\n', '\n', '    uint256 public constant STAKE_START_TIME = 1535241600;\n', '    uint256 public constant STAKE_MIN_AGE = 64 seconds * 20;\n', '    uint256 public constant STAKE_APR = 13; // 13% annual interest\n', '    uint256 public constant MAX_TOTAL_SUPPLY = 100 * (10 ** (6 + uint256(decimals))); // 100 million tokens\n', '    \n', '    bool public balancesInitialized = false;\n', '    \n', '    struct transferIn {\n', '        uint64 amount;\n', '        uint64 time;\n', '    }\n', '\n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '    mapping (address => transferIn[]) transferIns;\n', '    uint256 private totalSupply_;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    modifier canMint() {\n', '        require(totalSupply_ < MAX_TOTAL_SUPPLY);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor to set totalSupply_\n', '    */\n', '    constructor() public {\n', '        totalSupply_ = 0;\n', '    }\n', '\n', '    function mint() public canMint returns (bool) {\n', '        if (balances[msg.sender] <= 0) return false;\n', '        if (transferIns[msg.sender].length <= 0) return false;\n', '\n', '        uint reward = _getStakingReward(msg.sender);\n', '        if (reward <= 0) return false;\n', '\n', '        _mint(msg.sender, reward);\n', '        emit Mint(msg.sender, reward);\n', '        return true;\n', '    }\n', '\n', '    function getCoinAge() public view returns (uint256) {\n', '        return _getCoinAge(msg.sender, block.timestamp);\n', '    }\n', '\n', '    function _getStakingReward(address _address) internal view returns (uint256) {\n', '        require(block.timestamp >= STAKE_START_TIME);\n', '        uint256 coinAge = _getCoinAge(_address, block.timestamp); // Sum (value * days since tx arrived)\n', '        if (coinAge <= 0) return 0;\n', '        return (coinAge * STAKE_APR).div(365 * 100); // Amount to deliver in this interval to user\n', '    }\n', '\n', '    function _getCoinAge(address _address, uint256 _now) internal view returns (uint256 _coinAge) {\n', '        if (transferIns[_address].length <= 0) return 0;\n', '\n', '        for (uint256 i = 0; i < transferIns[_address].length; i++) {\n', '            if (_now < uint256(transferIns[_address][i].time).add(STAKE_MIN_AGE)) continue;\n', '            uint256 coinSeconds = _now.sub(uint256(transferIns[_address][i].time));\n', '            _coinAge = _coinAge.add(uint256(transferIns[_address][i].amount).mul(coinSeconds).div(1 days));\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Function to init balances mapping on token launch\n', '    */\n', '    function initBalances(address[] _accounts, uint64[] _amounts) external onlyOwner {\n', '        require(!balancesInitialized);\n', '        require(_accounts.length > 0 && _accounts.length == _amounts.length);\n', '\n', '        uint256 total = 0;\n', '        for (uint256 i = 0; i < _amounts.length; i++) total = total.add(uint256(_amounts[i]));\n', '        require(total <= MAX_TOTAL_SUPPLY);\n', '\n', '        for (uint256 j = 0; j < _accounts.length; j++) _mint(_accounts[j], uint256(_amounts[j]));\n', '    }\n', '\n', '    /**\n', '    * @dev Function to complete initialization of token balances after launch\n', '    */\n', '    function completeInitialization() external onlyOwner {\n', '        require(!balancesInitialized);\n', '        balancesInitialized = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (msg.sender == _to) return mint();\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        if (transferIns[msg.sender].length > 0) delete transferIns[msg.sender];\n', '        uint64 time = uint64(block.timestamp);\n', '        transferIns[msg.sender].push(transferIn(uint64(balances[msg.sender]), time));\n', '        transferIns[_to].push(transferIn(uint64(_value), time));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        if (transferIns[_from].length > 0) delete transferIns[_from];\n', '        uint64 time = uint64(block.timestamp);\n', '        transferIns[_from].push(transferIn(uint64(balances[_from]), time));\n', '        transferIns[_to].push(transferIn(uint64(_value), time));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function that mints an amount of the token and assigns it to\n', '    * an account. This encapsulates the modification of balances such that the\n', '    * proper events are emitted.\n', '    * @param _account The account that will receive the created tokens.\n', '    * @param _amount The amount that will be created.\n', '    */\n', '    function _mint(address _account, uint256 _amount) internal {\n', '        require(_account != 0);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_account] = balances[_account].add(_amount);\n', '        if (transferIns[_account].length > 0) delete transferIns[_account];\n', '        transferIns[_account].push(transferIn(uint64(balances[_account]), uint64(block.timestamp)));\n', '        emit Transfer(address(0), _account, _amount);\n', '    }\n', '}']