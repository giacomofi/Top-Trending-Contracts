['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/v2/tools/ArtistEditionControls.sol\n', '\n', '/**\n', '* Minimal interface definition for KODA V2 contract calls\n', '*\n', '* https://www.knownorigin.io/\n', '*/\n', 'interface IKODAV2Controls {\n', '  function mint(address _to, uint256 _editionNumber) external returns (uint256);\n', '\n', '  function editionActive(uint256 _editionNumber) external view returns (bool);\n', '\n', '  function artistCommission(uint256 _editionNumber) external view returns (address _artistAccount, uint256 _artistCommission);\n', '\n', '  function updatePriceInWei(uint256 _editionNumber, uint256 _priceInWei) external;\n', '}\n', '\n', '/**\n', '* @title Artists self minting for KnownOrigin (KODA)\n', '*\n', '* Allows for the edition artists to mint there own assets and control the price of an edition\n', '*\n', '* https://www.knownorigin.io/\n', '*\n', '* BE ORIGINAL. BUY ORIGINAL.\n', '*/\n', 'contract ArtistEditionControls is Ownable, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  // Interface into the KODA world\n', '  IKODAV2Controls public kodaAddress;\n', '\n', '  event PriceChanged(\n', '    uint256 indexed _editionNumber,\n', '    address indexed _artist,\n', '    uint256 _priceInWei\n', '  );\n', '\n', '  constructor(IKODAV2Controls _kodaAddress) public {\n', '    kodaAddress = _kodaAddress;\n', '  }\n', '\n', '  /**\n', '   * @dev Ability to gift new NFTs to an address, from a KODA edition\n', '   * @dev Only callable from edition artists defined in KODA NFT contract\n', '   * @dev Only callable when contract is not paused\n', '   * @dev Reverts if edition is invalid\n', '   * @dev Reverts if edition is not active in KDOA NFT contract\n', '   */\n', '  function gift(address _receivingAddress, uint256 _editionNumber)\n', '  external\n', '  whenNotPaused\n', '  returns (uint256)\n', '  {\n', '    require(_receivingAddress != address(0), "Unable to send to zero address");\n', '\n', '    address artistAccount;\n', '    uint256 artistCommission;\n', '    (artistAccount, artistCommission) = kodaAddress.artistCommission(_editionNumber);\n', '    require(msg.sender == artistAccount || msg.sender == owner, "Only from the edition artist account");\n', '\n', '    bool isActive = kodaAddress.editionActive(_editionNumber);\n', '    require(isActive, "Only when edition is active");\n', '\n', '    return kodaAddress.mint(_receivingAddress, _editionNumber);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the price of the provided edition in the WEI\n', '   * @dev Only callable from edition artists defined in KODA NFT contract\n', '   * @dev Only callable when contract is not paused\n', '   * @dev Reverts if edition is invalid\n', '   * @dev Reverts if edition is not active in KDOA NFT contract\n', '   */\n', '  function updateEditionPrice(uint256 _editionNumber, uint256 _priceInWei)\n', '  external\n', '  whenNotPaused\n', '  returns (bool)\n', '  {\n', '    address artistAccount;\n', '    uint256 artistCommission;\n', '    (artistAccount, artistCommission) = kodaAddress.artistCommission(_editionNumber);\n', '    require(msg.sender == artistAccount || msg.sender == owner, "Only from the edition artist account");\n', '\n', '    bool isActive = kodaAddress.editionActive(_editionNumber);\n', '    require(isActive, "Only when edition is active");\n', '\n', '    kodaAddress.updatePriceInWei(_editionNumber, _priceInWei);\n', '\n', '    emit PriceChanged(_editionNumber, msg.sender, _priceInWei);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the KODA address\n', '   * @dev Only callable from owner\n', '   */\n', '  function setKodavV2(IKODAV2Controls _kodaAddress) onlyOwner public {\n', '    kodaAddress = _kodaAddress;\n', '  }\n', '}']