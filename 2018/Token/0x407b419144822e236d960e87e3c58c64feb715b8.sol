['pragma solidity ^0.4.25; // solium-disable-line linebreak-style\n', '\n', '/**\n', ' * @author Anatolii Kucheruk (anatolii@platin.io)\n', ' * @author Platin Limited, platin.io (platin@platin.io)\n', ' */\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param _token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic _token) external onlyOwner {\n', '    uint256 balance = _token.balanceOf(this);\n', '    _token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this Ether.\n', ' * @notice Ether can still be sent to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', ' */\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  constructor() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by setting a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    owner.transfer(address(this).balance);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC223 compatible tokens\n', '  * @param _from address The address that is transferring the tokens\n', '  * @param _value uint256 the amount of the specified token\n', '  * @param _data Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(\n', '    address _from,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    external\n', '    pure\n', '  {\n', '    _from;\n', '    _value;\n', '    _data;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Contracts\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n', ' * of this contract to reclaim ownership of the contracts.\n', ' */\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param _contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimContract(address _contractAddr) external onlyOwner {\n', '    Ownable contractInst = Ownable(_contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Base contract for contracts that should not own things.\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\n', ' * Owned contracts. See respective base contracts for details.\n', ' */\n', 'contract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Authorizable\n', ' * @dev Authorizable contract holds a list of control addresses that authorized to do smth.\n', ' */\n', 'contract Authorizable is Ownable {\n', '\n', '    // List of authorized (control) addresses\n', '    mapping (address => bool) public authorized;\n', '\n', '    // Authorize event logging\n', '    event Authorize(address indexed who);\n', '\n', '    // UnAuthorize event logging\n', '    event UnAuthorize(address indexed who);\n', '\n', '    // onlyAuthorized modifier, restrict to the owner and the list of authorized addresses\n', '    modifier onlyAuthorized() {\n', '        require(msg.sender == owner || authorized[msg.sender], "Not Authorized.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Authorize given address\n', '     * @param _who address Address to authorize \n', '     */\n', '    function authorize(address _who) public onlyOwner {\n', '        require(_who != address(0), "Address can\'t be zero.");\n', '        require(!authorized[_who], "Already authorized");\n', '\n', '        authorized[_who] = true;\n', '        emit Authorize(_who);\n', '    }\n', '\n', '    /**\n', '     * @dev unAuthorize given address\n', '     * @param _who address Address to unauthorize \n', '     */\n', '    function unAuthorize(address _who) public onlyOwner {\n', '        require(_who != address(0), "Address can\'t be zero.");\n', '        require(authorized[_who], "Address is not authorized");\n', '\n', '        authorized[_who] = false;\n', '        emit UnAuthorize(_who);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Holders Token\n', " * @dev Extension to the OpenZepellin's StandardToken contract to track token holders.\n", ' * Only holders with the non-zero balance are listed.\n', ' */\n', 'contract HoldersToken is StandardToken {\n', '    using SafeMath for uint256;    \n', '\n', '    // holders list\n', '    address[] public holders;\n', '\n', '    // holder number in the list\n', '    mapping (address => uint256) public holderNumber;\n', '\n', '    /**\n', '     * @dev Get the holders count\n', '     * @return uint256 Holders count\n', '     */\n', '    function holdersCount() public view returns (uint256) {\n', '        return holders.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another preserving token holders\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 The amount of tokens to be transferred\n', '     * @return bool Returns true if the transfer was succeeded\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        _preserveHolders(msg.sender, _to, _value);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another preserving token holders\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 The amount of tokens to be transferred\n', '     * @return bool Returns true if the transfer was succeeded\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        _preserveHolders(_from, _to, _value);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Remove holder from the holders list\n', '     * @param _holder address Address of the holder to remove\n', '     */\n', '    function _removeHolder(address _holder) internal {\n', '        uint256 _number = holderNumber[_holder];\n', '\n', '        if (_number == 0 || holders.length == 0 || _number > holders.length)\n', '            return;\n', '\n', '        uint256 _index = _number.sub(1);\n', '        uint256 _lastIndex = holders.length.sub(1);\n', '        address _lastHolder = holders[_lastIndex];\n', '\n', '        if (_index != _lastIndex) {\n', '            holders[_index] = _lastHolder;\n', '            holderNumber[_lastHolder] = _number;\n', '        }\n', '\n', '        holderNumber[_holder] = 0;\n', '        holders.length = _lastIndex;\n', '    } \n', '\n', '    /**\n', '     * @dev Add holder to the holders list\n', '     * @param _holder address Address of the holder to add   \n', '     */\n', '    function _addHolder(address _holder) internal {\n', '        if (holderNumber[_holder] == 0) {\n', '            holders.push(_holder);\n', '            holderNumber[_holder] = holders.length;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Preserve holders during transfers\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function _preserveHolders(address _from, address _to, uint256 _value) internal {\n', '        _addHolder(_to);   \n', '        if (balanceOf(_from).sub(_value) == 0) \n', '            _removeHolder(_from);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title PlatinTGE\n', ' * @dev Platin Token Generation Event contract. It holds token economic constants and makes initial token allocation.\n', ' * Initial token allocation function should be called outside the blockchain at the TGE moment of time, \n', ' * from here on out, Platin Token and other Platin contracts become functional.\n', ' */\n', 'contract PlatinTGE {\n', '    using SafeMath for uint256;\n', '    \n', '    // Token decimals\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    // Total Tokens Supply\n', '    uint256 public constant TOTAL_SUPPLY = 1000000000 * (10 ** uint256(decimals)); // 1,000,000,000 PTNX\n', '\n', '    // SUPPLY\n', '    // TOTAL_SUPPLY = 1,000,000,000 PTNX, is distributed as follows:\n', '    uint256 public constant SALES_SUPPLY = 300000000 * (10 ** uint256(decimals)); // 300,000,000 PTNX - 30%\n', '    uint256 public constant MINING_POOL_SUPPLY = 200000000 * (10 ** uint256(decimals)); // 200,000,000 PTNX - 20%\n', '    uint256 public constant FOUNDERS_AND_EMPLOYEES_SUPPLY = 200000000 * (10 ** uint256(decimals)); // 200,000,000 PTNX - 20%\n', '    uint256 public constant AIRDROPS_POOL_SUPPLY = 100000000 * (10 ** uint256(decimals)); // 100,000,000 PTNX - 10%\n', '    uint256 public constant RESERVES_POOL_SUPPLY = 100000000 * (10 ** uint256(decimals)); // 100,000,000 PTNX - 10%\n', '    uint256 public constant ADVISORS_POOL_SUPPLY = 70000000 * (10 ** uint256(decimals)); // 70,000,000 PTNX - 7%\n', '    uint256 public constant ECOSYSTEM_POOL_SUPPLY = 30000000 * (10 ** uint256(decimals)); // 30,000,000 PTNX - 3%\n', '\n', '    // HOLDERS\n', '    address public PRE_ICO_POOL; // solium-disable-line mixedcase\n', '    address public LIQUID_POOL; // solium-disable-line mixedcase\n', '    address public ICO; // solium-disable-line mixedcase\n', '    address public MINING_POOL; // solium-disable-line mixedcase \n', '    address public FOUNDERS_POOL; // solium-disable-line mixedcase\n', '    address public EMPLOYEES_POOL; // solium-disable-line mixedcase \n', '    address public AIRDROPS_POOL; // solium-disable-line mixedcase \n', '    address public RESERVES_POOL; // solium-disable-line mixedcase \n', '    address public ADVISORS_POOL; // solium-disable-line mixedcase\n', '    address public ECOSYSTEM_POOL; // solium-disable-line mixedcase \n', '\n', '    // HOLDER AMOUNT AS PART OF SUPPLY\n', '    // SALES_SUPPLY = PRE_ICO_POOL_AMOUNT + LIQUID_POOL_AMOUNT + ICO_AMOUNT\n', '    uint256 public constant PRE_ICO_POOL_AMOUNT = 20000000 * (10 ** uint256(decimals)); // 20,000,000 PTNX\n', '    uint256 public constant LIQUID_POOL_AMOUNT = 100000000 * (10 ** uint256(decimals)); // 100,000,000 PTNX\n', '    uint256 public constant ICO_AMOUNT = 180000000 * (10 ** uint256(decimals)); // 180,000,000 PTNX\n', '    // FOUNDERS_AND_EMPLOYEES_SUPPLY = FOUNDERS_POOL_AMOUNT + EMPLOYEES_POOL_AMOUNT\n', '    uint256 public constant FOUNDERS_POOL_AMOUNT = 190000000 * (10 ** uint256(decimals)); // 190,000,000 PTNX\n', '    uint256 public constant EMPLOYEES_POOL_AMOUNT = 10000000 * (10 ** uint256(decimals)); // 10,000,000 PTNX\n', '\n', '    // Unsold tokens reserve address\n', '    address public UNSOLD_RESERVE; // solium-disable-line mixedcase\n', '\n', '    // Tokens ico sale with lockup period\n', '    uint256 public constant ICO_LOCKUP_PERIOD = 182 days;\n', '    \n', '    // Platin Token ICO rate, regular\n', '    uint256 public constant TOKEN_RATE = 1000; \n', '\n', '    // Platin Token ICO rate with lockup, 20% bonus\n', '    uint256 public constant TOKEN_RATE_LOCKUP = 1200;\n', '\n', '    // Platin ICO min purchase amount\n', '    uint256 public constant MIN_PURCHASE_AMOUNT = 1 ether;\n', '\n', '    // Platin Token contract\n', '    PlatinToken public token;\n', '\n', '    // TGE time\n', '    uint256 public tgeTime;\n', '\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param _tgeTime uint256 TGE moment of time\n', '     * @param _token address Address of the Platin Token contract       \n', '     * @param _preIcoPool address Address of the Platin PreICO Pool\n', '     * @param _liquidPool address Address of the Platin Liquid Pool\n', '     * @param _ico address Address of the Platin ICO contract\n', '     * @param _miningPool address Address of the Platin Mining Pool\n', '     * @param _foundersPool address Address of the Platin Founders Pool\n', '     * @param _employeesPool address Address of the Platin Employees Pool\n', '     * @param _airdropsPool address Address of the Platin Airdrops Pool\n', '     * @param _reservesPool address Address of the Platin Reserves Pool\n', '     * @param _advisorsPool address Address of the Platin Advisors Pool\n', '     * @param _ecosystemPool address Address of the Platin Ecosystem Pool  \n', '     * @param _unsoldReserve address Address of the Platin Unsold Reserve                                 \n', '     */  \n', '    constructor(\n', '        uint256 _tgeTime,\n', '        PlatinToken _token, \n', '        address _preIcoPool,\n', '        address _liquidPool,\n', '        address _ico,\n', '        address _miningPool,\n', '        address _foundersPool,\n', '        address _employeesPool,\n', '        address _airdropsPool,\n', '        address _reservesPool,\n', '        address _advisorsPool,\n', '        address _ecosystemPool,\n', '        address _unsoldReserve\n', '    ) public {\n', '        require(_tgeTime >= block.timestamp, "TGE time should be >= current time."); // solium-disable-line security/no-block-members\n', '        require(_token != address(0), "Token address can\'t be zero.");\n', '        require(_preIcoPool != address(0), "PreICO Pool address can\'t be zero.");\n', '        require(_liquidPool != address(0), "Liquid Pool address can\'t be zero.");\n', '        require(_ico != address(0), "ICO address can\'t be zero.");\n', '        require(_miningPool != address(0), "Mining Pool address can\'t be zero.");\n', '        require(_foundersPool != address(0), "Founders Pool address can\'t be zero.");\n', '        require(_employeesPool != address(0), "Employees Pool address can\'t be zero.");\n', '        require(_airdropsPool != address(0), "Airdrops Pool address can\'t be zero.");\n', '        require(_reservesPool != address(0), "Reserves Pool address can\'t be zero.");\n', '        require(_advisorsPool != address(0), "Advisors Pool address can\'t be zero.");\n', '        require(_ecosystemPool != address(0), "Ecosystem Pool address can\'t be zero.");\n', '        require(_unsoldReserve != address(0), "Unsold reserve address can\'t be zero.");\n', '\n', '        // Setup tge time\n', '        tgeTime = _tgeTime;\n', '\n', '        // Setup token address\n', '        token = _token;\n', '\n', '        // Setup holder addresses\n', '        PRE_ICO_POOL = _preIcoPool;\n', '        LIQUID_POOL = _liquidPool;\n', '        ICO = _ico;\n', '        MINING_POOL = _miningPool;\n', '        FOUNDERS_POOL = _foundersPool;\n', '        EMPLOYEES_POOL = _employeesPool;\n', '        AIRDROPS_POOL = _airdropsPool;\n', '        RESERVES_POOL = _reservesPool;\n', '        ADVISORS_POOL = _advisorsPool;\n', '        ECOSYSTEM_POOL = _ecosystemPool;\n', '\n', '        // Setup unsold reserve address\n', '        UNSOLD_RESERVE = _unsoldReserve; \n', '    }\n', '\n', '    /**\n', '     * @dev Allocate function. Token Generation Event entry point.\n', '     * It makes initial token allocation according to the initial token supply constants.\n', '     */\n', '    function allocate() public {\n', '\n', '        // Should be called just after tge time\n', '        require(block.timestamp >= tgeTime, "Should be called just after tge time."); // solium-disable-line security/no-block-members\n', '\n', '        // Should not be allocated already\n', '        require(token.totalSupply() == 0, "Allocation is already done.");\n', '\n', '        // SALES          \n', '        token.allocate(PRE_ICO_POOL, PRE_ICO_POOL_AMOUNT);\n', '        token.allocate(LIQUID_POOL, LIQUID_POOL_AMOUNT);\n', '        token.allocate(ICO, ICO_AMOUNT);\n', '      \n', '        // MINING POOL\n', '        token.allocate(MINING_POOL, MINING_POOL_SUPPLY);\n', '\n', '        // FOUNDERS AND EMPLOYEES\n', '        token.allocate(FOUNDERS_POOL, FOUNDERS_POOL_AMOUNT);\n', '        token.allocate(EMPLOYEES_POOL, EMPLOYEES_POOL_AMOUNT);\n', '\n', '        // AIRDROPS POOL\n', '        token.allocate(AIRDROPS_POOL, AIRDROPS_POOL_SUPPLY);\n', '\n', '        // RESERVES POOL\n', '        token.allocate(RESERVES_POOL, RESERVES_POOL_SUPPLY);\n', '\n', '        // ADVISORS POOL\n', '        token.allocate(ADVISORS_POOL, ADVISORS_POOL_SUPPLY);\n', '\n', '        // ECOSYSTEM POOL\n', '        token.allocate(ECOSYSTEM_POOL, ECOSYSTEM_POOL_SUPPLY);\n', '\n', '        // Check Token Total Supply\n', '        require(token.totalSupply() == TOTAL_SUPPLY, "Total supply check error.");   \n', '    }\n', '}\n', '\n', '/**\n', ' * @title PlatinToken\n', ' * @dev Platin PTNX Token contract. Tokens are allocated during TGE.\n', ' * Token contract is a standard ERC20 token with additional capabilities: TGE allocation, holders tracking and lockup.\n', ' * Initial allocation should be invoked by the TGE contract at the TGE moment of time.\n', ' * Token contract holds list of token holders, the list includes holders with positive balance only.\n', ' * Authorized holders can transfer token with lockup(s). Lockups can be refundable. \n', ' * Lockups is a list of releases dates and releases amounts.\n', ' * In case of refund previous holder can get back locked up tokens. Only still locked up amounts can be transferred back.\n', ' */\n', 'contract PlatinToken is HoldersToken, NoOwner, Authorizable, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Platin Token"; // solium-disable-line uppercase\n', '    string public constant symbol = "PTNX"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', ' \n', '    // lockup sruct\n', '    struct Lockup {\n', '        uint256 release; // release timestamp\n', '        uint256 amount; // amount of tokens to release\n', '    }\n', '\n', '    // list of lockups\n', '    mapping (address => Lockup[]) public lockups;\n', '\n', '    // list of lockups that can be refunded\n', '    mapping (address => mapping (address => Lockup[])) public refundable;\n', '\n', '    // idexes mapping from refundable to lockups lists \n', '    mapping (address => mapping (address => mapping (uint256 => uint256))) public indexes;    \n', '\n', '    // Platin TGE contract\n', '    PlatinTGE public tge;\n', '\n', '    // allocation event logging\n', '    event Allocate(address indexed to, uint256 amount);\n', '\n', '    // lockup event logging\n', '    event SetLockups(address indexed to, uint256 amount, uint256 fromIdx, uint256 toIdx);\n', '\n', '    // refund event logging\n', '    event Refund(address indexed from, address indexed to, uint256 amount);\n', '\n', '    // spotTransfer modifier, check balance spot on transfer\n', '    modifier spotTransfer(address _from, uint256 _value) {\n', '        require(_value <= balanceSpot(_from), "Attempt to transfer more than balance spot.");\n', '        _;\n', '    }\n', '\n', '    // onlyTGE modifier, restrict to the TGE contract only\n', '    modifier onlyTGE() {\n', '        require(msg.sender == address(tge), "Only TGE method.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Set TGE contract\n', '     * @param _tge address PlatinTGE contract address    \n', '     */\n', '    function setTGE(PlatinTGE _tge) external onlyOwner {\n', '        require(tge == address(0), "TGE is already set.");\n', '        require(_tge != address(0), "TGE address can\'t be zero.");\n', '        tge = _tge;\n', '        authorize(_tge);\n', '    }        \n', '\n', '    /**\n', '     * @dev Allocate tokens during TGE\n', '     * @param _to address Address gets the tokens\n', '     * @param _amount uint256 Amount to allocate\n', '     */ \n', '    function allocate(address _to, uint256 _amount) external onlyTGE {\n', '        require(_to != address(0), "Allocate To address can\'t be zero");\n', '        require(_amount > 0, "Allocate amount should be > 0.");\n', '       \n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        _addHolder(_to);\n', '\n', '        require(totalSupply_ <= tge.TOTAL_SUPPLY(), "Can\'t allocate more than TOTAL SUPPLY.");\n', '\n', '        emit Allocate(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '    }  \n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 The amount of tokens to be transferred\n', '     * @return bool Returns true if the transfer was succeeded\n', '     */\n', '    function transfer(address _to, uint256 _value) public whenNotPaused spotTransfer(msg.sender, _value) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 The amount of tokens to be transferred\n', '     * @return bool Returns true if the transfer was succeeded\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused spotTransfer(_from, _value) returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another with lockup\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 The amount of tokens to be transferred\n', '     * @param _lockupReleases uint256[] List of lockup releases\n', '     * @param _lockupAmounts uint256[] List of lockup amounts\n', '     * @param _refundable bool Is locked up amount refundable\n', '     * @return bool Returns true if the transfer was succeeded     \n', '     */\n', '    function transferWithLockup(\n', '        address _to, \n', '        uint256 _value, \n', '        uint256[] _lockupReleases,\n', '        uint256[] _lockupAmounts,\n', '        bool _refundable\n', '    ) \n', '    public onlyAuthorized returns (bool)\n', '    {        \n', '        transfer(_to, _value);\n', '        _lockup(_to, _value, _lockupReleases, _lockupAmounts, _refundable); // solium-disable-line arg-overflow     \n', '    }       \n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another with lockup\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 The amount of tokens to be transferred\n', '     * @param _lockupReleases uint256[] List of lockup releases\n', '     * @param _lockupAmounts uint256[] List of lockup amounts\n', '     * @param _refundable bool Is locked up amount refundable      \n', '     * @return bool Returns true if the transfer was succeeded     \n', '     */\n', '    function transferFromWithLockup(\n', '        address _from, \n', '        address _to, \n', '        uint256 _value, \n', '        uint256[] _lockupReleases,\n', '        uint256[] _lockupAmounts,\n', '        bool _refundable\n', '    ) \n', '    public onlyAuthorized returns (bool)\n', '    {\n', '        transferFrom(_from, _to, _value);\n', '        _lockup(_to, _value, _lockupReleases, _lockupAmounts, _refundable); // solium-disable-line arg-overflow  \n', '    }     \n', '\n', '    /**\n', '     * @dev Refund refundable locked up amount\n', '     * @param _from address The address which you want to refund tokens from\n', '     * @return uint256 Returns amount of refunded tokens   \n', '     */\n', '    function refundLockedUp(\n', '        address _from\n', '    )\n', '    public onlyAuthorized returns (uint256)\n', '    {\n', '        address _sender = msg.sender;\n', '        uint256 _balanceRefundable = 0;\n', '        uint256 _refundableLength = refundable[_from][_sender].length;\n', '        if (_refundableLength > 0) {\n', '            uint256 _lockupIdx;\n', '            for (uint256 i = 0; i < _refundableLength; i++) {\n', '                if (refundable[_from][_sender][i].release > block.timestamp) { // solium-disable-line security/no-block-members\n', '                    _balanceRefundable = _balanceRefundable.add(refundable[_from][_sender][i].amount);\n', '                    refundable[_from][_sender][i].release = 0;\n', '                    refundable[_from][_sender][i].amount = 0;\n', '                    _lockupIdx = indexes[_from][_sender][i];\n', '                    lockups[_from][_lockupIdx].release = 0;\n', '                    lockups[_from][_lockupIdx].amount = 0;       \n', '                }    \n', '            }\n', '\n', '            if (_balanceRefundable > 0) {\n', '                _preserveHolders(_from, _sender, _balanceRefundable);\n', '                balances[_from] = balances[_from].sub(_balanceRefundable);\n', '                balances[_sender] = balances[_sender].add(_balanceRefundable);\n', '                emit Refund(_from, _sender, _balanceRefundable);\n', '                emit Transfer(_from, _sender, _balanceRefundable);\n', '            }\n', '        }\n', '        return _balanceRefundable;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the lockups list count\n', '     * @param _who address Address owns locked up list\n', '     * @return uint256 Lockups list count\n', '     */\n', '    function lockupsCount(address _who) public view returns (uint256) {\n', '        return lockups[_who].length;\n', '    }\n', '\n', '    /**\n', '     * @dev Find out if the address has lockups\n', '     * @param _who address Address checked for lockups\n', '     * @return bool Returns true if address has lockups\n', '     */\n', '    function hasLockups(address _who) public view returns (bool) {\n', '        return lockups[_who].length > 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Get balance locked up at the current moment of time\n', '     * @param _who address Address owns locked up amounts\n', '     * @return uint256 Balance locked up at the current moment of time\n', '     */\n', '    function balanceLockedUp(address _who) public view returns (uint256) {\n', '        uint256 _balanceLokedUp = 0;\n', '        uint256 _lockupsLength = lockups[_who].length;\n', '        for (uint256 i = 0; i < _lockupsLength; i++) {\n', '            if (lockups[_who][i].release > block.timestamp) // solium-disable-line security/no-block-members\n', '                _balanceLokedUp = _balanceLokedUp.add(lockups[_who][i].amount);\n', '        }\n', '        return _balanceLokedUp;\n', '    }\n', '\n', '    /**\n', '     * @dev Get refundable locked up balance at the current moment of time\n', '     * @param _who address Address owns locked up amounts\n', '     * @param _sender address Address owned locked up amounts\n', '     * @return uint256 Locked up refundable balance at the current moment of time\n', '     */\n', '    function balanceRefundable(address _who, address _sender) public view returns (uint256) {\n', '        uint256 _balanceRefundable = 0;\n', '        uint256 _refundableLength = refundable[_who][_sender].length;\n', '        if (_refundableLength > 0) {\n', '            for (uint256 i = 0; i < _refundableLength; i++) {\n', '                if (refundable[_who][_sender][i].release > block.timestamp) // solium-disable-line security/no-block-members\n', '                    _balanceRefundable = _balanceRefundable.add(refundable[_who][_sender][i].amount);\n', '            }\n', '        }\n', '        return _balanceRefundable;\n', '    }\n', '\n', '    /**\n', '     * @dev Get balance spot for the current moment of time\n', '     * @param _who address Address owns balance spot\n', '     * @return uint256 Balance spot for the current moment of time\n', '     */\n', '    function balanceSpot(address _who) public view returns (uint256) {\n', '        uint256 _balanceSpot = balanceOf(_who);\n', '        _balanceSpot = _balanceSpot.sub(balanceLockedUp(_who));\n', '        return _balanceSpot;\n', '    }\n', '\n', '    /**\n', '     * @dev Lockup amount till release time\n', '     * @param _who address Address gets the locked up amount\n', '     * @param _amount uint256 Amount to lockup\n', '     * @param _lockupReleases uint256[] List of lockup releases\n', '     * @param _lockupAmounts uint256[] List of lockup amounts\n', '     * @param _refundable bool Is locked up amount refundable     \n', '     */     \n', '    function _lockup(\n', '        address _who, \n', '        uint256 _amount, \n', '        uint256[] _lockupReleases,\n', '        uint256[] _lockupAmounts,\n', '        bool _refundable) \n', '    internal \n', '    {\n', '        require(_lockupReleases.length == _lockupAmounts.length, "Length of lockup releases and amounts lists should be equal.");\n', '        require(_lockupReleases.length.add(lockups[_who].length) <= 1000, "Can\'t be more than 1000 lockups per address.");\n', '        if (_lockupReleases.length > 0) {\n', '            uint256 _balanceLokedUp = 0;\n', '            address _sender = msg.sender;\n', '            uint256 _fromIdx = lockups[_who].length;\n', '            uint256 _toIdx = _fromIdx + _lockupReleases.length - 1;\n', '            uint256 _lockupIdx;\n', '            uint256 _refundIdx;\n', '            for (uint256 i = 0; i < _lockupReleases.length; i++) {\n', '                if (_lockupReleases[i] > block.timestamp) { // solium-disable-line security/no-block-members\n', '                    lockups[_who].push(Lockup(_lockupReleases[i], _lockupAmounts[i]));\n', '                    _balanceLokedUp = _balanceLokedUp.add(_lockupAmounts[i]);\n', '                    if (_refundable) {\n', '                        refundable[_who][_sender].push(Lockup(_lockupReleases[i], _lockupAmounts[i]));\n', '                        _lockupIdx = lockups[_who].length - 1;\n', '                        _refundIdx = refundable[_who][_sender].length - 1;\n', '                        indexes[_who][_sender][_refundIdx] = _lockupIdx;\n', '                    }\n', '                }\n', '            }\n', '\n', '            require(_balanceLokedUp <= _amount, "Can\'t lockup more than transferred amount.");\n', '            emit SetLockups(_who, _amount, _fromIdx, _toIdx); // solium-disable-line arg-overflow\n', '        }            \n', '    }      \n', '}']