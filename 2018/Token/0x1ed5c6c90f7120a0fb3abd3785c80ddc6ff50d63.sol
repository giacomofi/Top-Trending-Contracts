['pragma solidity ^0.4.21;\n', '\n', 'contract Owned {\n', '    \n', '    /// &#39;owner&#39; is the only address that can call a function with \n', '    /// this modifier\n', '    address public owner;\n', '    address internal newOwner;\n', '    \n', '    ///@notice The constructor assigns the message sender to be &#39;owner&#39;\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    event updateOwner(address _oldOwner, address _newOwner);\n', '    \n', '    ///change the owner\n', '    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\n', '        require(owner != _newOwner);\n', '        newOwner = _newOwner;\n', '        return true;\n', '    }\n', '    \n', '    /// accept the ownership\n', '    function acceptNewOwner() public returns(bool) {\n', '        require(msg.sender == newOwner);\n', '        emit updateOwner(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    \n', '    /// user tokens\n', '    mapping (address => uint256) public balances;\n', '    \n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract PUST is ERC20Token {\n', '    \n', '    string public name = "UST Put Option";\n', '    string public symbol = "PUST9";\n', '    uint public decimals = 0;\n', '    \n', '    uint256 public totalSupply = 0;\n', '    uint256 public topTotalSupply = 1000 * 130000;\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '    //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '    //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '    //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '    //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowances[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '          balances[_to] += _value;\n', '          balances[_from] -= _value;\n', '          allowances[_from][msg.sender] -= _value;\n', '          emit Transfer(_from, _to, _value);\n', '          return true;\n', '        } else { return false; }\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '    \n', '    mapping(address => uint256) public balances;\n', '    \n', '    mapping (address => mapping (address => uint256)) allowances;\n', '}\n', '\n', '\n', 'contract ExchangeUST is SafeMath, Owned, PUST {\n', '    \n', '    // Exercise End Time 10/1/2018 0:0:0\n', '    uint public ExerciseEndTime = 1538323200;\n', '    uint public exchangeRate = 130000; //percentage times (1 ether)\n', '    //mapping (address => uint) ustValue; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '    \n', '    // UST address\n', '    address public ustAddress = address(0xFa55951f84Bfbe2E6F95aA74B58cc7047f9F0644);\n', '   \n', '    // offical Address\n', '    address public officialAddress = address(0x472fc5B96afDbD1ebC5Ae22Ea10bafe45225Bdc6);\n', '    \n', '    event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);\n', '    event Deposit(address token, address user, uint amount, uint balance);\n', '    event Withdraw(address token, address user, uint amount, uint balance);\n', '    event exchange(address contractAddr, address reciverAddr, uint _pustBalance);\n', '    event changeFeeAt(uint _exchangeRate);\n', '\n', '    function chgExchangeRate(uint _exchangeRate) public onlyOwner {\n', '        require (_exchangeRate != exchangeRate);\n', '        require (_exchangeRate != 0);\n', '        exchangeRate = _exchangeRate;\n', '    }\n', '\n', '    function exerciseOption(uint _pustBalance) public returns (bool) {\n', '        require (now < ExerciseEndTime);\n', '        require (_pustBalance <= balances[msg.sender]);\n', '        \n', '        // convert units from ether to wei\n', '        uint _ether = safeMul(_pustBalance, 7 * 10 ** 12);\n', '        require (address(this).balance >= _ether); \n', '        \n', '        // UST amount\n', '        uint _amount = safeMul(_pustBalance, 10 ** 18);\n', '        require (PUST(ustAddress).transferFrom(msg.sender, officialAddress, _amount) == true);\n', '        \n', '        balances[msg.sender] = safeSub(balances[msg.sender], _pustBalance);\n', '        balances[officialAddress] = safeAdd(balances[officialAddress], _pustBalance);\n', '        msg.sender.transfer(_ether);\n', '        emit exchange(address(this), msg.sender, _pustBalance);\n', '    }\n', '}\n', '\n', 'contract USTputOption is ExchangeUST {\n', '    \n', '    // constant \n', '    uint public initBlockEpoch = 40;\n', '    uint public eachUserWeight = 10;\n', '    uint public lastEpochBlock = block.number + initBlockEpoch;\n', '    uint public price1=1750 * 9995 * 10**9/10000;\n', '    uint public price2=250 * 99993 * 10**9/100000;\n', '    uint public initEachPUST = 2 * 10**12 wei;\n', '    uint public eachPUSTprice = initEachPUST;\n', '    uint public epochLast = 0;\n', '\n', '    event buyPUST (address caller, uint PUST);\n', '    event Reward (address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    function () payable public {\n', '        require (now < ExerciseEndTime);\n', '        //require (topTotalSupply > totalSupply);\n', '        //bool firstCallReward = false;\n', '        uint epochNow = whichEpoch(block.number);\n', '    \n', '        if(epochNow != epochLast) {\n', '            \n', '            lastEpochBlock = safeAdd(lastEpochBlock, ((block.number - lastEpochBlock)/initBlockEpoch + 1)* initBlockEpoch);\n', '            eachPUSTprice = calcpustprice(epochNow, epochLast);\n', '            epochLast = epochNow;\n', '\n', '        }\n', '\n', '        uint _value = msg.value;\n', '        require(_value >= 1 finney);\n', '        uint _PUST = _value / eachPUSTprice;\n', '        require(safeMul(_PUST, eachPUSTprice) <= _value);\n', '        if (safeAdd(totalSupply, _PUST) > topTotalSupply) {\n', '            _PUST = safeSub(topTotalSupply, totalSupply);\n', '        }\n', '        \n', '        uint _refound = safeSub(_value, safeMul(_PUST, eachPUSTprice));\n', '        \n', '        if(_refound > 0) {\n', '            msg.sender.transfer(_refound);\n', '        }\n', '        \n', '        officialAddress.transfer(safeSub(_value, _refound));\n', '        \n', '        balances[msg.sender] = safeAdd(balances[msg.sender], _PUST);\n', '        totalSupply = safeAdd(totalSupply, _PUST);\n', '        emit Transfer(address(this), msg.sender, _PUST);\n', '        \n', '        // calc last epoch\n', '        lastEpochBlock = safeAdd(lastEpochBlock, eachUserWeight);\n', '    }\n', '    \n', '    // \n', '    function whichEpoch(uint _blocknumber) internal view returns (uint _epochNow) {\n', '        if (lastEpochBlock >= _blocknumber ) {\n', '            _epochNow = epochLast;\n', '        } else {\n', '            _epochNow = epochLast + (_blocknumber - lastEpochBlock) / initBlockEpoch + 1;\n', '        }\n', '    }\n', '    \n', '    function calcpustprice(uint _epochNow, uint _epochLast) public returns (uint _eachPUSTprice) {\n', '        require (_epochNow - _epochLast > 0);    \n', '        uint dif = _epochNow - _epochLast;\n', '        uint dif100 = dif/100;\n', '        dif = dif - dif100*100;        \n', '        for(uint i=0;i<dif100;i++)\n', '        {\n', '            price1 = price1-price1*5/100;\n', '            price2 = price2-price2*7/1000;\n', '        }\n', '        price1 = price1 - price1*5*dif/10000;\n', '        price2 = price2 - price2*7*dif/100000;\n', '        \n', '        _eachPUSTprice = price1+price2;  \n', '    }\n', '    \n', '    // only owner can deposit ether into put option contract\n', '    function DepositETH(uint _PUST) payable public {\n', '        // deposit ether\n', '        require (msg.sender == officialAddress);\n', '        topTotalSupply += _PUST;\n', '    }\n', '    \n', '    // only end time, onwer can transfer contract&#39;s ether out.\n', '    function WithdrawETH() payable public onlyOwner {\n', '        officialAddress.transfer(address(this).balance);\n', '    } \n', '    \n', '}']