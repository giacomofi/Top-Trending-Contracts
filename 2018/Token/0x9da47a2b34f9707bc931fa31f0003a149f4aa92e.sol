['pragma solidity ^0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 _value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #223 Interface\n', '// https://github.com/Dexaran/ERC223-token-standard/token/ERC223/ERC223_interface.sol\n', '// ----------------------------------------------------------------------------\n', 'contract ERC223Interface {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) constant public returns (uint);\n', '    function transfer(address to, uint value, bytes data) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', 'contract ELTTokenType {\n', '    uint public decimals;\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    mapping(address => uint) timevault;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    // Token release switch\n', '    bool public released;\n', '    \n', '    // The date before the release must be finalized or upgrade path will be forced\n', '    uint public releaseFinalizationDate;\n', '}\n', 'contract ContractReceiver {\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        tkn.sig = bytes4(u);\n', '\n', '        /* tkn variable is analogue of msg variable of Ether transaction\n', '        *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '        *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '        *  tkn.data is data of token transaction   (analogue of msg.data)\n', '        *  tkn.sig is 4 bytes signature of function\n', '        *  if data of token transaction is a function execution\n', '        */\n', '    }\n', '}\n', '/**\n', ' * @title Owned\n', ' * @dev To verify ownership\n', ' */\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', '\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract ERC20Token is ERC20Interface, ERC223Interface, ELTTokenType {\n', '    using SafeMath for uint;\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        bytes memory empty;\n', '        return transfer(_to, _value, empty);\n', '    }\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data, false);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data, false);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     */\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '        assembly\n', '        {\n', '        //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '    \n', '\n', '    //function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data, bool withAllowance) private returns (bool success) {\n', '        transferIfRequirementsMet(msg.sender, _to, _value, withAllowance);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '    \n', '    //function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data, bool withAllowance) private returns (bool success) {\n', '        transferIfRequirementsMet(msg.sender, _to, _value, withAllowance);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function checkTransferRequirements(address _from, address _to, uint _value) private view {\n', '        require(_to != address(0));\n', '        require(released == true);\n', '        require(now > releaseFinalizationDate);\n', '        if (timevault[msg.sender] != 0)\n', '        {\n', '            require(now > timevault[msg.sender]);\n', '        }\n', '        if (balanceOf(_from) < _value) revert();\n', '    }\n', '\n', '    function transferIfRequirementsMet(address _from, address _to, uint _value, bool withAllowances) private {\n', '        checkTransferRequirements(_from, _to, _value);\n', '        if ( withAllowances)\n', '        {\n', '            require (_value <= allowed[_from][msg.sender]);\n', '        }\n', '        balances[_from] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint value) public returns (bool) {\n', '        bytes memory empty;\n', '        if (isContract(to)) {\n', '            return transferToContract(to, value, empty, true);\n', '        }\n', '        else {\n', '            return transferToAddress(to, value, empty, true);\n', '        }\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        return true;\n', '      }\n', '}\n', 'contract TimeVaultInterface is ERC20Interface, ERC223Interface {\n', '    function timeVault(address who) public constant returns (uint);\n', '    function getNow() public constant returns (uint);\n', '    function transferByOwner(address to, uint _value, uint timevault) public returns (bool);\n', '}\n', 'contract TimeVaultToken is owned, ERC20Token, TimeVaultInterface {\n', '    function transferByOwner(address to, uint value, uint earliestReTransferTime) onlyOwner public returns (bool) {\n', '        transfer(to, value);\n', '        timevault[to] = earliestReTransferTime;\n', '        return true;\n', '    }\n', '\n', '    function timeVault(address owner) public constant returns (uint earliestTransferTime) {\n', '        return timevault[owner];\n', '    }\n', '\n', '    function getNow() public constant returns (uint blockchainTimeNow) {\n', '        return now;\n', '    }\n', '\n', '}\n', 'contract StandardToken is TimeVaultToken {\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', 'contract StandardTokenExt is StandardToken {\n', '    \n', '    /* Interface declaration */\n', '    function isToken() public pure returns (bool weAre) {\n', '        return true;\n', '    }\n', '}\n', 'contract VersionedToken is owned {\n', '    address public upgradableContractAddress;\n', '\n', '    function VersionedToken(address initialVersion) public {\n', '        upgradableContractAddress = initialVersion;\n', '    }\n', '\n', '    function update(address newVersion) onlyOwner public {\n', '        upgradableContractAddress = newVersion;\n', '    }\n', '\n', '    function() public {\n', '        address upgradableContractMem = upgradableContractAddress;\n', '        bytes memory functionCall = msg.data;\n', '\n', '        assembly {\n', '        // Load the first 32 bytes of the functionCall bytes array which represents the size of the bytes array\n', '            let functionCallSize := mload(functionCall)\n', '\n', '        // Calculate functionCallDataAddress which starts at the second 32 byte block in the functionCall bytes array\n', '            let functionCallDataAddress := add(functionCall, 0x20)\n', '\n', '        // delegatecall(gasAllowed, callAddress, inMemAddress, inSizeBytes, outMemAddress, outSizeBytes) returns/pushes to stack (1 on success, 0 on failure)\n', '            let functionCallResult := delegatecall(gas, upgradableContractMem, functionCallDataAddress, functionCallSize, 0, 0)\n', '\n', '            let freeMemAddress := mload(0x40)\n', '\n', '            switch functionCallResult\n', '            case 0 {\n', '            // revert(fromMemAddress, sizeInBytes) ends execution and returns value\n', '                revert(freeMemAddress, 0)\n', '            }\n', '            default {\n', '            // returndatacopy(toMemAddress, fromMemAddress, sizeInBytes)\n', '                returndatacopy(freeMemAddress, 0x0, returndatasize)\n', '            // return(fromMemAddress, sizeInBytes)\n', '                return (freeMemAddress, returndatasize)\n', '            }\n', '        }\n', '    }\n', '}\n', 'contract ELTToken is VersionedToken, ELTTokenType {\n', '    string public name;\n', '    string public symbol;\n', '    \n', '    function ELTToken(address _owner, string _name, string _symbol, uint _totalSupply, uint _decimals, uint _releaseFinalizationDate, address _initialVersion) VersionedToken(_initialVersion) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        totalSupply = _totalSupply;\n', '        decimals = _decimals;\n', '\n', '        // Allocate initial balance to the owner\n', '        balances[_owner] = _totalSupply;\n', '\n', '        releaseFinalizationDate = _releaseFinalizationDate;\n', '        released = false;\n', '    }\n', '}\n', 'contract ELTTokenImpl is StandardTokenExt {\n', '    /** Name and symbol were updated. */\n', '    event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '    string public name;\n', '    string public symbol;\n', '    \n', '    function ELTTokenImpl() public {\n', '    }\n', '\n', '    /**\n', '     * One way function to perform the final token release.\n', '     */\n', '    function releaseTokenTransfer(bool _value) onlyOwner public {\n', '        released = _value;\n', '    }\n', '\n', '    function setreleaseFinalizationDate(uint _value) onlyOwner public {\n', '        releaseFinalizationDate = _value;\n', '    }\n', '\n', '    /**\n', '     * Owner can update token information here.\n', '     *\n', '     * It is often useful to conceal the actual token association, until\n', '     * the token operations, like central issuance or reissuance have been completed.\n', '     * In this case the initial token can be supplied with empty name and symbol information.\n', '     *\n', '     * This function allows the token owner to rename the token after the operations\n', '     * have been completed and then point the audience to use the token contract.\n', '     */\n', '    function setTokenInformation(string _name, string _symbol) onlyOwner public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        emit UpdatedTokenInformation(name, symbol);\n', '    }\n', '}']