['pragma solidity 0.4.24;\n', '\n', 'contract ERC20 {\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    \n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '    \n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    \n', '  \n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setOwner(address _owner) public onlyOwner {\n', '        owner = _owner;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', 'contract Vault is Ownable { \n', '\n', '    function () public payable {\n', '\n', '    }\n', '\n', '    function getBalance() public view returns (uint) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function withdraw(uint amount) public onlyOwner {\n', '        require(address(this).balance >= amount);\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    function withdrawAll() public onlyOwner {\n', '        withdraw(address(this).balance);\n', '    }\n', '}\n', '\n', 'contract TournamentPass is ERC20, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    Vault vault;\n', '\n', '    constructor(Vault _vault) public {\n', '        vault = _vault;\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    address[] public minters;\n', '    uint256 supply;\n', '    uint mintLimit = 20000;\n', '    \n', '    function name() public view returns (string){\n', '        return "GU Tournament Passes";\n', '    }\n', '\n', '    function symbol() public view returns (string) {\n', '        return "PASS";\n', '    }\n', '\n', '    function addMinter(address minter) public onlyOwner {\n', '        minters.push(minter);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return supply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function isMinter(address test) internal view returns (bool) {\n', '        for (uint i = 0; i < minters.length; i++) {\n', '            if (minters[i] == test) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function mint(address to, uint amount) public returns (bool) {\n', '        require(isMinter(msg.sender));\n', '        if (amount.add(supply) > mintLimit) {\n', '            return false;\n', '        } \n', '        supply = supply.add(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        emit Transfer(address(0), to, amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address spender, uint256 addedValue) public returns (bool) {\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool) {\n', '        uint256 oldValue = allowed[msg.sender][spender];\n', '        if (subtractedValue > oldValue) {\n', '            allowed[msg.sender][spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    uint public price = 250 finney;\n', '\n', '    function purchase(uint amount) public payable {\n', '        \n', '        require(msg.value >= price.mul(amount));\n', '        require(supply.add(amount) <= mintLimit);\n', '\n', '        supply = supply.add(amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        emit Transfer(address(0), msg.sender, amount);\n', '\n', '        address(vault).transfer(msg.value);\n', '    }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '\n', 'contract ERC20 {\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    \n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '    \n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    \n', '  \n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setOwner(address _owner) public onlyOwner {\n', '        owner = _owner;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', 'contract Vault is Ownable { \n', '\n', '    function () public payable {\n', '\n', '    }\n', '\n', '    function getBalance() public view returns (uint) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function withdraw(uint amount) public onlyOwner {\n', '        require(address(this).balance >= amount);\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    function withdrawAll() public onlyOwner {\n', '        withdraw(address(this).balance);\n', '    }\n', '}\n', '\n', 'contract TournamentPass is ERC20, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    Vault vault;\n', '\n', '    constructor(Vault _vault) public {\n', '        vault = _vault;\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    address[] public minters;\n', '    uint256 supply;\n', '    uint mintLimit = 20000;\n', '    \n', '    function name() public view returns (string){\n', '        return "GU Tournament Passes";\n', '    }\n', '\n', '    function symbol() public view returns (string) {\n', '        return "PASS";\n', '    }\n', '\n', '    function addMinter(address minter) public onlyOwner {\n', '        minters.push(minter);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return supply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function isMinter(address test) internal view returns (bool) {\n', '        for (uint i = 0; i < minters.length; i++) {\n', '            if (minters[i] == test) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function mint(address to, uint amount) public returns (bool) {\n', '        require(isMinter(msg.sender));\n', '        if (amount.add(supply) > mintLimit) {\n', '            return false;\n', '        } \n', '        supply = supply.add(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        emit Transfer(address(0), to, amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address spender, uint256 addedValue) public returns (bool) {\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool) {\n', '        uint256 oldValue = allowed[msg.sender][spender];\n', '        if (subtractedValue > oldValue) {\n', '            allowed[msg.sender][spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    uint public price = 250 finney;\n', '\n', '    function purchase(uint amount) public payable {\n', '        \n', '        require(msg.value >= price.mul(amount));\n', '        require(supply.add(amount) <= mintLimit);\n', '\n', '        supply = supply.add(amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        emit Transfer(address(0), msg.sender, amount);\n', '\n', '        address(vault).transfer(msg.value);\n', '    }\n', '\n', '}']
