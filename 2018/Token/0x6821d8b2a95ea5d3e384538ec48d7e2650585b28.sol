['pragma solidity ^0.5.1;\n', '\n', 'contract Token{\n', '    \n', '    // ERC20 Token, with the addition of symbol, name and decimals and a\n', '    // fixed supply\n', '    \n', "    string public constant symbol = 'ZAR-TIG';\n", "    string public constant name = 'ZAR Tigereum';\n", '    uint8 public constant decimals = 2;\n', '    uint public constant _totalSupply = 100000000 * 10**uint(decimals);\n', '    address public owner;\n', '    string public webAddress;\n', '    \n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '    \n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    constructor() public {\n', '        balances[msg.sender] = _totalSupply;\n', '        owner = msg.sender;\n', '        webAddress = "https://tigereum.io";\n', '    }\n', '    \n', '    function totalSupply() public pure returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    // Get the token balance for account { tokenOwner }\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require( balances[msg.sender] >= tokens && tokens > 0 );\n', '        balances[msg.sender] -= tokens;\n', '        balances[to] += tokens;\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    // Send {tokens} amount of tokens from address {from} to address {to}\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require( allowed[from][msg.sender] >= tokens && balances[from] >= tokens && tokens > 0 );\n', '        balances[from] -= tokens;\n', '        allowed[from][msg.sender] -= tokens;\n', '        balances[to] += tokens;\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    // Allow {spender} to withdraw from your account, multiple times, up to the {tokens} amount.\n', '    function approve(address sender, uint256 tokens) public returns (bool success) {\n', '        allowed[msg.sender][sender] = tokens;\n', '        emit Approval(msg.sender, sender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event Approval(address indexed _owner, address indexed _to, uint256 _amount);\n', '}']