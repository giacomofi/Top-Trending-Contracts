['pragma solidity ^0.4.23;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract BVA is Ownable, MintableToken {\n', '  using SafeMath for uint256;    \n', '  string public constant name = "BlockchainValley";\n', '  string public constant symbol = "BVA";\n', '  uint32 public constant decimals = 18;\n', '  address public addressFounders;\n', '  uint256 public summFounders;\n', '  function BVA() public {\n', '    addressFounders = 0x6e69307fe1fc55B2fffF680C5080774D117f1154;  \n', '    summFounders = 35340000 * (10 ** uint256(decimals));  \n', '    mint(addressFounders, summFounders);      \n', '  }      \n', '      \n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where Contributors can make\n', ' * token Contributions and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  BVA public token;\n', '  //Start timestamps where investments are allowed\n', '  uint256 public startPreICO;\n', '  uint256 public endPreICO;  \n', '  uint256 public startICO;\n', '  uint256 public endICO;\n', '  //Hard cap\n', '  uint256 public sumHardCapPreICO;\n', '  uint256 public sumHardCapICO;\n', '  uint256 public sumPreICO;\n', '  uint256 public sumICO;\n', '  //Min Max Investment\n', '  uint256 public minInvestmentPreICO;\n', '  uint256 public minInvestmentICO;\n', '  uint256 public maxInvestmentICO;\n', '  //rate\n', '  uint256 public ratePreICO; \n', '  uint256 public rateICO;\n', '  //address where funds are collected\n', '  address public wallet;\n', '  //referral system\n', '  uint256 public maxRefererTokens;\n', '  uint256 public allRefererTokens;\n', '/**\n', '* event for token Procurement logging\n', '* @param contributor who Pledged for the tokens\n', '* @param beneficiary who got the tokens\n', '* @param value weis Contributed for Procurement\n', '* @param amount amount of tokens Procured\n', '*/\n', '  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  function Crowdsale() public {\n', '    token = createTokenContract();\n', '    //Hard cap\n', '    sumHardCapPreICO = 15000000 * 1 ether;\n', '    sumHardCapICO = 1000000 * 1 ether;\n', '    //referral system\n', '    maxRefererTokens = 2500000 * 1 ether;\n', '    //Min Max Investment\n', '    minInvestmentPreICO = 3 * 1 ether;\n', '    minInvestmentICO = 100000000000000000; //0.1 ether\n', '    maxInvestmentICO = 5 * 1 ether;\n', '    //rate;\n', '    ratePreICO = 1500;\n', '    rateICO = 1000;    \n', '    // address where funds are collected\n', '    wallet = 0x00a134aE23247c091Dd4A4dC1786358f26714ea3;\n', '  }\n', '\n', '  function setRatePreICO(uint256 _ratePreICO) public onlyOwner  {\n', '    ratePreICO = _ratePreICO;\n', '  } \n', '  \n', '  function setRateICO(uint256 _rateICO) public onlyOwner  {\n', '    rateICO = _rateICO;\n', '  }  \n', '  \n', '  function setStartPreICO(uint256 _startPreICO) public onlyOwner  {\n', '    //require(_startPreICO < endPreICO);  \n', '    startPreICO = _startPreICO;\n', '  }   \n', '\n', '  function setEndPreICO(uint256 _endPreICO) public onlyOwner  {\n', '    //require(_endPreICO > startPreICO);\n', '    //require(_endPreICO < startICO);\n', '    endPreICO = _endPreICO;\n', '  }\n', '\n', '  function setStartICO(uint256 _startICO) public onlyOwner  {\n', '    //require(_startICO > endPreICO); \n', '    //require(_startICO < endICO);  \n', '    startICO = _startICO;\n', '  }\n', '\n', '  function setEndICO(uint256 _endICO) public onlyOwner  {\n', '    //require(_endICO > startICO); \n', '    endICO = _endICO;\n', '  }\n', '  \n', '  // fallback function can be used to Procure tokens\n', '  function () external payable {\n', '    procureTokens(msg.sender);\n', '  }\n', '  \n', '  function createTokenContract() internal returns (BVA) {\n', '    return new BVA();\n', '  }\n', '  \n', '  function adjustHardCap(uint256 _value) internal {\n', '    //PreICO   \n', '    if (now >= startPreICO && now < endPreICO){\n', '      sumPreICO = sumPreICO.add(_value);\n', '    }  \n', '    //ICO   \n', '    if (now >= startICO && now < endICO){\n', '      sumICO = sumICO.add(_value);\n', '    }       \n', '  }  \n', '\n', '  function checkHardCap(uint256 _value) view public {\n', '    //PreICO   \n', '    if (now >= startPreICO && now < endPreICO){\n', '      require(_value.add(sumPreICO) <= sumHardCapPreICO);\n', '    }  \n', '    //ICO   \n', '    if (now >= startICO && now < endICO){\n', '      require(_value.add(sumICO) <= sumHardCapICO);\n', '    }       \n', '  } \n', '  \n', '  function checkMinMaxInvestment(uint256 _value) view public {\n', '    //PreICO   \n', '    if (now >= startPreICO && now < endPreICO){\n', '      require(_value >= minInvestmentPreICO);\n', '    }  \n', '    //ICO   \n', '    if (now >= startICO && now < endICO){\n', '      require(_value >= minInvestmentICO);\n', '      require(_value <= maxInvestmentICO);\n', '    }       \n', '  }\n', '  \n', '  function bytesToAddress(bytes source) internal pure returns(address) {\n', '    uint result;\n', '    uint mul = 1;\n', '    for(uint i = 20; i > 0; i--) {\n', '      result += uint8(source[i-1])*mul;\n', '      mul = mul*256;\n', '    }\n', '    return address(result);\n', '  }\n', '  \n', '  function procureTokens(address _beneficiary) public payable {\n', '    uint256 tokens;\n', '    uint256 weiAmount = msg.value;\n', '    address _this = this;\n', '    uint256 rate;\n', '    address referer;\n', '    uint256 refererTokens;\n', '    require(now >= startPreICO);\n', '    require(now <= endICO);\n', '    require(_beneficiary != address(0));\n', '    checkMinMaxInvestment(weiAmount);\n', '    rate = getRate();\n', '    tokens = weiAmount.mul(rate);\n', '    //referral system\n', '\tif(msg.data.length == 20) {\n', '      referer = bytesToAddress(bytes(msg.data));\n', '      require(referer != msg.sender);\n', '\t  //add tokens to the referrer\n', '      refererTokens = tokens.mul(5).div(100);\n', '    }\n', '    checkHardCap(tokens.add(refererTokens));\n', '    adjustHardCap(tokens.add(refererTokens));\n', '    wallet.transfer(_this.balance);\n', '\tif (refererTokens != 0 && allRefererTokens.add(refererTokens) <= maxRefererTokens){\n', '\t  allRefererTokens = allRefererTokens.add(refererTokens);\n', '      token.mint(referer, refererTokens);\t  \n', '\t}    \n', '    token.mint(_beneficiary, tokens);\n', '    emit TokenProcurement(msg.sender, _beneficiary, weiAmount, tokens);\n', '  }\n', '  \n', '  function getRate() public view returns (uint256) {\n', '    uint256 rate;\n', '    //PreICO   \n', '    if (now >= startPreICO && now < endPreICO){\n', '      rate = ratePreICO;\n', '    }  \n', '    //ICO   \n', '    if (now >= startICO && now < endICO){\n', '      rate = rateICO;\n', '    }      \n', '    return rate;\n', '  }  \n', '}']
['pragma solidity ^0.4.23;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract BVA is Ownable, MintableToken {\n', '  using SafeMath for uint256;    \n', '  string public constant name = "BlockchainValley";\n', '  string public constant symbol = "BVA";\n', '  uint32 public constant decimals = 18;\n', '  address public addressFounders;\n', '  uint256 public summFounders;\n', '  function BVA() public {\n', '    addressFounders = 0x6e69307fe1fc55B2fffF680C5080774D117f1154;  \n', '    summFounders = 35340000 * (10 ** uint256(decimals));  \n', '    mint(addressFounders, summFounders);      \n', '  }      \n', '      \n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where Contributors can make\n', ' * token Contributions and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  BVA public token;\n', '  //Start timestamps where investments are allowed\n', '  uint256 public startPreICO;\n', '  uint256 public endPreICO;  \n', '  uint256 public startICO;\n', '  uint256 public endICO;\n', '  //Hard cap\n', '  uint256 public sumHardCapPreICO;\n', '  uint256 public sumHardCapICO;\n', '  uint256 public sumPreICO;\n', '  uint256 public sumICO;\n', '  //Min Max Investment\n', '  uint256 public minInvestmentPreICO;\n', '  uint256 public minInvestmentICO;\n', '  uint256 public maxInvestmentICO;\n', '  //rate\n', '  uint256 public ratePreICO; \n', '  uint256 public rateICO;\n', '  //address where funds are collected\n', '  address public wallet;\n', '  //referral system\n', '  uint256 public maxRefererTokens;\n', '  uint256 public allRefererTokens;\n', '/**\n', '* event for token Procurement logging\n', '* @param contributor who Pledged for the tokens\n', '* @param beneficiary who got the tokens\n', '* @param value weis Contributed for Procurement\n', '* @param amount amount of tokens Procured\n', '*/\n', '  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  function Crowdsale() public {\n', '    token = createTokenContract();\n', '    //Hard cap\n', '    sumHardCapPreICO = 15000000 * 1 ether;\n', '    sumHardCapICO = 1000000 * 1 ether;\n', '    //referral system\n', '    maxRefererTokens = 2500000 * 1 ether;\n', '    //Min Max Investment\n', '    minInvestmentPreICO = 3 * 1 ether;\n', '    minInvestmentICO = 100000000000000000; //0.1 ether\n', '    maxInvestmentICO = 5 * 1 ether;\n', '    //rate;\n', '    ratePreICO = 1500;\n', '    rateICO = 1000;    \n', '    // address where funds are collected\n', '    wallet = 0x00a134aE23247c091Dd4A4dC1786358f26714ea3;\n', '  }\n', '\n', '  function setRatePreICO(uint256 _ratePreICO) public onlyOwner  {\n', '    ratePreICO = _ratePreICO;\n', '  } \n', '  \n', '  function setRateICO(uint256 _rateICO) public onlyOwner  {\n', '    rateICO = _rateICO;\n', '  }  \n', '  \n', '  function setStartPreICO(uint256 _startPreICO) public onlyOwner  {\n', '    //require(_startPreICO < endPreICO);  \n', '    startPreICO = _startPreICO;\n', '  }   \n', '\n', '  function setEndPreICO(uint256 _endPreICO) public onlyOwner  {\n', '    //require(_endPreICO > startPreICO);\n', '    //require(_endPreICO < startICO);\n', '    endPreICO = _endPreICO;\n', '  }\n', '\n', '  function setStartICO(uint256 _startICO) public onlyOwner  {\n', '    //require(_startICO > endPreICO); \n', '    //require(_startICO < endICO);  \n', '    startICO = _startICO;\n', '  }\n', '\n', '  function setEndICO(uint256 _endICO) public onlyOwner  {\n', '    //require(_endICO > startICO); \n', '    endICO = _endICO;\n', '  }\n', '  \n', '  // fallback function can be used to Procure tokens\n', '  function () external payable {\n', '    procureTokens(msg.sender);\n', '  }\n', '  \n', '  function createTokenContract() internal returns (BVA) {\n', '    return new BVA();\n', '  }\n', '  \n', '  function adjustHardCap(uint256 _value) internal {\n', '    //PreICO   \n', '    if (now >= startPreICO && now < endPreICO){\n', '      sumPreICO = sumPreICO.add(_value);\n', '    }  \n', '    //ICO   \n', '    if (now >= startICO && now < endICO){\n', '      sumICO = sumICO.add(_value);\n', '    }       \n', '  }  \n', '\n', '  function checkHardCap(uint256 _value) view public {\n', '    //PreICO   \n', '    if (now >= startPreICO && now < endPreICO){\n', '      require(_value.add(sumPreICO) <= sumHardCapPreICO);\n', '    }  \n', '    //ICO   \n', '    if (now >= startICO && now < endICO){\n', '      require(_value.add(sumICO) <= sumHardCapICO);\n', '    }       \n', '  } \n', '  \n', '  function checkMinMaxInvestment(uint256 _value) view public {\n', '    //PreICO   \n', '    if (now >= startPreICO && now < endPreICO){\n', '      require(_value >= minInvestmentPreICO);\n', '    }  \n', '    //ICO   \n', '    if (now >= startICO && now < endICO){\n', '      require(_value >= minInvestmentICO);\n', '      require(_value <= maxInvestmentICO);\n', '    }       \n', '  }\n', '  \n', '  function bytesToAddress(bytes source) internal pure returns(address) {\n', '    uint result;\n', '    uint mul = 1;\n', '    for(uint i = 20; i > 0; i--) {\n', '      result += uint8(source[i-1])*mul;\n', '      mul = mul*256;\n', '    }\n', '    return address(result);\n', '  }\n', '  \n', '  function procureTokens(address _beneficiary) public payable {\n', '    uint256 tokens;\n', '    uint256 weiAmount = msg.value;\n', '    address _this = this;\n', '    uint256 rate;\n', '    address referer;\n', '    uint256 refererTokens;\n', '    require(now >= startPreICO);\n', '    require(now <= endICO);\n', '    require(_beneficiary != address(0));\n', '    checkMinMaxInvestment(weiAmount);\n', '    rate = getRate();\n', '    tokens = weiAmount.mul(rate);\n', '    //referral system\n', '\tif(msg.data.length == 20) {\n', '      referer = bytesToAddress(bytes(msg.data));\n', '      require(referer != msg.sender);\n', '\t  //add tokens to the referrer\n', '      refererTokens = tokens.mul(5).div(100);\n', '    }\n', '    checkHardCap(tokens.add(refererTokens));\n', '    adjustHardCap(tokens.add(refererTokens));\n', '    wallet.transfer(_this.balance);\n', '\tif (refererTokens != 0 && allRefererTokens.add(refererTokens) <= maxRefererTokens){\n', '\t  allRefererTokens = allRefererTokens.add(refererTokens);\n', '      token.mint(referer, refererTokens);\t  \n', '\t}    \n', '    token.mint(_beneficiary, tokens);\n', '    emit TokenProcurement(msg.sender, _beneficiary, weiAmount, tokens);\n', '  }\n', '  \n', '  function getRate() public view returns (uint256) {\n', '    uint256 rate;\n', '    //PreICO   \n', '    if (now >= startPreICO && now < endPreICO){\n', '      rate = ratePreICO;\n', '    }  \n', '    //ICO   \n', '    if (now >= startICO && now < endICO){\n', '      rate = rateICO;\n', '    }      \n', '    return rate;\n', '  }  \n', '}']
