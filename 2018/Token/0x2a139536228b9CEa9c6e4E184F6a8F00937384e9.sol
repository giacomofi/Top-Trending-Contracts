['pragma solidity ^0.4.24;\n', '\n', 'contract INotInitedOwnable {\n', '    \n', '    function init() public;\n', '    \n', '    function transferOwnership(address newOwner) public;\n', '}\n', '\n', 'contract IOwnableUpgradeableImplementation is INotInitedOwnable {\n', '    \n', '    function transferOwnership(address newOwner) public;\n', '    \n', '    function getOwner() constant public returns(address);\n', '    \n', '    function upgradeImplementation(address _newImpl) public;\n', '    \n', '    function getImplementation() constant public returns(address);\n', '}\n', '\n', 'contract IHookOperator is IOwnableUpgradeableImplementation {\n', '\n', '    event LogSetBalancePercentageLimit(uint256 limit);\n', '    event LogSetOverBalanceLimitHolder(address holderAddress, bool isHolder);\n', '    event LogSetUserManager(address userManagerAddress);\n', '    event LogSetICOToken(address icoTokenAddress);\n', '\n', '    event LogOnTransfer(address from, address to, uint tokens);\n', '    event LogOnMint(address to, uint256 amount);\n', '    event LogOnBurn(uint amount);\n', '    event LogOnTaxTransfer(address indexed taxableUser, uint tokensAmount);\n', '\n', '    event LogSetKYCVerificationContract(address _kycVerificationContractAddress);\n', '    event LogUpdateUserRatio(uint256 generationRatio, address indexed userContractAddress);\n', '\n', '    /**\n', '        Setters\n', '    */\n', '    function setBalancePercentageLimit(uint256 limit) public;\n', '    function getBalancePercentageLimit() public view returns(uint256);\n', '    \n', '    function setOverBalanceLimitHolder(address holderAddress, bool isHolder) public;\n', '\n', '    function setUserManager(address userManagerAddress) public;\n', '    function getUserManager() public view returns(address userManagerAddress);\n', '   \n', '    function setICOToken(address icoTokenAddress) public;\n', '    function getICOToken() public view returns(address icoTokenAddress);\n', '\n', '    /**\n', '        Main Functions\n', '    */\n', '    function onTransfer(address from, address to, uint256 tokensAmount) public;\n', '\n', '    function onMint(address to, uint256 tokensAmount) public;\n', '\n', '    function onBurn(uint256 amount) public;\n', '\n', '    function onTaxTransfer(address taxableUser, uint256 tokensAmount) public;\n', '\n', '    /**\n', '        KYC Verification\n', '    */\n', '    function kycVerification(address from, address to, uint256 tokensAmount) public;\n', '\n', '    function setKYCVerificationContract(address _kycVerificationContractAddress) public;\n', '\n', '    function getKYCVerificationContractAddress() public view returns(address _kycVerificationContractAddress);\n', '    \n', '    /**\n', '        Helper functions\n', '    */\n', '    function updateUserRatio(uint256 generationRatio, address userContractAddress) public;\n', '\n', '    function isOverBalanceLimitHolder(address holderAddress) public view returns(bool);\n', '\n', '    function isInBalanceLimit(address userAddress, uint256 tokensAmount) public view returns(bool);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ExchangeOracle is Ownable, Pausable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    bool public isIrisOracle = true;\n', '\n', '    uint public rate = 0;\n', '    uint public minWeiAmount = 1000; \n', '\n', '    event LogRateChanged(uint oldRate, uint newRate, address changer);\n', '    event LogMinWeiAmountChanged(uint oldMinWeiAmount, uint newMinWeiAmount, address changer);\n', '\n', '    constructor(uint initialRate) public {\n', '        require(initialRate > 0);\n', '        rate = initialRate;\n', '    }\n', '\n', '    function rate() external view whenNotPaused returns(uint) {\n', '        return rate;\n', '    }\n', '\n', '    /*\n', '        The new rate has to be passed in format:\n', '            100 rate = 100 000 passed rate ( 1 ether = 100 tokens )\n', '            1 rate = 1 000 passed rate ( 1 ether = 1 token )\n', '            0.01 rate = 10 passed rate ( 100 ethers = 1 token )\n', '    **/\n', '    function setRate(uint newRate) external onlyOwner whenNotPaused returns(bool) {\n', '        require(newRate > 0);\n', '        \n', '        uint oldRate = rate;\n', '        rate = newRate;\n', '\n', '        emit LogRateChanged(oldRate, newRate, msg.sender);\n', '\n', '        return true;\n', '    }\n', '\n', '    /*\n', '        By default minWeiAmount = 1000\n', '        With min wei amount we can set the rate to be a float number\n', '\n', '        We use it as a multiplier because we can not pass float numbers in ethereum\n', '        If the token price becomes bigger than ether one, for example -> 1 token = 10 ethers\n', '        We will pass 100 as rate and this will be relevant to 0.1 token = 1 ether\n', '    **/\n', '    function setMinWeiAmount(uint newMinWeiAmount) external onlyOwner whenNotPaused returns(bool) {\n', '        require(newMinWeiAmount > 0);\n', '        require(newMinWeiAmount % 10 == 0); \n', '\n', '        uint oldMinWeiAmount = minWeiAmount;\n', '        minWeiAmount = newMinWeiAmount;\n', '\n', '        emit LogMinWeiAmountChanged(oldMinWeiAmount, minWeiAmount, msg.sender);\n', '\n', '        return true;\n', '    }\n', '\n', '    function convertTokensAmountInWeiAtRate(uint tokensAmount, uint convertRate) external whenNotPaused view returns(uint) {\n', '\n', '        uint weiAmount = tokensAmount.mul(minWeiAmount);\n', '        weiAmount = weiAmount.div(convertRate);\n', '\n', '        if ((tokensAmount % convertRate) != 0) {\n', '            weiAmount++;\n', '        } \n', '\n', '        return weiAmount;\n', '    }\n', '\n', '    function calcWeiForTokensAmount(uint tokensAmount) external view whenNotPaused returns(uint) {\n', '        \n', '        uint weiAmount = tokensAmount.mul(minWeiAmount);\n', '        weiAmount = weiAmount.div(rate);\n', '\n', '        if ((tokensAmount % rate) != 0) {\n', '            weiAmount++;\n', '        } \n', '\n', '        return weiAmount;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract ICOToken is BurnableToken, MintableToken, PausableToken {\n', '\n', '    string public constant name = "AIUR Token";\n', '    string public constant symbol = "AIUR";\n', '    uint8 public constant decimals = 18;\n', '}\n', '\n', 'contract ICOTokenExtended is ICOToken {\n', '\n', '    address public refunder;\n', '\n', '    IHookOperator public hookOperator;\n', '    ExchangeOracle public aiurExchangeOracle;\n', '\n', '    mapping(address => bool) public minters;\n', '\n', '    uint256 public constant MIN_REFUND_RATE_DELIMITER = 2; // Refund rate has to be minimum 50% of the AIUR ExchangeOracle rate\n', '\n', '    event LogRefunderSet(address refunderAddress);\n', '    event LogTransferOverFunds(address from, address to, uint ethersAmount, uint tokensAmount);\n', '    event LogTaxTransfer(address from, address to, uint amount);\n', '    event LogMinterAdd(address addedMinter);\n', '    event LogMinterRemove(address removedMinter);\n', '\n', '    modifier onlyMinter(){\n', '        require(minters[msg.sender]);\n', '        \n', '        _;\n', '    }\n', '\n', '    modifier onlyCurrentHookOperator() {\n', '        require(msg.sender == address(hookOperator));\n', '\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address inputAddress) {\n', '        require(inputAddress != address(0));\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyRefunder() {\n', '        require(msg.sender == refunder);\n', '\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        minters[msg.sender] = true;\n', '    }\n', '\n', '    function setRefunder(address refunderAddress) external onlyOwner nonZeroAddress(refunderAddress) {\n', '        refunder = refunderAddress;\n', '\n', '        emit LogRefunderSet(refunderAddress);\n', '    }\n', '\n', '    // Set the exchange oracle after crowdsale \n', '    function setExchangeOracle(address exchangeOracleAddress) external onlyOwner nonZeroAddress(exchangeOracleAddress) {\n', '        aiurExchangeOracle = ExchangeOracle(exchangeOracleAddress);\n', '    }\n', '\n', '    function setHookOperator(address hookOperatorAddress) external onlyOwner nonZeroAddress(hookOperatorAddress) {\n', '        hookOperator = IHookOperator(hookOperatorAddress);\n', '    }\n', '\n', '    function addMinter(address minterAddress) external onlyOwner nonZeroAddress(minterAddress) {\n', '        minters[minterAddress] = true;    \n', '\n', '        emit LogMinterAdd(minterAddress);\n', '    }\n', '\n', '    function removeMinter(address minterAddress) external onlyOwner nonZeroAddress(minterAddress) {\n', '        minters[minterAddress] = false;    \n', '\n', '        emit LogMinterRemove(minterAddress);\n', '    }\n', '\n', '    function mint(address to, uint256 tokensAmount) public onlyMinter canMint nonZeroAddress(to) returns(bool) {\n', '        hookOperator.onMint(to, tokensAmount);\n', '\n', '        totalSupply = totalSupply.add(tokensAmount);\n', '        balances[to] = balances[to].add(tokensAmount);\n', '\n', '        emit Mint(to, tokensAmount);\n', '        emit Transfer(address(0), to, tokensAmount);\n', '        return true;\n', '    } \n', '\n', '    function burn(uint tokensAmount) public {\n', '        hookOperator.onBurn(tokensAmount);       \n', '\n', '        super.burn(tokensAmount);  \n', '    } \n', '\n', '    function transfer(address to, uint tokensAmount) public nonZeroAddress(to) returns(bool) {\n', '        hookOperator.onTransfer(msg.sender, to, tokensAmount);\n', '\n', '        return super.transfer(to, tokensAmount);\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokensAmount) public nonZeroAddress(from) nonZeroAddress(to) returns(bool) {\n', '        hookOperator.onTransfer(from, to, tokensAmount);\n', '        \n', '        return super.transferFrom(from, to, tokensAmount);\n', '    }\n', '\n', '    /*\n', '        This function is used for taxation purposes and will be used after pre-defined requirement are met\n', '    */\n', '    function taxTransfer(address from, address to, uint tokensAmount) external onlyCurrentHookOperator nonZeroAddress(from) nonZeroAddress(to) returns(bool) {  \n', '        require(balances[from] >= tokensAmount);\n', '\n', '        transferDirectly(from, to, tokensAmount);\n', '\n', '        hookOperator.onTaxTransfer(from, tokensAmount);\n', '        emit LogTaxTransfer(from, to, tokensAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferOverBalanceFunds(address from, address to, uint rate) external payable onlyRefunder nonZeroAddress(from) nonZeroAddress(to) returns(bool) {\n', '        require(!hookOperator.isOverBalanceLimitHolder(from));\n', '\n', '        uint256 oracleRate = aiurExchangeOracle.rate();\n', '        require(rate <= oracleRate.add(oracleRate.div(MIN_REFUND_RATE_DELIMITER)));\n', '\n', '        uint256 fromBalance = balanceOf(from);\n', '        \n', '        // Calculate percentage limit in tokens\n', '        uint256 maxTokensBalance = totalSupply.mul(hookOperator.getBalancePercentageLimit()).div(100);\n', '\n', '        require(fromBalance > maxTokensBalance);\n', '\n', '        uint256 tokensToTake = fromBalance.sub(maxTokensBalance);\n', '        uint256 weiToRefund = aiurExchangeOracle.convertTokensAmountInWeiAtRate(tokensToTake, rate);\n', '\n', '        require(hookOperator.isInBalanceLimit(to, tokensToTake));\n', '        require(msg.value == weiToRefund);\n', '\n', '        transferDirectly(from, to, tokensToTake);\n', '        from.transfer(msg.value);\n', '\n', '        emit LogTransferOverFunds(from, to, weiToRefund, tokensToTake);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferDirectly(address from, address to, uint tokensAmount) private {\n', '        balances[from] = balances[from].sub(tokensAmount);\n', '        balances[to] = balances[to].add(tokensAmount);\n', '    }\n', '}']