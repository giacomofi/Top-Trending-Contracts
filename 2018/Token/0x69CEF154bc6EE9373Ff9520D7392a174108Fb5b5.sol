['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Invalid owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Zero address");\n', '        emit OwnershipTransferred(owner, newOwner);  \n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract EyeToken is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Frozen {\n', '        bool frozen;\n', '        uint until;\n', '    }\n', '\n', '    string public name = "EYE Token";\n', '    string public symbol = "EYE";\n', '    uint8 public decimals = 18;\n', '\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    mapping(address => Frozen) public frozenAccounts;\n', '    uint256 internal totalSupplyTokens;\n', '    bool internal isICO;\n', '    address public wallet;\n', '\n', '    function EyeToken() public Ownable() {\n', '        wallet = msg.sender;\n', '        isICO = true;\n', '        totalSupplyTokens = 10000000000 * 10 ** uint256(decimals);\n', '        balances[wallet] = totalSupplyTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize ICO\n', '     */\n', '    function finalizeICO() public onlyOwner {\n', '        isICO = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupplyTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Freeze account, make transfers from this account unavailable\n', '     * @param _account Given account\n', '     */\n', '    function freeze(address _account) public onlyOwner {\n', '        freeze(_account, 0);\n', '    }\n', '\n', '    /**\n', '     * @dev  Temporary freeze account, make transfers from this account unavailable for a time\n', '     * @param _account Given account\n', '     * @param _until Time until\n', '     */\n', '    function freeze(address _account, uint _until) public onlyOwner {\n', '        if (_until == 0 || (_until != 0 && _until > now)) {\n', '            frozenAccounts[_account] = Frozen(true, _until);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Unfreeze account, make transfers from this account available\n', '     * @param _account Given account\n', '     */\n', '    function unfreeze(address _account) public onlyOwner {\n', '        if (frozenAccounts[_account].frozen) {\n', '            delete frozenAccounts[_account];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allow transfer tokens or not\n', '     * @param _from The address to transfer from.\n', '     */\n', '    modifier allowTransfer(address _from) {\n', '        require(!isICO, "ICO phase");\n', '        if (frozenAccounts[_from].frozen) {\n', '            require(frozenAccounts[_from].until != 0 && frozenAccounts[_from].until < now, "Frozen account");\n', '            delete frozenAccounts[_from];\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer tokens for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        bool result = _transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value); \n', '        return result;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer tokens for a specified address in ICO mode\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferICO(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '        require(isICO, "Not ICO phase");\n', '        require(_to != address(0), "Zero address \'To\'");\n', '        require(_value <= balances[wallet], "Not enought balance");\n', '        balances[wallet] = balances[wallet].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(wallet, _to, _value);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public allowTransfer(_from) returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender], "Not enought allowance");\n', '        bool result = _transfer(_from, _to, _value);\n', '        if (result) {\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            emit Transfer(_from, _to, _value);  \n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);  \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _from The address to transfer from.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal allowTransfer(_from) returns (bool) {\n', '        require(_to != address(0), "Zero address \'To\'");\n', '        require(_from != address(0), "Zero address \'From\'");\n', '        require(_value <= balances[_from], "Not enought balance");\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        return true;\n', '    }\n', '}']