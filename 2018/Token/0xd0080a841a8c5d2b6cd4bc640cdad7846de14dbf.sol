['/**\n', 'This is the source of a special time-locked token for the FTV Coin Deluxe.\n', 'If you hold a balance of the token and you wan to convert it to the FTV token, wait until the lockup period is over\n', ' and then transfer any amount to yourself.\n', ' it will convert the token to the real FTV Token at 0xf91254fe7e6e9f5986a0b41da45a8a2549f1871b\n', '**/\n', 'pragma solidity ^0.4.11;\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract FtvTimelockFactory is BasicToken {\n', '\n', '    ERC20 public token;\n', '    address public tokenAssignmentControl;\n', '\n', '    constructor (ERC20 _token, address _tokenAssignmentControl) {\n', '        token = _token;\n', '        tokenAssignmentControl = _tokenAssignmentControl;\n', '    }\n', '    string public constant name = "Your Timelocked FTV Deluxe Tokens";\n', '\n', '    string public constant symbol = "TLFTV";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping(address => uint256) public releaseTimes;\n', '\n', '\n', '    function assignBalance(address _holder, uint256 _releaseTime, uint256 _amount) public {\n', '        require(_amount > 0);\n', '        require(msg.sender == tokenAssignmentControl);\n', '        //only allowed if not already assigned\n', '        require(releaseTimes[_holder] == 0);\n', '        totalSupply += _amount;\n', '        require(totalSupply <= token.balanceOf(this));\n', '        releaseTimes[_holder] = _releaseTime;\n', '        balances[_holder] = balances[_holder].add(_amount);\n', '        emit Transfer(0x0, _holder, _amount);\n', '    }\n', '\n', '    function transfer(address _holder, uint256) public returns (bool) {\n', '        //this transfer function ignores value, it will just trigger release\n', '        require(_holder == msg.sender, "you can only send to self to unlock the tokens to the real FTV coin");\n', '        release(msg.sender);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * @notice Transfers tokens held by timelock to beneficiary. can be called any time after releaseTime\n', '        */\n', '    function release(address _holder) public {\n', '        require(releaseTimes[_holder] < now, "release time is not met yet");\n', '        uint256 amount = balanceOf(_holder);\n', '        totalSupply -= amount;\n', '        token.transfer(_holder, amount);\n', '        emit Transfer(_holder, 0x0, amount);\n', '    }\n', '\n', '}']
['/**\n', 'This is the source of a special time-locked token for the FTV Coin Deluxe.\n', 'If you hold a balance of the token and you wan to convert it to the FTV token, wait until the lockup period is over\n', ' and then transfer any amount to yourself.\n', ' it will convert the token to the real FTV Token at 0xf91254fe7e6e9f5986a0b41da45a8a2549f1871b\n', '**/\n', 'pragma solidity ^0.4.11;\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract FtvTimelockFactory is BasicToken {\n', '\n', '    ERC20 public token;\n', '    address public tokenAssignmentControl;\n', '\n', '    constructor (ERC20 _token, address _tokenAssignmentControl) {\n', '        token = _token;\n', '        tokenAssignmentControl = _tokenAssignmentControl;\n', '    }\n', '    string public constant name = "Your Timelocked FTV Deluxe Tokens";\n', '\n', '    string public constant symbol = "TLFTV";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping(address => uint256) public releaseTimes;\n', '\n', '\n', '    function assignBalance(address _holder, uint256 _releaseTime, uint256 _amount) public {\n', '        require(_amount > 0);\n', '        require(msg.sender == tokenAssignmentControl);\n', '        //only allowed if not already assigned\n', '        require(releaseTimes[_holder] == 0);\n', '        totalSupply += _amount;\n', '        require(totalSupply <= token.balanceOf(this));\n', '        releaseTimes[_holder] = _releaseTime;\n', '        balances[_holder] = balances[_holder].add(_amount);\n', '        emit Transfer(0x0, _holder, _amount);\n', '    }\n', '\n', '    function transfer(address _holder, uint256) public returns (bool) {\n', '        //this transfer function ignores value, it will just trigger release\n', '        require(_holder == msg.sender, "you can only send to self to unlock the tokens to the real FTV coin");\n', '        release(msg.sender);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * @notice Transfers tokens held by timelock to beneficiary. can be called any time after releaseTime\n', '        */\n', '    function release(address _holder) public {\n', '        require(releaseTimes[_holder] < now, "release time is not met yet");\n', '        uint256 amount = balanceOf(_holder);\n', '        totalSupply -= amount;\n', '        token.transfer(_holder, amount);\n', '        emit Transfer(_holder, 0x0, amount);\n', '    }\n', '\n', '}']
