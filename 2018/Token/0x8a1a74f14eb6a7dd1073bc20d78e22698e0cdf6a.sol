['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) { return 0; }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '    \n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '    \n', '    bool public paused = false;\n', '    \n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '    \n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '    \n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '    \n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    \n', '    function transfer(\n', '        address to, \n', '        uint256 value\n', '    ) \n', '        public \n', '        returns (bool);\n', '    \n', '    event Transfer(\n', '        address indexed from, \n', '        address indexed to, \n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) \n', '        public view returns (uint256);\n', '        \n', '    function transferFrom(address from, address to, uint256 value) \n', '        public returns (bool);\n', '        \n', '    function approve(address spender, uint256 value) \n', '        public returns (bool);\n', '        \n', '    event Approval(\n', '        address indexed owner, \n', '        address indexed spender, \n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', 'contract TokenRecipient {\n', '    function receiveApproval(\n', '        address from, \n', '        uint256 tokens, \n', '        address token, \n', '        bytes data\n', '    )\n', '        public;\n', '}\n', '\n', '\n', 'contract CLIXToken is ERC20, Ownable, Pausable {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public whitelist;\n', '    mapping (address => bool) public blacklisted;\n', '    mapping (address => bool) public hasReceived;\n', '\n', '    string public name = "CLIXToken";\n', '    string public symbol = "CLIX";\n', '    \n', '    uint public decimals = 18;\n', '    uint256 private totalSupply_ = 200000000e18;\n', '    uint256 private totalReserved = (totalSupply_.div(100)).mul(10);\n', '    uint256 private totalBounties = (totalSupply_.div(100)).mul(5);\n', '    uint256 public totalDistributed = totalReserved.add(totalBounties);\n', '    uint256 public totalRemaining = totalSupply_.sub(totalDistributed);\n', '    uint256 public tokenRate;\n', '    \n', '    bool public distributionFinished;\n', '\n', '    event Transfer(\n', '        address indexed _from, \n', '        address indexed _to, \n', '        uint256 _value\n', '    );\n', '    \n', '    event Approval(\n', '        address indexed _owner, \n', '        address indexed _spender, \n', '        uint256 _value\n', '    );\n', '    \n', '    event Distribution(\n', '        address indexed to, \n', '        uint256 amount\n', '    );\n', '    \n', '    modifier distributionAllowed() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyWhitelist() {\n', '        require(whitelist[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    modifier notBlacklisted() {\n', '        require(!blacklisted[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    // mitigates the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '    \n', '    constructor(uint256 _tokenRate) public {\n', '        tokenRate = _tokenRate;\n', '        balances[msg.sender] = totalDistributed;\n', '    }\n', '    \n', '    function() external payable { getClixToken(); }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '\t    return balances[_owner];\n', '    }\n', '    \n', '    function setTokenRate(uint256 _tokenRate) public onlyOwner {\n', '        tokenRate = _tokenRate;\n', '    }\n', '    \n', '    function enableWhitelist(address[] addresses) public onlyOwner {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            whitelist[addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function disableWhitelist(address[] addresses) public onlyOwner {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            whitelist[addresses[i]] = false;\n', '        }\n', '    }\n', '    \n', '    function enableBlacklist(address[] addresses) public onlyOwner {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklisted[addresses[i]] = true;\n', '        }\n', '    }\n', '    \n', '    function disableBlacklist(address[] addresses) public onlyOwner {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklisted[addresses[i]] = false;\n', '        }\n', '    }\n', '    \n', '    function distributeToken(\n', '        address _to, \n', '        uint256 _amount\n', '    ) \n', '        private \n', '        distributionAllowed \n', '        whenNotPaused \n', '        returns (bool)\n', '    {\n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Distribution(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '        \n', '        if (totalDistributed >= totalSupply_) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function getClixToken() \n', '        public \n', '        payable \n', '        distributionAllowed \n', '        onlyWhitelist \n', '        whenNotPaused \n', '    {\n', '        require(tokenRate <= totalRemaining);\n', '        \n', '        /* Buyer has previously received their free tokens so this time we \n', '        calculate how many tokens to send based on the amount of eth sent to the \n', '        contract */\n', '        if (hasReceived[msg.sender]) {\n', '            uint256 ethInWei = msg.value;\n', '            uint256 weiNumber = 1000000000000000000;\n', '            uint256 divider = weiNumber.div(tokenRate.div(weiNumber));\n', '            uint256 tokenReceived = (ethInWei.div(divider)).mul(weiNumber);\n', '            distributeToken(msg.sender, tokenReceived);\n', '        } else {\n', '            // First time buyer gets free tokens (tokenRate)\n', '            distributeToken(msg.sender, tokenRate);\n', '        }\n', '\n', '        if (!hasReceived[msg.sender] && tokenRate > 0) {\n', '            hasReceived[msg.sender] = true;\n', '        }\n', '\n', '        if (totalDistributed >= totalSupply_) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function transfer(\n', '        address _to, \n', '        uint256 _amount\n', '    ) \n', '        public \n', '        onlyPayloadSize(2 * 32) \n', '        whenNotPaused \n', '        notBlacklisted \n', '        returns (bool success) \n', '    {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(\n', '        address _from, \n', '        address _to, \n', '        uint256 _amount\n', '    )\n', '        public \n', '        onlyPayloadSize(3 * 32) \n', '        whenNotPaused \n', '        notBlacklisted \n', '        returns (bool success) \n', '    {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(\n', '        address _spender, \n', '        uint256 _value\n', '    ) \n', '        public \n', '        whenNotPaused \n', '        returns (bool success) \n', '    {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) \n', '        public \n', '        view \n', '        whenNotPaused \n', '        returns (uint256) \n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function withdraw() public onlyOwner {\n', '        uint256 etherBalance = address(this).balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '    \n', '    function withdrawTokens(\n', '        address tokenAddress, \n', '        uint256 tokens\n', '    ) \n', '        public\n', '        onlyOwner \n', '        returns (bool success)\n', '    {\n', '        return ERC20Basic(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    function approveAndCall(\n', '        address _spender, \n', '        uint256 _value, \n', '        bytes _extraData\n', '    ) \n', '        public \n', '        whenNotPaused \n', '    {\n', '        approve(_spender, _value);\n', '        TokenRecipient(_spender).receiveApproval(\n', '            msg.sender, \n', '            _value, \n', '            address(this), \n', '            _extraData\n', '        );\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) { return 0; }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '    \n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '    \n', '    bool public paused = false;\n', '    \n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '    \n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '    \n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '    \n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    \n', '    function transfer(\n', '        address to, \n', '        uint256 value\n', '    ) \n', '        public \n', '        returns (bool);\n', '    \n', '    event Transfer(\n', '        address indexed from, \n', '        address indexed to, \n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) \n', '        public view returns (uint256);\n', '        \n', '    function transferFrom(address from, address to, uint256 value) \n', '        public returns (bool);\n', '        \n', '    function approve(address spender, uint256 value) \n', '        public returns (bool);\n', '        \n', '    event Approval(\n', '        address indexed owner, \n', '        address indexed spender, \n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', 'contract TokenRecipient {\n', '    function receiveApproval(\n', '        address from, \n', '        uint256 tokens, \n', '        address token, \n', '        bytes data\n', '    )\n', '        public;\n', '}\n', '\n', '\n', 'contract CLIXToken is ERC20, Ownable, Pausable {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public whitelist;\n', '    mapping (address => bool) public blacklisted;\n', '    mapping (address => bool) public hasReceived;\n', '\n', '    string public name = "CLIXToken";\n', '    string public symbol = "CLIX";\n', '    \n', '    uint public decimals = 18;\n', '    uint256 private totalSupply_ = 200000000e18;\n', '    uint256 private totalReserved = (totalSupply_.div(100)).mul(10);\n', '    uint256 private totalBounties = (totalSupply_.div(100)).mul(5);\n', '    uint256 public totalDistributed = totalReserved.add(totalBounties);\n', '    uint256 public totalRemaining = totalSupply_.sub(totalDistributed);\n', '    uint256 public tokenRate;\n', '    \n', '    bool public distributionFinished;\n', '\n', '    event Transfer(\n', '        address indexed _from, \n', '        address indexed _to, \n', '        uint256 _value\n', '    );\n', '    \n', '    event Approval(\n', '        address indexed _owner, \n', '        address indexed _spender, \n', '        uint256 _value\n', '    );\n', '    \n', '    event Distribution(\n', '        address indexed to, \n', '        uint256 amount\n', '    );\n', '    \n', '    modifier distributionAllowed() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyWhitelist() {\n', '        require(whitelist[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    modifier notBlacklisted() {\n', '        require(!blacklisted[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    // mitigates the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '    \n', '    constructor(uint256 _tokenRate) public {\n', '        tokenRate = _tokenRate;\n', '        balances[msg.sender] = totalDistributed;\n', '    }\n', '    \n', '    function() external payable { getClixToken(); }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '\t    return balances[_owner];\n', '    }\n', '    \n', '    function setTokenRate(uint256 _tokenRate) public onlyOwner {\n', '        tokenRate = _tokenRate;\n', '    }\n', '    \n', '    function enableWhitelist(address[] addresses) public onlyOwner {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            whitelist[addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function disableWhitelist(address[] addresses) public onlyOwner {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            whitelist[addresses[i]] = false;\n', '        }\n', '    }\n', '    \n', '    function enableBlacklist(address[] addresses) public onlyOwner {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklisted[addresses[i]] = true;\n', '        }\n', '    }\n', '    \n', '    function disableBlacklist(address[] addresses) public onlyOwner {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklisted[addresses[i]] = false;\n', '        }\n', '    }\n', '    \n', '    function distributeToken(\n', '        address _to, \n', '        uint256 _amount\n', '    ) \n', '        private \n', '        distributionAllowed \n', '        whenNotPaused \n', '        returns (bool)\n', '    {\n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Distribution(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '        \n', '        if (totalDistributed >= totalSupply_) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function getClixToken() \n', '        public \n', '        payable \n', '        distributionAllowed \n', '        onlyWhitelist \n', '        whenNotPaused \n', '    {\n', '        require(tokenRate <= totalRemaining);\n', '        \n', '        /* Buyer has previously received their free tokens so this time we \n', '        calculate how many tokens to send based on the amount of eth sent to the \n', '        contract */\n', '        if (hasReceived[msg.sender]) {\n', '            uint256 ethInWei = msg.value;\n', '            uint256 weiNumber = 1000000000000000000;\n', '            uint256 divider = weiNumber.div(tokenRate.div(weiNumber));\n', '            uint256 tokenReceived = (ethInWei.div(divider)).mul(weiNumber);\n', '            distributeToken(msg.sender, tokenReceived);\n', '        } else {\n', '            // First time buyer gets free tokens (tokenRate)\n', '            distributeToken(msg.sender, tokenRate);\n', '        }\n', '\n', '        if (!hasReceived[msg.sender] && tokenRate > 0) {\n', '            hasReceived[msg.sender] = true;\n', '        }\n', '\n', '        if (totalDistributed >= totalSupply_) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function transfer(\n', '        address _to, \n', '        uint256 _amount\n', '    ) \n', '        public \n', '        onlyPayloadSize(2 * 32) \n', '        whenNotPaused \n', '        notBlacklisted \n', '        returns (bool success) \n', '    {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(\n', '        address _from, \n', '        address _to, \n', '        uint256 _amount\n', '    )\n', '        public \n', '        onlyPayloadSize(3 * 32) \n', '        whenNotPaused \n', '        notBlacklisted \n', '        returns (bool success) \n', '    {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(\n', '        address _spender, \n', '        uint256 _value\n', '    ) \n', '        public \n', '        whenNotPaused \n', '        returns (bool success) \n', '    {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) \n', '        public \n', '        view \n', '        whenNotPaused \n', '        returns (uint256) \n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function withdraw() public onlyOwner {\n', '        uint256 etherBalance = address(this).balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '    \n', '    function withdrawTokens(\n', '        address tokenAddress, \n', '        uint256 tokens\n', '    ) \n', '        public\n', '        onlyOwner \n', '        returns (bool success)\n', '    {\n', '        return ERC20Basic(tokenAddress).transfer(owner, tokens);\n', '    }\n', '    \n', '    function approveAndCall(\n', '        address _spender, \n', '        uint256 _value, \n', '        bytes _extraData\n', '    ) \n', '        public \n', '        whenNotPaused \n', '    {\n', '        approve(_spender, _value);\n', '        TokenRecipient(_spender).receiveApproval(\n', '            msg.sender, \n', '            _value, \n', '            address(this), \n', '            _extraData\n', '        );\n', '    }\n', '\n', '}']
