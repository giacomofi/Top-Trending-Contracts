['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath\n', '{\n', '    function mul(uint256 a, uint256 b) internal pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure\n', '        returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title OwnableToken\n', ' * @dev The OwnableToken contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract OwnableToken\n', '{\n', '    address owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The OwnableToken constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function OwnableToken() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface tokenRecipient\n', '{\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev eip20 token implementation\n', ' */\n', 'contract ERC20 is OwnableToken\n', '{\n', '    using SafeMath for uint;\n', '\n', '    uint256 constant MAX_UINT256 = 2**256 - 1;\n', '\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals = 8;\n', '    uint256 DEC = 10 ** uint256(decimals);\n', '    uint256 public totalSupply;\n', '    uint256 public price = 0 wei;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function ERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public\n', '    {\n', '        totalSupply = initialSupply.mul(DEC);  // Update total supply with the decimal amount\n', '        balances[msg.sender] = totalSupply;         // Give the creator all initial tokens\n', '        name = tokenName;                      // Set the name for display purposes\n', '        symbol = tokenSymbol;                  // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     *\n', '     * @param _from - address of the contract\n', '     * @param _to - address of the investor\n', '     * @param _value - tokens for the investor\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal\n', '    {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balances[_from] >= _value);\n', '        // Check for overflows\n', '        require(balances[_to].add(_value) > balances[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balances[_from].add(balances[_to]);\n', '        // Subtract from the sender\n', '        balances[_from] = balances[_from].sub(_value);\n', '        // Add the same to the recipient\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[_from].add(balances[_to]) == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public\n', '    {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Balance show\n', '     *\n', '     * @param _holder current holder balance\n', '     */\n', '    function balanceOf(address _holder) view public\n', '        returns (uint256 balance)\n', '    {\n', '        return balances[_holder];\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '        returns (bool success)\n', '    {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '\n', '        if (allowance[_from][msg.sender] < MAX_UINT256) {\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        }\n', '\n', '        _transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success)\n', '    {\n', '        allowance[msg.sender][_spender] = _value;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public onlyOwner\n', '        returns (bool success)\n', '    {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) public\n', '        returns (bool success)\n', '    {\n', '        allowance[msg.sender][_spender] = allowance[msg.sender][_spender].add(_addedValue);\n', '\n', '        Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public\n', '        returns (bool success)\n', '    {\n', '        uint oldValue = allowance[msg.sender][_spender];\n', '\n', '        if (_subtractedValue > oldValue) {\n', '            allowance[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowance[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public onlyOwner\n', '        returns (bool success)\n', '    {\n', '        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);  // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '\n', '        Burn(msg.sender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public onlyOwner\n', '        returns (bool success)\n', '    {\n', '        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '\n', '        balances[_from] = balances[_from].sub(_value);    // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);    // Subtract from the sender's allowance\n", '        totalSupply = totalSupply.sub(_value);              // Update totalSupply\n', '\n', '        Burn(_from, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PausebleToken is ERC20\n', '{\n', '    event EPause(address indexed owner, string indexed text);\n', '    event EUnpause(address indexed owner, string indexed text);\n', '\n', '    bool public paused = true;\n', '\n', '    modifier isPaused()\n', '    {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyOwner\n', '    {\n', '        paused = true;\n', "        EPause(owner, 'sale is paused');\n", '    }\n', '\n', '    function pauseInternal() internal\n', '    {\n', '        paused = true;\n', "        EPause(owner, 'sale is paused');\n", '    }\n', '\n', '    function unpause() public onlyOwner\n', '    {\n', '        paused = false;\n', "        EUnpause(owner, 'sale is unpaused');\n", '    }\n', '\n', '    function unpauseInternal() internal\n', '    {\n', '        paused = false;\n', "        EUnpause(owner, 'sale is unpaused');\n", '    }\n', '}\n', '\n', 'contract ERC20Extending is ERC20\n', '{\n', '    using SafeMath for uint;\n', '\n', '    /**\n', '    * Function for transfer ethereum from contract to any address\n', '    *\n', '    * @param _to - address of the recipient\n', '    * @param amount - ethereum\n', '    */\n', '    function transferEthFromContract(address _to, uint256 amount) public onlyOwner\n', '    {\n', '        _to.transfer(amount);\n', '    }\n', '\n', '    /**\n', '    * Function for transfer tokens from contract to any address\n', '    *\n', '    */\n', '    function transferTokensFromContract(address _to, uint256 _value) public onlyOwner\n', '    {\n', '        _transfer(this, _to, _value);\n', '    }\n', '}\n', '\n', 'contract CrowdsaleContract is PausebleToken\n', '{\n', '    using SafeMath for uint;\n', '\n', '    uint256 public receivedEther;  // how many weis was raised on crowdsale\n', '\n', '    event CrowdSaleFinished(address indexed owner, string indexed text);\n', '\n', '    struct sale {\n', '        uint256 tokens;   // Tokens in crowdsale\n', '        uint startDate;   // Date when crowsale will be starting, after its starting that property will be the 0\n', '        uint endDate;     // Date when crowdsale will be stop\n', '    }\n', '\n', '    sale public Sales;\n', '\n', '    uint8 public discount;  // Discount\n', '\n', '    /*\n', '    * Function confirm autofund\n', '    *\n', '    */\n', '    function confirmSell(uint256 _amount) internal view\n', '        returns(bool)\n', '    {\n', '        if (Sales.tokens < _amount) {\n', '            return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    *  Make discount\n', '    */\n', '    function countDiscount(uint256 amount) internal view\n', '        returns(uint256)\n', '    {\n', '        uint256 _amount = (amount.mul(DEC)).div(price);\n', '        _amount = _amount.add(withDiscount(_amount, discount));\n', '\n', '        return _amount;\n', '    }\n', '\n', '    /** +\n', '    * Function for change discount if need\n', '    *\n', '    */\n', '    function changeDiscount(uint8 _discount) public onlyOwner\n', '        returns (bool)\n', '    {\n', '        discount = _discount;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * Function for adding discount\n', '    *\n', '    */\n', '    function withDiscount(uint256 _amount, uint _percent) internal pure\n', '        returns (uint256)\n', '    {\n', '        return (_amount.mul(_percent)).div(100);\n', '    }\n', '\n', '    /**\n', '    * Expanding of the functionality\n', '    *\n', '    * @param _price in weis\n', '    */\n', '    function changePrice(uint256 _price) public onlyOwner\n', '        returns (bool success)\n', '    {\n', '        require(_price != 0);\n', '        price = _price;\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    * Seles manager\n', '    *\n', '    */\n', '    function paymentManager(uint256 value) internal\n', '    {\n', '        uint256 _value = (value * 10 ** uint256(decimals)) / 10 ** uint256(18);\n', '        uint256 discountValue = countDiscount(_value);\n', '        bool conf = confirmSell(discountValue);\n', '\n', '        // transfer all ether to the contract\n', '\n', '        if (conf) {\n', '\n', '            Sales.tokens = Sales.tokens.sub(_value);\n', '            receivedEther = receivedEther.add(value);\n', '\n', '            if (now >= Sales.endDate) {\n', '                pauseInternal();\n', "                CrowdSaleFinished(owner, 'crowdsale is finished');\n", '            }\n', '\n', '        } else {\n', '\n', '            Sales.tokens = Sales.tokens.sub(Sales.tokens);\n', '            receivedEther = receivedEther.add(value);\n', '\n', '            pauseInternal();\n', "            CrowdSaleFinished(owner, 'crowdsale is finished');\n", '        }\n', '    }\n', '\n', '    function transfertWDiscount(address _spender, uint256 amount) public onlyOwner\n', '        returns(bool)\n', '    {\n', '        uint256 _amount = (amount.mul(DEC)).div(price);\n', '        _amount = _amount.add(withDiscount(_amount, discount));\n', '        transfer(_spender, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    * Function for start crowdsale (any)\n', '    *\n', '    * @param _tokens - How much tokens will have the crowdsale - amount humanlike value (10000)\n', '    * @param _startDate - When crowdsale will be start - unix timestamp (1512231703 )\n', '    * @param _endDate - When crowdsale will be end - humanlike value (7) same as 7 days\n', '    */\n', '    function startCrowd(uint256 _tokens, uint _startDate, uint _endDate) public onlyOwner\n', '    {\n', '        Sales = sale (_tokens * DEC, _startDate, _startDate + _endDate * 1 days);\n', '        unpauseInternal();\n', '    }\n', '\n', '}\n', '\n', 'contract TokenContract is ERC20Extending, CrowdsaleContract\n', '{\n', '    /* Constructor */\n', '    function TokenContract() public\n', '        ERC20(10000000000, "Debit Coin", "DEBC") {}\n', '\n', '    /**\n', '    * Function payments handler\n', '    *\n', '    */\n', '    function () public payable\n', '    {\n', '        assert(msg.value >= 1 ether / 100);\n', '        require(now >= Sales.startDate);\n', '\n', '        if (paused == false) {\n', '            paymentManager(msg.value);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '}']