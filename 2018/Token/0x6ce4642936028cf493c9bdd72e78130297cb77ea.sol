['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '\n', '        return c;\n', '    }\n', '}\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping(address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public ownerCandidate;\n', '    address[4] public admins;\n', '    uint256 public ownershipTransferCounter;\n', '\n', '    constructor(address _owner, address[4] _admins) public {\n', '        owner = _owner;\n', '        admins[0] = _admins[0];\n', '        admins[1] = _admins[1];\n', '        admins[2] = _admins[2];\n', '        admins[3] = _admins[3];\n', '    }\n', '\n', '    function changeAdmin(address _oldAdmin, address _newAdmin, bytes32[3] _rs, bytes32[3] _ss, uint8[3] _vs) external returns (bool) {\n', '        bytes32 prefixedMessage = prefixedHash(transferAdminMessage(_oldAdmin, _newAdmin));\n', '        address[3] memory signers;\n', '\n', '        for (uint8 i = 0; i < 3; i++) {\n', '            signers[i] = ecrecover(prefixedMessage, _vs[i], _rs[i], _ss[i]);\n', '        }\n', '\n', '        require (isQuorum(signers));\n', '\n', '        return replaceAdmin(_oldAdmin, _newAdmin);\n', '    }\n', '\n', '    function transferOwnership(address _newOwner, bytes32[3] _rs, bytes32[3] _ss, uint8[3] _vs) external returns (bool) {\n', '        bytes32 prefixedMessage = prefixedHash(transferOwnershipMessage(_newOwner));\n', '        address[3] memory signers;\n', '\n', '        for (uint8 i = 0; i < 3; i++) {\n', '            signers[i] = ecrecover(prefixedMessage, _vs[i], _rs[i], _ss[i]);\n', '        }\n', '\n', '        require (isQuorum(signers));\n', '\n', '        ownerCandidate = _newOwner;\n', '        ownershipTransferCounter += 1;\n', '\n', '        return true;\n', '    }\n', '\n', '    function confirmOwnership() external returns (bool) {\n', '        require (msg.sender == ownerCandidate);\n', '\n', '        owner = ownerCandidate;\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferOwnershipMessage(address _candidate) public view returns (bytes32) {\n', '        return keccak256(address(this), _candidate, ownershipTransferCounter);\n', '    }\n', '\n', '    function transferAdminMessage(address _oldAdmin, address _newAdmin) public view returns (bytes32) {\n', '        return keccak256(address(this), _oldAdmin, _newAdmin);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function prefixedHash(bytes32 hash) pure public returns (bytes32) {\n', '        return keccak256("\\x19Ethereum Signed Message:\\n32", hash);\n', '    }\n', '\n', '    function replaceAdmin (address _old, address _new) internal returns (bool) {\n', '        require (_new != address(0));\n', '        require (!isAdmin(_new));\n', '\n', '        for (uint8 i = 0; i < admins.length; i++) {\n', '            if (admins[i] == _old) {\n', '                admins[i] = _new;\n', '\n', '                return true;\n', '            }\n', '        }\n', '\n', '        require (false);\n', '    }\n', '\n', '    function isAdmin (address _a) public view returns (bool) {\n', '        for (uint8 i = 0; i < admins.length; i++) {\n', '            if (admins[i] == _a) {\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function isQuorum(address[3] signers) public view returns (bool) {\n', '        if (signers[0] == signers[1] || signers[0] == signers[2] || signers[1] == signers[2])\n', '        {\n', '            return false;\n', '        }\n', '\n', '        for (uint8 i = 0; i < signers.length; i++) {\n', '            if (signers[i] == address(0)) {\n', '                return false;\n', '            }\n', '\n', '            if (!isAdmin(signers[i])) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '}\n', 'contract OwnedToken is StandardToken, Ownable {\n', '    constructor (address _owner, address[4] _admins) public Ownable(_owner, _admins) {\n', '    }\n', '\n', '    function confirmOwnership () external returns (bool) {\n', '        require (msg.sender == ownerCandidate);\n', '\n', '        balances[ownerCandidate] += balances[owner];\n', '\n', '        delete balances[owner];\n', '\n', '        owner = ownerCandidate;\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract CollectableToken is PausableToken {\n', '    mapping(address => uint256) nextNonce;\n', '\n', '    event Collected(address indexed from, address indexed to, address indexed collector, uint256 value);\n', '\n', '    function collectMessage(address _from, address _to, uint256 _value) public view returns (bytes32) {\n', '        return keccak256(address(this), _from, _to, _value, nextNonce[_from]);\n', '    }\n', '\n', '    function isCollectSignatureCorrect(address _from, address _to, uint256 _value, bytes32 _r, bytes32 _s, uint8 _v) public view returns (bool) {\n', '        return _from == ecrecover(\n', '            prefixedHash(collectMessage(_from, _to, _value)),\n', '            _v, _r, _s\n', '        );\n', '    }\n', '\n', '    function collect(address _from, address _to, uint256 _value, bytes32 _r, bytes32 _s, uint8 _v) public whenNotPaused returns (bool success) {\n', '        require (_value > 0);\n', '        require (_from != _to);\n', '        require (_to != address(0));\n', '        require (isCollectSignatureCorrect(_from, _to, _value, _r, _s, _v));\n', '\n', '        nextNonce[_from] += 1;\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        emit Collected(_from, _to, msg.sender, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', 'contract BixtrimToken is CollectableToken, OwnedToken {\n', '    string public constant name = "BixtrimToken";\n', '    string public constant symbol = "BXM";\n', '    uint256 public constant decimals = 0;\n', '\n', '    constructor (uint256 _total, address _owner, address[4] _admins) public OwnedToken(_owner, _admins) {\n', '        totalSupply_ = _total;\n', '        balances[_owner] = _total;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '\n', '        return c;\n', '    }\n', '}\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping(address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public ownerCandidate;\n', '    address[4] public admins;\n', '    uint256 public ownershipTransferCounter;\n', '\n', '    constructor(address _owner, address[4] _admins) public {\n', '        owner = _owner;\n', '        admins[0] = _admins[0];\n', '        admins[1] = _admins[1];\n', '        admins[2] = _admins[2];\n', '        admins[3] = _admins[3];\n', '    }\n', '\n', '    function changeAdmin(address _oldAdmin, address _newAdmin, bytes32[3] _rs, bytes32[3] _ss, uint8[3] _vs) external returns (bool) {\n', '        bytes32 prefixedMessage = prefixedHash(transferAdminMessage(_oldAdmin, _newAdmin));\n', '        address[3] memory signers;\n', '\n', '        for (uint8 i = 0; i < 3; i++) {\n', '            signers[i] = ecrecover(prefixedMessage, _vs[i], _rs[i], _ss[i]);\n', '        }\n', '\n', '        require (isQuorum(signers));\n', '\n', '        return replaceAdmin(_oldAdmin, _newAdmin);\n', '    }\n', '\n', '    function transferOwnership(address _newOwner, bytes32[3] _rs, bytes32[3] _ss, uint8[3] _vs) external returns (bool) {\n', '        bytes32 prefixedMessage = prefixedHash(transferOwnershipMessage(_newOwner));\n', '        address[3] memory signers;\n', '\n', '        for (uint8 i = 0; i < 3; i++) {\n', '            signers[i] = ecrecover(prefixedMessage, _vs[i], _rs[i], _ss[i]);\n', '        }\n', '\n', '        require (isQuorum(signers));\n', '\n', '        ownerCandidate = _newOwner;\n', '        ownershipTransferCounter += 1;\n', '\n', '        return true;\n', '    }\n', '\n', '    function confirmOwnership() external returns (bool) {\n', '        require (msg.sender == ownerCandidate);\n', '\n', '        owner = ownerCandidate;\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferOwnershipMessage(address _candidate) public view returns (bytes32) {\n', '        return keccak256(address(this), _candidate, ownershipTransferCounter);\n', '    }\n', '\n', '    function transferAdminMessage(address _oldAdmin, address _newAdmin) public view returns (bytes32) {\n', '        return keccak256(address(this), _oldAdmin, _newAdmin);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function prefixedHash(bytes32 hash) pure public returns (bytes32) {\n', '        return keccak256("\\x19Ethereum Signed Message:\\n32", hash);\n', '    }\n', '\n', '    function replaceAdmin (address _old, address _new) internal returns (bool) {\n', '        require (_new != address(0));\n', '        require (!isAdmin(_new));\n', '\n', '        for (uint8 i = 0; i < admins.length; i++) {\n', '            if (admins[i] == _old) {\n', '                admins[i] = _new;\n', '\n', '                return true;\n', '            }\n', '        }\n', '\n', '        require (false);\n', '    }\n', '\n', '    function isAdmin (address _a) public view returns (bool) {\n', '        for (uint8 i = 0; i < admins.length; i++) {\n', '            if (admins[i] == _a) {\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function isQuorum(address[3] signers) public view returns (bool) {\n', '        if (signers[0] == signers[1] || signers[0] == signers[2] || signers[1] == signers[2])\n', '        {\n', '            return false;\n', '        }\n', '\n', '        for (uint8 i = 0; i < signers.length; i++) {\n', '            if (signers[i] == address(0)) {\n', '                return false;\n', '            }\n', '\n', '            if (!isAdmin(signers[i])) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '}\n', 'contract OwnedToken is StandardToken, Ownable {\n', '    constructor (address _owner, address[4] _admins) public Ownable(_owner, _admins) {\n', '    }\n', '\n', '    function confirmOwnership () external returns (bool) {\n', '        require (msg.sender == ownerCandidate);\n', '\n', '        balances[ownerCandidate] += balances[owner];\n', '\n', '        delete balances[owner];\n', '\n', '        owner = ownerCandidate;\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract CollectableToken is PausableToken {\n', '    mapping(address => uint256) nextNonce;\n', '\n', '    event Collected(address indexed from, address indexed to, address indexed collector, uint256 value);\n', '\n', '    function collectMessage(address _from, address _to, uint256 _value) public view returns (bytes32) {\n', '        return keccak256(address(this), _from, _to, _value, nextNonce[_from]);\n', '    }\n', '\n', '    function isCollectSignatureCorrect(address _from, address _to, uint256 _value, bytes32 _r, bytes32 _s, uint8 _v) public view returns (bool) {\n', '        return _from == ecrecover(\n', '            prefixedHash(collectMessage(_from, _to, _value)),\n', '            _v, _r, _s\n', '        );\n', '    }\n', '\n', '    function collect(address _from, address _to, uint256 _value, bytes32 _r, bytes32 _s, uint8 _v) public whenNotPaused returns (bool success) {\n', '        require (_value > 0);\n', '        require (_from != _to);\n', '        require (_to != address(0));\n', '        require (isCollectSignatureCorrect(_from, _to, _value, _r, _s, _v));\n', '\n', '        nextNonce[_from] += 1;\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        emit Collected(_from, _to, msg.sender, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', 'contract BixtrimToken is CollectableToken, OwnedToken {\n', '    string public constant name = "BixtrimToken";\n', '    string public constant symbol = "BXM";\n', '    uint256 public constant decimals = 0;\n', '\n', '    constructor (uint256 _total, address _owner, address[4] _admins) public OwnedToken(_owner, _admins) {\n', '        totalSupply_ = _total;\n', '        balances[_owner] = _total;\n', '    }\n', '}']
