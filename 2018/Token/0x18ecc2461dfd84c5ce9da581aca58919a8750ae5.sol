['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract mAlek {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint public _totalSupply = 0;\n', '\n', '    string public constant symbol = "mAlek";\n', '    string public constant name = "mAlek Token";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public bonus = 50;\n', '    uint256 public price = 1000;\n', '    uint256 public rate;\n', '\n', '    address public owner;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function () payable {\n', '        createTokens();\n', '    }\n', '\n', '    function mAlek () {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setBonus (uint256 newBonus) public {\n', '        require (owner == msg.sender);\n', '        bonus = newBonus;\n', '    }\n', '\n', '    function setPrice (uint256 newPrice) public {\n', '        require (owner == msg.sender);\n', '        price = newPrice;\n', '    }\n', '\n', '    function createTokens() payable {\n', '        require (msg.value > 0);\n', '        rate = ((bonus.add(100)).mul(price));\n', '        uint256 tokens = (msg.value.mul(rate)).div(100);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function mintTokens(address _to, uint256 _value) {\n', '        require (owner == msg.sender);        \n', '        balances[_to] = balances[_to].add(_value*10**18);\n', '        _totalSupply = _totalSupply.add(_value*10**18);\n', '        Transfer(0x0, this, _value*10**18);\n', '        Transfer(this, _to, _value*10**18);\n', '    }\n', '\n', '    function totalSupply () constant returns (uint256 totalSupply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf (address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer (address _to, uint256 _value) returns (bool success) {\n', '        require (balances[msg.sender] >= _value && _value > 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;        \n', '    }\n', '\n', '    function transferFrom (address _from, address _to, uint256 _value) returns (bool success) {\n', '        require (allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve (address _spender, uint256 _value) returns (bool success) {\n', '        allowed [msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance (address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer (address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval (address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract mAlek {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint public _totalSupply = 0;\n', '\n', '    string public constant symbol = "mAlek";\n', '    string public constant name = "mAlek Token";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public bonus = 50;\n', '    uint256 public price = 1000;\n', '    uint256 public rate;\n', '\n', '    address public owner;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function () payable {\n', '        createTokens();\n', '    }\n', '\n', '    function mAlek () {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setBonus (uint256 newBonus) public {\n', '        require (owner == msg.sender);\n', '        bonus = newBonus;\n', '    }\n', '\n', '    function setPrice (uint256 newPrice) public {\n', '        require (owner == msg.sender);\n', '        price = newPrice;\n', '    }\n', '\n', '    function createTokens() payable {\n', '        require (msg.value > 0);\n', '        rate = ((bonus.add(100)).mul(price));\n', '        uint256 tokens = (msg.value.mul(rate)).div(100);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function mintTokens(address _to, uint256 _value) {\n', '        require (owner == msg.sender);        \n', '        balances[_to] = balances[_to].add(_value*10**18);\n', '        _totalSupply = _totalSupply.add(_value*10**18);\n', '        Transfer(0x0, this, _value*10**18);\n', '        Transfer(this, _to, _value*10**18);\n', '    }\n', '\n', '    function totalSupply () constant returns (uint256 totalSupply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf (address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer (address _to, uint256 _value) returns (bool success) {\n', '        require (balances[msg.sender] >= _value && _value > 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;        \n', '    }\n', '\n', '    function transferFrom (address _from, address _to, uint256 _value) returns (bool success) {\n', '        require (allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve (address _spender, uint256 _value) returns (bool success) {\n', '        allowed [msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance (address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer (address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval (address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
