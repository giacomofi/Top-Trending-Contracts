['pragma solidity 0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract PausableToken is StandardToken, BurnableToken, Claimable, Pausable {\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    \treturn super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    \treturn super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    \treturn super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '      return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '      return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract LockableToken is PausableToken {\n', '\tusing SafeMath for uint256;\n', '\n', '\tevent Lock(address indexed owner, uint256 orderId, uint256 amount, uint256 releaseTimestamp);\n', '\tevent UnLock(address indexed owner, uint256 orderId, uint256 amount);\n', '\n', '\tstruct LockRecord {\n', '\t    \n', '\t    ///@dev order id\n', '\t    uint256 orderId;\n', '\n', '\t    ///@dev lock amount\n', '\t    uint256 amount;\n', '\n', '\t    ///@dev unlock timestamp\n', '\t    uint256 releaseTimestamp;\n', '\t}\n', '\t\n', '\tmapping (address => LockRecord[]) ownedLockRecords;\n', '\tmapping (address => uint256) ownedLockAmount;\n', '\n', '\n', '\t/**\n', '\t* @dev Lock token until _timeSpan second.\n', '\t* @param _orderId uint256\n', '\t* @param _amount uint256\n', '\t*/\n', '\tfunction lockTokenForNode(uint256 _orderId, uint256 _amount, uint256 _timeSpan) public whenNotPaused {\n', '\t\trequire(balances[msg.sender] >= _amount);\n', '\t\trequire(_timeSpan > 0 && _timeSpan <= 3 * 365 days);\n', '\t    \n', '\t\tuint256 releaseTimestamp = now + _timeSpan;\n', '\n', '\t \t_lockToken(_orderId, _amount, releaseTimestamp);\n', '\t}\n', '\n', '\n', '\tfunction unlockToken() public whenNotPaused {\n', '\t\tLockRecord[] memory list = ownedLockRecords[msg.sender];\n', '    require(list.length > 0);\n', '\t\tfor(uint i = list.length - 1; i >= 0; i--) {\n', '\t\t\t// If a record can be release.\n', '\t\t\tif (now >= list[i].releaseTimestamp) {\n', '\t\t\t\t_unlockTokenByIndex(i);\n', '\t\t\t}\n', '\t\t\t/// @dev i is a type of uint , so it must be break when i == 0.\n', '\t\t\tif (i == 0) {\n', '\t\t\t\tbreak;\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t* @param _index uint256 Lock record idnex.\n', '\t* @return Return a lock record (lock amount, releaseTimestamp)\n', '\t*/\n', '\tfunction getLockByIndex(uint256 _index) public view returns(uint256, uint256, uint256) {\n', '        LockRecord memory record = ownedLockRecords[msg.sender][_index];\n', '        \n', '        return (record.orderId, record.amount, record.releaseTimestamp);\n', '    }\n', '\n', '  function getLockAmount() public view returns(uint256) {\n', '  \tLockRecord[] memory list = ownedLockRecords[msg.sender];\n', '  \tuint sum = 0;\n', '  \tfor (uint i = 0; i < list.length; i++) {\n', '  \t\tsum += list[i].amount;\n', '  \t}\n', '\n', '  \treturn sum;\n', '  }\n', '\n', '  /**\n', '  * @dev Get lock records count\n', '  */\n', '  function getLockRecordCount() view public returns(uint256) {\n', '    return ownedLockRecords[msg.sender].length;\n', '  }\n', '\n', '\t/**\n', '\t* @param _amount uint256 Lock amount.\n', '\t* @param _releaseTimestamp uint256 Unlock timestamp.\n', '\t*/\n', '\tfunction _lockToken(uint256 _orderId, uint256 _amount, uint256 _releaseTimestamp) internal {\n', '\t\trequire(ownedLockRecords[msg.sender].length <= 20);\n', '    \n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '\n', '\t\t///@dev We don&#39;t care the orderId already exist or not. \n', '\t\t/// Because the web server will detect it.\n', '\t\townedLockRecords[msg.sender].push( LockRecord(_orderId, _amount, _releaseTimestamp) );\n', '\t\townedLockAmount[msg.sender] = ownedLockAmount[msg.sender].add(_amount);\n', '\n', '\t\temit Lock(msg.sender, _orderId, _amount, _releaseTimestamp);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev using by internal.\n', '\t*/\n', '\tfunction _unlockTokenByIndex(uint256 _index) internal {\n', '\t\tLockRecord memory record = ownedLockRecords[msg.sender][_index];\n', '\t\tuint length = ownedLockRecords[msg.sender].length;\n', '\n', '\t\townedLockRecords[msg.sender][_index] = ownedLockRecords[msg.sender][length - 1];\n', '\t\tdelete ownedLockRecords[msg.sender][length - 1];\n', '\t\townedLockRecords[msg.sender].length--;\n', '\n', '\t\townedLockAmount[msg.sender] = ownedLockAmount[msg.sender].sub(record.amount);\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(record.amount);\n', '\n', '\t\temit UnLock(msg.sender, record.orderId, record.amount);\n', '\t}\n', '\n', '}\n', '\n', 'contract TuzyPayableToken is LockableToken {\n', '\t\n', '\tevent Pay(address indexed owner, uint256 orderId, uint256 amount, uint256 burnAmount);\n', '\n', '\taddress public cooAddress;\n', '\n', '\t/// @dev User pay action will consume a certain amount of token.\n', '\t//uint256 public payAmount;\n', '\n', '\t/// @dev User pay action will brun a certain amount of token their owned.\n', '\t//uint256 public payBrunAmount;\n', '\n', '\n', '\t/**\n', '\t* @dev The TuzyPayableToken constructor sets the original `cooAddress` of the contract to the sender\n', '\t* account.\n', '\t*/\n', '\tconstructor() public {\n', '\t\tcooAddress = msg.sender;\n', '\t}\n', '\t\n', '/// @dev Assigns a new address to act as the COO.\n', '  /// @param _newCOO The address of the new COO.\n', '  function setCOO(address _newCOO) external onlyOwner {\n', '      require(_newCOO != address(0));\n', '      \n', '      cooAddress = _newCOO;\n', '  }\n', '\n', '  /**\n', '  * @dev Pay for order\n', '  *\n', '  */ \n', '  function payOrder(uint256 _orderId, uint256 _amount, uint256 _burnAmount) external whenNotPaused {\n', '  \trequire(balances[msg.sender] >= _amount);\n', '  \t\n', '  \t/// @dev _burnAmount must be less then _amount, the code can be executed to the next line.\n', '  \tuint256 fee = _amount.sub(_burnAmount);\n', '  \tif (fee > 0) {\n', '  \t\ttransfer(cooAddress, fee);\n', '  \t}\n', '  \tburn(_burnAmount);\n', '  \temit Pay(msg.sender, _orderId, _amount, _burnAmount);\n', '  }\n', '}\n', '\n', 'contract TuzyCoin is TuzyPayableToken {\n', '\tstring public name    = "Tuzy Coin";\n', '\tstring public symbol  = "TUC";\n', '\tuint8 public decimals = 8;\n', '\n', '\t// 1.6 billion in initial supply\n', '\tuint256 public constant INITIAL_SUPPLY = 1600000000;\n', '\n', '\tconstructor() public {\n', '\t\ttotalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals));\n', '\t\tbalances[msg.sender] = totalSupply_;\n', '\t}\n', '\n', '  function globalBurnAmount() public view returns(uint256) {\n', '    return INITIAL_SUPPLY * (10 ** uint256(decimals)) - totalSupply_;\n', '  }\n', '\n', '}']
['pragma solidity 0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract PausableToken is StandardToken, BurnableToken, Claimable, Pausable {\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    \treturn super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    \treturn super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    \treturn super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '      return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '      return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract LockableToken is PausableToken {\n', '\tusing SafeMath for uint256;\n', '\n', '\tevent Lock(address indexed owner, uint256 orderId, uint256 amount, uint256 releaseTimestamp);\n', '\tevent UnLock(address indexed owner, uint256 orderId, uint256 amount);\n', '\n', '\tstruct LockRecord {\n', '\t    \n', '\t    ///@dev order id\n', '\t    uint256 orderId;\n', '\n', '\t    ///@dev lock amount\n', '\t    uint256 amount;\n', '\n', '\t    ///@dev unlock timestamp\n', '\t    uint256 releaseTimestamp;\n', '\t}\n', '\t\n', '\tmapping (address => LockRecord[]) ownedLockRecords;\n', '\tmapping (address => uint256) ownedLockAmount;\n', '\n', '\n', '\t/**\n', '\t* @dev Lock token until _timeSpan second.\n', '\t* @param _orderId uint256\n', '\t* @param _amount uint256\n', '\t*/\n', '\tfunction lockTokenForNode(uint256 _orderId, uint256 _amount, uint256 _timeSpan) public whenNotPaused {\n', '\t\trequire(balances[msg.sender] >= _amount);\n', '\t\trequire(_timeSpan > 0 && _timeSpan <= 3 * 365 days);\n', '\t    \n', '\t\tuint256 releaseTimestamp = now + _timeSpan;\n', '\n', '\t \t_lockToken(_orderId, _amount, releaseTimestamp);\n', '\t}\n', '\n', '\n', '\tfunction unlockToken() public whenNotPaused {\n', '\t\tLockRecord[] memory list = ownedLockRecords[msg.sender];\n', '    require(list.length > 0);\n', '\t\tfor(uint i = list.length - 1; i >= 0; i--) {\n', '\t\t\t// If a record can be release.\n', '\t\t\tif (now >= list[i].releaseTimestamp) {\n', '\t\t\t\t_unlockTokenByIndex(i);\n', '\t\t\t}\n', '\t\t\t/// @dev i is a type of uint , so it must be break when i == 0.\n', '\t\t\tif (i == 0) {\n', '\t\t\t\tbreak;\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t* @param _index uint256 Lock record idnex.\n', '\t* @return Return a lock record (lock amount, releaseTimestamp)\n', '\t*/\n', '\tfunction getLockByIndex(uint256 _index) public view returns(uint256, uint256, uint256) {\n', '        LockRecord memory record = ownedLockRecords[msg.sender][_index];\n', '        \n', '        return (record.orderId, record.amount, record.releaseTimestamp);\n', '    }\n', '\n', '  function getLockAmount() public view returns(uint256) {\n', '  \tLockRecord[] memory list = ownedLockRecords[msg.sender];\n', '  \tuint sum = 0;\n', '  \tfor (uint i = 0; i < list.length; i++) {\n', '  \t\tsum += list[i].amount;\n', '  \t}\n', '\n', '  \treturn sum;\n', '  }\n', '\n', '  /**\n', '  * @dev Get lock records count\n', '  */\n', '  function getLockRecordCount() view public returns(uint256) {\n', '    return ownedLockRecords[msg.sender].length;\n', '  }\n', '\n', '\t/**\n', '\t* @param _amount uint256 Lock amount.\n', '\t* @param _releaseTimestamp uint256 Unlock timestamp.\n', '\t*/\n', '\tfunction _lockToken(uint256 _orderId, uint256 _amount, uint256 _releaseTimestamp) internal {\n', '\t\trequire(ownedLockRecords[msg.sender].length <= 20);\n', '    \n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '\n', "\t\t///@dev We don't care the orderId already exist or not. \n", '\t\t/// Because the web server will detect it.\n', '\t\townedLockRecords[msg.sender].push( LockRecord(_orderId, _amount, _releaseTimestamp) );\n', '\t\townedLockAmount[msg.sender] = ownedLockAmount[msg.sender].add(_amount);\n', '\n', '\t\temit Lock(msg.sender, _orderId, _amount, _releaseTimestamp);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev using by internal.\n', '\t*/\n', '\tfunction _unlockTokenByIndex(uint256 _index) internal {\n', '\t\tLockRecord memory record = ownedLockRecords[msg.sender][_index];\n', '\t\tuint length = ownedLockRecords[msg.sender].length;\n', '\n', '\t\townedLockRecords[msg.sender][_index] = ownedLockRecords[msg.sender][length - 1];\n', '\t\tdelete ownedLockRecords[msg.sender][length - 1];\n', '\t\townedLockRecords[msg.sender].length--;\n', '\n', '\t\townedLockAmount[msg.sender] = ownedLockAmount[msg.sender].sub(record.amount);\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(record.amount);\n', '\n', '\t\temit UnLock(msg.sender, record.orderId, record.amount);\n', '\t}\n', '\n', '}\n', '\n', 'contract TuzyPayableToken is LockableToken {\n', '\t\n', '\tevent Pay(address indexed owner, uint256 orderId, uint256 amount, uint256 burnAmount);\n', '\n', '\taddress public cooAddress;\n', '\n', '\t/// @dev User pay action will consume a certain amount of token.\n', '\t//uint256 public payAmount;\n', '\n', '\t/// @dev User pay action will brun a certain amount of token their owned.\n', '\t//uint256 public payBrunAmount;\n', '\n', '\n', '\t/**\n', '\t* @dev The TuzyPayableToken constructor sets the original `cooAddress` of the contract to the sender\n', '\t* account.\n', '\t*/\n', '\tconstructor() public {\n', '\t\tcooAddress = msg.sender;\n', '\t}\n', '\t\n', '/// @dev Assigns a new address to act as the COO.\n', '  /// @param _newCOO The address of the new COO.\n', '  function setCOO(address _newCOO) external onlyOwner {\n', '      require(_newCOO != address(0));\n', '      \n', '      cooAddress = _newCOO;\n', '  }\n', '\n', '  /**\n', '  * @dev Pay for order\n', '  *\n', '  */ \n', '  function payOrder(uint256 _orderId, uint256 _amount, uint256 _burnAmount) external whenNotPaused {\n', '  \trequire(balances[msg.sender] >= _amount);\n', '  \t\n', '  \t/// @dev _burnAmount must be less then _amount, the code can be executed to the next line.\n', '  \tuint256 fee = _amount.sub(_burnAmount);\n', '  \tif (fee > 0) {\n', '  \t\ttransfer(cooAddress, fee);\n', '  \t}\n', '  \tburn(_burnAmount);\n', '  \temit Pay(msg.sender, _orderId, _amount, _burnAmount);\n', '  }\n', '}\n', '\n', 'contract TuzyCoin is TuzyPayableToken {\n', '\tstring public name    = "Tuzy Coin";\n', '\tstring public symbol  = "TUC";\n', '\tuint8 public decimals = 8;\n', '\n', '\t// 1.6 billion in initial supply\n', '\tuint256 public constant INITIAL_SUPPLY = 1600000000;\n', '\n', '\tconstructor() public {\n', '\t\ttotalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals));\n', '\t\tbalances[msg.sender] = totalSupply_;\n', '\t}\n', '\n', '  function globalBurnAmount() public view returns(uint256) {\n', '    return INITIAL_SUPPLY * (10 ** uint256(decimals)) - totalSupply_;\n', '  }\n', '\n', '}']
