['pragma solidity ^0.4.18;\n', '\n', '// author: KK Coin team\n', '\n', 'contract ERC20Standard {\n', '    // Get the total token supply\n', '    function totalSupply() public constant returns (uint256 _totalSupply);\n', ' \n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', ' \n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    // transfer _value amount of token approved by address _from\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    // approve an address with _value amount of tokens\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    // get remaining token approved by _owner to _spender\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '  \n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', ' \n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract KKToken is ERC20Standard {\n', '    string public constant symbol = "KK";\n', '    string public constant name = "KKCOIN";\n', '    uint256 public constant decimals = 8;\n', '\n', '    uint256 public _totalSupply = 10 ** 18; // equal to 10^10 KK\n', '\n', '    // Owner of this contract\n', '    address public owner;\n', '\n', '    // Balances KK for each account\n', '    mapping(address => uint256) private balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) private allowed;\n', '\n', '    /// @dev Constructor\n', '    function KKToken() public {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '        Transfer(0x0, owner, _totalSupply);\n', '    }\n', '\n', '    /// @return Total supply\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /// @return Account balance\n', '    function balanceOf(address _addr) public constant returns (uint256) {\n', '        return balances[_addr];\n', '    }\n', '\n', '    /// @return Transfer status\n', '    function transfer(address _to, uint256 _amount) public returns (bool) {\n', '        if ( (balances[msg.sender] >= _amount) &&\n', '             (_amount >= 0) && \n', '             (balances[_to] + _amount > balances[_to]) ) {  \n', '\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // these standardized APIs for approval:\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    // get allowance\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']