['pragma solidity ^0.4.15;\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '/*\n', ' * Pausable\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism.\n', ' */\n', '\n', 'contract Pausable is Ownable {\n', '  bool public stopped;\n', '\n', '  modifier stopInEmergency {\n', '    if (stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '  \n', '  modifier onlyInEmergency {\n', '    if (!stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function emergencyStop() external onlyOwner {\n', '    stopped = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function release() external onlyOwner onlyInEmergency {\n', '    stopped = false;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/*\n', ' * PullPayment\n', ' * Base contract supporting async send for pull payments.\n', ' * Inherit from this contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '\n', '  using SafeMath for uint;\n', '  \n', '  mapping(address => uint) public payments;\n', '\n', '  event LogRefundETH(address to, uint value);\n', '\n', '\n', '  /**\n', '  *  Store sent amount as credit to be pulled, called by payer \n', '  **/\n', '  function asyncSend(address dest, uint amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '  }\n', '\n', '  // withdraw accumulated balance, called by payee\n', '  function withdrawPayments() {\n', '    address payee = msg.sender;\n', '    uint payment = payments[payee];\n', '    \n', '    if (payment == 0) {\n', '      throw;\n', '    }\n', '\n', '    if (this.balance < payment) {\n', '      throw;\n', '    }\n', '\n', '    payments[payee] = 0;\n', '\n', '    if (!payee.send(payment)) {\n', '      throw;\n', '    }\n', '    LogRefundETH(payee,payment);\n', '  }\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  \n', '  using SafeMath for uint;\n', '  \n', '  mapping(address => uint) balances;\n', '  \n', '  /*\n', '   * Fix for the ERC20 short address attack  \n', '  */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint _value) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract ERRLCoin is StandardToken, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "420 ErrL";\n', '  string public symbol = "ERRL";\n', '  uint256 public decimals = 18;\n', '  uint256 constant public ERRL_UNIT = 10 ** 18;\n', '  uint256 public INITIAL_SUPPLY = 1000000000000 * ERRL_UNIT; // 1 trillion ( 1,000,000,000,000 ) ERRL COINS\n', '  uint256 public totalAllocated = 0;             // Counter to keep track of overall token allocation\n', '  uint256 public remaintokens=0;\n', '  uint256 public factor=35;\n', '  //  Constants \n', '    uint256 constant public maxOwnerSupply = 16000000000 * ERRL_UNIT;           // Owner seperate allocation\n', '    uint256 constant public DeveloperSupply = 2000000000 * ERRL_UNIT;     //  Developer&#39;s allocation\n', '\n', '\n', 'address public constant OWNERSTAKE = 0xea38f5e13FF11A4F519AC1a8a9AE526979750B01;\n', '   address public constant  DEVSTAKE = 0x625151089d010F2b1B7a72d16Defe2390D596dF8;\n', '   \n', '\n', '\n', '\n', '  event Burn(address indexed from, uint256 value);\n', '\n', '  function ERRLCoin() {\n', '      \n', '        totalAllocated+=maxOwnerSupply+DeveloperSupply;  // Add to total Allocated funds\n', '\n', '   remaintokens=INITIAL_SUPPLY-totalAllocated;\n', '      \n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[OWNERSTAKE] = maxOwnerSupply; // owner seperate ERRL tokens\n', '    balances[DEVSTAKE] = DeveloperSupply; // Developer&#39;s share of ERRL tokens for coding the contract\n', '    balances[msg.sender] = remaintokens; // Send remaining tokens to owner&#39;s primary wallet from where contract is deployed\n', '  }\n', '\n', '  function burn(uint _value) onlyOwner returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Transfer(msg.sender, 0x0, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/*\n', '  Crowdsale Smart Contract for the 420 ERRL Token project\n', '  This smart contract collects ETH, and in return emits equivalent ERRL tokens and 35% of the purchase amount to the purchasers \n', '*/\n', 'contract Crowdsale is Pausable, PullPayment {\n', '    \n', '    using SafeMath for uint;\n', '\n', '    struct Backer {\n', '    uint weiReceived; // Amount of Ether given\n', '    uint coinSent;\n', '  }\n', '\n', '  /*\n', '  * Constants\n', '  */\n', '  \n', ' uint public constant MIN_CAP = 0; // no minimum cap\n', '  /* Maximum number of ERRLCOINS to sell */\n', '  uint public constant MAX_CAP = 600000000000 * 10 **18; \n', '\n', '  // 600,000,000,000 ERRL COINS (600 billions) \n', '\n', '  /* Crowdsale period */\n', '  uint private constant CROWDSALE_PERIOD = 3000 days;\n', ' /*uint private constant CROWDSALE_PERIOD = 1 seconds;*/\n', '   \n', '  /* Number of ERRL COINS per Ether */\n', '  uint public constant COIN_PER_ETHER = 700000 * 10**18; // 700,000 ERRL coins per eth,  1 eth=350$ Canadian , 1 ERRL coin=0.0005$ Canadian\n', '                                        \n', '\n', '  /*\n', '  * Variables\n', '  */\n', '  /* ERRLCoin contract reference */\n', '  ERRLCoin public coin;\n', '    /* Multisig contract that will receive the Ether */\n', '  address public multisigEther;\n', '  /* Number of Ether received */\n', '  uint public etherReceived;\n', '  \n', '  uint public ETHToSend;\n', '  \n', '  \n', '  /* Number of ERRLCoin sent to Ether contributors */\n', '  uint public coinSentToEther;\n', '  /* Crowdsale start time */\n', '  uint public startTime;\n', '  /* Crowdsale end time */\n', '  uint public endTime;\n', '  \n', '  \n', '  \n', '  \n', '  \n', '  /* Is crowdsale still on going */\n', '  bool public crowdsaleClosed=false;\n', '  \n', '  \n', '\n', '  /* Backers Ether indexed by their Ethereum address */\n', '  mapping(address => Backer) public backers;\n', '\n', '\n', '  /*\n', '  * Modifiers\n', '  */\n', '  \n', '\n', '  modifier respectTimeFrame() {\n', '    require ((now > startTime) || (now < endTime )) ;\n', '    _;\n', '  }\n', '\n', '  /*\n', '   * Event\n', '  */\n', '  event LogReceivedETH(address addr, uint value);\n', '  event LogCoinsEmited(address indexed from, uint amount);\n', '\n', '  /*\n', '   * Constructor\n', '  */\n', '  function Crowdsale(address _ERRLCoinAddress, address _to) {\n', '    coin = ERRLCoin(_ERRLCoinAddress);\n', '    multisigEther = _to;\n', '  }\n', '\n', '  /* \n', '   * The fallback function corresponds to a donation in ETH\n', '   */\n', '  function() stopInEmergency respectTimeFrame payable {\n', '    receiveETH(msg.sender);\n', '  }\n', '\n', '  /* \n', '   * To call to start the crowdsale\n', '   */\n', '  function start() onlyOwner {\n', '   \n', '    startTime = now ;           \n', '    endTime =  now + CROWDSALE_PERIOD;  \n', '\n', '    crowdsaleClosed=false;\n', '   \n', '  \n', '   \n', '  }\n', '\n', '  /*\n', '   *  Receives a donation in Ether\n', '  */\n', '  function receiveETH(address beneficiary) internal {\n', '\n', 'address OWNERICO_STAKE = 0x03bC8e32389082653ea4c25AcF427508499c0Bcb;\n', '    //if (msg.value < MIN_INVEST_ETHER) throw; // Don&#39;t accept funding under a predefined threshold\n', '    \n', '    uint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Compute the number of ERRLCoin to send\n', '    //if (coinToSend.add(coinSentToEther) > MAX_CAP) throw; \n', '\n', '    require(coinToSend.add(coinSentToEther) < MAX_CAP); \n', '    require(crowdsaleClosed == false);\n', '    \n', '    \n', '\n', '    Backer backer = backers[beneficiary];\n', '    coin.transfer(beneficiary, coinToSend); // Transfer ERRLCoins right now \n', '\n', '    backer.coinSent = backer.coinSent.add(coinToSend);\n', '    //backer.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer\n', 'uint factor=35;\n', '//uint factoreth=65;\n', '//ETHToSend = (factor.div(100)).mul(backers[msg.sender].weiReceived);\n', '//ETHToSend = backers[msg.sender].weiReceived;\n', '\n', 'ETHToSend = msg.value;\n', '\n', 'ETHToSend=(ETHToSend * 35) / 100;\n', '\n', '//backers[msg.sender].weiReceived=(factoreth.div(100)).mul(backers[msg.sender].weiReceived);\n', '\n', '//backers[msg.sender].weiReceived=backers[msg.sender].weiReceived;\n', '\n', '    //uint ETHToSend = (factor/100).mul(backers[msg.sender].weiReceived);\n', '    \n', '    //ETHToSend=ETHToSend.div(100);\n', '    \n', '   //backers[msg.sender].weiReceived=0; \n', '    \n', '    if (ETHToSend > 0) {\n', '      //asyncSend(msg.sender, ETHToSend); // pull payment to get 35% refund in ETH\n', '      //transfer(msg.sender, ETHToSend);\n', '      beneficiary.transfer(ETHToSend);\n', '    }\n', '    \n', 'LogRefundETH(msg.sender, ETHToSend);\n', '    //backer.weiReceived = backer.weiReceived.sub(ETHToSend);\n', '    \n', '    //backers[msg.sender].weiReceived=(factoreth/100).mul(backers[msg.sender].weiReceived);\n', '    \n', '   //pays=(factoreth.div(100)).mul(msg.value);\n', '\n', '    etherReceived = etherReceived.add((msg.value.mul(65)).div(100)); // Update the total wei collected during the crowdfunding\n', '    //etherReceived=etherReceived.div(100);\n', '    \n', '    coinSentToEther = coinSentToEther.add(coinToSend);\n', '\n', '    // Send events\n', '    LogCoinsEmited(msg.sender ,coinToSend);\n', '    LogReceivedETH(beneficiary, etherReceived); \n', '\n', '   \n', '    coin.transfer(OWNERICO_STAKE,coinToSend); // Transfer ERRLCoins right now to beneficiary ownerICO  \n', '   \n', '\n', '    coinSentToEther = coinSentToEther.add(coinToSend);\n', '\n', '    LogCoinsEmited(OWNERICO_STAKE ,coinToSend);\n', '    \n', '    \n', '    \n', '  }\n', '  \n', '\n', '  /*\n', '   *Compute the ERRLCoin bonus according to the investment period\n', '   */\n', '  function bonus(uint amount) internal constant returns (uint) {\n', '    \n', '    return amount;\n', '  }\n', '\n', ' \n', '\n', '  /*  \n', '  * Failsafe drain\n', '  */\n', '  function drain() onlyOwner {\n', '    if (!owner.send(this.balance)) throw;\n', '    crowdsaleClosed = true;\n', '  }\n', '\n', '  /**\n', '   * Allow to change the team multisig address in the case of emergency.\n', '   */\n', '  function setMultisig(address addr) onlyOwner public {\n', '    //if (addr == address(0)) throw;\n', '    require(addr != address(0));\n', '    multisigEther = addr;\n', '  }\n', '\n', '  /**\n', '   * Manually back ERRLCoin owner address.\n', '   */\n', '  function backERRLCoinOwner() onlyOwner public {\n', '    coin.transferOwnership(owner);\n', '  }\n', '\n', '  /**\n', '   * Transfer remains to owner \n', '   */\n', '  function getRemainCoins() onlyOwner public {\n', '      \n', '    var remains = MAX_CAP - coinSentToEther;\n', '    \n', '    Backer backer = backers[owner];\n', '    coin.transfer(owner, remains); // Transfer ERRLCoins right now \n', '\n', '    backer.coinSent = backer.coinSent.add(remains);\n', '\n', '    coinSentToEther = coinSentToEther.add(remains);\n', '\n', '    // Send events\n', '    LogCoinsEmited(this ,remains);\n', '    LogReceivedETH(owner, etherReceived); \n', '  }\n', '\n', '\n', '  \n', '\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '/*\n', ' * Pausable\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism.\n', ' */\n', '\n', 'contract Pausable is Ownable {\n', '  bool public stopped;\n', '\n', '  modifier stopInEmergency {\n', '    if (stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '  \n', '  modifier onlyInEmergency {\n', '    if (!stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function emergencyStop() external onlyOwner {\n', '    stopped = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function release() external onlyOwner onlyInEmergency {\n', '    stopped = false;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/*\n', ' * PullPayment\n', ' * Base contract supporting async send for pull payments.\n', ' * Inherit from this contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '\n', '  using SafeMath for uint;\n', '  \n', '  mapping(address => uint) public payments;\n', '\n', '  event LogRefundETH(address to, uint value);\n', '\n', '\n', '  /**\n', '  *  Store sent amount as credit to be pulled, called by payer \n', '  **/\n', '  function asyncSend(address dest, uint amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '  }\n', '\n', '  // withdraw accumulated balance, called by payee\n', '  function withdrawPayments() {\n', '    address payee = msg.sender;\n', '    uint payment = payments[payee];\n', '    \n', '    if (payment == 0) {\n', '      throw;\n', '    }\n', '\n', '    if (this.balance < payment) {\n', '      throw;\n', '    }\n', '\n', '    payments[payee] = 0;\n', '\n', '    if (!payee.send(payment)) {\n', '      throw;\n', '    }\n', '    LogRefundETH(payee,payment);\n', '  }\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  \n', '  using SafeMath for uint;\n', '  \n', '  mapping(address => uint) balances;\n', '  \n', '  /*\n', '   * Fix for the ERC20 short address attack  \n', '  */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint _value) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract ERRLCoin is StandardToken, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "420 ErrL";\n', '  string public symbol = "ERRL";\n', '  uint256 public decimals = 18;\n', '  uint256 constant public ERRL_UNIT = 10 ** 18;\n', '  uint256 public INITIAL_SUPPLY = 1000000000000 * ERRL_UNIT; // 1 trillion ( 1,000,000,000,000 ) ERRL COINS\n', '  uint256 public totalAllocated = 0;             // Counter to keep track of overall token allocation\n', '  uint256 public remaintokens=0;\n', '  uint256 public factor=35;\n', '  //  Constants \n', '    uint256 constant public maxOwnerSupply = 16000000000 * ERRL_UNIT;           // Owner seperate allocation\n', "    uint256 constant public DeveloperSupply = 2000000000 * ERRL_UNIT;     //  Developer's allocation\n", '\n', '\n', 'address public constant OWNERSTAKE = 0xea38f5e13FF11A4F519AC1a8a9AE526979750B01;\n', '   address public constant  DEVSTAKE = 0x625151089d010F2b1B7a72d16Defe2390D596dF8;\n', '   \n', '\n', '\n', '\n', '  event Burn(address indexed from, uint256 value);\n', '\n', '  function ERRLCoin() {\n', '      \n', '        totalAllocated+=maxOwnerSupply+DeveloperSupply;  // Add to total Allocated funds\n', '\n', '   remaintokens=INITIAL_SUPPLY-totalAllocated;\n', '      \n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[OWNERSTAKE] = maxOwnerSupply; // owner seperate ERRL tokens\n', "    balances[DEVSTAKE] = DeveloperSupply; // Developer's share of ERRL tokens for coding the contract\n", "    balances[msg.sender] = remaintokens; // Send remaining tokens to owner's primary wallet from where contract is deployed\n", '  }\n', '\n', '  function burn(uint _value) onlyOwner returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Transfer(msg.sender, 0x0, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/*\n', '  Crowdsale Smart Contract for the 420 ERRL Token project\n', '  This smart contract collects ETH, and in return emits equivalent ERRL tokens and 35% of the purchase amount to the purchasers \n', '*/\n', 'contract Crowdsale is Pausable, PullPayment {\n', '    \n', '    using SafeMath for uint;\n', '\n', '    struct Backer {\n', '    uint weiReceived; // Amount of Ether given\n', '    uint coinSent;\n', '  }\n', '\n', '  /*\n', '  * Constants\n', '  */\n', '  \n', ' uint public constant MIN_CAP = 0; // no minimum cap\n', '  /* Maximum number of ERRLCOINS to sell */\n', '  uint public constant MAX_CAP = 600000000000 * 10 **18; \n', '\n', '  // 600,000,000,000 ERRL COINS (600 billions) \n', '\n', '  /* Crowdsale period */\n', '  uint private constant CROWDSALE_PERIOD = 3000 days;\n', ' /*uint private constant CROWDSALE_PERIOD = 1 seconds;*/\n', '   \n', '  /* Number of ERRL COINS per Ether */\n', '  uint public constant COIN_PER_ETHER = 700000 * 10**18; // 700,000 ERRL coins per eth,  1 eth=350$ Canadian , 1 ERRL coin=0.0005$ Canadian\n', '                                        \n', '\n', '  /*\n', '  * Variables\n', '  */\n', '  /* ERRLCoin contract reference */\n', '  ERRLCoin public coin;\n', '    /* Multisig contract that will receive the Ether */\n', '  address public multisigEther;\n', '  /* Number of Ether received */\n', '  uint public etherReceived;\n', '  \n', '  uint public ETHToSend;\n', '  \n', '  \n', '  /* Number of ERRLCoin sent to Ether contributors */\n', '  uint public coinSentToEther;\n', '  /* Crowdsale start time */\n', '  uint public startTime;\n', '  /* Crowdsale end time */\n', '  uint public endTime;\n', '  \n', '  \n', '  \n', '  \n', '  \n', '  /* Is crowdsale still on going */\n', '  bool public crowdsaleClosed=false;\n', '  \n', '  \n', '\n', '  /* Backers Ether indexed by their Ethereum address */\n', '  mapping(address => Backer) public backers;\n', '\n', '\n', '  /*\n', '  * Modifiers\n', '  */\n', '  \n', '\n', '  modifier respectTimeFrame() {\n', '    require ((now > startTime) || (now < endTime )) ;\n', '    _;\n', '  }\n', '\n', '  /*\n', '   * Event\n', '  */\n', '  event LogReceivedETH(address addr, uint value);\n', '  event LogCoinsEmited(address indexed from, uint amount);\n', '\n', '  /*\n', '   * Constructor\n', '  */\n', '  function Crowdsale(address _ERRLCoinAddress, address _to) {\n', '    coin = ERRLCoin(_ERRLCoinAddress);\n', '    multisigEther = _to;\n', '  }\n', '\n', '  /* \n', '   * The fallback function corresponds to a donation in ETH\n', '   */\n', '  function() stopInEmergency respectTimeFrame payable {\n', '    receiveETH(msg.sender);\n', '  }\n', '\n', '  /* \n', '   * To call to start the crowdsale\n', '   */\n', '  function start() onlyOwner {\n', '   \n', '    startTime = now ;           \n', '    endTime =  now + CROWDSALE_PERIOD;  \n', '\n', '    crowdsaleClosed=false;\n', '   \n', '  \n', '   \n', '  }\n', '\n', '  /*\n', '   *  Receives a donation in Ether\n', '  */\n', '  function receiveETH(address beneficiary) internal {\n', '\n', 'address OWNERICO_STAKE = 0x03bC8e32389082653ea4c25AcF427508499c0Bcb;\n', "    //if (msg.value < MIN_INVEST_ETHER) throw; // Don't accept funding under a predefined threshold\n", '    \n', '    uint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Compute the number of ERRLCoin to send\n', '    //if (coinToSend.add(coinSentToEther) > MAX_CAP) throw; \n', '\n', '    require(coinToSend.add(coinSentToEther) < MAX_CAP); \n', '    require(crowdsaleClosed == false);\n', '    \n', '    \n', '\n', '    Backer backer = backers[beneficiary];\n', '    coin.transfer(beneficiary, coinToSend); // Transfer ERRLCoins right now \n', '\n', '    backer.coinSent = backer.coinSent.add(coinToSend);\n', '    //backer.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer\n', 'uint factor=35;\n', '//uint factoreth=65;\n', '//ETHToSend = (factor.div(100)).mul(backers[msg.sender].weiReceived);\n', '//ETHToSend = backers[msg.sender].weiReceived;\n', '\n', 'ETHToSend = msg.value;\n', '\n', 'ETHToSend=(ETHToSend * 35) / 100;\n', '\n', '//backers[msg.sender].weiReceived=(factoreth.div(100)).mul(backers[msg.sender].weiReceived);\n', '\n', '//backers[msg.sender].weiReceived=backers[msg.sender].weiReceived;\n', '\n', '    //uint ETHToSend = (factor/100).mul(backers[msg.sender].weiReceived);\n', '    \n', '    //ETHToSend=ETHToSend.div(100);\n', '    \n', '   //backers[msg.sender].weiReceived=0; \n', '    \n', '    if (ETHToSend > 0) {\n', '      //asyncSend(msg.sender, ETHToSend); // pull payment to get 35% refund in ETH\n', '      //transfer(msg.sender, ETHToSend);\n', '      beneficiary.transfer(ETHToSend);\n', '    }\n', '    \n', 'LogRefundETH(msg.sender, ETHToSend);\n', '    //backer.weiReceived = backer.weiReceived.sub(ETHToSend);\n', '    \n', '    //backers[msg.sender].weiReceived=(factoreth/100).mul(backers[msg.sender].weiReceived);\n', '    \n', '   //pays=(factoreth.div(100)).mul(msg.value);\n', '\n', '    etherReceived = etherReceived.add((msg.value.mul(65)).div(100)); // Update the total wei collected during the crowdfunding\n', '    //etherReceived=etherReceived.div(100);\n', '    \n', '    coinSentToEther = coinSentToEther.add(coinToSend);\n', '\n', '    // Send events\n', '    LogCoinsEmited(msg.sender ,coinToSend);\n', '    LogReceivedETH(beneficiary, etherReceived); \n', '\n', '   \n', '    coin.transfer(OWNERICO_STAKE,coinToSend); // Transfer ERRLCoins right now to beneficiary ownerICO  \n', '   \n', '\n', '    coinSentToEther = coinSentToEther.add(coinToSend);\n', '\n', '    LogCoinsEmited(OWNERICO_STAKE ,coinToSend);\n', '    \n', '    \n', '    \n', '  }\n', '  \n', '\n', '  /*\n', '   *Compute the ERRLCoin bonus according to the investment period\n', '   */\n', '  function bonus(uint amount) internal constant returns (uint) {\n', '    \n', '    return amount;\n', '  }\n', '\n', ' \n', '\n', '  /*  \n', '  * Failsafe drain\n', '  */\n', '  function drain() onlyOwner {\n', '    if (!owner.send(this.balance)) throw;\n', '    crowdsaleClosed = true;\n', '  }\n', '\n', '  /**\n', '   * Allow to change the team multisig address in the case of emergency.\n', '   */\n', '  function setMultisig(address addr) onlyOwner public {\n', '    //if (addr == address(0)) throw;\n', '    require(addr != address(0));\n', '    multisigEther = addr;\n', '  }\n', '\n', '  /**\n', '   * Manually back ERRLCoin owner address.\n', '   */\n', '  function backERRLCoinOwner() onlyOwner public {\n', '    coin.transferOwnership(owner);\n', '  }\n', '\n', '  /**\n', '   * Transfer remains to owner \n', '   */\n', '  function getRemainCoins() onlyOwner public {\n', '      \n', '    var remains = MAX_CAP - coinSentToEther;\n', '    \n', '    Backer backer = backers[owner];\n', '    coin.transfer(owner, remains); // Transfer ERRLCoins right now \n', '\n', '    backer.coinSent = backer.coinSent.add(remains);\n', '\n', '    coinSentToEther = coinSentToEther.add(remains);\n', '\n', '    // Send events\n', '    LogCoinsEmited(this ,remains);\n', '    LogReceivedETH(owner, etherReceived); \n', '  }\n', '\n', '\n', '  \n', '\n', '}']
