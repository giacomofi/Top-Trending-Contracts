['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface Token { \n', '    function distr(address _to, uint256 _value) external returns (bool);\n', '    function teamdistr(address _to, uint256 _value) external returns (bool);\n', '    function totalSupply() constant external returns (uint256 supply);\n', '    function balanceOf(address _owner) constant external returns (uint256 balance);\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TFFC is ERC20Basic {\n', '\n', '\tusing SafeMath for uint256;\n', '\taddress owner = msg.sender;\n', '\n', '\tmapping (address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\tmapping (address => bool) public blacklist;\n', '\n', '\tstring public constant name = "TFFC";\n', '\tstring public constant symbol = "TF";\n', '\tuint public constant decimals = 8;\n', '\n', '\tuint256 public totalSupply = 50000000e8;//50000000e8;//总量5000万个\n', '\tuint256 public totaTeamRemaining = (totalSupply.div(100).mul(20));\n', '\tuint256 private totaTeamRemainingBak = totaTeamRemaining;\n', '\tuint256 public totalRemaining = (totalSupply.sub(totaTeamRemaining));\n', '\tuint256 private totalRemainingBak = totalRemaining;\n', '\tuint256 public uservalue;\n', '\tuint256 public teamvalue;\n', '\tuint256 private TeamReleaseCount = 0;\n', '\tuint256 private UserSendCount = 0;\n', '\tuint256 private UserSendCountBak = 0; \n', '\tuint256 private totalPhaseValue = 1000e8;\n', '\tbool public distributionuserFinished = false; //用户分发是否结束的标志 false:未结束 true:结束\n', '\tbool public distributionteamFinished = false;//团队分发是否结束的标志 false：未结束  true： 结束\n', '\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event UserDistr(address indexed to, uint256 amount);\n', '    event TeamDistr(address indexed to, uint256 amount);\n', '    event DistrFinished();\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '        _;\n', '\t}\n', '\n', '\tmodifier canUserDistr() {\n', '        require(!distributionuserFinished);\n', '        _;\n', '    }\n', '\n', '    modifier canTeamDistr() {\n', '        require(!distributionteamFinished);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhitelist() {\n', '        require(blacklist[msg.sender] == false);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    function TFFC () public {\n', '    \towner = msg.sender;\n', '    \tuservalue = 1000e8;\n', '    \tteamvalue = (totaTeamRemaining.div(100).mul(20));\n', '    }\n', '\n', '    function teamdistr(address _to, uint256 _amount) canTeamDistr private returns (bool) {\n', '    \tTeamReleaseCount = TeamReleaseCount.add(_amount);\n', '    \ttotaTeamRemaining = totaTeamRemaining.sub(_amount);\n', '    \tbalances[_to] = balances[_to].add(_amount);\n', '    \temit TeamDistr(_to,_amount);\n', '    \temit Transfer(address(0), _to, _amount);\n', '    \t\n', '    \treturn true;\n', '\n', '    \tif (TeamReleaseCount >= totaTeamRemainingBak) {\n', '        \tdistributionteamFinished = true;\n', '        }\n', '    }\n', '\n', '    function teamRelease(address _to) payable canTeamDistr onlyOwner public {\n', '    \tif (teamvalue > totaTeamRemaining) {\n', '\t\t\tteamvalue = totaTeamRemaining;\n', '\t\t}\n', '\n', '\t\trequire(teamvalue <= totaTeamRemaining);\n', '\n', '        teamdistr(_to, teamvalue);\n', '\n', '        if (TeamReleaseCount >= totaTeamRemainingBak) {\n', '        \tdistributionteamFinished = true;\n', '        }\n', '    }\n', '\n', '    function () external payable {\n', '        getTokens();\n', '    }\n', '\n', '    function distr(address _to, uint256 _amount) canUserDistr private returns (bool) {\n', '\t\t\n', '\t\tUserSendCount = UserSendCount.add(_amount);\n', '\t\ttotalRemaining = totalRemaining.sub(_amount);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\tif (UserSendCount < totalRemainingBak) {\n', '\t\t\tif (UserSendCount.sub(UserSendCountBak) >= totalPhaseValue) {\n', '        \t\tuservalue = uservalue.div(2);\n', '        \t\tUserSendCountBak = UserSendCount;\n', '        \t}\n', '\t\t}\n', '\n', '        emit UserDistr(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        \n', '        return true;\n', '        \n', '        if (UserSendCount >= totalRemainingBak) {\n', '        \tdistributionuserFinished = true;\n', '        }\n', '        \n', '    }\n', '\n', '\n', '\tfunction getTokens() payable canUserDistr onlyWhitelist public {\n', '\t\t\n', '\t\tif (uservalue > totalRemaining) {\n', '\t\t\tuservalue = totalRemaining;\n', '\t\t}\n', '\n', '\t\trequire(uservalue <= totalRemaining);\n', '\n', '\t\taddress investor = msg.sender;\n', '        uint256 toGive = uservalue;\n', '\n', '        distr(investor, toGive);\n', '\n', '        if (toGive > 0) {\n', '        \tblacklist[investor] = true;\n', '        }\n', '\n', '        if (UserSendCount >= totalRemainingBak) {\n', '        \tdistributionuserFinished = true;\n', '        }\n', '\t}\n', '\n', '\tfunction transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '    function enableWhitelist(address[] addresses) onlyOwner public {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = false;\n', '        }\n', '    }\n', '\n', '    function disableWhitelist(address[] addresses) onlyOwner public {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function finishUserDistribution() onlyOwner canUserDistr public returns (bool) {\n', '        distributionuserFinished = true;\n', '        emit DistrFinished();\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '\t    return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function withdraw() onlyOwner public {\n', '        uint256 etherBalance = address(this).balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '\n', '    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n', '        ForeignToken t = ForeignToken(tokenAddress);\n', '        uint bal = t.balanceOf(who);\n', '        return bal;\n', '    }\n', '\n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface Token { \n', '    function distr(address _to, uint256 _value) external returns (bool);\n', '    function teamdistr(address _to, uint256 _value) external returns (bool);\n', '    function totalSupply() constant external returns (uint256 supply);\n', '    function balanceOf(address _owner) constant external returns (uint256 balance);\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TFFC is ERC20Basic {\n', '\n', '\tusing SafeMath for uint256;\n', '\taddress owner = msg.sender;\n', '\n', '\tmapping (address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\tmapping (address => bool) public blacklist;\n', '\n', '\tstring public constant name = "TFFC";\n', '\tstring public constant symbol = "TF";\n', '\tuint public constant decimals = 8;\n', '\n', '\tuint256 public totalSupply = 50000000e8;//50000000e8;//总量5000万个\n', '\tuint256 public totaTeamRemaining = (totalSupply.div(100).mul(20));\n', '\tuint256 private totaTeamRemainingBak = totaTeamRemaining;\n', '\tuint256 public totalRemaining = (totalSupply.sub(totaTeamRemaining));\n', '\tuint256 private totalRemainingBak = totalRemaining;\n', '\tuint256 public uservalue;\n', '\tuint256 public teamvalue;\n', '\tuint256 private TeamReleaseCount = 0;\n', '\tuint256 private UserSendCount = 0;\n', '\tuint256 private UserSendCountBak = 0; \n', '\tuint256 private totalPhaseValue = 1000e8;\n', '\tbool public distributionuserFinished = false; //用户分发是否结束的标志 false:未结束 true:结束\n', '\tbool public distributionteamFinished = false;//团队分发是否结束的标志 false：未结束  true： 结束\n', '\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event UserDistr(address indexed to, uint256 amount);\n', '    event TeamDistr(address indexed to, uint256 amount);\n', '    event DistrFinished();\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '        _;\n', '\t}\n', '\n', '\tmodifier canUserDistr() {\n', '        require(!distributionuserFinished);\n', '        _;\n', '    }\n', '\n', '    modifier canTeamDistr() {\n', '        require(!distributionteamFinished);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhitelist() {\n', '        require(blacklist[msg.sender] == false);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    function TFFC () public {\n', '    \towner = msg.sender;\n', '    \tuservalue = 1000e8;\n', '    \tteamvalue = (totaTeamRemaining.div(100).mul(20));\n', '    }\n', '\n', '    function teamdistr(address _to, uint256 _amount) canTeamDistr private returns (bool) {\n', '    \tTeamReleaseCount = TeamReleaseCount.add(_amount);\n', '    \ttotaTeamRemaining = totaTeamRemaining.sub(_amount);\n', '    \tbalances[_to] = balances[_to].add(_amount);\n', '    \temit TeamDistr(_to,_amount);\n', '    \temit Transfer(address(0), _to, _amount);\n', '    \t\n', '    \treturn true;\n', '\n', '    \tif (TeamReleaseCount >= totaTeamRemainingBak) {\n', '        \tdistributionteamFinished = true;\n', '        }\n', '    }\n', '\n', '    function teamRelease(address _to) payable canTeamDistr onlyOwner public {\n', '    \tif (teamvalue > totaTeamRemaining) {\n', '\t\t\tteamvalue = totaTeamRemaining;\n', '\t\t}\n', '\n', '\t\trequire(teamvalue <= totaTeamRemaining);\n', '\n', '        teamdistr(_to, teamvalue);\n', '\n', '        if (TeamReleaseCount >= totaTeamRemainingBak) {\n', '        \tdistributionteamFinished = true;\n', '        }\n', '    }\n', '\n', '    function () external payable {\n', '        getTokens();\n', '    }\n', '\n', '    function distr(address _to, uint256 _amount) canUserDistr private returns (bool) {\n', '\t\t\n', '\t\tUserSendCount = UserSendCount.add(_amount);\n', '\t\ttotalRemaining = totalRemaining.sub(_amount);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\tif (UserSendCount < totalRemainingBak) {\n', '\t\t\tif (UserSendCount.sub(UserSendCountBak) >= totalPhaseValue) {\n', '        \t\tuservalue = uservalue.div(2);\n', '        \t\tUserSendCountBak = UserSendCount;\n', '        \t}\n', '\t\t}\n', '\n', '        emit UserDistr(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        \n', '        return true;\n', '        \n', '        if (UserSendCount >= totalRemainingBak) {\n', '        \tdistributionuserFinished = true;\n', '        }\n', '        \n', '    }\n', '\n', '\n', '\tfunction getTokens() payable canUserDistr onlyWhitelist public {\n', '\t\t\n', '\t\tif (uservalue > totalRemaining) {\n', '\t\t\tuservalue = totalRemaining;\n', '\t\t}\n', '\n', '\t\trequire(uservalue <= totalRemaining);\n', '\n', '\t\taddress investor = msg.sender;\n', '        uint256 toGive = uservalue;\n', '\n', '        distr(investor, toGive);\n', '\n', '        if (toGive > 0) {\n', '        \tblacklist[investor] = true;\n', '        }\n', '\n', '        if (UserSendCount >= totalRemainingBak) {\n', '        \tdistributionuserFinished = true;\n', '        }\n', '\t}\n', '\n', '\tfunction transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '    function enableWhitelist(address[] addresses) onlyOwner public {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = false;\n', '        }\n', '    }\n', '\n', '    function disableWhitelist(address[] addresses) onlyOwner public {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function finishUserDistribution() onlyOwner canUserDistr public returns (bool) {\n', '        distributionuserFinished = true;\n', '        emit DistrFinished();\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '\t    return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function withdraw() onlyOwner public {\n', '        uint256 etherBalance = address(this).balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '\n', '    function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n', '        ForeignToken t = ForeignToken(tokenAddress);\n', '        uint bal = t.balanceOf(who);\n', '        return bal;\n', '    }\n', '\n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '}']
