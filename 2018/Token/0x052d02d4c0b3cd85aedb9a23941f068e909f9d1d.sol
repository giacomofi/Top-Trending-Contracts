['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b > 0); \n', '      uint256 c = a / b;\n', '      assert(a == b * c + a % b); \n', '      return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Standard {\n', '\n', '\n', '    // total amount of tokens\n', '    function totalSupply() public constant returns (uint256) ;\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool);\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public  returns (bool);\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256);\n', '}\n', '\n', 'contract ERC20StandardToken is ERC20Standard {\n', '    using SafeMath for uint256;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '\n', '    function transfer(address to, uint256 value) public returns (bool){\n', '        require(to !=address(0));\n', '        require(value<=balances[msg.sender]);\n', '\n', '        balances[msg.sender]=balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(msg.sender,to,value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool){\n', '        require(to != address(0));\n', '        require(value <= balances[from]);\n', '        require(value <= allowances[from][msg.sender]);\n', '\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowances[from][msg.sender] = allowances[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool){\n', '        require((value == 0) || (allowances[msg.sender][spender] == 0));\n', '        allowances[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public constant returns (uint256){\n', '        return allowances[owner][spender];\n', '    }\n', '\n', '\n', '    function balanceOf(address owner) public constant returns (uint256){\n', '        return balances[owner];\n', '    }\n', '}\n', '\n', 'contract IOBT is ERC20StandardToken, Ownable {\n', '\n', '    // token information\n', '    string public constant name = "Internet of Blockchain Token";\n', '    string public constant symbol = "IOBT";\n', '    uint8 public constant decimals = 18;\n', '    uint256 TotalTokenSupply=5*(10**8)*(10**uint256(decimals));\n', '\n', '     function totalSupply() public constant returns (uint256 ) {\n', '          return TotalTokenSupply;\n', '      }\n', '\n', '    /// transfer all tokens to holders\n', '    address public constant MAIN_HOLDER_ADDR=0x7e647B726052238AE2439BD36257C2a2bB283dDa;\n', '\n', '\n', '    function IOBT() public onlyOwner{\n', '        balances[MAIN_HOLDER_ADDR]+=TotalTokenSupply;\n', '        emit Transfer(0,MAIN_HOLDER_ADDR,TotalTokenSupply);\n', '      }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b > 0); \n', '      uint256 c = a / b;\n', '      assert(a == b * c + a % b); \n', '      return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Standard {\n', '\n', '\n', '    // total amount of tokens\n', '    function totalSupply() public constant returns (uint256) ;\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool);\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public  returns (bool);\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256);\n', '}\n', '\n', 'contract ERC20StandardToken is ERC20Standard {\n', '    using SafeMath for uint256;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '\n', '    function transfer(address to, uint256 value) public returns (bool){\n', '        require(to !=address(0));\n', '        require(value<=balances[msg.sender]);\n', '\n', '        balances[msg.sender]=balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(msg.sender,to,value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool){\n', '        require(to != address(0));\n', '        require(value <= balances[from]);\n', '        require(value <= allowances[from][msg.sender]);\n', '\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowances[from][msg.sender] = allowances[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool){\n', '        require((value == 0) || (allowances[msg.sender][spender] == 0));\n', '        allowances[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public constant returns (uint256){\n', '        return allowances[owner][spender];\n', '    }\n', '\n', '\n', '    function balanceOf(address owner) public constant returns (uint256){\n', '        return balances[owner];\n', '    }\n', '}\n', '\n', 'contract IOBT is ERC20StandardToken, Ownable {\n', '\n', '    // token information\n', '    string public constant name = "Internet of Blockchain Token";\n', '    string public constant symbol = "IOBT";\n', '    uint8 public constant decimals = 18;\n', '    uint256 TotalTokenSupply=5*(10**8)*(10**uint256(decimals));\n', '\n', '     function totalSupply() public constant returns (uint256 ) {\n', '          return TotalTokenSupply;\n', '      }\n', '\n', '    /// transfer all tokens to holders\n', '    address public constant MAIN_HOLDER_ADDR=0x7e647B726052238AE2439BD36257C2a2bB283dDa;\n', '\n', '\n', '    function IOBT() public onlyOwner{\n', '        balances[MAIN_HOLDER_ADDR]+=TotalTokenSupply;\n', '        emit Transfer(0,MAIN_HOLDER_ADDR,TotalTokenSupply);\n', '      }\n', '}']
