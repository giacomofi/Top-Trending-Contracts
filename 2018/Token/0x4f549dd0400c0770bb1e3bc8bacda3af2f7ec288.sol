['pragma solidity ^0.4.25;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param _addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address _addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(_addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/VestingPrivateSale.sol\n', '\n', '/**\n', ' * Vesting smart contract for the private sale. Vesting period is 18 months in total.\n', ' * All 6 months 33% percent of the vested tokens will be released - step function.\n', ' */\n', 'contract VestingPrivateSale is Ownable {\n', '\n', '    uint256 constant public sixMonth = 182 days;  \n', '    uint256 constant public twelveMonth = 365 days;  \n', '    uint256 constant public eighteenMonth = sixMonth + twelveMonth;\n', '\n', '    ERC20Basic public erc20Contract;\n', '\n', '    struct Locking {\n', '        uint256 bucket1;\n', '        uint256 bucket2;\n', '        uint256 bucket3;\n', '        uint256 startDate;\n', '    }\n', '\n', '    mapping(address => Locking) public lockingMap;\n', '\n', '    event ReleaseVestingEvent(address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Constructor. With the reference to the ERC20 contract\n', '     */\n', '    constructor(address _erc20) public {\n', '        require(AddressUtils.isContract(_erc20), "Address is not a smart contract");\n', '\n', '        erc20Contract = ERC20Basic(_erc20);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds vested tokens to this contract. ERC20 contract has assigned the tokens. \n', '     * @param _tokenHolder The token holder.\n', '     * @param _bucket1 The first bucket. Will be available after 6 months.\n', '     * @param _bucket2 The second bucket. Will be available after 12 months.\n', '     * @param _bucket3 The third bucket. Will be available after 18 months.\n', '     * @return True if accepted.\n', '     */\n', '    function addVested(\n', '        address _tokenHolder, \n', '        uint256 _bucket1, \n', '        uint256 _bucket2, \n', '        uint256 _bucket3\n', '    ) \n', '        public \n', '        returns (bool) \n', '    {\n', '        require(msg.sender == address(erc20Contract), "ERC20 contract required");\n', '        require(lockingMap[_tokenHolder].startDate == 0, "Address is already vested");\n', '\n', '        lockingMap[_tokenHolder].startDate = block.timestamp;\n', '        lockingMap[_tokenHolder].bucket1 = _bucket1;\n', '        lockingMap[_tokenHolder].bucket2 = _bucket2;\n', '        lockingMap[_tokenHolder].bucket3 = _bucket3;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount of the total assigned tokens of a tokenholder.\n', '     * @param _tokenHolder The address to query the balance of.\n', '     * @return The total amount of owned tokens (vested + available). \n', '     */\n', '    function balanceOf(\n', '        address _tokenHolder\n', '    ) \n', '        public \n', '        view \n', '        returns (uint256) \n', '    {\n', '        return lockingMap[_tokenHolder].bucket1 + lockingMap[_tokenHolder].bucket2 + lockingMap[_tokenHolder].bucket3;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount of currently available (unlocked) tokens. This amount can be unlocked. \n', '     * @param _tokenHolder The address to query the balance of.\n', '     * @return The total amount of owned and available tokens.\n', '     */\n', '    function availableBalanceOf(\n', '        address _tokenHolder\n', '    ) \n', '        public \n', '        view \n', '        returns (uint256) \n', '    {\n', '        uint256 startDate = lockingMap[_tokenHolder].startDate;\n', '        uint256 tokens = 0;\n', '        \n', '        if (startDate + sixMonth <= block.timestamp) {\n', '            tokens = lockingMap[_tokenHolder].bucket1;\n', '        }\n', '\n', '        if (startDate + twelveMonth <= block.timestamp) {\n', '            tokens = tokens + lockingMap[_tokenHolder].bucket2;\n', '        }\n', '\n', '        if (startDate + eighteenMonth <= block.timestamp) {\n', '            tokens = tokens + lockingMap[_tokenHolder].bucket3;\n', '        }\n', '\n', '        return tokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Releases unlocked tokens of the transaction sender. \n', '     * @dev This function will transfer unlocked tokens to the owner.\n', '     * @return The total amount of released tokens.\n', '     */\n', '    function releaseBuckets() \n', '        public \n', '        returns (uint256) \n', '    {\n', '        return _releaseBuckets(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Admin function.\n', '     * @dev Releases unlocked tokens of the _tokenHolder. \n', '     * @dev This function will transfer unlocked tokens to the _tokenHolder.\n', '     * @param _tokenHolder Address of the token owner to release tokens.\n', '     * @return The total amount of released tokens.\n', '     */\n', '    function releaseBuckets(\n', '        address _tokenHolder\n', '    ) \n', '        public \n', '        onlyOwner\n', '        returns (uint256) \n', '    {\n', '        return _releaseBuckets(_tokenHolder);\n', '    }\n', '\n', '    function _releaseBuckets(\n', '        address _tokenHolder\n', '    ) \n', '        private \n', '        returns (uint256) \n', '    {\n', '        require(lockingMap[_tokenHolder].startDate != 0, "Is not a locked address");\n', '        uint256 startDate = lockingMap[_tokenHolder].startDate;\n', '        uint256 tokens = 0;\n', '        \n', '        if (startDate + sixMonth <= block.timestamp) {\n', '            tokens = lockingMap[_tokenHolder].bucket1;\n', '            lockingMap[_tokenHolder].bucket1 = 0;\n', '        }\n', '\n', '        if (startDate + twelveMonth <= block.timestamp) {\n', '            tokens = tokens + lockingMap[_tokenHolder].bucket2;\n', '            lockingMap[_tokenHolder].bucket2 = 0;\n', '        }\n', '\n', '        if (startDate + eighteenMonth <= block.timestamp) {\n', '            tokens = tokens + lockingMap[_tokenHolder].bucket3;\n', '            lockingMap[_tokenHolder].bucket3 = 0;\n', '        }\n', '        \n', '        require(erc20Contract.transfer(_tokenHolder, tokens), "Transfer failed");\n', '        emit ReleaseVestingEvent(_tokenHolder, tokens);\n', '\n', '        return tokens;\n', '    }\n', '}\n', '\n', '// File: contracts/VestingTreasury.sol\n', '\n', '/**\n', ' * Treasury vesting smart contract. Vesting period is over 36 months.\n', ' * Tokens are locked for 6 months. After that releasing the tokens over 30 months with a linear function.\n', ' */\n', 'contract VestingTreasury {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant public sixMonths = 182 days;  \n', '    uint256 constant public thirtyMonths = 912 days;  \n', '\n', '    ERC20Basic public erc20Contract;\n', '\n', '    struct Locking {\n', '        uint256 startDate;      // date when the release process of the vesting will start. \n', '        uint256 initialized;    // initialized amount of tokens\n', '        uint256 released;       // already released tokens\n', '    }\n', '\n', '    mapping(address => Locking) public lockingMap;\n', '\n', '    event ReleaseVestingEvent(address indexed to, uint256 value);\n', '\n', '    /**\n', '    * @dev Constructor. With the reference to the ERC20 contract\n', '    */\n', '    constructor(address _erc20) public {\n', '        require(AddressUtils.isContract(_erc20), "Address is not a smart contract");\n', '\n', '        erc20Contract = ERC20Basic(_erc20);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds vested tokens to this contract. ERC20 contract has assigned the tokens. \n', '     * @param _tokenHolder The token holder.\n', '     * @param _value The amount of tokens to protect.\n', '     * @return True if accepted.\n', '     */\n', '    function addVested(\n', '        address _tokenHolder, \n', '        uint256 _value\n', '    ) \n', '        public \n', '        returns (bool) \n', '    {\n', '        require(msg.sender == address(erc20Contract), "ERC20 contract required");\n', '        require(lockingMap[_tokenHolder].startDate == 0, "Address is already vested");\n', '\n', '        lockingMap[_tokenHolder].startDate = block.timestamp + sixMonths;\n', '        lockingMap[_tokenHolder].initialized = _value;\n', '        lockingMap[_tokenHolder].released = 0;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount of the total currently vested and available tokens.\n', '     * @param _tokenHolder The address to query the balance of.\n', '     * @return The total amount of owned tokens (vested + available). \n', '     */\n', '    function balanceOf(\n', '        address _tokenHolder\n', '    ) \n', '        public \n', '        view \n', '        returns (uint256) \n', '    {\n', '        return lockingMap[_tokenHolder].initialized.sub(lockingMap[_tokenHolder].released);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount of currently available (unlocked) tokens. This amount can be unlocked. \n', '     * @param _tokenHolder The address to query the balance of.\n', '     * @return The total amount of owned and available tokens.\n', '     */\n', '    function availableBalanceOf(\n', '        address _tokenHolder\n', '    ) \n', '        public \n', '        view \n', '        returns (uint256) \n', '    {\n', '        uint256 startDate = lockingMap[_tokenHolder].startDate;\n', '        \n', '        if (block.timestamp <= startDate) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 tmpAvailableTokens = 0;\n', '        if (block.timestamp >= startDate + thirtyMonths) {\n', '            tmpAvailableTokens = lockingMap[_tokenHolder].initialized;\n', '        } else {\n', '            uint256 timeDiff = block.timestamp - startDate;\n', '            uint256 totalBalance = lockingMap[_tokenHolder].initialized;\n', '\n', '            tmpAvailableTokens = totalBalance.mul(timeDiff).div(thirtyMonths);\n', '        }\n', '\n', '        uint256 availableTokens = tmpAvailableTokens.sub(lockingMap[_tokenHolder].released);\n', '        require(availableTokens <= lockingMap[_tokenHolder].initialized, "Max value exceeded");\n', '\n', '        return availableTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Releases unlocked tokens of the transaction sender. \n', '     * @dev This function will transfer unlocked tokens to the owner.\n', '     * @return The total amount of released tokens.\n', '     */\n', '    function releaseTokens() \n', '        public \n', '        returns (uint256) \n', '    {\n', '        require(lockingMap[msg.sender].startDate != 0, "Sender is not a vested address");\n', '\n', '        uint256 tokens = availableBalanceOf(msg.sender);\n', '\n', '        lockingMap[msg.sender].released = lockingMap[msg.sender].released.add(tokens);\n', '        require(lockingMap[msg.sender].released <= lockingMap[msg.sender].initialized, "Max value exceeded");\n', '\n', '        require(erc20Contract.transfer(msg.sender, tokens), "Transfer failed");\n', '        emit ReleaseVestingEvent(msg.sender, tokens);\n', '\n', '        return tokens;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/LockedToken.sol\n', '\n', 'contract LockedToken is CappedToken {\n', '    bool public transferActivated = false;\n', '\n', '    event TransferActivatedEvent();\n', '\n', '    constructor(uint256 _cap) public CappedToken(_cap) {\n', '    }\n', '\n', '    /**\n', '     * @dev Admin function.\n', '     * @dev Activates the token transfer. This action cannot be undone. \n', '     * @dev This function should be called after the ICO. \n', '     * @return True if ok. \n', '     */\n', '    function activateTransfer() \n', '        public \n', '        onlyOwner\n', '        returns (bool) \n', '    {\n', '        require(transferActivated == false, "Already activated");\n', '\n', '        transferActivated = true;\n', '\n', '        emit TransferActivatedEvent();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(\n', '        address _to, \n', '        uint256 _value\n', '    ) \n', '        public \n', '        returns (bool) \n', '    {\n', '        require(transferActivated, "Transfer is not activated");\n', '        require(_to != address(this), "Invalid _to address");\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * @param _from The address which you want to send tokens from.\n', '     * @param _to The address which you want to transfer to.\n', '     * @param _value The amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(\n', '        address _from, \n', '        address _to, \n', '        uint256 _value\n', '    ) \n', '        public \n', '        returns (bool) \n', '    {\n', '        require(transferActivated, "TransferFrom is not activated");\n', '        require(_to != address(this), "Invalid _to address");\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/AlprockzToken.sol\n', '\n', '/**\n', ' * @title The Alprockz ERC20 Token\n', ' */\n', 'contract AlprockzToken is LockedToken {\n', '    \n', '    string public constant name = "AlpRockz";\n', '    string public constant symbol = "APZ";\n', '    uint8 public constant decimals = 18;\n', '    VestingPrivateSale public vestingPrivateSale;\n', '    VestingTreasury public vestingTreasury;\n', '\n', '    constructor() public LockedToken(175 * 1000000 * (10 ** uint256(decimals))) {\n', '    }\n', '\n', '    /**\n', '     * @dev Admin function.\n', '     * @dev Inits the VestingPrivateSale functionality. \n', '     * @dev Precondition: VestingPrivateSale smart contract must be deployed!\n', "     * @param _vestingContractAddr The address of the vesting contract for the function 'mintPrivateSale(...)'.\n", '     * @return True if everything is ok.\n', '     */\n', '    function initMintVestingPrivateSale(\n', '        address _vestingContractAddr\n', '    ) \n', '        external\n', '        onlyOwner\n', '        returns (bool) \n', '    {\n', '        require(address(vestingPrivateSale) == address(0x0), "Already initialized");\n', '        require(address(this) != _vestingContractAddr, "Invalid address");\n', '        require(AddressUtils.isContract(_vestingContractAddr), "Address is not a smart contract");\n', '        \n', '        vestingPrivateSale = VestingPrivateSale(_vestingContractAddr);\n', '        require(address(this) == address(vestingPrivateSale.erc20Contract()), "Vesting link address not match");\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Admin function.\n', '     * @dev Inits the VestingTreasury functionality. \n', '     * @dev Precondition: VestingTreasury smart contract must be deployed!\n', "     * @param _vestingContractAddr The address of the vesting contract for the function 'mintTreasury(...)'.\n", '     * @return True if everything is ok.\n', '     */\n', '    function initMintVestingTreasury(\n', '        address _vestingContractAddr\n', '    ) \n', '        external\n', '        onlyOwner\n', '        returns (bool) \n', '    {\n', '        require(address(vestingTreasury) == address(0x0), "Already initialized");\n', '        require(address(this) != _vestingContractAddr, "Invalid address");\n', '        require(AddressUtils.isContract(_vestingContractAddr), "Address is not a smart contract");\n', '        \n', '        vestingTreasury = VestingTreasury(_vestingContractAddr);\n', '        require(address(this) == address(vestingTreasury.erc20Contract()), "Vesting link address not match");\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Admin function.\n', '     * @dev Bulk mint function to save gas. \n', '     * @dev both arrays requires to have the same length.\n', '     * @param _recipients List of recipients.\n', '     * @param _tokens List of tokens to assign to the recipients.\n', '     */\n', '    function mintArray(\n', '        address[] _recipients, \n', '        uint256[] _tokens\n', '    ) \n', '        external\n', '        onlyOwner \n', '        returns (bool) \n', '    {\n', '        require(_recipients.length == _tokens.length, "Array length not match");\n', '        require(_recipients.length <= 40, "Too many recipients");\n', '\n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '            require(super.mint(_recipients[i], _tokens[i]), "Mint failed");\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Admin function.\n', '     * @dev Bulk mintPrivateSale function to save gas. \n', '     * @dev both arrays are required to have the same length.\n', '     * @dev Vesting: 25% directly available, 25% after 6, 25% after 12 and 25% after 18 months. \n', '     * @param _recipients List of recipients.\n', '     * @param _tokens List of tokens to assign to the recipients.\n', '     */\n', '    function mintPrivateSale(\n', '        address[] _recipients, \n', '        uint256[] _tokens\n', '    ) \n', '        external \n', '        onlyOwner\n', '        returns (bool) \n', '    {\n', '        require(address(vestingPrivateSale) != address(0x0), "Init required");\n', '        require(_recipients.length == _tokens.length, "Array length not match");\n', '        require(_recipients.length <= 10, "Too many recipients");\n', '\n', '\n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '\n', '            address recipient = _recipients[i];\n', '            uint256 token = _tokens[i];\n', '\n', '            uint256 first;\n', '            uint256 second; \n', '            uint256 third; \n', '            uint256 fourth;\n', '            (first, second, third, fourth) = splitToFour(token);\n', '\n', '            require(super.mint(recipient, first), "Mint failed");\n', '\n', '            uint256 totalVested = second + third + fourth;\n', '            require(super.mint(address(vestingPrivateSale), totalVested), "Mint failed");\n', '            require(vestingPrivateSale.addVested(recipient, second, third, fourth), "Vesting failed");\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Admin function.\n', '     * @dev Bulk mintTreasury function to save gas. \n', '     * @dev both arrays are required to have the same length.\n', '     * @dev Vesting: Tokens are locked for 6 months. After that the tokens are released in a linear way.\n', '     * @param _recipients List of recipients.\n', '     * @param _tokens List of tokens to assign to the recipients.\n', '     */\n', '    function mintTreasury(\n', '        address[] _recipients, \n', '        uint256[] _tokens\n', '    ) \n', '        external \n', '        onlyOwner\n', '        returns (bool) \n', '    {\n', '        require(address(vestingTreasury) != address(0x0), "Init required");\n', '        require(_recipients.length == _tokens.length, "Array length not match");\n', '        require(_recipients.length <= 10, "Too many recipients");\n', '\n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '\n', '            address recipient = _recipients[i];\n', '            uint256 token = _tokens[i];\n', '\n', '            require(super.mint(address(vestingTreasury), token), "Mint failed");\n', '            require(vestingTreasury.addVested(recipient, token), "Vesting failed");\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function splitToFour(\n', '        uint256 _amount\n', '    ) \n', '        private \n', '        pure \n', '        returns (\n', '            uint256 first, \n', '            uint256 second, \n', '            uint256 third, \n', '            uint256 fourth\n', '        ) \n', '    {\n', '        require(_amount >= 4, "Minimum amount");\n', '\n', '        uint256 rest = _amount % 4;\n', '\n', '        uint256 quarter = (_amount - rest) / 4;\n', '\n', '        first = quarter + rest;\n', '        second = quarter;\n', '        third = quarter;\n', '        fourth = quarter;\n', '    }\n', '}']