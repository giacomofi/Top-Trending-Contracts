['pragma solidity 0.4.21;\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract BBTCToken is StandardToken, Owned {\n', '\n', '    /* Constants */\n', '\n', '    // Token Name\n', '    string public constant name = "BloxOffice token";\n', '    // Ticker Symbol\n', '    string public constant symbol = "BBTC";\n', '    // Decimals\n', '    uint8 public constant decimals = 18;\n', '\n', '    bool public tokenSaleClosed = false;\n', '\n', '\n', '\n', '    /* Owners */\n', '\n', '    // Ethereum fund owner wallet\n', '    address public _fundowner = 0x761cE04C269314fAfCC545301414BfDA21539A75;\n', '\n', '    // Dev Team multisig wallet\n', '    address public _devteam = 0xb3871355181558059fB22ae7AfAd415499ae6f1E;\n', '\n', '    // Advisors & Mentors multisig wallet\n', '    address public _mentors = 0x589789B67aE612f47503E80ED14A18593C1C79BE;\n', '\n', '    //Bounty address\n', '    address public _bounty = 0x923A03dE5816CCB29684F6D420e774d721Ac6962;\n', '\n', '    //private Sale; multisig wallet\n', '    address public _privateSale = 0x90aBD12D92c0E5f5BcD2195ee3C6C15026506B96;\n', '\n', '    /* Token Distribution */\n', '\n', '    // Total supply of Tokens 999 Million\n', '    uint256 public totalSupply = 999999999 * 10**uint256(decimals);\n', '\n', '    // CrowdSale hard cap\n', '    uint256 public TOKENS_SALE_HARD_CAP = 669999999 * 10**uint256(decimals);\n', '\n', '    //Dev Team\n', '    uint256 public DEV_TEAM = 160000000 * 10**uint256(decimals);\n', '\n', '    //Mentors\n', '    uint256 public MENTORS = 80000000 * 10**uint256(decimals);\n', '\n', '    //Bounty\n', '    uint256 public BOUNTY = 20000000 * 10**uint256(decimals);\n', '\n', '    //Private Sale\n', '    uint256 public PRIVATE = 70000000 * 10**uint256(decimals);\n', '\n', '    /* Current max supply */\n', '    uint256 public currentSupply;\n', '\n', '\n', '    //Dates\n', '    //Private Sale\n', '    uint64 private constant privateSaleDate = 1519756200;\n', '\n', '    //Pre-sale Start Date 15 April\n', '    uint64 private constant presaleStartDate = 1523730600;\n', '    //Pre-sale End Date 15 May\n', '    uint64 private constant presaleEndDate = 1526408999;\n', '\n', '\n', '    //CrowdSale Start Date 22-May\n', '    uint64 private constant crowdSaleStart = 1526927400;\n', '    //CrowdSale End Date 6 July\n', '    uint64 private constant crowdSaleEnd = 1530901799;\n', '\n', '\n', '    /* Base exchange rate is set to 1 ETH = 2500 BBTC */\n', '    uint256 public constant BASE_RATE = 2500;\n', '\n', '    /* Constructor */\n', '    function BBTCToken(){\n', '      //Assign the initial tokens\n', '      //For dev team\n', '      balances[_devteam] = DEV_TEAM;\n', '\n', '      //For mentors\n', '      balances[_mentors] = MENTORS;\n', '\n', '      //For bounty\n', '      balances[_bounty] = BOUNTY;\n', '\n', '      //For private\n', '      balances[_privateSale] = PRIVATE;\n', '\n', '    }\n', '\n', '    /// start Token sale\n', '    function startSale () public onlyOwner{\n', '      tokenSaleClosed = false;\n', '    }\n', '\n', '    //stop Token sale\n', '    function stopSale () public onlyOwner {\n', '      tokenSaleClosed = true;\n', '    }\n', '\n', '    /// @return if the token sale is finished\n', '      function saleDue() public view returns (bool) {\n', '          return crowdSaleEnd < uint64(block.timestamp);\n', '      }\n', '\n', '    modifier inProgress {\n', '        require(currentSupply < TOKENS_SALE_HARD_CAP\n', '                && !tokenSaleClosed\n', '                && !saleDue());\n', '        _;\n', '    }\n', '\n', '    /// @dev This default function allows token to be purchased by directly\n', '    /// sending ether to this smart contract.\n', '    function () public payable {\n', '        purchaseTokens(msg.sender);\n', '    }\n', '\n', '    /// @dev Issue token based on Ether received.\n', '    /// @param _beneficiary Address that newly issued token will be sent to.\n', '    function purchaseTokens(address _beneficiary) internal inProgress {\n', '\n', '        uint256 tokens = computeTokenAmount(msg.value);\n', '\n', '        balances[_beneficiary] = balances[_beneficiary].add(tokens);\n', '\n', '        /// forward the raised funds to the fund address\n', '        _fundowner.transfer(msg.value);\n', '    }\n', '\n', '\n', '    /// @dev Compute the amount of ING token that can be purchased.\n', '    /// @param ethAmount Amount of Ether to purchase ING.\n', '    /// @return Amount of ING token to purchase\n', '    function computeTokenAmount(uint256 ethAmount) internal view returns (uint256 tokens) {\n', '        /// the percentage value (0-100) of the discount for each tier\n', '        uint64 discountPercentage = currentTierDiscountPercentage();\n', '\n', '        uint256 tokenBase = ethAmount.mul(BASE_RATE);\n', '        uint256 tokenBonus = tokenBase.mul(discountPercentage).div(100);\n', '\n', '        tokens = tokenBase.add(tokenBonus);\n', '    }\n', '\n', '\n', '    /// @dev Determine the current sale tier.\n', '      /// @return the index of the current sale tier.\n', '      function currentTierDiscountPercentage() internal view returns (uint64) {\n', '          uint64 _now = uint64(block.timestamp);\n', '\n', '          if(_now > crowdSaleStart) return 0;\n', '          if(_now > presaleStartDate) return 10;\n', '          if(_now > privateSaleDate) return 15;\n', '          return 0;\n', '      }\n', '\n', '    /// @dev issue tokens for a single buyer\n', '    /// @param _beneficiary addresses that the tokens will be sent to.\n', '    /// @param _tokensAmount the amount of tokens, with decimals expanded (full).\n', '    function doIssueTokens(address _beneficiary, uint256 _tokensAmount) public {\n', '        require(_beneficiary != address(0));\n', '\n', '        // compute without actually increasing it\n', '        uint256 increasedTotalSupply = currentSupply.add(_tokensAmount);\n', '        // roll back if hard cap reached\n', '        require(increasedTotalSupply <= TOKENS_SALE_HARD_CAP);\n', '\n', '        // increase token total supply\n', '          currentSupply = increasedTotalSupply;\n', '        // update the buyer&#39;s balance to number of tokens sent\n', '        balances[_beneficiary] = balances[_beneficiary].add(_tokensAmount);\n', '    }\n', '\n', '\n', '    /// @dev Returns the current price.\n', '    function price() public view returns (uint256 tokens) {\n', '      return computeTokenAmount(1 ether);\n', '    }\n', '  }']
['pragma solidity 0.4.21;\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract BBTCToken is StandardToken, Owned {\n', '\n', '    /* Constants */\n', '\n', '    // Token Name\n', '    string public constant name = "BloxOffice token";\n', '    // Ticker Symbol\n', '    string public constant symbol = "BBTC";\n', '    // Decimals\n', '    uint8 public constant decimals = 18;\n', '\n', '    bool public tokenSaleClosed = false;\n', '\n', '\n', '\n', '    /* Owners */\n', '\n', '    // Ethereum fund owner wallet\n', '    address public _fundowner = 0x761cE04C269314fAfCC545301414BfDA21539A75;\n', '\n', '    // Dev Team multisig wallet\n', '    address public _devteam = 0xb3871355181558059fB22ae7AfAd415499ae6f1E;\n', '\n', '    // Advisors & Mentors multisig wallet\n', '    address public _mentors = 0x589789B67aE612f47503E80ED14A18593C1C79BE;\n', '\n', '    //Bounty address\n', '    address public _bounty = 0x923A03dE5816CCB29684F6D420e774d721Ac6962;\n', '\n', '    //private Sale; multisig wallet\n', '    address public _privateSale = 0x90aBD12D92c0E5f5BcD2195ee3C6C15026506B96;\n', '\n', '    /* Token Distribution */\n', '\n', '    // Total supply of Tokens 999 Million\n', '    uint256 public totalSupply = 999999999 * 10**uint256(decimals);\n', '\n', '    // CrowdSale hard cap\n', '    uint256 public TOKENS_SALE_HARD_CAP = 669999999 * 10**uint256(decimals);\n', '\n', '    //Dev Team\n', '    uint256 public DEV_TEAM = 160000000 * 10**uint256(decimals);\n', '\n', '    //Mentors\n', '    uint256 public MENTORS = 80000000 * 10**uint256(decimals);\n', '\n', '    //Bounty\n', '    uint256 public BOUNTY = 20000000 * 10**uint256(decimals);\n', '\n', '    //Private Sale\n', '    uint256 public PRIVATE = 70000000 * 10**uint256(decimals);\n', '\n', '    /* Current max supply */\n', '    uint256 public currentSupply;\n', '\n', '\n', '    //Dates\n', '    //Private Sale\n', '    uint64 private constant privateSaleDate = 1519756200;\n', '\n', '    //Pre-sale Start Date 15 April\n', '    uint64 private constant presaleStartDate = 1523730600;\n', '    //Pre-sale End Date 15 May\n', '    uint64 private constant presaleEndDate = 1526408999;\n', '\n', '\n', '    //CrowdSale Start Date 22-May\n', '    uint64 private constant crowdSaleStart = 1526927400;\n', '    //CrowdSale End Date 6 July\n', '    uint64 private constant crowdSaleEnd = 1530901799;\n', '\n', '\n', '    /* Base exchange rate is set to 1 ETH = 2500 BBTC */\n', '    uint256 public constant BASE_RATE = 2500;\n', '\n', '    /* Constructor */\n', '    function BBTCToken(){\n', '      //Assign the initial tokens\n', '      //For dev team\n', '      balances[_devteam] = DEV_TEAM;\n', '\n', '      //For mentors\n', '      balances[_mentors] = MENTORS;\n', '\n', '      //For bounty\n', '      balances[_bounty] = BOUNTY;\n', '\n', '      //For private\n', '      balances[_privateSale] = PRIVATE;\n', '\n', '    }\n', '\n', '    /// start Token sale\n', '    function startSale () public onlyOwner{\n', '      tokenSaleClosed = false;\n', '    }\n', '\n', '    //stop Token sale\n', '    function stopSale () public onlyOwner {\n', '      tokenSaleClosed = true;\n', '    }\n', '\n', '    /// @return if the token sale is finished\n', '      function saleDue() public view returns (bool) {\n', '          return crowdSaleEnd < uint64(block.timestamp);\n', '      }\n', '\n', '    modifier inProgress {\n', '        require(currentSupply < TOKENS_SALE_HARD_CAP\n', '                && !tokenSaleClosed\n', '                && !saleDue());\n', '        _;\n', '    }\n', '\n', '    /// @dev This default function allows token to be purchased by directly\n', '    /// sending ether to this smart contract.\n', '    function () public payable {\n', '        purchaseTokens(msg.sender);\n', '    }\n', '\n', '    /// @dev Issue token based on Ether received.\n', '    /// @param _beneficiary Address that newly issued token will be sent to.\n', '    function purchaseTokens(address _beneficiary) internal inProgress {\n', '\n', '        uint256 tokens = computeTokenAmount(msg.value);\n', '\n', '        balances[_beneficiary] = balances[_beneficiary].add(tokens);\n', '\n', '        /// forward the raised funds to the fund address\n', '        _fundowner.transfer(msg.value);\n', '    }\n', '\n', '\n', '    /// @dev Compute the amount of ING token that can be purchased.\n', '    /// @param ethAmount Amount of Ether to purchase ING.\n', '    /// @return Amount of ING token to purchase\n', '    function computeTokenAmount(uint256 ethAmount) internal view returns (uint256 tokens) {\n', '        /// the percentage value (0-100) of the discount for each tier\n', '        uint64 discountPercentage = currentTierDiscountPercentage();\n', '\n', '        uint256 tokenBase = ethAmount.mul(BASE_RATE);\n', '        uint256 tokenBonus = tokenBase.mul(discountPercentage).div(100);\n', '\n', '        tokens = tokenBase.add(tokenBonus);\n', '    }\n', '\n', '\n', '    /// @dev Determine the current sale tier.\n', '      /// @return the index of the current sale tier.\n', '      function currentTierDiscountPercentage() internal view returns (uint64) {\n', '          uint64 _now = uint64(block.timestamp);\n', '\n', '          if(_now > crowdSaleStart) return 0;\n', '          if(_now > presaleStartDate) return 10;\n', '          if(_now > privateSaleDate) return 15;\n', '          return 0;\n', '      }\n', '\n', '    /// @dev issue tokens for a single buyer\n', '    /// @param _beneficiary addresses that the tokens will be sent to.\n', '    /// @param _tokensAmount the amount of tokens, with decimals expanded (full).\n', '    function doIssueTokens(address _beneficiary, uint256 _tokensAmount) public {\n', '        require(_beneficiary != address(0));\n', '\n', '        // compute without actually increasing it\n', '        uint256 increasedTotalSupply = currentSupply.add(_tokensAmount);\n', '        // roll back if hard cap reached\n', '        require(increasedTotalSupply <= TOKENS_SALE_HARD_CAP);\n', '\n', '        // increase token total supply\n', '          currentSupply = increasedTotalSupply;\n', "        // update the buyer's balance to number of tokens sent\n", '        balances[_beneficiary] = balances[_beneficiary].add(_tokensAmount);\n', '    }\n', '\n', '\n', '    /// @dev Returns the current price.\n', '    function price() public view returns (uint256 tokens) {\n', '      return computeTokenAmount(1 ether);\n', '    }\n', '  }']
