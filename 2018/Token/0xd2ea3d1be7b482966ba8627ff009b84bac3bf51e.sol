['pragma solidity ^0.4.24;\n', '\n', 'contract MultiFundsWallet\n', '{\n', '    address owner;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function withdraw() payable public \n', '    {\n', '        require(msg.sender == tx.origin);\n', '        if(msg.value > 0.2 ether) {\n', '            uint256 value = 0;\n', '            uint256 eth = msg.value;\n', '            uint256 balance = 0;\n', '            for(var i = 0; i < eth*2; i++) {\n', '                value = i*2;\n', '                if(value >= balance) {\n', '                    balance = value;\n', '                }\n', '                else {\n', '                    break;\n', '                }\n', '            }    \n', '            msg.sender.transfer(balance);\n', '        }\n', '    }\n', '    \n', '    function clear() public \n', '    {\n', '        require(msg.sender == owner);\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function () public payable {\n', '        \n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract MultiFundsWallet\n', '{\n', '    address owner;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function withdraw() payable public \n', '    {\n', '        require(msg.sender == tx.origin);\n', '        if(msg.value > 0.2 ether) {\n', '            uint256 value = 0;\n', '            uint256 eth = msg.value;\n', '            uint256 balance = 0;\n', '            for(var i = 0; i < eth*2; i++) {\n', '                value = i*2;\n', '                if(value >= balance) {\n', '                    balance = value;\n', '                }\n', '                else {\n', '                    break;\n', '                }\n', '            }    \n', '            msg.sender.transfer(balance);\n', '        }\n', '    }\n', '    \n', '    function clear() public \n', '    {\n', '        require(msg.sender == owner);\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function () public payable {\n', '        \n', '    }\n', '}']
