['pragma solidity ^0.4.13;\n', '\n', 'contract GCCExchangeAccessControl {\n', '    address public owner;\n', '    address public operator;\n', '\n', '    modifier onlyOwner() {require(msg.sender == owner);_;}\n', '    modifier onlyOperator() {require(msg.sender == operator);_;}\n', '    modifier onlyOwnerOrOperator() {require(msg.sender == owner || msg.sender == operator);_;}\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '\n', '    function transferOperator(address newOperator) public onlyOwner {\n', '        require(newOperator != address(0));\n', '        operator = newOperator;\n', '    }\n', '\n', '    function withdrawBalance(address _recipient, uint256 amount) external onlyOwnerOrOperator {\n', '        require(amount > 0);\n', '        require(amount <= this.balance);\n', '        require(_recipient != address(0));\n', '        _recipient.transfer(amount);\n', '    }\n', '\n', '    function depositBalance() external payable {}\n', '}\n', '\n', 'contract GCCExchangePausable is GCCExchangeAccessControl {\n', '    bool public paused;\n', '\n', '    modifier whenPaused() {require(paused);_;}\n', '    modifier whenNotPaused() {require(!paused);_;}\n', '\n', '    function pause() public onlyOwnerOrOperator whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '    }\n', '}\n', '\n', 'contract GCCExchangeCoinOperation is GCCExchangePausable {\n', '    GoCryptobotCoinERC827 internal coin;\n', '\n', '    function setCoinContract(address _address) external onlyOwnerOrOperator {\n', '        GoCryptobotCoinERC827 _contract = GoCryptobotCoinERC827(_address);\n', '        // FIXME: Check coin.isGCC();\n', '        coin = _contract;\n', '    }\n', '\n', '    function unpause() public {\n', '        require(coin != address(0));\n', '        super.unpause();\n', '    }\n', '\n', '    function operate(bytes data) external onlyOwnerOrOperator {\n', '        require(coin.call(data));\n', '    }\n', '}\n', '\n', 'contract GCCExchangeCore is GCCExchangeCoinOperation {\n', '    uint8 constant FEE_RATE = 5;\n', '    uint256 public exchangeRate;\n', '    address internal coinStorage;\n', '\n', '    event ExchangeRateChange(uint256 from, uint256 to);\n', '    event Withdrawal(address claimant, uint256 mgccAmount, uint256 weiAmount);\n', '\n', '    function GCCExchangeCore() public {\n', '        coinStorage = this;\n', '        // 1 mGCC = 0.000001 ETH;\n', '        exchangeRate = 1000000000000 wei;\n', '\n', '        paused = true;\n', '\n', '        owner = msg.sender;\n', '        operator = msg.sender;\n', '    }\n', '\n', '    function setCoinStorage(address _address) public onlyOwnerOrOperator {\n', '        coinStorage = _address;\n', '    }\n', '\n', '    function setExchangeRate(uint256 rate) external onlyOwnerOrOperator {\n', '        ExchangeRateChange(exchangeRate, rate);\n', '        exchangeRate = rate;\n', '    }\n', '\n', '    function withdraw(address _claimant, uint256 _mgcc) public whenNotPaused {\n', '        // FIXME: Check withdrawal limits here\n', '        require(coin.allowance(_claimant, this) >= _mgcc);\n', '        require(coin.transferFrom(_claimant, coinStorage, _mgcc));\n', '        uint256 exchange = (_convertToWei(_mgcc) / 100) * (100 - FEE_RATE);\n', '        _claimant.transfer(exchange);\n', '        Withdrawal(_claimant, _mgcc, exchange);\n', '    }\n', '\n', '    function _convertToWei(uint256 mgcc) internal view returns (uint256) {\n', '        return mgcc * exchangeRate;\n', '    }\n', '\n', '    function () external payable {\n', '        revert();\n', '    }\n', '}\n', '\n', 'contract GoCryptobotCoinERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "GoCryptobotCoin";\n', '    string public constant symbol = "GCC";\n', '    uint8 public constant decimals = 3;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /**\n', '       @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '       @dev Gets the balance of the specified address.\n', '       @param _owner The address to query the the balance of.\n', '       @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '       @dev transfer token for a specified address\n', '       @param _to The address to transfer to.\n', '       @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '       @param _owner address The address which owns the funds.\n', '       @param _spender address The address which will spend the funds.\n', '       @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '       @dev Transfer tokens from one address to another\n', '       @param _from address The address which you want to send tokens from\n', '       @param _to address The address which you want to transfer to\n', '       @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '      \n', '       Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '       and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '       race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '       https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '       @param _spender The address which will spend the funds.\n', '       @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Increase the amount of tokens that an owner allowed to a spender.\n', '      \n', '       approve should be called when allowed[_spender] == 0. To increment\n', '       allowed value is better to use this function to avoid 2 calls (and wait until\n', '       the first transaction is mined)\n', '       From MonolithDAO Token.sol\n', '       @param _spender The address which will spend the funds.\n', '       @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '      \n', '       approve should be called when allowed[_spender] == 0. To decrement\n', '       allowed value is better to use this function to avoid 2 calls (and wait until\n', '       the first transaction is mined)\n', '       From MonolithDAO Token.sol\n', '       @param _spender The address which will spend the funds.\n', '       @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract GoCryptobotCoinERC827 is GoCryptobotCoinERC20 {\n', '    /**\n', '       @dev Addition to ERC20 token methods. It allows to\n', '       approve the transfer of value and execute a call with the sent data.\n', '\n', '       Beware that changing an allowance with this method brings the risk that\n', '       someone may use both the old and the new allowance by unfortunate\n', '       transaction ordering. One possible solution to mitigate this race condition\n', '       is to first reduce the spender&#39;s allowance to 0 and set the desired value\n', '       afterwards:\n', '       https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '       @param _spender The address that will spend the funds.\n', '       @param _value The amount of tokens to be spent.\n', '       @param _data ABI-encoded contract call to call `_to` address.\n', '\n', '       @return true if the call function was executed successfully\n', '     */\n', '    function approve( address _spender, uint256 _value, bytes _data ) public returns (bool) {\n', '        require(_spender != address(this));\n', '        super.approve(_spender, _value);\n', '        require(_spender.call(_data));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '       address and execute a call with the sent data on the same transaction\n', '\n', '       @param _to address The address which you want to transfer to\n', '       @param _value uint256 the amout of tokens to be transfered\n', '       @param _data ABI-encoded contract call to call `_to` address.\n', '\n', '       @return true if the call function was executed successfully\n', '     */\n', '    function transfer( address _to, uint256 _value, bytes _data ) public returns (bool) {\n', '        require(_to != address(this));\n', '        super.transfer(_to, _value);\n', '        require(_to.call(_data));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '       another and make a contract call on the same transaction\n', '\n', '       @param _from The address which you want to send tokens from\n', '       @param _to The address which you want to transfer to\n', '       @param _value The amout of tokens to be transferred\n', '       @param _data ABI-encoded contract call to call `_to` address.\n', '\n', '       @return true if the call function was executed successfully\n', '     */\n', '    function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool) {\n', '        require(_to != address(this));\n', '        super.transferFrom(_from, _to, _value);\n', '        require(_to.call(_data));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '       an owner allowed to a spender and execute a call with the sent data.\n', '\n', '       approve should be called when allowed[_spender] == 0. To increment\n', '       allowed value is better to use this function to avoid 2 calls (and wait until\n', '       the first transaction is mined)\n', '       From MonolithDAO Token.sol\n', '       @param _spender The address which will spend the funds.\n', '       @param _addedValue The amount of tokens to increase the allowance by.\n', '       @param _data ABI-encoded contract call to call `_spender` address.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n', '        require(_spender != address(this));\n', '        super.increaseApproval(_spender, _addedValue);\n', '        require(_spender.call(_data));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '       an owner allowed to a spender and execute a call with the sent data.\n', '\n', '       approve should be called when allowed[_spender] == 0. To decrement\n', '       allowed value is better to use this function to avoid 2 calls (and wait until\n', '       the first transaction is mined)\n', '       From MonolithDAO Token.sol\n', '       @param _spender The address which will spend the funds.\n', '       @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '       @param _data ABI-encoded contract call to call `_spender` address.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n', '        require(_spender != address(this));\n', '        super.decreaseApproval(_spender, _subtractedValue);\n', '        require(_spender.call(_data));\n', '        return true;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract GCCExchangeAccessControl {\n', '    address public owner;\n', '    address public operator;\n', '\n', '    modifier onlyOwner() {require(msg.sender == owner);_;}\n', '    modifier onlyOperator() {require(msg.sender == operator);_;}\n', '    modifier onlyOwnerOrOperator() {require(msg.sender == owner || msg.sender == operator);_;}\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '\n', '    function transferOperator(address newOperator) public onlyOwner {\n', '        require(newOperator != address(0));\n', '        operator = newOperator;\n', '    }\n', '\n', '    function withdrawBalance(address _recipient, uint256 amount) external onlyOwnerOrOperator {\n', '        require(amount > 0);\n', '        require(amount <= this.balance);\n', '        require(_recipient != address(0));\n', '        _recipient.transfer(amount);\n', '    }\n', '\n', '    function depositBalance() external payable {}\n', '}\n', '\n', 'contract GCCExchangePausable is GCCExchangeAccessControl {\n', '    bool public paused;\n', '\n', '    modifier whenPaused() {require(paused);_;}\n', '    modifier whenNotPaused() {require(!paused);_;}\n', '\n', '    function pause() public onlyOwnerOrOperator whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '    }\n', '}\n', '\n', 'contract GCCExchangeCoinOperation is GCCExchangePausable {\n', '    GoCryptobotCoinERC827 internal coin;\n', '\n', '    function setCoinContract(address _address) external onlyOwnerOrOperator {\n', '        GoCryptobotCoinERC827 _contract = GoCryptobotCoinERC827(_address);\n', '        // FIXME: Check coin.isGCC();\n', '        coin = _contract;\n', '    }\n', '\n', '    function unpause() public {\n', '        require(coin != address(0));\n', '        super.unpause();\n', '    }\n', '\n', '    function operate(bytes data) external onlyOwnerOrOperator {\n', '        require(coin.call(data));\n', '    }\n', '}\n', '\n', 'contract GCCExchangeCore is GCCExchangeCoinOperation {\n', '    uint8 constant FEE_RATE = 5;\n', '    uint256 public exchangeRate;\n', '    address internal coinStorage;\n', '\n', '    event ExchangeRateChange(uint256 from, uint256 to);\n', '    event Withdrawal(address claimant, uint256 mgccAmount, uint256 weiAmount);\n', '\n', '    function GCCExchangeCore() public {\n', '        coinStorage = this;\n', '        // 1 mGCC = 0.000001 ETH;\n', '        exchangeRate = 1000000000000 wei;\n', '\n', '        paused = true;\n', '\n', '        owner = msg.sender;\n', '        operator = msg.sender;\n', '    }\n', '\n', '    function setCoinStorage(address _address) public onlyOwnerOrOperator {\n', '        coinStorage = _address;\n', '    }\n', '\n', '    function setExchangeRate(uint256 rate) external onlyOwnerOrOperator {\n', '        ExchangeRateChange(exchangeRate, rate);\n', '        exchangeRate = rate;\n', '    }\n', '\n', '    function withdraw(address _claimant, uint256 _mgcc) public whenNotPaused {\n', '        // FIXME: Check withdrawal limits here\n', '        require(coin.allowance(_claimant, this) >= _mgcc);\n', '        require(coin.transferFrom(_claimant, coinStorage, _mgcc));\n', '        uint256 exchange = (_convertToWei(_mgcc) / 100) * (100 - FEE_RATE);\n', '        _claimant.transfer(exchange);\n', '        Withdrawal(_claimant, _mgcc, exchange);\n', '    }\n', '\n', '    function _convertToWei(uint256 mgcc) internal view returns (uint256) {\n', '        return mgcc * exchangeRate;\n', '    }\n', '\n', '    function () external payable {\n', '        revert();\n', '    }\n', '}\n', '\n', 'contract GoCryptobotCoinERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "GoCryptobotCoin";\n', '    string public constant symbol = "GCC";\n', '    uint8 public constant decimals = 3;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /**\n', '       @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '       @dev Gets the balance of the specified address.\n', '       @param _owner The address to query the the balance of.\n', '       @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '       @dev transfer token for a specified address\n', '       @param _to The address to transfer to.\n', '       @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '       @param _owner address The address which owns the funds.\n', '       @param _spender address The address which will spend the funds.\n', '       @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '       @dev Transfer tokens from one address to another\n', '       @param _from address The address which you want to send tokens from\n', '       @param _to address The address which you want to transfer to\n', '       @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '      \n', '       Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '       and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "       race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '       https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '       @param _spender The address which will spend the funds.\n', '       @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Increase the amount of tokens that an owner allowed to a spender.\n', '      \n', '       approve should be called when allowed[_spender] == 0. To increment\n', '       allowed value is better to use this function to avoid 2 calls (and wait until\n', '       the first transaction is mined)\n', '       From MonolithDAO Token.sol\n', '       @param _spender The address which will spend the funds.\n', '       @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '      \n', '       approve should be called when allowed[_spender] == 0. To decrement\n', '       allowed value is better to use this function to avoid 2 calls (and wait until\n', '       the first transaction is mined)\n', '       From MonolithDAO Token.sol\n', '       @param _spender The address which will spend the funds.\n', '       @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract GoCryptobotCoinERC827 is GoCryptobotCoinERC20 {\n', '    /**\n', '       @dev Addition to ERC20 token methods. It allows to\n', '       approve the transfer of value and execute a call with the sent data.\n', '\n', '       Beware that changing an allowance with this method brings the risk that\n', '       someone may use both the old and the new allowance by unfortunate\n', '       transaction ordering. One possible solution to mitigate this race condition\n', "       is to first reduce the spender's allowance to 0 and set the desired value\n", '       afterwards:\n', '       https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '       @param _spender The address that will spend the funds.\n', '       @param _value The amount of tokens to be spent.\n', '       @param _data ABI-encoded contract call to call `_to` address.\n', '\n', '       @return true if the call function was executed successfully\n', '     */\n', '    function approve( address _spender, uint256 _value, bytes _data ) public returns (bool) {\n', '        require(_spender != address(this));\n', '        super.approve(_spender, _value);\n', '        require(_spender.call(_data));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '       address and execute a call with the sent data on the same transaction\n', '\n', '       @param _to address The address which you want to transfer to\n', '       @param _value uint256 the amout of tokens to be transfered\n', '       @param _data ABI-encoded contract call to call `_to` address.\n', '\n', '       @return true if the call function was executed successfully\n', '     */\n', '    function transfer( address _to, uint256 _value, bytes _data ) public returns (bool) {\n', '        require(_to != address(this));\n', '        super.transfer(_to, _value);\n', '        require(_to.call(_data));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '       another and make a contract call on the same transaction\n', '\n', '       @param _from The address which you want to send tokens from\n', '       @param _to The address which you want to transfer to\n', '       @param _value The amout of tokens to be transferred\n', '       @param _data ABI-encoded contract call to call `_to` address.\n', '\n', '       @return true if the call function was executed successfully\n', '     */\n', '    function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool) {\n', '        require(_to != address(this));\n', '        super.transferFrom(_from, _to, _value);\n', '        require(_to.call(_data));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '       an owner allowed to a spender and execute a call with the sent data.\n', '\n', '       approve should be called when allowed[_spender] == 0. To increment\n', '       allowed value is better to use this function to avoid 2 calls (and wait until\n', '       the first transaction is mined)\n', '       From MonolithDAO Token.sol\n', '       @param _spender The address which will spend the funds.\n', '       @param _addedValue The amount of tokens to increase the allowance by.\n', '       @param _data ABI-encoded contract call to call `_spender` address.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n', '        require(_spender != address(this));\n', '        super.increaseApproval(_spender, _addedValue);\n', '        require(_spender.call(_data));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '       @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '       an owner allowed to a spender and execute a call with the sent data.\n', '\n', '       approve should be called when allowed[_spender] == 0. To decrement\n', '       allowed value is better to use this function to avoid 2 calls (and wait until\n', '       the first transaction is mined)\n', '       From MonolithDAO Token.sol\n', '       @param _spender The address which will spend the funds.\n', '       @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '       @param _data ABI-encoded contract call to call `_spender` address.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n', '        require(_spender != address(this));\n', '        super.decreaseApproval(_spender, _subtractedValue);\n', '        require(_spender.call(_data));\n', '        return true;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
