['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => uint256) Loanbalances;\n', '    event transferEvent(address from, uint256 value, address to);\n', '    event giveToken(address to, uint256 value);\n', '    event signLoanEvent(address to);\n', '    uint256 _totalSupply = 100000000000000000;\n', '\n', '    address owner = 0xBc57C45AA9A71F273AaEbf54cFE835056A628F0b;\n', '\n', '    function BasicToken() {\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        balances[msg.sender].sub(_value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function loanBalanceOf(address _owner) public view returns (uint256 balance) {\n', '        return Loanbalances[_owner];\n', '    }\n', '\n', '    function giveTokens(address client, uint256 value) public {\n', '        require(msg.sender == owner);\n', '        balances[owner] = balances[owner].sub(value);\n', '        balances[client] = balances[client].add(value);\n', '        Loanbalances[client] = Loanbalances[client].add(value);\n', '        giveToken(client, value);\n', '        Transfer(msg.sender, client, value);\n', '    }\n', '\n', '    function signLoan(address client) public {\n', '        require(msg.sender == owner);\n', '        Loanbalances[client] = balances[client];\n', '        signLoanEvent(client);\n', '    }\n', '\n', '    function subLoan(address client, uint256 _value) public {\n', '        require(msg.sender == owner);\n', '        Loanbalances[client] = Loanbalances[client].sub(_value);\n', '    }\n', '}\n', '\n', '\n', 'contract customCoin is BasicToken {\n', '  string public name = "Hive token";\n', '  string public symbol = "HIVE";\n', '  uint public decimals = 8;\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => uint256) Loanbalances;\n', '    event transferEvent(address from, uint256 value, address to);\n', '    event giveToken(address to, uint256 value);\n', '    event signLoanEvent(address to);\n', '    uint256 _totalSupply = 100000000000000000;\n', '\n', '    address owner = 0xBc57C45AA9A71F273AaEbf54cFE835056A628F0b;\n', '\n', '    function BasicToken() {\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        balances[msg.sender].sub(_value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function loanBalanceOf(address _owner) public view returns (uint256 balance) {\n', '        return Loanbalances[_owner];\n', '    }\n', '\n', '    function giveTokens(address client, uint256 value) public {\n', '        require(msg.sender == owner);\n', '        balances[owner] = balances[owner].sub(value);\n', '        balances[client] = balances[client].add(value);\n', '        Loanbalances[client] = Loanbalances[client].add(value);\n', '        giveToken(client, value);\n', '        Transfer(msg.sender, client, value);\n', '    }\n', '\n', '    function signLoan(address client) public {\n', '        require(msg.sender == owner);\n', '        Loanbalances[client] = balances[client];\n', '        signLoanEvent(client);\n', '    }\n', '\n', '    function subLoan(address client, uint256 _value) public {\n', '        require(msg.sender == owner);\n', '        Loanbalances[client] = Loanbalances[client].sub(_value);\n', '    }\n', '}\n', '\n', '\n', 'contract customCoin is BasicToken {\n', '  string public name = "Hive token";\n', '  string public symbol = "HIVE";\n', '  uint public decimals = 8;\n', '}']
