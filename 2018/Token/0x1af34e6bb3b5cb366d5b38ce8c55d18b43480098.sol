['pragma solidity ^0.4.13;\n', '\n', 'contract SafeMath{\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\t\n', '\tfunction safeSub(uint a, uint b) internal returns (uint) {\n', '    \tassert(b <= a);\n', '    \treturn a - b;\n', '  }\n', '\n', '\tfunction safeAdd(uint a, uint b) internal returns (uint) {\n', '    \tuint c = a + b;\n', '    \tassert(c >= a);\n', '    \treturn c;\n', '  }\n', '\tfunction assert(bool assertion) internal {\n', '\t    if (!assertion) {\n', '\t      revert();\n', '\t    }\n', '\t}\n', '}\n', '\n', 'contract Token {\n', '\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token , SafeMath{\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '            balances[_to] = safeAdd(balances[_to],_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '         if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] = safeAdd(balances[_to],_value);\n', '            balances[_from] = safeSub(balances[_from],_value);\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract ExEquity is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    \n', '    string public name = "Ex-Nihilo Equity Ledger";   \n', '    string public description = "Holding this one full ERC20 token equates to 1x equity share in the EXNihilo.Network ";\n', '    uint8 public decimals = 0;\n', '    string public symbol = "&#128420;";\n', '    uint256 public INITIAL_SUPPLY = 100;\n', '\n', '    function ExEquity() {\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        totalSupply = INITIAL_SUPPLY;\n', '    }\n', '\n', '     function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract SafeMath{\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\t\n', '\tfunction safeSub(uint a, uint b) internal returns (uint) {\n', '    \tassert(b <= a);\n', '    \treturn a - b;\n', '  }\n', '\n', '\tfunction safeAdd(uint a, uint b) internal returns (uint) {\n', '    \tuint c = a + b;\n', '    \tassert(c >= a);\n', '    \treturn c;\n', '  }\n', '\tfunction assert(bool assertion) internal {\n', '\t    if (!assertion) {\n', '\t      revert();\n', '\t    }\n', '\t}\n', '}\n', '\n', 'contract Token {\n', '\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token , SafeMath{\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '            balances[_to] = safeAdd(balances[_to],_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '         if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] = safeAdd(balances[_to],_value);\n', '            balances[_from] = safeSub(balances[_from],_value);\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract ExEquity is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    \n', '    string public name = "Ex-Nihilo Equity Ledger";   \n', '    string public description = "Holding this one full ERC20 token equates to 1x equity share in the EXNihilo.Network ";\n', '    uint8 public decimals = 0;\n', '    string public symbol = "ðŸ–¤";\n', '    uint256 public INITIAL_SUPPLY = 100;\n', '\n', '    function ExEquity() {\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        totalSupply = INITIAL_SUPPLY;\n', '    }\n', '\n', '     function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
