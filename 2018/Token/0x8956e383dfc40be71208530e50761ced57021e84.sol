['pragma solidity ^0.4.21;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract ERC20 {\n', '\n', '    function balanceOf(address _owner) external returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256  _value);\n', '}\n', '\n', '\n', 'contract Offer {\n', '\n', '\tusing SafeMath for uint256;                                        // Use safe math library\n', '\n', '    ERC20 tokenContract;            // Object of token contract\n', '    address owner; // address of contract creator\n', '    address cpaOwner; // 0x583031d1113ad414f02576bd6afabfb302140987\n', '    string public offer_id;\n', '    uint256 public conversionsCount;\n', '    uint256 public totalAmount;\n', '\n', '    struct conversion{\n', '        string id;\n', '        uint256 timestamp;\n', '        address affiliate;\n', '        uint256 amount;\n', '        uint256 toAffiliate;\n', '    }\n', '\n', '    event Conversion(\n', '        string conversion_id\n', '    );\n', '\n', '    mapping (bytes32 => conversion) conversions;         // Conversions table\n', '\n', '    function Offer(address tokenContractAddress, string _offer_id, address _cpaOwner) public {\n', '        tokenContract = ERC20(tokenContractAddress);\n', '        offer_id = _offer_id;\n', '        owner = msg.sender;\n', '        cpaOwner = _cpaOwner;\n', '    }\n', '\n', '    function getMyAddress() public view returns (address myAddress) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function getBalance(address _wallet) public view returns(uint256 _balance) {\n', '        return tokenContract.balanceOf(_wallet);\n', '    }\n', '\n', '    function contractBalance() public view returns(uint256 _balance) {\n', '        return tokenContract.balanceOf(address(this));\n', '    }\n', '\n', '    function writeConversion(string _conversion_id, address _affiliate, uint256 _amount, uint256 _toAffiliate)\n', '        public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        require(_toAffiliate <= _amount);\n', '        require(_amount > 0);\n', '        require(_toAffiliate > 0);\n', '        if (getBalance(address(this)) >= _amount) {\n', '            conversionsCount++;\n', '            totalAmount = totalAmount.add(_amount);\n', '            conversions[keccak256(_conversion_id)] = conversion(_conversion_id, now, _affiliate, _amount, _toAffiliate);\n', '            tokenContract.transfer(_affiliate, _toAffiliate);\n', '            tokenContract.transfer(cpaOwner, _amount.sub(_toAffiliate));\n', '            emit Conversion(_conversion_id);\n', '        } else {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function getConversionInfo(string _conversion_id)\n', '        public\n', '        constant\n', '        returns (string cid, uint256 ts, address aff, uint256 am, uint256 toAff) {\n', '        conversion storage _c = conversions[keccak256(_conversion_id)];\n', '        return (_c.id, _c.timestamp, _c.affiliate, _c.amount, _c.toAffiliate);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract ERC20 {\n', '\n', '    function balanceOf(address _owner) external returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256  _value);\n', '}\n', '\n', '\n', 'contract Offer {\n', '\n', '\tusing SafeMath for uint256;                                        // Use safe math library\n', '\n', '    ERC20 tokenContract;            // Object of token contract\n', '    address owner; // address of contract creator\n', '    address cpaOwner; // 0x583031d1113ad414f02576bd6afabfb302140987\n', '    string public offer_id;\n', '    uint256 public conversionsCount;\n', '    uint256 public totalAmount;\n', '\n', '    struct conversion{\n', '        string id;\n', '        uint256 timestamp;\n', '        address affiliate;\n', '        uint256 amount;\n', '        uint256 toAffiliate;\n', '    }\n', '\n', '    event Conversion(\n', '        string conversion_id\n', '    );\n', '\n', '    mapping (bytes32 => conversion) conversions;         // Conversions table\n', '\n', '    function Offer(address tokenContractAddress, string _offer_id, address _cpaOwner) public {\n', '        tokenContract = ERC20(tokenContractAddress);\n', '        offer_id = _offer_id;\n', '        owner = msg.sender;\n', '        cpaOwner = _cpaOwner;\n', '    }\n', '\n', '    function getMyAddress() public view returns (address myAddress) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function getBalance(address _wallet) public view returns(uint256 _balance) {\n', '        return tokenContract.balanceOf(_wallet);\n', '    }\n', '\n', '    function contractBalance() public view returns(uint256 _balance) {\n', '        return tokenContract.balanceOf(address(this));\n', '    }\n', '\n', '    function writeConversion(string _conversion_id, address _affiliate, uint256 _amount, uint256 _toAffiliate)\n', '        public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        require(_toAffiliate <= _amount);\n', '        require(_amount > 0);\n', '        require(_toAffiliate > 0);\n', '        if (getBalance(address(this)) >= _amount) {\n', '            conversionsCount++;\n', '            totalAmount = totalAmount.add(_amount);\n', '            conversions[keccak256(_conversion_id)] = conversion(_conversion_id, now, _affiliate, _amount, _toAffiliate);\n', '            tokenContract.transfer(_affiliate, _toAffiliate);\n', '            tokenContract.transfer(cpaOwner, _amount.sub(_toAffiliate));\n', '            emit Conversion(_conversion_id);\n', '        } else {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function getConversionInfo(string _conversion_id)\n', '        public\n', '        constant\n', '        returns (string cid, uint256 ts, address aff, uint256 am, uint256 toAff) {\n', '        conversion storage _c = conversions[keccak256(_conversion_id)];\n', '        return (_c.id, _c.timestamp, _c.affiliate, _c.amount, _c.toAffiliate);\n', '    }\n', '}']
