['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// SencTokenSale - SENC Token Sale Contract\n', '//\n', '// Copyright (c) 2018 InfoCorp Technologies Pte Ltd.\n', '// http://www.sentinel-chain.org/\n', '//\n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// Total tokens 500m\n', '// * Founding Team 10% - 5 tranches of 20% of 50,000,000 in **arrears** every 24 weeks from the activation date.\n', '// * Early Support 20% - 4 tranches of 25% of 100,000,000 in **advance** every 4 weeks from activation date.\n', '// * Pre-sale 20% - 4 tranches of 25% of 100,000,000 in **advance** every 4 weeks from activation date.\n', '//   * To be separated into ~ 28 presale addresses\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', ' \n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract OperatableBasic {\n', '    function setPrimaryOperator (address addr) public;\n', '    function setSecondaryOperator (address addr) public;\n', '    function isPrimaryOperator(address addr) public view returns (bool);\n', '    function isSecondaryOperator(address addr) public view returns (bool);\n', '}\n', '\n', 'contract Operatable is Ownable, OperatableBasic {\n', '    address public primaryOperator;\n', '    address public secondaryOperator;\n', '\n', '    modifier canOperate() {\n', '        require(msg.sender == primaryOperator || msg.sender == secondaryOperator || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Operatable() public {\n', '        primaryOperator = owner;\n', '        secondaryOperator = owner;\n', '    }\n', '\n', '    function setPrimaryOperator (address addr) public onlyOwner {\n', '        primaryOperator = addr;\n', '    }\n', '\n', '    function setSecondaryOperator (address addr) public onlyOwner {\n', '        secondaryOperator = addr;\n', '    }\n', '\n', '    function isPrimaryOperator(address addr) public view returns (bool) {\n', '        return (addr == primaryOperator);\n', '    }\n', '\n', '    function isSecondaryOperator(address addr) public view returns (bool) {\n', '        return (addr == secondaryOperator);\n', '    }\n', '}\n', '\n', 'contract Salvageable is Operatable {\n', '    // Salvage other tokens that are accidentally sent into this token\n', '    function emergencyERC20Drain(ERC20 oddToken, uint amount) public canOperate {\n', '        if (address(oddToken) == address(0)) {\n', '            owner.transfer(amount);\n', '            return;\n', '        }\n', '        oddToken.transfer(owner, amount);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SencTokenConfig {\n', '    string public constant NAME = "Sentinel Chain Token";\n', '    string public constant SYMBOL = "SENC";\n', '    uint8 public constant DECIMALS = 18;\n', '    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\n', '    uint public constant TOTALSUPPLY = 500000000 * DECIMALSFACTOR;\n', '}\n', '\n', 'contract SencToken is PausableToken, SencTokenConfig, Salvageable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = NAME;\n', '    string public symbol = SYMBOL;\n', '    uint8 public decimals = DECIMALS;\n', '    bool public mintingFinished = false;\n', '\n', '    event Mint(address indexed to, uint amount);\n', '    event MintFinished();\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function SencToken() public {\n', '        paused = true;\n', '    }\n', '\n', '    function pause() onlyOwner public {\n', '        revert();\n', '    }\n', '\n', '    function unpause() onlyOwner public {\n', '        super.unpause();\n', '    }\n', '\n', '    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\n', '        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '    // Airdrop tokens from bounty wallet to contributors as long as there are enough balance\n', '    function airdrop(address bountyWallet, address[] dests, uint[] values) public onlyOwner returns (uint) {\n', '        require(dests.length == values.length);\n', '        uint i = 0;\n', '        while (i < dests.length && balances[bountyWallet] >= values[i]) {\n', '            this.transferFrom(bountyWallet, dests[i], values[i]);\n', '            i += 1;\n', '        }\n', '        return(i);\n', '    }\n', '}\n', '\n', 'contract SencVesting is Salvageable {\n', '    using SafeMath for uint;\n', '\n', '    SencToken public token;\n', '\n', '    bool public started = false;\n', '    uint public startTimestamp;\n', '    uint public totalTokens;\n', '\n', '    struct Entry {\n', '        uint tokens;\n', '        bool advance;\n', '        uint periods;\n', '        uint periodLength;\n', '        uint withdrawn;\n', '    }\n', '    mapping (address => Entry) public entries;\n', '\n', '    event NewEntry(address indexed beneficiary, uint tokens, bool advance, uint periods, uint periodLength);\n', '    event Withdrawn(address indexed beneficiary, uint withdrawn);\n', '\n', '    function SencVesting(SencToken _token) public {\n', '        require(_token != address(0));\n', '        token = _token;\n', '    }\n', '\n', '    function addEntryIn4WeekPeriods(address beneficiary, uint tokens, bool advance, uint periods) public onlyOwner {\n', '        addEntry(beneficiary, tokens, advance, periods, 4 * 7 days);\n', '    }\n', '    function addEntryIn24WeekPeriods(address beneficiary, uint tokens, bool advance, uint periods) public onlyOwner {\n', '        addEntry(beneficiary, tokens, advance, periods, 24 * 7 days);\n', '    }\n', '    function addEntryInSecondsPeriods(address beneficiary, uint tokens, bool advance, uint periods, uint secondsPeriod) public onlyOwner {\n', '        addEntry(beneficiary, tokens, advance, periods, secondsPeriod);\n', '    }\n', '\n', '    function addEntry(address beneficiary, uint tokens, bool advance, uint periods, uint periodLength) internal {\n', '        require(!started);\n', '        require(beneficiary != address(0));\n', '        require(tokens > 0);\n', '        require(periods > 0);\n', '        require(entries[beneficiary].tokens == 0);\n', '        entries[beneficiary] = Entry({\n', '            tokens: tokens,\n', '            advance: advance,\n', '            periods: periods,\n', '            periodLength: periodLength,\n', '            withdrawn: 0\n', '        });\n', '        totalTokens = totalTokens.add(tokens);\n', '        NewEntry(beneficiary, tokens, advance, periods, periodLength);\n', '    }\n', '\n', '    function start() public onlyOwner {\n', '        require(!started);\n', '        require(totalTokens > 0);\n', '        require(totalTokens == token.balanceOf(this));\n', '        started = true;\n', '        startTimestamp = now;\n', '    }\n', '\n', '    function vested(address beneficiary, uint time) public view returns (uint) {\n', '        uint result = 0;\n', '        if (startTimestamp > 0 && time >= startTimestamp) {\n', '            Entry memory entry = entries[beneficiary];\n', '            if (entry.tokens > 0) {\n', '                uint periods = time.sub(startTimestamp).div(entry.periodLength);\n', '                if (entry.advance) {\n', '                    periods++;\n', '                }\n', '                if (periods >= entry.periods) {\n', '                    result = entry.tokens;\n', '                } else {\n', '                    result = entry.tokens.mul(periods).div(entry.periods);\n', '                }\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function withdrawable(address beneficiary) public view returns (uint) {\n', '        uint result = 0;\n', '        Entry memory entry = entries[beneficiary];\n', '        if (entry.tokens > 0) {\n', '            uint _vested = vested(beneficiary, now);\n', '            result = _vested.sub(entry.withdrawn);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function withdraw() public {\n', '        withdrawInternal(msg.sender);\n', '    }\n', '\n', '    function withdrawOnBehalfOf(address beneficiary) public onlyOwner {\n', '        withdrawInternal(beneficiary);\n', '    }\n', '\n', '    function withdrawInternal(address beneficiary) internal {\n', '        Entry storage entry = entries[beneficiary];\n', '        require(entry.tokens > 0);\n', '        uint _vested = vested(beneficiary, now);\n', '        uint _withdrawn = entry.withdrawn;\n', '        require(_vested > _withdrawn);\n', '        uint _withdrawable = _vested.sub(_withdrawn);\n', '        entry.withdrawn = _vested;\n', '        require(token.transfer(beneficiary, _withdrawable));\n', '        Withdrawn(beneficiary, _withdrawable);\n', '    }\n', '\n', '    function tokens(address beneficiary) public view returns (uint) {\n', '        return entries[beneficiary].tokens;\n', '    }\n', '\n', '    function withdrawn(address beneficiary) public view returns (uint) {\n', '        return entries[beneficiary].withdrawn;\n', '    }\n', '\n', '    function emergencyERC20Drain(ERC20 oddToken, uint amount) public canOperate {\n', '        // Cannot withdraw SencToken if vesting started\n', '        require(!started || address(oddToken) != address(token));\n', '        super.emergencyERC20Drain(oddToken,amount);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// SencTokenSale - SENC Token Sale Contract\n', '//\n', '// Copyright (c) 2018 InfoCorp Technologies Pte Ltd.\n', '// http://www.sentinel-chain.org/\n', '//\n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// Total tokens 500m\n', '// * Founding Team 10% - 5 tranches of 20% of 50,000,000 in **arrears** every 24 weeks from the activation date.\n', '// * Early Support 20% - 4 tranches of 25% of 100,000,000 in **advance** every 4 weeks from activation date.\n', '// * Pre-sale 20% - 4 tranches of 25% of 100,000,000 in **advance** every 4 weeks from activation date.\n', '//   * To be separated into ~ 28 presale addresses\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', ' \n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract OperatableBasic {\n', '    function setPrimaryOperator (address addr) public;\n', '    function setSecondaryOperator (address addr) public;\n', '    function isPrimaryOperator(address addr) public view returns (bool);\n', '    function isSecondaryOperator(address addr) public view returns (bool);\n', '}\n', '\n', 'contract Operatable is Ownable, OperatableBasic {\n', '    address public primaryOperator;\n', '    address public secondaryOperator;\n', '\n', '    modifier canOperate() {\n', '        require(msg.sender == primaryOperator || msg.sender == secondaryOperator || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Operatable() public {\n', '        primaryOperator = owner;\n', '        secondaryOperator = owner;\n', '    }\n', '\n', '    function setPrimaryOperator (address addr) public onlyOwner {\n', '        primaryOperator = addr;\n', '    }\n', '\n', '    function setSecondaryOperator (address addr) public onlyOwner {\n', '        secondaryOperator = addr;\n', '    }\n', '\n', '    function isPrimaryOperator(address addr) public view returns (bool) {\n', '        return (addr == primaryOperator);\n', '    }\n', '\n', '    function isSecondaryOperator(address addr) public view returns (bool) {\n', '        return (addr == secondaryOperator);\n', '    }\n', '}\n', '\n', 'contract Salvageable is Operatable {\n', '    // Salvage other tokens that are accidentally sent into this token\n', '    function emergencyERC20Drain(ERC20 oddToken, uint amount) public canOperate {\n', '        if (address(oddToken) == address(0)) {\n', '            owner.transfer(amount);\n', '            return;\n', '        }\n', '        oddToken.transfer(owner, amount);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SencTokenConfig {\n', '    string public constant NAME = "Sentinel Chain Token";\n', '    string public constant SYMBOL = "SENC";\n', '    uint8 public constant DECIMALS = 18;\n', '    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\n', '    uint public constant TOTALSUPPLY = 500000000 * DECIMALSFACTOR;\n', '}\n', '\n', 'contract SencToken is PausableToken, SencTokenConfig, Salvageable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = NAME;\n', '    string public symbol = SYMBOL;\n', '    uint8 public decimals = DECIMALS;\n', '    bool public mintingFinished = false;\n', '\n', '    event Mint(address indexed to, uint amount);\n', '    event MintFinished();\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function SencToken() public {\n', '        paused = true;\n', '    }\n', '\n', '    function pause() onlyOwner public {\n', '        revert();\n', '    }\n', '\n', '    function unpause() onlyOwner public {\n', '        super.unpause();\n', '    }\n', '\n', '    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\n', '        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '    // Airdrop tokens from bounty wallet to contributors as long as there are enough balance\n', '    function airdrop(address bountyWallet, address[] dests, uint[] values) public onlyOwner returns (uint) {\n', '        require(dests.length == values.length);\n', '        uint i = 0;\n', '        while (i < dests.length && balances[bountyWallet] >= values[i]) {\n', '            this.transferFrom(bountyWallet, dests[i], values[i]);\n', '            i += 1;\n', '        }\n', '        return(i);\n', '    }\n', '}\n', '\n', 'contract SencVesting is Salvageable {\n', '    using SafeMath for uint;\n', '\n', '    SencToken public token;\n', '\n', '    bool public started = false;\n', '    uint public startTimestamp;\n', '    uint public totalTokens;\n', '\n', '    struct Entry {\n', '        uint tokens;\n', '        bool advance;\n', '        uint periods;\n', '        uint periodLength;\n', '        uint withdrawn;\n', '    }\n', '    mapping (address => Entry) public entries;\n', '\n', '    event NewEntry(address indexed beneficiary, uint tokens, bool advance, uint periods, uint periodLength);\n', '    event Withdrawn(address indexed beneficiary, uint withdrawn);\n', '\n', '    function SencVesting(SencToken _token) public {\n', '        require(_token != address(0));\n', '        token = _token;\n', '    }\n', '\n', '    function addEntryIn4WeekPeriods(address beneficiary, uint tokens, bool advance, uint periods) public onlyOwner {\n', '        addEntry(beneficiary, tokens, advance, periods, 4 * 7 days);\n', '    }\n', '    function addEntryIn24WeekPeriods(address beneficiary, uint tokens, bool advance, uint periods) public onlyOwner {\n', '        addEntry(beneficiary, tokens, advance, periods, 24 * 7 days);\n', '    }\n', '    function addEntryInSecondsPeriods(address beneficiary, uint tokens, bool advance, uint periods, uint secondsPeriod) public onlyOwner {\n', '        addEntry(beneficiary, tokens, advance, periods, secondsPeriod);\n', '    }\n', '\n', '    function addEntry(address beneficiary, uint tokens, bool advance, uint periods, uint periodLength) internal {\n', '        require(!started);\n', '        require(beneficiary != address(0));\n', '        require(tokens > 0);\n', '        require(periods > 0);\n', '        require(entries[beneficiary].tokens == 0);\n', '        entries[beneficiary] = Entry({\n', '            tokens: tokens,\n', '            advance: advance,\n', '            periods: periods,\n', '            periodLength: periodLength,\n', '            withdrawn: 0\n', '        });\n', '        totalTokens = totalTokens.add(tokens);\n', '        NewEntry(beneficiary, tokens, advance, periods, periodLength);\n', '    }\n', '\n', '    function start() public onlyOwner {\n', '        require(!started);\n', '        require(totalTokens > 0);\n', '        require(totalTokens == token.balanceOf(this));\n', '        started = true;\n', '        startTimestamp = now;\n', '    }\n', '\n', '    function vested(address beneficiary, uint time) public view returns (uint) {\n', '        uint result = 0;\n', '        if (startTimestamp > 0 && time >= startTimestamp) {\n', '            Entry memory entry = entries[beneficiary];\n', '            if (entry.tokens > 0) {\n', '                uint periods = time.sub(startTimestamp).div(entry.periodLength);\n', '                if (entry.advance) {\n', '                    periods++;\n', '                }\n', '                if (periods >= entry.periods) {\n', '                    result = entry.tokens;\n', '                } else {\n', '                    result = entry.tokens.mul(periods).div(entry.periods);\n', '                }\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function withdrawable(address beneficiary) public view returns (uint) {\n', '        uint result = 0;\n', '        Entry memory entry = entries[beneficiary];\n', '        if (entry.tokens > 0) {\n', '            uint _vested = vested(beneficiary, now);\n', '            result = _vested.sub(entry.withdrawn);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function withdraw() public {\n', '        withdrawInternal(msg.sender);\n', '    }\n', '\n', '    function withdrawOnBehalfOf(address beneficiary) public onlyOwner {\n', '        withdrawInternal(beneficiary);\n', '    }\n', '\n', '    function withdrawInternal(address beneficiary) internal {\n', '        Entry storage entry = entries[beneficiary];\n', '        require(entry.tokens > 0);\n', '        uint _vested = vested(beneficiary, now);\n', '        uint _withdrawn = entry.withdrawn;\n', '        require(_vested > _withdrawn);\n', '        uint _withdrawable = _vested.sub(_withdrawn);\n', '        entry.withdrawn = _vested;\n', '        require(token.transfer(beneficiary, _withdrawable));\n', '        Withdrawn(beneficiary, _withdrawable);\n', '    }\n', '\n', '    function tokens(address beneficiary) public view returns (uint) {\n', '        return entries[beneficiary].tokens;\n', '    }\n', '\n', '    function withdrawn(address beneficiary) public view returns (uint) {\n', '        return entries[beneficiary].withdrawn;\n', '    }\n', '\n', '    function emergencyERC20Drain(ERC20 oddToken, uint amount) public canOperate {\n', '        // Cannot withdraw SencToken if vesting started\n', '        require(!started || address(oddToken) != address(token));\n', '        super.emergencyERC20Drain(oddToken,amount);\n', '    }\n', '}']
