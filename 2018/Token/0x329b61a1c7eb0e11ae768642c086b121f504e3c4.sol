['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath\n', '{\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        uint256 c = a+b;\n', '        assert (c>=a);\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        assert(a>=b);\n', '        return (a-b);\n', '    }\n', '    function mul(uint256 a,uint256 b)internal pure returns (uint256)\n', '    {\n', '        if (a==0)\n', '        {\n', '        return 0;\n', '        }\n', '        uint256 c = a*b;\n', '        assert ((c/a)==b);\n', '        return c;\n', '    }\n', '    function div(uint256 a,uint256 b)internal pure returns (uint256)\n', '    {\n', '        return a/b;\n', '    }\n', '}\n', '\n', 'contract ERC20\n', '{\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Owned\n', '{\n', '    address public owner;\n', '\n', '    constructor() internal\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyowner()\n', '    {\n', '        require(msg.sender==owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract pausable is Owned\n', '{\n', '    event Pause();\n', '    event Unpause();\n', '    bool public pause = false;\n', '\n', '    modifier whenNotPaused()\n', '    {\n', '        require(!pause);\n', '        _;\n', '    }\n', '    modifier whenPaused()\n', '    {\n', '        require(pause);\n', '        _;\n', '    }\n', '    function pause() onlyowner whenNotPaused public\n', '    {\n', '        pause = true;\n', '        emit Pause();\n', '    }\n', '    function unpause() onlyowner whenPaused public\n', '    {\n', '        pause = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract TokenControl is ERC20,pausable\n', '{\n', '    using SafeMath for uint256;\n', '    mapping (address =>uint256) internal balances;\n', '    mapping (address => mapping(address =>uint256)) internal allowed;\n', '    uint256 totaltoken;\n', '\n', '    function totalSupply() public view returns (uint256)\n', '    {\n', '        return totaltoken;\n', '    }\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool)\n', '    {\n', '        require(_to!=address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) public view returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused  returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public view returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue)\n', '        {\n', '            allowed[msg.sender][_spender] = 0;\n', '        }\n', '        else\n', '        {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract claimable is Owned\n', '{\n', '    address public pendingOwner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyPendingOwner()\n', '    {\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyowner public\n', '    {\n', '        pendingOwner = newOwner;\n', '    }\n', '    function claimOwnership() onlyPendingOwner public\n', '    {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '//////////////////////////////////token Start////////////////////////////////////////////\n', 'contract RT is TokenControl,claimable\n', '{\n', '    using SafeMath for uint256;\n', '    string public constant name    = "RecuToken";\n', '    string public constant symbol  = "RT";\n', '    uint256 public decimals = 18;\n', '    uint256 totalsupply =  500000000*(10**decimals);\n', '\n', '    address public vault;\n', '\n', '    //contract initial\n', '    constructor () public\n', '    {\n', '        balances[msg.sender] = totalsupply;\n', '        totaltoken = totalsupply;\n', '        vault = msg.sender;\n', '    }\n', '\n', '    //set sell agent\n', '\n', '    address public salesAgent;\n', '    address internal pendingAgent;\n', '\n', '    event SetSalesAgent(address indexed previousSalesAgent, address indexed newSalesAgent);\n', '    event RemovedSalesAgent(address indexed currentSalesAgent);\n', '\n', '    // set salesAgent\n', '    function setSalesAgent(address newSalesAgent) onlyowner public\n', '    {\n', '        pendingAgent = newSalesAgent;\n', '    }\n', '\n', '    function claimSalesAgent() public\n', '    {\n', '        require(msg.sender==pendingAgent);\n', '        emit SetSalesAgent(salesAgent, pendingAgent);\n', '        salesAgent = pendingAgent;\n', '        pendingAgent = address(0);\n', '    }\n', '\n', '    // Remove salesagent\n', '    function removedSalesAgent() onlyowner public\n', '    {\n', '        emit RemovedSalesAgent(salesAgent);\n', '        salesAgent = address(0);\n', '    }\n', '\n', '    // Transfer tokens from salesAgent to account\n', '    function transferTokensFromVault(address toAddress, uint256 tokensAmount) public\n', '    {\n', '        require(salesAgent == msg.sender);\n', '        require(balances[vault]>=tokensAmount);\n', '        balances[vault] = balances[vault].sub(tokensAmount);\n', '        balances[toAddress] = balances[toAddress].add(tokensAmount);\n', '        emit Transfer(vault, toAddress, tokensAmount);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath\n', '{\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        uint256 c = a+b;\n', '        assert (c>=a);\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        assert(a>=b);\n', '        return (a-b);\n', '    }\n', '    function mul(uint256 a,uint256 b)internal pure returns (uint256)\n', '    {\n', '        if (a==0)\n', '        {\n', '        return 0;\n', '        }\n', '        uint256 c = a*b;\n', '        assert ((c/a)==b);\n', '        return c;\n', '    }\n', '    function div(uint256 a,uint256 b)internal pure returns (uint256)\n', '    {\n', '        return a/b;\n', '    }\n', '}\n', '\n', 'contract ERC20\n', '{\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Owned\n', '{\n', '    address public owner;\n', '\n', '    constructor() internal\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyowner()\n', '    {\n', '        require(msg.sender==owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract pausable is Owned\n', '{\n', '    event Pause();\n', '    event Unpause();\n', '    bool public pause = false;\n', '\n', '    modifier whenNotPaused()\n', '    {\n', '        require(!pause);\n', '        _;\n', '    }\n', '    modifier whenPaused()\n', '    {\n', '        require(pause);\n', '        _;\n', '    }\n', '    function pause() onlyowner whenNotPaused public\n', '    {\n', '        pause = true;\n', '        emit Pause();\n', '    }\n', '    function unpause() onlyowner whenPaused public\n', '    {\n', '        pause = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract TokenControl is ERC20,pausable\n', '{\n', '    using SafeMath for uint256;\n', '    mapping (address =>uint256) internal balances;\n', '    mapping (address => mapping(address =>uint256)) internal allowed;\n', '    uint256 totaltoken;\n', '\n', '    function totalSupply() public view returns (uint256)\n', '    {\n', '        return totaltoken;\n', '    }\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool)\n', '    {\n', '        require(_to!=address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) public view returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused  returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public view returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue)\n', '        {\n', '            allowed[msg.sender][_spender] = 0;\n', '        }\n', '        else\n', '        {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract claimable is Owned\n', '{\n', '    address public pendingOwner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyPendingOwner()\n', '    {\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyowner public\n', '    {\n', '        pendingOwner = newOwner;\n', '    }\n', '    function claimOwnership() onlyPendingOwner public\n', '    {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '//////////////////////////////////token Start////////////////////////////////////////////\n', 'contract RT is TokenControl,claimable\n', '{\n', '    using SafeMath for uint256;\n', '    string public constant name    = "RecuToken";\n', '    string public constant symbol  = "RT";\n', '    uint256 public decimals = 18;\n', '    uint256 totalsupply =  500000000*(10**decimals);\n', '\n', '    address public vault;\n', '\n', '    //contract initial\n', '    constructor () public\n', '    {\n', '        balances[msg.sender] = totalsupply;\n', '        totaltoken = totalsupply;\n', '        vault = msg.sender;\n', '    }\n', '\n', '    //set sell agent\n', '\n', '    address public salesAgent;\n', '    address internal pendingAgent;\n', '\n', '    event SetSalesAgent(address indexed previousSalesAgent, address indexed newSalesAgent);\n', '    event RemovedSalesAgent(address indexed currentSalesAgent);\n', '\n', '    // set salesAgent\n', '    function setSalesAgent(address newSalesAgent) onlyowner public\n', '    {\n', '        pendingAgent = newSalesAgent;\n', '    }\n', '\n', '    function claimSalesAgent() public\n', '    {\n', '        require(msg.sender==pendingAgent);\n', '        emit SetSalesAgent(salesAgent, pendingAgent);\n', '        salesAgent = pendingAgent;\n', '        pendingAgent = address(0);\n', '    }\n', '\n', '    // Remove salesagent\n', '    function removedSalesAgent() onlyowner public\n', '    {\n', '        emit RemovedSalesAgent(salesAgent);\n', '        salesAgent = address(0);\n', '    }\n', '\n', '    // Transfer tokens from salesAgent to account\n', '    function transferTokensFromVault(address toAddress, uint256 tokensAmount) public\n', '    {\n', '        require(salesAgent == msg.sender);\n', '        require(balances[vault]>=tokensAmount);\n', '        balances[vault] = balances[vault].sub(tokensAmount);\n', '        balances[toAddress] = balances[toAddress].add(tokensAmount);\n', '        emit Transfer(vault, toAddress, tokensAmount);\n', '    }\n', '}']
