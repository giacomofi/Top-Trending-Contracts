['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '    \n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract IERC20Token {\n', '    function totalSupply() public constant returns (uint256 totalSupply);\n', '    function balanceOf(address _owner) public  constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    // NOT IERC20 Token\n', '    function hasSDC(address _address,uint256 _quantity) public returns (bool success);\n', '    function hasSDCC(address _address,uint256 _quantity) public returns (bool success);\n', '    function eliminateSDCC(address _address,uint256 _quantity) public returns (bool success);\n', '    function createSDCC(address _address,uint256 _quantity) public returns (bool success); \n', '    function createSDC(address _address,uint256 _init_quantity, uint256 _quantity) public returns (bool success);\n', '    function stakeSDC(address _address, uint256 amount)  public returns(bool);\n', '    function endStake(address _address, uint256 amount)  public returns(bool);\n', '\n', '    function chipBalanceOf(address _address) public returns (uint256 _amount);\n', '    function transferChips(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '    \n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Lockable is Owned{\n', '\n', '\tuint256 public lockedUntilBlock;\n', '\n', '\tevent ContractLocked(uint256 _untilBlock, string _reason);\n', '\n', '\tmodifier lockAffected {\n', '\t\trequire(block.number > lockedUntilBlock);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction lockFromSelf(uint256 _untilBlock, string _reason) internal {\n', '\t\tlockedUntilBlock = _untilBlock;\n', '\t\tContractLocked(_untilBlock, _reason);\n', '\t}\n', '\n', '\n', '\tfunction lockUntil(uint256 _untilBlock, string _reason) onlyOwner {\n', '\t\tlockedUntilBlock = _untilBlock;\n', '\t\tContractLocked(_untilBlock, _reason);\n', '\t}\n', '}\n', '\n', 'contract Token is IERC20Token, Lockable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\t/* Public variables of the token */\n', '\tstring public standard;\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint8 public decimals;\n', '\tuint256 public supply;\n', '\n', '\taddress public crowdsaleContractAddress;\n', '\n', '\t/* Private variables of the token */\n', '\tmapping (address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowances;\n', '\n', '\t/* Events */\n', '\tevent Mint(address indexed _to, uint256 _value);\n', '\n', '\tfunction Token(){\n', '\n', '\t}\n', '\t/* Returns total supply of issued tokens */\n', '\tfunction totalSupply() constant returns (uint256) {\n', '\t\treturn supply;\n', '\t}\n', '\n', '\t/* Returns balance of address */\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\t/* Transfers tokens from your address to other */\n', '\tfunction transfer(address _to, uint256 _value) lockAffected returns (bool success) {\n', '\t\trequire(_to != 0x0 && _to != address(this));\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value); // Deduct senders balance\n', '\t\tbalances[_to] = balances[_to].add(_value);               // Add recivers blaance\n', '\t\tTransfer(msg.sender, _to, _value);                       // Raise Transfer event\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/* Approve other address to spend tokens on your account */\n', '\tfunction approve(address _spender, uint256 _value) lockAffected returns (bool success) {\n', '\t\tallowances[msg.sender][_spender] = _value;        // Set allowance\n', '\t\tApproval(msg.sender, _spender, _value);           // Raise Approval event\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/* A contract attempts to get the coins */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)  returns (bool success) {\n', '\t\trequire(_to != 0x0 && _to != address(this));\n', '\t\tbalances[_from] = balances[_from].sub(_value);                              // Deduct senders balance\n', '\t\tbalances[_to] = balances[_to].add(_value);                                  // Add recipient blaance\n', '\t\tallowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);  // Deduct allowance for this address\n', '\t\tTransfer(_from, _to, _value);                                               // Raise Transfer event\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '\t\treturn allowances[_owner][_spender];\n', '\t}\n', '\n', '\tfunction mintTokens(address _to, uint256 _amount) {\n', '\t\trequire(msg.sender == crowdsaleContractAddress);\n', '\t\tsupply = supply.add(_amount);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\tMint(_to, _amount);\n', '\t\tTransfer(0x0, _to, _amount);\n', '\t}\n', '\n', '\tfunction salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner {\n', '\t\tIERC20Token(_tokenAddress).transfer(_to, _amount);\n', '\t}\n', '}\n', '\n', '\n', '//----------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract SoundcoinsToken is Token {\n', '\n', '    address _teamAddress; // Account 3\n', '    address _saleAddress;\n', '\n', '    uint256 availableSupply = 250000000;\n', '    uint256 minableSupply = 750000000;\n', '\n', '    address public SoundcoinsAddress;\n', '    /* Balances for ships */\n', '    uint256 public total_SDCC_supply = 0;\n', '    mapping (address => uint256) balances_chips;\n', '    mapping (address => uint256) holdings_SDC;\n', '    uint256 holdingsSupply = 0;\n', '\n', '\n', '    modifier onlyAuthorized {\n', '        require(msg.sender == SoundcoinsAddress);\n', '        _;\n', '    }\n', '    /* Initializes contract */\n', '    function SoundcoinsToken(address _crowdsaleContract) public {\n', '        standard = "Soundcoins Token  V1.0";\n', '        name = "Soundcoins";\n', '        symbol = "SDC";\n', '        decimals = 0;\n', '        supply = 1000000000;\n', '        _teamAddress = msg.sender;\n', '        balances[msg.sender] = 100000000;\n', '        _saleAddress = _crowdsaleContract;\n', '        balances[_crowdsaleContract] = 150000000;\n', '    }\n', '\n', '    /********* */\n', '    /* TOOLS  */\n', '    /********* */\n', '\n', '\n', '    function getAvailableSupply() public returns (uint256){\n', '        return availableSupply;\n', '    }\n', '\n', '    function getMinableSupply() public returns (uint256){\n', '        return minableSupply;\n', '    }\n', '\n', '    function getHoldingsSupply() public returns (uint256){\n', '        return holdingsSupply;\n', '    }\n', '\n', '    function getSDCCSupply() public returns (uint256){\n', '        return total_SDCC_supply;\n', '    }\n', '\n', '    function getSoundcoinsAddress() public returns (address){\n', '        return SoundcoinsAddress;\n', '    }\n', '    // See if Address has Enough SDC\n', '    function hasSDC(address _address,uint256 _quantity) public returns (bool success){\n', '        return (balances[_address] >= _quantity);\n', '    }\n', '\n', '    // See if Address has Enough SDC\n', '    function hasSDCC(address _address, uint256 _quantity) public returns (bool success){\n', '        return (chipBalanceOf(_address) >= _quantity);\n', '    }\n', '   /*SDC*/\n', '\n', '    function createSDC(address _address, uint256 _init_quantity, uint256 _quantity) onlyAuthorized public returns (bool success){\n', '        require(minableSupply >= 0);\n', '        balances[_address] = balances[_address].add(_quantity);\n', '        availableSupply = availableSupply.add(_quantity);\n', '        holdings_SDC[_address] = holdings_SDC[_address].sub(_init_quantity);\n', '        minableSupply = minableSupply.sub(_quantity.sub(_init_quantity));\n', '        holdingsSupply = holdingsSupply.sub(_init_quantity);\n', '        return true;\n', '    }\n', '\n', '    function eliminateSDCC(address _address, uint256 _quantity) onlyAuthorized public returns (bool success){\n', '        balances_chips[_address] = balances_chips[_address].sub(_quantity);\n', '        total_SDCC_supply = total_SDCC_supply.sub(_quantity);\n', '        return true;\n', '    }\n', '\n', '    function createSDCC(address _address, uint256 _quantity) onlyAuthorized public returns (bool success){\n', '        balances_chips[_address] = balances_chips[_address].add(_quantity);\n', '        total_SDCC_supply = total_SDCC_supply.add(_quantity);\n', '        return true;\n', '    }\n', '    \n', '    function chipBalanceOf(address _address) public returns (uint256 _amount) {\n', '        return balances_chips[_address];\n', '    }\n', '\n', '    function transferChips(address _from, address _to, uint256 _value) onlyAuthorized public returns (bool success) {\n', '        require(_to != 0x0 && _to != address(msg.sender));\n', '        balances_chips[_from] = balances_chips[_from].sub(_value); // Deduct senders balance\n', '        balances_chips[_to] = balances_chips[_to].add(_value);               // Add recivers blaance\n', '        return true;\n', '    }\n', '\n', '    function changeSoundcoinsContract(address _newAddress) public onlyOwner {\n', '        SoundcoinsAddress = _newAddress;\n', '    }\n', '\n', '    function stakeSDC(address _address, uint256 amount) onlyAuthorized public returns(bool){\n', '        balances[_address] = balances[_address].sub(amount);\n', '        availableSupply = availableSupply.sub(amount);\n', '        holdings_SDC[_address] = holdings_SDC[_address].add(amount);\n', '        holdingsSupply = holdingsSupply.add(amount);\n', '        return true;\n', '    }\n', '\n', '    function endStake(address _address, uint256 amount) onlyAuthorized public returns(bool){\n', '        balances[_address] = balances[_address].add(amount);\n', '        availableSupply = availableSupply.add(amount);\n', '        holdings_SDC[_address] = holdings_SDC[_address].sub(amount);\n', '        holdingsSupply = holdingsSupply.sub(amount);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '    \n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract IERC20Token {\n', '    function totalSupply() public constant returns (uint256 totalSupply);\n', '    function balanceOf(address _owner) public  constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    // NOT IERC20 Token\n', '    function hasSDC(address _address,uint256 _quantity) public returns (bool success);\n', '    function hasSDCC(address _address,uint256 _quantity) public returns (bool success);\n', '    function eliminateSDCC(address _address,uint256 _quantity) public returns (bool success);\n', '    function createSDCC(address _address,uint256 _quantity) public returns (bool success); \n', '    function createSDC(address _address,uint256 _init_quantity, uint256 _quantity) public returns (bool success);\n', '    function stakeSDC(address _address, uint256 amount)  public returns(bool);\n', '    function endStake(address _address, uint256 amount)  public returns(bool);\n', '\n', '    function chipBalanceOf(address _address) public returns (uint256 _amount);\n', '    function transferChips(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '    \n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Lockable is Owned{\n', '\n', '\tuint256 public lockedUntilBlock;\n', '\n', '\tevent ContractLocked(uint256 _untilBlock, string _reason);\n', '\n', '\tmodifier lockAffected {\n', '\t\trequire(block.number > lockedUntilBlock);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction lockFromSelf(uint256 _untilBlock, string _reason) internal {\n', '\t\tlockedUntilBlock = _untilBlock;\n', '\t\tContractLocked(_untilBlock, _reason);\n', '\t}\n', '\n', '\n', '\tfunction lockUntil(uint256 _untilBlock, string _reason) onlyOwner {\n', '\t\tlockedUntilBlock = _untilBlock;\n', '\t\tContractLocked(_untilBlock, _reason);\n', '\t}\n', '}\n', '\n', 'contract Token is IERC20Token, Lockable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\t/* Public variables of the token */\n', '\tstring public standard;\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint8 public decimals;\n', '\tuint256 public supply;\n', '\n', '\taddress public crowdsaleContractAddress;\n', '\n', '\t/* Private variables of the token */\n', '\tmapping (address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowances;\n', '\n', '\t/* Events */\n', '\tevent Mint(address indexed _to, uint256 _value);\n', '\n', '\tfunction Token(){\n', '\n', '\t}\n', '\t/* Returns total supply of issued tokens */\n', '\tfunction totalSupply() constant returns (uint256) {\n', '\t\treturn supply;\n', '\t}\n', '\n', '\t/* Returns balance of address */\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\t/* Transfers tokens from your address to other */\n', '\tfunction transfer(address _to, uint256 _value) lockAffected returns (bool success) {\n', '\t\trequire(_to != 0x0 && _to != address(this));\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value); // Deduct senders balance\n', '\t\tbalances[_to] = balances[_to].add(_value);               // Add recivers blaance\n', '\t\tTransfer(msg.sender, _to, _value);                       // Raise Transfer event\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/* Approve other address to spend tokens on your account */\n', '\tfunction approve(address _spender, uint256 _value) lockAffected returns (bool success) {\n', '\t\tallowances[msg.sender][_spender] = _value;        // Set allowance\n', '\t\tApproval(msg.sender, _spender, _value);           // Raise Approval event\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/* A contract attempts to get the coins */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)  returns (bool success) {\n', '\t\trequire(_to != 0x0 && _to != address(this));\n', '\t\tbalances[_from] = balances[_from].sub(_value);                              // Deduct senders balance\n', '\t\tbalances[_to] = balances[_to].add(_value);                                  // Add recipient blaance\n', '\t\tallowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);  // Deduct allowance for this address\n', '\t\tTransfer(_from, _to, _value);                                               // Raise Transfer event\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '\t\treturn allowances[_owner][_spender];\n', '\t}\n', '\n', '\tfunction mintTokens(address _to, uint256 _amount) {\n', '\t\trequire(msg.sender == crowdsaleContractAddress);\n', '\t\tsupply = supply.add(_amount);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\tMint(_to, _amount);\n', '\t\tTransfer(0x0, _to, _amount);\n', '\t}\n', '\n', '\tfunction salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner {\n', '\t\tIERC20Token(_tokenAddress).transfer(_to, _amount);\n', '\t}\n', '}\n', '\n', '\n', '//----------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract SoundcoinsToken is Token {\n', '\n', '    address _teamAddress; // Account 3\n', '    address _saleAddress;\n', '\n', '    uint256 availableSupply = 250000000;\n', '    uint256 minableSupply = 750000000;\n', '\n', '    address public SoundcoinsAddress;\n', '    /* Balances for ships */\n', '    uint256 public total_SDCC_supply = 0;\n', '    mapping (address => uint256) balances_chips;\n', '    mapping (address => uint256) holdings_SDC;\n', '    uint256 holdingsSupply = 0;\n', '\n', '\n', '    modifier onlyAuthorized {\n', '        require(msg.sender == SoundcoinsAddress);\n', '        _;\n', '    }\n', '    /* Initializes contract */\n', '    function SoundcoinsToken(address _crowdsaleContract) public {\n', '        standard = "Soundcoins Token  V1.0";\n', '        name = "Soundcoins";\n', '        symbol = "SDC";\n', '        decimals = 0;\n', '        supply = 1000000000;\n', '        _teamAddress = msg.sender;\n', '        balances[msg.sender] = 100000000;\n', '        _saleAddress = _crowdsaleContract;\n', '        balances[_crowdsaleContract] = 150000000;\n', '    }\n', '\n', '    /********* */\n', '    /* TOOLS  */\n', '    /********* */\n', '\n', '\n', '    function getAvailableSupply() public returns (uint256){\n', '        return availableSupply;\n', '    }\n', '\n', '    function getMinableSupply() public returns (uint256){\n', '        return minableSupply;\n', '    }\n', '\n', '    function getHoldingsSupply() public returns (uint256){\n', '        return holdingsSupply;\n', '    }\n', '\n', '    function getSDCCSupply() public returns (uint256){\n', '        return total_SDCC_supply;\n', '    }\n', '\n', '    function getSoundcoinsAddress() public returns (address){\n', '        return SoundcoinsAddress;\n', '    }\n', '    // See if Address has Enough SDC\n', '    function hasSDC(address _address,uint256 _quantity) public returns (bool success){\n', '        return (balances[_address] >= _quantity);\n', '    }\n', '\n', '    // See if Address has Enough SDC\n', '    function hasSDCC(address _address, uint256 _quantity) public returns (bool success){\n', '        return (chipBalanceOf(_address) >= _quantity);\n', '    }\n', '   /*SDC*/\n', '\n', '    function createSDC(address _address, uint256 _init_quantity, uint256 _quantity) onlyAuthorized public returns (bool success){\n', '        require(minableSupply >= 0);\n', '        balances[_address] = balances[_address].add(_quantity);\n', '        availableSupply = availableSupply.add(_quantity);\n', '        holdings_SDC[_address] = holdings_SDC[_address].sub(_init_quantity);\n', '        minableSupply = minableSupply.sub(_quantity.sub(_init_quantity));\n', '        holdingsSupply = holdingsSupply.sub(_init_quantity);\n', '        return true;\n', '    }\n', '\n', '    function eliminateSDCC(address _address, uint256 _quantity) onlyAuthorized public returns (bool success){\n', '        balances_chips[_address] = balances_chips[_address].sub(_quantity);\n', '        total_SDCC_supply = total_SDCC_supply.sub(_quantity);\n', '        return true;\n', '    }\n', '\n', '    function createSDCC(address _address, uint256 _quantity) onlyAuthorized public returns (bool success){\n', '        balances_chips[_address] = balances_chips[_address].add(_quantity);\n', '        total_SDCC_supply = total_SDCC_supply.add(_quantity);\n', '        return true;\n', '    }\n', '    \n', '    function chipBalanceOf(address _address) public returns (uint256 _amount) {\n', '        return balances_chips[_address];\n', '    }\n', '\n', '    function transferChips(address _from, address _to, uint256 _value) onlyAuthorized public returns (bool success) {\n', '        require(_to != 0x0 && _to != address(msg.sender));\n', '        balances_chips[_from] = balances_chips[_from].sub(_value); // Deduct senders balance\n', '        balances_chips[_to] = balances_chips[_to].add(_value);               // Add recivers blaance\n', '        return true;\n', '    }\n', '\n', '    function changeSoundcoinsContract(address _newAddress) public onlyOwner {\n', '        SoundcoinsAddress = _newAddress;\n', '    }\n', '\n', '    function stakeSDC(address _address, uint256 amount) onlyAuthorized public returns(bool){\n', '        balances[_address] = balances[_address].sub(amount);\n', '        availableSupply = availableSupply.sub(amount);\n', '        holdings_SDC[_address] = holdings_SDC[_address].add(amount);\n', '        holdingsSupply = holdingsSupply.add(amount);\n', '        return true;\n', '    }\n', '\n', '    function endStake(address _address, uint256 amount) onlyAuthorized public returns(bool){\n', '        balances[_address] = balances[_address].add(amount);\n', '        availableSupply = availableSupply.add(amount);\n', '        holdings_SDC[_address] = holdings_SDC[_address].sub(amount);\n', '        holdingsSupply = holdingsSupply.sub(amount);\n', '        return true;\n', '    }\n', '}']
