['/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', 'pragma solidity 0.4.21;\n', '/// @title Utility Functions for address\n', '/// @author Kongliang Zhong - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d7bcb8b9b0bbbeb6b9b097bbb8b8a7a5beb9b0f9b8a5b0">[email&#160;protected]</a>>\n', 'library StringUtil {\n', '    function stringToBytes12(string str)\n', '        internal\n', '        pure\n', '        returns (bytes12 result)\n', '    {\n', '        assembly {\n', '            result := mload(add(str, 32))\n', '        }\n', '    }\n', '    function stringToBytes10(string str)\n', '        internal\n', '        pure\n', '        returns (bytes10 result)\n', '    {\n', '        assembly {\n', '            result := mload(add(str, 32))\n', '        }\n', '    }\n', '    /// check length >= min && <= max\n', '    function checkStringLength(string name, uint min, uint max)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        bytes memory temp = bytes(name);\n', '        return temp.length >= min && temp.length <= max;\n', '    }\n', '}\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/// @title Utility Functions for address\n', '/// @author Daniel Wang - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c8aca9a6a1ada488a4a7a7b8baa1a6afe6a7baaf">[email&#160;protected]</a>>\n', 'library AddressUtil {\n', '    function isContract(address addr)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        if (addr == 0x0) {\n', '            return false;\n', '        } else {\n', '            uint size;\n', '            assembly { size := extcodesize(addr) }\n', '            return size > 0;\n', '        }\n', '    }\n', '}\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/*\n', '    Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/// @title ERC20 Token Interface\n', '/// @dev see https://github.com/ethereum/EIPs/issues/20\n', '/// @author Daniel Wang - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5c383d323539301c3033332c2e35323b72332e3b">[email&#160;protected]</a>>\n', 'contract ERC20 {\n', '    function balanceOf(address who) view public returns (uint256);\n', '    function allowance(address owner, address spender) view public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/// @title Utility Functions for uint\n', '/// @author Daniel Wang - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="99fdf8f7f0fcf5d9f5f6f6e9ebf0f7feb7f6ebfe">[email&#160;protected]</a>>\n', 'library MathUint {\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function tolerantSub(uint a, uint b) internal pure returns (uint c) {\n', '        return (a >= b) ? a - b : 0;\n', '    }\n', '    /// @dev calculate the square of Coefficient of Variation (CV)\n', '    /// https://en.wikipedia.org/wiki/Coefficient_of_variation\n', '    function cvsquare(\n', '        uint[] arr,\n', '        uint scale\n', '        )\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        uint len = arr.length;\n', '        require(len > 1);\n', '        require(scale > 0);\n', '        uint avg = 0;\n', '        for (uint i = 0; i < len; i++) {\n', '            avg += arr[i];\n', '        }\n', '        avg = avg / len;\n', '        if (avg == 0) {\n', '            return 0;\n', '        }\n', '        uint cvs = 0;\n', '        uint s;\n', '        uint item;\n', '        for (i = 0; i < len; i++) {\n', '            item = arr[i];\n', '            s = item > avg ? item - avg : avg - item;\n', '            cvs += mul(s, s);\n', '        }\n', '        return ((mul(mul(cvs, scale), scale) / avg) / avg) / (len - 1);\n', '    }\n', '}\n', '/// @title ERC20 Token Implementation\n', '/// @dev see https://github.com/ethereum/EIPs/issues/20\n', '/// @author Daniel Wang - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bcd8ddd2d5d9d0fcd0d3d3ccced5d2db92d3cedb">[email&#160;protected]</a>>\n', 'contract ERC20Token is ERC20 {\n', '    using MathUint for uint;\n', '    string  public name;\n', '    string  public symbol;\n', '    uint8   public decimals;\n', '    uint    public totalSupply_;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    function ERC20Token(\n', '        string  _name,\n', '        string  _symbol,\n', '        uint8   _decimals,\n', '        uint    _totalSupply,\n', '        address _firstHolder\n', '        )\n', '        public\n', '    {\n', '        require(bytes(_name).length > 0);\n', '        require(bytes(_symbol).length > 0);\n', '        require(_totalSupply > 0);\n', '        require(_firstHolder != 0x0);\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        totalSupply_ = _totalSupply;\n', '        balances[_firstHolder] = totalSupply_;\n', '    }\n', '    function () payable public\n', '    {\n', '        revert();\n', '    }\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '        )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner)\n', '        public\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '        )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value\n', '        )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '        )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '        )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/// @title Ownable\n', '/// @dev The Ownable contract has an owner address, and provides basic\n', '///      authorization control functions, this simplifies the implementation of\n', '///      "user permissions".\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '    /// @dev The Ownable constructor sets the original `owner` of the contract\n', '    ///      to the sender.\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    /// @dev Throws if called by any account other than the owner.\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /// @dev Allows the current owner to transfer control of the contract to a\n', '    ///      newOwner.\n', '    /// @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != 0x0);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '/// @title Claimable\n', '/// @dev Extension for the Ownable contract, where the ownership needs\n', '///      to be claimed. This allows the new owner to accept the transfer.\n', 'contract Claimable is Ownable {\n', '    address public pendingOwner;\n', '    /// @dev Modifier throws if called by any account other than the pendingOwner.\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '    /// @dev Allows the current owner to set the pendingOwner address.\n', '    /// @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != 0x0 && newOwner != owner);\n', '        pendingOwner = newOwner;\n', '    }\n', '    /// @dev Allows the pendingOwner address to finalize the transfer.\n', '    function claimOwnership() onlyPendingOwner public {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = 0x0;\n', '    }\n', '}\n', '/// @title Token Register Contract\n', '/// @dev This contract maintains a list of tokens the Protocol supports.\n', '/// @author Kongliang Zhong - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c6ada9a8a1aaafa7a8a186aaa9a9b6b4afa8a1e8a9b4a1">[email&#160;protected]</a>>,\n', '/// @author Daniel Wang - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1f7b7e71767a735f7370706f6d76717831706d78">[email&#160;protected]</a>>.\n', 'contract TokenRegistry is Claimable {\n', '    using AddressUtil for address;\n', '    address tokenMintAddr;\n', '    address[] public addresses;\n', '    mapping (address => TokenInfo) addressMap;\n', '    mapping (string => address) symbolMap;\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    /// Structs                                                              ///\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    struct TokenInfo {\n', '        uint   pos;      // 0 mens unregistered; if > 0, pos + 1 is the\n', '                         // token&#39;s position in `addresses`.\n', '        string symbol;   // Symbol of the token\n', '    }\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    /// Events                                                               ///\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    event TokenRegistered(address addr, string symbol);\n', '    event TokenUnregistered(address addr, string symbol);\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    /// Public Functions                                                     ///\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    /// @dev Disable default function.\n', '    function () payable public {\n', '        revert();\n', '    }\n', '    function TokenRegistry(address _tokenMintAddr) public\n', '    {\n', '        require(_tokenMintAddr.isContract());\n', '        tokenMintAddr = _tokenMintAddr;\n', '    }\n', '    function registerToken(\n', '        address addr,\n', '        string  symbol\n', '        )\n', '        external\n', '        onlyOwner\n', '    {\n', '        registerTokenInternal(addr, symbol);\n', '    }\n', '    function registerMintedToken(\n', '        address addr,\n', '        string  symbol\n', '        )\n', '        external\n', '    {\n', '        require(msg.sender == tokenMintAddr);\n', '        registerTokenInternal(addr, symbol);\n', '    }\n', '    function unregisterToken(\n', '        address addr,\n', '        string  symbol\n', '        )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(addr != 0x0);\n', '        require(symbolMap[symbol] == addr);\n', '        delete symbolMap[symbol];\n', '        uint pos = addressMap[addr].pos;\n', '        require(pos != 0);\n', '        delete addressMap[addr];\n', '        // We will replace the token we need to unregister with the last token\n', '        // Only the pos of the last token will need to be updated\n', '        address lastToken = addresses[addresses.length - 1];\n', '        // Don&#39;t do anything if the last token is the one we want to delete\n', '        if (addr != lastToken) {\n', '            // Swap with the last token and update the pos\n', '            addresses[pos - 1] = lastToken;\n', '            addressMap[lastToken].pos = pos;\n', '        }\n', '        addresses.length--;\n', '        emit TokenUnregistered(addr, symbol);\n', '    }\n', '    function areAllTokensRegistered(address[] addressList)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        for (uint i = 0; i < addressList.length; i++) {\n', '            if (addressMap[addressList[i]].pos == 0) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    function getAddressBySymbol(string symbol)\n', '        external\n', '        view\n', '        returns (address)\n', '    {\n', '        return symbolMap[symbol];\n', '    }\n', '    function isTokenRegisteredBySymbol(string symbol)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return symbolMap[symbol] != 0x0;\n', '    }\n', '    function isTokenRegistered(address addr)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return addressMap[addr].pos != 0;\n', '    }\n', '    function getTokens(\n', '        uint start,\n', '        uint count\n', '        )\n', '        public\n', '        view\n', '        returns (address[] addressList)\n', '    {\n', '        uint num = addresses.length;\n', '        if (start >= num) {\n', '            return;\n', '        }\n', '        uint end = start + count;\n', '        if (end > num) {\n', '            end = num;\n', '        }\n', '        if (start == num) {\n', '            return;\n', '        }\n', '        addressList = new address[](end - start);\n', '        for (uint i = start; i < end; i++) {\n', '            addressList[i - start] = addresses[i];\n', '        }\n', '    }\n', '    function registerTokenInternal(\n', '        address addr,\n', '        string  symbol\n', '        )\n', '        internal\n', '    {\n', '        require(0x0 != addr);\n', '        require(bytes(symbol).length > 0);\n', '        require(0x0 == symbolMap[symbol]);\n', '        require(0 == addressMap[addr].pos);\n', '        addresses.push(addr);\n', '        symbolMap[symbol] = addr;\n', '        addressMap[addr] = TokenInfo(addresses.length, symbol);\n', '        emit TokenRegistered(addr, symbol);\n', '    }\n', '}\n', '/// @title ERC20 Token Mint\n', '/// @dev This contract deploys ERC20 token contract and registered the contract\n', '///      so the token can be traded with Loopring Protocol.\n', '/// @author Kongliang Zhong - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="761d1918111a1f171811361a191906041f181158190411">[email&#160;protected]</a>>,\n', '/// @author Daniel Wang - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ef8b8e81868a83af8380809f9d868188c1809d88">[email&#160;protected]</a>>.\n', 'contract TokenFactory {\n', '    using AddressUtil for address;\n', '    using StringUtil for string;\n', '    mapping(bytes10 => address) public tokens;\n', '    address   public tokenRegistry;\n', '    event TokenCreated(\n', '        address indexed addr,\n', '        string  name,\n', '        string  symbol,\n', '        uint8   decimals,\n', '        uint    totalSupply,\n', '        address firstHolder\n', '    );\n', '    /// @dev Disable default function.\n', '    function () payable public\n', '    {\n', '        revert();\n', '    }\n', '    /// @dev Initialize TokenRegistry address.\n', '    ///      This method shall be called immediately upon deployment.\n', '    function initialize(address _tokenRegistry)\n', '        public\n', '    {\n', '        require(tokenRegistry == 0x0 && _tokenRegistry.isContract());\n', '        tokenRegistry = _tokenRegistry;\n', '    }\n', '    /// @dev Deploy an ERC20 token contract, register it with TokenRegistry,\n', '    ///      and returns the new token&#39;s address.\n', '    /// @param name The name of the token\n', '    /// @param symbol The symbol of the token.\n', '    /// @param decimals The decimals of the token.\n', '    /// @param totalSupply The total supply of the token.\n', '    function createToken(\n', '        string  name,\n', '        string  symbol,\n', '        uint8   decimals,\n', '        uint    totalSupply\n', '        )\n', '        public\n', '        returns (address addr)\n', '    {\n', '        require(tokenRegistry != 0x0);\n', '        require(symbol.checkStringLength(3, 10));\n', '        bytes10 symbolBytes = symbol.stringToBytes10();\n', '        require(tokens[symbolBytes] == 0x0);\n', '        ERC20Token token = new ERC20Token(\n', '            name,\n', '            symbol,\n', '            decimals,\n', '            totalSupply,\n', '            tx.origin\n', '        );\n', '        addr = address(token);\n', '        TokenRegistry(tokenRegistry).registerMintedToken(addr, symbol);\n', '        tokens[symbolBytes] = addr;\n', '        emit TokenCreated(\n', '            addr,\n', '            name,\n', '            symbol,\n', '            decimals,\n', '            totalSupply,\n', '            tx.origin\n', '        );\n', '    }\n', '}']
['/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', 'pragma solidity 0.4.21;\n', '/// @title Utility Functions for address\n', '/// @author Kongliang Zhong - <kongliang@loopring.org>\n', 'library StringUtil {\n', '    function stringToBytes12(string str)\n', '        internal\n', '        pure\n', '        returns (bytes12 result)\n', '    {\n', '        assembly {\n', '            result := mload(add(str, 32))\n', '        }\n', '    }\n', '    function stringToBytes10(string str)\n', '        internal\n', '        pure\n', '        returns (bytes10 result)\n', '    {\n', '        assembly {\n', '            result := mload(add(str, 32))\n', '        }\n', '    }\n', '    /// check length >= min && <= max\n', '    function checkStringLength(string name, uint min, uint max)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        bytes memory temp = bytes(name);\n', '        return temp.length >= min && temp.length <= max;\n', '    }\n', '}\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/// @title Utility Functions for address\n', '/// @author Daniel Wang - <daniel@loopring.org>\n', 'library AddressUtil {\n', '    function isContract(address addr)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        if (addr == 0x0) {\n', '            return false;\n', '        } else {\n', '            uint size;\n', '            assembly { size := extcodesize(addr) }\n', '            return size > 0;\n', '        }\n', '    }\n', '}\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/*\n', '    Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/// @title ERC20 Token Interface\n', '/// @dev see https://github.com/ethereum/EIPs/issues/20\n', '/// @author Daniel Wang - <daniel@loopring.org>\n', 'contract ERC20 {\n', '    function balanceOf(address who) view public returns (uint256);\n', '    function allowance(address owner, address spender) view public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/// @title Utility Functions for uint\n', '/// @author Daniel Wang - <daniel@loopring.org>\n', 'library MathUint {\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function tolerantSub(uint a, uint b) internal pure returns (uint c) {\n', '        return (a >= b) ? a - b : 0;\n', '    }\n', '    /// @dev calculate the square of Coefficient of Variation (CV)\n', '    /// https://en.wikipedia.org/wiki/Coefficient_of_variation\n', '    function cvsquare(\n', '        uint[] arr,\n', '        uint scale\n', '        )\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        uint len = arr.length;\n', '        require(len > 1);\n', '        require(scale > 0);\n', '        uint avg = 0;\n', '        for (uint i = 0; i < len; i++) {\n', '            avg += arr[i];\n', '        }\n', '        avg = avg / len;\n', '        if (avg == 0) {\n', '            return 0;\n', '        }\n', '        uint cvs = 0;\n', '        uint s;\n', '        uint item;\n', '        for (i = 0; i < len; i++) {\n', '            item = arr[i];\n', '            s = item > avg ? item - avg : avg - item;\n', '            cvs += mul(s, s);\n', '        }\n', '        return ((mul(mul(cvs, scale), scale) / avg) / avg) / (len - 1);\n', '    }\n', '}\n', '/// @title ERC20 Token Implementation\n', '/// @dev see https://github.com/ethereum/EIPs/issues/20\n', '/// @author Daniel Wang - <daniel@loopring.org>\n', 'contract ERC20Token is ERC20 {\n', '    using MathUint for uint;\n', '    string  public name;\n', '    string  public symbol;\n', '    uint8   public decimals;\n', '    uint    public totalSupply_;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    function ERC20Token(\n', '        string  _name,\n', '        string  _symbol,\n', '        uint8   _decimals,\n', '        uint    _totalSupply,\n', '        address _firstHolder\n', '        )\n', '        public\n', '    {\n', '        require(bytes(_name).length > 0);\n', '        require(bytes(_symbol).length > 0);\n', '        require(_totalSupply > 0);\n', '        require(_firstHolder != 0x0);\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        totalSupply_ = _totalSupply;\n', '        balances[_firstHolder] = totalSupply_;\n', '    }\n', '    function () payable public\n', '    {\n', '        revert();\n', '    }\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '        )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner)\n', '        public\n', '        view\n', '        returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '        )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value\n', '        )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '        )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '        )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/*\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '*/\n', '/// @title Ownable\n', '/// @dev The Ownable contract has an owner address, and provides basic\n', '///      authorization control functions, this simplifies the implementation of\n', '///      "user permissions".\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '    /// @dev The Ownable constructor sets the original `owner` of the contract\n', '    ///      to the sender.\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    /// @dev Throws if called by any account other than the owner.\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /// @dev Allows the current owner to transfer control of the contract to a\n', '    ///      newOwner.\n', '    /// @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != 0x0);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '/// @title Claimable\n', '/// @dev Extension for the Ownable contract, where the ownership needs\n', '///      to be claimed. This allows the new owner to accept the transfer.\n', 'contract Claimable is Ownable {\n', '    address public pendingOwner;\n', '    /// @dev Modifier throws if called by any account other than the pendingOwner.\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '    /// @dev Allows the current owner to set the pendingOwner address.\n', '    /// @param newOwner The address to transfer ownership to.\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != 0x0 && newOwner != owner);\n', '        pendingOwner = newOwner;\n', '    }\n', '    /// @dev Allows the pendingOwner address to finalize the transfer.\n', '    function claimOwnership() onlyPendingOwner public {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = 0x0;\n', '    }\n', '}\n', '/// @title Token Register Contract\n', '/// @dev This contract maintains a list of tokens the Protocol supports.\n', '/// @author Kongliang Zhong - <kongliang@loopring.org>,\n', '/// @author Daniel Wang - <daniel@loopring.org>.\n', 'contract TokenRegistry is Claimable {\n', '    using AddressUtil for address;\n', '    address tokenMintAddr;\n', '    address[] public addresses;\n', '    mapping (address => TokenInfo) addressMap;\n', '    mapping (string => address) symbolMap;\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    /// Structs                                                              ///\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    struct TokenInfo {\n', '        uint   pos;      // 0 mens unregistered; if > 0, pos + 1 is the\n', "                         // token's position in `addresses`.\n", '        string symbol;   // Symbol of the token\n', '    }\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    /// Events                                                               ///\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    event TokenRegistered(address addr, string symbol);\n', '    event TokenUnregistered(address addr, string symbol);\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    /// Public Functions                                                     ///\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    /// @dev Disable default function.\n', '    function () payable public {\n', '        revert();\n', '    }\n', '    function TokenRegistry(address _tokenMintAddr) public\n', '    {\n', '        require(_tokenMintAddr.isContract());\n', '        tokenMintAddr = _tokenMintAddr;\n', '    }\n', '    function registerToken(\n', '        address addr,\n', '        string  symbol\n', '        )\n', '        external\n', '        onlyOwner\n', '    {\n', '        registerTokenInternal(addr, symbol);\n', '    }\n', '    function registerMintedToken(\n', '        address addr,\n', '        string  symbol\n', '        )\n', '        external\n', '    {\n', '        require(msg.sender == tokenMintAddr);\n', '        registerTokenInternal(addr, symbol);\n', '    }\n', '    function unregisterToken(\n', '        address addr,\n', '        string  symbol\n', '        )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(addr != 0x0);\n', '        require(symbolMap[symbol] == addr);\n', '        delete symbolMap[symbol];\n', '        uint pos = addressMap[addr].pos;\n', '        require(pos != 0);\n', '        delete addressMap[addr];\n', '        // We will replace the token we need to unregister with the last token\n', '        // Only the pos of the last token will need to be updated\n', '        address lastToken = addresses[addresses.length - 1];\n', "        // Don't do anything if the last token is the one we want to delete\n", '        if (addr != lastToken) {\n', '            // Swap with the last token and update the pos\n', '            addresses[pos - 1] = lastToken;\n', '            addressMap[lastToken].pos = pos;\n', '        }\n', '        addresses.length--;\n', '        emit TokenUnregistered(addr, symbol);\n', '    }\n', '    function areAllTokensRegistered(address[] addressList)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        for (uint i = 0; i < addressList.length; i++) {\n', '            if (addressMap[addressList[i]].pos == 0) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    function getAddressBySymbol(string symbol)\n', '        external\n', '        view\n', '        returns (address)\n', '    {\n', '        return symbolMap[symbol];\n', '    }\n', '    function isTokenRegisteredBySymbol(string symbol)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return symbolMap[symbol] != 0x0;\n', '    }\n', '    function isTokenRegistered(address addr)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return addressMap[addr].pos != 0;\n', '    }\n', '    function getTokens(\n', '        uint start,\n', '        uint count\n', '        )\n', '        public\n', '        view\n', '        returns (address[] addressList)\n', '    {\n', '        uint num = addresses.length;\n', '        if (start >= num) {\n', '            return;\n', '        }\n', '        uint end = start + count;\n', '        if (end > num) {\n', '            end = num;\n', '        }\n', '        if (start == num) {\n', '            return;\n', '        }\n', '        addressList = new address[](end - start);\n', '        for (uint i = start; i < end; i++) {\n', '            addressList[i - start] = addresses[i];\n', '        }\n', '    }\n', '    function registerTokenInternal(\n', '        address addr,\n', '        string  symbol\n', '        )\n', '        internal\n', '    {\n', '        require(0x0 != addr);\n', '        require(bytes(symbol).length > 0);\n', '        require(0x0 == symbolMap[symbol]);\n', '        require(0 == addressMap[addr].pos);\n', '        addresses.push(addr);\n', '        symbolMap[symbol] = addr;\n', '        addressMap[addr] = TokenInfo(addresses.length, symbol);\n', '        emit TokenRegistered(addr, symbol);\n', '    }\n', '}\n', '/// @title ERC20 Token Mint\n', '/// @dev This contract deploys ERC20 token contract and registered the contract\n', '///      so the token can be traded with Loopring Protocol.\n', '/// @author Kongliang Zhong - <kongliang@loopring.org>,\n', '/// @author Daniel Wang - <daniel@loopring.org>.\n', 'contract TokenFactory {\n', '    using AddressUtil for address;\n', '    using StringUtil for string;\n', '    mapping(bytes10 => address) public tokens;\n', '    address   public tokenRegistry;\n', '    event TokenCreated(\n', '        address indexed addr,\n', '        string  name,\n', '        string  symbol,\n', '        uint8   decimals,\n', '        uint    totalSupply,\n', '        address firstHolder\n', '    );\n', '    /// @dev Disable default function.\n', '    function () payable public\n', '    {\n', '        revert();\n', '    }\n', '    /// @dev Initialize TokenRegistry address.\n', '    ///      This method shall be called immediately upon deployment.\n', '    function initialize(address _tokenRegistry)\n', '        public\n', '    {\n', '        require(tokenRegistry == 0x0 && _tokenRegistry.isContract());\n', '        tokenRegistry = _tokenRegistry;\n', '    }\n', '    /// @dev Deploy an ERC20 token contract, register it with TokenRegistry,\n', "    ///      and returns the new token's address.\n", '    /// @param name The name of the token\n', '    /// @param symbol The symbol of the token.\n', '    /// @param decimals The decimals of the token.\n', '    /// @param totalSupply The total supply of the token.\n', '    function createToken(\n', '        string  name,\n', '        string  symbol,\n', '        uint8   decimals,\n', '        uint    totalSupply\n', '        )\n', '        public\n', '        returns (address addr)\n', '    {\n', '        require(tokenRegistry != 0x0);\n', '        require(symbol.checkStringLength(3, 10));\n', '        bytes10 symbolBytes = symbol.stringToBytes10();\n', '        require(tokens[symbolBytes] == 0x0);\n', '        ERC20Token token = new ERC20Token(\n', '            name,\n', '            symbol,\n', '            decimals,\n', '            totalSupply,\n', '            tx.origin\n', '        );\n', '        addr = address(token);\n', '        TokenRegistry(tokenRegistry).registerMintedToken(addr, symbol);\n', '        tokens[symbolBytes] = addr;\n', '        emit TokenCreated(\n', '            addr,\n', '            name,\n', '            symbol,\n', '            decimals,\n', '            totalSupply,\n', '            tx.origin\n', '        );\n', '    }\n', '}']
