['pragma solidity 0.4.19;\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '// ERC20 Short Address Attack fix\n', 'contract InputValidator {\n', '    modifier safeArguments(uint _numArgs) {\n', '        assert(msg.data.length == _numArgs * 32 + 4);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint totalSupply);\n', '    function balanceOf(address _owner) constant returns (uint balance);\n', '    function transfer(address _to, uint _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '    function approve(address _spender, uint _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '\n', 'contract EngravedCoin is ERC20, InputValidator, Owned {\n', '    string public name = "Engraved Coin";\n', '    string public symbol = "XEG";\n', '    uint8 public decimals = 18;\n', '\n', '    // Token state\n', '    uint internal currentTotalSupply;\n', '\n', '    // Token balances\n', '    mapping (address => uint) internal balances;\n', '\n', '    // Token allowances\n', '    mapping (address => mapping (address => uint)) internal allowed;\n', '\n', '    function EngravedCoin() public {\n', '        owner = msg.sender;\n', '        balances[msg.sender] = 0;\n', '        currentTotalSupply = 0;\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return currentTotalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public safeArguments(2) returns (bool) {\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public safeArguments(3) returns (bool) {\n', '        require(balances[_from] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public safeArguments(2) returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function issue(address _to, uint _value) public onlyOwner safeArguments(2) returns (bool) {\n', '        require(balances[_to] + _value > balances[_to]);\n', '\n', '        balances[_to] += _value;\n', '        currentTotalSupply += _value;\n', '\n', '        Transfer(0, this, _value);\n', '        Transfer(this, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '}']