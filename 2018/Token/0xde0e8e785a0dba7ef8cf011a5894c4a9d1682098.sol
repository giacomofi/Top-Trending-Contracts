['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract ThinkCoin is MintableToken {\n', '  string public name = "ThinkCoin";\n', '  string public symbol = "TCO";\n', '  uint8 public decimals = 18;\n', '  uint256 public cap;\n', '\n', '  function ThinkCoin(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // override\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '  // override\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(mintingFinished == true);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  // override\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(mintingFinished == true);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function() public payable {\n', '    revert();\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract LockingContract is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event NotedTokens(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event ReleasedTokens(address indexed _beneficiary);\n', '  event ReducedLockingTime(uint256 _newUnlockTime);\n', '\n', '  ERC20 public tokenContract;\n', '  mapping(address => uint256) public tokens;\n', '  uint256 public totalTokens;\n', '  uint256 public unlockTime;\n', '\n', '  function isLocked() public view returns(bool) {\n', '    return now < unlockTime;\n', '  }\n', '\n', '  modifier onlyWhenUnlocked() {\n', '    require(!isLocked());\n', '    _;\n', '  }\n', '\n', '  modifier onlyWhenLocked() {\n', '    require(isLocked());\n', '    _;\n', '  }\n', '\n', '  function LockingContract(ERC20 _tokenContract, uint256 _lockingDuration) public {\n', '    require(_lockingDuration > 0);\n', '    unlockTime = now.add(_lockingDuration);\n', '    tokenContract = _tokenContract;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return tokens[_owner];\n', '  }\n', '\n', '  // Should only be done from another contract.\n', '  // To ensure that the LockingContract can release all noted tokens later,\n', '  // one should mint/transfer tokens to the LockingContract&#39;s account prior to noting\n', '  function noteTokens(address _beneficiary, uint256 _tokenAmount) external onlyOwner onlyWhenLocked {\n', '    uint256 tokenBalance = tokenContract.balanceOf(this);\n', '    require(tokenBalance == totalTokens.add(_tokenAmount));\n', '\n', '    tokens[_beneficiary] = tokens[_beneficiary].add(_tokenAmount);\n', '    totalTokens = totalTokens.add(_tokenAmount);\n', '    NotedTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function releaseTokens(address _beneficiary) public onlyWhenUnlocked {\n', '    uint256 amount = tokens[_beneficiary];\n', '    tokens[_beneficiary] = 0;\n', '    require(tokenContract.transfer(_beneficiary, amount)); \n', '    totalTokens = totalTokens.sub(amount);\n', '    ReleasedTokens(_beneficiary);\n', '  }\n', '\n', '  function reduceLockingTime(uint256 _newUnlockTime) public onlyOwner onlyWhenLocked {\n', '    require(_newUnlockTime >= now);\n', '    require(_newUnlockTime < unlockTime);\n', '    unlockTime = _newUnlockTime;\n', '    ReducedLockingTime(_newUnlockTime);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract Crowdsale is Ownable, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  event MintProposed(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event MintLockedProposed(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event MintApproved(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event MintLockedApproved(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event MintedAllocation(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event ProposerChanged(address _newProposer);\n', '  event ApproverChanged(address _newApprover);\n', '\n', '  ThinkCoin public token;\n', '  LockingContract public lockingContract;\n', '  address public proposer; // proposes mintages of tokens\n', '  address public approver; // approves proposed mintages\n', '  mapping(address => uint256) public mintProposals;\n', '  mapping(address => uint256) public mintLockedProposals;\n', '  uint256 public proposedTotal = 0;\n', '  uint256 public saleCap;\n', '  uint256 public saleStartTime;\n', '  uint256 public saleEndTime;\n', '\n', '  function Crowdsale(ThinkCoin _token,\n', '                     uint256 _lockingPeriod,\n', '                     address _proposer,\n', '                     address _approver,\n', '                     uint256 _saleCap,\n', '                     uint256 _saleStartTime,\n', '                     uint256 _saleEndTime\n', '                     ) public {\n', '    require(_saleCap > 0);\n', '    require(_saleStartTime < _saleEndTime);\n', '    require(_saleEndTime > now);\n', '    require(_lockingPeriod > 0);\n', '    require(_proposer != _approver);\n', '    require(_saleStartTime >= now);\n', '    require(_saleCap <= _token.cap());\n', '    require(address(_token) != 0x0);\n', '\n', '    token = _token;\n', '    lockingContract = new LockingContract(token, _lockingPeriod);    \n', '    proposer = _proposer;\n', '    approver = _approver;\n', '    saleCap = _saleCap;\n', '    saleStartTime = _saleStartTime;\n', '    saleEndTime = _saleEndTime;\n', '  }\n', '\n', '  modifier saleStarted() {\n', '    require(now >= saleStartTime);\n', '    _;\n', '  }\n', '\n', '  modifier saleNotEnded() {\n', '    require(now < saleEndTime);\n', '    _;\n', '  }\n', '\n', '  modifier saleEnded() {\n', '    require(now >= saleEndTime);\n', '    _;\n', '  }\n', '\n', '  modifier onlyProposer() {\n', '    require(msg.sender == proposer);\n', '    _;\n', '  }\n', '\n', '  modifier onlyApprover() {\n', '    require(msg.sender == approver);\n', '    _;\n', '  }\n', '\n', '  function exceedsSaleCap(uint256 _additionalAmount) internal view returns(bool) {\n', '    uint256 totalSupply = token.totalSupply();\n', '    return totalSupply.add(_additionalAmount) > saleCap;\n', '  }\n', '\n', '  modifier notExceedingSaleCap(uint256 _amount) {\n', '    require(!exceedsSaleCap(_amount));\n', '    _;\n', '  }\n', '\n', '  function proposeMint(address _beneficiary, uint256 _tokenAmount) public onlyProposer saleStarted saleNotEnded\n', '                                                                          notExceedingSaleCap(proposedTotal.add(_tokenAmount)) {\n', '    require(_tokenAmount > 0);\n', '    require(mintProposals[_beneficiary] == 0);\n', '    proposedTotal = proposedTotal.add(_tokenAmount);\n', '    mintProposals[_beneficiary] = _tokenAmount;\n', '    MintProposed(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function proposeMintLocked(address _beneficiary, uint256 _tokenAmount) public onlyProposer saleStarted saleNotEnded\n', '                                                                         notExceedingSaleCap(proposedTotal.add(_tokenAmount)) {\n', '    require(_tokenAmount > 0);\n', '    require(mintLockedProposals[_beneficiary] == 0);\n', '    proposedTotal = proposedTotal.add(_tokenAmount);\n', '    mintLockedProposals[_beneficiary] = _tokenAmount;\n', '    MintLockedProposed(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function clearProposal(address _beneficiary) public onlyApprover {\n', '    proposedTotal = proposedTotal.sub(mintProposals[_beneficiary]);\n', '    mintProposals[_beneficiary] = 0;\n', '  }\n', '\n', '  function clearProposalLocked(address _beneficiary) public onlyApprover {\n', '    proposedTotal = proposedTotal.sub(mintLockedProposals[_beneficiary]);\n', '    mintLockedProposals[_beneficiary] = 0;\n', '  }\n', '\n', '  function approveMint(address _beneficiary, uint256 _tokenAmount) public onlyApprover saleStarted\n', '                                                                   notExceedingSaleCap(_tokenAmount) {\n', '    require(_tokenAmount > 0);\n', '    require(mintProposals[_beneficiary] == _tokenAmount);\n', '    mintProposals[_beneficiary] = 0;\n', '    token.mint(_beneficiary, _tokenAmount);\n', '    MintApproved(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function approveMintLocked(address _beneficiary, uint256 _tokenAmount) public onlyApprover saleStarted\n', '                                                                         notExceedingSaleCap(_tokenAmount) {\n', '    require(_tokenAmount > 0);\n', '    require(mintLockedProposals[_beneficiary] == _tokenAmount);\n', '    mintLockedProposals[_beneficiary] = 0;\n', '    token.mint(lockingContract, _tokenAmount);\n', '    lockingContract.noteTokens(_beneficiary, _tokenAmount);\n', '    MintLockedApproved(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function mintAllocation(address _beneficiary, uint256 _tokenAmount) public onlyOwner saleEnded {\n', '    require(_tokenAmount > 0);\n', '    token.mint(_beneficiary, _tokenAmount);\n', '    MintedAllocation(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function finishMinting() public onlyOwner saleEnded {\n', '    require(proposedTotal == 0);\n', '    token.finishMinting();\n', '    transferTokenOwnership();\n', '  }\n', '\n', '  function transferTokenOwnership() public onlyOwner saleEnded {\n', '    token.transferOwnership(msg.sender);\n', '  }\n', '\n', '  function changeProposer(address _newProposer) public onlyOwner {\n', '    require(_newProposer != approver);\n', '    proposer = _newProposer;\n', '    ProposerChanged(_newProposer);\n', '  }\n', '\n', '  function changeApprover(address _newApprover) public onlyOwner {\n', '    require(_newApprover != proposer);\n', '    approver = _newApprover;\n', '    ApproverChanged(_newApprover);\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract ThinkCoin is MintableToken {\n', '  string public name = "ThinkCoin";\n', '  string public symbol = "TCO";\n', '  uint8 public decimals = 18;\n', '  uint256 public cap;\n', '\n', '  function ThinkCoin(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // override\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '  // override\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(mintingFinished == true);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  // override\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(mintingFinished == true);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function() public payable {\n', '    revert();\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract LockingContract is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event NotedTokens(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event ReleasedTokens(address indexed _beneficiary);\n', '  event ReducedLockingTime(uint256 _newUnlockTime);\n', '\n', '  ERC20 public tokenContract;\n', '  mapping(address => uint256) public tokens;\n', '  uint256 public totalTokens;\n', '  uint256 public unlockTime;\n', '\n', '  function isLocked() public view returns(bool) {\n', '    return now < unlockTime;\n', '  }\n', '\n', '  modifier onlyWhenUnlocked() {\n', '    require(!isLocked());\n', '    _;\n', '  }\n', '\n', '  modifier onlyWhenLocked() {\n', '    require(isLocked());\n', '    _;\n', '  }\n', '\n', '  function LockingContract(ERC20 _tokenContract, uint256 _lockingDuration) public {\n', '    require(_lockingDuration > 0);\n', '    unlockTime = now.add(_lockingDuration);\n', '    tokenContract = _tokenContract;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return tokens[_owner];\n', '  }\n', '\n', '  // Should only be done from another contract.\n', '  // To ensure that the LockingContract can release all noted tokens later,\n', "  // one should mint/transfer tokens to the LockingContract's account prior to noting\n", '  function noteTokens(address _beneficiary, uint256 _tokenAmount) external onlyOwner onlyWhenLocked {\n', '    uint256 tokenBalance = tokenContract.balanceOf(this);\n', '    require(tokenBalance == totalTokens.add(_tokenAmount));\n', '\n', '    tokens[_beneficiary] = tokens[_beneficiary].add(_tokenAmount);\n', '    totalTokens = totalTokens.add(_tokenAmount);\n', '    NotedTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function releaseTokens(address _beneficiary) public onlyWhenUnlocked {\n', '    uint256 amount = tokens[_beneficiary];\n', '    tokens[_beneficiary] = 0;\n', '    require(tokenContract.transfer(_beneficiary, amount)); \n', '    totalTokens = totalTokens.sub(amount);\n', '    ReleasedTokens(_beneficiary);\n', '  }\n', '\n', '  function reduceLockingTime(uint256 _newUnlockTime) public onlyOwner onlyWhenLocked {\n', '    require(_newUnlockTime >= now);\n', '    require(_newUnlockTime < unlockTime);\n', '    unlockTime = _newUnlockTime;\n', '    ReducedLockingTime(_newUnlockTime);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract Crowdsale is Ownable, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  event MintProposed(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event MintLockedProposed(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event MintApproved(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event MintLockedApproved(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event MintedAllocation(address indexed _beneficiary, uint256 _tokenAmount);\n', '  event ProposerChanged(address _newProposer);\n', '  event ApproverChanged(address _newApprover);\n', '\n', '  ThinkCoin public token;\n', '  LockingContract public lockingContract;\n', '  address public proposer; // proposes mintages of tokens\n', '  address public approver; // approves proposed mintages\n', '  mapping(address => uint256) public mintProposals;\n', '  mapping(address => uint256) public mintLockedProposals;\n', '  uint256 public proposedTotal = 0;\n', '  uint256 public saleCap;\n', '  uint256 public saleStartTime;\n', '  uint256 public saleEndTime;\n', '\n', '  function Crowdsale(ThinkCoin _token,\n', '                     uint256 _lockingPeriod,\n', '                     address _proposer,\n', '                     address _approver,\n', '                     uint256 _saleCap,\n', '                     uint256 _saleStartTime,\n', '                     uint256 _saleEndTime\n', '                     ) public {\n', '    require(_saleCap > 0);\n', '    require(_saleStartTime < _saleEndTime);\n', '    require(_saleEndTime > now);\n', '    require(_lockingPeriod > 0);\n', '    require(_proposer != _approver);\n', '    require(_saleStartTime >= now);\n', '    require(_saleCap <= _token.cap());\n', '    require(address(_token) != 0x0);\n', '\n', '    token = _token;\n', '    lockingContract = new LockingContract(token, _lockingPeriod);    \n', '    proposer = _proposer;\n', '    approver = _approver;\n', '    saleCap = _saleCap;\n', '    saleStartTime = _saleStartTime;\n', '    saleEndTime = _saleEndTime;\n', '  }\n', '\n', '  modifier saleStarted() {\n', '    require(now >= saleStartTime);\n', '    _;\n', '  }\n', '\n', '  modifier saleNotEnded() {\n', '    require(now < saleEndTime);\n', '    _;\n', '  }\n', '\n', '  modifier saleEnded() {\n', '    require(now >= saleEndTime);\n', '    _;\n', '  }\n', '\n', '  modifier onlyProposer() {\n', '    require(msg.sender == proposer);\n', '    _;\n', '  }\n', '\n', '  modifier onlyApprover() {\n', '    require(msg.sender == approver);\n', '    _;\n', '  }\n', '\n', '  function exceedsSaleCap(uint256 _additionalAmount) internal view returns(bool) {\n', '    uint256 totalSupply = token.totalSupply();\n', '    return totalSupply.add(_additionalAmount) > saleCap;\n', '  }\n', '\n', '  modifier notExceedingSaleCap(uint256 _amount) {\n', '    require(!exceedsSaleCap(_amount));\n', '    _;\n', '  }\n', '\n', '  function proposeMint(address _beneficiary, uint256 _tokenAmount) public onlyProposer saleStarted saleNotEnded\n', '                                                                          notExceedingSaleCap(proposedTotal.add(_tokenAmount)) {\n', '    require(_tokenAmount > 0);\n', '    require(mintProposals[_beneficiary] == 0);\n', '    proposedTotal = proposedTotal.add(_tokenAmount);\n', '    mintProposals[_beneficiary] = _tokenAmount;\n', '    MintProposed(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function proposeMintLocked(address _beneficiary, uint256 _tokenAmount) public onlyProposer saleStarted saleNotEnded\n', '                                                                         notExceedingSaleCap(proposedTotal.add(_tokenAmount)) {\n', '    require(_tokenAmount > 0);\n', '    require(mintLockedProposals[_beneficiary] == 0);\n', '    proposedTotal = proposedTotal.add(_tokenAmount);\n', '    mintLockedProposals[_beneficiary] = _tokenAmount;\n', '    MintLockedProposed(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function clearProposal(address _beneficiary) public onlyApprover {\n', '    proposedTotal = proposedTotal.sub(mintProposals[_beneficiary]);\n', '    mintProposals[_beneficiary] = 0;\n', '  }\n', '\n', '  function clearProposalLocked(address _beneficiary) public onlyApprover {\n', '    proposedTotal = proposedTotal.sub(mintLockedProposals[_beneficiary]);\n', '    mintLockedProposals[_beneficiary] = 0;\n', '  }\n', '\n', '  function approveMint(address _beneficiary, uint256 _tokenAmount) public onlyApprover saleStarted\n', '                                                                   notExceedingSaleCap(_tokenAmount) {\n', '    require(_tokenAmount > 0);\n', '    require(mintProposals[_beneficiary] == _tokenAmount);\n', '    mintProposals[_beneficiary] = 0;\n', '    token.mint(_beneficiary, _tokenAmount);\n', '    MintApproved(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function approveMintLocked(address _beneficiary, uint256 _tokenAmount) public onlyApprover saleStarted\n', '                                                                         notExceedingSaleCap(_tokenAmount) {\n', '    require(_tokenAmount > 0);\n', '    require(mintLockedProposals[_beneficiary] == _tokenAmount);\n', '    mintLockedProposals[_beneficiary] = 0;\n', '    token.mint(lockingContract, _tokenAmount);\n', '    lockingContract.noteTokens(_beneficiary, _tokenAmount);\n', '    MintLockedApproved(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function mintAllocation(address _beneficiary, uint256 _tokenAmount) public onlyOwner saleEnded {\n', '    require(_tokenAmount > 0);\n', '    token.mint(_beneficiary, _tokenAmount);\n', '    MintedAllocation(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function finishMinting() public onlyOwner saleEnded {\n', '    require(proposedTotal == 0);\n', '    token.finishMinting();\n', '    transferTokenOwnership();\n', '  }\n', '\n', '  function transferTokenOwnership() public onlyOwner saleEnded {\n', '    token.transferOwnership(msg.sender);\n', '  }\n', '\n', '  function changeProposer(address _newProposer) public onlyOwner {\n', '    require(_newProposer != approver);\n', '    proposer = _newProposer;\n', '    ProposerChanged(_newProposer);\n', '  }\n', '\n', '  function changeApprover(address _newApprover) public onlyOwner {\n', '    require(_newApprover != proposer);\n', '    approver = _newApprover;\n', '    ApproverChanged(_newApprover);\n', '  }\n', '}']
