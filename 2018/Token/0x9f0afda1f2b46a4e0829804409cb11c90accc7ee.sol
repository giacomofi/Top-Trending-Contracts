['pragma solidity ^0.4.19;\n', '\n', 'contract Aqo {\n', '    string public constant name = "Aqo"; // ERC20\n', '    string public constant symbol = "AQO"; // ERC20\n', '    uint8 public constant decimals = 18; // ERC20\n', '    uint256 public totalSupply; // ERC20\n', '    mapping (address => uint256) public balanceOf; // ERC20\n', '    mapping (address => mapping (address => uint256)) public allowance; // ERC20 \n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value); // ERC20\n', '    event Approval(address indexed owner, address indexed spender, uint256 value); // ERC20\n', '\n', '    function Aqo() public {\n', '        uint256 initialSupply = 1000000000000000000000;\n', '        totalSupply = initialSupply;\n', '        balanceOf[msg.sender] = initialSupply;\n', '    }\n', '\n', '    // ERC20\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        if (_to == address(this)) {\n', '            if (_value > address(this).balance) {\n', '                _value = address(this).balance;\n', '            }\n', '            balanceOf[msg.sender] -= _value;\n', '            totalSupply -= _value;\n', '            msg.sender.transfer(_value);\n', '        } else {\n', '            balanceOf[msg.sender] -= _value;\n', '            balanceOf[_to] += _value;\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // ERC20\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        require(balanceOf[_from] >= _value);\n', '        if (_to == address(this)) {\n', '            if (_value > address(this).balance) {\n', '                _value = address(this).balance;\n', '            }\n', '            allowance[_from][msg.sender] -= _value;\n', '            balanceOf[_from] -= _value;\n', '            totalSupply -= _value;\n', '            msg.sender.transfer(_value);\n', '        } else {\n', '            allowance[_from][msg.sender] -= _value;\n', '            balanceOf[_from] -= _value;\n', '            balanceOf[_to] += _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // ERC20\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '        require (msg.data.length == 0);\n', '        balanceOf[msg.sender] += msg.value;\n', '        totalSupply += msg.value;\n', '        emit Transfer(address(this), msg.sender, msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract Aqo {\n', '    string public constant name = "Aqo"; // ERC20\n', '    string public constant symbol = "AQO"; // ERC20\n', '    uint8 public constant decimals = 18; // ERC20\n', '    uint256 public totalSupply; // ERC20\n', '    mapping (address => uint256) public balanceOf; // ERC20\n', '    mapping (address => mapping (address => uint256)) public allowance; // ERC20 \n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value); // ERC20\n', '    event Approval(address indexed owner, address indexed spender, uint256 value); // ERC20\n', '\n', '    function Aqo() public {\n', '        uint256 initialSupply = 1000000000000000000000;\n', '        totalSupply = initialSupply;\n', '        balanceOf[msg.sender] = initialSupply;\n', '    }\n', '\n', '    // ERC20\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        if (_to == address(this)) {\n', '            if (_value > address(this).balance) {\n', '                _value = address(this).balance;\n', '            }\n', '            balanceOf[msg.sender] -= _value;\n', '            totalSupply -= _value;\n', '            msg.sender.transfer(_value);\n', '        } else {\n', '            balanceOf[msg.sender] -= _value;\n', '            balanceOf[_to] += _value;\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // ERC20\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        require(balanceOf[_from] >= _value);\n', '        if (_to == address(this)) {\n', '            if (_value > address(this).balance) {\n', '                _value = address(this).balance;\n', '            }\n', '            allowance[_from][msg.sender] -= _value;\n', '            balanceOf[_from] -= _value;\n', '            totalSupply -= _value;\n', '            msg.sender.transfer(_value);\n', '        } else {\n', '            allowance[_from][msg.sender] -= _value;\n', '            balanceOf[_from] -= _value;\n', '            balanceOf[_to] += _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // ERC20\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '        require (msg.data.length == 0);\n', '        balanceOf[msg.sender] += msg.value;\n', '        totalSupply += msg.value;\n', '        emit Transfer(address(this), msg.sender, msg.value);\n', '    }\n', '}']
