['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Gene Nuggets Token\n', ' *\n', ' * @dev Implementation of the Gene Nuggets Token.\n', ' */\n', 'contract GeneNuggetsToken is Pausable,StandardToken {\n', '  using SafeMath for uint256;\n', '  \n', '  string public name = "Gene Nuggets";\n', '  string public symbol = "GNUS";\n', '   \n', '  //constants\n', '  uint8 public decimals = 6;\n', '  uint256 public decimalFactor = 10 ** uint256(decimals);\n', '  uint public CAP = 30e8 * decimalFactor; //Maximal GNUG supply = 3 billion\n', '  \n', '  //contract state\n', '  uint256 public circulatingSupply;\n', '  uint256 public totalUsers;\n', '  uint256 public exchangeLimit = 10000*decimalFactor;\n', '  uint256 public exchangeThreshold = 2000*decimalFactor;\n', '  uint256 public exchangeInterval = 60;\n', '  uint256 public destroyThreshold = 100*decimalFactor;\n', ' \n', '  //managers address\n', '  address public CFO; //CFO address\n', '  mapping(address => uint256) public CustomerService; //customer service addresses\n', '  \n', '  //mining rules\n', '  uint[10] public MINING_LAYERS = [0,10e4,30e4,100e4,300e4,600e4,1000e4,2000e4,3000e4,2**256 - 1];\n', '  uint[9] public MINING_REWARDS = [1000*decimalFactor,600*decimalFactor,300*decimalFactor,200*decimalFactor,180*decimalFactor,160*decimalFactor,60*decimalFactor,39*decimalFactor,0];\n', '  \n', '  //events\n', '  event UpdateTotal(uint totalUser,uint totalSupply);\n', '  event Exchange(address indexed user,uint256 amount);\n', '  event Destory(address indexed user,uint256 amount);\n', '\n', '  modifier onlyCFO() {\n', '    require(msg.sender == CFO);\n', '    _;\n', '  }\n', '\n', '\n', '  modifier onlyCustomerService() {\n', '    require(CustomerService[msg.sender] != 0);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev ccontract constructor\n', '  */  \n', '  function GeneNuggetsToken() public {}\n', '\n', '  /**\n', '  * @dev fallback revert eth transfer\n', '  */   \n', '  function() public {\n', '    revert();\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the current owner to change token name.\n', '   * @param newName The name to change to.\n', '   */\n', '  function setName(string newName) external onlyOwner {\n', '    name = newName;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the current owner to change token symbol.\n', '   * @param newSymbol The symbol to change to.\n', '   */\n', '  function setSymbol(string newSymbol) external onlyOwner {\n', '    symbol = newSymbol;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the current owner to change CFO address.\n', '   * @param newCFO The address to change to.\n', '   */\n', '  function setCFO(address newCFO) external onlyOwner {\n', '    CFO = newCFO;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows owner to change exchangeInterval.\n', '   * @param newInterval The new interval to change to.\n', '   */\n', '  function setExchangeInterval(uint newInterval) external onlyCFO {\n', '    exchangeInterval = newInterval;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows owner to change exchangeLimit.\n', '   * @param newLimit The new limit to change to.\n', '   */\n', '  function setExchangeLimit(uint newLimit) external onlyCFO {\n', '    exchangeLimit = newLimit;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows owner to change exchangeThreshold.\n', '   * @param newThreshold The new threshold to change to.\n', '   */\n', '  function setExchangeThreshold(uint newThreshold) external onlyCFO {\n', '    exchangeThreshold = newThreshold;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows owner to change destroyThreshold.\n', '   * @param newThreshold The new threshold to change to.\n', '   */\n', '  function setDestroyThreshold(uint newThreshold) external onlyCFO {\n', '    destroyThreshold = newThreshold;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows CFO to add customer service address.\n', '   * @param cs The address to add.\n', '   */\n', '  function addCustomerService(address cs) onlyCFO external {\n', '    CustomerService[cs] = block.timestamp;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows CFO to remove customer service address.\n', '   * @param cs The address to remove.\n', '   */\n', '  function removeCustomerService(address cs) onlyCFO external {\n', '    CustomerService[cs] = 0;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to allow CFO update tokens amount according to user amount.Attention: newly mined token still outside contract until exchange on user&#39;s requirments.  \n', '   * @param _userAmount current gene nuggets user amount.\n', '   */\n', '  function updateTotal(uint256 _userAmount) onlyCFO external {\n', '    require(_userAmount>totalUsers);\n', '    uint newTotalSupply = calTotalSupply(_userAmount);\n', '    require(newTotalSupply<=CAP && newTotalSupply>totalSupply_);\n', '    \n', '    uint _amount = newTotalSupply.sub(totalSupply_);\n', '    totalSupply_ = newTotalSupply;\n', '    totalUsers = _userAmount;\n', '    emit UpdateTotal(_amount,totalSupply_); \n', '  }\n', '\n', '  /**\n', '   * @dev Uitl function to calculate total supply according to total user amount.\n', '   * @param _userAmount total user amount.\n', '   */  \n', '  function calTotalSupply(uint _userAmount) private view returns (uint ret) {\n', '    uint tokenAmount = 0;\n', '\t  for (uint8 i = 0; i < MINING_LAYERS.length ; i++ ) {\n', '\t    if(_userAmount < MINING_LAYERS[i+1]) {\n', '\t      tokenAmount = tokenAmount.add(MINING_REWARDS[i].mul(_userAmount.sub(MINING_LAYERS[i])));\n', '\t      break;\n', '\t    }else {\n', '        tokenAmount = tokenAmount.add(MINING_REWARDS[i].mul(MINING_LAYERS[i+1].sub(MINING_LAYERS[i])));\n', '\t    }\n', '\t  }\n', '\t  return tokenAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Function for Customer Service exchange off-chain points to GNUG on user&#39;s behalf. That is to say exchange GNUG into this contract.\n', '   * @param user The user tokens distributed to.\n', '   * @param _amount The amount of tokens to exchange.\n', '   */\n', '  function exchange(address user,uint256 _amount) whenNotPaused onlyCustomerService external {\n', '  \t\n', '  \trequire((block.timestamp-CustomerService[msg.sender])>exchangeInterval);\n', '\n', '  \trequire(_amount <= exchangeLimit && _amount >= exchangeThreshold);\n', '\n', '    circulatingSupply = circulatingSupply.add(_amount);\n', '    \n', '    balances[user] = balances[user].add(_amount);\n', '    \n', '    CustomerService[msg.sender] = block.timestamp;\n', '    \n', '    emit Exchange(user,_amount);\n', '    \n', '    emit Transfer(address(0),user,_amount);\n', '    \n', '  }\n', '  \n', '\n', '  /**\n', '   * @dev Function for user can destory GNUG, exchange back to off-chain points.That is to say destroy GNUG out of this contract.\n', '   * @param _amount The amount of tokens to destory.\n', '   */\n', '  function destory(uint256 _amount) external {  \n', '    require(balances[msg.sender]>=_amount && _amount>destroyThreshold && circulatingSupply>=_amount);\n', '\n', '    circulatingSupply = circulatingSupply.sub(_amount);\n', '    \n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    \n', '    emit Destory(msg.sender,_amount);\n', '    \n', '    emit Transfer(msg.sender,0x0,_amount);\n', '    \n', '  }\n', '\n', '  function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner external {\n', '    // owner can drain tokens that are sent here by mistake\n', '    token.transfer( owner, amount );\n', '  }\n', '  \n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Gene Nuggets Token\n', ' *\n', ' * @dev Implementation of the Gene Nuggets Token.\n', ' */\n', 'contract GeneNuggetsToken is Pausable,StandardToken {\n', '  using SafeMath for uint256;\n', '  \n', '  string public name = "Gene Nuggets";\n', '  string public symbol = "GNUS";\n', '   \n', '  //constants\n', '  uint8 public decimals = 6;\n', '  uint256 public decimalFactor = 10 ** uint256(decimals);\n', '  uint public CAP = 30e8 * decimalFactor; //Maximal GNUG supply = 3 billion\n', '  \n', '  //contract state\n', '  uint256 public circulatingSupply;\n', '  uint256 public totalUsers;\n', '  uint256 public exchangeLimit = 10000*decimalFactor;\n', '  uint256 public exchangeThreshold = 2000*decimalFactor;\n', '  uint256 public exchangeInterval = 60;\n', '  uint256 public destroyThreshold = 100*decimalFactor;\n', ' \n', '  //managers address\n', '  address public CFO; //CFO address\n', '  mapping(address => uint256) public CustomerService; //customer service addresses\n', '  \n', '  //mining rules\n', '  uint[10] public MINING_LAYERS = [0,10e4,30e4,100e4,300e4,600e4,1000e4,2000e4,3000e4,2**256 - 1];\n', '  uint[9] public MINING_REWARDS = [1000*decimalFactor,600*decimalFactor,300*decimalFactor,200*decimalFactor,180*decimalFactor,160*decimalFactor,60*decimalFactor,39*decimalFactor,0];\n', '  \n', '  //events\n', '  event UpdateTotal(uint totalUser,uint totalSupply);\n', '  event Exchange(address indexed user,uint256 amount);\n', '  event Destory(address indexed user,uint256 amount);\n', '\n', '  modifier onlyCFO() {\n', '    require(msg.sender == CFO);\n', '    _;\n', '  }\n', '\n', '\n', '  modifier onlyCustomerService() {\n', '    require(CustomerService[msg.sender] != 0);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev ccontract constructor\n', '  */  \n', '  function GeneNuggetsToken() public {}\n', '\n', '  /**\n', '  * @dev fallback revert eth transfer\n', '  */   \n', '  function() public {\n', '    revert();\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the current owner to change token name.\n', '   * @param newName The name to change to.\n', '   */\n', '  function setName(string newName) external onlyOwner {\n', '    name = newName;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the current owner to change token symbol.\n', '   * @param newSymbol The symbol to change to.\n', '   */\n', '  function setSymbol(string newSymbol) external onlyOwner {\n', '    symbol = newSymbol;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the current owner to change CFO address.\n', '   * @param newCFO The address to change to.\n', '   */\n', '  function setCFO(address newCFO) external onlyOwner {\n', '    CFO = newCFO;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows owner to change exchangeInterval.\n', '   * @param newInterval The new interval to change to.\n', '   */\n', '  function setExchangeInterval(uint newInterval) external onlyCFO {\n', '    exchangeInterval = newInterval;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows owner to change exchangeLimit.\n', '   * @param newLimit The new limit to change to.\n', '   */\n', '  function setExchangeLimit(uint newLimit) external onlyCFO {\n', '    exchangeLimit = newLimit;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows owner to change exchangeThreshold.\n', '   * @param newThreshold The new threshold to change to.\n', '   */\n', '  function setExchangeThreshold(uint newThreshold) external onlyCFO {\n', '    exchangeThreshold = newThreshold;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows owner to change destroyThreshold.\n', '   * @param newThreshold The new threshold to change to.\n', '   */\n', '  function setDestroyThreshold(uint newThreshold) external onlyCFO {\n', '    destroyThreshold = newThreshold;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows CFO to add customer service address.\n', '   * @param cs The address to add.\n', '   */\n', '  function addCustomerService(address cs) onlyCFO external {\n', '    CustomerService[cs] = block.timestamp;\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows CFO to remove customer service address.\n', '   * @param cs The address to remove.\n', '   */\n', '  function removeCustomerService(address cs) onlyCFO external {\n', '    CustomerService[cs] = 0;\n', '  }\n', '\n', '  /**\n', "   * @dev Function to allow CFO update tokens amount according to user amount.Attention: newly mined token still outside contract until exchange on user's requirments.  \n", '   * @param _userAmount current gene nuggets user amount.\n', '   */\n', '  function updateTotal(uint256 _userAmount) onlyCFO external {\n', '    require(_userAmount>totalUsers);\n', '    uint newTotalSupply = calTotalSupply(_userAmount);\n', '    require(newTotalSupply<=CAP && newTotalSupply>totalSupply_);\n', '    \n', '    uint _amount = newTotalSupply.sub(totalSupply_);\n', '    totalSupply_ = newTotalSupply;\n', '    totalUsers = _userAmount;\n', '    emit UpdateTotal(_amount,totalSupply_); \n', '  }\n', '\n', '  /**\n', '   * @dev Uitl function to calculate total supply according to total user amount.\n', '   * @param _userAmount total user amount.\n', '   */  \n', '  function calTotalSupply(uint _userAmount) private view returns (uint ret) {\n', '    uint tokenAmount = 0;\n', '\t  for (uint8 i = 0; i < MINING_LAYERS.length ; i++ ) {\n', '\t    if(_userAmount < MINING_LAYERS[i+1]) {\n', '\t      tokenAmount = tokenAmount.add(MINING_REWARDS[i].mul(_userAmount.sub(MINING_LAYERS[i])));\n', '\t      break;\n', '\t    }else {\n', '        tokenAmount = tokenAmount.add(MINING_REWARDS[i].mul(MINING_LAYERS[i+1].sub(MINING_LAYERS[i])));\n', '\t    }\n', '\t  }\n', '\t  return tokenAmount;\n', '  }\n', '\n', '  /**\n', "   * @dev Function for Customer Service exchange off-chain points to GNUG on user's behalf. That is to say exchange GNUG into this contract.\n", '   * @param user The user tokens distributed to.\n', '   * @param _amount The amount of tokens to exchange.\n', '   */\n', '  function exchange(address user,uint256 _amount) whenNotPaused onlyCustomerService external {\n', '  \t\n', '  \trequire((block.timestamp-CustomerService[msg.sender])>exchangeInterval);\n', '\n', '  \trequire(_amount <= exchangeLimit && _amount >= exchangeThreshold);\n', '\n', '    circulatingSupply = circulatingSupply.add(_amount);\n', '    \n', '    balances[user] = balances[user].add(_amount);\n', '    \n', '    CustomerService[msg.sender] = block.timestamp;\n', '    \n', '    emit Exchange(user,_amount);\n', '    \n', '    emit Transfer(address(0),user,_amount);\n', '    \n', '  }\n', '  \n', '\n', '  /**\n', '   * @dev Function for user can destory GNUG, exchange back to off-chain points.That is to say destroy GNUG out of this contract.\n', '   * @param _amount The amount of tokens to destory.\n', '   */\n', '  function destory(uint256 _amount) external {  \n', '    require(balances[msg.sender]>=_amount && _amount>destroyThreshold && circulatingSupply>=_amount);\n', '\n', '    circulatingSupply = circulatingSupply.sub(_amount);\n', '    \n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    \n', '    emit Destory(msg.sender,_amount);\n', '    \n', '    emit Transfer(msg.sender,0x0,_amount);\n', '    \n', '  }\n', '\n', '  function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner external {\n', '    // owner can drain tokens that are sent here by mistake\n', '    token.transfer( owner, amount );\n', '  }\n', '  \n', '}']
