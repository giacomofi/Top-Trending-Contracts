['pragma solidity ^0.4.24;\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts\\StattmToken.sol\n', '\n', 'contract StattmToken is MintableToken {\n', '\n', '    string public constant name = "Stattm";\n', '    string public constant symbol = "STTM";\n', '\n', '    uint256 public constant decimals = 18;\n', '    mapping(address => bool) public isWhiteListed;\n', '\n', '\n', '    function burn() public {\n', '        uint256 _b = balanceOf(msg.sender);\n', '        balances[msg.sender] = 0;\n', '        totalSupply_ = totalSupply_ - _b;\n', '    }\n', '\n', '    function addToWhitelist(address _user) public onlyOwner {\n', '        isWhiteListed[_user] = true;\n', '    }\n', '\n', '    function removeFromWhitelist(address _user) public onlyOwner {\n', '        isWhiteListed[_user] = false;\n', '    }\n', '\n', '    function init(address privateSale, address ito, address ico, address projectManagementAndAirdrop) public {\n', '\n', '        require(totalSupply_ == 0);\n', '        require(address(privateSale) != address(0));\n', '        require(address(ito) != address(0));\n', '        require(address(ico) != address(0));\n', '        require(address(projectManagementAndAirdrop) != address(0));\n', '        mint(address(privateSale), (10 ** decimals) * (5000000));\n', '        mint(address(ito), (10 ** decimals) * (25000000));\n', '        mint(address(ico), (10 ** decimals) * (35000000));\n', '        mint(address(projectManagementAndAirdrop), (10 ** decimals) * (35100100));\n', '        mintingFinished = true;\n', '    }\n', '}\n', '\n', '// File: contracts\\AbstractCrowdsale.sol\n', '\n', 'contract AbstractCrowdsale is Ownable{\n', '\n', '    StattmToken public token;\n', '    bool public softCapReached = false;\n', '    bool public hardCapReached = false;\n', '    uint256 private _now =0;\n', '\n', '    event WhiteListReqested(address _adr);\n', '\n', '\n', '    address public beneficiary;\n', '\n', '    function saleStartTime() public constant returns(uint256);\n', '    function saleEndTime() public constant returns(uint256);\n', '    function softCapInTokens() public constant returns(uint256);\n', '    function hardCapInTokens() public constant returns(uint256);\n', '\n', '    function withdrawEndTime() public constant returns(uint256){\n', '      return saleEndTime() + 30 days;\n', '    }\n', '\n', '    mapping(address => uint256) public ethPayed;\n', '    mapping(address => uint256) public tokensToTransfer;\n', '    uint256 public totalTokensToTransfer = 0;\n', '\n', '    constructor(address _token, address _beneficiary) public {\n', '        token = StattmToken(_token);\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    function getCurrentPrice() public  constant returns(uint256) ;\n', '\n', '    function forceReturn(address _adr) public onlyOwner{\n', '\n', '        if (token.isWhiteListed(_adr) == false) {\n', '          //send tokens, presale successful\n', '          require(msg.value == 0);\n', '          uint256 amountToSend = tokensToTransfer[msg.sender];\n', '          tokensToTransfer[msg.sender] = 0;\n', '          ethPayed[msg.sender] = 0;\n', '          totalTokensToTransfer=totalTokensToTransfer-amountToSend;\n', '          softCapReached = totalTokensToTransfer >= softCapInTokens();\n', '          require(token.transfer(msg.sender, amountToSend));\n', '        }\n', '    }\n', '\n', '    function getNow() public constant returns(uint256){\n', '      if(_now!=0){\n', '        return _now;\n', '      }\n', '      return now;\n', '    }\n', '\n', '    function setNow(uint256 _n) public returns(uint256){\n', '/*Allowed only in tests*///      _now = _n;\n', '      return now;\n', '    }\n', '    event Stage(uint256 blockNumber,uint256 index);\n', '    event Stage2(address adr,uint256 index);\n', '    function buy() public payable {\n', '        require(getNow()  > saleStartTime());\n', '        if (getNow()  > saleEndTime()\n', '          && (softCapReached == false\n', '          || token.isWhiteListed(msg.sender) == false)) {\n', '\n', '            //return funds, presale unsuccessful or user not whitelisteed\n', '            emit Stage(block.number,10);\n', '            require(msg.value == 0);\n', '            emit Stage(block.number,11);\n', '            uint256 amountToReturn = ethPayed[msg.sender];\n', '            totalTokensToTransfer=totalTokensToTransfer-tokensToTransfer[msg.sender];\n', '            tokensToTransfer[msg.sender] = 0;\n', '            ethPayed[msg.sender] = 0;\n', '            softCapReached = totalTokensToTransfer >= softCapInTokens();\n', '            emit Stage(block.number,12);\n', '            msg.sender.transfer(amountToReturn);\n', '            emit Stage(block.number,13);\n', '\n', '        }\n', '        if (getNow()  > saleEndTime()\n', '          && softCapReached == true\n', '          && token.isWhiteListed(msg.sender)) {\n', '\n', '            emit Stage(block.number,20);\n', '            //send tokens, presale successful\n', '            require(msg.value == 0);\n', '            emit Stage(block.number,21);\n', '            uint256 amountToSend = tokensToTransfer[msg.sender];\n', '            tokensToTransfer[msg.sender] = 0;\n', '            ethPayed[msg.sender] = 0;\n', '            require(token.transfer(msg.sender, amountToSend));\n', '            emit Stage(block.number,22);\n', '\n', '        }\n', '        if (getNow()  <= saleEndTime() && getNow()  > saleStartTime()) {\n', '            emit Stage(block.number,30);\n', '            ethPayed[msg.sender] = ethPayed[msg.sender] + msg.value;\n', '            tokensToTransfer[msg.sender] = tokensToTransfer[msg.sender] + getCurrentPrice() * msg.value;\n', '            totalTokensToTransfer = totalTokensToTransfer + getCurrentPrice() * msg.value;\n', '\n', '            if (totalTokensToTransfer >= hardCapInTokens()) {\n', '                //hardcap exceeded - revert;\n', '                emit Stage(block.number,31);\n', '                revert();\n', '                emit Stage(block.number,32);\n', '            }\n', '        }\n', '        if(tokensToTransfer[msg.sender] > 0 &&  token.isWhiteListed(msg.sender) && softCapInTokens()==0){\n', '          emit Stage(block.number,40);\n', '          uint256 amountOfTokens = tokensToTransfer[msg.sender] ;\n', '          tokensToTransfer[msg.sender] = 0;\n', '          emit Stage(block.number,41);\n', '          require(token.transfer(msg.sender,amountOfTokens));\n', '          emit Stage(block.number,42);\n', '        }\n', '        if (totalTokensToTransfer >= softCapInTokens()) {\n', '            emit Stage(block.number,50);\n', '            softCapReached = true;\n', '            emit Stage(block.number,51);\n', '        }\n', '        if (getNow()  > withdrawEndTime() && softCapReached == true && msg.sender == owner) {\n', '            emit Stage(block.number,60);\n', '            emit Stage(address(this).balance,60);\n', '            //sale end successfully all eth is send to beneficiary\n', '            beneficiary.transfer(address(this).balance);\n', '            emit Stage(address(this).balance,60);\n', '            emit Stage(block.number,61);\n', '            token.burn();\n', '            emit Stage(block.number,62);\n', '        }\n', '\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\StattmICO.sol\n', '\n', 'contract StattmICO is AbstractCrowdsale{\n', '\n', '    function softCapInTokens() public constant returns(uint256){\n', '      return uint256(15000000*(10**18));\n', '    }\n', '    function hardCapInTokens() public constant returns(uint256){\n', '      return uint256(35000000*(10**18));\n', '    }\n', '\n', '    function saleStartTime() public constant returns(uint256){\n', '      return 1553731200;  // 2019-3-28 00:00:00 GMT - start time for main sale\n', '    }\n', '    function saleEndTime() public constant returns(uint256){\n', '      return 1557619200;// 2019-5-12 23:59:59 GMT - end time for main sale\n', '    }\n', '\n', '    constructor(address _token, address _beneficiary) public AbstractCrowdsale(_token,_beneficiary) {\n', '    }\n', '\n', '    function() public payable {\n', '        buy();\n', '    }\n', '    function getCurrentPrice() public constant returns(uint256) {\n', '        if (getNow() - saleStartTime() < 10 days) {\n', '            return 2000;\n', '        } else\n', '        if (getNow() - saleStartTime() < 20 days) {\n', '            return 1764;\n', '        } else\n', '        if (getNow() - saleStartTime() < 30 days) {\n', '            return 1578;\n', '        } else\n', '        if (getNow() - saleStartTime() < 40 days) {\n', '            return 1428;\n', '        } else\n', '        if (getNow() - saleStartTime() < 45 days) {\n', '            return 1200;\n', '        } else {\n', '            return 1200;\n', '        }\n', '    }\n', '\n', '}']