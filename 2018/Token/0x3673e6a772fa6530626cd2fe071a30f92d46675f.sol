['pragma solidity ^0.4.25;\n', '\n', 'library SafeMath {\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '      c = a + b;\n', '      require(c >= a);\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '      require(b <= a);\n', '      c = a - b;\n', '  }\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '      c = a * b;\n', '      require(a == 0 || c / a == b);\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '      require(b > 0);\n', '      c = a / b;\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function totalSupply() public constant returns (uint256);\n', '  function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n', '  function transfer(address to, uint256 tokens) public returns (bool success);\n', '  function approve(address spender, uint256 tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '  event Burn(address indexed from, uint256 value);\n', '}\n', '\n', 'contract Owned {\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed from, address indexed _to);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '  }\n', '}\n', '\n', 'contract Pausable is Owned {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract GoldX is ERC20Interface, Owned, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  string public symbol;\n', '  string public name;\n', '  uint8 public decimals;\n', '  uint256 _totalSupply;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => mapping(address => uint256)) allowed;\n', '\n', '  constructor() public {\n', '    symbol = "GOLDX";\n', '    name = "GoldX";\n', '    decimals = 18;\n', '    _totalSupply = 1000 * 10 ** uint256(decimals);\n', '    balances[owner] = _totalSupply;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '  \n', '  modifier onlyPayloadSize(uint256 numWords) {\n', '    assert(msg.data.length >= numWords * 32 + 4);\n', '    _;\n', '  }\n', '    \n', ' /**\n', '  * @dev function to check whether passed address is a contract address\n', '  */\n', '    function isContract(address _address) private view returns (bool is_contract) {\n', '      uint256 length;\n', '      assembly {\n', '      //retrieve the size of the code on target address, this needs assembly\n', '        length := extcodesize(_address)\n', '      }\n', '      return (length > 0);\n', '    }\n', '    \n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '    function totalSupply() public view returns (uint256) {\n', '      return _totalSupply;\n', '    }\n', '    \n', '    \n', ' /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param tokenOwner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '\n', '  function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '\n', ' /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param tokenOwner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '    \n', '    \n', ' /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param tokens The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 tokens) public whenNotPaused onlyPayloadSize(2) returns (bool success) {\n', '    require(to != address(0));\n', '    require(tokens > 0);\n', '    require(tokens <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', ' /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param spender The address which will spend the funds.\n', '   * @param tokens The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 tokens) public whenNotPaused onlyPayloadSize(2) returns (bool success) {\n', '    require(spender != address(0));\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '    \n', ' /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param tokens uint256 the amount of tokens to be transferred\n', '   */\n', '    function transferFrom(address from, address to, uint256 tokens) public whenNotPaused onlyPayloadSize(3) returns (bool success) {\n', '        require(tokens > 0);\n', '        require(from != address(0));\n', '        require(to != address(0));\n', '        require(allowed[from][msg.sender] > 0);\n', '        require(balances[from]>0);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', ' \n', '\n', ' /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        _totalSupply =_totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '  \n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param from address The address which you want to send tokens from\n', '   * @param _value uint256 The amount of token to be burned\n', '   */\n', '    function burnFrom(address from, uint256 _value) public returns (bool success) {\n', '        require(balances[from] >= _value);\n', '        require(_value <= allowed[from][msg.sender]);\n', '        balances[from] = balances[from].sub(_value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(_value);\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        emit Burn(from, _value);\n', '        return true;\n', '    }\n', ' /**\n', '   * @dev Function to mint tokens\n', '   * @param target The address that will receive the minted tokens.\n', '   * @param mintedAmount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public  returns (bool) {\n', '        require(mintedAmount > 0);\n', '        require(target != address(0));\n', '        balances[target] = balances[target].add(mintedAmount);\n', '        _totalSupply = _totalSupply.add(mintedAmount);\n', '        emit Transfer(owner, target, mintedAmount);\n', '        return true;\n', '    }\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '    \n', '    \n', '/**\n', '   * @dev Function to transfer any ERC20 token  to owner address which gets accidentally transferred to this contract\n', '   * @param tokenAddress The address of the ERC20 contract\n', '   * @param tokens The amount of tokens to transfer.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n', '        require(tokenAddress != address(0));\n', '        require(isContract(tokenAddress));\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']