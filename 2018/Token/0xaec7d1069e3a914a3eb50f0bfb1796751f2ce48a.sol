['pragma solidity ^0.4.24;\n', '\n', '// File: zos-lib/contracts/migrations/Migratable.sol\n', '\n', '/**\n', ' * @title Migratable\n', ' * Helper contract to support intialization and migration schemes between\n', ' * different implementations of a contract in the context of upgradeability.\n', ' * To use it, replace the constructor with a function that has the\n', ' * `isInitializer` modifier starting with `"0"` as `migrationId`.\n', ' * When you want to apply some migration code during an upgrade, increase\n', ' * the `migrationId`. Or, if the migration code must be applied only after\n', ' * another migration has been already applied, use the `isMigration` modifier.\n', ' * This helper supports multiple inheritance.\n', ' * WARNING: It is the developer&#39;s responsibility to ensure that migrations are\n', ' * applied in a correct order, or that they are run at all.\n', ' * See `Initializable` for a simpler version.\n', ' */\n', 'contract Migratable {\n', '  /**\n', '   * @dev Emitted when the contract applies a migration.\n', '   * @param contractName Name of the Contract.\n', '   * @param migrationId Identifier of the migration applied.\n', '   */\n', '  event Migrated(string contractName, string migrationId);\n', '\n', '  /**\n', '   * @dev Mapping of the already applied migrations.\n', '   * (contractName => (migrationId => bool))\n', '   */\n', '  mapping (string => mapping (string => bool)) internal migrated;\n', '\n', '  /**\n', '   * @dev Internal migration id used to specify that a contract has already been initialized.\n', '   */\n', '  string constant private INITIALIZED_ID = "initialized";\n', '\n', '\n', '  /**\n', '   * @dev Modifier to use in the initialization function of a contract.\n', '   * @param contractName Name of the contract.\n', '   * @param migrationId Identifier of the migration.\n', '   */\n', '  modifier isInitializer(string contractName, string migrationId) {\n', '    validateMigrationIsPending(contractName, INITIALIZED_ID);\n', '    validateMigrationIsPending(contractName, migrationId);\n', '    _;\n', '    emit Migrated(contractName, migrationId);\n', '    migrated[contractName][migrationId] = true;\n', '    migrated[contractName][INITIALIZED_ID] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to use in the migration of a contract.\n', '   * @param contractName Name of the contract.\n', '   * @param requiredMigrationId Identifier of the previous migration, required\n', '   * to apply new one.\n', '   * @param newMigrationId Identifier of the new migration to be applied.\n', '   */\n', '  modifier isMigration(string contractName, string requiredMigrationId, string newMigrationId) {\n', '    require(isMigrated(contractName, requiredMigrationId), "Prerequisite migration ID has not been run yet");\n', '    validateMigrationIsPending(contractName, newMigrationId);\n', '    _;\n', '    emit Migrated(contractName, newMigrationId);\n', '    migrated[contractName][newMigrationId] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if the contract migration was applied.\n', '   * @param contractName Name of the contract.\n', '   * @param migrationId Identifier of the migration.\n', '   * @return true if the contract migration was applied, false otherwise.\n', '   */\n', '  function isMigrated(string contractName, string migrationId) public view returns(bool) {\n', '    return migrated[contractName][migrationId];\n', '  }\n', '\n', '  /**\n', '   * @dev Initializer that marks the contract as initialized.\n', '   * It is important to run this if you had deployed a previous version of a Migratable contract.\n', '   * For more information see https://github.com/zeppelinos/zos-lib/issues/158.\n', '   */\n', '  function initialize() isInitializer("Migratable", "1.2.1") public {\n', '  }\n', '\n', '  /**\n', '   * @dev Reverts if the requested migration was already executed.\n', '   * @param contractName Name of the contract.\n', '   * @param migrationId Identifier of the migration.\n', '   */\n', '  function validateMigrationIsPending(string contractName, string migrationId) private {\n', '    require(!isMigrated(contractName, migrationId), "Requested target migration ID has already been run");\n', '  }\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/DetailedERC20.sol\n', '\n', 'contract DetailedERC20 is Migratable, ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function initialize(string _name, string _symbol, uint8 _decimals) public isInitializer("DetailedERC20", "1.9.0") {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable is Migratable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function initialize(address _sender) public isInitializer("Ownable", "1.9.0") {\n', '    owner = _sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is Migratable, Ownable, StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function initialize(address _sender) isInitializer("MintableToken", "1.9.0")  public {\n', '    Ownable.initialize(_sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/DetailedPremintedToken.sol\n', '\n', 'contract DetailedPremintedToken is Migratable, DetailedERC20, StandardToken {\n', '  function initialize(\n', '    address _sender,\n', '    string _name,\n', '    string _symbol,\n', '    uint8 _decimals,\n', '    uint256 _initialBalance\n', '  )\n', '    isInitializer("DetailedPremintedToken", "1.9.0")\n', '    public\n', '  {\n', '    DetailedERC20.initialize(_name, _symbol, _decimals);\n', '\n', '    _premint(_sender, _initialBalance);\n', '  }\n', '\n', '  function _premint(address _to, uint256 _value) internal {\n', '    totalSupply_ += _value;\n', '    balances[_to] += _value;\n', '    emit Transfer(0, _to, _value);\n', '  }\n', '}\n', '\n', '// File: contracts/S4FE.sol\n', '\n', '/**\n', ' * @title S4FE\n', ' * @dev ERC20 Token, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer`\n', ' */\n', 'contract S4FE is Ownable, DetailedPremintedToken {\n', '\tuint256 public INITIAL_SUPPLY;\n', '\n', '\tbool public transferLocked;\n', '\tmapping (address => bool) public transferWhitelist;\n', '\n', '\t/**\n', '\t * @dev Constructor that gives msg.sender all of existing tokens.\n', '\t */\n', '\tconstructor() public {\n', '\n', '\t}\n', '\n', '\t/**\n', '\t * @dev initialize method to start constructor logic\n', '\t * \n', '\t * @param _owner address of owner\n', '\t */\n', '\tfunction initializeS4FE(address _owner) isInitializer(&#39;S4FE&#39;, &#39;0&#39;) public {\n', '\t\tINITIAL_SUPPLY = 1000000000 * (10 ** uint256(18));\n', '\n', '\t\tOwnable.initialize(_owner);\n', '\t\tDetailedPremintedToken.initialize(_owner, "S4FE", "S4F", 18, INITIAL_SUPPLY);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev if ether is sent to this address, send it back.\n', '\t*/\n', '\tfunction () public {\n', '\t\trevert();\n', '\t}\n', '\n', '\t/**\n', '\t * @dev transfer token for a specified address\n', '\t * @param _to The address to transfer to.\n', '\t * @param _value The amount to be transferred.\n', '\t */\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(msg.sender == owner || transferLocked == false || transferWhitelist[msg.sender] == true);\n', '\n', '\t\tbool result = super.transfer(_to , _value);\n', '\t\treturn result;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev transfer lock status\n', '\t * @param _transferLocked Boolean indicating if transfer is locked\n', '\t */\n', '\tfunction setTransferLocked(bool _transferLocked) onlyOwner public returns (bool) {\n', '\t\ttransferLocked = _transferLocked;\n', '\t\treturn transferLocked;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev transfer lock status\n', '\t * @param _address Address of account indicating if allowed\n', '\t * @param _transferLocked Boolean indicating if transfer is locked\n', '\t */\n', '\tfunction setTransferWhitelist(address _address, bool _transferLocked) onlyOwner public returns (bool) {\n', '\t\ttransferWhitelist[_address] = _transferLocked;\n', '\t\treturn _transferLocked;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev whitelist addresses\n', '\t * @param _addresses Array of address of account for whitelist\n', '\t */\n', '\tfunction whitelist(address[] _addresses) onlyOwner public {\n', '\t\tfor(uint i = 0; i < _addresses.length ; i ++) {\n', '\t\t\ttransferWhitelist[_addresses[i]] = true;\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * @dev blacklist addresses\n', '\t * @param _addresses Array of address of account for whitelist\n', '\t */\n', '\tfunction blacklist(address[] _addresses) onlyOwner public {\n', '\t\tfor(uint i = 0; i < _addresses.length ; i ++) {\n', '\t\t\ttransferWhitelist[_addresses[i]] = false;\n', '\t\t}\n', '\t}\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: zos-lib/contracts/migrations/Migratable.sol\n', '\n', '/**\n', ' * @title Migratable\n', ' * Helper contract to support intialization and migration schemes between\n', ' * different implementations of a contract in the context of upgradeability.\n', ' * To use it, replace the constructor with a function that has the\n', ' * `isInitializer` modifier starting with `"0"` as `migrationId`.\n', ' * When you want to apply some migration code during an upgrade, increase\n', ' * the `migrationId`. Or, if the migration code must be applied only after\n', ' * another migration has been already applied, use the `isMigration` modifier.\n', ' * This helper supports multiple inheritance.\n', " * WARNING: It is the developer's responsibility to ensure that migrations are\n", ' * applied in a correct order, or that they are run at all.\n', ' * See `Initializable` for a simpler version.\n', ' */\n', 'contract Migratable {\n', '  /**\n', '   * @dev Emitted when the contract applies a migration.\n', '   * @param contractName Name of the Contract.\n', '   * @param migrationId Identifier of the migration applied.\n', '   */\n', '  event Migrated(string contractName, string migrationId);\n', '\n', '  /**\n', '   * @dev Mapping of the already applied migrations.\n', '   * (contractName => (migrationId => bool))\n', '   */\n', '  mapping (string => mapping (string => bool)) internal migrated;\n', '\n', '  /**\n', '   * @dev Internal migration id used to specify that a contract has already been initialized.\n', '   */\n', '  string constant private INITIALIZED_ID = "initialized";\n', '\n', '\n', '  /**\n', '   * @dev Modifier to use in the initialization function of a contract.\n', '   * @param contractName Name of the contract.\n', '   * @param migrationId Identifier of the migration.\n', '   */\n', '  modifier isInitializer(string contractName, string migrationId) {\n', '    validateMigrationIsPending(contractName, INITIALIZED_ID);\n', '    validateMigrationIsPending(contractName, migrationId);\n', '    _;\n', '    emit Migrated(contractName, migrationId);\n', '    migrated[contractName][migrationId] = true;\n', '    migrated[contractName][INITIALIZED_ID] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to use in the migration of a contract.\n', '   * @param contractName Name of the contract.\n', '   * @param requiredMigrationId Identifier of the previous migration, required\n', '   * to apply new one.\n', '   * @param newMigrationId Identifier of the new migration to be applied.\n', '   */\n', '  modifier isMigration(string contractName, string requiredMigrationId, string newMigrationId) {\n', '    require(isMigrated(contractName, requiredMigrationId), "Prerequisite migration ID has not been run yet");\n', '    validateMigrationIsPending(contractName, newMigrationId);\n', '    _;\n', '    emit Migrated(contractName, newMigrationId);\n', '    migrated[contractName][newMigrationId] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if the contract migration was applied.\n', '   * @param contractName Name of the contract.\n', '   * @param migrationId Identifier of the migration.\n', '   * @return true if the contract migration was applied, false otherwise.\n', '   */\n', '  function isMigrated(string contractName, string migrationId) public view returns(bool) {\n', '    return migrated[contractName][migrationId];\n', '  }\n', '\n', '  /**\n', '   * @dev Initializer that marks the contract as initialized.\n', '   * It is important to run this if you had deployed a previous version of a Migratable contract.\n', '   * For more information see https://github.com/zeppelinos/zos-lib/issues/158.\n', '   */\n', '  function initialize() isInitializer("Migratable", "1.2.1") public {\n', '  }\n', '\n', '  /**\n', '   * @dev Reverts if the requested migration was already executed.\n', '   * @param contractName Name of the contract.\n', '   * @param migrationId Identifier of the migration.\n', '   */\n', '  function validateMigrationIsPending(string contractName, string migrationId) private {\n', '    require(!isMigrated(contractName, migrationId), "Requested target migration ID has already been run");\n', '  }\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/DetailedERC20.sol\n', '\n', 'contract DetailedERC20 is Migratable, ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function initialize(string _name, string _symbol, uint8 _decimals) public isInitializer("DetailedERC20", "1.9.0") {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable is Migratable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function initialize(address _sender) public isInitializer("Ownable", "1.9.0") {\n', '    owner = _sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is Migratable, Ownable, StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function initialize(address _sender) isInitializer("MintableToken", "1.9.0")  public {\n', '    Ownable.initialize(_sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-zos/contracts/token/ERC20/DetailedPremintedToken.sol\n', '\n', 'contract DetailedPremintedToken is Migratable, DetailedERC20, StandardToken {\n', '  function initialize(\n', '    address _sender,\n', '    string _name,\n', '    string _symbol,\n', '    uint8 _decimals,\n', '    uint256 _initialBalance\n', '  )\n', '    isInitializer("DetailedPremintedToken", "1.9.0")\n', '    public\n', '  {\n', '    DetailedERC20.initialize(_name, _symbol, _decimals);\n', '\n', '    _premint(_sender, _initialBalance);\n', '  }\n', '\n', '  function _premint(address _to, uint256 _value) internal {\n', '    totalSupply_ += _value;\n', '    balances[_to] += _value;\n', '    emit Transfer(0, _to, _value);\n', '  }\n', '}\n', '\n', '// File: contracts/S4FE.sol\n', '\n', '/**\n', ' * @title S4FE\n', ' * @dev ERC20 Token, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer`\n', ' */\n', 'contract S4FE is Ownable, DetailedPremintedToken {\n', '\tuint256 public INITIAL_SUPPLY;\n', '\n', '\tbool public transferLocked;\n', '\tmapping (address => bool) public transferWhitelist;\n', '\n', '\t/**\n', '\t * @dev Constructor that gives msg.sender all of existing tokens.\n', '\t */\n', '\tconstructor() public {\n', '\n', '\t}\n', '\n', '\t/**\n', '\t * @dev initialize method to start constructor logic\n', '\t * \n', '\t * @param _owner address of owner\n', '\t */\n', "\tfunction initializeS4FE(address _owner) isInitializer('S4FE', '0') public {\n", '\t\tINITIAL_SUPPLY = 1000000000 * (10 ** uint256(18));\n', '\n', '\t\tOwnable.initialize(_owner);\n', '\t\tDetailedPremintedToken.initialize(_owner, "S4FE", "S4F", 18, INITIAL_SUPPLY);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev if ether is sent to this address, send it back.\n', '\t*/\n', '\tfunction () public {\n', '\t\trevert();\n', '\t}\n', '\n', '\t/**\n', '\t * @dev transfer token for a specified address\n', '\t * @param _to The address to transfer to.\n', '\t * @param _value The amount to be transferred.\n', '\t */\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(msg.sender == owner || transferLocked == false || transferWhitelist[msg.sender] == true);\n', '\n', '\t\tbool result = super.transfer(_to , _value);\n', '\t\treturn result;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev transfer lock status\n', '\t * @param _transferLocked Boolean indicating if transfer is locked\n', '\t */\n', '\tfunction setTransferLocked(bool _transferLocked) onlyOwner public returns (bool) {\n', '\t\ttransferLocked = _transferLocked;\n', '\t\treturn transferLocked;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev transfer lock status\n', '\t * @param _address Address of account indicating if allowed\n', '\t * @param _transferLocked Boolean indicating if transfer is locked\n', '\t */\n', '\tfunction setTransferWhitelist(address _address, bool _transferLocked) onlyOwner public returns (bool) {\n', '\t\ttransferWhitelist[_address] = _transferLocked;\n', '\t\treturn _transferLocked;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev whitelist addresses\n', '\t * @param _addresses Array of address of account for whitelist\n', '\t */\n', '\tfunction whitelist(address[] _addresses) onlyOwner public {\n', '\t\tfor(uint i = 0; i < _addresses.length ; i ++) {\n', '\t\t\ttransferWhitelist[_addresses[i]] = true;\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * @dev blacklist addresses\n', '\t * @param _addresses Array of address of account for whitelist\n', '\t */\n', '\tfunction blacklist(address[] _addresses) onlyOwner public {\n', '\t\tfor(uint i = 0; i < _addresses.length ; i ++) {\n', '\t\t\ttransferWhitelist[_addresses[i]] = false;\n', '\t\t}\n', '\t}\n', '}']
