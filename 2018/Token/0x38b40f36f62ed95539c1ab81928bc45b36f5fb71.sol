['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract MintTokensInterface {\n', '    \n', '   function mintTokensExternal(address to, uint tokens) public;\n', '    \n', '}\n', '\n', 'contract TokenDistributor is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  bool public stopContract = false;\n', '    \n', '  MintTokensInterface public crowdsale = MintTokensInterface(0x8DD9034f7cCC805bDc4D593A01f6A2E2EB94A67a);\n', '  \n', '  mapping(address => bool) public authorized;\n', '\n', '  mapping(address => uint) public balances;\n', '\n', '  address[] public rewardHolders;\n', '\n', '  event RewardTransfer(address indexed to, uint amount);\n', '\n', '  modifier onlyAuthorized() {\n', '    require(msg.sender == owner || authorized[msg.sender]);\n', '    _;\n', '  }\n', '  \n', '  function setStopContract(bool newStopContract) public onlyOwner {\n', '    stopContract = newStopContract;\n', '  }\n', '  \n', '  function addAuthorized(address to) public onlyOwner {\n', '    authorized[to] = true;\n', '  }\n', '  \n', '  function removeAuthorized(address to) public onlyOwner {\n', '    authorized[to] = false;\n', '  }\n', '    \n', '  function mintBatch(address[] wallets, uint[] tokens) public onlyOwner {\n', '    for(uint i=0; i<wallets.length; i++) crowdsale.mintTokensExternal(wallets[i], tokens[i]);\n', '  }\n', '\n', '  function mintAuthorizedBatch(address[] wallets, uint[] tokens) public onlyAuthorized {\n', '    for(uint i=0; i<wallets.length; i++) crowdsale.mintTokensExternal(wallets[i], tokens[i]);\n', '  }\n', '\n', '  function isContract(address addr) public view returns(bool) {\n', '    uint codeLength;\n', '    assembly {\n', '      // Retrieve the size of the code on target address, this needs assembly .\n', '      codeLength := extcodesize(addr)\n', '    }\n', '    return codeLength > 0;\n', '  }\n', '  \n', '  function mintAuthorizedBatchWithBalances(address[] wallets, uint[] tokens) public onlyAuthorized {\n', '    address wallet;\n', '    uint reward;\n', '    bool isItContract;\n', '    for(uint i=0; i<wallets.length; i++) {\n', '      wallet = wallets[i];\n', '      isItContract = isContract(wallet);\n', '      if(!isItContract || (isItContract && !stopContract)) {\n', '        reward = tokens[i];\n', '        crowdsale.mintTokensExternal(wallet, reward);\n', '        if(balances[wallet] == 0) {\n', '          rewardHolders.push(wallet);\n', '        }\n', '        balances[wallet] = balances[wallet].add(reward);\n', '        emit RewardTransfer(wallet, reward);\n', '      }\n', '    }\n', '  }\n', '    \n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract MintTokensInterface {\n', '    \n', '   function mintTokensExternal(address to, uint tokens) public;\n', '    \n', '}\n', '\n', 'contract TokenDistributor is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  bool public stopContract = false;\n', '    \n', '  MintTokensInterface public crowdsale = MintTokensInterface(0x8DD9034f7cCC805bDc4D593A01f6A2E2EB94A67a);\n', '  \n', '  mapping(address => bool) public authorized;\n', '\n', '  mapping(address => uint) public balances;\n', '\n', '  address[] public rewardHolders;\n', '\n', '  event RewardTransfer(address indexed to, uint amount);\n', '\n', '  modifier onlyAuthorized() {\n', '    require(msg.sender == owner || authorized[msg.sender]);\n', '    _;\n', '  }\n', '  \n', '  function setStopContract(bool newStopContract) public onlyOwner {\n', '    stopContract = newStopContract;\n', '  }\n', '  \n', '  function addAuthorized(address to) public onlyOwner {\n', '    authorized[to] = true;\n', '  }\n', '  \n', '  function removeAuthorized(address to) public onlyOwner {\n', '    authorized[to] = false;\n', '  }\n', '    \n', '  function mintBatch(address[] wallets, uint[] tokens) public onlyOwner {\n', '    for(uint i=0; i<wallets.length; i++) crowdsale.mintTokensExternal(wallets[i], tokens[i]);\n', '  }\n', '\n', '  function mintAuthorizedBatch(address[] wallets, uint[] tokens) public onlyAuthorized {\n', '    for(uint i=0; i<wallets.length; i++) crowdsale.mintTokensExternal(wallets[i], tokens[i]);\n', '  }\n', '\n', '  function isContract(address addr) public view returns(bool) {\n', '    uint codeLength;\n', '    assembly {\n', '      // Retrieve the size of the code on target address, this needs assembly .\n', '      codeLength := extcodesize(addr)\n', '    }\n', '    return codeLength > 0;\n', '  }\n', '  \n', '  function mintAuthorizedBatchWithBalances(address[] wallets, uint[] tokens) public onlyAuthorized {\n', '    address wallet;\n', '    uint reward;\n', '    bool isItContract;\n', '    for(uint i=0; i<wallets.length; i++) {\n', '      wallet = wallets[i];\n', '      isItContract = isContract(wallet);\n', '      if(!isItContract || (isItContract && !stopContract)) {\n', '        reward = tokens[i];\n', '        crowdsale.mintTokensExternal(wallet, reward);\n', '        if(balances[wallet] == 0) {\n', '          rewardHolders.push(wallet);\n', '        }\n', '        balances[wallet] = balances[wallet].add(reward);\n', '        emit RewardTransfer(wallet, reward);\n', '      }\n', '    }\n', '  }\n', '    \n', '}']
