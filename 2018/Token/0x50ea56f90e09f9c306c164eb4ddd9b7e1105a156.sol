['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/BasketToken.sol\n', '\n', 'library AddressArrayUtils {\n', '\n', '    /// @return Returns index and ok of the first occurrence starting from index 0\n', '    function index(address[] addresses, address a) internal pure returns (uint, bool) {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            if (addresses[i] == a) {\n', '                return (i, true);\n', '            }\n', '        }\n', '        return (0, false);\n', '    }\n', '\n', '}\n', '\n', '\n', '/// @title A decentralized Basket-like ERC20 which gives the owner a claim to the\n', '/// underlying assets\n', '/// @notice Basket Tokens are transferable, and can be created and redeemed by\n', '/// anyone. To create, a user must approve the contract to move the underlying\n', '/// tokens, then call `create()`.\n', '/// @author Daniel Que and Quan Pham\n', 'contract BasketToken is StandardToken, Pausable {\n', '    using SafeMath for uint256;\n', '    using AddressArrayUtils for address[];\n', '\n', '    string constant public name = "ERC20 TWENTY";\n', '    string constant public symbol = "ETW";\n', '    uint8 constant public decimals = 18;\n', '    struct TokenInfo {\n', '        address addr;\n', '        uint256 tokenUnits;\n', '    }\n', '    uint256 private creationQuantity_;\n', '    TokenInfo[] public tokens;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event Burn(address indexed from, uint256 amount);\n', '\n', '    /// @notice Requires value to be divisible by creationQuantity\n', '    /// @param value Number to be checked\n', '    modifier requireMultiple(uint256 value) {\n', '        require((value % creationQuantity_) == 0);\n', '        _;\n', '    }\n', '\n', '    /// @notice Requires value to be non-zero\n', '    /// @param value Number to be checked\n', '    modifier requireNonZero(uint256 value) {\n', '        require(value > 0);\n', '        _;\n', '    }\n', '\n', '    /// @notice Initializes contract with a list of ERC20 token addresses and\n', '    /// corresponding minimum number of units required for a creation unit\n', '    /// @param addresses Addresses of the underlying ERC20 token contracts\n', '    /// @param tokenUnits Number of token base units required per creation unit\n', '    /// @param _creationQuantity Number of base units per creation unit\n', '    function BasketToken(\n', '        address[] addresses,\n', '        uint256[] tokenUnits,\n', '        uint256 _creationQuantity\n', '    ) public {\n', '        require(0 < addresses.length && addresses.length < 256);\n', '        require(addresses.length == tokenUnits.length);\n', '        require(_creationQuantity >= 1);\n', '\n', '        creationQuantity_ = _creationQuantity;\n', '\n', '        for (uint8 i = 0; i < addresses.length; i++) { // Using uint8 because we expect maximum of 256 underlying tokens\n', '            tokens.push(TokenInfo({\n', '                addr: addresses[i],\n', '                tokenUnits: tokenUnits[i]\n', '            }));\n', '        }\n', '    }\n', '\n', '    /// @notice Returns the creationQuantity\n', '    /// @dev Creation quantity concept is similar but not identical to the one\n', '    /// described by EIP777\n', '    /// @return creationQuantity_ Creation quantity of the Basket token\n', '    function creationQuantity() external view returns(uint256) {\n', '        return creationQuantity_;\n', '    }\n', '\n', '    /// @notice Creates Basket tokens in exchange for underlying tokens. Before\n', '    /// calling, underlying tokens must be approved to be moved by the Basket Token\n', '    /// contract. The number of approved tokens required depends on\n', '    /// baseUnits.\n', '    /// @dev If any underlying tokens&#39; `transferFrom` fails (eg. the token is\n', '    /// frozen), create will no longer work. At this point a token upgrade will\n', '    /// be necessary.\n', '    /// @param baseUnits Number of base units to create. Must be a multiple of\n', '    /// creationQuantity.\n', '    function create(uint256 baseUnits)\n', '        external\n', '        whenNotPaused()\n', '        requireNonZero(baseUnits)\n', '        requireMultiple(baseUnits)\n', '    {\n', '        // Check overflow\n', '        require((totalSupply_ + baseUnits) > totalSupply_);\n', '\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            TokenInfo memory tokenInfo = tokens[i];\n', '            ERC20 erc20 = ERC20(tokenInfo.addr);\n', '            uint256 amount = baseUnits.div(creationQuantity_).mul(tokenInfo.tokenUnits);\n', '            require(erc20.transferFrom(msg.sender, address(this), amount));\n', '        }\n', '\n', '        mint(msg.sender, baseUnits);\n', '    }\n', '\n', '    /// @notice Redeems Basket Token in return for underlying tokens\n', '    /// @param baseUnits Number of base units to redeem. Must be a multiple of\n', '    /// creationQuantity.\n', '    /// @param tokensToSkip Underlying token addresses to skip redemption for.\n', '    /// Intended to be used to skip frozen or broken tokens which would prevent\n', '    /// all underlying tokens from being withdrawn due to a revert. Skipped\n', '    /// tokens will be left in the Basket Token contract and will be unclaimable.\n', '    function redeem(uint256 baseUnits, address[] tokensToSkip)\n', '        external\n', '        whenNotPaused()\n', '        requireNonZero(baseUnits)\n', '        requireMultiple(baseUnits)\n', '    {\n', '        require((totalSupply_ >= baseUnits));\n', '        require((balances[msg.sender] >= baseUnits));\n', '        require(tokensToSkip.length <= tokens.length);\n', '\n', '        // Burn before to prevent re-entrancy\n', '        burn(msg.sender, baseUnits);\n', '\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            TokenInfo memory tokenInfo = tokens[i];\n', '            ERC20 erc20 = ERC20(tokenInfo.addr);\n', '            uint256 index;\n', '            bool ok;\n', '            (index, ok) = tokensToSkip.index(tokenInfo.addr);\n', '            if (ok) {\n', '                continue;\n', '            }\n', '            uint256 amount = baseUnits.div(creationQuantity_).mul(tokenInfo.tokenUnits);\n', '            require(erc20.transfer(msg.sender, amount));\n', '        }\n', '    }\n', '\n', '    /// @return tokenAddresses Underlying token addresses\n', '    function tokenAddresses() external view returns (address[]){\n', '        address[] memory tokenAddresses = new address[](tokens.length);\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            tokenAddresses[i] = tokens[i].addr;\n', '        }\n', '        return tokenAddresses;\n', '    }\n', '\n', '    /// @return tokenUnits Number of token base units required per creation unit\n', '    function tokenUnits() external view returns (uint256[]){\n', '        uint256[] memory tokenUnits = new uint256[](tokens.length);\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            tokenUnits[i] = tokens[i].tokenUnits;\n', '        }\n', '        return tokenUnits;\n', '    }\n', '\n', '    // @dev Mints new Basket tokens\n', '    // @param to\n', '    // @param amount\n', '    // @return ok\n', '    function mint(address to, uint256 amount) internal returns (bool) {\n', '        totalSupply_ = totalSupply_.add(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        Mint(to, amount);\n', '        Transfer(address(0), to, amount);\n', '        return true;\n', '    }\n', '\n', '    // @dev Burns Basket tokens\n', '    // @param from\n', '    // @param amount\n', '    // @return ok\n', '    function burn(address from, uint256 amount) internal returns (bool) {\n', '        totalSupply_ = totalSupply_.sub(amount);\n', '        balances[from] = balances[from].sub(amount);\n', '        Burn(from, amount);\n', '        Transfer(from, address(0), amount);\n', '        return true;\n', '    }\n', '\n', '    // @notice Look up token info\n', '    // @param token Token address to look up\n', '    // @return (tokenUnits, ok) Units of underlying token, and whether the\n', '    // operation was successful\n', '    function getTokenUnits(address token) internal view returns (uint256, bool) {\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            if (tokens[i].addr == token) {\n', '                return (tokens[i].tokenUnits, true);\n', '            }\n', '        }\n', '        return (0, false);\n', '    }\n', '\n', '    /// @notice Owner: Withdraw excess funds which don&#39;t belong to Basket Token\n', '    /// holders\n', '    /// @param token ERC20 token address to withdraw\n', '    function withdrawExcessToken(address token)\n', '        external\n', '        onlyOwner\n', '    {\n', '        ERC20 erc20 = ERC20(token);\n', '        uint256 withdrawAmount;\n', '        uint256 amountOwned = erc20.balanceOf(address(this));\n', '        uint256 tokenUnits;\n', '        bool ok;\n', '        (tokenUnits, ok) = getTokenUnits(token);\n', '        if (ok) {\n', '            withdrawAmount = amountOwned.sub(totalSupply_.div(creationQuantity_).mul(tokenUnits));\n', '        } else {\n', '            withdrawAmount = amountOwned;\n', '        }\n', '        require(erc20.transfer(owner, withdrawAmount));\n', '    }\n', '\n', '    /// @notice Owner: Withdraw Ether\n', '    function withdrawEther()\n', '        external\n', '        onlyOwner\n', '    {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    /// @notice Fallback function\n', '    function() external payable {\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/BasketToken.sol\n', '\n', 'library AddressArrayUtils {\n', '\n', '    /// @return Returns index and ok of the first occurrence starting from index 0\n', '    function index(address[] addresses, address a) internal pure returns (uint, bool) {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            if (addresses[i] == a) {\n', '                return (i, true);\n', '            }\n', '        }\n', '        return (0, false);\n', '    }\n', '\n', '}\n', '\n', '\n', '/// @title A decentralized Basket-like ERC20 which gives the owner a claim to the\n', '/// underlying assets\n', '/// @notice Basket Tokens are transferable, and can be created and redeemed by\n', '/// anyone. To create, a user must approve the contract to move the underlying\n', '/// tokens, then call `create()`.\n', '/// @author Daniel Que and Quan Pham\n', 'contract BasketToken is StandardToken, Pausable {\n', '    using SafeMath for uint256;\n', '    using AddressArrayUtils for address[];\n', '\n', '    string constant public name = "ERC20 TWENTY";\n', '    string constant public symbol = "ETW";\n', '    uint8 constant public decimals = 18;\n', '    struct TokenInfo {\n', '        address addr;\n', '        uint256 tokenUnits;\n', '    }\n', '    uint256 private creationQuantity_;\n', '    TokenInfo[] public tokens;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event Burn(address indexed from, uint256 amount);\n', '\n', '    /// @notice Requires value to be divisible by creationQuantity\n', '    /// @param value Number to be checked\n', '    modifier requireMultiple(uint256 value) {\n', '        require((value % creationQuantity_) == 0);\n', '        _;\n', '    }\n', '\n', '    /// @notice Requires value to be non-zero\n', '    /// @param value Number to be checked\n', '    modifier requireNonZero(uint256 value) {\n', '        require(value > 0);\n', '        _;\n', '    }\n', '\n', '    /// @notice Initializes contract with a list of ERC20 token addresses and\n', '    /// corresponding minimum number of units required for a creation unit\n', '    /// @param addresses Addresses of the underlying ERC20 token contracts\n', '    /// @param tokenUnits Number of token base units required per creation unit\n', '    /// @param _creationQuantity Number of base units per creation unit\n', '    function BasketToken(\n', '        address[] addresses,\n', '        uint256[] tokenUnits,\n', '        uint256 _creationQuantity\n', '    ) public {\n', '        require(0 < addresses.length && addresses.length < 256);\n', '        require(addresses.length == tokenUnits.length);\n', '        require(_creationQuantity >= 1);\n', '\n', '        creationQuantity_ = _creationQuantity;\n', '\n', '        for (uint8 i = 0; i < addresses.length; i++) { // Using uint8 because we expect maximum of 256 underlying tokens\n', '            tokens.push(TokenInfo({\n', '                addr: addresses[i],\n', '                tokenUnits: tokenUnits[i]\n', '            }));\n', '        }\n', '    }\n', '\n', '    /// @notice Returns the creationQuantity\n', '    /// @dev Creation quantity concept is similar but not identical to the one\n', '    /// described by EIP777\n', '    /// @return creationQuantity_ Creation quantity of the Basket token\n', '    function creationQuantity() external view returns(uint256) {\n', '        return creationQuantity_;\n', '    }\n', '\n', '    /// @notice Creates Basket tokens in exchange for underlying tokens. Before\n', '    /// calling, underlying tokens must be approved to be moved by the Basket Token\n', '    /// contract. The number of approved tokens required depends on\n', '    /// baseUnits.\n', "    /// @dev If any underlying tokens' `transferFrom` fails (eg. the token is\n", '    /// frozen), create will no longer work. At this point a token upgrade will\n', '    /// be necessary.\n', '    /// @param baseUnits Number of base units to create. Must be a multiple of\n', '    /// creationQuantity.\n', '    function create(uint256 baseUnits)\n', '        external\n', '        whenNotPaused()\n', '        requireNonZero(baseUnits)\n', '        requireMultiple(baseUnits)\n', '    {\n', '        // Check overflow\n', '        require((totalSupply_ + baseUnits) > totalSupply_);\n', '\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            TokenInfo memory tokenInfo = tokens[i];\n', '            ERC20 erc20 = ERC20(tokenInfo.addr);\n', '            uint256 amount = baseUnits.div(creationQuantity_).mul(tokenInfo.tokenUnits);\n', '            require(erc20.transferFrom(msg.sender, address(this), amount));\n', '        }\n', '\n', '        mint(msg.sender, baseUnits);\n', '    }\n', '\n', '    /// @notice Redeems Basket Token in return for underlying tokens\n', '    /// @param baseUnits Number of base units to redeem. Must be a multiple of\n', '    /// creationQuantity.\n', '    /// @param tokensToSkip Underlying token addresses to skip redemption for.\n', '    /// Intended to be used to skip frozen or broken tokens which would prevent\n', '    /// all underlying tokens from being withdrawn due to a revert. Skipped\n', '    /// tokens will be left in the Basket Token contract and will be unclaimable.\n', '    function redeem(uint256 baseUnits, address[] tokensToSkip)\n', '        external\n', '        whenNotPaused()\n', '        requireNonZero(baseUnits)\n', '        requireMultiple(baseUnits)\n', '    {\n', '        require((totalSupply_ >= baseUnits));\n', '        require((balances[msg.sender] >= baseUnits));\n', '        require(tokensToSkip.length <= tokens.length);\n', '\n', '        // Burn before to prevent re-entrancy\n', '        burn(msg.sender, baseUnits);\n', '\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            TokenInfo memory tokenInfo = tokens[i];\n', '            ERC20 erc20 = ERC20(tokenInfo.addr);\n', '            uint256 index;\n', '            bool ok;\n', '            (index, ok) = tokensToSkip.index(tokenInfo.addr);\n', '            if (ok) {\n', '                continue;\n', '            }\n', '            uint256 amount = baseUnits.div(creationQuantity_).mul(tokenInfo.tokenUnits);\n', '            require(erc20.transfer(msg.sender, amount));\n', '        }\n', '    }\n', '\n', '    /// @return tokenAddresses Underlying token addresses\n', '    function tokenAddresses() external view returns (address[]){\n', '        address[] memory tokenAddresses = new address[](tokens.length);\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            tokenAddresses[i] = tokens[i].addr;\n', '        }\n', '        return tokenAddresses;\n', '    }\n', '\n', '    /// @return tokenUnits Number of token base units required per creation unit\n', '    function tokenUnits() external view returns (uint256[]){\n', '        uint256[] memory tokenUnits = new uint256[](tokens.length);\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            tokenUnits[i] = tokens[i].tokenUnits;\n', '        }\n', '        return tokenUnits;\n', '    }\n', '\n', '    // @dev Mints new Basket tokens\n', '    // @param to\n', '    // @param amount\n', '    // @return ok\n', '    function mint(address to, uint256 amount) internal returns (bool) {\n', '        totalSupply_ = totalSupply_.add(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        Mint(to, amount);\n', '        Transfer(address(0), to, amount);\n', '        return true;\n', '    }\n', '\n', '    // @dev Burns Basket tokens\n', '    // @param from\n', '    // @param amount\n', '    // @return ok\n', '    function burn(address from, uint256 amount) internal returns (bool) {\n', '        totalSupply_ = totalSupply_.sub(amount);\n', '        balances[from] = balances[from].sub(amount);\n', '        Burn(from, amount);\n', '        Transfer(from, address(0), amount);\n', '        return true;\n', '    }\n', '\n', '    // @notice Look up token info\n', '    // @param token Token address to look up\n', '    // @return (tokenUnits, ok) Units of underlying token, and whether the\n', '    // operation was successful\n', '    function getTokenUnits(address token) internal view returns (uint256, bool) {\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            if (tokens[i].addr == token) {\n', '                return (tokens[i].tokenUnits, true);\n', '            }\n', '        }\n', '        return (0, false);\n', '    }\n', '\n', "    /// @notice Owner: Withdraw excess funds which don't belong to Basket Token\n", '    /// holders\n', '    /// @param token ERC20 token address to withdraw\n', '    function withdrawExcessToken(address token)\n', '        external\n', '        onlyOwner\n', '    {\n', '        ERC20 erc20 = ERC20(token);\n', '        uint256 withdrawAmount;\n', '        uint256 amountOwned = erc20.balanceOf(address(this));\n', '        uint256 tokenUnits;\n', '        bool ok;\n', '        (tokenUnits, ok) = getTokenUnits(token);\n', '        if (ok) {\n', '            withdrawAmount = amountOwned.sub(totalSupply_.div(creationQuantity_).mul(tokenUnits));\n', '        } else {\n', '            withdrawAmount = amountOwned;\n', '        }\n', '        require(erc20.transfer(owner, withdrawAmount));\n', '    }\n', '\n', '    /// @notice Owner: Withdraw Ether\n', '    function withdrawEther()\n', '        external\n', '        onlyOwner\n', '    {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    /// @notice Fallback function\n', '    function() external payable {\n', '    }\n', '\n', '}']
