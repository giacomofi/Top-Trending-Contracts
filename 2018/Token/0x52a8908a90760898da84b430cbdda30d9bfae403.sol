['pragma solidity ^0.4.23;\n', '\n', '// Ownable contract with CFO\n', 'contract Ownable {\n', '    address public owner;\n', '    address public cfoAddress;\n', '\n', '    constructor() public{\n', '        owner = msg.sender;\n', '        cfoAddress = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function setCFO(address newCFO) external onlyOwner {\n', '        require(newCFO != address(0));\n', '\n', '        cfoAddress = newCFO;\n', '    }\n', '}\n', '\n', '// Pausable contract which allows children to implement an emergency stop mechanism.\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    // Modifier to make a function callable only when the contract is not paused.\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    // Modifier to make a function callable only when the contract is paused.\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '\n', '    // called by the owner to pause, triggers stopped state\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    // called by the owner to unpause, returns to normal state\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '// interface for presale contract\n', 'contract ParentInterface {\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '    function recommendedPrice(uint16 quality) public pure returns(uint256 price);\n', '    function getPet(uint256 _id) external view returns (uint64 birthTime, uint256 genes,uint64 breedTimeout,uint16 quality,address owner);\n', '}\n', '\n', 'contract AccessControl is Pausable {\n', '    ParentInterface public parent;\n', '    \n', '    function setParentAddress(address _address) public whenPaused onlyOwner\n', '    {\n', '        ParentInterface candidateContract = ParentInterface(_address);\n', '\n', '        parent = candidateContract;\n', '    }\n', '}\n', '\n', '// setting a special price\n', 'contract Discount is AccessControl {\n', '    uint128[101] public discount;\n', '    \n', '    function setPrice(uint8 _tokenId, uint128 _price) external onlyOwner {\n', '        discount[_tokenId] = _price;\n', '    }\n', '}\n', '\n', 'contract Sales is Discount {\n', '\n', '    constructor(address _address) public {\n', '        ParentInterface candidateContract = ParentInterface(_address);\n', '        parent = candidateContract;\n', '        paused = true;\n', '    }\n', '    \n', '\t// purchasing a parrot\n', '    function purchaseParrot(uint256 _tokenId) external payable whenNotPaused\n', '    {\n', '        uint64 birthTime; uint256 genes; uint64 breedTimeout; uint16 quality; address parrot_owner;\n', '        (birthTime,  genes, breedTimeout, quality, parrot_owner) = parent.getPet(_tokenId);\n', '        \n', '        require(parrot_owner == address(this));\n', '        \n', '        if(discount[_tokenId] == 0)\n', '            require(parent.recommendedPrice(quality) <= msg.value);\n', '        else\n', '            require(discount[_tokenId] <= msg.value);\n', '        \n', '        parent.transfer(msg.sender, _tokenId);\n', '    }\n', '    \n', '    function gift(uint256 _tokenId, address to) external onlyOwner{\n', '        parent.transfer(to, _tokenId);\n', '    }\n', '\n', '    function withdrawBalance(uint256 summ) external onlyCFO {\n', '        cfoAddress.transfer(summ);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// Ownable contract with CFO\n', 'contract Ownable {\n', '    address public owner;\n', '    address public cfoAddress;\n', '\n', '    constructor() public{\n', '        owner = msg.sender;\n', '        cfoAddress = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function setCFO(address newCFO) external onlyOwner {\n', '        require(newCFO != address(0));\n', '\n', '        cfoAddress = newCFO;\n', '    }\n', '}\n', '\n', '// Pausable contract which allows children to implement an emergency stop mechanism.\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    // Modifier to make a function callable only when the contract is not paused.\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    // Modifier to make a function callable only when the contract is paused.\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '\n', '    // called by the owner to pause, triggers stopped state\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    // called by the owner to unpause, returns to normal state\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '// interface for presale contract\n', 'contract ParentInterface {\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '    function recommendedPrice(uint16 quality) public pure returns(uint256 price);\n', '    function getPet(uint256 _id) external view returns (uint64 birthTime, uint256 genes,uint64 breedTimeout,uint16 quality,address owner);\n', '}\n', '\n', 'contract AccessControl is Pausable {\n', '    ParentInterface public parent;\n', '    \n', '    function setParentAddress(address _address) public whenPaused onlyOwner\n', '    {\n', '        ParentInterface candidateContract = ParentInterface(_address);\n', '\n', '        parent = candidateContract;\n', '    }\n', '}\n', '\n', '// setting a special price\n', 'contract Discount is AccessControl {\n', '    uint128[101] public discount;\n', '    \n', '    function setPrice(uint8 _tokenId, uint128 _price) external onlyOwner {\n', '        discount[_tokenId] = _price;\n', '    }\n', '}\n', '\n', 'contract Sales is Discount {\n', '\n', '    constructor(address _address) public {\n', '        ParentInterface candidateContract = ParentInterface(_address);\n', '        parent = candidateContract;\n', '        paused = true;\n', '    }\n', '    \n', '\t// purchasing a parrot\n', '    function purchaseParrot(uint256 _tokenId) external payable whenNotPaused\n', '    {\n', '        uint64 birthTime; uint256 genes; uint64 breedTimeout; uint16 quality; address parrot_owner;\n', '        (birthTime,  genes, breedTimeout, quality, parrot_owner) = parent.getPet(_tokenId);\n', '        \n', '        require(parrot_owner == address(this));\n', '        \n', '        if(discount[_tokenId] == 0)\n', '            require(parent.recommendedPrice(quality) <= msg.value);\n', '        else\n', '            require(discount[_tokenId] <= msg.value);\n', '        \n', '        parent.transfer(msg.sender, _tokenId);\n', '    }\n', '    \n', '    function gift(uint256 _tokenId, address to) external onlyOwner{\n', '        parent.transfer(to, _tokenId);\n', '    }\n', '\n', '    function withdrawBalance(uint256 summ) external onlyCFO {\n', '        cfoAddress.transfer(summ);\n', '    }\n', '}']
