['pragma solidity ^0.4.18;\n', 'contract Ownable {\n', '  address public owner;\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '  }\n', '}\n', 'interface TransferRecipient {\n', '\tfunction tokenFallback(address _from, uint256 _value, bytes _extraData) public returns(bool);\n', '}\n', '\n', 'interface ApprovalRecipient {\n', '\tfunction approvalFallback(address _from, uint256 _value, bytes _extraData) public returns(bool);\n', '}\n', 'contract ERCToken {\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\tuint256 public  totalSupply;\n', '\tmapping (address => uint256) public balanceOf;\n', '\n', '\tfunction allowance(address _owner,address _spender) public view returns(uint256);\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success);\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\tfunction approve(address _spender, uint256 _value) public  returns (bool success);\n', '}\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract EABToken is ERCToken,Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals=18;\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '\n', '  function EABToken(\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = 48e8 * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                   // Give the creator all initial tokens\n', '        name = tokenName;                                      // Set the name for display purposes\n', '        symbol = tokenSymbol;\n', '     }\n', ' \n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        require(!frozenAccount[_from]);\n', '        uint previousbalanceOf = balanceOf[_from].add(balanceOf[_to]);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] =balanceOf[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from].add(balanceOf[_to]) == previousbalanceOf);\n', '    }\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function transferAndCall(address _to, uint256 _value, bytes _data)\n', '        public\n', '        returns (bool success) {\n', '        _transfer(msg.sender,_to, _value);\n', '        if(_isContract(_to))\n', '        {\n', '            TransferRecipient spender = TransferRecipient(_to);\n', '            if(!spender.tokenFallback(msg.sender, _value, _data))\n', '            {\n', '                revert();\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '    function _isContract(address _addr) private view returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '           length := extcodesize(_addr)\n', '      }\n', '      return (length>0);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowed[_from][msg.sender]); // Check allowance\n', '        allowed[_from][msg.sender]= allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner,address _spender) public view returns(uint256){\n', '        return allowed[_owner][_spender];\n', '\n', '    }\n', '    function approve(address _spender, uint256 _value) public  returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        if(_isContract(_spender)){\n', '            ApprovalRecipient spender = ApprovalRecipient(_spender);\n', '            if(!spender.approvalFallback(msg.sender, _value, _extraData)){\n', '                revert();\n', '            }\n', '        }\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '\n', '    }\n', '    function freezeAccount(address target, bool freeze) onlyOwner public{\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '}']