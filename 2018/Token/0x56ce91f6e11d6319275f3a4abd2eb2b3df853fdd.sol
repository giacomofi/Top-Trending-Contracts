['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-24\n', '*/\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', 'contract Token {\n', '    string internal _symbol;\n', '    string internal _name;\n', '    uint8 internal _decimals;\n', '    uint internal _totalSupply;\n', '    mapping (address => uint) internal _balanceOf;\n', '    mapping (address => mapping (address => uint)) internal _allowances;\n', '   \n', '    function Token(string symbol, string name, uint8 decimals, uint totalSupply) public {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply;\n', '    }\n', '   \n', '    function name() public constant returns (string) {\n', '        return _name;\n', '    }\n', '   \n', '    function symbol() public constant returns (string) {\n', '        return _symbol;\n', '    }\n', '   \n', '    function decimals() public constant returns (uint8) {\n', '        return _decimals;\n', '    }\n', '   \n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '   \n', '    function balanceOf(address _addr) public constant returns (uint);\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '}\n', '\n', 'interface ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool);\n', '    function approve(address _spender, uint _value) external returns (bool);\n', '    function allowance(address _owner, address _spender) external constant returns (uint);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', 'interface ERC223 {\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '   function isOwner(address _address) internal view returns (bool) {\n', '        return (_address == owner);\n', '    }\n', '   \n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '// create a Flix token with a supply of 100 million\n', '// using the ERC223 protocol\n', 'contract FlixToken is Ownable,Token("FLIX", "FLIX Token", 18, 0), ERC20, ERC223 {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeMath for uint;\n', '\n', '    address owner;\n', '\n', '    bool airdrop_funded = false;\n', '    bool crowdsale_funded = false;\n', '    bool bounty_campaign_funded = false;\n', '    bool vest_funded = false;\n', '    bool reserve_funded = false;\n', '\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '   \n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function FlixToken() public {\n', '        owner = msg.sender;\n', '        _balanceOf[owner] = 0;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint) {\n', '        return _balanceOf[_addr];\n', '    }\n', '\n', '\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= _balanceOf[msg.sender]);\n', '   \n', '    bytes memory empty;\n', '\n', '    _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n', '    _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '   \n', '    emit Transfer(msg.sender, _to, _value);\n', '   \n', '    if(isContract(_to)){\n', '        ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n', '        _contract.tokenFallback(msg.sender, _value, empty);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '   function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        require(_value <= _balanceOf[msg.sender]);\n', '       \n', '        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n', '        _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        if(isContract(_to)){\n', '            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n', '            _contract.tokenFallback(msg.sender, _value, _data);\n', '        }        \n', '        return true;\n', '    }\n', '   \n', '\n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint codeSize;\n', '        assembly {\n', '            codeSize := extcodesize(_addr)\n', '        }\n', '        return codeSize > 0;\n', '    }\n', '   \n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= _balanceOf[_from]);\n', '        require(_value <= _allowances[_from][msg.sender]);\n', '\n', '        _balanceOf[_from] = _balanceOf[_from].sub(_value);\n', '    _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '    _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '    function approve(address _spender, uint _value) external returns (bool) {\n', '        _allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) external constant returns (uint) {\n', '        return _allowances[_owner][_spender];\n', '    }\n', ' \n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value,address _who) onlyOwner public {\n', '    require((now <= 1526637600));      \n', '    _burn(_who, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require((now <= 1526637600));\n', '    require(_value <= _balanceOf[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    _balanceOf[_who] = _balanceOf[_who].sub(_value);\n', '    _totalSupply = _totalSupply.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', ' \n', 'function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '    require((now <= 1526637600));\n', '    _totalSupply = _totalSupply.add(_amount);\n', '    _balanceOf[_to] = _balanceOf[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * Mint tokens and allocate to wallet\n', '     Reversible until presale launch\n', '   *\n', '   */\n', '  function mintToContract(bytes32 mintType,address _to) onlyOwner public returns (bool) {\n', '    require((now <= 1526635600));\n', '    require((mintType == "Crowdsale") || (mintType == "Airdrop") || (mintType == "BountyCampaign") || (mintType =="Vesting") || (mintType =="Reserved"));\n', '    uint256 amount = 0;\n', '    if(mintType == "Crowdsale"){\n', '        require(!crowdsale_funded);\n', '        amount = 59000000000000000000000000;\n', '        crowdsale_funded = true;\n', '    }\n', '     if(mintType == "BountyCampaign"){\n', '        require(!bounty_campaign_funded);\n', '        amount = 2834000000000000000000000;\n', '        bounty_campaign_funded = true;\n', '\n', '    }\n', '    if(mintType == "Vesting"){\n', '        require(!vest_funded);\n', '        amount = 18000000000000000000000000;\n', '        vest_funded = true;\n', '    }\n', '    if(mintType == "Reserved"){\n', '        require(!reserve_funded);\n', '        amount = 20000000000000000000000000;\n', '        reserve_funded = true;\n', '    }\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balanceOf[_to] = _balanceOf[_to].add(amount);\n', '    emit Mint(_to, amount);\n', '    emit Transfer(address(0), _to, amount);\n', '    return true;\n', '  }\n', '}']