['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract MovaToken {\n', '\t\n', '\tusing SafeMath for uint256;\n', '\n', '\t// Constants\n', '\tstring public name = "MOVA Move Coin";\n', '\tstring public symbol = "MOVE";\n', '\tuint256 public decimals = 18;\n', '\n', '\tevent Log(string msg);\n', '  \n', '\tfunction totalSupply() public pure returns(uint256) {\n', '\t\treturn 579630120 * 1e18;  \n', '\t}\n', '\t\n', '\tfunction currentSupply() public pure returns(uint256) {\n', '\t\treturn totalSupply();\n', '\t}\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\taddress constant public teamAddress = 0xAe6c0952B76badD45125146a0566cdE2E5A8b401;\n', '\t \n', '\t// Constructor\n', '\tconstructor() public {\n', '\t\tbalances[teamAddress] = totalSupply();\n', '\t}\n', '  \n', '\t// ***********************************************\n', '\t// ERC20 methods\n', '\t// ***********************************************\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\t/**\n', '\t* @dev Transfer tokens from one address to another\n', '\t* @param _from address The address which you want to send tokens from\n', '\t* @param _to address The address which you want to transfer to\n', '\t* @param _value uint256 the amount of tokens to be transferred\n', '\t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t*\n', '\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '\t* race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _value The amount of tokens to be spent.\n', '\t*/\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t* @param _owner address The address which owns the funds.\n', '\t* @param _spender address The address which will spend the funds.\n', '\t* @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t*/\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t*\n', '\t* approve should be called when allowed[_spender] == 0. To increment\n', '\t* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t* the first transaction is mined)\n', '\t* From MonolithDAO Token.sol\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _addedValue The amount of tokens to increase the allowance by.\n', '\t*/\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t*\n', '\t* approve should be called when allowed[_spender] == 0. To decrement\n', '\t* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t* the first transaction is mined)\n', '\t* From MonolithDAO Token.sol\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t*/\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\t\n', '}']