['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '     /**\n', '      * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '      * @param newOwner The address to transfer ownership to.\n', '      */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '      _transferOwnership(newOwner);\n', '    }\n', '\n', '     /**\n', '      * @dev Transfers control of the contract to a newOwner.\n', '      * @param newOwner The address to transfer ownership to.\n', '      */\n', '    function _transferOwnership(address newOwner) internal {\n', '      require(newOwner != address(0));\n', '      emit OwnershipTransferred(owner, newOwner);\n', '      owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', ' library SafeMath {\n', '     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         uint256 c = a * b;\n', '         assert(a == 0 || c / a == b);\n', '         return c;\n', '     }\n', '\n', '     function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '         uint256 c = a / b;\n', '         // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '         return c;\n', '     }\n', '\n', '     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         assert(b <= a);\n', '         return a - b;\n', '     }\n', '\n', '     function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         uint256 c = a + b;\n', '         assert(c >= a);\n', '         return c;\n', '     }\n', '\n', '     function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '         return a >= b ? a : b;\n', '     }\n', '\n', '     function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '         return a < b ? a : b;\n', '     }\n', '\n', '     function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         return a >= b ? a : b;\n', '     }\n', '\n', '     function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         return a < b ? a : b;\n', '     }\n', ' }\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', ' contract ERC20Basic {\n', '     uint256 public totalSupply;\n', '\n', '     function balanceOf(address who) public view returns (uint256);\n', '     function transfer(address to, uint256 value) public returns (bool);\n', '\n', '     event Transfer(address indexed from, address indexed to, uint256 value);\n', ' }\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', ' contract ERC20 {\n', '     uint256 public totalSupply;\n', '\n', '     function balanceOf(address _owner) public constant returns (uint256 balance);\n', '     function transfer(address _to, uint256 _value) public returns (bool success);\n', '     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '     function approve(address _spender, uint256 _value) public returns (bool success);\n', '     function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', ' contract BasicToken is ERC20Basic {\n', '     using SafeMath for uint256;\n', '\n', '     mapping (address => uint256) balances;\n', '\n', '     // 2018-09-24 00:00:00 AST - start time for pre sale\n', '     uint256 public presaleStartTime = 1537736400;\n', '\n', '     // 2018-10-24 23:59:59 AST - end time for pre sale\n', '     uint256 public presaleEndTime = 1540414799;\n', '\n', '     // 2018-11-04 00:00:00 AST - start time for main sale\n', '     uint256 public mainsaleStartTime = 1541278800;\n', '\n', '     // 2019-01-04 23:59:59 AST - end time for main sale\n', '     uint256 public mainsaleEndTime = 1546635599;\n', '\n', '     address public constant investor1 = 0x8013e8F85C9bE7baA19B9Fd9a5Bc5C6C8D617446;\n', '     address public constant investor2 = 0xf034E5dB3ed5Cb26282d2DC5802B21DB3205B882;\n', '     address public constant investor3 = 0x1A7dD28A461D7e0D75b89b214d5188E0304E5726;\n', '\n', '     /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '     function transfer(address _to, uint256 _value) public returns (bool) {\n', '         require(_to != address(0));\n', '         require(_value <= balances[msg.sender]);\n', '         if (( (msg.sender == investor1) || (msg.sender == investor2) || (msg.sender == investor3)) && (now < (presaleStartTime + 300 days))) {\n', '           revert();\n', '         }\n', '         // SafeMath.sub will throw if there is not enough balance.\n', '         balances[msg.sender] = balances[msg.sender].sub(_value);\n', '         balances[_to] = balances[_to].add(_value);\n', '         emit Transfer(msg.sender, _to, _value);\n', '         return true;\n', '     }\n', '\n', '     /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '     function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '\n', ' }\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', ' contract StandardToken is ERC20, BasicToken {\n', '\n', '     mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '     /**\n', '      * @dev Transfer tokens from one address to another\n', '      * @param _from address The address which you want to send tokens from\n', '      * @param _to address The address which you want to transfer to\n', '      * @param _value uint256 the amount of tokens to be transferred\n', '      */\n', '     function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '         require(_to != address(0));\n', '         require(_value <= balances[_from]);\n', '         require(_value <= allowed[_from][msg.sender]);\n', '         if (( (_from == investor1) || (_from == investor2) || (_from == investor3)) && (now < (presaleStartTime + 300 days))) {\n', '           revert();\n', '         }\n', '\n', '         balances[_from] = balances[_from].sub(_value);\n', '         balances[_to] = balances[_to].add(_value);\n', '         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '         emit Transfer(_from, _to, _value);\n', '         return true;\n', '     }\n', '\n', '     /**\n', '      * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '      *\n', '      * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '      * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '      * @param _spender The address which will spend the funds.\n', '      * @param _value The amount of tokens to be spent.\n', '      */\n', '     function approve(address _spender, uint256 _value) public returns (bool) {\n', '         allowed[msg.sender][_spender] = _value;\n', '         emit Approval(msg.sender, _spender, _value);\n', '         return true;\n', '     }\n', '\n', '     /**\n', '      * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '      * @param _owner address The address which owns the funds.\n', '      * @param _spender address The address which will spend the funds.\n', '      * @return A uint256 specifying the amount of tokens still available for the spender.\n', '      */\n', '     function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '     }\n', '\n', '     /**\n', '      * approve should be called when allowed[_spender] == 0. To increment\n', '      * allowed value is better to use this function to avoid 2 calls (and wait until\n', '      * the first transaction is mined)\n', '      * From MonolithDAO Token.sol\n', '      */\n', '     function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '         return true;\n', '     }\n', '\n', '     function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '         uint oldValue = allowed[msg.sender][_spender];\n', '         if (_subtractedValue > oldValue) {\n', '             allowed[msg.sender][_spender] = 0;\n', '         }\n', '         else {\n', '             allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '         }\n', '         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '         return true;\n', '     }\n', '\n', ' }\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    string public constant name = "Kartblock";\n', '    string public constant symbol = "KBT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount, address _owner) canMint internal returns (bool) {\n', '        balances[_to] = balances[_to].add(_amount);\n', '        balances[_owner] = balances[_owner].sub(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(_owner, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint internal returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Whitelist is Ownable {\n', '\n', '    mapping (address => bool) verifiedAddresses;\n', '\n', '    function isAddressWhitelist(address _address) public view returns (bool) {\n', '        return verifiedAddresses[_address];\n', '    }\n', '\n', '    function whitelistAddress(address _newAddress) external onlyOwner {\n', '        verifiedAddresses[_newAddress] = true;\n', '    }\n', '\n', '    function removeWhitelistAddress(address _oldAddress) external onlyOwner {\n', '        require(verifiedAddresses[_oldAddress]);\n', '        verifiedAddresses[_oldAddress] = false;\n', '    }\n', '\n', '    function batchWhitelistAddresses(address[] _addresses) external onlyOwner {\n', '        for (uint cnt = 0; cnt < _addresses.length; cnt++) {\n', '            assert(!verifiedAddresses[_addresses[cnt]]);\n', '            verifiedAddresses[_addresses[cnt]] = true;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public PresaleWeiRaised;\n', '    uint256 public mainsaleWeiRaised;\n', '    uint256 public tokenAllocated;\n', '\n', '    event WalletChanged(address indexed previousWallet, address indexed newWallet);\n', '\n', '    constructor(address _wallet) public {\n', '        require(_wallet != address(0));\n', '        wallet = _wallet;\n', '    }\n', '\n', '    function transferWallet(address newWallet) public onlyOwner {\n', '      _transferOwnership(newWallet);\n', '    }\n', '\n', '    function _transferWallet(address newWallet) internal {\n', '      require(newWallet != address(0));\n', '      emit WalletChanged(owner, newWallet);\n', '      wallet = newWallet;\n', '    }\n', '}\n', '\n', 'contract KartblockCrowdsale is Ownable, Crowdsale, Whitelist, MintableToken {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    // ===== Cap & Goal Management =====\n', '    uint256 public constant presaleCap = 10000 * (10 ** uint256(decimals));\n', '    uint256 public constant mainsaleCap = 175375 * (10 ** uint256(decimals));\n', '    uint256 public constant mainsaleGoal = 11700 * (10 ** uint256(decimals));\n', '\n', '    // ============= Token Distribution ================\n', '    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n', '    uint256 public constant totalTokensForSale = 195500000 * (10 ** uint256(decimals));\n', '    uint256 public constant tokensForFuture = 760000000 * (10 ** uint256(decimals));\n', '    uint256 public constant tokensForswap = 4500000 * (10 ** uint256(decimals));\n', '    uint256 public constant tokensForInvester1 = 16000000 * (10 ** uint256(decimals));\n', '    uint256 public constant tokensForInvester2 = 16000000 * (10 ** uint256(decimals));\n', '    uint256 public constant tokensForInvester3 = 8000000 * (10 ** uint256(decimals));\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate;\n', '    mapping (address => uint256) public deposited;\n', '    address[] investors;\n', '\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '    event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken);\n', '    event Finalized();\n', '\n', '    constructor(\n', '      address _owner,\n', '      address _wallet\n', '      ) public Crowdsale(_wallet) {\n', '\n', '        require(_wallet != address(0));\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', '        mintingFinished = false;\n', '        totalSupply = INITIAL_SUPPLY;\n', '        rate = 1140;\n', '        bool resultMintForOwner = mintForOwner(owner);\n', '        require(resultMintForOwner);\n', '        balances[0x9AF6043d1B74a7c9EC7e3805Bc10e41230537A8B] = balances[0x9AF6043d1B74a7c9EC7e3805Bc10e41230537A8B].add(tokensForswap);\n', '        mainsaleWeiRaised.add(tokensForswap);\n', '        balances[investor1] = balances[investor1].add(tokensForInvester1);\n', '        balances[investor2] = balances[investor1].add(tokensForInvester2);\n', '        balances[investor3] = balances[investor1].add(tokensForInvester3);\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address _investor) public  payable returns (uint256){\n', '        require(_investor != address(0));\n', '        require(validPurchase());\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        if (tokens == 0) {revert();}\n', '\n', '        // update state\n', '        if (isPresalePeriod())  {\n', '          PresaleWeiRaised = PresaleWeiRaised.add(weiAmount);\n', '        } else if (isMainsalePeriod()) {\n', '          mainsaleWeiRaised = mainsaleWeiRaised.add(weiAmount);\n', '        }\n', '        tokenAllocated = tokenAllocated.add(tokens);\n', '        if (verifiedAddresses[_investor]) {\n', '           mint(_investor, tokens, owner);\n', '        }else {\n', '          investors.push(_investor);\n', '          deposited[_investor] = deposited[_investor].add(tokens);\n', '        }\n', '        emit TokenPurchase(_investor, weiAmount, tokens);\n', '        wallet.transfer(weiAmount);\n', '        return tokens;\n', '    }\n', '\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns(uint256) {\n', '      return _weiAmount.mul(rate);\n', '    }\n', '\n', '    // ====================== Price Management =================\n', '    function setPrice() public onlyOwner {\n', '      if (isPresalePeriod()) {\n', '        rate = 1140;\n', '      } else if (isMainsalePeriod()) {\n', '        rate = 1597;\n', '      }\n', '    }\n', '\n', '    function isPresalePeriod() public view returns (bool) {\n', '      if (now >= presaleStartTime && now < presaleEndTime) {\n', '        return true;\n', '      }\n', '      return false;\n', '    }\n', '\n', '    function isMainsalePeriod() public view returns (bool) {\n', '      if (now >= mainsaleStartTime && now < mainsaleEndTime) {\n', '        return true;\n', '      }\n', '      return false;\n', '    }\n', '\n', '    function mintForOwner(address _wallet) internal returns (bool result) {\n', '        result = false;\n', '        require(_wallet != address(0));\n', '        balances[_wallet] = balances[_wallet].add(INITIAL_SUPPLY);\n', '        result = true;\n', '    }\n', '\n', '    function getDeposited(address _investor) public view returns (uint256){\n', '        return deposited[_investor];\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '      bool withinCap =  true;\n', '      if (isPresalePeriod()) {\n', '        withinCap = PresaleWeiRaised.add(msg.value) <= presaleCap;\n', '      } else if (isMainsalePeriod()) {\n', '        withinCap = mainsaleWeiRaised.add(msg.value) <= mainsaleCap;\n', '      }\n', '      bool withinPeriod = isPresalePeriod() || isMainsalePeriod();\n', '      bool minimumContribution = msg.value >= 0.5 ether;\n', '      return withinPeriod && minimumContribution && withinCap;\n', '    }\n', '\n', '    function readyForFinish() internal view returns(bool) {\n', '      bool endPeriod = now < mainsaleEndTime;\n', '      bool reachCap = tokenAllocated <= mainsaleCap;\n', '      return endPeriod || reachCap;\n', '    }\n', '\n', '\n', '    // Finish: Mint Extra Tokens as needed before finalizing the Crowdsale.\n', '    function finalize(\n', '      address _tokensForFuture\n', '      ) public onlyOwner returns (bool result) {\n', '        require(_tokensForFuture != address(0));\n', '        require(readyForFinish());\n', '        result = false;\n', '        mint(_tokensForFuture, tokensForFuture, owner);\n', '        address contractBalance = this;\n', '        wallet.transfer(contractBalance.balance);\n', '        finishMinting();\n', '        emit Finalized();\n', '        result = true;\n', '    }\n', '\n', '    function transferToInvester() public onlyOwner returns (bool result) {\n', '        require( now >= 1548363600);\n', '        for (uint cnt = 0; cnt < investors.length; cnt++) {\n', '            mint(investors[cnt], deposited[investors[cnt]], owner);\n', '        }\n', '        result = true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '     /**\n', '      * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '      * @param newOwner The address to transfer ownership to.\n', '      */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '      _transferOwnership(newOwner);\n', '    }\n', '\n', '     /**\n', '      * @dev Transfers control of the contract to a newOwner.\n', '      * @param newOwner The address to transfer ownership to.\n', '      */\n', '    function _transferOwnership(address newOwner) internal {\n', '      require(newOwner != address(0));\n', '      emit OwnershipTransferred(owner, newOwner);\n', '      owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', ' library SafeMath {\n', '     function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         uint256 c = a * b;\n', '         assert(a == 0 || c / a == b);\n', '         return c;\n', '     }\n', '\n', '     function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '         uint256 c = a / b;\n', "         // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '         return c;\n', '     }\n', '\n', '     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         assert(b <= a);\n', '         return a - b;\n', '     }\n', '\n', '     function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         uint256 c = a + b;\n', '         assert(c >= a);\n', '         return c;\n', '     }\n', '\n', '     function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '         return a >= b ? a : b;\n', '     }\n', '\n', '     function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '         return a < b ? a : b;\n', '     }\n', '\n', '     function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         return a >= b ? a : b;\n', '     }\n', '\n', '     function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '         return a < b ? a : b;\n', '     }\n', ' }\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', ' contract ERC20Basic {\n', '     uint256 public totalSupply;\n', '\n', '     function balanceOf(address who) public view returns (uint256);\n', '     function transfer(address to, uint256 value) public returns (bool);\n', '\n', '     event Transfer(address indexed from, address indexed to, uint256 value);\n', ' }\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', ' contract ERC20 {\n', '     uint256 public totalSupply;\n', '\n', '     function balanceOf(address _owner) public constant returns (uint256 balance);\n', '     function transfer(address _to, uint256 _value) public returns (bool success);\n', '     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '     function approve(address _spender, uint256 _value) public returns (bool success);\n', '     function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', ' contract BasicToken is ERC20Basic {\n', '     using SafeMath for uint256;\n', '\n', '     mapping (address => uint256) balances;\n', '\n', '     // 2018-09-24 00:00:00 AST - start time for pre sale\n', '     uint256 public presaleStartTime = 1537736400;\n', '\n', '     // 2018-10-24 23:59:59 AST - end time for pre sale\n', '     uint256 public presaleEndTime = 1540414799;\n', '\n', '     // 2018-11-04 00:00:00 AST - start time for main sale\n', '     uint256 public mainsaleStartTime = 1541278800;\n', '\n', '     // 2019-01-04 23:59:59 AST - end time for main sale\n', '     uint256 public mainsaleEndTime = 1546635599;\n', '\n', '     address public constant investor1 = 0x8013e8F85C9bE7baA19B9Fd9a5Bc5C6C8D617446;\n', '     address public constant investor2 = 0xf034E5dB3ed5Cb26282d2DC5802B21DB3205B882;\n', '     address public constant investor3 = 0x1A7dD28A461D7e0D75b89b214d5188E0304E5726;\n', '\n', '     /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '     function transfer(address _to, uint256 _value) public returns (bool) {\n', '         require(_to != address(0));\n', '         require(_value <= balances[msg.sender]);\n', '         if (( (msg.sender == investor1) || (msg.sender == investor2) || (msg.sender == investor3)) && (now < (presaleStartTime + 300 days))) {\n', '           revert();\n', '         }\n', '         // SafeMath.sub will throw if there is not enough balance.\n', '         balances[msg.sender] = balances[msg.sender].sub(_value);\n', '         balances[_to] = balances[_to].add(_value);\n', '         emit Transfer(msg.sender, _to, _value);\n', '         return true;\n', '     }\n', '\n', '     /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '     function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '\n', ' }\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', ' contract StandardToken is ERC20, BasicToken {\n', '\n', '     mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '     /**\n', '      * @dev Transfer tokens from one address to another\n', '      * @param _from address The address which you want to send tokens from\n', '      * @param _to address The address which you want to transfer to\n', '      * @param _value uint256 the amount of tokens to be transferred\n', '      */\n', '     function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '         require(_to != address(0));\n', '         require(_value <= balances[_from]);\n', '         require(_value <= allowed[_from][msg.sender]);\n', '         if (( (_from == investor1) || (_from == investor2) || (_from == investor3)) && (now < (presaleStartTime + 300 days))) {\n', '           revert();\n', '         }\n', '\n', '         balances[_from] = balances[_from].sub(_value);\n', '         balances[_to] = balances[_to].add(_value);\n', '         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '         emit Transfer(_from, _to, _value);\n', '         return true;\n', '     }\n', '\n', '     /**\n', '      * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '      *\n', '      * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '      * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "      * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '      * @param _spender The address which will spend the funds.\n', '      * @param _value The amount of tokens to be spent.\n', '      */\n', '     function approve(address _spender, uint256 _value) public returns (bool) {\n', '         allowed[msg.sender][_spender] = _value;\n', '         emit Approval(msg.sender, _spender, _value);\n', '         return true;\n', '     }\n', '\n', '     /**\n', '      * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '      * @param _owner address The address which owns the funds.\n', '      * @param _spender address The address which will spend the funds.\n', '      * @return A uint256 specifying the amount of tokens still available for the spender.\n', '      */\n', '     function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '     }\n', '\n', '     /**\n', '      * approve should be called when allowed[_spender] == 0. To increment\n', '      * allowed value is better to use this function to avoid 2 calls (and wait until\n', '      * the first transaction is mined)\n', '      * From MonolithDAO Token.sol\n', '      */\n', '     function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '         return true;\n', '     }\n', '\n', '     function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '         uint oldValue = allowed[msg.sender][_spender];\n', '         if (_subtractedValue > oldValue) {\n', '             allowed[msg.sender][_spender] = 0;\n', '         }\n', '         else {\n', '             allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '         }\n', '         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '         return true;\n', '     }\n', '\n', ' }\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    string public constant name = "Kartblock";\n', '    string public constant symbol = "KBT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount, address _owner) canMint internal returns (bool) {\n', '        balances[_to] = balances[_to].add(_amount);\n', '        balances[_owner] = balances[_owner].sub(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(_owner, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint internal returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Whitelist is Ownable {\n', '\n', '    mapping (address => bool) verifiedAddresses;\n', '\n', '    function isAddressWhitelist(address _address) public view returns (bool) {\n', '        return verifiedAddresses[_address];\n', '    }\n', '\n', '    function whitelistAddress(address _newAddress) external onlyOwner {\n', '        verifiedAddresses[_newAddress] = true;\n', '    }\n', '\n', '    function removeWhitelistAddress(address _oldAddress) external onlyOwner {\n', '        require(verifiedAddresses[_oldAddress]);\n', '        verifiedAddresses[_oldAddress] = false;\n', '    }\n', '\n', '    function batchWhitelistAddresses(address[] _addresses) external onlyOwner {\n', '        for (uint cnt = 0; cnt < _addresses.length; cnt++) {\n', '            assert(!verifiedAddresses[_addresses[cnt]]);\n', '            verifiedAddresses[_addresses[cnt]] = true;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public PresaleWeiRaised;\n', '    uint256 public mainsaleWeiRaised;\n', '    uint256 public tokenAllocated;\n', '\n', '    event WalletChanged(address indexed previousWallet, address indexed newWallet);\n', '\n', '    constructor(address _wallet) public {\n', '        require(_wallet != address(0));\n', '        wallet = _wallet;\n', '    }\n', '\n', '    function transferWallet(address newWallet) public onlyOwner {\n', '      _transferOwnership(newWallet);\n', '    }\n', '\n', '    function _transferWallet(address newWallet) internal {\n', '      require(newWallet != address(0));\n', '      emit WalletChanged(owner, newWallet);\n', '      wallet = newWallet;\n', '    }\n', '}\n', '\n', 'contract KartblockCrowdsale is Ownable, Crowdsale, Whitelist, MintableToken {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    // ===== Cap & Goal Management =====\n', '    uint256 public constant presaleCap = 10000 * (10 ** uint256(decimals));\n', '    uint256 public constant mainsaleCap = 175375 * (10 ** uint256(decimals));\n', '    uint256 public constant mainsaleGoal = 11700 * (10 ** uint256(decimals));\n', '\n', '    // ============= Token Distribution ================\n', '    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n', '    uint256 public constant totalTokensForSale = 195500000 * (10 ** uint256(decimals));\n', '    uint256 public constant tokensForFuture = 760000000 * (10 ** uint256(decimals));\n', '    uint256 public constant tokensForswap = 4500000 * (10 ** uint256(decimals));\n', '    uint256 public constant tokensForInvester1 = 16000000 * (10 ** uint256(decimals));\n', '    uint256 public constant tokensForInvester2 = 16000000 * (10 ** uint256(decimals));\n', '    uint256 public constant tokensForInvester3 = 8000000 * (10 ** uint256(decimals));\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate;\n', '    mapping (address => uint256) public deposited;\n', '    address[] investors;\n', '\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '    event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken);\n', '    event Finalized();\n', '\n', '    constructor(\n', '      address _owner,\n', '      address _wallet\n', '      ) public Crowdsale(_wallet) {\n', '\n', '        require(_wallet != address(0));\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', '        mintingFinished = false;\n', '        totalSupply = INITIAL_SUPPLY;\n', '        rate = 1140;\n', '        bool resultMintForOwner = mintForOwner(owner);\n', '        require(resultMintForOwner);\n', '        balances[0x9AF6043d1B74a7c9EC7e3805Bc10e41230537A8B] = balances[0x9AF6043d1B74a7c9EC7e3805Bc10e41230537A8B].add(tokensForswap);\n', '        mainsaleWeiRaised.add(tokensForswap);\n', '        balances[investor1] = balances[investor1].add(tokensForInvester1);\n', '        balances[investor2] = balances[investor1].add(tokensForInvester2);\n', '        balances[investor3] = balances[investor1].add(tokensForInvester3);\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address _investor) public  payable returns (uint256){\n', '        require(_investor != address(0));\n', '        require(validPurchase());\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        if (tokens == 0) {revert();}\n', '\n', '        // update state\n', '        if (isPresalePeriod())  {\n', '          PresaleWeiRaised = PresaleWeiRaised.add(weiAmount);\n', '        } else if (isMainsalePeriod()) {\n', '          mainsaleWeiRaised = mainsaleWeiRaised.add(weiAmount);\n', '        }\n', '        tokenAllocated = tokenAllocated.add(tokens);\n', '        if (verifiedAddresses[_investor]) {\n', '           mint(_investor, tokens, owner);\n', '        }else {\n', '          investors.push(_investor);\n', '          deposited[_investor] = deposited[_investor].add(tokens);\n', '        }\n', '        emit TokenPurchase(_investor, weiAmount, tokens);\n', '        wallet.transfer(weiAmount);\n', '        return tokens;\n', '    }\n', '\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns(uint256) {\n', '      return _weiAmount.mul(rate);\n', '    }\n', '\n', '    // ====================== Price Management =================\n', '    function setPrice() public onlyOwner {\n', '      if (isPresalePeriod()) {\n', '        rate = 1140;\n', '      } else if (isMainsalePeriod()) {\n', '        rate = 1597;\n', '      }\n', '    }\n', '\n', '    function isPresalePeriod() public view returns (bool) {\n', '      if (now >= presaleStartTime && now < presaleEndTime) {\n', '        return true;\n', '      }\n', '      return false;\n', '    }\n', '\n', '    function isMainsalePeriod() public view returns (bool) {\n', '      if (now >= mainsaleStartTime && now < mainsaleEndTime) {\n', '        return true;\n', '      }\n', '      return false;\n', '    }\n', '\n', '    function mintForOwner(address _wallet) internal returns (bool result) {\n', '        result = false;\n', '        require(_wallet != address(0));\n', '        balances[_wallet] = balances[_wallet].add(INITIAL_SUPPLY);\n', '        result = true;\n', '    }\n', '\n', '    function getDeposited(address _investor) public view returns (uint256){\n', '        return deposited[_investor];\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '      bool withinCap =  true;\n', '      if (isPresalePeriod()) {\n', '        withinCap = PresaleWeiRaised.add(msg.value) <= presaleCap;\n', '      } else if (isMainsalePeriod()) {\n', '        withinCap = mainsaleWeiRaised.add(msg.value) <= mainsaleCap;\n', '      }\n', '      bool withinPeriod = isPresalePeriod() || isMainsalePeriod();\n', '      bool minimumContribution = msg.value >= 0.5 ether;\n', '      return withinPeriod && minimumContribution && withinCap;\n', '    }\n', '\n', '    function readyForFinish() internal view returns(bool) {\n', '      bool endPeriod = now < mainsaleEndTime;\n', '      bool reachCap = tokenAllocated <= mainsaleCap;\n', '      return endPeriod || reachCap;\n', '    }\n', '\n', '\n', '    // Finish: Mint Extra Tokens as needed before finalizing the Crowdsale.\n', '    function finalize(\n', '      address _tokensForFuture\n', '      ) public onlyOwner returns (bool result) {\n', '        require(_tokensForFuture != address(0));\n', '        require(readyForFinish());\n', '        result = false;\n', '        mint(_tokensForFuture, tokensForFuture, owner);\n', '        address contractBalance = this;\n', '        wallet.transfer(contractBalance.balance);\n', '        finishMinting();\n', '        emit Finalized();\n', '        result = true;\n', '    }\n', '\n', '    function transferToInvester() public onlyOwner returns (bool result) {\n', '        require( now >= 1548363600);\n', '        for (uint cnt = 0; cnt < investors.length; cnt++) {\n', '            mint(investors[cnt], deposited[investors[cnt]], owner);\n', '        }\n', '        result = true;\n', '    }\n', '\n', '}']
