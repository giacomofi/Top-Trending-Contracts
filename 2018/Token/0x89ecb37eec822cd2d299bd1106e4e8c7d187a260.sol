['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Boosto Pool\n', ' */\n', 'contract BoostoPool{\n', '    using SafeMath for uint256;\n', '\n', '    // total number of investors\n', '    uint256 public totalInvestors;\n', '\n', '    address[] investorsList;\n', '\n', '    mapping(address => bool) public investors;\n', '    mapping(address => bool) public winners;\n', '\n', '    address private BSTContract = 0xDf0041891BdA1f911C4243f328F7Cf61b37F965b;\n', '    address private fundsWallet;\n', '    address private operatorWallet;\n', '\n', '    uint256 public unit;\n', '    uint256 public size;\n', '\n', '    uint256 public BSTAmount;\n', '\n', '    uint256 public winnerCount;\n', '    uint256 public paidWinners = 0;\n', '\n', '    uint256 public bonus;\n', '    bool public bonusInETH;\n', '\n', '    uint256 public startDate;\n', '    uint256 public duration; // in seconds\n', '\n', '    /**\n', '     * @dev Creates a new pool\n', '     */\n', '    constructor(\n', '        uint256 _startDate,\n', '        uint256 _duration,\n', '        uint256 _winnerCount,\n', '        uint256 _bonus,\n', '        bool _bonusInETH,\n', '        uint256 _unit,\n', '        uint256 _BSTAmount,\n', '        uint256 _size,\n', '        address _fundsWallet,\n', '        address _operatorWallet\n', '        ) public{\n', '        \n', '        startDate = _startDate;\n', '        duration = _duration;\n', '        \n', '        winnerCount = _winnerCount;\n', '        bonus = _bonus;\n', '        bonusInETH = _bonusInETH;\n', '        unit = _unit;\n', '        BSTAmount = _BSTAmount;\n', '        size = _size;\n', '\n', '        fundsWallet = _fundsWallet;\n', '        operatorWallet = _operatorWallet;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if the pool is still open or not\n', '     */\n', '    modifier isPoolOpen() {\n', '        require(totalInvestors < size && now < (startDate + duration) && now >= startDate);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if the pool is closed\n', '     */\n', '    modifier isPoolClosed() {\n', '        require(totalInvestors >= size || now >= (startDate + duration));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if the pool is finished successfully\n', '     */\n', '    modifier isPoolFinished() {\n', '        require(totalInvestors >= size);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier for check msg.value\n', '     */\n', '    modifier checkInvestAmount(){\n', '        require(msg.value == unit);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev check if the sender is already invested\n', '     */\n', '    modifier notInvestedYet(){\n', '        require(!investors[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev check if the sender is admin\n', '     */\n', '    modifier isAdmin(){\n', '        require(msg.sender == operatorWallet);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function\n', '     */\n', '    function() checkInvestAmount notInvestedYet isPoolOpen payable public{\n', '        fundsWallet.transfer(msg.value);\n', '\n', '        StandardToken bst = StandardToken(BSTContract);\n', '        bst.transfer(msg.sender, BSTAmount);\n', '\n', '        investorsList[investorsList.length++] = msg.sender;\n', '        investors[msg.sender] = true;\n', '\n', '        totalInvestors += 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the admin to tranfer ETH to SC \n', '     * when bounus is in ETH\n', '     */\n', '    function adminDropETH() isAdmin payable public{\n', '        assert(bonusInETH);\n', '        assert(msg.value == winnerCount.mul(bonus));\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the admin to withdraw remaining token and ETH when\n', '     * the pool is closed and not reached the goal(no rewards)\n', '     */\n', '    function adminWithdraw() isAdmin isPoolClosed public{\n', '        assert(totalInvestors <= size);\n', '\n', '        StandardToken bst = StandardToken(BSTContract);\n', '        uint256 bstBalance = bst.balanceOf(this);\n', '\n', '        if(bstBalance > 0){\n', '            bst.transfer(msg.sender, bstBalance);\n', '        }\n', '\n', '        uint256 ethBalance = address(this).balance;\n', '        if(ethBalance > 0){\n', '            msg.sender.transfer(ethBalance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Selects a random winner and transfer the funds.\n', '     * This function could fail when the selected wallet is a duplicate winner\n', '     * and need to try again to select an another random investor.\n', '     * When we have N winners, the admin need to call this function N times. This is \n', '     * not an efficient method but since we have just a few winners it will work fine.\n', '     */\n', '    function adminAddWinner() isPoolFinished isAdmin public{\n', '        assert(paidWinners < winnerCount);\n', '        uint256 winnerIndex = random();\n', '        assert(!winners[investorsList[winnerIndex]]);\n', '\n', '        winners[investorsList[winnerIndex]] = true;\n', '        paidWinners += 1;\n', '\n', '        if(bonusInETH){\n', '            investorsList[winnerIndex].transfer(bonus);\n', '        }else{\n', '            StandardToken(BSTContract).transfer(investorsList[winnerIndex], bonus);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Selects a random winner among all investors\n', '     */\n', '    function random() public view returns (uint256) {\n', '        return uint256(keccak256(block.timestamp, block.difficulty))%size;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the details of an investor by its index.\n', '     * UI can use this function to show the info.\n', '     * @param index Index of the investor in investorsList\n', '     */\n', '    function getWalletInfoByIndex(uint256 index) \n', '            public constant returns (address _addr, bool _isWinner){\n', '        _addr = investorsList[index];\n', '        _isWinner = winners[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the details of an investor\n', '     * UI can use this function to show the info.\n', '     * @param addr Address of the investor\n', '     */\n', '    function getWalletInfo(address addr) \n', '            public constant returns (bool _isWinner){\n', '        _isWinner = winners[addr];\n', '    }\n', '\n', '    /**\n', '     * @dev checks if there is enough funds in the contract or not\n', '     * @param status Boolean to show if there is enough funds or not\n', '     */\n', '    function isHealthy() \n', '            public constant returns (bool status){\n', '\n', '        // ETH balance is not enough\n', '        if(bonusInETH && address(this).balance < winnerCount.mul(bonus)){\n', '            return false;\n', '        }\n', '        \n', '        uint256 bstBalance = StandardToken(BSTContract).balanceOf(this);\n', '\n', '        uint256 enoughBalance = BSTAmount.mul(size - totalInvestors); \n', '        if(!bonusInETH){\n', '            enoughBalance = bstBalance.add(winnerCount.mul(bonus));\n', '        }\n', '        if(bstBalance < enoughBalance){\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BoostoPoolFactory {\n', '\n', '    event NewPool(address creator, address pool);\n', '\n', '    function createNew(\n', '        uint256 _startDate,\n', '        uint256 _duration,\n', '        uint256 _winnerCount,\n', '        uint256 _bonus,\n', '        bool _bonusInETH,\n', '        uint256 _unit,\n', '        uint256 _BSTAmount,\n', '        uint256 _size,\n', '        address _fundsWallet,\n', '        address _operatorWallet\n', '    ) public returns(address created){\n', '        address ret = new BoostoPool(\n', '            _startDate,\n', '            _duration,\n', '            _winnerCount,\n', '            _bonus,\n', '            _bonusInETH,\n', '            _unit,\n', '            _BSTAmount,\n', '            _size,\n', '            _fundsWallet,\n', '            _operatorWallet\n', '        );\n', '        emit NewPool(msg.sender, ret);\n', '    }\n', '}']
['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Boosto Pool\n', ' */\n', 'contract BoostoPool{\n', '    using SafeMath for uint256;\n', '\n', '    // total number of investors\n', '    uint256 public totalInvestors;\n', '\n', '    address[] investorsList;\n', '\n', '    mapping(address => bool) public investors;\n', '    mapping(address => bool) public winners;\n', '\n', '    address private BSTContract = 0xDf0041891BdA1f911C4243f328F7Cf61b37F965b;\n', '    address private fundsWallet;\n', '    address private operatorWallet;\n', '\n', '    uint256 public unit;\n', '    uint256 public size;\n', '\n', '    uint256 public BSTAmount;\n', '\n', '    uint256 public winnerCount;\n', '    uint256 public paidWinners = 0;\n', '\n', '    uint256 public bonus;\n', '    bool public bonusInETH;\n', '\n', '    uint256 public startDate;\n', '    uint256 public duration; // in seconds\n', '\n', '    /**\n', '     * @dev Creates a new pool\n', '     */\n', '    constructor(\n', '        uint256 _startDate,\n', '        uint256 _duration,\n', '        uint256 _winnerCount,\n', '        uint256 _bonus,\n', '        bool _bonusInETH,\n', '        uint256 _unit,\n', '        uint256 _BSTAmount,\n', '        uint256 _size,\n', '        address _fundsWallet,\n', '        address _operatorWallet\n', '        ) public{\n', '        \n', '        startDate = _startDate;\n', '        duration = _duration;\n', '        \n', '        winnerCount = _winnerCount;\n', '        bonus = _bonus;\n', '        bonusInETH = _bonusInETH;\n', '        unit = _unit;\n', '        BSTAmount = _BSTAmount;\n', '        size = _size;\n', '\n', '        fundsWallet = _fundsWallet;\n', '        operatorWallet = _operatorWallet;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if the pool is still open or not\n', '     */\n', '    modifier isPoolOpen() {\n', '        require(totalInvestors < size && now < (startDate + duration) && now >= startDate);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if the pool is closed\n', '     */\n', '    modifier isPoolClosed() {\n', '        require(totalInvestors >= size || now >= (startDate + duration));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if the pool is finished successfully\n', '     */\n', '    modifier isPoolFinished() {\n', '        require(totalInvestors >= size);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier for check msg.value\n', '     */\n', '    modifier checkInvestAmount(){\n', '        require(msg.value == unit);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev check if the sender is already invested\n', '     */\n', '    modifier notInvestedYet(){\n', '        require(!investors[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev check if the sender is admin\n', '     */\n', '    modifier isAdmin(){\n', '        require(msg.sender == operatorWallet);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function\n', '     */\n', '    function() checkInvestAmount notInvestedYet isPoolOpen payable public{\n', '        fundsWallet.transfer(msg.value);\n', '\n', '        StandardToken bst = StandardToken(BSTContract);\n', '        bst.transfer(msg.sender, BSTAmount);\n', '\n', '        investorsList[investorsList.length++] = msg.sender;\n', '        investors[msg.sender] = true;\n', '\n', '        totalInvestors += 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the admin to tranfer ETH to SC \n', '     * when bounus is in ETH\n', '     */\n', '    function adminDropETH() isAdmin payable public{\n', '        assert(bonusInETH);\n', '        assert(msg.value == winnerCount.mul(bonus));\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the admin to withdraw remaining token and ETH when\n', '     * the pool is closed and not reached the goal(no rewards)\n', '     */\n', '    function adminWithdraw() isAdmin isPoolClosed public{\n', '        assert(totalInvestors <= size);\n', '\n', '        StandardToken bst = StandardToken(BSTContract);\n', '        uint256 bstBalance = bst.balanceOf(this);\n', '\n', '        if(bstBalance > 0){\n', '            bst.transfer(msg.sender, bstBalance);\n', '        }\n', '\n', '        uint256 ethBalance = address(this).balance;\n', '        if(ethBalance > 0){\n', '            msg.sender.transfer(ethBalance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Selects a random winner and transfer the funds.\n', '     * This function could fail when the selected wallet is a duplicate winner\n', '     * and need to try again to select an another random investor.\n', '     * When we have N winners, the admin need to call this function N times. This is \n', '     * not an efficient method but since we have just a few winners it will work fine.\n', '     */\n', '    function adminAddWinner() isPoolFinished isAdmin public{\n', '        assert(paidWinners < winnerCount);\n', '        uint256 winnerIndex = random();\n', '        assert(!winners[investorsList[winnerIndex]]);\n', '\n', '        winners[investorsList[winnerIndex]] = true;\n', '        paidWinners += 1;\n', '\n', '        if(bonusInETH){\n', '            investorsList[winnerIndex].transfer(bonus);\n', '        }else{\n', '            StandardToken(BSTContract).transfer(investorsList[winnerIndex], bonus);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Selects a random winner among all investors\n', '     */\n', '    function random() public view returns (uint256) {\n', '        return uint256(keccak256(block.timestamp, block.difficulty))%size;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the details of an investor by its index.\n', '     * UI can use this function to show the info.\n', '     * @param index Index of the investor in investorsList\n', '     */\n', '    function getWalletInfoByIndex(uint256 index) \n', '            public constant returns (address _addr, bool _isWinner){\n', '        _addr = investorsList[index];\n', '        _isWinner = winners[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the details of an investor\n', '     * UI can use this function to show the info.\n', '     * @param addr Address of the investor\n', '     */\n', '    function getWalletInfo(address addr) \n', '            public constant returns (bool _isWinner){\n', '        _isWinner = winners[addr];\n', '    }\n', '\n', '    /**\n', '     * @dev checks if there is enough funds in the contract or not\n', '     * @param status Boolean to show if there is enough funds or not\n', '     */\n', '    function isHealthy() \n', '            public constant returns (bool status){\n', '\n', '        // ETH balance is not enough\n', '        if(bonusInETH && address(this).balance < winnerCount.mul(bonus)){\n', '            return false;\n', '        }\n', '        \n', '        uint256 bstBalance = StandardToken(BSTContract).balanceOf(this);\n', '\n', '        uint256 enoughBalance = BSTAmount.mul(size - totalInvestors); \n', '        if(!bonusInETH){\n', '            enoughBalance = bstBalance.add(winnerCount.mul(bonus));\n', '        }\n', '        if(bstBalance < enoughBalance){\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BoostoPoolFactory {\n', '\n', '    event NewPool(address creator, address pool);\n', '\n', '    function createNew(\n', '        uint256 _startDate,\n', '        uint256 _duration,\n', '        uint256 _winnerCount,\n', '        uint256 _bonus,\n', '        bool _bonusInETH,\n', '        uint256 _unit,\n', '        uint256 _BSTAmount,\n', '        uint256 _size,\n', '        address _fundsWallet,\n', '        address _operatorWallet\n', '    ) public returns(address created){\n', '        address ret = new BoostoPool(\n', '            _startDate,\n', '            _duration,\n', '            _winnerCount,\n', '            _bonus,\n', '            _bonusInETH,\n', '            _unit,\n', '            _BSTAmount,\n', '            _size,\n', '            _fundsWallet,\n', '            _operatorWallet\n', '        );\n', '        emit NewPool(msg.sender, ret);\n', '    }\n', '}']
