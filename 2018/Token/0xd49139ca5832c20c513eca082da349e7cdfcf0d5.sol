['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * 代幣智能合約\n', ' *\n', ' * Symbol       : PDI5\n', ' * Name         : Wind Green Gain Token 5\n', ' * Total supply : 2,160,000,000.000000000000000000\n', ' * Decimals     : 18\n', ' */\n', '\n', '\n', '/**\n', ' * Safe maths\n', ' */\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * ERC 代幣標準 #20 Interface: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '/**\n', ' * 一個函式即可取得核准並執行函式 (Borrowed from MiniMeToken)\n', ' */\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '/**\n', ' * 持有權\n', ' */\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * ERC20 相容代幣，定義(寫死)了全名、符號(縮寫)、精準度(小數點後幾位數)及固定(未來不可增額)的發行量。\n', ' */\n', 'contract WindGreenGainToken5 is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    /**\n', '     * Constructor\n', '     */\n', '    constructor() public {\n', '        symbol = "PDI5";\n', '        name = "Wind Green Gain Token 5";\n', '        decimals = 18;\n', '        _totalSupply = 2160000000 * 10**uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '\n', '    /**\n', '     * 發行的供應量。\n', '     */\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '\n', '    /**\n', '     * 從 `tokeOwner` 錢包地址取得代幣餘額。\n', '     */\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    /**\n', '     * 從代幣持有者的錢包轉 `tokens` 到 `to` 錢包地址。\n', '     *  - 代幣持有者的錢包裡必須要有足夠的餘額\n', '     *  - 交易額為 0 是可被允許的\n', '     */\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(balances[msg.sender] >= (tokens * 10**uint(18)));            // 餘額夠不夠\n', '        require(balances[to] + (tokens * 10**uint(18)) >= balances[to]);   // 防止異味\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub((tokens * 10**uint(18)));\n', '        balances[to] = balances[to].add((tokens * 10**uint(18)));\n', '\n', '        emit Transfer(msg.sender, to, (tokens * 10**uint(18)));\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * 代幣持有者用來核准 `spender` 從代幣持有者的錢包地址以 transferFrom(...) 函式使用 `tokens`。\n', '     *\n', '     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md 中建議了不用檢查\n', '     * 核准雙消費攻擊，因為這應該在 UI 中實作。\n', '     */\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * 從 `from` 錢包地址轉 `tokens` 到 `to` 錢包地址。\n', '     *\n', '     * 呼叫此函式者必須有足夠的代幣從 `from` 錢包地址使用代幣。\n', '     */\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * 傳回代幣持有者核准 `spender` 錢包地址 可交易的代幣數量。\n', '     */\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    /**\n', '     * 代幣持有者可核准 `spender` 從代幣持有者的錢包地址以 transferFrom(...) 函式交易 `token`，然\n', '     * 後執行 `spender` 的 `receiveApproval(...)` 合約函式。\n', '     */\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * 防止漏洞(不接受 ETH)。\n', '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    /**\n', '     * 持有者可轉出任何意外發送的 ERC20 代幣。\n', '     */\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * 代幣智能合約\n', ' *\n', ' * Symbol       : PDI5\n', ' * Name         : Wind Green Gain Token 5\n', ' * Total supply : 2,160,000,000.000000000000000000\n', ' * Decimals     : 18\n', ' */\n', '\n', '\n', '/**\n', ' * Safe maths\n', ' */\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * ERC 代幣標準 #20 Interface: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '/**\n', ' * 一個函式即可取得核准並執行函式 (Borrowed from MiniMeToken)\n', ' */\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '/**\n', ' * 持有權\n', ' */\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * ERC20 相容代幣，定義(寫死)了全名、符號(縮寫)、精準度(小數點後幾位數)及固定(未來不可增額)的發行量。\n', ' */\n', 'contract WindGreenGainToken5 is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    /**\n', '     * Constructor\n', '     */\n', '    constructor() public {\n', '        symbol = "PDI5";\n', '        name = "Wind Green Gain Token 5";\n', '        decimals = 18;\n', '        _totalSupply = 2160000000 * 10**uint(decimals);\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '\n', '    /**\n', '     * 發行的供應量。\n', '     */\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '\n', '    /**\n', '     * 從 `tokeOwner` 錢包地址取得代幣餘額。\n', '     */\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    /**\n', '     * 從代幣持有者的錢包轉 `tokens` 到 `to` 錢包地址。\n', '     *  - 代幣持有者的錢包裡必須要有足夠的餘額\n', '     *  - 交易額為 0 是可被允許的\n', '     */\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(balances[msg.sender] >= (tokens * 10**uint(18)));            // 餘額夠不夠\n', '        require(balances[to] + (tokens * 10**uint(18)) >= balances[to]);   // 防止異味\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub((tokens * 10**uint(18)));\n', '        balances[to] = balances[to].add((tokens * 10**uint(18)));\n', '\n', '        emit Transfer(msg.sender, to, (tokens * 10**uint(18)));\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * 代幣持有者用來核准 `spender` 從代幣持有者的錢包地址以 transferFrom(...) 函式使用 `tokens`。\n', '     *\n', '     * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md 中建議了不用檢查\n', '     * 核准雙消費攻擊，因為這應該在 UI 中實作。\n', '     */\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * 從 `from` 錢包地址轉 `tokens` 到 `to` 錢包地址。\n', '     *\n', '     * 呼叫此函式者必須有足夠的代幣從 `from` 錢包地址使用代幣。\n', '     */\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * 傳回代幣持有者核准 `spender` 錢包地址 可交易的代幣數量。\n', '     */\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    /**\n', '     * 代幣持有者可核准 `spender` 從代幣持有者的錢包地址以 transferFrom(...) 函式交易 `token`，然\n', '     * 後執行 `spender` 的 `receiveApproval(...)` 合約函式。\n', '     */\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * 防止漏洞(不接受 ETH)。\n', '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    /**\n', '     * 持有者可轉出任何意外發送的 ERC20 代幣。\n', '     */\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
