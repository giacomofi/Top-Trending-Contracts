['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// @Name SafeMath\n', '// @Desc Math operations with safety checks that throw on error\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title ERC20Basic\n', '// @dev Simpler version of ERC20 interface\n', '// See https://github.com/ethereum/EIPs/issues/179\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title ERC20 interface\n', '// @dev See https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool); \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Basic token\n', '// @dev Basic version of StandardToken, with no allowances.\n', '// ----------------------------------------------------------------------------\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '    \n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Ownable\n', '// @dev There are 5 role groups for FunkeyCoin [FKC].\n', '// If an exchange is hacked, all stolen FKC in the hacker’s wallet must be incinerated and given back to its original investors.\n', '// However, incineration and reissuance of tokens for specific addresses are sensitive matters. \n', '// Therefore, it requires 4 signatures: 3 C-Level personnels and Development Team Leader. \n', '// Incineration and Reissuing tokens for specific addresses can only be used in case of hacking and cannot be used otherwise. \n', '// ----------------------------------------------------------------------------\n', 'contract Ownable {\n', '    // Development Team Leader\n', '    address public owner;\n', '    // As the Funkeypay’s emergency standby personnel,\n', '    // the person immediately blocks the transaction function of all tokens when an incident occurs.\n', '    address public operator;\n', '\n', '    // Has the authority to incinerate stolen tokens,\n', '    // reissue tokens due to incineration, and reappoint C-Level members.\n', '    address public CEO;                 \n', '    address public CTO;\n', '    address public CMO;\n', '\n', '    bool public CEO_Signature;\n', '    bool public CTO_Signature;\n', '    bool public CMO_Signature;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\n', '    event CEOTransferred(address indexed previousCEO, address indexed newCEO);\n', '    event CTOTransferred(address indexed previousCTO, address indexed newCTO);\n', '    event CMOTransferred(address indexed previousCMO, address indexed newCMO);\n', '\n', '    constructor() public {\n', '        owner    = msg.sender;\n', '        operator = 0xFd48048f8c7B900b5E5216Dc9d7bCd147c2E2efb;\n', '\n', '        CEO = 0xAC9C29a58C54921e822c972ACb5EBA955B59C744;\n', '        CTO = 0x60552ccF90872ad2d332DC26a5931Bc6BFb3142c;\n', '        CMO = 0xff76E74fE7AC6Dcd9C151D57A71A99D89910a098;\n', '\n', '        ClearCLevelSignature();\n', '    }\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '    modifier onlyOwnerOrOperator() { require(msg.sender == owner || msg.sender == operator); _; }\n', '    modifier onlyCEO() { require(msg.sender == CEO); _; }\n', '    modifier onlyCTO() { require(msg.sender == CTO); _; }\n', '    modifier onlyCMO() { require(msg.sender == CMO); _; }\n', '    modifier AllCLevelSignature() { require(msg.sender == owner && CEO_Signature && CTO_Signature && CMO_Signature); _; }\n', '\n', '    function CEOSignature() external onlyCEO { CEO_Signature = true; }\n', '    function CTOSignature() external onlyCTO { CTO_Signature = true; }\n', '    function CMOSignature() external onlyCMO { CMO_Signature = true; }\n', '\n', '    function transferOwnership(address _newOwner) external AllCLevelSignature {\n', '        require(_newOwner != address(0));\n', '        ClearCLevelSignature();\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '  \n', '    function transferOperator(address _newOperator) external onlyOwner {\n', '        require(_newOperator != address(0));\n', '        emit OperatorTransferred(operator, _newOperator);\n', '        operator = _newOperator;\n', '    }\n', '\n', '    function transferCEO(address _newCEO) external AllCLevelSignature {\n', '        require(_newCEO != address(0));\n', '        ClearCLevelSignature();\n', '        emit CEOTransferred(CEO, _newCEO);\n', '        CEO = _newCEO;\n', '    }\n', '\n', '    function transferCTO(address _newCTO) external AllCLevelSignature {\n', '        require(_newCTO != address(0));\n', '        ClearCLevelSignature();\n', '        emit CTOTransferred(CTO, _newCTO);\n', '        CTO = _newCTO;\n', '    }\n', '\n', '    function transferCMO(address _newCMO) external AllCLevelSignature {\n', '        require(_newCMO != address(0));\n', '        ClearCLevelSignature();\n', '        emit CMOTransferred(CMO, _newCMO);\n', '        CMO = _newCMO;\n', '    }\n', '\n', '    function SignatureInvalidity() external onlyOwnerOrOperator {\n', '        ClearCLevelSignature();\n', '    }\n', '\n', '    function ClearCLevelSignature() internal {\n', '        CEO_Signature = false;\n', '        CTO_Signature = false;\n', '        CMO_Signature = false;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title BlackList\n', '// @dev Base contract which allows children to implement an emergency stop mechanism.\n', '// ----------------------------------------------------------------------------\n', 'contract BlackList is Ownable {\n', '\n', '    event Lock(address indexed LockedAddress);\n', '    event Unlock(address indexed UnLockedAddress);\n', '\n', '    mapping( address => bool ) public blackList;\n', '\n', '    modifier CheckBlackList { require(blackList[msg.sender] != true); _; }\n', '\n', '    function SetLockAddress(address _lockAddress) external onlyOwnerOrOperator returns (bool) {\n', '        require(_lockAddress != address(0));\n', '        require(_lockAddress != owner);\n', '        require(blackList[_lockAddress] != true);\n', '        \n', '        blackList[_lockAddress] = true;\n', '        \n', '        emit Lock(_lockAddress);\n', '\n', '        return true;\n', '    }\n', '\n', '    function UnLockAddress(address _unlockAddress) external onlyOwner returns (bool) {\n', '        require(blackList[_unlockAddress] != false);\n', '        \n', '        blackList[_unlockAddress] = false;\n', '        \n', '        emit Unlock(_unlockAddress);\n', '\n', '        return true;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Pausable\n', '// @dev Base contract which allows children to implement an emergency stop mechanism.\n', '// ----------------------------------------------------------------------------\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() { require(!paused); _; }\n', '    modifier whenPaused() { require(paused); _; }\n', '\n', '    function pause() onlyOwnerOrOperator whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Standard ERC20 token\n', '// @dev Implementation of the basic standard token.\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract StandardToken is ERC20, BasicToken {\n', '  \n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    \n', '        emit Transfer(_from, _to, _value);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '    \n', '        emit Approval(msg.sender, _spender, _value);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '    \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '    \n', '        if (_subtractedValue > oldValue) {\n', '        allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '    \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title MultiTransfer Token\n', '// @dev Only Admin\n', '// ----------------------------------------------------------------------------\n', 'contract MultiTransferToken is StandardToken, Ownable {\n', '\n', '    function MultiTransfer(address[] _to, uint256[] _amount) onlyOwner public returns (bool) {\n', '        require(_to.length == _amount.length);\n', '\n', '        uint256 ui;\n', '        uint256 amountSum = 0;\n', '    \n', '        for (ui = 0; ui < _to.length; ui++) {\n', '            require(_to[ui] != address(0));\n', '\n', '            amountSum = amountSum.add(_amount[ui]);\n', '        }\n', '\n', '        require(amountSum <= balances[msg.sender]);\n', '\n', '        for (ui = 0; ui < _to.length; ui++) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount[ui]);\n', '            balances[_to[ui]] = balances[_to[ui]].add(_amount[ui]);\n', '        \n', '            emit Transfer(msg.sender, _to[ui], _amount[ui]);\n', '        }\n', '    \n', '        return true;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Burnable Token\n', '// @dev Token that can be irreversibly burned (destroyed).\n', '// ----------------------------------------------------------------------------\n', 'contract BurnableToken is StandardToken, Ownable {\n', '\n', '    event BurnAdminAmount(address indexed burner, uint256 value);\n', '    event BurnHackerAmount(address indexed hacker, uint256 hackingamount, string reason);\n', '\n', '    function burnAdminAmount(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '    \n', '        emit BurnAdminAmount(msg.sender, _value);\n', '        emit Transfer(msg.sender, address(0), _value);\n', '    }\n', '    \n', '    // burnHackingAmount() Function only exists for the incineration of stolen FKC.\n', '    // When a certain situation occurs, the function can be called after reviewing whether the wallet is the hacker’s wallet\n', '    // and signed by 3 C-level members & Development Team Leader.\n', '    function burnHackingAmount(address _hackerAddress, string _reason) AllCLevelSignature public {\n', '        ClearCLevelSignature();\n', '\n', '        uint256 hackerAmount =  balances[_hackerAddress];\n', '        \n', '        require(hackerAmount > 0);\n', '\n', '        balances[_hackerAddress] = balances[_hackerAddress].sub(hackerAmount);\n', '        totalSupply_ = totalSupply_.sub(hackerAmount);\n', '    \n', '        emit BurnHackerAmount(_hackerAddress, hackerAmount, _reason);\n', '        emit Transfer(_hackerAddress, address(0), hackerAmount);\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Mintable token\n', '// @dev Simple ERC20 Token example, with mintable token creation\n', '// Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', '// ----------------------------------------------------------------------------\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    event MintRestarted(string reason);\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() { require(!mintingFinished); _; }\n', '    modifier cannotMint() { require(mintingFinished); _; }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '    \n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    // restartMinting() Function isn’t for just simple reissuing.\n', '    // When the hacking occurs, all amount of FKC in the hacker&#39;s wallet\n', '    // is incinerated and corresponding quantity of FKC will be reissued to the victims’ wallets.\n', '    function restartMinting(string _reason) AllCLevelSignature cannotMint public returns (bool) {\n', '        ClearCLevelSignature();\n', '\n', '        mintingFinished = false;\n', '        emit MintRestarted(_reason);\n', '        return true;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Pausable token\n', '// @dev StandardToken modified with pausable transfers.\n', '// ----------------------------------------------------------------------------\n', 'contract PausableToken is StandardToken, Pausable, BlackList {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused CheckBlackList returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused CheckBlackList returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Project FunkeyCoin (FKC)\n', '// @Creator Gi Hyeok - Ryu\n', '// @Source Code Verification (CEO : JK JUNG / CTO : SeungWoo KANG)\n', '// ----------------------------------------------------------------------------\n', 'contract FunkeyCoin is PausableToken, MintableToken, BurnableToken, MultiTransferToken {\n', '    string public name = "FunkeyCoin";\n', '    string public symbol = "FKC";\n', '    uint256 public decimals = 18;\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// @Name SafeMath\n', '// @Desc Math operations with safety checks that throw on error\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title ERC20Basic\n', '// @dev Simpler version of ERC20 interface\n', '// See https://github.com/ethereum/EIPs/issues/179\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title ERC20 interface\n', '// @dev See https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool); \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Basic token\n', '// @dev Basic version of StandardToken, with no allowances.\n', '// ----------------------------------------------------------------------------\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '    \n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Ownable\n', '// @dev There are 5 role groups for FunkeyCoin [FKC].\n', '// If an exchange is hacked, all stolen FKC in the hacker’s wallet must be incinerated and given back to its original investors.\n', '// However, incineration and reissuance of tokens for specific addresses are sensitive matters. \n', '// Therefore, it requires 4 signatures: 3 C-Level personnels and Development Team Leader. \n', '// Incineration and Reissuing tokens for specific addresses can only be used in case of hacking and cannot be used otherwise. \n', '// ----------------------------------------------------------------------------\n', 'contract Ownable {\n', '    // Development Team Leader\n', '    address public owner;\n', '    // As the Funkeypay’s emergency standby personnel,\n', '    // the person immediately blocks the transaction function of all tokens when an incident occurs.\n', '    address public operator;\n', '\n', '    // Has the authority to incinerate stolen tokens,\n', '    // reissue tokens due to incineration, and reappoint C-Level members.\n', '    address public CEO;                 \n', '    address public CTO;\n', '    address public CMO;\n', '\n', '    bool public CEO_Signature;\n', '    bool public CTO_Signature;\n', '    bool public CMO_Signature;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\n', '    event CEOTransferred(address indexed previousCEO, address indexed newCEO);\n', '    event CTOTransferred(address indexed previousCTO, address indexed newCTO);\n', '    event CMOTransferred(address indexed previousCMO, address indexed newCMO);\n', '\n', '    constructor() public {\n', '        owner    = msg.sender;\n', '        operator = 0xFd48048f8c7B900b5E5216Dc9d7bCd147c2E2efb;\n', '\n', '        CEO = 0xAC9C29a58C54921e822c972ACb5EBA955B59C744;\n', '        CTO = 0x60552ccF90872ad2d332DC26a5931Bc6BFb3142c;\n', '        CMO = 0xff76E74fE7AC6Dcd9C151D57A71A99D89910a098;\n', '\n', '        ClearCLevelSignature();\n', '    }\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '    modifier onlyOwnerOrOperator() { require(msg.sender == owner || msg.sender == operator); _; }\n', '    modifier onlyCEO() { require(msg.sender == CEO); _; }\n', '    modifier onlyCTO() { require(msg.sender == CTO); _; }\n', '    modifier onlyCMO() { require(msg.sender == CMO); _; }\n', '    modifier AllCLevelSignature() { require(msg.sender == owner && CEO_Signature && CTO_Signature && CMO_Signature); _; }\n', '\n', '    function CEOSignature() external onlyCEO { CEO_Signature = true; }\n', '    function CTOSignature() external onlyCTO { CTO_Signature = true; }\n', '    function CMOSignature() external onlyCMO { CMO_Signature = true; }\n', '\n', '    function transferOwnership(address _newOwner) external AllCLevelSignature {\n', '        require(_newOwner != address(0));\n', '        ClearCLevelSignature();\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '  \n', '    function transferOperator(address _newOperator) external onlyOwner {\n', '        require(_newOperator != address(0));\n', '        emit OperatorTransferred(operator, _newOperator);\n', '        operator = _newOperator;\n', '    }\n', '\n', '    function transferCEO(address _newCEO) external AllCLevelSignature {\n', '        require(_newCEO != address(0));\n', '        ClearCLevelSignature();\n', '        emit CEOTransferred(CEO, _newCEO);\n', '        CEO = _newCEO;\n', '    }\n', '\n', '    function transferCTO(address _newCTO) external AllCLevelSignature {\n', '        require(_newCTO != address(0));\n', '        ClearCLevelSignature();\n', '        emit CTOTransferred(CTO, _newCTO);\n', '        CTO = _newCTO;\n', '    }\n', '\n', '    function transferCMO(address _newCMO) external AllCLevelSignature {\n', '        require(_newCMO != address(0));\n', '        ClearCLevelSignature();\n', '        emit CMOTransferred(CMO, _newCMO);\n', '        CMO = _newCMO;\n', '    }\n', '\n', '    function SignatureInvalidity() external onlyOwnerOrOperator {\n', '        ClearCLevelSignature();\n', '    }\n', '\n', '    function ClearCLevelSignature() internal {\n', '        CEO_Signature = false;\n', '        CTO_Signature = false;\n', '        CMO_Signature = false;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title BlackList\n', '// @dev Base contract which allows children to implement an emergency stop mechanism.\n', '// ----------------------------------------------------------------------------\n', 'contract BlackList is Ownable {\n', '\n', '    event Lock(address indexed LockedAddress);\n', '    event Unlock(address indexed UnLockedAddress);\n', '\n', '    mapping( address => bool ) public blackList;\n', '\n', '    modifier CheckBlackList { require(blackList[msg.sender] != true); _; }\n', '\n', '    function SetLockAddress(address _lockAddress) external onlyOwnerOrOperator returns (bool) {\n', '        require(_lockAddress != address(0));\n', '        require(_lockAddress != owner);\n', '        require(blackList[_lockAddress] != true);\n', '        \n', '        blackList[_lockAddress] = true;\n', '        \n', '        emit Lock(_lockAddress);\n', '\n', '        return true;\n', '    }\n', '\n', '    function UnLockAddress(address _unlockAddress) external onlyOwner returns (bool) {\n', '        require(blackList[_unlockAddress] != false);\n', '        \n', '        blackList[_unlockAddress] = false;\n', '        \n', '        emit Unlock(_unlockAddress);\n', '\n', '        return true;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Pausable\n', '// @dev Base contract which allows children to implement an emergency stop mechanism.\n', '// ----------------------------------------------------------------------------\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() { require(!paused); _; }\n', '    modifier whenPaused() { require(paused); _; }\n', '\n', '    function pause() onlyOwnerOrOperator whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Standard ERC20 token\n', '// @dev Implementation of the basic standard token.\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract StandardToken is ERC20, BasicToken {\n', '  \n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    \n', '        emit Transfer(_from, _to, _value);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '    \n', '        emit Approval(msg.sender, _spender, _value);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '    \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '    \n', '        if (_subtractedValue > oldValue) {\n', '        allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '    \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title MultiTransfer Token\n', '// @dev Only Admin\n', '// ----------------------------------------------------------------------------\n', 'contract MultiTransferToken is StandardToken, Ownable {\n', '\n', '    function MultiTransfer(address[] _to, uint256[] _amount) onlyOwner public returns (bool) {\n', '        require(_to.length == _amount.length);\n', '\n', '        uint256 ui;\n', '        uint256 amountSum = 0;\n', '    \n', '        for (ui = 0; ui < _to.length; ui++) {\n', '            require(_to[ui] != address(0));\n', '\n', '            amountSum = amountSum.add(_amount[ui]);\n', '        }\n', '\n', '        require(amountSum <= balances[msg.sender]);\n', '\n', '        for (ui = 0; ui < _to.length; ui++) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount[ui]);\n', '            balances[_to[ui]] = balances[_to[ui]].add(_amount[ui]);\n', '        \n', '            emit Transfer(msg.sender, _to[ui], _amount[ui]);\n', '        }\n', '    \n', '        return true;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Burnable Token\n', '// @dev Token that can be irreversibly burned (destroyed).\n', '// ----------------------------------------------------------------------------\n', 'contract BurnableToken is StandardToken, Ownable {\n', '\n', '    event BurnAdminAmount(address indexed burner, uint256 value);\n', '    event BurnHackerAmount(address indexed hacker, uint256 hackingamount, string reason);\n', '\n', '    function burnAdminAmount(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '    \n', '        emit BurnAdminAmount(msg.sender, _value);\n', '        emit Transfer(msg.sender, address(0), _value);\n', '    }\n', '    \n', '    // burnHackingAmount() Function only exists for the incineration of stolen FKC.\n', '    // When a certain situation occurs, the function can be called after reviewing whether the wallet is the hacker’s wallet\n', '    // and signed by 3 C-level members & Development Team Leader.\n', '    function burnHackingAmount(address _hackerAddress, string _reason) AllCLevelSignature public {\n', '        ClearCLevelSignature();\n', '\n', '        uint256 hackerAmount =  balances[_hackerAddress];\n', '        \n', '        require(hackerAmount > 0);\n', '\n', '        balances[_hackerAddress] = balances[_hackerAddress].sub(hackerAmount);\n', '        totalSupply_ = totalSupply_.sub(hackerAmount);\n', '    \n', '        emit BurnHackerAmount(_hackerAddress, hackerAmount, _reason);\n', '        emit Transfer(_hackerAddress, address(0), hackerAmount);\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Mintable token\n', '// @dev Simple ERC20 Token example, with mintable token creation\n', '// Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', '// ----------------------------------------------------------------------------\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    event MintRestarted(string reason);\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() { require(!mintingFinished); _; }\n', '    modifier cannotMint() { require(mintingFinished); _; }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '    \n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '    \n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    // restartMinting() Function isn’t for just simple reissuing.\n', "    // When the hacking occurs, all amount of FKC in the hacker's wallet\n", '    // is incinerated and corresponding quantity of FKC will be reissued to the victims’ wallets.\n', '    function restartMinting(string _reason) AllCLevelSignature cannotMint public returns (bool) {\n', '        ClearCLevelSignature();\n', '\n', '        mintingFinished = false;\n', '        emit MintRestarted(_reason);\n', '        return true;\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @title Pausable token\n', '// @dev StandardToken modified with pausable transfers.\n', '// ----------------------------------------------------------------------------\n', 'contract PausableToken is StandardToken, Pausable, BlackList {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused CheckBlackList returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused CheckBlackList returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '// ----------------------------------------------------------------------------\n', '// @Project FunkeyCoin (FKC)\n', '// @Creator Gi Hyeok - Ryu\n', '// @Source Code Verification (CEO : JK JUNG / CTO : SeungWoo KANG)\n', '// ----------------------------------------------------------------------------\n', 'contract FunkeyCoin is PausableToken, MintableToken, BurnableToken, MultiTransferToken {\n', '    string public name = "FunkeyCoin";\n', '    string public symbol = "FKC";\n', '    uint256 public decimals = 18;\n', '}']
