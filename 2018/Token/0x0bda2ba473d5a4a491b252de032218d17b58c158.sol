['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', '* @title CryptolottoToken\n', '* This smart contract is a part of Cryptolotto (cryptolotto.cc) product.\n', '*\n', '* Cryptolotto is a blockchain-based, Ethereum powered lottery which gives to users the most \n', '* transparent and honest chances of winning.\n', '*\n', '* The main idea of Cryptolotto is straightforward: people from all over the world during the \n', '* set period of time are contributing an equal amount of ETH to one wallet. When a timer ends \n', '* this smart-contract powered wallet automatically sends all received ETHs to a one randomly \n', '* chosen wallet-participant.\n', '*\n', '* Due to the fact that Cryptolotto is built on a blockchain technology, it eliminates any \n', '* potential for intervention by third parties and gives 100% guarantee of an honest game.\n', '* There are no backdoors and no human or computer soft can interfere the process of picking a winner.\n', '*\n', '* If during the game only one player joins it, then the player will receive all his ETH back.\n', '* If a player sends not the exact amount of ETH - he will receive all his ETH back.\n', '* Creators of the product can change the entrance price for the game. If the price is changed \n', '* then new rules are applied when a new game starts.\n', '*\n', '* The original idea of Cryptolotto belongs to t.me/crypto_god and t.me/crypto_creator - Founders.\n', '* Cryptolotto smart-contracts are the property of Founders and are protected by copyright,\n', '* trademark, patent, trade secret, other intellectual property, proprietary rights laws and other applicable laws.\n', '*\n', '* All information related to the product can be found only on: \n', '* - cryptolotto.cc\n', '* - github.com/cryptolotto\n', '* - instagram.com/cryptolotto\n', '* - facebook.com/cryptolotto\n', '*\n', '* Crytolotto was designed and developed by erde.group (t.me/erdegroup).\n', '**/\n', 'contract CryptolottoToken is StandardToken {\n', '    /**\n', '    * @dev Token name.\n', '    */\n', '    string public constant name = "Cryptolotto";\n', '    \n', '    /**\n', '    * @dev Token symbol.\n', '    */\n', '    string public constant symbol = "CRY";\n', '    \n', '    /**\n', '    * @dev Amount of decimals.\n', '    */\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '    * @dev Amount of tokens supply.\n', '    */\n', '    uint256 public constant INITIAL_SUPPLY = 100000 * (10 ** uint256(decimals));\n', ' \n', '    /**\n', '    * @dev Token holder struct.\n', '    */\n', '    struct TokenHolder {\n', '        uint balance;\n', '        uint balanceUpdateTime;\n', '        uint rewardWithdrawTime;\n', '    }\n', '\n', '    /**\n', '    * @dev Store token holder balances updates time.\n', '    */\n', '    mapping(address => TokenHolder) holders;\n', '\n', '    /**\n', '    * @dev Amount of not distributed wei on this dividends period.\n', '    */\n', '    uint256 public weiToDistribute;\n', '\n', '    /**\n', '    * @dev Amount of wei that will be distributed on this dividends period.\n', '    */\n', '    uint256 public totalDividends;\n', '\n', '    /**\n', '    * @dev Didents period.\n', '    */\n', '    uint256 public period = 2592000;\n', '\n', '    /**\n', '    * @dev Store last period start date in timestamp.\n', '    */\n', '    uint256 public lastPeriodStarDate;\n', '\n', '    /**\n', '    * @dev Checks tokens balance.\n', '    */\n', '    modifier tokenHolder() {\n', '        require(balanceOf(msg.sender) > 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function CryptolottoToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '        lastPeriodStarDate = now - period;\n', '    }\n', '\n', '    /**\n', '    * @dev Starts dividends period and allow withdraw dividends.\n', '    */\n', '    function startDividendsPeriod() public {\n', '        require(lastPeriodStarDate + period < now);\n', '        weiToDistribute += address(this).balance - weiToDistribute;\n', '        totalDividends = weiToDistribute;\n', '        lastPeriodStarDate += period;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer coins.\n', '    *\n', '    * @param receiver The address to transfer to.\n', '    * @param amount The amount to be transferred.\n', '    */\n', '    function transfer(address receiver, uint256 amount) public returns (bool) {\n', '        beforeBalanceChanges(msg.sender);\n', '        beforeBalanceChanges(receiver);\n', '\n', '        return super.transfer(receiver, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer coins.\n', '    *\n', '    * @param from Address from which will be withdrawn tokens.\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transferFrom(address from, address to, uint256 value) \n', '        public \n', '        returns (bool) \n', '    {\n', '        beforeBalanceChanges(from);\n', '        beforeBalanceChanges(to);\n', '\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    /**\n', '    * @dev Fix last balance updates.\n', '    */\n', '    function beforeBalanceChanges(address _who) internal {\n', '        if (holders[_who].balanceUpdateTime <= lastPeriodStarDate) {\n', '            holders[_who].balanceUpdateTime = now;\n', '            holders[_who].balance = balanceOf(_who);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate token holder reward.\n', '    */\n', '    function reward() view public returns (uint) {\n', '        if (holders[msg.sender].rewardWithdrawTime >= lastPeriodStarDate) {\n', '            return 0;\n', '        }\n', '        \n', '        uint256 balance;\n', '        if (holders[msg.sender].balanceUpdateTime <= lastPeriodStarDate) {\n', '            balance = balanceOf(msg.sender);\n', '        } else {\n', '            balance = holders[msg.sender].balance;\n', '        }\n', '\n', '        return totalDividends * balance / INITIAL_SUPPLY;\n', '    }\n', '\n', '    /**\n', '    * @dev Allow withdraw reward.\n', '    */\n', '    function withdrawReward() public returns (uint) {\n', '        uint value = reward();\n', '        if (value == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        if (!msg.sender.send(value)) {\n', '            return 0;\n', '        }\n', '        \n', '        if (balanceOf(msg.sender) == 0) {\n', '            // garbage collector\n', '            delete holders[msg.sender];\n', '        } else {\n', '            holders[msg.sender].rewardWithdrawTime = now;\n', '        }\n', '\n', '        weiToDistribute -= value;\n', '\n', '        return value;\n', '    }\n', '    /**\n', '    * @dev Simple payable function that allows accept ether.\n', '    */\n', '    function() public payable {}\n', '}']