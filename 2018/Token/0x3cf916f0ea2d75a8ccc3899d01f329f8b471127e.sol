['pragma solidity >0.4.23 <0.5.0;\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '    // delete extra methods\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract Art is StandardToken {\n', '    string public name = "Northern Turquoise";\n', '    string public symbol = "NT";\n', '    uint256 public decimals = 18;\n', '    uint256 public totalSupply = 1 ether;\n', '\n', '    // Struct\n', '    address public artist = msg.sender;\n', '    string public artistName = "Zhang Ji";\n', '    string public artistEmail= "six@beslab.xyz";\n', '    string public Explain= "A liquid information poetry.";\n', '    string public Hash= "39a6e92df56f29f0c9c961d2483df06b"; //Art Hash\n', '    string public Description = "A romanticized documentary for the true experience of different understandings of value that carried by objects through different ages, background and crew, etc.";\n', '    string public Copyright = "Token holder has full copyright of this art piece including its interpretation, commercial use, ownership transfer, derivatives production, etc. ";\n', '    uint256 public transferLimit = 1 ether;\n', '    string public artUrlList = "https://www.dropbox.com/s/0v99yw0i7w8qwz6/northern%20turquoise.cryptoart?dl=0,https://drive.google.com/file/d/1CzezHZfrKDKvQkWdd_b5He5dQQD68EX8/view?usp=sharing";\n', '\n', '    constructor() public {\n', '        totalSupply_ = totalSupply;\n', '        balances[artist] = totalSupply;\n', '        emit Transfer(0x0, artist, totalSupply);\n', '    }\n', '\n', '    event TransferOwner(address newOwner, address lastOwner);\n', '    modifier onlyArtist() {\n', '        require(msg.sender == artist, "Only artist can do this.");\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address newOwner) internal onlyArtist returns (bool) {\n', '        artist = newOwner;\n', '    }\n', '\n', '    function changeExplain(string newExplain) public onlyArtist returns (bool) {\n', '        Explain = newExplain;\n', '    }\n', '\n', '    function changeArtName(string newName, string newSymbol) public onlyArtist returns (bool) {\n', '        name = newName;\n', '        symbol = newSymbol;\n', '    }\n', '\n', '    function changeArtUrl(string newUrl) public onlyArtist returns (bool) {\n', '        artUrlList = newUrl;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(_value == transferLimit, "Art only one.");\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        changeOwner(_to);\n', '        emit TransferOwner(_to,msg.sender);\n', '        return true;\n', '    }\n', '}']