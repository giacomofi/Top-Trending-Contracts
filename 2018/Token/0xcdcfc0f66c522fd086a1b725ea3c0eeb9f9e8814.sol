['pragma solidity ^0.4.19;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) returns (uint256) {\n', '    uint256 c = a * b;\n', '    require(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function safeSub(uint256 a, uint256 b) returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '  function safeAdd(uint256 a, uint256 b) returns (uint256) {\n', '    uint c = a + b;\n', '    require(c >= a && c >= b);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '  address public owner;\n', '  function Owned() {\n', '    owner = msg.sender;\n', '  }\n', '  function setOwner(address _owner) returns (bool success) {\n', '    owner = _owner;\n', '    return true;\n', '  }\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract AURA is SafeMath, Owned {\n', '    bool public locked = true;\n', '    string public name = "Aurora DAO";\n', '    string public symbol = "AURA";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function AURA() public {\n', '        totalSupply = 1000000000000000000000000000;\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(!locked || msg.sender == owner);\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        require(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        require(!locked);\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function unlockToken() onlyOwner {\n', '      locked = false;\n', '    }\n', '\n', '    bool public balancesUploaded = false;\n', '    function uploadBalances(address[] recipients, uint256[] balances) onlyOwner {\n', '      require(!balancesUploaded);\n', '      uint256 sum = 0;\n', '      for (uint256 i = 0; i < recipients.length; i++) {\n', '        balanceOf[recipients[i]] = safeAdd(balanceOf[recipients[i]], balances[i]);\n', '        sum = safeAdd(sum, balances[i]);\n', '      }\n', '      balanceOf[owner] = safeSub(balanceOf[owner], sum);\n', '    }\n', '    function lockBalances() onlyOwner {\n', '      balancesUploaded = true;\n', '    }\n', '}']