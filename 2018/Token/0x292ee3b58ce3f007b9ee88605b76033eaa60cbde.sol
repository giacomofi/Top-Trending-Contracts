['contract BEXP {  \n', '    /* This creates an array with all balances */  \n', '    mapping (address => uint256) public balanceOf;\n', '      \n', '    string public name = "BitExpress";  \n', '    string public symbol = "BEXP";  \n', '    uint8 public decimals = 8;  \n', '    uint256 public totalSupply = 1000000000 * 10**8;\n', '    address founder = address(0xe2ce6a2539efbdf0a211300aadb70a416d5d2bec);\n', '      \n', '    event Transfer(address indexed from, address indexed to, uint256 value);  \n', '          \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */  \n', '    function BEXP () public {  \n', '        balanceOf[founder] = totalSupply ;             // Give the creator all initial tokens  \n', '        Transfer(0, founder, totalSupply);\n', '    }  \n', '          \n', '    function transfer(address _to, uint256 _value) public returns (bool success){  \n', '        /* Check if sender has balance and for overflows */  \n', '        require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to]);  \n', '  \n', '        /* Add and subtract new balances */  \n', '        balanceOf[msg.sender] -= _value;  \n', '        balanceOf[_to] += _value;  \n', '          \n', '        /* Notify anyone listening that this transfer took place */  \n', '        Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '}']
['contract BEXP {  \n', '    /* This creates an array with all balances */  \n', '    mapping (address => uint256) public balanceOf;\n', '      \n', '    string public name = "BitExpress";  \n', '    string public symbol = "BEXP";  \n', '    uint8 public decimals = 8;  \n', '    uint256 public totalSupply = 1000000000 * 10**8;\n', '    address founder = address(0xe2ce6a2539efbdf0a211300aadb70a416d5d2bec);\n', '      \n', '    event Transfer(address indexed from, address indexed to, uint256 value);  \n', '          \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */  \n', '    function BEXP () public {  \n', '        balanceOf[founder] = totalSupply ;             // Give the creator all initial tokens  \n', '        Transfer(0, founder, totalSupply);\n', '    }  \n', '          \n', '    function transfer(address _to, uint256 _value) public returns (bool success){  \n', '        /* Check if sender has balance and for overflows */  \n', '        require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to]);  \n', '  \n', '        /* Add and subtract new balances */  \n', '        balanceOf[msg.sender] -= _value;  \n', '        balanceOf[_to] += _value;  \n', '          \n', '        /* Notify anyone listening that this transfer took place */  \n', '        Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '}']
