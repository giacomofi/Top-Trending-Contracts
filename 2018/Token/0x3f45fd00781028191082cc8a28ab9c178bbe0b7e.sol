['pragma solidity 0.4.23;\n', '\n', '// File: eidoo-icoengine/contracts/ICOEngineInterface.sol\n', '\n', 'contract ICOEngineInterface {\n', '\n', '    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\n', '    function started() public view returns(bool);\n', '\n', '    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\n', '    function ended() public view returns(bool);\n', '\n', '    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\n', '    function startTime() public view returns(uint);\n', '\n', '    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\n', '    function endTime() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of startTime\n', '    // Returns the starting block number of the ico, must return 0 if it depends on the time stamp\n', '    // function startBlock() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of endTime\n', '    // Returns theending block number of the ico, must retrun 0 if it depends on the time stamp\n', '    // function endBlock() public view returns(uint);\n', '\n', '    // returns the total number of the tokens available for the sale, must not change when the ico is started\n', '    function totalTokens() public view returns(uint);\n', '\n', '    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be equal to totalTokens(),\n', '    // then it will decrease. It is used to calculate the percentage of sold tokens as remainingTokens() / totalTokens()\n', '    function remainingTokens() public view returns(uint);\n', '\n', '    // return the price as number of tokens released for each ether\n', '    function price() public view returns(uint);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/KYCBase.sol\n', '\n', '// Abstract base contract\n', 'contract KYCBase {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => bool) public isKycSigner;\n', '    mapping (uint64 => uint256) public alreadyPayed;\n', '\n', '    event KycVerified(address indexed signer, address buyerAddress, uint64 buyerId, uint maxAmount);\n', '\n', '    function KYCBase(address [] kycSigners) internal {\n', '        for (uint i = 0; i < kycSigners.length; i++) {\n', '            isKycSigner[kycSigners[i]] = true;\n', '        }\n', '    }\n', '\n', '    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\n', '    function releaseTokensTo(address buyer, address signer) internal returns(bool);\n', '\n', '    // This method can be overridden to enable some sender to buy token for a different address\n', '    function senderAllowedFor(address buyer)\n', '        internal view returns(bool)\n', '    {\n', '        return buyer == msg.sender;\n', '    }\n', '\n', '    function buyTokensFor(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        public payable returns (bool)\n', '    {\n', '        require(senderAllowedFor(buyerAddress));\n', '        return buyImplementation(buyerAddress, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyTokens(uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        public payable returns (bool)\n', '    {\n', '        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyImplementation(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        private returns (bool)\n', '    {\n', '        // check the signature\n', '        bytes32 hash = sha256("Eidoo icoengine authorization", this, buyerAddress, buyerId, maxAmount);\n', '        address signer = ecrecover(hash, v, r, s);\n', '        if (!isKycSigner[signer]) {\n', '            revert();\n', '        } else {\n', '            uint256 totalPayed = alreadyPayed[buyerId].add(msg.value);\n', '            require(totalPayed <= maxAmount);\n', '            alreadyPayed[buyerId] = totalPayed;\n', '            KycVerified(signer, buyerAddress, buyerId, maxAmount);\n', '            return releaseTokensTo(buyerAddress, signer);\n', '        }\n', '    }\n', '\n', '    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\n', '    function () public {\n', '        revert();\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol\n', '\n', '/**\n', ' * @title Standard Burnable Token\n', ' * @dev Adds burnFrom method to ERC20 implementations\n', ' */\n', 'contract StandardBurnableToken is BurnableToken, StandardToken {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    _burn(_from, _value);\n', '  }\n', '}\n', '\n', '// File: contracts/ORSToken.sol\n', '\n', '/// @title ORSToken\n', '/// @author Sicos et al.\n', 'contract ORSToken is CappedToken, StandardBurnableToken, PausableToken {\n', '\n', '    string public name = "ORS Token";\n', '    string public symbol = "ORS";\n', '    uint8 public decimals = 18;\n', '\n', '    /// @dev Constructor\n', '    /// @param _cap Maximum number of integral token units; total supply must never exceed this limit\n', '    constructor(uint _cap) public CappedToken(_cap) {\n', '        pause();  // Disable token trade\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ORSTokenSale.sol\n', '\n', '/// @title ORSTokenSale\n', '/// @author Sicos et al.\n', 'contract ORSTokenSale is KYCBase, ICOEngineInterface, Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    // Maximum token amounts of each pool\n', '    // Note: There were 218054209 token sold in PreSale\n', '    // Note: 4193635 Bonus token will be issued to preSale investors\n', '    // Note: PRESALE_CAP = 218054209 PreSale token + 4193635 PreSale Bonus token\n', '    uint constant public PRESALE_CAP = 222247844e18;          // 222,247,844 e18\n', '    uint constant public MAINSALE_CAP = 281945791e18;         // 281,945,791 e18\n', '    // Note: BONUS_CAP should be at least 5% of MAINSALE_CAP\n', '    // Note: BONUS_CAP = 64460000 BONUS token  - 4193635 PreSale Bonus token\n', '    uint constant public BONUS_CAP = 60266365e18;             //  60,266,365 e18\n', '\n', '    // Granted token shares that will be minted upon finalization\n', '    uint constant public COMPANY_SHARE = 127206667e18;        // 127,206,667 e18\n', '    uint constant public TEAM_SHARE = 83333333e18;            //  83,333,333 e18\n', '    uint constant public ADVISORS_SHARE = 58333333e18;        //  58,333,333 e18\n', '\n', '    // Remaining token amounts of each pool\n', '    uint public presaleRemaining = PRESALE_CAP;\n', '    uint public mainsaleRemaining = MAINSALE_CAP;\n', '    uint public bonusRemaining = BONUS_CAP;\n', '\n', '    // Beneficiaries of granted token shares\n', '    address public companyWallet;\n', '    address public advisorsWallet;\n', '    address public bountyWallet;\n', '\n', '    ORSToken public token;\n', '\n', '    // Integral token units (10^-18 tokens) per wei\n', '    uint public rate;\n', '\n', '    // Mainsale period\n', '    uint public openingTime;\n', '    uint public closingTime;\n', '\n', '    // Ethereum address where invested funds will be transferred to\n', '    address public wallet;\n', '\n', '    // Purchases signed via Eidoo&#39;s platform will receive bonus tokens\n', '    address public eidooSigner;\n', '\n', '    bool public isFinalized = false;\n', '\n', '    /// @dev Log entry on rate changed\n', '    /// @param newRate New rate in integral token units per wei\n', '    event RateChanged(uint newRate);\n', '\n', '    /// @dev Log entry on token purchased\n', '    /// @param buyer Ethereum address of token purchaser\n', '    /// @param value Worth in wei of purchased token amount\n', '    /// @param tokens Number of integral token units\n', '    event TokenPurchased(address indexed buyer, uint value, uint tokens);\n', '\n', '    /// @dev Log entry on buyer refunded upon token purchase\n', '    /// @param buyer Ethereum address of token purchaser\n', '    /// @param value Worth of refund of wei\n', '    event BuyerRefunded(address indexed buyer, uint value);\n', '\n', '    /// @dev Log entry on finalized\n', '    event Finalized();\n', '\n', '    /// @dev Constructor\n', '    /// @param _token An ORSToken\n', '    /// @param _rate Rate in integral token units per wei\n', '    /// @param _openingTime Block (Unix) timestamp of mainsale start time\n', '    /// @param _closingTime Block (Unix) timestamp of mainsale latest end time\n', '    /// @param _wallet Ethereum account who will receive sent ether upon token purchase during mainsale\n', '    /// @param _companyWallet Ethereum account of company who will receive company share upon finalization\n', '    /// @param _advisorsWallet Ethereum account of advisors who will receive advisors share upon finalization\n', '    /// @param _bountyWallet Ethereum account of a wallet that will receive remaining bonus upon finalization\n', '    /// @param _kycSigners List of KYC signers&#39; Ethereum addresses\n', '    constructor(\n', '        ORSToken _token,\n', '        uint _rate,\n', '        uint _openingTime,\n', '        uint _closingTime,\n', '        address _wallet,\n', '        address _companyWallet,\n', '        address _advisorsWallet,\n', '        address _bountyWallet,\n', '        address[] _kycSigners\n', '    )\n', '        public\n', '        KYCBase(_kycSigners)\n', '    {\n', '        require(_token != address(0x0));\n', '        require(_token.cap() == PRESALE_CAP + MAINSALE_CAP + BONUS_CAP + COMPANY_SHARE + TEAM_SHARE + ADVISORS_SHARE);\n', '        require(_rate > 0);\n', '        require(_openingTime > now && _closingTime > _openingTime);\n', '        require(_wallet != address(0x0));\n', '        require(_companyWallet != address(0x0) && _advisorsWallet != address(0x0) && _bountyWallet != address(0x0));\n', '        require(_kycSigners.length >= 2);\n', '\n', '        token = _token;\n', '        rate = _rate;\n', '        openingTime = _openingTime;\n', '        closingTime = _closingTime;\n', '        wallet = _wallet;\n', '        companyWallet = _companyWallet;\n', '        advisorsWallet = _advisorsWallet;\n', '        bountyWallet = _bountyWallet;\n', '\n', '        eidooSigner = _kycSigners[0];\n', '    }\n', '\n', '    /// @dev Set rate, i.e. adjust to changes of fiat/ether exchange rates\n', '    /// @param newRate Rate in integral token units per wei\n', '    function setRate(uint newRate) public onlyOwner {\n', '        require(newRate > 0);\n', '\n', '        if (newRate != rate) {\n', '            rate = newRate;\n', '\n', '            emit RateChanged(newRate);\n', '        }\n', '    }\n', '\n', '    /// @dev Distribute presold tokens and bonus tokens to investors\n', '    /// @param investors List of investors&#39; Ethereum addresses\n', '    /// @param tokens List of integral token amounts each investors will receive\n', '    function distributePresale(address[] investors, uint[] tokens) public onlyOwner {\n', '        require(!isFinalized);\n', '        require(tokens.length == investors.length);\n', '\n', '        for (uint i = 0; i < investors.length; ++i) {\n', '            presaleRemaining = presaleRemaining.sub(tokens[i]);\n', '\n', '            token.mint(investors[i], tokens[i]);\n', '        }\n', '    }\n', '\n', '    /// @dev Finalize, i.e. end token minting phase and enable token trading\n', '    function finalize() public onlyOwner {\n', '        require(ended() && !isFinalized);\n', '        require(presaleRemaining == 0);\n', '\n', '        // Distribute granted token shares\n', '        token.mint(companyWallet, COMPANY_SHARE + TEAM_SHARE);\n', '        token.mint(advisorsWallet, ADVISORS_SHARE);\n', '\n', '        // There shouldn&#39;t be any remaining presale tokens\n', '        // Remaining mainsale tokens will be lost (i.e. not minted)\n', '        // Remaining bonus tokens will be minted for the benefit of bounty wallet\n', '        if (bonusRemaining > 0) {\n', '            token.mint(bountyWallet, bonusRemaining);\n', '            bonusRemaining = 0;\n', '        }\n', '\n', '        // Enable token trade\n', '        token.finishMinting();\n', '        token.unpause();\n', '\n', '        isFinalized = true;\n', '\n', '        emit Finalized();\n', '    }\n', '\n', '    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\n', '    /// @dev Started (as required by Eidoo&#39;s ICOEngineInterface)\n', '    /// @return True iff mainsale start has passed\n', '    function started() public view returns (bool) {\n', '        return now >= openingTime;\n', '    }\n', '\n', '    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\n', '    /// @dev Ended (as required by Eidoo&#39;s ICOEngineInterface)\n', '    /// @return True iff mainsale is finished\n', '    function ended() public view returns (bool) {\n', '        // Note: Even though we allow token holders to burn their tokens immediately after purchase, this won&#39;t\n', '        //       affect the early end via "sold out" as mainsaleRemaining is independent of token.totalSupply.\n', '        return now > closingTime || mainsaleRemaining == 0;\n', '    }\n', '\n', '    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\n', '    /// @dev Start time (as required by Eidoo&#39;s ICOEngineInterface)\n', '    /// @return Block (Unix) timestamp of mainsale start time\n', '    function startTime() public view returns (uint) {\n', '        return openingTime;\n', '    }\n', '\n', '    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\n', '    /// @dev End time (as required by Eidoo&#39;s ICOEngineInterface)\n', '    /// @return Block (Unix) timestamp of mainsale latest end time\n', '    function endTime() public view returns (uint) {\n', '        return closingTime;\n', '    }\n', '\n', '    // returns the total number of the tokens available for the sale, must not change when the ico is started\n', '    /// @dev Total amount of tokens initially available for purchase during mainsale (excluding bonus tokens)\n', '    /// @return Integral token units\n', '    function totalTokens() public view returns (uint) {\n', '        return MAINSALE_CAP;\n', '    }\n', '\n', '    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be\n', '    // equal to totalTokens(), then it will decrease. It is used to calculate the percentage of sold tokens as\n', '    // remainingTokens() / totalTokens()\n', '    /// @dev Remaining amount of tokens available for purchase during mainsale (excluding bonus tokens)\n', '    /// @return Integral token units\n', '    function remainingTokens() public view returns (uint) {\n', '        return mainsaleRemaining;\n', '    }\n', '\n', '    // return the price as number of tokens released for each ether\n', '    /// @dev Price (as required by Eidoo&#39;s ICOEngineInterface); actually the inverse of a "price"\n', '    /// @return Rate in integral token units per wei\n', '    function price() public view returns (uint) {\n', '        return rate;\n', '    }\n', '\n', '    /// @dev Release purchased tokens to buyers during mainsale (as required by Eidoo&#39;s ICOEngineInterface)\n', '    /// @param buyer Ethereum address of purchaser\n', '    /// @param signer Ethereum address of signer\n', '    /// @return Always true, failures will be indicated by transaction reversal\n', '    function releaseTokensTo(address buyer, address signer) internal returns (bool) {\n', '        require(started() && !ended());\n', '\n', '        uint value = msg.value;\n', '        uint refund = 0;\n', '\n', '        uint tokens = value.mul(rate);\n', '        uint bonus = 0;\n', '\n', '        // (Last) buyer whose purchase would exceed available mainsale tokens will be partially refunded\n', '        if (tokens > mainsaleRemaining) {\n', '            uint valueOfRemaining = mainsaleRemaining.div(rate);\n', '\n', '            refund = value.sub(valueOfRemaining);\n', '            value = valueOfRemaining;\n', '            tokens = mainsaleRemaining;\n', '            // Note:\n', '            // To be 100% accurate the buyer should receive only a token amount that corresponds to valueOfRemaining,\n', '            // i.e. tokens = valueOfRemaining.mul(rate), because of mainsaleRemaining may not be a multiple of rate\n', '            // (due to regular adaption to the ether/fiat exchange rate).\n', '            // Nevertheless, we deliver all mainsaleRemaining tokens as the worth of these additional tokens at time\n', '            // of purchase is less than a wei and the gas costs of a correct solution, i.e. calculate value * rate\n', '            // again, would exceed this by several orders of magnitude.\n', '        }\n', '\n', '        // Purchases signed via Eidoo&#39;s platform will receive additional 5% bonus tokens\n', '        if (signer == eidooSigner) {\n', '            bonus = tokens.div(20);\n', '        }\n', '\n', '        mainsaleRemaining = mainsaleRemaining.sub(tokens);\n', '        bonusRemaining = bonusRemaining.sub(bonus);\n', '\n', '        token.mint(buyer, tokens.add(bonus));\n', '        wallet.transfer(value);\n', '        if (refund > 0) {\n', '            buyer.transfer(refund);\n', '\n', '            emit BuyerRefunded(buyer, refund);\n', '        }\n', '\n', '        emit TokenPurchased(buyer, value, tokens.add(bonus));\n', '\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity 0.4.23;\n', '\n', '// File: eidoo-icoengine/contracts/ICOEngineInterface.sol\n', '\n', 'contract ICOEngineInterface {\n', '\n', '    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\n', '    function started() public view returns(bool);\n', '\n', '    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\n', '    function ended() public view returns(bool);\n', '\n', '    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\n', '    function startTime() public view returns(uint);\n', '\n', '    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\n', '    function endTime() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of startTime\n', '    // Returns the starting block number of the ico, must return 0 if it depends on the time stamp\n', '    // function startBlock() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of endTime\n', '    // Returns theending block number of the ico, must retrun 0 if it depends on the time stamp\n', '    // function endBlock() public view returns(uint);\n', '\n', '    // returns the total number of the tokens available for the sale, must not change when the ico is started\n', '    function totalTokens() public view returns(uint);\n', '\n', '    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be equal to totalTokens(),\n', '    // then it will decrease. It is used to calculate the percentage of sold tokens as remainingTokens() / totalTokens()\n', '    function remainingTokens() public view returns(uint);\n', '\n', '    // return the price as number of tokens released for each ether\n', '    function price() public view returns(uint);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/KYCBase.sol\n', '\n', '// Abstract base contract\n', 'contract KYCBase {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => bool) public isKycSigner;\n', '    mapping (uint64 => uint256) public alreadyPayed;\n', '\n', '    event KycVerified(address indexed signer, address buyerAddress, uint64 buyerId, uint maxAmount);\n', '\n', '    function KYCBase(address [] kycSigners) internal {\n', '        for (uint i = 0; i < kycSigners.length; i++) {\n', '            isKycSigner[kycSigners[i]] = true;\n', '        }\n', '    }\n', '\n', '    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\n', '    function releaseTokensTo(address buyer, address signer) internal returns(bool);\n', '\n', '    // This method can be overridden to enable some sender to buy token for a different address\n', '    function senderAllowedFor(address buyer)\n', '        internal view returns(bool)\n', '    {\n', '        return buyer == msg.sender;\n', '    }\n', '\n', '    function buyTokensFor(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        public payable returns (bool)\n', '    {\n', '        require(senderAllowedFor(buyerAddress));\n', '        return buyImplementation(buyerAddress, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyTokens(uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        public payable returns (bool)\n', '    {\n', '        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyImplementation(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        private returns (bool)\n', '    {\n', '        // check the signature\n', '        bytes32 hash = sha256("Eidoo icoengine authorization", this, buyerAddress, buyerId, maxAmount);\n', '        address signer = ecrecover(hash, v, r, s);\n', '        if (!isKycSigner[signer]) {\n', '            revert();\n', '        } else {\n', '            uint256 totalPayed = alreadyPayed[buyerId].add(msg.value);\n', '            require(totalPayed <= maxAmount);\n', '            alreadyPayed[buyerId] = totalPayed;\n', '            KycVerified(signer, buyerAddress, buyerId, maxAmount);\n', '            return releaseTokensTo(buyerAddress, signer);\n', '        }\n', '    }\n', '\n', '    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\n', '    function () public {\n', '        revert();\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardBurnableToken.sol\n', '\n', '/**\n', ' * @title Standard Burnable Token\n', ' * @dev Adds burnFrom method to ERC20 implementations\n', ' */\n', 'contract StandardBurnableToken is BurnableToken, StandardToken {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    _burn(_from, _value);\n', '  }\n', '}\n', '\n', '// File: contracts/ORSToken.sol\n', '\n', '/// @title ORSToken\n', '/// @author Sicos et al.\n', 'contract ORSToken is CappedToken, StandardBurnableToken, PausableToken {\n', '\n', '    string public name = "ORS Token";\n', '    string public symbol = "ORS";\n', '    uint8 public decimals = 18;\n', '\n', '    /// @dev Constructor\n', '    /// @param _cap Maximum number of integral token units; total supply must never exceed this limit\n', '    constructor(uint _cap) public CappedToken(_cap) {\n', '        pause();  // Disable token trade\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ORSTokenSale.sol\n', '\n', '/// @title ORSTokenSale\n', '/// @author Sicos et al.\n', 'contract ORSTokenSale is KYCBase, ICOEngineInterface, Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    // Maximum token amounts of each pool\n', '    // Note: There were 218054209 token sold in PreSale\n', '    // Note: 4193635 Bonus token will be issued to preSale investors\n', '    // Note: PRESALE_CAP = 218054209 PreSale token + 4193635 PreSale Bonus token\n', '    uint constant public PRESALE_CAP = 222247844e18;          // 222,247,844 e18\n', '    uint constant public MAINSALE_CAP = 281945791e18;         // 281,945,791 e18\n', '    // Note: BONUS_CAP should be at least 5% of MAINSALE_CAP\n', '    // Note: BONUS_CAP = 64460000 BONUS token  - 4193635 PreSale Bonus token\n', '    uint constant public BONUS_CAP = 60266365e18;             //  60,266,365 e18\n', '\n', '    // Granted token shares that will be minted upon finalization\n', '    uint constant public COMPANY_SHARE = 127206667e18;        // 127,206,667 e18\n', '    uint constant public TEAM_SHARE = 83333333e18;            //  83,333,333 e18\n', '    uint constant public ADVISORS_SHARE = 58333333e18;        //  58,333,333 e18\n', '\n', '    // Remaining token amounts of each pool\n', '    uint public presaleRemaining = PRESALE_CAP;\n', '    uint public mainsaleRemaining = MAINSALE_CAP;\n', '    uint public bonusRemaining = BONUS_CAP;\n', '\n', '    // Beneficiaries of granted token shares\n', '    address public companyWallet;\n', '    address public advisorsWallet;\n', '    address public bountyWallet;\n', '\n', '    ORSToken public token;\n', '\n', '    // Integral token units (10^-18 tokens) per wei\n', '    uint public rate;\n', '\n', '    // Mainsale period\n', '    uint public openingTime;\n', '    uint public closingTime;\n', '\n', '    // Ethereum address where invested funds will be transferred to\n', '    address public wallet;\n', '\n', "    // Purchases signed via Eidoo's platform will receive bonus tokens\n", '    address public eidooSigner;\n', '\n', '    bool public isFinalized = false;\n', '\n', '    /// @dev Log entry on rate changed\n', '    /// @param newRate New rate in integral token units per wei\n', '    event RateChanged(uint newRate);\n', '\n', '    /// @dev Log entry on token purchased\n', '    /// @param buyer Ethereum address of token purchaser\n', '    /// @param value Worth in wei of purchased token amount\n', '    /// @param tokens Number of integral token units\n', '    event TokenPurchased(address indexed buyer, uint value, uint tokens);\n', '\n', '    /// @dev Log entry on buyer refunded upon token purchase\n', '    /// @param buyer Ethereum address of token purchaser\n', '    /// @param value Worth of refund of wei\n', '    event BuyerRefunded(address indexed buyer, uint value);\n', '\n', '    /// @dev Log entry on finalized\n', '    event Finalized();\n', '\n', '    /// @dev Constructor\n', '    /// @param _token An ORSToken\n', '    /// @param _rate Rate in integral token units per wei\n', '    /// @param _openingTime Block (Unix) timestamp of mainsale start time\n', '    /// @param _closingTime Block (Unix) timestamp of mainsale latest end time\n', '    /// @param _wallet Ethereum account who will receive sent ether upon token purchase during mainsale\n', '    /// @param _companyWallet Ethereum account of company who will receive company share upon finalization\n', '    /// @param _advisorsWallet Ethereum account of advisors who will receive advisors share upon finalization\n', '    /// @param _bountyWallet Ethereum account of a wallet that will receive remaining bonus upon finalization\n', "    /// @param _kycSigners List of KYC signers' Ethereum addresses\n", '    constructor(\n', '        ORSToken _token,\n', '        uint _rate,\n', '        uint _openingTime,\n', '        uint _closingTime,\n', '        address _wallet,\n', '        address _companyWallet,\n', '        address _advisorsWallet,\n', '        address _bountyWallet,\n', '        address[] _kycSigners\n', '    )\n', '        public\n', '        KYCBase(_kycSigners)\n', '    {\n', '        require(_token != address(0x0));\n', '        require(_token.cap() == PRESALE_CAP + MAINSALE_CAP + BONUS_CAP + COMPANY_SHARE + TEAM_SHARE + ADVISORS_SHARE);\n', '        require(_rate > 0);\n', '        require(_openingTime > now && _closingTime > _openingTime);\n', '        require(_wallet != address(0x0));\n', '        require(_companyWallet != address(0x0) && _advisorsWallet != address(0x0) && _bountyWallet != address(0x0));\n', '        require(_kycSigners.length >= 2);\n', '\n', '        token = _token;\n', '        rate = _rate;\n', '        openingTime = _openingTime;\n', '        closingTime = _closingTime;\n', '        wallet = _wallet;\n', '        companyWallet = _companyWallet;\n', '        advisorsWallet = _advisorsWallet;\n', '        bountyWallet = _bountyWallet;\n', '\n', '        eidooSigner = _kycSigners[0];\n', '    }\n', '\n', '    /// @dev Set rate, i.e. adjust to changes of fiat/ether exchange rates\n', '    /// @param newRate Rate in integral token units per wei\n', '    function setRate(uint newRate) public onlyOwner {\n', '        require(newRate > 0);\n', '\n', '        if (newRate != rate) {\n', '            rate = newRate;\n', '\n', '            emit RateChanged(newRate);\n', '        }\n', '    }\n', '\n', '    /// @dev Distribute presold tokens and bonus tokens to investors\n', "    /// @param investors List of investors' Ethereum addresses\n", '    /// @param tokens List of integral token amounts each investors will receive\n', '    function distributePresale(address[] investors, uint[] tokens) public onlyOwner {\n', '        require(!isFinalized);\n', '        require(tokens.length == investors.length);\n', '\n', '        for (uint i = 0; i < investors.length; ++i) {\n', '            presaleRemaining = presaleRemaining.sub(tokens[i]);\n', '\n', '            token.mint(investors[i], tokens[i]);\n', '        }\n', '    }\n', '\n', '    /// @dev Finalize, i.e. end token minting phase and enable token trading\n', '    function finalize() public onlyOwner {\n', '        require(ended() && !isFinalized);\n', '        require(presaleRemaining == 0);\n', '\n', '        // Distribute granted token shares\n', '        token.mint(companyWallet, COMPANY_SHARE + TEAM_SHARE);\n', '        token.mint(advisorsWallet, ADVISORS_SHARE);\n', '\n', "        // There shouldn't be any remaining presale tokens\n", '        // Remaining mainsale tokens will be lost (i.e. not minted)\n', '        // Remaining bonus tokens will be minted for the benefit of bounty wallet\n', '        if (bonusRemaining > 0) {\n', '            token.mint(bountyWallet, bonusRemaining);\n', '            bonusRemaining = 0;\n', '        }\n', '\n', '        // Enable token trade\n', '        token.finishMinting();\n', '        token.unpause();\n', '\n', '        isFinalized = true;\n', '\n', '        emit Finalized();\n', '    }\n', '\n', '    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\n', "    /// @dev Started (as required by Eidoo's ICOEngineInterface)\n", '    /// @return True iff mainsale start has passed\n', '    function started() public view returns (bool) {\n', '        return now >= openingTime;\n', '    }\n', '\n', '    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\n', "    /// @dev Ended (as required by Eidoo's ICOEngineInterface)\n", '    /// @return True iff mainsale is finished\n', '    function ended() public view returns (bool) {\n', "        // Note: Even though we allow token holders to burn their tokens immediately after purchase, this won't\n", '        //       affect the early end via "sold out" as mainsaleRemaining is independent of token.totalSupply.\n', '        return now > closingTime || mainsaleRemaining == 0;\n', '    }\n', '\n', '    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\n', "    /// @dev Start time (as required by Eidoo's ICOEngineInterface)\n", '    /// @return Block (Unix) timestamp of mainsale start time\n', '    function startTime() public view returns (uint) {\n', '        return openingTime;\n', '    }\n', '\n', '    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\n', "    /// @dev End time (as required by Eidoo's ICOEngineInterface)\n", '    /// @return Block (Unix) timestamp of mainsale latest end time\n', '    function endTime() public view returns (uint) {\n', '        return closingTime;\n', '    }\n', '\n', '    // returns the total number of the tokens available for the sale, must not change when the ico is started\n', '    /// @dev Total amount of tokens initially available for purchase during mainsale (excluding bonus tokens)\n', '    /// @return Integral token units\n', '    function totalTokens() public view returns (uint) {\n', '        return MAINSALE_CAP;\n', '    }\n', '\n', '    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be\n', '    // equal to totalTokens(), then it will decrease. It is used to calculate the percentage of sold tokens as\n', '    // remainingTokens() / totalTokens()\n', '    /// @dev Remaining amount of tokens available for purchase during mainsale (excluding bonus tokens)\n', '    /// @return Integral token units\n', '    function remainingTokens() public view returns (uint) {\n', '        return mainsaleRemaining;\n', '    }\n', '\n', '    // return the price as number of tokens released for each ether\n', '    /// @dev Price (as required by Eidoo\'s ICOEngineInterface); actually the inverse of a "price"\n', '    /// @return Rate in integral token units per wei\n', '    function price() public view returns (uint) {\n', '        return rate;\n', '    }\n', '\n', "    /// @dev Release purchased tokens to buyers during mainsale (as required by Eidoo's ICOEngineInterface)\n", '    /// @param buyer Ethereum address of purchaser\n', '    /// @param signer Ethereum address of signer\n', '    /// @return Always true, failures will be indicated by transaction reversal\n', '    function releaseTokensTo(address buyer, address signer) internal returns (bool) {\n', '        require(started() && !ended());\n', '\n', '        uint value = msg.value;\n', '        uint refund = 0;\n', '\n', '        uint tokens = value.mul(rate);\n', '        uint bonus = 0;\n', '\n', '        // (Last) buyer whose purchase would exceed available mainsale tokens will be partially refunded\n', '        if (tokens > mainsaleRemaining) {\n', '            uint valueOfRemaining = mainsaleRemaining.div(rate);\n', '\n', '            refund = value.sub(valueOfRemaining);\n', '            value = valueOfRemaining;\n', '            tokens = mainsaleRemaining;\n', '            // Note:\n', '            // To be 100% accurate the buyer should receive only a token amount that corresponds to valueOfRemaining,\n', '            // i.e. tokens = valueOfRemaining.mul(rate), because of mainsaleRemaining may not be a multiple of rate\n', '            // (due to regular adaption to the ether/fiat exchange rate).\n', '            // Nevertheless, we deliver all mainsaleRemaining tokens as the worth of these additional tokens at time\n', '            // of purchase is less than a wei and the gas costs of a correct solution, i.e. calculate value * rate\n', '            // again, would exceed this by several orders of magnitude.\n', '        }\n', '\n', "        // Purchases signed via Eidoo's platform will receive additional 5% bonus tokens\n", '        if (signer == eidooSigner) {\n', '            bonus = tokens.div(20);\n', '        }\n', '\n', '        mainsaleRemaining = mainsaleRemaining.sub(tokens);\n', '        bonusRemaining = bonusRemaining.sub(bonus);\n', '\n', '        token.mint(buyer, tokens.add(bonus));\n', '        wallet.transfer(value);\n', '        if (refund > 0) {\n', '            buyer.transfer(refund);\n', '\n', '            emit BuyerRefunded(buyer, refund);\n', '        }\n', '\n', '        emit TokenPurchased(buyer, value, tokens.add(bonus));\n', '\n', '        return true;\n', '    }\n', '\n', '}']
