['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * BRX.SPACE (<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="593a36372d383a2d193b2b21772a29383a3c">[email&#160;protected]</a>)\n', ' * \n', ' * BRX token is a virtual token, governed by ERC20-compatible\n', ' * Ethereum Smart Contract and secured by Ethereum Blockchain\n', ' *\n', ' * The official website is https://brx.space\n', ' * \n', ' * The uints are all in wei and atto tokens (*10^-18)\n', '\n', ' * The contract code itself, as usual, is at the end, after all the connected libraries\n', ' * Developed by 262dfb6c55bf6ac215fac30181bdbfb8a2872cc7e3ea7cffe3a001621bb559e2\n', ' */\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint a, uint b) internal pure returns (uint) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint a, uint b) internal pure returns (uint) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function transfer(address to, uint value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint);\n', '  function transferFrom(address from, address to, uint value) public returns (bool);\n', '  function approve(address spender, uint value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * Fix for the ERC20 short address attack  \n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '   require(msg.data.length >= size + 4);\n', '   _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '    require(_to != address(0) &&\n', '        _value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '    require(_to != address(0) &&\n', '        _value <= balances[_from] &&\n', '        _value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract BRXToken is StandardToken, Ownable {\n', '  using SafeMath for uint;\n', '\n', '  //---------------  Info for ERC20 explorers  -----------------//\n', '  string public constant name = "BRX Coin";\n', '  string public constant symbol = "BRX";\n', '  uint8 public constant decimals = 18;\n', '\n', '  //----------------------  Constants  -------------------------//\n', '  uint private constant atto = 1000000000000000000;\n', '  uint private constant INITIAL_SUPPLY = 15000000 * atto; // 15 mln BRX. Impossible to mint more than this\n', '  uint public totalSupply = INITIAL_SUPPLY;\n', '\n', '  //----------------------  Variables  -------------------------//\n', '  // Made up ICO address (designating the token pool reserved for ICO, no one has access to it)\n', '  address public ico_address = 0x1F01f01f01f01F01F01f01F01F01f01F01f01F01;\n', '  address public teamWallet = 0x58096c1dCd5f338530770B1f6Fe0AcdfB90Cc87B;\n', '  address public addrBRXPay = 0x2F02F02F02F02f02f02f02f02F02F02f02f02f02;\n', '\n', '  uint private current_supply = 0; // Holding the number of all the coins in existence\n', '  uint private ico_starting_supply = 0; // How many atto tokens *were* available for sale at the beginning of the ICO\n', '  uint private current_price_atto_tokens_per_wei = 0; // Holding current price (determined by the algorithm in buy())\n', '\n', '  //--------------  Flags describing ICO stages  ---------------//\n', '  bool private preSoldSharesDistributed = false; // Prevents accidental re-distribution of shares\n', '  bool private isICOOpened = false;\n', '  bool private isICOClosed = false;\n', '  // 3 stages:\n', '  // Contract has just been deployed and initialized. isICOOpened == false, isICOClosed == false\n', '  // ICO has started, now anybody can buy(). isICOOpened == true, isICOClosed == false\n', '  // ICO has finished, now the team can receive the ether. isICOOpened == false, isICOClosed == true\n', '\n', '  //-------------------  Founder Members  ----------------------//\n', '  uint public founderMembers = 0;\n', '  mapping(uint => address) private founderOwner;\n', '  mapping(address => uint) founderMembersInvest;\n', '  \n', '  //----------------------  Premiums  --------------------------//\n', '  uint[] private premiumPacks;\n', '  mapping(address => bool) private premiumICOMember;\n', '  mapping(address => uint) private premiumPacksPaid;\n', '  mapping(address => bool) public frozenAccounts;\n', '\n', '  //-----------------------  Events  ---------------------------//\n', '  event ICOOpened();\n', '  event ICOClosed();\n', '\n', '  event PriceChanged(uint old_price, uint new_price);\n', '  event SupplyChanged(uint supply, uint old_supply);\n', '\n', '  event FrozenFund(address _from, bool _freeze);\n', '\n', '  event BRXAcquired(address account, uint amount_in_wei, uint amount_in_brx);\n', '  event BRXNewFounder(address account, uint amount_in_brx);\n', '\n', '  // ***************************************************************************\n', '  // Constructor\n', '\n', '  function BRXToken() public {\n', '    // Some percentage of the tokens is already reserved by early employees and investors\n', '    // Here we&#39;re initializing their balances\n', '    distributePreSoldShares();\n', '\n', '    // Starting price\n', '    current_price_atto_tokens_per_wei = calculateCurrentPrice(1);\n', '\n', '    // Some other initializations\n', '    premiumPacks.length = 0;\n', '  }\n', '\n', '  // Sending ether directly to the contract invokes buy() and assigns tokens to the sender\n', '  function () public payable {\n', '    buy();\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(\n', '    address tokenAddress, uint tokens\n', '  ) public onlyOwner\n', '    returns (bool success) {\n', '    return StandardToken(tokenAddress).transfer(owner, tokens);\n', '  }\n', '\n', '  // ***************************************************************************\n', '\n', '  // Buy token by sending ether here\n', '  //\n', '  // Price is being determined by the algorithm in recalculatePrice()\n', '  // You can also send the ether directly to the contract address\n', '  function buy() public payable {\n', '    require(msg.value != 0 && isICOOpened == true && isICOClosed == false);\n', '\n', '    // Deciding how many tokens can be bought with the ether received\n', '    uint tokens = getAttoTokensAmountPerWeiInternal(msg.value);\n', '\n', '    // Don&#39;t allow to buy more than 1% per transaction (secures from huge investors swalling the whole thing in 1 second)\n', '    uint allowedInOneTransaction = current_supply / 100;\n', '    require(tokens < allowedInOneTransaction &&\n', '        tokens <= balances[ico_address]);\n', '\n', '    // Transfer from the ICO pool\n', '    balances[ico_address] = balances[ico_address].sub(tokens); // if not enough, will throw\n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '    premiumICOMember[msg.sender] = true;\n', '    \n', '    // Check if sender has become a founder member\n', '    if (balances[msg.sender] >= 2000000000000000000000) {\n', '        if (founderMembersInvest[msg.sender] == 0) {\n', '            founderOwner[founderMembers] = msg.sender;\n', '            founderMembers++; BRXNewFounder(msg.sender, balances[msg.sender]);\n', '        }\n', '        founderMembersInvest[msg.sender] = balances[msg.sender];\n', '    }\n', '\n', '    // Kick the price changing algo\n', '    uint old_price = current_price_atto_tokens_per_wei;\n', '    current_price_atto_tokens_per_wei = calculateCurrentPrice(getAttoTokensBoughtInICO());\n', '    if (current_price_atto_tokens_per_wei == 0) current_price_atto_tokens_per_wei = 1; // in case it is too small that it gets rounded to zero\n', '    if (current_price_atto_tokens_per_wei > old_price) current_price_atto_tokens_per_wei = old_price; // in case some weird overflow happens\n', '\n', '    // Broadcasting price change event\n', '    if (old_price != current_price_atto_tokens_per_wei) PriceChanged(old_price, current_price_atto_tokens_per_wei);\n', '\n', '    // Broadcasting the buying event\n', '    BRXAcquired(msg.sender, msg.value, tokens);\n', '  }\n', '\n', '  // Formula for the dynamic price change algorithm\n', '  function calculateCurrentPrice(\n', '    uint attoTokensBought\n', '  ) private pure\n', '    returns (uint result) {\n', '    // see http://www.wolframalpha.com/input/?i=f(x)+%3D+395500000+%2F+(x+%2B+150000)+-+136\n', '    // mixing safe and usual math here because the division will throw on inconsistency\n', '    return (395500000 / ((attoTokensBought / atto) + 150000)).sub(136);\n', '  }\n', '\n', '  // ***************************************************************************\n', '  // Functions for the contract owner\n', '\n', '  function openICO() public onlyOwner {\n', '    require(isICOOpened == false && isICOClosed == false);\n', '    isICOOpened = true;\n', '\n', '    ICOOpened();\n', '  }\n', '  function closeICO() public onlyOwner {\n', '    require(isICOClosed == false && isICOOpened == true);\n', '\n', '    isICOOpened = false;\n', '    isICOClosed = true;\n', '\n', '    // Redistribute ICO Tokens that were not bought as the first premiums\n', '    premiumPacks.length = 1;\n', '    premiumPacks[0] = balances[ico_address];\n', '    balances[ico_address] = 0;\n', '\n', '    ICOClosed();\n', '  }\n', '  function pullEtherFromContract() public onlyOwner {\n', '    require(isICOClosed == true); // Only when ICO is closed\n', '    if (!teamWallet.send(this.balance)) {\n', '      revert();\n', '    }\n', '  }\n', '  function freezeAccount(\n', '    address _from, bool _freeze\n', '  ) public onlyOwner\n', '    returns (bool) {\n', '    frozenAccounts[_from] = _freeze;\n', '    FrozenFund(_from, _freeze);  \n', '    return true;\n', '  }\n', '  function setNewBRXPay(\n', '    address newBRXPay\n', '  ) public onlyOwner {\n', '    require(newBRXPay != address(0));\n', '    addrBRXPay = newBRXPay;\n', '  }\n', '  function transferFromBRXPay(\n', '    address _from, address _to, uint _value\n', '  ) public allowedPayments\n', '    returns (bool) {\n', '    require(msg.sender == addrBRXPay && balances[_to].add(_value) > balances[_to] &&\n', '    _value <= balances[_from] && !frozenAccounts[_from] &&\n', '    !frozenAccounts[_to] && _to != address(0));\n', '    \n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function setCurrentPricePerWei(\n', '    uint _new_price  \n', '  ) public onlyOwner\n', '  returns (bool) {\n', '    require(isICOClosed == true && _new_price > 0); // Only when ICO is closed\n', '    uint old_price = current_price_atto_tokens_per_wei;\n', '    current_price_atto_tokens_per_wei = _new_price;\n', '    PriceChanged(old_price, current_price_atto_tokens_per_wei);\n', '  }\n', '\n', '  // ***************************************************************************\n', '  // Some percentage of the tokens is already reserved by early employees and investors\n', '  // Here we&#39;re initializing their balances\n', '\n', '  function distributePreSoldShares() private onlyOwner {\n', '    // Making it impossible to call this function twice\n', '    require(preSoldSharesDistributed == false);\n', '    preSoldSharesDistributed = true;\n', '\n', '    // Values are in atto tokens\n', '    balances[0xAEC5cbcCF89fc25e955A53A5a015f7702a14b629] = 7208811 * atto;\n', '    balances[0xAECDCB2a8e2cFB91869A9af30050BEa038034949] = 4025712 * atto;\n', '    balances[0xAECF0B1b6897195295FeeD1146F3732918a5b3E4] = 300275 * atto;\n', '    balances[0xAEC80F0aC04f389E84F3f4b39827087e393EB229] = 150000 * atto;\n', '    balances[0xAECc9545385d858D3142023d3c298a1662Aa45da] = 150000 * atto;\n', '    balances[0xAECE71616d07F609bd2CbD4122FbC9C4a2D11A9D] = 90000 * atto;\n', '    balances[0xAECee3E9686825e0c8ea65f1bC8b1aB613545B8e] = 75000 * atto;\n', '    balances[0xAECC8E8908cE17Dd6dCFFFDCCD561696f396148F] = 202 * atto;\n', '    current_supply = (7208811 + 4025712 + 300275 + 150000 + 150000 + 90000 + 75000 + 202) * atto;\n', '\n', '    // Sending the rest to ICO pool\n', '    balances[ico_address] = INITIAL_SUPPLY.sub(current_supply);\n', '\n', '    // Initializing the supply variables\n', '    ico_starting_supply = balances[ico_address];\n', '    current_supply = INITIAL_SUPPLY;\n', '    SupplyChanged(0, current_supply);\n', '  }\n', '\n', '  // ***************************************************************************\n', '  // Some useful getters (although you can just query the public variables)\n', '\n', '  function getIcoStatus() public view\n', '    returns (string result) {\n', '    return (isICOClosed) ? &#39;closed&#39; : (isICOOpened) ? &#39;opened&#39; : &#39;not opened&#39; ;\n', '  }\n', '  function getCurrentPricePerWei() public view\n', '    returns (uint result) {\n', '    return current_price_atto_tokens_per_wei;\n', '  }\n', '  function getAttoTokensAmountPerWeiInternal(\n', '    uint value\n', '  ) public payable\n', '    returns (uint result) {\n', '    return value * current_price_atto_tokens_per_wei;\n', '  }\n', '  function getAttoTokensAmountPerWei(\n', '    uint value\n', '  ) public view\n', '  returns (uint result) {\n', '    return value * current_price_atto_tokens_per_wei;\n', '  }\n', '  function getAttoTokensLeftForICO() public view\n', '    returns (uint result) {\n', '    return balances[ico_address];\n', '  }\n', '  function getAttoTokensBoughtInICO() public view\n', '    returns (uint result) {\n', '    return ico_starting_supply - getAttoTokensLeftForICO();\n', '  }\n', '  function getPremiumPack(uint index) public view\n', '    returns (uint premium) {\n', '    return premiumPacks[index];\n', '  }\n', '  function getPremiumsAvailable() public view\n', '    returns (uint length) {\n', '    return premiumPacks.length;\n', '  }\n', '  function getBalancePremiumsPaid(\n', '    address account\n', '  ) public view\n', '    returns (uint result) {\n', '    return premiumPacksPaid[account];\n', '  }\n', '  function getAttoTokensToBeFounder() public view\n', '  returns (uint result) {\n', '    return 2000000000000000000000 / getCurrentPricePerWei();\n', '  }\n', '  function getFounderMembersInvest(\n', '    address account\n', '  ) public view\n', '    returns (uint result) {\n', '    return founderMembersInvest[account];\n', '  }\n', '  function getFounderMember(\n', '    uint index\n', '  ) public onlyOwner view\n', '    returns (address account) {\n', '    require(founderMembers >= index && founderOwner[index] != address(0));\n', '    return founderOwner[index];\n', '  }\n', '\n', '  // ***************************************************************************\n', '  // Premiums\n', '\n', '  function sendPremiumPack(\n', '    uint amount\n', '  ) public onlyOwner allowedPayments {\n', '    premiumPacks.length += 1;\n', '    premiumPacks[premiumPacks.length-1] = amount;\n', '    balances[msg.sender] = balances[msg.sender].sub(amount); // will throw and revert the whole thing if doesn&#39;t have this amount\n', '  }\n', '  function getPremiums() public allowedPayments\n', '    returns (uint amount) {\n', '    require(premiumICOMember[msg.sender]);\n', '    if (premiumPacks.length > premiumPacksPaid[msg.sender]) {\n', '      uint startPackIndex = premiumPacksPaid[msg.sender];\n', '      uint finishPackIndex = premiumPacks.length - 1;\n', '      uint owingTotal = 0;\n', '      for(uint i = startPackIndex; i <= finishPackIndex; i++) {\n', '        if (current_supply != 0) { // just in case\n', '          uint owing = balances[msg.sender] * premiumPacks[i] / current_supply;\n', '          balances[msg.sender] = balances[msg.sender].add(owing);\n', '          owingTotal = owingTotal + owing;\n', '        }\n', '      }\n', '      premiumPacksPaid[msg.sender] = premiumPacks.length;\n', '      return owingTotal;\n', '    } else {\n', '      revert();\n', '    }\n', '  }\n', '\n', '  // ***************************************************************************\n', '  // Overriding payment functions to take control over the logic\n', '\n', '  modifier allowedPayments() {\n', '    // Don&#39;t allow to transfer coins until the ICO ends\n', '    require(isICOOpened == false && isICOClosed == true && !frozenAccounts[msg.sender]);\n', '    _;\n', '  }\n', '  \n', '  function transferFrom(\n', '    address _from, address _to, uint _value\n', '  ) public allowedPayments\n', '    returns (bool) {\n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '  \n', '  function transfer(\n', '    address _to, uint _value\n', '  ) public onlyPayloadSize(2 * 32) allowedPayments\n', '    returns (bool) {\n', '    super.transfer(_to, _value);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * BRX.SPACE (contact@brx.space)\n', ' * \n', ' * BRX token is a virtual token, governed by ERC20-compatible\n', ' * Ethereum Smart Contract and secured by Ethereum Blockchain\n', ' *\n', ' * The official website is https://brx.space\n', ' * \n', ' * The uints are all in wei and atto tokens (*10^-18)\n', '\n', ' * The contract code itself, as usual, is at the end, after all the connected libraries\n', ' * Developed by 262dfb6c55bf6ac215fac30181bdbfb8a2872cc7e3ea7cffe3a001621bb559e2\n', ' */\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint a, uint b) internal pure returns (uint) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint a, uint b) internal pure returns (uint) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function transfer(address to, uint value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint);\n', '  function transferFrom(address from, address to, uint value) public returns (bool);\n', '  function approve(address spender, uint value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * Fix for the ERC20 short address attack  \n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '   require(msg.data.length >= size + 4);\n', '   _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '    require(_to != address(0) &&\n', '        _value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '    require(_to != address(0) &&\n', '        _value <= balances[_from] &&\n', '        _value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract BRXToken is StandardToken, Ownable {\n', '  using SafeMath for uint;\n', '\n', '  //---------------  Info for ERC20 explorers  -----------------//\n', '  string public constant name = "BRX Coin";\n', '  string public constant symbol = "BRX";\n', '  uint8 public constant decimals = 18;\n', '\n', '  //----------------------  Constants  -------------------------//\n', '  uint private constant atto = 1000000000000000000;\n', '  uint private constant INITIAL_SUPPLY = 15000000 * atto; // 15 mln BRX. Impossible to mint more than this\n', '  uint public totalSupply = INITIAL_SUPPLY;\n', '\n', '  //----------------------  Variables  -------------------------//\n', '  // Made up ICO address (designating the token pool reserved for ICO, no one has access to it)\n', '  address public ico_address = 0x1F01f01f01f01F01F01f01F01F01f01F01f01F01;\n', '  address public teamWallet = 0x58096c1dCd5f338530770B1f6Fe0AcdfB90Cc87B;\n', '  address public addrBRXPay = 0x2F02F02F02F02f02f02f02f02F02F02f02f02f02;\n', '\n', '  uint private current_supply = 0; // Holding the number of all the coins in existence\n', '  uint private ico_starting_supply = 0; // How many atto tokens *were* available for sale at the beginning of the ICO\n', '  uint private current_price_atto_tokens_per_wei = 0; // Holding current price (determined by the algorithm in buy())\n', '\n', '  //--------------  Flags describing ICO stages  ---------------//\n', '  bool private preSoldSharesDistributed = false; // Prevents accidental re-distribution of shares\n', '  bool private isICOOpened = false;\n', '  bool private isICOClosed = false;\n', '  // 3 stages:\n', '  // Contract has just been deployed and initialized. isICOOpened == false, isICOClosed == false\n', '  // ICO has started, now anybody can buy(). isICOOpened == true, isICOClosed == false\n', '  // ICO has finished, now the team can receive the ether. isICOOpened == false, isICOClosed == true\n', '\n', '  //-------------------  Founder Members  ----------------------//\n', '  uint public founderMembers = 0;\n', '  mapping(uint => address) private founderOwner;\n', '  mapping(address => uint) founderMembersInvest;\n', '  \n', '  //----------------------  Premiums  --------------------------//\n', '  uint[] private premiumPacks;\n', '  mapping(address => bool) private premiumICOMember;\n', '  mapping(address => uint) private premiumPacksPaid;\n', '  mapping(address => bool) public frozenAccounts;\n', '\n', '  //-----------------------  Events  ---------------------------//\n', '  event ICOOpened();\n', '  event ICOClosed();\n', '\n', '  event PriceChanged(uint old_price, uint new_price);\n', '  event SupplyChanged(uint supply, uint old_supply);\n', '\n', '  event FrozenFund(address _from, bool _freeze);\n', '\n', '  event BRXAcquired(address account, uint amount_in_wei, uint amount_in_brx);\n', '  event BRXNewFounder(address account, uint amount_in_brx);\n', '\n', '  // ***************************************************************************\n', '  // Constructor\n', '\n', '  function BRXToken() public {\n', '    // Some percentage of the tokens is already reserved by early employees and investors\n', "    // Here we're initializing their balances\n", '    distributePreSoldShares();\n', '\n', '    // Starting price\n', '    current_price_atto_tokens_per_wei = calculateCurrentPrice(1);\n', '\n', '    // Some other initializations\n', '    premiumPacks.length = 0;\n', '  }\n', '\n', '  // Sending ether directly to the contract invokes buy() and assigns tokens to the sender\n', '  function () public payable {\n', '    buy();\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(\n', '    address tokenAddress, uint tokens\n', '  ) public onlyOwner\n', '    returns (bool success) {\n', '    return StandardToken(tokenAddress).transfer(owner, tokens);\n', '  }\n', '\n', '  // ***************************************************************************\n', '\n', '  // Buy token by sending ether here\n', '  //\n', '  // Price is being determined by the algorithm in recalculatePrice()\n', '  // You can also send the ether directly to the contract address\n', '  function buy() public payable {\n', '    require(msg.value != 0 && isICOOpened == true && isICOClosed == false);\n', '\n', '    // Deciding how many tokens can be bought with the ether received\n', '    uint tokens = getAttoTokensAmountPerWeiInternal(msg.value);\n', '\n', "    // Don't allow to buy more than 1% per transaction (secures from huge investors swalling the whole thing in 1 second)\n", '    uint allowedInOneTransaction = current_supply / 100;\n', '    require(tokens < allowedInOneTransaction &&\n', '        tokens <= balances[ico_address]);\n', '\n', '    // Transfer from the ICO pool\n', '    balances[ico_address] = balances[ico_address].sub(tokens); // if not enough, will throw\n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '    premiumICOMember[msg.sender] = true;\n', '    \n', '    // Check if sender has become a founder member\n', '    if (balances[msg.sender] >= 2000000000000000000000) {\n', '        if (founderMembersInvest[msg.sender] == 0) {\n', '            founderOwner[founderMembers] = msg.sender;\n', '            founderMembers++; BRXNewFounder(msg.sender, balances[msg.sender]);\n', '        }\n', '        founderMembersInvest[msg.sender] = balances[msg.sender];\n', '    }\n', '\n', '    // Kick the price changing algo\n', '    uint old_price = current_price_atto_tokens_per_wei;\n', '    current_price_atto_tokens_per_wei = calculateCurrentPrice(getAttoTokensBoughtInICO());\n', '    if (current_price_atto_tokens_per_wei == 0) current_price_atto_tokens_per_wei = 1; // in case it is too small that it gets rounded to zero\n', '    if (current_price_atto_tokens_per_wei > old_price) current_price_atto_tokens_per_wei = old_price; // in case some weird overflow happens\n', '\n', '    // Broadcasting price change event\n', '    if (old_price != current_price_atto_tokens_per_wei) PriceChanged(old_price, current_price_atto_tokens_per_wei);\n', '\n', '    // Broadcasting the buying event\n', '    BRXAcquired(msg.sender, msg.value, tokens);\n', '  }\n', '\n', '  // Formula for the dynamic price change algorithm\n', '  function calculateCurrentPrice(\n', '    uint attoTokensBought\n', '  ) private pure\n', '    returns (uint result) {\n', '    // see http://www.wolframalpha.com/input/?i=f(x)+%3D+395500000+%2F+(x+%2B+150000)+-+136\n', '    // mixing safe and usual math here because the division will throw on inconsistency\n', '    return (395500000 / ((attoTokensBought / atto) + 150000)).sub(136);\n', '  }\n', '\n', '  // ***************************************************************************\n', '  // Functions for the contract owner\n', '\n', '  function openICO() public onlyOwner {\n', '    require(isICOOpened == false && isICOClosed == false);\n', '    isICOOpened = true;\n', '\n', '    ICOOpened();\n', '  }\n', '  function closeICO() public onlyOwner {\n', '    require(isICOClosed == false && isICOOpened == true);\n', '\n', '    isICOOpened = false;\n', '    isICOClosed = true;\n', '\n', '    // Redistribute ICO Tokens that were not bought as the first premiums\n', '    premiumPacks.length = 1;\n', '    premiumPacks[0] = balances[ico_address];\n', '    balances[ico_address] = 0;\n', '\n', '    ICOClosed();\n', '  }\n', '  function pullEtherFromContract() public onlyOwner {\n', '    require(isICOClosed == true); // Only when ICO is closed\n', '    if (!teamWallet.send(this.balance)) {\n', '      revert();\n', '    }\n', '  }\n', '  function freezeAccount(\n', '    address _from, bool _freeze\n', '  ) public onlyOwner\n', '    returns (bool) {\n', '    frozenAccounts[_from] = _freeze;\n', '    FrozenFund(_from, _freeze);  \n', '    return true;\n', '  }\n', '  function setNewBRXPay(\n', '    address newBRXPay\n', '  ) public onlyOwner {\n', '    require(newBRXPay != address(0));\n', '    addrBRXPay = newBRXPay;\n', '  }\n', '  function transferFromBRXPay(\n', '    address _from, address _to, uint _value\n', '  ) public allowedPayments\n', '    returns (bool) {\n', '    require(msg.sender == addrBRXPay && balances[_to].add(_value) > balances[_to] &&\n', '    _value <= balances[_from] && !frozenAccounts[_from] &&\n', '    !frozenAccounts[_to] && _to != address(0));\n', '    \n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function setCurrentPricePerWei(\n', '    uint _new_price  \n', '  ) public onlyOwner\n', '  returns (bool) {\n', '    require(isICOClosed == true && _new_price > 0); // Only when ICO is closed\n', '    uint old_price = current_price_atto_tokens_per_wei;\n', '    current_price_atto_tokens_per_wei = _new_price;\n', '    PriceChanged(old_price, current_price_atto_tokens_per_wei);\n', '  }\n', '\n', '  // ***************************************************************************\n', '  // Some percentage of the tokens is already reserved by early employees and investors\n', "  // Here we're initializing their balances\n", '\n', '  function distributePreSoldShares() private onlyOwner {\n', '    // Making it impossible to call this function twice\n', '    require(preSoldSharesDistributed == false);\n', '    preSoldSharesDistributed = true;\n', '\n', '    // Values are in atto tokens\n', '    balances[0xAEC5cbcCF89fc25e955A53A5a015f7702a14b629] = 7208811 * atto;\n', '    balances[0xAECDCB2a8e2cFB91869A9af30050BEa038034949] = 4025712 * atto;\n', '    balances[0xAECF0B1b6897195295FeeD1146F3732918a5b3E4] = 300275 * atto;\n', '    balances[0xAEC80F0aC04f389E84F3f4b39827087e393EB229] = 150000 * atto;\n', '    balances[0xAECc9545385d858D3142023d3c298a1662Aa45da] = 150000 * atto;\n', '    balances[0xAECE71616d07F609bd2CbD4122FbC9C4a2D11A9D] = 90000 * atto;\n', '    balances[0xAECee3E9686825e0c8ea65f1bC8b1aB613545B8e] = 75000 * atto;\n', '    balances[0xAECC8E8908cE17Dd6dCFFFDCCD561696f396148F] = 202 * atto;\n', '    current_supply = (7208811 + 4025712 + 300275 + 150000 + 150000 + 90000 + 75000 + 202) * atto;\n', '\n', '    // Sending the rest to ICO pool\n', '    balances[ico_address] = INITIAL_SUPPLY.sub(current_supply);\n', '\n', '    // Initializing the supply variables\n', '    ico_starting_supply = balances[ico_address];\n', '    current_supply = INITIAL_SUPPLY;\n', '    SupplyChanged(0, current_supply);\n', '  }\n', '\n', '  // ***************************************************************************\n', '  // Some useful getters (although you can just query the public variables)\n', '\n', '  function getIcoStatus() public view\n', '    returns (string result) {\n', "    return (isICOClosed) ? 'closed' : (isICOOpened) ? 'opened' : 'not opened' ;\n", '  }\n', '  function getCurrentPricePerWei() public view\n', '    returns (uint result) {\n', '    return current_price_atto_tokens_per_wei;\n', '  }\n', '  function getAttoTokensAmountPerWeiInternal(\n', '    uint value\n', '  ) public payable\n', '    returns (uint result) {\n', '    return value * current_price_atto_tokens_per_wei;\n', '  }\n', '  function getAttoTokensAmountPerWei(\n', '    uint value\n', '  ) public view\n', '  returns (uint result) {\n', '    return value * current_price_atto_tokens_per_wei;\n', '  }\n', '  function getAttoTokensLeftForICO() public view\n', '    returns (uint result) {\n', '    return balances[ico_address];\n', '  }\n', '  function getAttoTokensBoughtInICO() public view\n', '    returns (uint result) {\n', '    return ico_starting_supply - getAttoTokensLeftForICO();\n', '  }\n', '  function getPremiumPack(uint index) public view\n', '    returns (uint premium) {\n', '    return premiumPacks[index];\n', '  }\n', '  function getPremiumsAvailable() public view\n', '    returns (uint length) {\n', '    return premiumPacks.length;\n', '  }\n', '  function getBalancePremiumsPaid(\n', '    address account\n', '  ) public view\n', '    returns (uint result) {\n', '    return premiumPacksPaid[account];\n', '  }\n', '  function getAttoTokensToBeFounder() public view\n', '  returns (uint result) {\n', '    return 2000000000000000000000 / getCurrentPricePerWei();\n', '  }\n', '  function getFounderMembersInvest(\n', '    address account\n', '  ) public view\n', '    returns (uint result) {\n', '    return founderMembersInvest[account];\n', '  }\n', '  function getFounderMember(\n', '    uint index\n', '  ) public onlyOwner view\n', '    returns (address account) {\n', '    require(founderMembers >= index && founderOwner[index] != address(0));\n', '    return founderOwner[index];\n', '  }\n', '\n', '  // ***************************************************************************\n', '  // Premiums\n', '\n', '  function sendPremiumPack(\n', '    uint amount\n', '  ) public onlyOwner allowedPayments {\n', '    premiumPacks.length += 1;\n', '    premiumPacks[premiumPacks.length-1] = amount;\n', "    balances[msg.sender] = balances[msg.sender].sub(amount); // will throw and revert the whole thing if doesn't have this amount\n", '  }\n', '  function getPremiums() public allowedPayments\n', '    returns (uint amount) {\n', '    require(premiumICOMember[msg.sender]);\n', '    if (premiumPacks.length > premiumPacksPaid[msg.sender]) {\n', '      uint startPackIndex = premiumPacksPaid[msg.sender];\n', '      uint finishPackIndex = premiumPacks.length - 1;\n', '      uint owingTotal = 0;\n', '      for(uint i = startPackIndex; i <= finishPackIndex; i++) {\n', '        if (current_supply != 0) { // just in case\n', '          uint owing = balances[msg.sender] * premiumPacks[i] / current_supply;\n', '          balances[msg.sender] = balances[msg.sender].add(owing);\n', '          owingTotal = owingTotal + owing;\n', '        }\n', '      }\n', '      premiumPacksPaid[msg.sender] = premiumPacks.length;\n', '      return owingTotal;\n', '    } else {\n', '      revert();\n', '    }\n', '  }\n', '\n', '  // ***************************************************************************\n', '  // Overriding payment functions to take control over the logic\n', '\n', '  modifier allowedPayments() {\n', "    // Don't allow to transfer coins until the ICO ends\n", '    require(isICOOpened == false && isICOClosed == true && !frozenAccounts[msg.sender]);\n', '    _;\n', '  }\n', '  \n', '  function transferFrom(\n', '    address _from, address _to, uint _value\n', '  ) public allowedPayments\n', '    returns (bool) {\n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '  \n', '  function transfer(\n', '    address _to, uint _value\n', '  ) public onlyPayloadSize(2 * 32) allowedPayments\n', '    returns (bool) {\n', '    super.transfer(_to, _value);\n', '  }\n', '\n', '}']
