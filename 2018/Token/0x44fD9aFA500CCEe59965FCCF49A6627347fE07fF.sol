['pragma solidity ^0.4.24;\n', '\n', 'contract ERC223Interface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', ' /**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract WTO is ERC223Interface, Pausable {\n', '    using SafeMath for uint256;\n', '    \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '    \n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    \n', '    event FrozenFunds(address target, bool frozen);\n', '    \n', '    constructor(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    function name() public view returns (string) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public view returns (string) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function freezeAccount(address target, bool freeze) \n', '    public \n', '    onlyOwner\n', '    {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) \n', '    public\n', '    whenNotPaused\n', '    returns (bool) \n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(!frozenAccount[_to]);\n', '        require(!frozenAccount[msg.sender]);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint _value, bytes _data) \n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '    {\n', '        require(_value > 0 );\n', '        require(!frozenAccount[_to]);\n', '        require(!frozenAccount[msg.sender]);\n', '        if(isContract(_to)) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '    \n', '    function isContract(address _addr) \n', '    private\n', '    view\n', '    returns (bool is_contract) \n', '    {\n', '        uint length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length>0);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '    public\n', '    whenNotPaused\n', '    returns (bool) \n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(!frozenAccount[_to]);\n', '        require(!frozenAccount[_from]);\n', '        \n', '        balances[_from] = SafeMath.sub(balances[_from], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) \n', '    public\n', '    whenNotPaused\n', '    returns (bool) \n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) \n', '    public\n', '    view\n', '    returns (uint256) \n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint _addedValue) \n', '    public\n', '    whenNotPaused\n', '    returns (bool) \n', '    {\n', '        allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseApproval(address _spender, uint _subtractedValue) \n', '    public\n', '    whenNotPaused\n', '    returns (bool) \n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    function distributeAirdrop(address[] addresses, uint256 amount) \n', '    public\n', '    returns (bool seccess) \n', '    {\n', '        require(amount > 0);\n', '        require(addresses.length > 0);\n', '        require(!frozenAccount[msg.sender]);\n', '        \n', '        uint256 totalAmount = amount.mul(addresses.length);\n', '        require(balances[msg.sender] >= totalAmount);\n', '        bytes memory empty;\n', '        \n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(addresses[i] != address(0));\n', '            require(!frozenAccount[addresses[i]]);\n', '            balances[addresses[i]] = balances[addresses[i]].add(amount);\n', '            emit Transfer(msg.sender, addresses[i], amount, empty);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function distributeAirdrop(address[] addresses, uint256[] amounts) \n', '    public returns (bool) {\n', '        require(addresses.length > 0);\n', '        require(addresses.length == amounts.length);\n', '        require(!frozenAccount[msg.sender]);\n', '        \n', '        uint256 totalAmount = 0;\n', '        \n', '        for(uint i = 0; i < addresses.length; i++){\n', '            require(amounts[i] > 0);\n', '            require(addresses[i] != address(0));\n', '            require(!frozenAccount[addresses[i]]);\n', '            \n', '            totalAmount = totalAmount.add(amounts[i]);\n', '        }\n', '        require(balances[msg.sender] >= totalAmount);\n', '        \n', '        bytes memory empty;\n', '        for (i = 0; i < addresses.length; i++) {\n', '            balances[addresses[i]] = balances[addresses[i]].add(amounts[i]);\n', '            emit Transfer(msg.sender, addresses[i], amounts[i], empty);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to collect tokens from the list of addresses\n', '     */\n', '    function collectTokens(address[] addresses, uint256[] amounts) \n', '    public\n', '    onlyOwner \n', '    returns (bool) {\n', '        require(addresses.length > 0);\n', '        require(addresses.length == amounts.length);\n', '\n', '        uint256 totalAmount = 0;\n', '        bytes memory empty;\n', '        \n', '        for (uint j = 0; j < addresses.length; j++) {\n', '            require(amounts[j] > 0);\n', '            require(addresses[j] != address(0));\n', '            require(!frozenAccount[addresses[j]]);\n', '                    \n', '            require(balances[addresses[j]] >= amounts[j]);\n', '            balances[addresses[j]] = balances[addresses[j]].sub(amounts[j]);\n', '            totalAmount = totalAmount.add(amounts[j]);\n', '            emit Transfer(addresses[j], msg.sender, amounts[j], empty);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].add(totalAmount);\n', '        return true;\n', '    }\n', '}']