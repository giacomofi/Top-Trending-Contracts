['/*! iam.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\n', '\n', 'pragma solidity 0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if(a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '        OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    bool public paused = false;\n', '\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    modifier whenNotPaused() { require(!paused); _; }\n', '    modifier whenPaused() { require(paused); _; }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', 'contract Withdrawable is Ownable {\n', '    function withdrawEther(address _to, uint _value) onlyOwner public returns(bool) {\n', '        require(_to != address(0));\n', '        require(this.balance >= _value);\n', '\n', '        _to.transfer(_value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function withdrawTokens(ERC20 _token, address _to, uint _value) onlyOwner public returns(bool) {\n', '        require(_to != address(0));\n', '\n', '        return _token.transfer(_to, _value);\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function balanceOf(address who) public view returns(uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '    function approve(address spender, uint256 value) public returns(bool);\n', '}\n', '\n', 'contract ERC223 is ERC20 {\n', '    function transfer(address to, uint256 value, bytes data) public returns(bool);\n', '}\n', '\n', 'contract ERC223Receiving {\n', '    function tokenFallback(address from, uint256 value, bytes data) external;\n', '}\n', '\n', 'contract StandardToken is ERC223 {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns(uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function _transfer(address _to, uint256 _value, bytes _data) private returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        bool is_contract = false;\n', '        assembly {\n', '            is_contract := not(iszero(extcodesize(_to)))\n', '        }\n', '\n', '        if(is_contract) {\n', '            ERC223Receiving receiver = ERC223Receiving(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        bytes memory empty;\n', '        return _transfer(_to, _value, empty);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns(bool) {\n', '        return _transfer(_to, _value, _data);\n', '    }\n', '    \n', '    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n', '        require(_to.length == _value.length);\n', '\n', '        for(uint i = 0; i < _to.length; i++) {\n', '            transfer(_to[i], _value[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '\n', '        if(_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() { require(!mintingFinished); _; }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns(bool) {\n', '        mintingFinished = true;\n', '\n', '        MintFinished();\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '    uint256 public cap;\n', '\n', '    function CappedToken(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n', '        require(totalSupply.add(_amount) <= cap);\n', '\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '/*\n', '    ICO IAM\n', '*/\n', 'contract Token is CappedToken, BurnableToken, Withdrawable {\n', '    function Token() CappedToken(70000000 * 1 ether) StandardToken("IAM Aero", "IAM", 18) public {\n', '        \n', '    }\n', '\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external {\n', '        require(false);\n', '    }\n', '\n', '    function transferOwner(address _from, address _to, uint256 _value) onlyOwner canMint public returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        bool is_contract = false;\n', '        assembly {\n', '            is_contract := not(iszero(extcodesize(_to)))\n', '        }\n', '\n', '        if(is_contract) {\n', '            bytes memory empty;\n', '            ERC223Receiving receiver = ERC223Receiving(_to);\n', '            receiver.tokenFallback(_from, _value, empty);\n', '        }\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Pausable, Withdrawable, ERC223Receiving {\n', '    using SafeMath for uint;\n', '\n', '    struct Step {\n', '        uint priceTokenWei;\n', '        uint tokensForSale;\n', '        uint minInvestEth;\n', '        uint tokensSold;\n', '        uint collectedWei;\n', '\n', '        bool transferBalance;\n', '        bool sale;\n', '        bool issue;\n', '    }\n', '\n', '    Token public token;\n', '    address public beneficiary = 0x4ae7bdf9530cdB666FC14DF79C169e14504c621A;\n', '\n', '    Step[] public steps;\n', '    uint8 public currentStep = 0;\n', '\n', '    bool public crowdsaleClosed = false;\n', '\n', '    mapping(address => uint256) public canSell;\n', '\n', '    event Purchase(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n', '    event Issue(address indexed holder, uint256 tokenAmount);\n', '    event Sell(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n', '    event NewRate(uint256 rate);\n', '    event NextStep(uint8 step);\n', '    event CrowdsaleClose();\n', '\n', '    function Crowdsale() public {\n', '        token = new Token();\n', '\n', '        steps.push(Step(1 ether / 1000, 1000000 * 1 ether, 0.01 ether, 0, 0, true, false, true));\n', '        steps.push(Step(1 ether / 1000, 1500000 * 1 ether, 0.01 ether, 0, 0, true, false, true));\n', '        steps.push(Step(1 ether / 1000, 3000000 * 1 ether, 0.01 ether, 0, 0, true, false, true));\n', '        steps.push(Step(1 ether / 1000, 9000000 * 1 ether, 0.01 ether, 0, 0, true, false, true));\n', '        steps.push(Step(1 ether / 1000, 35000000 * 1 ether, 0.01 ether, 0, 0, true, false, true));\n', '        steps.push(Step(1 ether / 1000, 20500000 * 1 ether, 0.01 ether, 0, 0, true, true, true));\n', '    }\n', '\n', '    function() payable public {\n', '        purchase();\n', '    }\n', '\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external {\n', '        sell(_value);\n', '    }\n', '\n', '    function setTokenRate(uint _value) onlyOwner public {\n', '        require(!crowdsaleClosed);\n', '\n', '        steps[currentStep].priceTokenWei = 1 ether / _value;\n', '\n', '        NewRate(steps[currentStep].priceTokenWei);\n', '    }\n', '    \n', '    function purchase() whenNotPaused payable public {\n', '        require(!crowdsaleClosed);\n', '\n', '        Step memory step = steps[currentStep];\n', '\n', '        require(msg.value >= step.minInvestEth);\n', '        require(step.tokensSold < step.tokensForSale);\n', '\n', '        uint sum = msg.value;\n', '        uint amount = sum.mul(1 ether).div(step.priceTokenWei);\n', '        uint retSum = 0;\n', '        \n', '        if(step.tokensSold.add(amount) > step.tokensForSale) {\n', '            uint retAmount = step.tokensSold.add(amount).sub(step.tokensForSale);\n', '            retSum = retAmount.mul(step.priceTokenWei).div(1 ether);\n', '\n', '            amount = amount.sub(retAmount);\n', '            sum = sum.sub(retSum);\n', '        }\n', '\n', '        steps[currentStep].tokensSold = step.tokensSold.add(amount);\n', '        steps[currentStep].collectedWei = step.collectedWei.add(sum);\n', '\n', '        if(currentStep == 0) {\n', '            canSell[msg.sender] = canSell[msg.sender].add(amount);\n', '        }\n', '\n', '        if(step.transferBalance) {\n', '            uint p1 = sum.div(200);\n', '            (0xD8C7f2215f90463c158E91b92D81f0A1E3187C1B).transfer(p1.mul(3));\n', '            (0x8C8d80effb2c5C1E4D857e286822E0E641cA3836).transfer(p1.mul(3));\n', '            beneficiary.transfer(sum.sub(p1.mul(6)));\n', '        }\n', '        token.mint(msg.sender, amount);\n', '\n', '        if(retSum > 0) {\n', '            msg.sender.transfer(retSum);\n', '        }\n', '\n', '        Purchase(msg.sender, amount, sum);\n', '    }\n', '    \n', '    function issue(address _to, uint256 _value) onlyOwner whenNotPaused public {\n', '        require(!crowdsaleClosed);\n', '\n', '        Step memory step = steps[currentStep];\n', '        \n', '        require(step.issue);\n', '        require(step.tokensSold.add(_value) <= step.tokensForSale);\n', '\n', '        steps[currentStep].tokensSold = step.tokensSold.add(_value);\n', '\n', '        if(currentStep == 0) {\n', '            canSell[_to] = canSell[_to].add(_value);\n', '        }\n', '\n', '        token.mint(_to, _value);\n', '\n', '        Issue(_to, _value);\n', '    }\n', '\n', '    function sell(uint256 _value) whenNotPaused public {\n', '        require(!crowdsaleClosed);\n', '\n', '        require(canSell[msg.sender] >= _value);\n', '        require(token.balanceOf(msg.sender) >= _value);\n', '\n', '        Step memory step = steps[currentStep];\n', '        \n', '        require(step.sale);\n', '\n', '        canSell[msg.sender] = canSell[msg.sender].sub(_value);\n', '        token.transferOwner(msg.sender, beneficiary, _value);\n', '\n', '        uint sum = _value.mul(step.priceTokenWei).div(1 ether);\n', '\n', '        msg.sender.transfer(sum);\n', '\n', '        Sell(msg.sender, _value, sum);\n', '    }\n', '\n', '    function nextStep(uint _value) onlyOwner public {\n', '        require(!crowdsaleClosed);\n', '        require(steps.length - 1 > currentStep);\n', '        \n', '        currentStep += 1;\n', '\n', '        setTokenRate(_value);\n', '\n', '        NextStep(currentStep);\n', '    }\n', '\n', '    function closeCrowdsale() onlyOwner public {\n', '        require(!crowdsaleClosed);\n', '        \n', '        beneficiary.transfer(this.balance);\n', '        token.mint(beneficiary, token.cap().sub(token.totalSupply()));\n', '        token.finishMinting();\n', '        token.transferOwnership(beneficiary);\n', '\n', '        crowdsaleClosed = true;\n', '\n', '        CrowdsaleClose();\n', '    }\n', '}']