['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract CryptoStrippers{\n', '\n', '    uint256 public COINS_TO_HATCH_1STRIPPERS = 86400;\n', '    uint256 public STARTING_STRIPPERS = 500;\n', '    uint256 PSN = 10000;\n', '    uint256 PSNH = 5000;\n', '    bool public initialized = true;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public hatcheryStrippers;\n', '    mapping (address => uint256) public claimedCoins;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketCoins;\n', '\n', '\n', '    function CryptoStrippers() public{\n', '        ceoAddress = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev hatchCoins produce coins\n', '    */\n', '    function hatchCoins(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender){\n', '            referrals[msg.sender] = ref;\n', '        }\n', '        uint256 coinsUsed = getMyCoins();\n', '        uint256 newStrippers = SafeMath.div(coinsUsed,COINS_TO_HATCH_1STRIPPERS);\n', '        hatcheryStrippers[msg.sender] = SafeMath.add(hatcheryStrippers[msg.sender],newStrippers);\n', '        claimedCoins[msg.sender] = 0;\n', '        lastHatch[msg.sender] = now;\n', '        claimedCoins[referrals[msg.sender]] = SafeMath.add(claimedCoins[referrals[msg.sender]],SafeMath.div(coinsUsed,5));\n', '        marketCoins = SafeMath.add(marketCoins,SafeMath.div(coinsUsed,10));\n', '    }\n', '\n', '    function sellCoins() public{\n', '        require(initialized);\n', '        uint256 hasCoins = getMyCoins();\n', '        uint256 coinValue = calculateCoinSell(hasCoins);\n', '        uint256 fee = devFee(coinValue);\n', '        claimedCoins[msg.sender] = 0;\n', '        lastHatch[msg.sender] = now;\n', '        marketCoins = SafeMath.add(marketCoins,hasCoins);\n', '        ceoAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(coinValue,fee));\n', '    }\n', '\n', '    function buyCoins() public payable{\n', '        require(initialized);\n', '        uint256 coinsBought = calculateCoinBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        coinsBought = SafeMath.sub(coinsBought,devFee(coinsBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedCoins[msg.sender] = SafeMath.add(claimedCoins[msg.sender],coinsBought);\n', '    }\n', '\n', '    /**\n', '    * @dev Computational cost\n', '    */\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '\n', '    function calculateCoinSell(uint256 coins) public view returns(uint256){\n', '        return calculateTrade(coins,marketCoins,this.balance);\n', '    }\n', '\n', '    function calculateCoinBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketCoins);\n', '    }\n', '\n', '    function calculateCoinBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateCoinBuy(eth,this.balance);\n', '    }\n', '\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '\n', '    function seedMarket(uint256 coins) public payable{\n', '        require(marketCoins==0);\n', '        initialized=true;\n', '        marketCoins=coins;\n', '    }\n', '\n', '    function getFreeStrippers() public{\n', '        require(initialized);\n', '        require(hatcheryStrippers[msg.sender]==0);\n', '        lastHatch[msg.sender]=now;\n', '        hatcheryStrippers[msg.sender]=STARTING_STRIPPERS;\n', '    }\n', '\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '\n', '    function getMyStrippers() public view returns(uint256){\n', '        return hatcheryStrippers[msg.sender];\n', '    }\n', '\n', '    function getMyCoins() public view returns(uint256){\n', '        return SafeMath.add(claimedCoins[msg.sender],getCoinsSinceLastHatch(msg.sender));\n', '    }\n', '\n', '    function getCoinsSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(COINS_TO_HATCH_1STRIPPERS,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryStrippers[adr]);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract CryptoStrippers{\n', '\n', '    uint256 public COINS_TO_HATCH_1STRIPPERS = 86400;\n', '    uint256 public STARTING_STRIPPERS = 500;\n', '    uint256 PSN = 10000;\n', '    uint256 PSNH = 5000;\n', '    bool public initialized = true;\n', '    address public ceoAddress;\n', '    mapping (address => uint256) public hatcheryStrippers;\n', '    mapping (address => uint256) public claimedCoins;\n', '    mapping (address => uint256) public lastHatch;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketCoins;\n', '\n', '\n', '    function CryptoStrippers() public{\n', '        ceoAddress = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev hatchCoins produce coins\n', '    */\n', '    function hatchCoins(address ref) public{\n', '        require(initialized);\n', '        if(referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender){\n', '            referrals[msg.sender] = ref;\n', '        }\n', '        uint256 coinsUsed = getMyCoins();\n', '        uint256 newStrippers = SafeMath.div(coinsUsed,COINS_TO_HATCH_1STRIPPERS);\n', '        hatcheryStrippers[msg.sender] = SafeMath.add(hatcheryStrippers[msg.sender],newStrippers);\n', '        claimedCoins[msg.sender] = 0;\n', '        lastHatch[msg.sender] = now;\n', '        claimedCoins[referrals[msg.sender]] = SafeMath.add(claimedCoins[referrals[msg.sender]],SafeMath.div(coinsUsed,5));\n', '        marketCoins = SafeMath.add(marketCoins,SafeMath.div(coinsUsed,10));\n', '    }\n', '\n', '    function sellCoins() public{\n', '        require(initialized);\n', '        uint256 hasCoins = getMyCoins();\n', '        uint256 coinValue = calculateCoinSell(hasCoins);\n', '        uint256 fee = devFee(coinValue);\n', '        claimedCoins[msg.sender] = 0;\n', '        lastHatch[msg.sender] = now;\n', '        marketCoins = SafeMath.add(marketCoins,hasCoins);\n', '        ceoAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(coinValue,fee));\n', '    }\n', '\n', '    function buyCoins() public payable{\n', '        require(initialized);\n', '        uint256 coinsBought = calculateCoinBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        coinsBought = SafeMath.sub(coinsBought,devFee(coinsBought));\n', '        ceoAddress.transfer(devFee(msg.value));\n', '        claimedCoins[msg.sender] = SafeMath.add(claimedCoins[msg.sender],coinsBought);\n', '    }\n', '\n', '    /**\n', '    * @dev Computational cost\n', '    */\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '\n', '    function calculateCoinSell(uint256 coins) public view returns(uint256){\n', '        return calculateTrade(coins,marketCoins,this.balance);\n', '    }\n', '\n', '    function calculateCoinBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,marketCoins);\n', '    }\n', '\n', '    function calculateCoinBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateCoinBuy(eth,this.balance);\n', '    }\n', '\n', '    function devFee(uint256 amount) public view returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,4),100);\n', '    }\n', '\n', '    function seedMarket(uint256 coins) public payable{\n', '        require(marketCoins==0);\n', '        initialized=true;\n', '        marketCoins=coins;\n', '    }\n', '\n', '    function getFreeStrippers() public{\n', '        require(initialized);\n', '        require(hatcheryStrippers[msg.sender]==0);\n', '        lastHatch[msg.sender]=now;\n', '        hatcheryStrippers[msg.sender]=STARTING_STRIPPERS;\n', '    }\n', '\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '\n', '    function getMyStrippers() public view returns(uint256){\n', '        return hatcheryStrippers[msg.sender];\n', '    }\n', '\n', '    function getMyCoins() public view returns(uint256){\n', '        return SafeMath.add(claimedCoins[msg.sender],getCoinsSinceLastHatch(msg.sender));\n', '    }\n', '\n', '    function getCoinsSinceLastHatch(address adr) public view returns(uint256){\n', '        uint256 secondsPassed=min(COINS_TO_HATCH_1STRIPPERS,SafeMath.sub(now,lastHatch[adr]));\n', '        return SafeMath.mul(secondsPassed,hatcheryStrippers[adr]);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
