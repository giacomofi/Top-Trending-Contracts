['pragma solidity ^0.4.16;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract VixcoreToken2 is Owned {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;   \n', ' \n', '    uint public totalTokenSold; \n', '    uint public totalWeiReceived;  \n', '    uint public weiBalance;  \n', '\n', '    //EVENTS\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    //ETH Withdrawn\n', '    event Withdrawal(address receiver, uint amount);\n', '\n', '    //Token is purchased using Selfdrop\n', '    event Selfdrop(address backer, uint weiAmount, uint token);\n', '\n', '    //Over softcap set for Selfdrop\n', '    event OverSoftCap(address receiver, uint weiAmount);\n', '\n', '\n', '\n', '\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function VixcoreToken2(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        owner = msg.sender; \n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    } \n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    } \n', '\n', '    /**\n', '     * Default function when someone&#39;s transferring to this contract \n', '     * The next 3 functions are the same\n', '     */  \n', '    function () payable public {\n', '        _pay();\n', '    }\n', '\n', '    function pay() payable public {  \n', '        _pay();\n', '    }  \n', '\n', '    function _pay() internal { \n', '        uint weiValue = msg.value; \n', '        uint phase1 = 2500000000000000000000000000;\n', '        uint phase2 = phase1 + 1500000000000000000000000000;\n', '        uint phase3 = phase2 + 1000000000000000000000000000; //phase 3 should be less than supply\n', '\n', '        if(totalTokenSold <= phase1){\n', '            _exchange(weiValue, 5000000);\n', '        }else if(totalTokenSold <= phase2){\n', '            _exchange(weiValue, 4000000);\n', '        }else if(totalTokenSold <= phase3){\n', '            _exchange(weiValue, 3500000);\n', '        }else{\n', '            emit OverSoftCap(msg.sender, weiValue);\n', '        } \n', '    }\n', '\n', '    function _exchange(uint weiValue, uint rate) internal {\n', '        uint tokenEquiv = tokenEquivalent(weiValue, rate);  \n', '        _transfer(owner, msg.sender, tokenEquiv); \n', '        totalWeiReceived += weiValue;\n', '        weiBalance += weiValue;\n', '        totalTokenSold += tokenEquiv;\n', '        emit Selfdrop(msg.sender, weiValue, tokenEquiv); \n', '    }\n', '\n', '    function tokenEquivalent(uint weiValue, uint rate) public returns (uint) {\n', '        return weiValue * rate;\n', '    } \n', '\n', '\n', '    /**\n', '     * Withdraw the funds\n', '     *\n', '     * Send the benefeciary some Wei\n', '     * This function will emit the Withdrawal event if send it successful\n', '     * Only owner can call this function \n', '     */\n', '    function withdraw(uint _amount) onlyOwner public {\n', '        require(_amount > 0);\n', '        require(_amount <= weiBalance);     // Amount withdraw should be less or equal to balance\n', '        if (owner.send(_amount)) {\n', '            weiBalance -= _amount;\n', '            emit Withdrawal(owner, _amount);\n', '        }else{\n', '            throw;\n', '        }\n', '    }\n', '\n', '\n', '}']