['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \n', '}\n', '\n', 'contract KJC {\n', '    // Public variables of the token\n', '    string public name = "KimJ Coin";\n', '    string public symbol = "KJC";\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply =2000000* (10 ** 18);\n', '    uint256 public totaldivineTokensIssued = 0;\n', '    \n', '    address owner = msg.sender;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    // Owner to authorized \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // ICO Variables \n', '    bool public saleEnabled = true;\n', '    uint256 public totalEthereumRaised = 0;\n', '    uint256 public KJCPerEthereum = 10000;\n', '    \n', '    function KJC() public {\n', '        balanceOf[owner] += totalSupply;              // Give the creator all initial tokens\n', '    }\n', '\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal \n', '    {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        // Fire Event\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     * Send `_value` tokens to `_to` from your account\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public \n', '    {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)\n', '     {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) \n', '    {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowance[msg.sender][_spender] != 0) { return false; }\n', ' \n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) \n', '    {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    // ICO \n', '    function() public payable {\n', '        require(saleEnabled);\n', '        \n', '        if (msg.value == 0) { return; }\n', '\n', '        owner.transfer(msg.value);\n', '        totalEthereumRaised += msg.value;\n', '\n', '        uint256 tokensIssued = (msg.value * KJCPerEthereum);\n', '\n', '        // The user buys at least 10 finney to qualify for divine multiplication\n', '        if (msg.value >= 10 finney) \n', '        {\n', '\n', '            bytes20 divineHash = ripemd160(block.coinbase, block.number, block.timestamp);\n', '            if (divineHash[0] == 0 || divineHash[0] == 1) \n', '            {\n', '                uint8 divineMultiplier =\n', '                    ((divineHash[1] & 0x01 != 0) ? 1 : 0) + ((divineHash[1] & 0x02 != 0) ? 1 : 0) +\n', '                    ((divineHash[1] & 0x04 != 0) ? 1 : 0) + ((divineHash[1] & 0x08 != 0) ? 1 : 0);\n', '                \n', '                uint256 divineTokensIssued = (msg.value * KJCPerEthereum) * divineMultiplier;\n', '                tokensIssued += divineTokensIssued;\n', '\n', '                totaldivineTokensIssued += divineTokensIssued;\n', '            }\n', '        }\n', '\n', '        totalSupply += tokensIssued;\n', '        balanceOf[msg.sender] += tokensIssued;\n', '        \n', '        Transfer(address(this), msg.sender, tokensIssued);\n', '    }\n', '\n', '    function disablePurchasing() public\n', '    {\n', '        require(msg.sender == owner);\n', '        saleEnabled = false;\n', '    }\n', '\n', '    function getStats() public constant returns (uint256, uint256, uint256, bool) {\n', '        return (totalEthereumRaised, totalSupply, totaldivineTokensIssued, saleEnabled);\n', '    }\n', '}']