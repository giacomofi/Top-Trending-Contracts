['pragma solidity ^0.4.20;\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ForeignTokenProvider is Ownable {\n', '    function withdrawForeignTokens(address _tokenContract) public onlyOwner returns (bool) {\n', '        ForeignToken foreignToken = ForeignToken(_tokenContract);\n', '        uint256 amount = foreignToken.balanceOf(address(this));\n', '\n', '        return foreignToken.transfer(owner, amount);\n', '    }\n', '}\n', '\n', 'contract XataToken is ForeignTokenProvider {\n', '    bool public purchasingAllowed = false;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    uint256 public totalContribution = 0;\n', '    uint256 public totalBonusTokensIssued = 0;\n', '    uint256 public totalSupply = 0;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function name() public pure returns (string) {return "Sobirayu na Xatu";}\n', '\n', '    function symbol() public pure returns (string) {return "XATA";}\n', '\n', '    function decimals() public pure returns (uint32) {return 18;}\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\n', '        if (_value == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 fromBalance = balances[msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance >= _value;\n', '        bool overflowed = balances[_to] + _value < balances[_to];\n', '\n', '        if (!sufficientFunds || overflowed) {\n', '          return false;\n', '        }\n', '\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (_value == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 fromBalance = balances[_from];\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance <= _value;\n', '        bool sufficientAllowance = allowance <= _value;\n', '        bool overflowed = balances[_to] + _value > balances[_to];\n', '\n', '        if (sufficientFunds && sufficientAllowance && !overflowed) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '\n', '            allowed[_from][msg.sender] -= _value;\n', '\n', '            emit Transfer(_from, _to, _value);\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) {\n', '            return false;\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function mintBonus(address _to) public onlyOwner {\n', '        uint256 bonusValue = 10 * 1 ether;\n', '\n', '        totalBonusTokensIssued += bonusValue;\n', '        totalSupply += bonusValue;\n', '        balances[_to] += bonusValue;\n', '\n', '        emit Transfer(address(this), _to, bonusValue);\n', '    }\n', '\n', '    function enablePurchasing() public onlyOwner {\n', '        purchasingAllowed = true;\n', '    }\n', '\n', '    function disablePurchasing() public onlyOwner {\n', '        purchasingAllowed = false;\n', '    }\n', '\n', '    function getStats() public constant returns (uint256, uint256, uint256, bool) {\n', '        return (totalContribution, totalSupply, totalBonusTokensIssued, purchasingAllowed);\n', '    }\n', '\n', '    function() external payable {\n', '        require(purchasingAllowed);\n', '        require(msg.value > 0);\n', '\n', '        owner.transfer(msg.value);\n', '        totalContribution += msg.value;\n', '\n', '        uint256 tokensIssued = (msg.value * 100);\n', '\n', '        if (msg.value >= 10 finney) {\n', '            tokensIssued += totalContribution;\n', '            totalBonusTokensIssued += totalContribution;\n', '        }\n', '\n', '        totalSupply += tokensIssued;\n', '        balances[msg.sender] += tokensIssued;\n', '\n', '        emit Transfer(address(this), msg.sender, tokensIssued);\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ForeignTokenProvider is Ownable {\n', '    function withdrawForeignTokens(address _tokenContract) public onlyOwner returns (bool) {\n', '        ForeignToken foreignToken = ForeignToken(_tokenContract);\n', '        uint256 amount = foreignToken.balanceOf(address(this));\n', '\n', '        return foreignToken.transfer(owner, amount);\n', '    }\n', '}\n', '\n', 'contract XataToken is ForeignTokenProvider {\n', '    bool public purchasingAllowed = false;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    uint256 public totalContribution = 0;\n', '    uint256 public totalBonusTokensIssued = 0;\n', '    uint256 public totalSupply = 0;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function name() public pure returns (string) {return "Sobirayu na Xatu";}\n', '\n', '    function symbol() public pure returns (string) {return "XATA";}\n', '\n', '    function decimals() public pure returns (uint32) {return 18;}\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\n', '        if (_value == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 fromBalance = balances[msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance >= _value;\n', '        bool overflowed = balances[_to] + _value < balances[_to];\n', '\n', '        if (!sufficientFunds || overflowed) {\n', '          return false;\n', '        }\n', '\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (_value == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 fromBalance = balances[_from];\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance <= _value;\n', '        bool sufficientAllowance = allowance <= _value;\n', '        bool overflowed = balances[_to] + _value > balances[_to];\n', '\n', '        if (sufficientFunds && sufficientAllowance && !overflowed) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '\n', '            allowed[_from][msg.sender] -= _value;\n', '\n', '            emit Transfer(_from, _to, _value);\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) {\n', '            return false;\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function mintBonus(address _to) public onlyOwner {\n', '        uint256 bonusValue = 10 * 1 ether;\n', '\n', '        totalBonusTokensIssued += bonusValue;\n', '        totalSupply += bonusValue;\n', '        balances[_to] += bonusValue;\n', '\n', '        emit Transfer(address(this), _to, bonusValue);\n', '    }\n', '\n', '    function enablePurchasing() public onlyOwner {\n', '        purchasingAllowed = true;\n', '    }\n', '\n', '    function disablePurchasing() public onlyOwner {\n', '        purchasingAllowed = false;\n', '    }\n', '\n', '    function getStats() public constant returns (uint256, uint256, uint256, bool) {\n', '        return (totalContribution, totalSupply, totalBonusTokensIssued, purchasingAllowed);\n', '    }\n', '\n', '    function() external payable {\n', '        require(purchasingAllowed);\n', '        require(msg.value > 0);\n', '\n', '        owner.transfer(msg.value);\n', '        totalContribution += msg.value;\n', '\n', '        uint256 tokensIssued = (msg.value * 100);\n', '\n', '        if (msg.value >= 10 finney) {\n', '            tokensIssued += totalContribution;\n', '            totalBonusTokensIssued += totalContribution;\n', '        }\n', '\n', '        totalSupply += tokensIssued;\n', '        balances[msg.sender] += tokensIssued;\n', '\n', '        emit Transfer(address(this), msg.sender, tokensIssued);\n', '    }\n', '}']
