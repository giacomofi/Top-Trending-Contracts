['pragma solidity ^0.4.11;\n', '\n', 'interface ERC20 {\n', '    function totalSupply() public constant returns (uint256 totalSup);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'interface ERC223 {\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract WXC is ERC223, ERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint public constant _totalSupply = 2100000000e18;\n', '    //starting supply of Token\n', '    \n', '    string public constant symbol = "WXC";\n', '    string public constant name = "WIIX Coin";\n', '    uint8 public constant decimals = 18;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    function WXC() public{\n', '        balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256 totalSup) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(\n', '            balances[msg.sender] >= _value\n', '            && _value > 0\n', '            && !isContract(_to)\n', '        );\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success){\n', '        require(\n', '            balances[msg.sender] >= _value\n', '            && _value > 0\n', '            && isContract(_to)\n', '        );\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        ERC223ReceivingContract(_to).tokenFallback(msg.sender, _value, _data);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '    \n', '    function isContract(address _from) private constant returns (bool) {\n', '        uint256 codeSize;\n', '        assembly {\n', '            codeSize := extcodesize(_from)\n', '        }\n', '        return codeSize > 0;\n', '    }\n', '    \n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(\n', '            allowed[_from][msg.sender] >= _value  \n', '            && balances[_from] >= _value\n', '            && _value > 0\n', '            && allowed[_from][msg.sender] > 0\n', '        );\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaing) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']