['pragma solidity ^0.4.20;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '    uint32 public decimals;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require( newOwner != address(0) );\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract BGXToken is Ownable, StandardToken{\n', '\n', '    address public crowdsaleAddress;\n', '    bool public initialized = false;\n', '    uint256 public totalSupplyTmp = 0;\n', '\n', '    uint256 public teamDate;\n', '    address public teamAddress;\n', '\n', '    modifier onlyCrowdsale {\n', '        require(\n', '            msg.sender == crowdsaleAddress\n', '        );\n', '        _;\n', '    }\n', '\n', '    // fix for short address attack\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length == size + 4);\n', '        _;\n', '    }\n', '\n', '    function BGXToken() public\n', '    {\n', '        name                    = "BGX Token";\n', '        symbol                  = "BGX";\n', '        decimals                = 18;\n', '        totalSupply             = 1000000000 ether;\n', '        balances[address(this)] = totalSupply;\n', '    }\n', '\n', '\n', '    function distribute( address _to, uint256 _value ) public onlyCrowdsale returns( bool )\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[address(this)]);\n', '\n', '        balances[address(this)] = balances[address(this)].sub(_value);\n', '        totalSupplyTmp = totalSupplyTmp.add( _value );\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function finally( address _teamAddress ) public onlyCrowdsale returns( bool )\n', '    {\n', '        balances[address(this)] = 0;\n', '        teamAddress = _teamAddress;\n', '        teamDate = now + 1 years;\n', '        totalSupply = totalSupplyTmp;\n', '\n', '        return true;\n', '    }\n', '\n', '    function setCrowdsaleInterface( address _addr) public onlyOwner returns( bool )\n', '    {\n', '        require( !initialized );\n', '\n', '        crowdsaleAddress = _addr;\n', '        initialized = true;\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32)  returns (bool) {\n', '\n', '        if( msg.sender == teamAddress ) require( now >= teamDate );\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '\n', '        if( msg.sender == teamAddress ) require( now >= teamDate );\n', '\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '\n', '    }\n', '}']