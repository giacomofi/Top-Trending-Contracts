['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/* solium-disable security/no-low-level-calls */\n', '\n', '/**\n', ' * @title ERC827 interface, an extension of ERC20 token standard\n', ' *\n', ' * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '  function approveAndCall( address _spender, uint256 _value, bytes _data) public payable returns (bool);\n', '  function transferAndCall( address _to, uint256 _value, bytes _data) public payable returns (bool);\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC827, an extension of ERC20 token standard\n', ' *\n', ' * @dev Implementation the ERC827, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' *\n', ' * @dev Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, StandardToken {\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. It allows to\n', '   * @dev approve the transfer of value and execute a call with the sent data.\n', '   *\n', '   * @dev Beware that changing an allowance with this method brings the risk that\n', '   * @dev someone may use both the old and the new allowance by unfortunate\n', '   * @dev transaction ordering. One possible solution to mitigate this race condition\n', '   * @dev is to first reduce the spender&#39;s allowance to 0 and set the desired value\n', '   * @dev afterwards:\n', '   * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * @param _spender The address that will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.approve(_spender, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '   * @dev address and execute a call with the sent data on the same transaction\n', '   *\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\n', '    require(_to != address(this));\n', '\n', '    super.transfer(_to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '   * @dev another and make a contract call on the same transaction\n', '   *\n', '   * @param _from The address which you want to send tokens from\n', '   * @param _to The address which you want to transfer to\n', '   * @param _value The amout of tokens to be transferred\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public payable returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transferFrom(_from, _to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To increment\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function increaseApprovalAndCall(address _spender, uint _addedValue, bytes _data) public payable returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.increaseApproval(_spender, _addedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To decrement\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function decreaseApprovalAndCall(address _spender, uint _subtractedValue, bytes _data) public payable returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MainframeToken\n', ' */\n', '\n', 'contract MainframeToken is ERC827Token, Pausable, Claimable {\n', '  string public constant name = "Mainframe Token";\n', '  string public constant symbol = "MFT";\n', '  uint8  public constant decimals = 18;\n', '  address public distributor;\n', '\n', '  modifier validDestination(address to) {\n', '    require(to != address(this));\n', '    _;\n', '  }\n', '\n', '  modifier isTradeable() {\n', '    require(\n', '      !paused ||\n', '      msg.sender == owner ||\n', '      msg.sender == distributor\n', '    );\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '    totalSupply_ = 10000000000 ether; // 10 billion, 18 decimals (ether = 10^18)\n', '    balances[msg.sender] = totalSupply_;\n', '    emit Transfer(address(0x0), msg.sender, totalSupply_);\n', '  }\n', '\n', '  // ERC20 Methods\n', '\n', '  function transfer(address to, uint256 value) public validDestination(to) isTradeable returns (bool) {\n', '    return super.transfer(to, value);\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public validDestination(to) isTradeable returns (bool) {\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '\n', '  function approve(address spender, uint256 value) public isTradeable returns (bool) {\n', '    return super.approve(spender, value);\n', '  }\n', '\n', '  function increaseApproval(address spender, uint addedValue) public isTradeable returns (bool) {\n', '    return super.increaseApproval(spender, addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address spender, uint subtractedValue) public isTradeable returns (bool) {\n', '    return super.decreaseApproval(spender, subtractedValue);\n', '  }\n', '\n', '  // ERC827 Methods\n', '\n', '  function transferAndCall(address to, uint256 value, bytes data) public payable isTradeable returns (bool) {\n', '    return super.transferAndCall(to, value, data);\n', '  }\n', '\n', '  function transferFromAndCall(address from, address to, uint256 value, bytes data) public payable isTradeable returns (bool) {\n', '    return super.transferFromAndCall(from, to, value, data);\n', '  }\n', '\n', '  function approveAndCall(address spender, uint256 value, bytes data) public payable isTradeable returns (bool) {\n', '    return super.approveAndCall(spender, value, data);\n', '  }\n', '\n', '  function increaseApprovalAndCall(address spender, uint addedValue, bytes data) public payable isTradeable returns (bool) {\n', '    return super.increaseApprovalAndCall(spender, addedValue, data);\n', '  }\n', '\n', '  function decreaseApprovalAndCall(address spender, uint subtractedValue, bytes data) public payable isTradeable returns (bool) {\n', '    return super.decreaseApprovalAndCall(spender, subtractedValue, data);\n', '  }\n', '\n', '  // Setters\n', '\n', '  function setDistributor(address newDistributor) external onlyOwner {\n', '    distributor = newDistributor;\n', '  }\n', '\n', '  // Token Drain\n', '\n', '  function emergencyERC20Drain(ERC20 token, uint256 amount) external onlyOwner {\n', '    // owner can drain tokens that are sent here by mistake\n', '    token.transfer(owner, amount);\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract StakeInterface {\n', '  function hasStake(address _address) external view returns (bool);\n', '}\n', '\n', '\n', '\n', 'contract MainframeStake is Ownable, StakeInterface {\n', '  using SafeMath for uint256;\n', '\n', '  ERC20 token;\n', '  uint256 public arrayLimit = 200;\n', '  uint256 public totalDepositBalance;\n', '  uint256 public requiredStake;\n', '  mapping (address => uint256) public balances;\n', '\n', '  struct Staker {\n', '    uint256 stakedAmount;\n', '    address stakerAddress;\n', '  }\n', '\n', '  mapping (address => Staker) public whitelist; // map of whitelisted addresses for efficient hasStaked check\n', '\n', '  constructor(address tokenAddress) public {\n', '    token = ERC20(tokenAddress);\n', '    requiredStake = 1 ether; // ether = 10^18\n', '  }\n', '\n', '  /**\n', '  * @dev Staking MFT for a node address\n', '  * @param staker representing the address of the person staking (not msg.sender in case of calling from other contract)\n', '  * @param whitelistAddress representing the address of the node you want to stake for\n', '  */\n', '\n', '  function stake(address staker, address whitelistAddress) external returns (bool success) {\n', '    require(whitelist[whitelistAddress].stakerAddress == 0x0);\n', '    require(staker == msg.sender || (msg.sender == address(token) && staker == tx.origin));\n', '\n', '    whitelist[whitelistAddress].stakerAddress = staker;\n', '    whitelist[whitelistAddress].stakedAmount = requiredStake;\n', '\n', '    deposit(staker, requiredStake);\n', '    emit Staked(staker);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Unstake a staked node address, will remove from whitelist and refund stake\n', '  * @param whitelistAddress representing the staked node address\n', '  */\n', '\n', '  function unstake(address whitelistAddress) external {\n', '    require(whitelist[whitelistAddress].stakerAddress == msg.sender);\n', '\n', '    uint256 stakedAmount = whitelist[whitelistAddress].stakedAmount;\n', '    delete whitelist[whitelistAddress];\n', '\n', '    withdraw(msg.sender, stakedAmount);\n', '    emit Unstaked(msg.sender);\n', '  }\n', '\n', '  /**\n', '  * @dev Deposit stake amount\n', '  * @param fromAddress representing the address to deposit from\n', '  * @param depositAmount representing amount being deposited\n', '  */\n', '\n', '  function deposit(address fromAddress, uint256 depositAmount) private returns (bool success) {\n', '    token.transferFrom(fromAddress, this, depositAmount);\n', '    balances[fromAddress] = balances[fromAddress].add(depositAmount);\n', '    totalDepositBalance = totalDepositBalance.add(depositAmount);\n', '    emit Deposit(fromAddress, depositAmount, balances[fromAddress]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Withdraw funds after unstaking\n', '  * @param toAddress representing the stakers address to withdraw to\n', '  * @param withdrawAmount representing stake amount being withdrawn\n', '  */\n', '\n', '  function withdraw(address toAddress, uint256 withdrawAmount) private returns (bool success) {\n', '    require(balances[toAddress] >= withdrawAmount);\n', '    token.transfer(toAddress, withdrawAmount);\n', '    balances[toAddress] = balances[toAddress].sub(withdrawAmount);\n', '    totalDepositBalance = totalDepositBalance.sub(withdrawAmount);\n', '    emit Withdrawal(toAddress, withdrawAmount, balances[toAddress]);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _address) external view returns (uint256 balance) {\n', '    return balances[_address];\n', '  }\n', '\n', '  function totalStaked() external view returns (uint256) {\n', '    return totalDepositBalance;\n', '  }\n', '\n', '  function hasStake(address _address) external view returns (bool) {\n', '    return whitelist[_address].stakedAmount > 0;\n', '  }\n', '\n', '  function requiredStake() external view returns (uint256) {\n', '    return requiredStake;\n', '  }\n', '\n', '  function setRequiredStake(uint256 value) external onlyOwner {\n', '    requiredStake = value;\n', '  }\n', '\n', '  function setArrayLimit(uint256 newLimit) external onlyOwner {\n', '    arrayLimit = newLimit;\n', '  }\n', '\n', '  function refundBalances(address[] addresses) external onlyOwner {\n', '    require(addresses.length <= arrayLimit);\n', '    for (uint256 i = 0; i < addresses.length; i++) {\n', '      address _address = addresses[i];\n', '      require(balances[_address] > 0);\n', '      token.transfer(_address, balances[_address]);\n', '      totalDepositBalance = totalDepositBalance.sub(balances[_address]);\n', '      emit RefundedBalance(_address, balances[_address]);\n', '      balances[_address] = 0;\n', '    }\n', '  }\n', '\n', '  function emergencyERC20Drain(ERC20 _token) external onlyOwner {\n', '    // owner can drain tokens that are sent here by mistake\n', '    uint256 drainAmount;\n', '    if (address(_token) == address(token)) {\n', '      drainAmount = _token.balanceOf(this).sub(totalDepositBalance);\n', '    } else {\n', '      drainAmount = _token.balanceOf(this);\n', '    }\n', '    _token.transfer(owner, drainAmount);\n', '  }\n', '\n', '  function destroy() external onlyOwner {\n', '    require(token.balanceOf(this) == 0);\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  event Staked(address indexed owner);\n', '  event Unstaked(address indexed owner);\n', '  event Deposit(address indexed _address, uint256 depositAmount, uint256 balance);\n', '  event Withdrawal(address indexed _address, uint256 withdrawAmount, uint256 balance);\n', '  event RefundedBalance(address indexed _address, uint256 refundAmount);\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/* solium-disable security/no-low-level-calls */\n', '\n', '/**\n', ' * @title ERC827 interface, an extension of ERC20 token standard\n', ' *\n', ' * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '  function approveAndCall( address _spender, uint256 _value, bytes _data) public payable returns (bool);\n', '  function transferAndCall( address _to, uint256 _value, bytes _data) public payable returns (bool);\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC827, an extension of ERC20 token standard\n', ' *\n', ' * @dev Implementation the ERC827, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' *\n', ' * @dev Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, StandardToken {\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. It allows to\n', '   * @dev approve the transfer of value and execute a call with the sent data.\n', '   *\n', '   * @dev Beware that changing an allowance with this method brings the risk that\n', '   * @dev someone may use both the old and the new allowance by unfortunate\n', '   * @dev transaction ordering. One possible solution to mitigate this race condition\n', "   * @dev is to first reduce the spender's allowance to 0 and set the desired value\n", '   * @dev afterwards:\n', '   * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * @param _spender The address that will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.approve(_spender, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '   * @dev address and execute a call with the sent data on the same transaction\n', '   *\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferAndCall(address _to, uint256 _value, bytes _data) public payable returns (bool) {\n', '    require(_to != address(this));\n', '\n', '    super.transfer(_to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '   * @dev another and make a contract call on the same transaction\n', '   *\n', '   * @param _from The address which you want to send tokens from\n', '   * @param _to The address which you want to transfer to\n', '   * @param _value The amout of tokens to be transferred\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public payable returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transferFrom(_from, _to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To increment\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function increaseApprovalAndCall(address _spender, uint _addedValue, bytes _data) public payable returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.increaseApproval(_spender, _addedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To decrement\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function decreaseApprovalAndCall(address _spender, uint _subtractedValue, bytes _data) public payable returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MainframeToken\n', ' */\n', '\n', 'contract MainframeToken is ERC827Token, Pausable, Claimable {\n', '  string public constant name = "Mainframe Token";\n', '  string public constant symbol = "MFT";\n', '  uint8  public constant decimals = 18;\n', '  address public distributor;\n', '\n', '  modifier validDestination(address to) {\n', '    require(to != address(this));\n', '    _;\n', '  }\n', '\n', '  modifier isTradeable() {\n', '    require(\n', '      !paused ||\n', '      msg.sender == owner ||\n', '      msg.sender == distributor\n', '    );\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '    totalSupply_ = 10000000000 ether; // 10 billion, 18 decimals (ether = 10^18)\n', '    balances[msg.sender] = totalSupply_;\n', '    emit Transfer(address(0x0), msg.sender, totalSupply_);\n', '  }\n', '\n', '  // ERC20 Methods\n', '\n', '  function transfer(address to, uint256 value) public validDestination(to) isTradeable returns (bool) {\n', '    return super.transfer(to, value);\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public validDestination(to) isTradeable returns (bool) {\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '\n', '  function approve(address spender, uint256 value) public isTradeable returns (bool) {\n', '    return super.approve(spender, value);\n', '  }\n', '\n', '  function increaseApproval(address spender, uint addedValue) public isTradeable returns (bool) {\n', '    return super.increaseApproval(spender, addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address spender, uint subtractedValue) public isTradeable returns (bool) {\n', '    return super.decreaseApproval(spender, subtractedValue);\n', '  }\n', '\n', '  // ERC827 Methods\n', '\n', '  function transferAndCall(address to, uint256 value, bytes data) public payable isTradeable returns (bool) {\n', '    return super.transferAndCall(to, value, data);\n', '  }\n', '\n', '  function transferFromAndCall(address from, address to, uint256 value, bytes data) public payable isTradeable returns (bool) {\n', '    return super.transferFromAndCall(from, to, value, data);\n', '  }\n', '\n', '  function approveAndCall(address spender, uint256 value, bytes data) public payable isTradeable returns (bool) {\n', '    return super.approveAndCall(spender, value, data);\n', '  }\n', '\n', '  function increaseApprovalAndCall(address spender, uint addedValue, bytes data) public payable isTradeable returns (bool) {\n', '    return super.increaseApprovalAndCall(spender, addedValue, data);\n', '  }\n', '\n', '  function decreaseApprovalAndCall(address spender, uint subtractedValue, bytes data) public payable isTradeable returns (bool) {\n', '    return super.decreaseApprovalAndCall(spender, subtractedValue, data);\n', '  }\n', '\n', '  // Setters\n', '\n', '  function setDistributor(address newDistributor) external onlyOwner {\n', '    distributor = newDistributor;\n', '  }\n', '\n', '  // Token Drain\n', '\n', '  function emergencyERC20Drain(ERC20 token, uint256 amount) external onlyOwner {\n', '    // owner can drain tokens that are sent here by mistake\n', '    token.transfer(owner, amount);\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract StakeInterface {\n', '  function hasStake(address _address) external view returns (bool);\n', '}\n', '\n', '\n', '\n', 'contract MainframeStake is Ownable, StakeInterface {\n', '  using SafeMath for uint256;\n', '\n', '  ERC20 token;\n', '  uint256 public arrayLimit = 200;\n', '  uint256 public totalDepositBalance;\n', '  uint256 public requiredStake;\n', '  mapping (address => uint256) public balances;\n', '\n', '  struct Staker {\n', '    uint256 stakedAmount;\n', '    address stakerAddress;\n', '  }\n', '\n', '  mapping (address => Staker) public whitelist; // map of whitelisted addresses for efficient hasStaked check\n', '\n', '  constructor(address tokenAddress) public {\n', '    token = ERC20(tokenAddress);\n', '    requiredStake = 1 ether; // ether = 10^18\n', '  }\n', '\n', '  /**\n', '  * @dev Staking MFT for a node address\n', '  * @param staker representing the address of the person staking (not msg.sender in case of calling from other contract)\n', '  * @param whitelistAddress representing the address of the node you want to stake for\n', '  */\n', '\n', '  function stake(address staker, address whitelistAddress) external returns (bool success) {\n', '    require(whitelist[whitelistAddress].stakerAddress == 0x0);\n', '    require(staker == msg.sender || (msg.sender == address(token) && staker == tx.origin));\n', '\n', '    whitelist[whitelistAddress].stakerAddress = staker;\n', '    whitelist[whitelistAddress].stakedAmount = requiredStake;\n', '\n', '    deposit(staker, requiredStake);\n', '    emit Staked(staker);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Unstake a staked node address, will remove from whitelist and refund stake\n', '  * @param whitelistAddress representing the staked node address\n', '  */\n', '\n', '  function unstake(address whitelistAddress) external {\n', '    require(whitelist[whitelistAddress].stakerAddress == msg.sender);\n', '\n', '    uint256 stakedAmount = whitelist[whitelistAddress].stakedAmount;\n', '    delete whitelist[whitelistAddress];\n', '\n', '    withdraw(msg.sender, stakedAmount);\n', '    emit Unstaked(msg.sender);\n', '  }\n', '\n', '  /**\n', '  * @dev Deposit stake amount\n', '  * @param fromAddress representing the address to deposit from\n', '  * @param depositAmount representing amount being deposited\n', '  */\n', '\n', '  function deposit(address fromAddress, uint256 depositAmount) private returns (bool success) {\n', '    token.transferFrom(fromAddress, this, depositAmount);\n', '    balances[fromAddress] = balances[fromAddress].add(depositAmount);\n', '    totalDepositBalance = totalDepositBalance.add(depositAmount);\n', '    emit Deposit(fromAddress, depositAmount, balances[fromAddress]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Withdraw funds after unstaking\n', '  * @param toAddress representing the stakers address to withdraw to\n', '  * @param withdrawAmount representing stake amount being withdrawn\n', '  */\n', '\n', '  function withdraw(address toAddress, uint256 withdrawAmount) private returns (bool success) {\n', '    require(balances[toAddress] >= withdrawAmount);\n', '    token.transfer(toAddress, withdrawAmount);\n', '    balances[toAddress] = balances[toAddress].sub(withdrawAmount);\n', '    totalDepositBalance = totalDepositBalance.sub(withdrawAmount);\n', '    emit Withdrawal(toAddress, withdrawAmount, balances[toAddress]);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _address) external view returns (uint256 balance) {\n', '    return balances[_address];\n', '  }\n', '\n', '  function totalStaked() external view returns (uint256) {\n', '    return totalDepositBalance;\n', '  }\n', '\n', '  function hasStake(address _address) external view returns (bool) {\n', '    return whitelist[_address].stakedAmount > 0;\n', '  }\n', '\n', '  function requiredStake() external view returns (uint256) {\n', '    return requiredStake;\n', '  }\n', '\n', '  function setRequiredStake(uint256 value) external onlyOwner {\n', '    requiredStake = value;\n', '  }\n', '\n', '  function setArrayLimit(uint256 newLimit) external onlyOwner {\n', '    arrayLimit = newLimit;\n', '  }\n', '\n', '  function refundBalances(address[] addresses) external onlyOwner {\n', '    require(addresses.length <= arrayLimit);\n', '    for (uint256 i = 0; i < addresses.length; i++) {\n', '      address _address = addresses[i];\n', '      require(balances[_address] > 0);\n', '      token.transfer(_address, balances[_address]);\n', '      totalDepositBalance = totalDepositBalance.sub(balances[_address]);\n', '      emit RefundedBalance(_address, balances[_address]);\n', '      balances[_address] = 0;\n', '    }\n', '  }\n', '\n', '  function emergencyERC20Drain(ERC20 _token) external onlyOwner {\n', '    // owner can drain tokens that are sent here by mistake\n', '    uint256 drainAmount;\n', '    if (address(_token) == address(token)) {\n', '      drainAmount = _token.balanceOf(this).sub(totalDepositBalance);\n', '    } else {\n', '      drainAmount = _token.balanceOf(this);\n', '    }\n', '    _token.transfer(owner, drainAmount);\n', '  }\n', '\n', '  function destroy() external onlyOwner {\n', '    require(token.balanceOf(this) == 0);\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  event Staked(address indexed owner);\n', '  event Unstaked(address indexed owner);\n', '  event Deposit(address indexed _address, uint256 depositAmount, uint256 balance);\n', '  event Withdrawal(address indexed _address, uint256 withdrawAmount, uint256 balance);\n', '  event RefundedBalance(address indexed _address, uint256 refundAmount);\n', '}']
