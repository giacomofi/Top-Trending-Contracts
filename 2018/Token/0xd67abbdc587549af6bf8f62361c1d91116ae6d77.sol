['pragma solidity 0.4.19;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/ICNQToken.sol\n', '\n', '/**\n', ' * @title ICNQ Token contract - ERC20 compatible token contract.\n', ' * @author Gustavo Guimaraes - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="690e1c1a1d081f060e1c0004081b080c1a290e04080005470a0604">[email&#160;protected]</a>>\n', ' */\n', 'contract ICNQToken is PausableToken, MintableToken {\n', '    string public constant name = "Iconiq Lab Token";\n', '    string public constant symbol = "ICNQ";\n', '    uint8 public constant decimals = 18;\n', '}\n', '\n', '// File: contracts/Whitelist.sol\n', '\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) public allowedAddresses;\n', '\n', '    event WhitelistUpdated(uint256 timestamp, string operation, address indexed member);\n', '\n', '    function addToWhitelist(address[] _addresses) public onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = true;\n', '            WhitelistUpdated(now, "Added", _addresses[i]);\n', '        }\n', '    }\n', '\n', '    function removeFromWhitelist(address[] _addresses) public onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = false;\n', '            WhitelistUpdated(now, "Removed", _addresses[i]);\n', '        }\n', '    }\n', '\n', '    function isWhitelisted(address _address) public view returns (bool) {\n', '        return allowedAddresses[_address];\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: contracts/ICNQCrowdsale.sol\n', '\n', '/**\n', ' * @title ICNQ Crowdsale contract - crowdsale contract for the ICNQ tokens.\n', ' * @author Gustavo Guimaraes - <gustavoguimara<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5d382e1d3a303c3431733e3230">[email&#160;protected]</a>>\n', ' */\n', 'contract ICNQCrowdsale is FinalizableCrowdsale, Pausable {\n', '    uint256 public presaleEndTime;\n', '\n', '    // token supply figures\n', '    uint256 constant public TOTAL_TOKENS_SUPPLY = 20000000e18; // 20M\n', '\n', '    uint256 public constant OPTIONAL_POOL = 4650000e18; // 4.65M\n', '    uint256 public constant FINLAB_PRESALE = 2000000e18; // 2M\n', '    uint256 public constant EOS = 2000000e18; // 2M\n', '    uint256 public constant US_INSTITUTIONAL = 1500000e18; // 1.5M\n', '    uint256 public constant PRIVATE_SALE_TOTAL = OPTIONAL_POOL + FINLAB_PRESALE + EOS + US_INSTITUTIONAL; // 10.15M\n', '\n', '    // 10.15 of the private sale + 750K for presale\n', '    uint256 constant public PRE_SALE_TOTAL_TOKENS = PRIVATE_SALE_TOTAL + 750000e18;\n', '    // 10.15 of the private sale + 750K for presale + 3M for crowdsale\n', '    uint256 constant public TOTAL_TOKENS_FOR_CROWDSALE = PRE_SALE_TOTAL_TOKENS + 3000000e18;\n', '\n', '    uint256 public constant TEAM_ADVISORS_SHARE = 3100000e18; // 3.1M\n', '    uint256 public constant COMPANY_SHARE = 2000000e18; // 2M\n', '    uint256 public constant BOUNTY_CAMPAIGN_SHARE = 1000000e18; // 1M\n', '\n', '    address public teamAndAdvisorsAllocation;\n', '\n', '    event PrivateInvestorTokenPurchase(address indexed investor, uint256 tokensPurchased);\n', '    event TokenRateChanged(uint256 previousRate, uint256 newRate);\n', '\n', '    // external contracts\n', '    Whitelist public whitelist;\n', '\n', '    /**\n', '     * @dev Contract constructor function\n', '     * @param _startTime The timestamp of the beginning of the crowdsale\n', '     * @param _presaleEndTime End of presale in timestamp\n', '     * @param _endTime Timestamp when the crowdsale will finish\n', '     * @param _whitelist contract containing the whitelisted addresses\n', '     * @param _rate The token rate per ETH\n', '     * @param _wallet Multisig wallet that will hold the crowdsale funds.\n', '     */\n', '    function ICNQCrowdsale\n', '        (\n', '            uint256 _startTime,\n', '            uint256 _presaleEndTime,\n', '            uint256 _endTime,\n', '            address _whitelist,\n', '            uint256 _rate,\n', '            address _wallet\n', '        )\n', '        public\n', '        FinalizableCrowdsale()\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    {\n', '        require(_whitelist != address(0));\n', '\n', '        presaleEndTime = _presaleEndTime;\n', '        whitelist = Whitelist(_whitelist);\n', '        ICNQToken(token).pause();\n', '    }\n', '\n', '    modifier whitelisted(address beneficiary) {\n', '        require(whitelist.isWhitelisted(beneficiary));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint tokens for private investors before crowdsale starts\n', '     * @param investorsAddress Purchaser&#39;s address\n', '     * @param tokensPurchased Tokens purchased during pre crowdsale\n', '     */\n', '    function mintTokenForPrivateInvestors(address investorsAddress, uint256 tokensPurchased)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(now < startTime && investorsAddress != address(0));\n', '        require(token.totalSupply().add(tokensPurchased) <= PRIVATE_SALE_TOTAL);\n', '\n', '        token.mint(investorsAddress, tokensPurchased);\n', '        PrivateInvestorTokenPurchase(investorsAddress, tokensPurchased);\n', '    }\n', '\n', '    /**\n', '     * @dev change crowdsale rate\n', '     * @param newRate Figure that corresponds to the new rate per token\n', '     */\n', '    function setRate(uint256 newRate) external onlyOwner {\n', '        require(newRate != 0);\n', '\n', '        TokenRateChanged(rate, newRate);\n', '        rate = newRate;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the address which should receive the vested team tokens share on finalization\n', '     * @param _teamAndAdvisorsAllocation address of team and advisor allocation contract\n', '     */\n', '    function setTeamWalletAddress(address _teamAndAdvisorsAllocation) public onlyOwner {\n', '        // only able to set teamAndAdvisorsAllocation once.\n', '        // TeamAndAdvisorsAllocation contract requires token contract already deployed.\n', '        // token contract is created within crowdsale,\n', '        // thus the TeamAndAdvisorsAllocation must be set up after crowdsale&#39;s deployment\n', '        require(teamAndAdvisorsAllocation == address(0x0) && _teamAndAdvisorsAllocation != address(0x0));\n', '\n', '        teamAndAdvisorsAllocation = _teamAndAdvisorsAllocation;\n', '    }\n', '\n', '    /**\n', '     * @dev payable function that allow token purchases\n', '     * @param beneficiary Address of the purchaser\n', '     */\n', '    function buyTokens(address beneficiary)\n', '        public\n', '        whenNotPaused\n', '        whitelisted(beneficiary)\n', '        payable\n', '    {\n', '        // minimum of 1 ether for purchase in the public presale and sale\n', '        require(beneficiary != address(0) && msg.value >= 1 ether);\n', '        require(validPurchase() && token.totalSupply() < TOTAL_TOKENS_FOR_CROWDSALE);\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        if (now >= startTime && now <= presaleEndTime) {\n', '            uint256 bonus = 50;\n', '            uint256 bonusTokens = tokens.mul(bonus).div(100);\n', '\n', '            tokens = tokens.add(bonusTokens);\n', '            require(token.totalSupply().add(tokens) <= PRE_SALE_TOTAL_TOKENS);\n', '        }\n', '\n', '        //remainder logic\n', '        if (token.totalSupply().add(tokens) > TOTAL_TOKENS_FOR_CROWDSALE) {\n', '            tokens = TOTAL_TOKENS_FOR_CROWDSALE.sub(token.totalSupply());\n', '            weiAmount = tokens.div(rate);\n', '\n', '            // send remainder wei to sender\n', '            uint256 remainderAmount = msg.value.sub(weiAmount);\n', '            msg.sender.transfer(remainderAmount);\n', '        }\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.mint(beneficiary, tokens);\n', '\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds(weiAmount);\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        if (token.totalSupply() == TOTAL_TOKENS_FOR_CROWDSALE) {\n', '            return true;\n', '        }\n', '\n', '        return super.hasEnded();\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds(uint256 weiAmount) internal {\n', '        wallet.transfer(weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev finalizes crowdsale\n', '     */\n', '    function finalization() internal {\n', '        // This must have been set manually prior to finalize().\n', '        require(teamAndAdvisorsAllocation != address(0));\n', '\n', '        token.mint(wallet, COMPANY_SHARE);\n', '        token.mint(wallet, BOUNTY_CAMPAIGN_SHARE); // allocate BOUNTY_CAMPAIGN_SHARE to company wallet as well\n', '        token.mint(teamAndAdvisorsAllocation, TEAM_ADVISORS_SHARE);\n', '\n', '        if (TOTAL_TOKENS_SUPPLY > token.totalSupply()) {\n', '            uint256 remainingTokens = TOTAL_TOKENS_SUPPLY.sub(token.totalSupply());\n', '            // burn remaining tokens\n', '            token.mint(address(0), remainingTokens);\n', '        }\n', '\n', '        token.finishMinting();\n', '        ICNQToken(token).unpause();\n', '        super.finalization();\n', '    }\n', '\n', '    /**\n', '     * @dev Creates ICNQ token contract. This is called on the constructor function of the Crowdsale contract\n', '     */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new ICNQToken();\n', '    }\n', '}']
['pragma solidity 0.4.19;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/ICNQToken.sol\n', '\n', '/**\n', ' * @title ICNQ Token contract - ERC20 compatible token contract.\n', ' * @author Gustavo Guimaraes - <gustavoguimaraes@gmail.com>\n', ' */\n', 'contract ICNQToken is PausableToken, MintableToken {\n', '    string public constant name = "Iconiq Lab Token";\n', '    string public constant symbol = "ICNQ";\n', '    uint8 public constant decimals = 18;\n', '}\n', '\n', '// File: contracts/Whitelist.sol\n', '\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) public allowedAddresses;\n', '\n', '    event WhitelistUpdated(uint256 timestamp, string operation, address indexed member);\n', '\n', '    function addToWhitelist(address[] _addresses) public onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = true;\n', '            WhitelistUpdated(now, "Added", _addresses[i]);\n', '        }\n', '    }\n', '\n', '    function removeFromWhitelist(address[] _addresses) public onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = false;\n', '            WhitelistUpdated(now, "Removed", _addresses[i]);\n', '        }\n', '    }\n', '\n', '    function isWhitelisted(address _address) public view returns (bool) {\n', '        return allowedAddresses[_address];\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: contracts/ICNQCrowdsale.sol\n', '\n', '/**\n', ' * @title ICNQ Crowdsale contract - crowdsale contract for the ICNQ tokens.\n', ' * @author Gustavo Guimaraes - <gustavoguimaraes@gmail.com>\n', ' */\n', 'contract ICNQCrowdsale is FinalizableCrowdsale, Pausable {\n', '    uint256 public presaleEndTime;\n', '\n', '    // token supply figures\n', '    uint256 constant public TOTAL_TOKENS_SUPPLY = 20000000e18; // 20M\n', '\n', '    uint256 public constant OPTIONAL_POOL = 4650000e18; // 4.65M\n', '    uint256 public constant FINLAB_PRESALE = 2000000e18; // 2M\n', '    uint256 public constant EOS = 2000000e18; // 2M\n', '    uint256 public constant US_INSTITUTIONAL = 1500000e18; // 1.5M\n', '    uint256 public constant PRIVATE_SALE_TOTAL = OPTIONAL_POOL + FINLAB_PRESALE + EOS + US_INSTITUTIONAL; // 10.15M\n', '\n', '    // 10.15 of the private sale + 750K for presale\n', '    uint256 constant public PRE_SALE_TOTAL_TOKENS = PRIVATE_SALE_TOTAL + 750000e18;\n', '    // 10.15 of the private sale + 750K for presale + 3M for crowdsale\n', '    uint256 constant public TOTAL_TOKENS_FOR_CROWDSALE = PRE_SALE_TOTAL_TOKENS + 3000000e18;\n', '\n', '    uint256 public constant TEAM_ADVISORS_SHARE = 3100000e18; // 3.1M\n', '    uint256 public constant COMPANY_SHARE = 2000000e18; // 2M\n', '    uint256 public constant BOUNTY_CAMPAIGN_SHARE = 1000000e18; // 1M\n', '\n', '    address public teamAndAdvisorsAllocation;\n', '\n', '    event PrivateInvestorTokenPurchase(address indexed investor, uint256 tokensPurchased);\n', '    event TokenRateChanged(uint256 previousRate, uint256 newRate);\n', '\n', '    // external contracts\n', '    Whitelist public whitelist;\n', '\n', '    /**\n', '     * @dev Contract constructor function\n', '     * @param _startTime The timestamp of the beginning of the crowdsale\n', '     * @param _presaleEndTime End of presale in timestamp\n', '     * @param _endTime Timestamp when the crowdsale will finish\n', '     * @param _whitelist contract containing the whitelisted addresses\n', '     * @param _rate The token rate per ETH\n', '     * @param _wallet Multisig wallet that will hold the crowdsale funds.\n', '     */\n', '    function ICNQCrowdsale\n', '        (\n', '            uint256 _startTime,\n', '            uint256 _presaleEndTime,\n', '            uint256 _endTime,\n', '            address _whitelist,\n', '            uint256 _rate,\n', '            address _wallet\n', '        )\n', '        public\n', '        FinalizableCrowdsale()\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    {\n', '        require(_whitelist != address(0));\n', '\n', '        presaleEndTime = _presaleEndTime;\n', '        whitelist = Whitelist(_whitelist);\n', '        ICNQToken(token).pause();\n', '    }\n', '\n', '    modifier whitelisted(address beneficiary) {\n', '        require(whitelist.isWhitelisted(beneficiary));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint tokens for private investors before crowdsale starts\n', "     * @param investorsAddress Purchaser's address\n", '     * @param tokensPurchased Tokens purchased during pre crowdsale\n', '     */\n', '    function mintTokenForPrivateInvestors(address investorsAddress, uint256 tokensPurchased)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(now < startTime && investorsAddress != address(0));\n', '        require(token.totalSupply().add(tokensPurchased) <= PRIVATE_SALE_TOTAL);\n', '\n', '        token.mint(investorsAddress, tokensPurchased);\n', '        PrivateInvestorTokenPurchase(investorsAddress, tokensPurchased);\n', '    }\n', '\n', '    /**\n', '     * @dev change crowdsale rate\n', '     * @param newRate Figure that corresponds to the new rate per token\n', '     */\n', '    function setRate(uint256 newRate) external onlyOwner {\n', '        require(newRate != 0);\n', '\n', '        TokenRateChanged(rate, newRate);\n', '        rate = newRate;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the address which should receive the vested team tokens share on finalization\n', '     * @param _teamAndAdvisorsAllocation address of team and advisor allocation contract\n', '     */\n', '    function setTeamWalletAddress(address _teamAndAdvisorsAllocation) public onlyOwner {\n', '        // only able to set teamAndAdvisorsAllocation once.\n', '        // TeamAndAdvisorsAllocation contract requires token contract already deployed.\n', '        // token contract is created within crowdsale,\n', "        // thus the TeamAndAdvisorsAllocation must be set up after crowdsale's deployment\n", '        require(teamAndAdvisorsAllocation == address(0x0) && _teamAndAdvisorsAllocation != address(0x0));\n', '\n', '        teamAndAdvisorsAllocation = _teamAndAdvisorsAllocation;\n', '    }\n', '\n', '    /**\n', '     * @dev payable function that allow token purchases\n', '     * @param beneficiary Address of the purchaser\n', '     */\n', '    function buyTokens(address beneficiary)\n', '        public\n', '        whenNotPaused\n', '        whitelisted(beneficiary)\n', '        payable\n', '    {\n', '        // minimum of 1 ether for purchase in the public presale and sale\n', '        require(beneficiary != address(0) && msg.value >= 1 ether);\n', '        require(validPurchase() && token.totalSupply() < TOTAL_TOKENS_FOR_CROWDSALE);\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        if (now >= startTime && now <= presaleEndTime) {\n', '            uint256 bonus = 50;\n', '            uint256 bonusTokens = tokens.mul(bonus).div(100);\n', '\n', '            tokens = tokens.add(bonusTokens);\n', '            require(token.totalSupply().add(tokens) <= PRE_SALE_TOTAL_TOKENS);\n', '        }\n', '\n', '        //remainder logic\n', '        if (token.totalSupply().add(tokens) > TOTAL_TOKENS_FOR_CROWDSALE) {\n', '            tokens = TOTAL_TOKENS_FOR_CROWDSALE.sub(token.totalSupply());\n', '            weiAmount = tokens.div(rate);\n', '\n', '            // send remainder wei to sender\n', '            uint256 remainderAmount = msg.value.sub(weiAmount);\n', '            msg.sender.transfer(remainderAmount);\n', '        }\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.mint(beneficiary, tokens);\n', '\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds(weiAmount);\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        if (token.totalSupply() == TOTAL_TOKENS_FOR_CROWDSALE) {\n', '            return true;\n', '        }\n', '\n', '        return super.hasEnded();\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds(uint256 weiAmount) internal {\n', '        wallet.transfer(weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev finalizes crowdsale\n', '     */\n', '    function finalization() internal {\n', '        // This must have been set manually prior to finalize().\n', '        require(teamAndAdvisorsAllocation != address(0));\n', '\n', '        token.mint(wallet, COMPANY_SHARE);\n', '        token.mint(wallet, BOUNTY_CAMPAIGN_SHARE); // allocate BOUNTY_CAMPAIGN_SHARE to company wallet as well\n', '        token.mint(teamAndAdvisorsAllocation, TEAM_ADVISORS_SHARE);\n', '\n', '        if (TOTAL_TOKENS_SUPPLY > token.totalSupply()) {\n', '            uint256 remainingTokens = TOTAL_TOKENS_SUPPLY.sub(token.totalSupply());\n', '            // burn remaining tokens\n', '            token.mint(address(0), remainingTokens);\n', '        }\n', '\n', '        token.finishMinting();\n', '        ICNQToken(token).unpause();\n', '        super.finalization();\n', '    }\n', '\n', '    /**\n', '     * @dev Creates ICNQ token contract. This is called on the constructor function of the Crowdsale contract\n', '     */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new ICNQToken();\n', '    }\n', '}']
