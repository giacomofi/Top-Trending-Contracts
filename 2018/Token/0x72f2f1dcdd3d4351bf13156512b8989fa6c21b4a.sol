['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned () public {\n', '        owner = msg.sender; \n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { \n', '    function receiveApproval (address _from, uint256 _value, address _token, bytes _extraData) public; \n', '    \n', '}\n', '\n', 'contract RewardsCoin is owned {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal maxSupply;  \n', '    string public name; \n', '    string public symbol; \n', '    uint256 public decimals;  \n', '    uint256 public totalSupply; \n', '    address public beneficiary;\n', '    address public dev1; \n', '    address public dev2;\n', '    address public market1;\n', '    address public market2; \n', '    address public bounty;\n', '    address public lockedTokens;\n', '    uint256 public burnt;\n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event Burnfrom(address indexed _from, uint256 value);\n', '\n', '    function RewardsCoin() public {\n', '            \n', '        name = "Rewards Coin";    \n', '        symbol = "REW";    \n', '        decimals = 18;\n', '        burnt = 0;\n', '        maxSupply = 25000000 * (10 ** decimals);   \n', '        totalSupply = totalSupply.add(maxSupply);\n', '        beneficiary = 0x89F2843837Ba5363b3550560184AC181924aCE4E;\n', '\n', '        //Dev 1 Account\n', '        dev1 = 0x4a194a5560a8DA2eaDAfc2F82B5793848685e1d3;\n', '\n', '        //Dev 2 Account\n', '        dev2 = 0x94e77bd7C7a53C533014d53F1965bea2BbD89744;\n', '\n', '        //Advertising & Exchanges account\n', '        market1 = 0xd08F5062378d4DC60127AF6c86AA5224678725DD;\n', '        market2 = 0xA6f5C8AaD4f88894E7eA844C29AcebF5A1110435;\n', '\n', '        //Bounties Account\n', '        bounty = 0x6171a92418fFd0F7CD2687d83B323BaF6A2987A9;\n', '\n', '        //Locked Tokens Account\n', '        lockedTokens = 0x0778DDC022A0ffaB843c6F3Cb49763Bdeb7C79C4;\n', '\n', '        //Distribution of Tokens to wallets\n', '        balanceOf[beneficiary]  = balanceOf[beneficiary].add(maxSupply.sub(7500000 * (10 ** decimals))); //17,500,000 (ICO + Pre-sale)\n', '        balanceOf[dev1]         = balanceOf[dev1].add(maxSupply.sub(24812500 * (10 ** decimals))); //187,500\n', '        balanceOf[dev2]         = balanceOf[dev2].add(maxSupply.sub(24437500 * (10 ** decimals))); //562,500\n', '        balanceOf[market1]      = balanceOf[market1].add(maxSupply.sub(24625000 * (10 ** decimals))); //375,000\n', '        balanceOf[market2]      = balanceOf[market2].add(maxSupply.sub(24625000 * (10 ** decimals))); //375,000\n', '        balanceOf[bounty]       = balanceOf[bounty].add(maxSupply.sub(24000000 * (10 ** decimals))); //1,000,000\n', '        balanceOf[lockedTokens] = balanceOf[lockedTokens].add(maxSupply.sub(20000000 * (10 ** decimals))); //5,000,000\n', '\n', '    }\n', '    \n', '    function nameChange(string _name, string _symbol) public onlyOwner {\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        if (frozenAccount[msg.sender]) revert(); \n', '        if (balanceOf[msg.sender] < _value) revert() ;           \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); \n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);          \n', '    }\n', '    \n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public\n', '        returns (bool success) {    \n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (frozenAccount[_from]) revert();                        // Check if frozen  \n', '        if (balanceOf[_from] < _value) revert();                \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); \n', '        if (_value > allowance[_from][msg.sender]) revert(); \n', '        balanceOf[_to] = balanceOf[_to].sub(_value);                     \n', '        balanceOf[_to] = balanceOf[_to].add(_value);                          \n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 _value) public {\n', '        require(_value <= balanceOf[msg.sender]);\n', '        address burner = msg.sender;\n', '        balanceOf[burner] = balanceOf[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        burnt = burnt.add(_value);\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '    }\n', '  \n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns  (bool success) {\n', '        require (balanceOf[_from] >= _value);            \n', '        require (msg.sender == owner);   \n', '        totalSupply = totalSupply.sub(_value);\n', '        burnt = burnt.add(_value);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);                      \n', '        emit Burnfrom(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function freezeAccount(address target) public onlyOwner {\n', '        require (msg.sender == owner);   // Check allowance\n', '        frozenAccount[target] = true;\n', '        emit FrozenFunds(target, true);\n', '    }\n', '    \n', '    function unFreezeAccount(address target) public onlyOwner {\n', '        require (msg.sender == owner);   // Check allowance\n', '        require(frozenAccount[target]);\n', '        frozenAccount[target] = false;\n', '        emit FrozenFunds(target, false);\n', '    }\n', '\n', '    function () private {\n', '        revert();  \n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned () public {\n', '        owner = msg.sender; \n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { \n', '    function receiveApproval (address _from, uint256 _value, address _token, bytes _extraData) public; \n', '    \n', '}\n', '\n', 'contract RewardsCoin is owned {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal maxSupply;  \n', '    string public name; \n', '    string public symbol; \n', '    uint256 public decimals;  \n', '    uint256 public totalSupply; \n', '    address public beneficiary;\n', '    address public dev1; \n', '    address public dev2;\n', '    address public market1;\n', '    address public market2; \n', '    address public bounty;\n', '    address public lockedTokens;\n', '    uint256 public burnt;\n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event Burnfrom(address indexed _from, uint256 value);\n', '\n', '    function RewardsCoin() public {\n', '            \n', '        name = "Rewards Coin";    \n', '        symbol = "REW";    \n', '        decimals = 18;\n', '        burnt = 0;\n', '        maxSupply = 25000000 * (10 ** decimals);   \n', '        totalSupply = totalSupply.add(maxSupply);\n', '        beneficiary = 0x89F2843837Ba5363b3550560184AC181924aCE4E;\n', '\n', '        //Dev 1 Account\n', '        dev1 = 0x4a194a5560a8DA2eaDAfc2F82B5793848685e1d3;\n', '\n', '        //Dev 2 Account\n', '        dev2 = 0x94e77bd7C7a53C533014d53F1965bea2BbD89744;\n', '\n', '        //Advertising & Exchanges account\n', '        market1 = 0xd08F5062378d4DC60127AF6c86AA5224678725DD;\n', '        market2 = 0xA6f5C8AaD4f88894E7eA844C29AcebF5A1110435;\n', '\n', '        //Bounties Account\n', '        bounty = 0x6171a92418fFd0F7CD2687d83B323BaF6A2987A9;\n', '\n', '        //Locked Tokens Account\n', '        lockedTokens = 0x0778DDC022A0ffaB843c6F3Cb49763Bdeb7C79C4;\n', '\n', '        //Distribution of Tokens to wallets\n', '        balanceOf[beneficiary]  = balanceOf[beneficiary].add(maxSupply.sub(7500000 * (10 ** decimals))); //17,500,000 (ICO + Pre-sale)\n', '        balanceOf[dev1]         = balanceOf[dev1].add(maxSupply.sub(24812500 * (10 ** decimals))); //187,500\n', '        balanceOf[dev2]         = balanceOf[dev2].add(maxSupply.sub(24437500 * (10 ** decimals))); //562,500\n', '        balanceOf[market1]      = balanceOf[market1].add(maxSupply.sub(24625000 * (10 ** decimals))); //375,000\n', '        balanceOf[market2]      = balanceOf[market2].add(maxSupply.sub(24625000 * (10 ** decimals))); //375,000\n', '        balanceOf[bounty]       = balanceOf[bounty].add(maxSupply.sub(24000000 * (10 ** decimals))); //1,000,000\n', '        balanceOf[lockedTokens] = balanceOf[lockedTokens].add(maxSupply.sub(20000000 * (10 ** decimals))); //5,000,000\n', '\n', '    }\n', '    \n', '    function nameChange(string _name, string _symbol) public onlyOwner {\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        if (frozenAccount[msg.sender]) revert(); \n', '        if (balanceOf[msg.sender] < _value) revert() ;           \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); \n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value); \n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);          \n', '    }\n', '    \n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public\n', '        returns (bool success) {    \n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (frozenAccount[_from]) revert();                        // Check if frozen  \n', '        if (balanceOf[_from] < _value) revert();                \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); \n', '        if (_value > allowance[_from][msg.sender]) revert(); \n', '        balanceOf[_to] = balanceOf[_to].sub(_value);                     \n', '        balanceOf[_to] = balanceOf[_to].add(_value);                          \n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 _value) public {\n', '        require(_value <= balanceOf[msg.sender]);\n', '        address burner = msg.sender;\n', '        balanceOf[burner] = balanceOf[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        burnt = burnt.add(_value);\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '    }\n', '  \n', '    function burnFrom(address _from, uint256 _value) public onlyOwner returns  (bool success) {\n', '        require (balanceOf[_from] >= _value);            \n', '        require (msg.sender == owner);   \n', '        totalSupply = totalSupply.sub(_value);\n', '        burnt = burnt.add(_value);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);                      \n', '        emit Burnfrom(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function freezeAccount(address target) public onlyOwner {\n', '        require (msg.sender == owner);   // Check allowance\n', '        frozenAccount[target] = true;\n', '        emit FrozenFunds(target, true);\n', '    }\n', '    \n', '    function unFreezeAccount(address target) public onlyOwner {\n', '        require (msg.sender == owner);   // Check allowance\n', '        require(frozenAccount[target]);\n', '        frozenAccount[target] = false;\n', '        emit FrozenFunds(target, false);\n', '    }\n', '\n', '    function () private {\n', '        revert();  \n', '    }\n', '}']
