['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '\n', 'contract GeocashToken is StandardToken, Destructible {\n', '  string public name;\n', '  string public symbol;\n', '  uint public decimals;\n', '  uint public buyPriceInWei;\n', '  uint public sellPriceInWei;\n', '  uint public minBalanceForAccounts;\n', '  address public companyWallet;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => bool) public frozenAccounts;\n', '  event FrozenFunds(address target, bool frozen);\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function GeocashToken(uint256 _minBalanceForAccountsInWei, uint256 _buyPriceInWei, uint256 _sellPriceInWei, address _companyWallet) public {\n', '    name = &#39;Geocash&#39;;\n', '    symbol = &#39;GEO&#39;;\n', '    decimals = 18;\n', '    totalSupply = 500000000 * (10 ** uint256(decimals));\n', '    balances[this] = totalSupply;\n', '    minBalanceForAccounts = _minBalanceForAccountsInWei;\n', '    buyPriceInWei = _buyPriceInWei;\n', '    sellPriceInWei = _sellPriceInWei;\n', '    companyWallet = _companyWallet;\n', '  }\n', '\n', '\n', '  /*Constant functions*/\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function isFrozen(address _owner) public view returns (bool frozen){\n', '    return frozenAccounts[_owner];\n', '  }\n', '\n', '\n', '\n', '\n', '  /*Non constant functions*/\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(!frozenAccounts[msg.sender]);\n', '    require(!frozenAccounts[_to]);\n', '    require(_value <= balances[msg.sender]);\n', '    if(msg.sender.balance < minBalanceForAccounts){\n', '      sell((minBalanceForAccounts.sub(msg.sender.balance)).div(sellPriceInWei));\n', '    }\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function setBuyPrice(uint _buyPriceInWei) onlyOwner public returns (bool){\n', '    require(_buyPriceInWei > 0);\n', '    buyPriceInWei = _buyPriceInWei;\n', '    return true;\n', '  }\n', '\n', '  function setSellPrice(uint _sellPriceInWei) onlyOwner public returns (bool){\n', '    require(_sellPriceInWei > 0);\n', '    sellPriceInWei = _sellPriceInWei;\n', '    return true;\n', '  }\n', '\n', '  function setCompanyWallet(address _wallet) onlyOwner public returns (bool){\n', '    require(_wallet != address(0));\n', '    companyWallet = _wallet;\n', '    return true;\n', '  }\n', '\n', '  function buy() public payable returns (uint){\n', '    require(msg.sender != address(0));\n', '    require(msg.value >= 0);\n', '    uint amount = msg.value.div(buyPriceInWei).mul(1 ether);\n', '    require(amount > 0);\n', '    require(balances[this] >= amount);\n', '    uint oldBalance = balances[this].add(balances[msg.sender]);\n', '    balances[this] = balances[this].sub(amount);\n', '    balances[msg.sender] = balances[msg.sender].add(amount);\n', '    uint newBalance = balances[this].add(balances[msg.sender]);\n', '    assert(newBalance == oldBalance);\n', '    Transfer(this, msg.sender, amount);\n', '    return amount;\n', '  }\n', '\n', '  function sell(uint _amount) internal returns(uint revenue) {\n', '    require(_amount > 0);\n', '    require(balances[msg.sender]>= _amount);\n', '    uint oldBalance =  balances[this].add(balances[msg.sender]);\n', '    balances[this] = balances[this].add(_amount);\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    revenue = _amount.mul(sellPriceInWei).div(1 ether);\n', '    require(revenue > 0);\n', '    if(!msg.sender.send(revenue)){\n', '      revert();\n', '    }\n', '    else {\n', '      uint newBalance =  balances[this].add(balances[msg.sender]);\n', '      assert(newBalance == oldBalance);\n', '      Transfer(msg.sender, this, _amount);\n', '      return _amount;\n', '    }\n', '  }\n', '\n', '  function freezeAccount(address target, bool freeze) public onlyOwner {\n', '    frozenAccounts[target] = freeze;\n', '    FrozenFunds(target, freeze);\n', '  }\n', '\n', '  function setMinBalance(uint minimumBalanceInWei) public onlyOwner {\n', '    minBalanceForAccounts = minimumBalanceInWei;\n', '  }\n', '\n', '  /* @dev send ETH to the company wallet, the token address should keep a reasonable amount of ETH to be able to payout on token sells */\n', '  function forwardFundToCompanyWallet(uint _amount) public onlyOwner {\n', '    companyWallet.transfer(_amount);\n', '  }\n', '\n', '  function distribute(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '    require(_to != address(0));\n', '    balances[this] = balances[this].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(this, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buy();\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '\n', 'contract GeocashToken is StandardToken, Destructible {\n', '  string public name;\n', '  string public symbol;\n', '  uint public decimals;\n', '  uint public buyPriceInWei;\n', '  uint public sellPriceInWei;\n', '  uint public minBalanceForAccounts;\n', '  address public companyWallet;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => bool) public frozenAccounts;\n', '  event FrozenFunds(address target, bool frozen);\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function GeocashToken(uint256 _minBalanceForAccountsInWei, uint256 _buyPriceInWei, uint256 _sellPriceInWei, address _companyWallet) public {\n', "    name = 'Geocash';\n", "    symbol = 'GEO';\n", '    decimals = 18;\n', '    totalSupply = 500000000 * (10 ** uint256(decimals));\n', '    balances[this] = totalSupply;\n', '    minBalanceForAccounts = _minBalanceForAccountsInWei;\n', '    buyPriceInWei = _buyPriceInWei;\n', '    sellPriceInWei = _sellPriceInWei;\n', '    companyWallet = _companyWallet;\n', '  }\n', '\n', '\n', '  /*Constant functions*/\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function isFrozen(address _owner) public view returns (bool frozen){\n', '    return frozenAccounts[_owner];\n', '  }\n', '\n', '\n', '\n', '\n', '  /*Non constant functions*/\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(!frozenAccounts[msg.sender]);\n', '    require(!frozenAccounts[_to]);\n', '    require(_value <= balances[msg.sender]);\n', '    if(msg.sender.balance < minBalanceForAccounts){\n', '      sell((minBalanceForAccounts.sub(msg.sender.balance)).div(sellPriceInWei));\n', '    }\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function setBuyPrice(uint _buyPriceInWei) onlyOwner public returns (bool){\n', '    require(_buyPriceInWei > 0);\n', '    buyPriceInWei = _buyPriceInWei;\n', '    return true;\n', '  }\n', '\n', '  function setSellPrice(uint _sellPriceInWei) onlyOwner public returns (bool){\n', '    require(_sellPriceInWei > 0);\n', '    sellPriceInWei = _sellPriceInWei;\n', '    return true;\n', '  }\n', '\n', '  function setCompanyWallet(address _wallet) onlyOwner public returns (bool){\n', '    require(_wallet != address(0));\n', '    companyWallet = _wallet;\n', '    return true;\n', '  }\n', '\n', '  function buy() public payable returns (uint){\n', '    require(msg.sender != address(0));\n', '    require(msg.value >= 0);\n', '    uint amount = msg.value.div(buyPriceInWei).mul(1 ether);\n', '    require(amount > 0);\n', '    require(balances[this] >= amount);\n', '    uint oldBalance = balances[this].add(balances[msg.sender]);\n', '    balances[this] = balances[this].sub(amount);\n', '    balances[msg.sender] = balances[msg.sender].add(amount);\n', '    uint newBalance = balances[this].add(balances[msg.sender]);\n', '    assert(newBalance == oldBalance);\n', '    Transfer(this, msg.sender, amount);\n', '    return amount;\n', '  }\n', '\n', '  function sell(uint _amount) internal returns(uint revenue) {\n', '    require(_amount > 0);\n', '    require(balances[msg.sender]>= _amount);\n', '    uint oldBalance =  balances[this].add(balances[msg.sender]);\n', '    balances[this] = balances[this].add(_amount);\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    revenue = _amount.mul(sellPriceInWei).div(1 ether);\n', '    require(revenue > 0);\n', '    if(!msg.sender.send(revenue)){\n', '      revert();\n', '    }\n', '    else {\n', '      uint newBalance =  balances[this].add(balances[msg.sender]);\n', '      assert(newBalance == oldBalance);\n', '      Transfer(msg.sender, this, _amount);\n', '      return _amount;\n', '    }\n', '  }\n', '\n', '  function freezeAccount(address target, bool freeze) public onlyOwner {\n', '    frozenAccounts[target] = freeze;\n', '    FrozenFunds(target, freeze);\n', '  }\n', '\n', '  function setMinBalance(uint minimumBalanceInWei) public onlyOwner {\n', '    minBalanceForAccounts = minimumBalanceInWei;\n', '  }\n', '\n', '  /* @dev send ETH to the company wallet, the token address should keep a reasonable amount of ETH to be able to payout on token sells */\n', '  function forwardFundToCompanyWallet(uint _amount) public onlyOwner {\n', '    companyWallet.transfer(_amount);\n', '  }\n', '\n', '  function distribute(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '    require(_to != address(0));\n', '    balances[this] = balances[this].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(this, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buy();\n', '  }\n', '\n', '}']
