['pragma solidity 0.5.1; /*\n', '\n', '\n', '___________________________________________________________________\n', '  _      _                                        ______           \n', '  |  |  /          /                                /              \n', '--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\n', "  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \n", '__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\n', '\n', '\n', '\n', '██████╗  ██████╗ ██╗   ██╗██████╗ ██╗     ███████╗    ███████╗████████╗██╗  ██╗███████╗██████╗ \n', '██╔══██╗██╔═══██╗██║   ██║██╔══██╗██║     ██╔════╝    ██╔════╝╚══██╔══╝██║  ██║██╔════╝██╔══██╗\n', '██║  ██║██║   ██║██║   ██║██████╔╝██║     █████╗      █████╗     ██║   ███████║█████╗  ██████╔╝\n', '██║  ██║██║   ██║██║   ██║██╔══██╗██║     ██╔══╝      ██╔══╝     ██║   ██╔══██║██╔══╝  ██╔══██╗\n', '██████╔╝╚██████╔╝╚██████╔╝██████╔╝███████╗███████╗    ███████╗   ██║   ██║  ██║███████╗██║  ██║\n', '╚═════╝  ╚═════╝  ╚═════╝ ╚═════╝ ╚══════╝╚══════╝    ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝\n', '                                                                                               \n', '                                                                                               \n', '// ----------------------------------------------------------------------------\n', "// 'Double Ether' Token contract with following features\n", '//      => ERC20 Compliance\n', '//      => Safeguard functionality \n', '//      => selfdestruct ability by owner\n', '//      => SafeMath implementation \n', '//      => Burnable and no minting\n', '//\n', '// Name        : Double Ether\n', '// Symbol      : DET\n', '// Total supply: 100,000,000 (100 Million)\n', '// Decimals    : 18\n', '//\n', '// Copyright (c) 2018 Deteth Inc. ( https://deteth.com )\n', '// Contract designed by EtherAuthority ( https://EtherAuthority.io )\n', '// ----------------------------------------------------------------------------\n', '  \n', '*/ \n', '\n', '//*******************************************************************//\n', '//------------------------ SafeMath Library -------------------------//\n', '//*******************************************************************//\n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '      }\n', '    \n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '\n', '\n', '//*******************************************************************//\n', '//------------------ Contract to Manage Ownership -------------------//\n', '//*******************************************************************//\n', '    \n', '    contract owned {\n', '        address payable public owner;\n', '        \n', '         constructor () public {\n', '            owner = msg.sender;\n', '        }\n', '    \n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '    \n', '        function transferOwnership(address payable newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata  _extraData) external; }\n', '\n', '\n', '//***************************************************************//\n', '//------------------ ERC20 Standard Template -------------------//\n', '//***************************************************************//\n', '    \n', '    contract TokenERC20 {\n', '        // Public variables of the token\n', '        using SafeMath for uint256;\n', '        string public name;\n', '        string public symbol;\n', '        uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it\n', '        uint256 public totalSupply;\n', '        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n', '    \n', '        // This creates an array with all balances\n', '        mapping (address => uint256) public balanceOf;\n', '        mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '        // This generates a public event on the blockchain that will notify clients\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '        // This notifies clients about the amount burnt\n', '        event Burn(address indexed from, uint256 value);\n', '    \n', '        /**\n', '         * Constrctor function\n', '         *\n', '         * Initializes contract with initial supply tokens to the creator of the contract\n', '         */\n', '        constructor (\n', '            uint256 initialSupply,\n', '            string memory tokenName,\n', '            string memory tokenSymbol\n', '        ) public {\n', '            \n', '            totalSupply = initialSupply * 1 ether;      // Update total supply with the decimal amount\n', '            uint256 halfTotalSupply = totalSupply / 2;  // Half of the totalSupply\n', '            \n', '            balanceOf[msg.sender] = halfTotalSupply;    // 50 Million tokens sent to owner\n', '            balanceOf[address(this)] = halfTotalSupply; // 50 Million tokens sent to smart contract\n', '            name = tokenName;                           // Set the name for display purposes\n', '            symbol = tokenSymbol;                       // Set the symbol for display purposes\n', '            \n', '            emit Transfer(address(0x0), msg.sender, halfTotalSupply);   // Transfer event\n', '            emit Transfer(address(0x0), address(this), halfTotalSupply);// Transfer event\n', '        }\n', '    \n', '        /**\n', '         * Internal transfer, only can be called by this contract\n', '         */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '            // Prevent transfer to 0x0 address. Use burn() instead\n', '            require(_to != address(0x0));\n', '            // Check if the sender has enough\n', '            require(balanceOf[_from] >= _value);\n', '            // Check for overflows\n', '            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '            // Save this for an assertion in the future\n', '            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '            // Subtract from the sender\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            // Add the same to the recipient\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            emit Transfer(_from, _to, _value);\n', '            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens\n', '         *\n', '         * Send `_value` tokens to `_to` from your account\n', '         *\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transfer(address _to, uint256 _value) public returns (bool success) {\n', '            _transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens from other address\n', '         *\n', '         * Send `_value` tokens to `_to` in behalf of `_from`\n', '         *\n', '         * @param _from The address of the sender\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '            _transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         */\n', '        function approve(address _spender, uint256 _value) public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            allowance[msg.sender][_spender] = _value;\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address and notify\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         * @param _extraData some extra information to send to the approved contract\n', '         */\n', '        function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '            public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            tokenRecipient spender = tokenRecipient(_spender);\n', '            if (approve(_spender, _value)) {\n', '                spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '                return true;\n', '            }\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly\n', '         *\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burn(uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n', '            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '            emit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens from other account\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '         *\n', '         * @param _from the address of the sender\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n', "            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n", '            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n', '            emit  Burn(_from, _value);\n', '            return true;\n', '        }\n', '        \n', '    }\n', '    \n', '//*******************************************************************************//\n', '//---------------------  DOUBLE ETHER MAIN CODE STARTS HERE ---------------------//\n', '//*******************************************************************************//\n', '    \n', '    contract DoubleEther is owned, TokenERC20 {\n', '        \n', '        \n', '        /********************************/\n', '        /* Code for the ERC20 DET Token */\n', '        /********************************/\n', '    \n', '        /* Public variables of the token */\n', '        string internal tokenName = "Double Ether";\n', '        string internal tokenSymbol = "DET";\n', '        uint256 internal initialSupply = 100000000;  //100 Million\n', '        \n', '        \n', '        /* Records for the fronzen accounts */\n', '        mapping (address => bool) public frozenAccount;\n', '        \n', '        /* This generates a public event on the blockchain that will notify clients */\n', '        event FrozenFunds(address target, bool frozen);\n', '    \n', '        /* Initializes contract with initial supply tokens to the creator of the contract */\n', '        constructor () TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '        /* Internal transfer, only can be called by this contract */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '            require (_to != address(0x0));                      // Prevent transfer to 0x0 address. Use burn() instead\n', '            require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n', '            require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '            require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n', '            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n', '            emit Transfer(_from, _to, _value);\n', '        }\n', '        \n', '        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '        /// @param target Address to be frozen\n', '        /// @param freeze either to freeze it or not\n', '        function freezeAccount(address target, bool freeze) onlyOwner public {\n', '                frozenAccount[target] = freeze;\n', '            emit  FrozenFunds(target, freeze);\n', '        }\n', '        \n', '        /**\n', '         * Change safeguard status on or off\n', '         *\n', '         * When safeguard is true, then all the non-owner functions will stop working.\n', '         * When safeguard is false, then all the functions will resume working back again!\n', '         */\n', '        function changeSafeguardStatus() onlyOwner public{\n', '            if (safeguard == false){\n', '                safeguard = true;\n', '            }\n', '            else{\n', '                safeguard = false;    \n', '            }\n', '        }\n', '\n', '\n', '\n', '        /*******************************************/\n', '        /* Code for the Double Ether Functionality */\n', '        /*******************************************/\n', '\n', '        \n', '        uint256 public returnPercentage = 150;  // 150% return, which is 1.5 times the amount deposited \n', '        uint256 public additionalFund = 0;\n', '        address payable[] public winnerQueueAddresses;\n', '        uint256[] public winnerQueueAmount;\n', '        \n', '        // This will log for all the deposits made by users\n', '        event Deposit(address indexed depositor, uint256 depositAmount);\n', '        \n', '        // This will log for any ether paid to users\n', '        event RewardPaid(address indexed rewardPayee, uint256 rewardAmount);\n', '        \n', '        function showPeopleInQueue() public view returns(uint256) {\n', '            return winnerQueueAmount.length;\n', '        }\n', '        \n', '        //@dev fallback function, which accepts ether\n', '        function () payable external {\n', '            require(!safeguard);\n', '            require(!frozenAccount[msg.sender]);\n', '            require(msg.value >= 0.5 ether);\n', '            \n', '            //If users send more than 3 ether, then it will consider only 3 ether, and rest goes to owner as service fee\n', '            uint256 _depositedEther;\n', '            if(msg.value >= 3 ether){\n', '                _depositedEther = 3 ether;\n', '                additionalFund += msg.value - 3 ether; \n', '            }\n', '            else{\n', '                _depositedEther = msg.value;\n', '            }\n', '            \n', '            \n', '            //following loop will send reward to one or more addresses\n', '            uint256 TotalPeopleInQueue = winnerQueueAmount.length;\n', '            for(uint256 index = 0; index < TotalPeopleInQueue; index++){\n', '                \n', '                if(winnerQueueAmount[0] <= (address(this).balance - additionalFund) ){\n', '                    \n', '                    //transfer the ether and token to leader / first position\n', '                    winnerQueueAddresses[0].transfer(winnerQueueAmount[0]);\n', '                    _transfer(address(this), winnerQueueAddresses[0], winnerQueueAmount[0]*100/returnPercentage);\n', '                    \n', '                    //this will shift one index up in both arrays, removing the person who is paid\n', '                    for (uint256 i = 0; i<winnerQueueAmount.length-1; i++){\n', '                        winnerQueueAmount[i] = winnerQueueAmount[i+1];\n', '                        winnerQueueAddresses[i] = winnerQueueAddresses[i+1];\n', '                    }\n', '                    winnerQueueAmount.length--;\n', '                    winnerQueueAddresses.length--;\n', '                }\n', '                else{\n', '                    //because there is not enough ether in contract to pay for leader, so break.\n', '                    break;\n', '                }\n', '            }\n', '            \n', '            //Putting depositor in the queue\n', '            winnerQueueAddresses.push(msg.sender); \n', '            winnerQueueAmount.push(_depositedEther * returnPercentage / 100);\n', '            emit Deposit(msg.sender, msg.value);\n', '        }\n', '\n', '    \n', '\n', '        //Just in rare case, owner wants to transfer Ether from contract to owner address.Like owner decided to destruct this contract.\n', '        function manualWithdrawEtherAll() onlyOwner public{\n', '            address(owner).transfer(address(this).balance);\n', '        }\n', '        \n', '        //It is useful when owner wants to transfer additionalFund, which is fund sent by users more than 3 ether, or after removing any stuck address.\n', '        function manualWithdrawEtherAdditionalOnly() onlyOwner public{\n', '            additionalFund = 0;\n', '            address(owner).transfer(additionalFund);\n', '        }\n', '        \n', '        //Just in rare case, owner wants to transfer Tokens from contract to owner address\n', '        function manualWithdrawTokens(uint tokenAmount) onlyOwner public{\n', '            //no need to validate the input amount as transfer function automatically throws for invalid amounts\n', '            _transfer(address(this), address(owner), tokenAmount);\n', '        }\n', '        \n', '        //selfdestruct function. just in case owner decided to destruct this contract.\n', '        function destructContract()onlyOwner public{\n', '            selfdestruct(owner);\n', '        }\n', '        \n', '        //To remove any stuck address and un-stuck the queue. \n', '        //This often happen if user have put contract address, and contract does not receive ether.\n', '        function removeAddressFromQueue(uint256 index) onlyOwner public {\n', '            require(index <= winnerQueueAmount.length);\n', '            additionalFund +=  winnerQueueAmount[index];\n', '            //this will shift one index up in both arrays, removing the address owner specified\n', '            for (uint256 i = index; i<winnerQueueAmount.length-1; i++){\n', '                winnerQueueAmount[i] = winnerQueueAmount[i+1];\n', '                winnerQueueAddresses[i] = winnerQueueAddresses[i+1];\n', '            }\n', '            winnerQueueAmount.length--;\n', '            winnerQueueAddresses.length--;\n', '        } \n', '\n', '        /**\n', '         * This function removes the 35 queues. And restart the game again.\n', '         * Those people who did not get the ETH will recieve tokens multiplied by 200\n', '         * Which is: Ether amount * 200 tokens\n', '         *\n', '         * \n', '         * Ether will remained in the contract will be used toward the next round\n', '         */\n', '        function restartTheQueue() onlyOwner public {\n', '            //To become more gas cost effective, we want to process it differently when addresses are more or less than 35\n', '            uint256 arrayLength = winnerQueueAmount.length;\n', '            if(arrayLength < 35){\n', '                //if addresses are less than 35 then we will just loop through it and send tokens\n', '                for(uint256 i = 0; i < arrayLength; i++){\n', '                    _transfer(address(this), winnerQueueAddresses[i], winnerQueueAmount[i]*200*100/returnPercentage);\n', '                }\n', '                //then empty the array, and so the game will begin fresh\n', '                winnerQueueAddresses = new address payable[](0);\n', '                winnerQueueAmount = new uint256[](0);\n', '            }\n', '            else{\n', '                //if there are more than 35 addresses, then we will process it differently\n', '                //sending tokens to first 35 addresses\n', '                for(uint256 i = 0; i < 35; i++){\n', '                    //doing token transfer\n', '                    _transfer(address(this), winnerQueueAddresses[i], winnerQueueAmount[i]*200*100/returnPercentage);\n', '                    \n', '                    //shifting index one by one\n', '                    for (uint256 j = 0; j<arrayLength-i-1; j++){\n', '                        winnerQueueAmount[j] = winnerQueueAmount[j+1];\n', '                        winnerQueueAddresses[j] = winnerQueueAddresses[j+1];\n', '                    }\n', '                }\n', '                //removing total array length by 35\n', '                winnerQueueAmount.length -= 35;\n', '                winnerQueueAddresses.length -= 35;\n', '            }\n', '        }\n', '\n', '}']