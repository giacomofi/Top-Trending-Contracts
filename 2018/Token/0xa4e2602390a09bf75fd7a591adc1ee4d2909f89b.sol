['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', ' \n', '    mapping(address => uint256) balances;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        \n', '        return true;\n', '    }\n', '}\n', '\n', 'contract FreezableToken is StandardToken, Ownable {\n', '    event Freeze(address indexed who, uint256 end);\n', '\n', '    mapping(address=>uint256) freezeEnd;\n', '\n', '    function freeze(address _who, uint256 _end) onlyOwner public {\n', '        require(_who != address(0));\n', '        require(_end >= freezeEnd[_who]);\n', '\n', '        freezeEnd[_who] = _end;\n', '\n', '        emit Freeze(_who, _end);\n', '    }\n', '\n', '    modifier notFrozen(address _who) {\n', '        require(freezeEnd[_who] < now);\n', '        _;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public notFrozen(_from) returns (bool) {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public notFrozen(msg.sender) returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '}\n', '\n', 'contract UpgradeAgent {\n', '    function upgradeFrom(address _from, uint256 _value) public;\n', '}\n', '\n', 'contract UpgradableToken is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    address public upgradeAgent;\n', '    uint256 public totalUpgraded;\n', '\n', '    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    function upgrade(uint256 _value) external {\n', '        assert(upgradeAgent != address(0));\n', '        require(_value != 0);\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalUpgraded = totalUpgraded.add(_value);\n', '        UpgradeAgent(upgradeAgent).upgradeFrom(msg.sender, _value);\n', '        emit Upgrade(msg.sender, upgradeAgent, _value);\n', '    }\n', '\n', '    function setUpgradeAgent(address _agent) external onlyOwner {\n', '        require(_agent != address(0));\n', '        assert(upgradeAgent == address(0));\n', '        \n', '        upgradeAgent = _agent;\n', '    }\n', '}\n', '\n', 'contract BurnableToken is BasicToken, Ownable {\n', '    event Burn(uint256 value);\n', '\n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[owner]);\n', '\n', '        balances[owner] = balances[owner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(_value);\n', '    }\n', '}\n', '\n', 'contract StoppableToken is FreezableToken {\n', '    event Stop();\n', '    event Start();\n', '\n', '    bool isStop;\n', '\n', '    function stop() onlyOwner public {\n', '        isStop = true;\n', '        emit Stop();\n', '    }\n', '\n', '    function start() onlyOwner public {\n', '        isStop = false;\n', '        emit Start();\n', '    }\n', '\n', '    modifier notFrozen(address _who) {\n', '        require(!isStop);\n', '        require(freezeEnd[_who] < now);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract MossCoin is StoppableToken, UpgradableToken, BurnableToken {\n', '    string public constant name = "Moss Coin";\n', '    string public constant symbol = "MOC";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function MossCoin(uint256 _amount) public\n', '        Ownable()\n', '    {\n', '        totalSupply = _amount * 1 ether;\n', '        balances[owner] = totalSupply;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', ' \n', '    mapping(address => uint256) balances;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        \n', '        return true;\n', '    }\n', '}\n', '\n', 'contract FreezableToken is StandardToken, Ownable {\n', '    event Freeze(address indexed who, uint256 end);\n', '\n', '    mapping(address=>uint256) freezeEnd;\n', '\n', '    function freeze(address _who, uint256 _end) onlyOwner public {\n', '        require(_who != address(0));\n', '        require(_end >= freezeEnd[_who]);\n', '\n', '        freezeEnd[_who] = _end;\n', '\n', '        emit Freeze(_who, _end);\n', '    }\n', '\n', '    modifier notFrozen(address _who) {\n', '        require(freezeEnd[_who] < now);\n', '        _;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public notFrozen(_from) returns (bool) {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public notFrozen(msg.sender) returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '}\n', '\n', 'contract UpgradeAgent {\n', '    function upgradeFrom(address _from, uint256 _value) public;\n', '}\n', '\n', 'contract UpgradableToken is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    address public upgradeAgent;\n', '    uint256 public totalUpgraded;\n', '\n', '    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    function upgrade(uint256 _value) external {\n', '        assert(upgradeAgent != address(0));\n', '        require(_value != 0);\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalUpgraded = totalUpgraded.add(_value);\n', '        UpgradeAgent(upgradeAgent).upgradeFrom(msg.sender, _value);\n', '        emit Upgrade(msg.sender, upgradeAgent, _value);\n', '    }\n', '\n', '    function setUpgradeAgent(address _agent) external onlyOwner {\n', '        require(_agent != address(0));\n', '        assert(upgradeAgent == address(0));\n', '        \n', '        upgradeAgent = _agent;\n', '    }\n', '}\n', '\n', 'contract BurnableToken is BasicToken, Ownable {\n', '    event Burn(uint256 value);\n', '\n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[owner]);\n', '\n', '        balances[owner] = balances[owner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(_value);\n', '    }\n', '}\n', '\n', 'contract StoppableToken is FreezableToken {\n', '    event Stop();\n', '    event Start();\n', '\n', '    bool isStop;\n', '\n', '    function stop() onlyOwner public {\n', '        isStop = true;\n', '        emit Stop();\n', '    }\n', '\n', '    function start() onlyOwner public {\n', '        isStop = false;\n', '        emit Start();\n', '    }\n', '\n', '    modifier notFrozen(address _who) {\n', '        require(!isStop);\n', '        require(freezeEnd[_who] < now);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract MossCoin is StoppableToken, UpgradableToken, BurnableToken {\n', '    string public constant name = "Moss Coin";\n', '    string public constant symbol = "MOC";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function MossCoin(uint256 _amount) public\n', '        Ownable()\n', '    {\n', '        totalSupply = _amount * 1 ether;\n', '        balances[owner] = totalSupply;\n', '    }\n', '}']
