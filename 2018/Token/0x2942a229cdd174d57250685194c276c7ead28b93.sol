['pragma solidity 0.4.24;\n', '\n', '\n', 'interface ERC20Interface {  \n', '\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', 'contract Owned {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed owner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(owner == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   *\n', '   * 转移合约拥有关系\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '    emit OwnershipTransferred(owner, newOwner);\n', '  }\n', '\n', '}\n', ' \n', '\n', '/**\n', '*\n', '* safeMath库，防止溢出问题\n', '*\n', '*/\n', 'library SafeMath {\n', '    \n', '    \n', '  /**\n', '   *   两数相乘函数，防止溢出\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      \n', '    //这里只检测a是否为0可以节省gas，但是如果检测了b就得不偿失了\n', '   \n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    //不需要检测b是否为零，evm中会检测\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', '    \n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '    \n', '    return c;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require (b != 0);\n', '    return a % b;\n', '  }\n', '\n', '}\n', '\n', 'contract PAT is ERC20Interface, Owned{\n', '\n', '  using SafeMath for uint256;\n', '  string public symbol;\n', '  string public name;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply; \n', '  \n', '  mapping(address => uint256) public balances;\n', '\n', '  mapping (address => mapping(address => uint256)) public allowed; \n', '\n', '  constructor(string _symbol, string _name, uint8 _decimals, uint256 _initSupply) public {\n', '    symbol = _symbol;\n', '    name = _name;\n', '    decimals = _decimals;\n', '    totalSupply = _initSupply;\n', '    balances[msg.sender] = _initSupply;\n', '\n', '  }\n', '\n', '  function symbol() public view returns (string) {\n', '    return symbol;\n', '  }\n', '\n', '  function name() public view returns (string) {\n', '    return name;\n', '  }\n', '\n', '  function decimals() public view returns (uint8) {\n', '    return decimals;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply;\n', '  }\n', '\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return balances[owner];\n', '  }\n', '\n', '\n', '  /**\n', '   * 返回owner账户可以转到spender账户的token数量\n', '   *\n', '   */\n', '  function allowance(address owner, address spender) public view returns (uint256) {\n', '    return allowed[owner][spender];\n', '  } \n', '\n', '  /**\n', '   * \n', '   * 向一个地址转账\n', '   */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(to != address(0));\n', '    balances[msg.sender] = balances[msg.sender].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '\n', '  }\n', '\n', '  /**\n', '   *\n', '   * 存在re-approve攻击漏洞，建议使用increaseAllowance方法\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '    allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   *\n', '   * 从一个地址向另外一个地址转账\n', '   */\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '    require(to != address(0));\n', '    balances[from] = balances[from].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, value);\n', '    return true;\n', '\n', '  }\n', '\n', '  /**\n', '   *\n', '   * 防止approve函数缺陷被利用, 增加spender账户对msg.sender账户token的可用量\n', '   */\n', '  function increaseAllowance(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '    allowed[msg.sender][spender] = allowed[msg.sender][spender].add(value);\n', '    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '    return true;\n', '  } \n', '\n', '  /**\n', '   *\n', '   * 防止approve函数缺陷被利用, 减少spender账户对msg.sender账户token的可用量\n', '   */\n', '  function decreaseAllowance(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '    allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(value);\n', '    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '}']