['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath\n', '{\n', '    function mul(uint a, uint b) internal returns (uint)\n', '    {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal returns (uint)\n', '    {\n', 'assert(b > 0);       \n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns (uint)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns (uint)\n', '    {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64)\n', '    {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64)\n', '    {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256)\n', '    {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256)\n', '    {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function assert(bool assertion) internal\n', '    {\n', '        if (!assertion)\n', '        {\n', '            throw;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20Basic\n', '{\n', '    uint public totalSupply;\n', '    function balanceOf(address who) constant returns (uint);\n', '    function transfer(address to, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic\n', '{\n', '    function allowance(address owner, address spender) constant returns (uint);\n', '    function transferFrom(address from, address to, uint value);\n', '    function approve(address spender, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic\n', '{\n', '    using SafeMath for uint;\n', '    mapping(address => uint) balances;\n', '\n', '    modifier onlyPayloadSize(uint size)\n', '    {\n', '        if(msg.data.length < size + 4)\n', '        {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract StandardToken is BasicToken, ERC20\n', '{\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32)\n', '    {\n', '        uint _allowance = allowed[_from][msg.sender];\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint _value)\n', '    {\n', '\n', '        \n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract BrokerNekoNetwork is StandardToken\n', '{\n', '    string public name = "BrokerNekoNetwork";\n', '    string public symbol = "BNN";\n', '    uint public decimals = 8 ;\n', '\n', '   \n', '    uint public INITIAL_SUPPLY =  1680000000000000000;\n', '\n', '\n', '    \n', '    uint public constant ALLOCATION_LOCK_END_TIMESTAMP = 1559347200;\n', '\n', '    address public constant BNN = 0xF009D60DF560F10E94f2ee397Fcb57d00130704C;\n', '    uint public constant    BNN_ALLOCATION = 1000000000000000000; \n', '\n', '   \n', '    function BrokerNekoNetwork()\n', '    {\n', '        \n', '        totalSupply = INITIAL_SUPPLY;\n', '\n', '       \n', '        balances[msg.sender] = totalSupply;\n', '\n', '       \n', '        balances[msg.sender] -= BNN_ALLOCATION;\n', '       \n', '\n', '        balances[BNN]   = BNN_ALLOCATION;\n', '      \n', '    }\n', '\n', '    function isAllocationLocked(address _spender) constant returns (bool)\n', '    {\n', '        return inAllocationLockPeriod() && isTeamMember(_spender);\n', '    }\n', '\n', '    function inAllocationLockPeriod() constant returns (bool)\n', '    {\n', '        return (block.timestamp < ALLOCATION_LOCK_END_TIMESTAMP);\n', '    }\n', '\n', '    function isTeamMember(address _spender) constant returns (bool)\n', '    {\n', '        return _spender == BNN  ;\n', '    }\n', '\n', '        function approve(address spender, uint tokens)\n', '    {\n', '        if (isAllocationLocked(spender))\n', '        {\n', '            throw;\n', '        }\n', '        else\n', '        {\n', '            super.approve(spender, tokens);\n', '        }\n', '    }\n', '\n', '    function transfer(address to, uint tokens) onlyPayloadSize(2 * 32)\n', '    {\n', '        if (isAllocationLocked(to))\n', '        {\n', '            throw;\n', '        }\n', '        else\n', '        {\n', '            super.transfer(to, tokens);\n', '        }\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) onlyPayloadSize(3 * 32)\n', '    {\n', '        if (isAllocationLocked(from) || isAllocationLocked(to))\n', '        {\n', '            throw;\n', '        }\n', '        else\n', '        {\n', '            super.transferFrom(from, to, tokens);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath\n', '{\n', '    function mul(uint a, uint b) internal returns (uint)\n', '    {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal returns (uint)\n', '    {\n', 'assert(b > 0);       \n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns (uint)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns (uint)\n', '    {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64)\n', '    {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64)\n', '    {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256)\n', '    {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256)\n', '    {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function assert(bool assertion) internal\n', '    {\n', '        if (!assertion)\n', '        {\n', '            throw;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20Basic\n', '{\n', '    uint public totalSupply;\n', '    function balanceOf(address who) constant returns (uint);\n', '    function transfer(address to, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic\n', '{\n', '    function allowance(address owner, address spender) constant returns (uint);\n', '    function transferFrom(address from, address to, uint value);\n', '    function approve(address spender, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic\n', '{\n', '    using SafeMath for uint;\n', '    mapping(address => uint) balances;\n', '\n', '    modifier onlyPayloadSize(uint size)\n', '    {\n', '        if(msg.data.length < size + 4)\n', '        {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract StandardToken is BasicToken, ERC20\n', '{\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32)\n', '    {\n', '        uint _allowance = allowed[_from][msg.sender];\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint _value)\n', '    {\n', '\n', '        \n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract BrokerNekoNetwork is StandardToken\n', '{\n', '    string public name = "BrokerNekoNetwork";\n', '    string public symbol = "BNN";\n', '    uint public decimals = 8 ;\n', '\n', '   \n', '    uint public INITIAL_SUPPLY =  1680000000000000000;\n', '\n', '\n', '    \n', '    uint public constant ALLOCATION_LOCK_END_TIMESTAMP = 1559347200;\n', '\n', '    address public constant BNN = 0xF009D60DF560F10E94f2ee397Fcb57d00130704C;\n', '    uint public constant    BNN_ALLOCATION = 1000000000000000000; \n', '\n', '   \n', '    function BrokerNekoNetwork()\n', '    {\n', '        \n', '        totalSupply = INITIAL_SUPPLY;\n', '\n', '       \n', '        balances[msg.sender] = totalSupply;\n', '\n', '       \n', '        balances[msg.sender] -= BNN_ALLOCATION;\n', '       \n', '\n', '        balances[BNN]   = BNN_ALLOCATION;\n', '      \n', '    }\n', '\n', '    function isAllocationLocked(address _spender) constant returns (bool)\n', '    {\n', '        return inAllocationLockPeriod() && isTeamMember(_spender);\n', '    }\n', '\n', '    function inAllocationLockPeriod() constant returns (bool)\n', '    {\n', '        return (block.timestamp < ALLOCATION_LOCK_END_TIMESTAMP);\n', '    }\n', '\n', '    function isTeamMember(address _spender) constant returns (bool)\n', '    {\n', '        return _spender == BNN  ;\n', '    }\n', '\n', '        function approve(address spender, uint tokens)\n', '    {\n', '        if (isAllocationLocked(spender))\n', '        {\n', '            throw;\n', '        }\n', '        else\n', '        {\n', '            super.approve(spender, tokens);\n', '        }\n', '    }\n', '\n', '    function transfer(address to, uint tokens) onlyPayloadSize(2 * 32)\n', '    {\n', '        if (isAllocationLocked(to))\n', '        {\n', '            throw;\n', '        }\n', '        else\n', '        {\n', '            super.transfer(to, tokens);\n', '        }\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) onlyPayloadSize(3 * 32)\n', '    {\n', '        if (isAllocationLocked(from) || isAllocationLocked(to))\n', '        {\n', '            throw;\n', '        }\n', '        else\n', '        {\n', '            super.transferFrom(from, to, tokens);\n', '        }\n', '    }\n', '}']
