['pragma solidity ^0.4.25;\n', '\n', 'interface Yrc20 {\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '    function balanceOf(address _owner) external view returns (uint balance);\n', '    function transfer(address _to, uint _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n', '}\n', '\n', 'interface YRC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract YBalanceChecker {\n', '    function check(address token) external view returns(uint a, uint b) {\n', '        if (uint(token)==0) {\n', '            b = msg.sender.balance;\n', '            a = address(this).balance;\n', '            return;\n', '        }\n', '        b = Yrc20(token).balanceOf(msg.sender);\n', '        a = Yrc20(token).allowance(msg.sender,this);\n', '    }\n', '}\n', '\n', 'contract HairyHoover is YBalanceChecker {\n', '    event Sucks(address indexed token, address sender, uint amount);\n', '    event Clean(address indexed token, address sender, uint amount);\n', '\n', '    function suckBalance(address token) external returns(uint a, uint b) {\n', '        assert(uint(token)!=0);\n', '        (a, b) = this.check(token);\n', '        b = Yrc20(token).balanceOf(msg.sender);\n', "        require(b>0, 'must have a balance');\n", '        a = Yrc20(token).allowance(msg.sender,this);\n', "        require(a>0, 'none approved');\n", '        if (a>=b) {\n', "            require(Yrc20(token).transferFrom(msg.sender,this,b), 'not approved');\n", '            emit Sucks(token, msg.sender, b);\n', '        }\n', '        else {\n', "            require(Yrc20(token).transferFrom(msg.sender,this,a), 'not approved');\n", '            emit Sucks(token, msg.sender, a);\n', '        }\n', '        counts[msg.sender]++;\n', '        participants[participantCount++] = msg.sender;\n', '    }\n', '    \n', '    function cleanBalance(address token) external returns(uint256 b) {\n', '        if (uint(token)==0) {\n', '            msg.sender.transfer(b = address(this).balance);\n', '            return;\n', '        }\n', '        b = Yrc20(token).balanceOf(this);\n', "        require(b>0, 'must have a balance');\n", "        require(Yrc20(token).transfer(msg.sender,b), 'transfer failed');\n", '        emit Clean(token, msg.sender, b);\n', '        if (counts[msg.sender]>1) {\n', '            counts[msg.sender]--;\n', '        }\n', '    }\n', '\n', '    mapping(address=>uint) public counts;\n', '    mapping(uint=>address) public participants;\n', '    uint public participantCount = 0;\n', '    function () external payable {}\n', '}']