['pragma solidity ^0.4.21;\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if(a == 0) { return 0; }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '    function Ownable() public { \n', '\t    owner = msg.sender; \n', '\t\t}\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(this));\n', '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    function balanceOf(address who) public view returns(uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '    function approve(address spender, uint256 value) public returns(bool);\n', '}\n', '\n', 'contract StandardToken is ERC20{\n', '    using SafeMath for uint256;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    mapping(address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\t\n', '\n', '\n', '\t\n', '    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '    function balanceOf(address _owner) public view returns(uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', 'function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(this));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '}\n', 'function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n', '        require(_to.length == _value.length);\n', '        for(uint i = 0; i < _to.length; i++) {\n', '            transfer(_to[i], _value[i]);\n', '        }\n', '        return true;\n', '}\n', 'function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(this));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public view returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if(_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', 'contract MintableToken is StandardToken, Ownable{\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    bool public mintingFinished = false;\n', '    modifier canMint(){require(!mintingFinished); _;}\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\t\temit Mint(_to, _amount);\n', '        emit Transfer(address(this), _to, _amount);\n', '        return true;\n', '    }\n', '    function finishMinting() onlyOwner canMint public returns(bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', 'contract CappedToken is MintableToken {\n', '    uint256 public cap;\n', '    function CappedToken(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n', '        require(totalSupply.add(_amount) <= cap);\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', 'contract BurnableToken is StandardToken {\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '}\n', 'contract RewardToken is StandardToken, Ownable {\n', '    struct Payment {\n', '        uint time;\n', '        uint amount;\n', '    }\n', '    Payment[] public repayments;\n', '    mapping(address => Payment[]) public rewards;\n', '\n', '    event Reward(address indexed to, uint256 amount);\n', '\n', '    function repayment() onlyOwner payable public {\n', '        require(msg.value >= 0.00000001 * 1 ether);\n', '        repayments.push(Payment({time : now, amount : msg.value}));\n', '    }\n', '    function _reward(address _to) private returns(bool) {\n', '        if(rewards[_to].length < repayments.length) {\n', '            uint sum = 0;\n', '            for(uint i = rewards[_to].length; i < repayments.length; i++) {\n', '                uint amount = balances[_to] > 0 ? (repayments[i].amount * balances[_to] / totalSupply) : 0;\n', '                rewards[_to].push(Payment({time : now, amount : amount}));\n', '                sum += amount;\n', '            }\n', '            if(sum > 0) {\n', '                _to.transfer(sum);\n', '                emit Reward(_to, sum);\n', '            }\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function reward() public returns(bool) {\n', '        return _reward(msg.sender);\n', '    }\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        _reward(msg.sender);\n', '        _reward(_to);\n', '        return super.transfer(_to, _value);\n', '    }\n', '    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n', '        _reward(msg.sender);\n', '        for(uint i = 0; i < _to.length; i++) {\n', '            _reward(_to[i]);\n', '        }\n', '        return super.multiTransfer(_to, _value);\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        _reward(_from);\n', '        _reward(_to);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', 'contract Token is CappedToken, BurnableToken, RewardToken {\n', '    function Token() CappedToken(10000000 * 1 ether) StandardToken("JULLAR0805", "JUL0805", 18) public {\n', '        \n', '    }\n', '}\n', 'contract Crowdsale is Ownable{\n', '    using SafeMath for uint;\n', '    Token public token;\n', '    address private beneficiary = 0x75E6d4a772DB168f34462a21b64192557ef5c504; // Кошелек компании\n', '    uint public collectedWei; // Собранные Веи\n', '    uint private refundedWei; \n', '\t\n', '\n', '    string public TokenPriceETH = "0.0000001";  // Стоимость токена \n', '\t\n', '\tuint public tokensSold; // Проданное количество Токенов\n', '\tuint private tokensDm; // Проданное количество Токенов + Количество покупаемых токенов\n', '\tuint private tokensForSale = 45 * 1 ether; // Токены на продажу\n', '    uint public SoldToken;\n', '    uint public SaleToken = tokensForSale / 1 ether;\n', '\tuint public StartIcoStage = 0;\n', '\t// uint public priceTokenWei = 12690355329949;  // 1 токен равен 0,01$ (1eth = 788$)\n', '    uint public priceTokenWei = 100000000000;  // 0.0000001 ETH за 1 токен\n', '\t\n', '    bool public crowdsaleClosed = false;\n', '    mapping(address => uint256) public purchaseBalances;  // Массив держателей токенов\n', '    event Rurchase(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n', '    \n', '    event CrowdsaleClose();\n', '\tuint256 private oSb = 8000000 * 1 ether;\n', '    /*Пауза и Старт*/\n', '\tbool public paused = false;\n', '\tuint public pausestatus = 1;\n', '    event Pause();\n', '    event StartNextIcoStage();\n', '\tfunction pause() private {\n', '        pausestatus = 0;\n', '\t\tpaused = true;\n', '        emit Pause();\n', '    }\t\n', '\tfunction Crowdsale() public {\n', '     token = new Token();\n', '\t emit Rurchase(beneficiary, oSb, 0);\n', '\t token.mint(beneficiary, oSb);\n', '\t}\n', '    function() payable public {\n', '\t\tif(crowdsaleClosed == false){\n', '\t\t       purchase();\n', '\t\t}\n', '    }\t\n', '\tfunction purchase() payable public {\n', '\t\trequire(pausestatus != 0);\n', '        require(!crowdsaleClosed);\n', '        require(tokensSold < tokensForSale);\n', '        require(msg.value >= 0.0000001 ether);    // Минимальное количество Эфиров для покупки \n', '        uint sum = msg.value;         // Сумма на которую хочет купить Токены\n', '        uint amount = sum.mul(1 ether).div(priceTokenWei);\n', '        uint retSum = 0;\n', '        if(tokensSold.add(amount) > tokensForSale) {\n', '            uint retAmount = tokensSold.add(amount).sub(tokensForSale);\n', '            retSum = retAmount.mul(priceTokenWei).div(1 ether);\n', '            amount = amount.sub(retAmount);\n', '            sum = sum.sub(retSum);\n', '        }\n', '\n', '\t\ttokensSold = tokensSold.add(amount);\n', '        collectedWei = collectedWei.add(sum);\n', '        purchaseBalances[msg.sender] = purchaseBalances[msg.sender].add(sum);\n', '\t\ttoken.mint(msg.sender, amount);\n', '        if(retSum > 0) {\n', '            msg.sender.transfer(retSum);\n', '        }\t\t\n', '\n', '        emit Rurchase(msg.sender, amount, sum);\n', '    }\n', '\t\n', '\tfunction StartNextStage() onlyOwner public {\n', '        require(!crowdsaleClosed);\n', '        require(pausestatus != 1);\n', '\t\tpausestatus = 1;\n', '        paused = false;\n', '        emit StartNextIcoStage(); // Начало этапа ICO \n', '    }\n', '\n', '\t\n', '\t/*Смена этапа и стоимости*/\n', '\tfunction NewStage() private {\n', '\n', '\t\tpriceTokenWei = 200000000000; // Новая стоимость Токена 2 раза больше чем на PreICO\n', '\t\tTokenPriceETH = "0.0000001";\n', '\t}\n', '    function closeCrowdsale() onlyOwner public {\n', '        require(!crowdsaleClosed);\n', '        beneficiary.transfer(address(this).balance);\n', '        token.mint(beneficiary, token.cap().sub(token.totalSupply()));\n', '        token.transferOwnership(beneficiary);\n', '        crowdsaleClosed = true;\n', '        emit CrowdsaleClose();\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if(a == 0) { return 0; }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '    function Ownable() public { \n', '\t    owner = msg.sender; \n', '\t\t}\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(this));\n', '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    function balanceOf(address who) public view returns(uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '    function approve(address spender, uint256 value) public returns(bool);\n', '}\n', '\n', 'contract StandardToken is ERC20{\n', '    using SafeMath for uint256;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    mapping(address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\t\n', '\n', '\n', '\t\n', '    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '    function balanceOf(address _owner) public view returns(uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', 'function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(this));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '}\n', 'function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n', '        require(_to.length == _value.length);\n', '        for(uint i = 0; i < _to.length; i++) {\n', '            transfer(_to[i], _value[i]);\n', '        }\n', '        return true;\n', '}\n', 'function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(this));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public view returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if(_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', 'contract MintableToken is StandardToken, Ownable{\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    bool public mintingFinished = false;\n', '    modifier canMint(){require(!mintingFinished); _;}\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\t\temit Mint(_to, _amount);\n', '        emit Transfer(address(this), _to, _amount);\n', '        return true;\n', '    }\n', '    function finishMinting() onlyOwner canMint public returns(bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', 'contract CappedToken is MintableToken {\n', '    uint256 public cap;\n', '    function CappedToken(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n', '        require(totalSupply.add(_amount) <= cap);\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', 'contract BurnableToken is StandardToken {\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '}\n', 'contract RewardToken is StandardToken, Ownable {\n', '    struct Payment {\n', '        uint time;\n', '        uint amount;\n', '    }\n', '    Payment[] public repayments;\n', '    mapping(address => Payment[]) public rewards;\n', '\n', '    event Reward(address indexed to, uint256 amount);\n', '\n', '    function repayment() onlyOwner payable public {\n', '        require(msg.value >= 0.00000001 * 1 ether);\n', '        repayments.push(Payment({time : now, amount : msg.value}));\n', '    }\n', '    function _reward(address _to) private returns(bool) {\n', '        if(rewards[_to].length < repayments.length) {\n', '            uint sum = 0;\n', '            for(uint i = rewards[_to].length; i < repayments.length; i++) {\n', '                uint amount = balances[_to] > 0 ? (repayments[i].amount * balances[_to] / totalSupply) : 0;\n', '                rewards[_to].push(Payment({time : now, amount : amount}));\n', '                sum += amount;\n', '            }\n', '            if(sum > 0) {\n', '                _to.transfer(sum);\n', '                emit Reward(_to, sum);\n', '            }\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function reward() public returns(bool) {\n', '        return _reward(msg.sender);\n', '    }\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        _reward(msg.sender);\n', '        _reward(_to);\n', '        return super.transfer(_to, _value);\n', '    }\n', '    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n', '        _reward(msg.sender);\n', '        for(uint i = 0; i < _to.length; i++) {\n', '            _reward(_to[i]);\n', '        }\n', '        return super.multiTransfer(_to, _value);\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        _reward(_from);\n', '        _reward(_to);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', 'contract Token is CappedToken, BurnableToken, RewardToken {\n', '    function Token() CappedToken(10000000 * 1 ether) StandardToken("JULLAR0805", "JUL0805", 18) public {\n', '        \n', '    }\n', '}\n', 'contract Crowdsale is Ownable{\n', '    using SafeMath for uint;\n', '    Token public token;\n', '    address private beneficiary = 0x75E6d4a772DB168f34462a21b64192557ef5c504; // Кошелек компании\n', '    uint public collectedWei; // Собранные Веи\n', '    uint private refundedWei; \n', '\t\n', '\n', '    string public TokenPriceETH = "0.0000001";  // Стоимость токена \n', '\t\n', '\tuint public tokensSold; // Проданное количество Токенов\n', '\tuint private tokensDm; // Проданное количество Токенов + Количество покупаемых токенов\n', '\tuint private tokensForSale = 45 * 1 ether; // Токены на продажу\n', '    uint public SoldToken;\n', '    uint public SaleToken = tokensForSale / 1 ether;\n', '\tuint public StartIcoStage = 0;\n', '\t// uint public priceTokenWei = 12690355329949;  // 1 токен равен 0,01$ (1eth = 788$)\n', '    uint public priceTokenWei = 100000000000;  // 0.0000001 ETH за 1 токен\n', '\t\n', '    bool public crowdsaleClosed = false;\n', '    mapping(address => uint256) public purchaseBalances;  // Массив держателей токенов\n', '    event Rurchase(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n', '    \n', '    event CrowdsaleClose();\n', '\tuint256 private oSb = 8000000 * 1 ether;\n', '    /*Пауза и Старт*/\n', '\tbool public paused = false;\n', '\tuint public pausestatus = 1;\n', '    event Pause();\n', '    event StartNextIcoStage();\n', '\tfunction pause() private {\n', '        pausestatus = 0;\n', '\t\tpaused = true;\n', '        emit Pause();\n', '    }\t\n', '\tfunction Crowdsale() public {\n', '     token = new Token();\n', '\t emit Rurchase(beneficiary, oSb, 0);\n', '\t token.mint(beneficiary, oSb);\n', '\t}\n', '    function() payable public {\n', '\t\tif(crowdsaleClosed == false){\n', '\t\t       purchase();\n', '\t\t}\n', '    }\t\n', '\tfunction purchase() payable public {\n', '\t\trequire(pausestatus != 0);\n', '        require(!crowdsaleClosed);\n', '        require(tokensSold < tokensForSale);\n', '        require(msg.value >= 0.0000001 ether);    // Минимальное количество Эфиров для покупки \n', '        uint sum = msg.value;         // Сумма на которую хочет купить Токены\n', '        uint amount = sum.mul(1 ether).div(priceTokenWei);\n', '        uint retSum = 0;\n', '        if(tokensSold.add(amount) > tokensForSale) {\n', '            uint retAmount = tokensSold.add(amount).sub(tokensForSale);\n', '            retSum = retAmount.mul(priceTokenWei).div(1 ether);\n', '            amount = amount.sub(retAmount);\n', '            sum = sum.sub(retSum);\n', '        }\n', '\n', '\t\ttokensSold = tokensSold.add(amount);\n', '        collectedWei = collectedWei.add(sum);\n', '        purchaseBalances[msg.sender] = purchaseBalances[msg.sender].add(sum);\n', '\t\ttoken.mint(msg.sender, amount);\n', '        if(retSum > 0) {\n', '            msg.sender.transfer(retSum);\n', '        }\t\t\n', '\n', '        emit Rurchase(msg.sender, amount, sum);\n', '    }\n', '\t\n', '\tfunction StartNextStage() onlyOwner public {\n', '        require(!crowdsaleClosed);\n', '        require(pausestatus != 1);\n', '\t\tpausestatus = 1;\n', '        paused = false;\n', '        emit StartNextIcoStage(); // Начало этапа ICO \n', '    }\n', '\n', '\t\n', '\t/*Смена этапа и стоимости*/\n', '\tfunction NewStage() private {\n', '\n', '\t\tpriceTokenWei = 200000000000; // Новая стоимость Токена 2 раза больше чем на PreICO\n', '\t\tTokenPriceETH = "0.0000001";\n', '\t}\n', '    function closeCrowdsale() onlyOwner public {\n', '        require(!crowdsaleClosed);\n', '        beneficiary.transfer(address(this).balance);\n', '        token.mint(beneficiary, token.cap().sub(token.totalSupply()));\n', '        token.transferOwnership(beneficiary);\n', '        crowdsaleClosed = true;\n', '        emit CrowdsaleClose();\n', '    }\n', '}']
