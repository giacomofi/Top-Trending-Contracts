['pragma solidity ^0.4.8;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      revert();\n', '    }\n', '  }\n', '}\n', '\n', 'contract NlinkToken is SafeMath {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\n', '    /* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function NlinkToken() {\n', '        balanceOf[msg.sender] = 100000000000000000;       // Give the creator all initial tokens\n', '        totalSupply = 100000000000000000;                 // Update total supply\n', "        name = 'New Link coin';                          // Set the name for display purposes\n", "        symbol = 'Nlink';                          // Set the symbol for display purposes\n", '        decimals = 8;                            // Amount of decimals for display purposes\n', '    }\n', '\n', '    /* Send tokens */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (_value <= 0) revert();\n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);              // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                      // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require((_value == 0) || (allowance[msg.sender][_spender] == 0));\n', '        if (_value <= 0) revert();\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* Transfer tokens */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) revert();                                // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (_value <= 0) revert();\n', '        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                         // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Destruction of the token */\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n', '        if (_value <= 0) revert();\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);           // Subtract from the sender\n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function freeze(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) revert();            // Check if the sender has enough\n', '        if (_value <= 0) revert();\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);             // Subtract from the sender\n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);               // Updates frozen tokens\n', '        Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function unfreeze(uint256 _value) returns (bool success) {\n', '        if (freezeOf[msg.sender] < _value) revert();            // Check if the sender has enough\n', '        if (_value <= 0) revert();\n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);              // Updates frozen tokens\n', '        balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);            // Add to the sender\n', '        Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Prevents accidental sending of Ether */\n', '    function () {\n', '        revert();\n', '    }\n', '    /* token code by aminsire@gmail.com */\n', '}']