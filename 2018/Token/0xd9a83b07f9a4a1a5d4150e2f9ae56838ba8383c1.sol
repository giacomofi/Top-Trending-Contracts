['/* file: ./node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/* eof (./node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol) */\n', '/* file: ./node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/* eof (./node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol) */\n', '/* file: ./node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/* eof (./node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol) */\n', '/* file: ./node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '/* eof (./node_modules/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol) */\n', '/* file: ./contracts/vault/TokenVault.sol */\n', '/**\n', ' * @title Token Vault contract.\n', ' * @dev Vault contract that will allow a beneficiary to release his/her #MIO tokens\n', ' * after the release time.\n', ' * @version 1.0\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', 'contract TokenVault {\n', '    using SafeERC20 for ERC20;\n', '    using SafeMath for uint256;\n', '\n', '    ERC20 public token;\n', '    uint256 public releaseTime;\n', '\n', '    mapping(address => uint256) public lockedBalances;\n', '\n', '    /**\n', '     * @param _token Address of the MioToken to be held.\n', '     * @param _releaseTime Epoch timestamp from which token release is enabled.\n', '     */\n', '    constructor(address _token, uint256 _releaseTime) public {\n', '        require(block.timestamp < _releaseTime);\n', '        token = ERC20(_token);\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', "     * @dev Allows the transfer of unlocked tokens to a set of beneficiaries' addresses.\n", "     * @param beneficiaries Array of beneficiaries' addresses that will receive the unlocked tokens.\n", '     */\n', '    function batchRelease(address[] beneficiaries) external {\n', '        uint256 length = beneficiaries.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            releaseFor(beneficiaries[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the caller to transfer unlocked tokens to his/her account.\n', '     */\n', '    function release() public {\n', '        releaseFor(msg.sender);\n', '    }\n', '\n', '    /**\n', "     * @dev Allows the caller to transfer unlocked tokens to the beneficiary's address.\n", '     * @param beneficiary The address that will receive the unlocked tokens.\n', '     */\n', '    function releaseFor(address beneficiary) public {\n', '        require(block.timestamp >= releaseTime);\n', '        uint256 amount = lockedBalances[beneficiary];\n', '        require(amount > 0);\n', '        lockedBalances[beneficiary] = 0;\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows a token holder to add to his/her balance of locked tokens.\n', '     * @param value Amount of tokens to be locked in this vault.\n', '     */\n', '    function addBalance(uint256 value) public {\n', '        addBalanceFor(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * @notice To be called by the account that holds Mio tokens. The caller needs to first approve this vault to\n', '     * transfer tokens on its behalf.\n', "     * The tokens to be locked will be transfered from the caller's account to this vault.\n", "     * The 'value' will be added to the balance of 'account' in this contract.\n", "     * @dev Allows a token holder to add to a another account's balance of locked tokens.\n", '     * @param account Address that will have a balance of locked tokens.\n', '     * @param value Amount of tokens to be locked in this vault.\n', '     */\n', '    function addBalanceFor(address account, uint256 value) public {\n', '        lockedBalances[account] = lockedBalances[account].add(value);\n', '        token.safeTransferFrom(msg.sender, address(this), value);\n', '    }\n', '\n', '     /**\n', "    * @dev Gets the beneficiary's locked token balance\n", '    * @param account Address of the beneficiary\n', '    */\n', '    function getLockedBalance(address account) public view returns (uint256) {\n', '        return lockedBalances[account];\n', '    }\n', '}\n', '\n', '\n', '\n', '/* eof (./contracts/vault/TokenVault.sol) */']