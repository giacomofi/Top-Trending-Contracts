['pragma solidity ^0.4.21;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Bounty0xStaking is Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '    address public Bounty0xToken;\n', '    mapping (address => uint) public balances;\n', '    mapping (uint => mapping (address => uint)) public stakes; // mapping of submission ids to mapping of addresses that staked an amount of bounty token\n', '    event Deposit(address depositor, uint amount, uint balance);\n', '    event Withdraw(address depositor, uint amount, uint balance);\n', '    event Stake(uint submissionId, address hunter, uint amount);\n', '    event StakeReleased(uint submissionId, address from, address to, uint amount);\n', '    constructor(address _bounty0xToken) public {\n', '        Bounty0xToken = _bounty0xToken;\n', '    }\n', '    function deposit(uint _amount) public whenNotPaused {\n', '        //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n', '        require(ERC20(Bounty0xToken).transferFrom(msg.sender, this, _amount));\n', '        balances[msg.sender] = SafeMath.add(balances[msg.sender], _amount);\n', '        emit Deposit(msg.sender, _amount, balances[msg.sender]);\n', '    }\n', '    function withdraw(uint _amount) public whenNotPaused {\n', '        require(balances[msg.sender] >= _amount);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _amount);\n', '        require(ERC20(Bounty0xToken).transfer(msg.sender, _amount));\n', '        emit Withdraw(msg.sender, _amount, balances[msg.sender]);\n', '    }\n', '    function stake(uint _submissionId, uint _amount) public whenNotPaused {\n', '        require(balances[msg.sender] >= _amount);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _amount);\n', '        stakes[_submissionId][msg.sender] = SafeMath.add(stakes[_submissionId][msg.sender], _amount);\n', '        emit Stake(_submissionId, msg.sender, _amount);\n', '    }\n', '    function stakeToMany(uint[] _submissionIds, uint[] _amounts) public whenNotPaused {\n', '        uint totalAmount = 0;\n', '        for (uint j = 0; j < _amounts.length; j++) {\n', '            totalAmount = SafeMath.add(totalAmount, _amounts[j]);\n', '        }\n', '        require(balances[msg.sender] >= totalAmount);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], totalAmount);\n', '        for (uint i = 0; i < _submissionIds.length; i++) {\n', '            stakes[_submissionIds[i]][msg.sender] = SafeMath.add(stakes[_submissionIds[i]][msg.sender], _amounts[i]);\n', '            emit Stake(_submissionIds[i], msg.sender, _amounts[i]);\n', '        }\n', '    }\n', '    function releaseStake(uint _submissionId, address _from, address _to, uint _amount) public onlyOwner {\n', '        require(stakes[_submissionId][_from] >= _amount);\n', '        stakes[_submissionId][_from] = SafeMath.sub(stakes[_submissionId][_from], _amount);\n', '        balances[_to] = SafeMath.add(balances[_to], _amount);\n', '        emit StakeReleased(_submissionId, _from, _to, _amount);\n', '    }\n', '    function releaseManyStakes(uint[] _submissionIds, address[] _from, address[] _to, uint[] _amounts) public onlyOwner {\n', '        require(_submissionIds.length == _from.length &&\n', '                _submissionIds.length == _to.length &&\n', '                _submissionIds.length == _amounts.length);\n', '        for (uint i = 0; i < _submissionIds.length; i++) {\n', '            require(stakes[_submissionIds[i]][_from[i]] >= _amounts[i]);\n', '            stakes[_submissionIds[i]][_from[i]] = SafeMath.sub(stakes[_submissionIds[i]][_from[i]], _amounts[i]);\n', '            balances[_to[i]] = SafeMath.add(balances[_to[i]], _amounts[i]);\n', '            emit StakeReleased(_submissionIds[i], _from[i], _to[i], _amounts[i]);\n', '        }\n', '    }\n', '}']