['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/network/AbstractDeployer.sol\n', '\n', 'contract AbstractDeployer is Ownable {\n', '    function title() public view returns(string);\n', '\n', '    function deploy(bytes data)\n', '        external onlyOwner returns(address result)\n', '    {\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(address(this).call(data), "Arbitrary call failed");\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            returndatacopy(0, 0, 32)\n', '            result := mload(0)\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interface/IBasicMultiToken.sol\n', '\n', 'contract IBasicMultiToken is ERC20 {\n', '    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\n', '    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\n', '\n', '    function tokensCount() public view returns(uint256);\n', '    function tokens(uint i) public view returns(ERC20);\n', '    \n', '    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public;\n', '    function bundle(address _beneficiary, uint256 _amount) public;\n', '\n', '    function unbundle(address _beneficiary, uint256 _value) public;\n', '    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public;\n', '\n', '    function disableBundling() public;\n', '    function enableBundling() public;\n', '}\n', '\n', '// File: contracts/interface/IMultiToken.sol\n', '\n', 'contract IMultiToken is IBasicMultiToken {\n', '    event Update();\n', '    event Change(address indexed _fromToken, address indexed _toToken, address indexed _changer, uint256 _amount, uint256 _return);\n', '\n', '    function weights(address _token) public view returns(uint256);\n', '\n', '    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256 returnAmount);\n', '    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 returnAmount);\n', '\n', '    function disableChanges() public;\n', '}\n', '\n', '// File: contracts/network/MultiTokenNetwork.sol\n', '\n', 'contract MultiTokenNetwork is Pausable {\n', '    address[] private _multitokens;\n', '    AbstractDeployer[] private _deployers;\n', '\n', '    event NewMultitoken(address indexed mtkn);\n', '    event NewDeployer(uint256 indexed index, address indexed oldDeployer, address indexed newDeployer);\n', '\n', '    function multitokensCount() public view returns(uint256) {\n', '        return _multitokens.length;\n', '    }\n', '\n', '    function multitokens(uint i) public view returns(address) {\n', '        return _multitokens[i];\n', '    }\n', '\n', '    function allMultitokens() public view returns(address[]) {\n', '        return _multitokens;\n', '    }\n', '\n', '    function deployersCount() public view returns(uint256) {\n', '        return _deployers.length;\n', '    }\n', '\n', '    function deployers(uint i) public view returns(AbstractDeployer) {\n', '        return _deployers[i];\n', '    }\n', '\n', '    function allWalletBalances(address wallet) public view returns(uint256[]) {\n', '        uint256[] memory balances = new uint256[](_multitokens.length);\n', '        for (uint i = 0; i < _multitokens.length; i++) {\n', '            balances[i] = ERC20(_multitokens[i]).balanceOf(wallet);\n', '        }\n', '        return balances;\n', '    }\n', '\n', '    function deleteMultitoken(uint index) public onlyOwner {\n', '        require(index < _multitokens.length, "deleteMultitoken: index out of range");\n', '        if (index != _multitokens.length - 1) {\n', '            _multitokens[index] = _multitokens[_multitokens.length - 1];\n', '        }\n', '        _multitokens.length -= 1;\n', '    }\n', '\n', '    function deleteDeployer(uint index) public onlyOwner {\n', '        require(index < _deployers.length, "deleteDeployer: index out of range");\n', '        if (index != _deployers.length - 1) {\n', '            _deployers[index] = _deployers[_deployers.length - 1];\n', '        }\n', '        _deployers.length -= 1;\n', '    }\n', '\n', '    function disableBundlingMultitoken(uint index) public onlyOwner {\n', '        IBasicMultiToken(_multitokens[index]).disableBundling();\n', '    }\n', '\n', '    function enableBundlingMultitoken(uint index) public onlyOwner {\n', '        IBasicMultiToken(_multitokens[index]).enableBundling();\n', '    }\n', '\n', '    function disableChangesMultitoken(uint index) public onlyOwner {\n', '        IMultiToken(_multitokens[index]).disableChanges();\n', '    }\n', '\n', '    function addDeployer(AbstractDeployer deployer) public onlyOwner whenNotPaused {\n', '        require(deployer.owner() == address(this), "addDeployer: first set MultiTokenNetwork as owner");\n', '        emit NewDeployer(_deployers.length, address(0), deployer);\n', '        _deployers.push(deployer);\n', '    }\n', '\n', '    function setDeployer(uint256 index, AbstractDeployer deployer) public onlyOwner whenNotPaused {\n', '        require(deployer.owner() == address(this), "setDeployer: first set MultiTokenNetwork as owner");\n', '        emit NewDeployer(index, _deployers[index], deployer);\n', '        _deployers[index] = deployer;\n', '    }\n', '\n', '    function deploy(uint256 index, bytes data) public whenNotPaused {\n', '        address mtkn = _deployers[index].deploy(data);\n', '        _multitokens.push(mtkn);\n', '        emit NewMultitoken(mtkn);\n', '    }\n', '\n', '    function makeCall(address target, uint256 value, bytes data) public onlyOwner {\n', '        // solium-disable-next-line security/no-call-value\n', '        require(target.call.value(value)(data), "Arbitrary call failed");\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/network/AbstractDeployer.sol\n', '\n', 'contract AbstractDeployer is Ownable {\n', '    function title() public view returns(string);\n', '\n', '    function deploy(bytes data)\n', '        external onlyOwner returns(address result)\n', '    {\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        require(address(this).call(data), "Arbitrary call failed");\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            returndatacopy(0, 0, 32)\n', '            result := mload(0)\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interface/IBasicMultiToken.sol\n', '\n', 'contract IBasicMultiToken is ERC20 {\n', '    event Bundle(address indexed who, address indexed beneficiary, uint256 value);\n', '    event Unbundle(address indexed who, address indexed beneficiary, uint256 value);\n', '\n', '    function tokensCount() public view returns(uint256);\n', '    function tokens(uint i) public view returns(ERC20);\n', '    \n', '    function bundleFirstTokens(address _beneficiary, uint256 _amount, uint256[] _tokenAmounts) public;\n', '    function bundle(address _beneficiary, uint256 _amount) public;\n', '\n', '    function unbundle(address _beneficiary, uint256 _value) public;\n', '    function unbundleSome(address _beneficiary, uint256 _value, ERC20[] _tokens) public;\n', '\n', '    function disableBundling() public;\n', '    function enableBundling() public;\n', '}\n', '\n', '// File: contracts/interface/IMultiToken.sol\n', '\n', 'contract IMultiToken is IBasicMultiToken {\n', '    event Update();\n', '    event Change(address indexed _fromToken, address indexed _toToken, address indexed _changer, uint256 _amount, uint256 _return);\n', '\n', '    function weights(address _token) public view returns(uint256);\n', '\n', '    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256 returnAmount);\n', '    function change(address _fromToken, address _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 returnAmount);\n', '\n', '    function disableChanges() public;\n', '}\n', '\n', '// File: contracts/network/MultiTokenNetwork.sol\n', '\n', 'contract MultiTokenNetwork is Pausable {\n', '    address[] private _multitokens;\n', '    AbstractDeployer[] private _deployers;\n', '\n', '    event NewMultitoken(address indexed mtkn);\n', '    event NewDeployer(uint256 indexed index, address indexed oldDeployer, address indexed newDeployer);\n', '\n', '    function multitokensCount() public view returns(uint256) {\n', '        return _multitokens.length;\n', '    }\n', '\n', '    function multitokens(uint i) public view returns(address) {\n', '        return _multitokens[i];\n', '    }\n', '\n', '    function allMultitokens() public view returns(address[]) {\n', '        return _multitokens;\n', '    }\n', '\n', '    function deployersCount() public view returns(uint256) {\n', '        return _deployers.length;\n', '    }\n', '\n', '    function deployers(uint i) public view returns(AbstractDeployer) {\n', '        return _deployers[i];\n', '    }\n', '\n', '    function allWalletBalances(address wallet) public view returns(uint256[]) {\n', '        uint256[] memory balances = new uint256[](_multitokens.length);\n', '        for (uint i = 0; i < _multitokens.length; i++) {\n', '            balances[i] = ERC20(_multitokens[i]).balanceOf(wallet);\n', '        }\n', '        return balances;\n', '    }\n', '\n', '    function deleteMultitoken(uint index) public onlyOwner {\n', '        require(index < _multitokens.length, "deleteMultitoken: index out of range");\n', '        if (index != _multitokens.length - 1) {\n', '            _multitokens[index] = _multitokens[_multitokens.length - 1];\n', '        }\n', '        _multitokens.length -= 1;\n', '    }\n', '\n', '    function deleteDeployer(uint index) public onlyOwner {\n', '        require(index < _deployers.length, "deleteDeployer: index out of range");\n', '        if (index != _deployers.length - 1) {\n', '            _deployers[index] = _deployers[_deployers.length - 1];\n', '        }\n', '        _deployers.length -= 1;\n', '    }\n', '\n', '    function disableBundlingMultitoken(uint index) public onlyOwner {\n', '        IBasicMultiToken(_multitokens[index]).disableBundling();\n', '    }\n', '\n', '    function enableBundlingMultitoken(uint index) public onlyOwner {\n', '        IBasicMultiToken(_multitokens[index]).enableBundling();\n', '    }\n', '\n', '    function disableChangesMultitoken(uint index) public onlyOwner {\n', '        IMultiToken(_multitokens[index]).disableChanges();\n', '    }\n', '\n', '    function addDeployer(AbstractDeployer deployer) public onlyOwner whenNotPaused {\n', '        require(deployer.owner() == address(this), "addDeployer: first set MultiTokenNetwork as owner");\n', '        emit NewDeployer(_deployers.length, address(0), deployer);\n', '        _deployers.push(deployer);\n', '    }\n', '\n', '    function setDeployer(uint256 index, AbstractDeployer deployer) public onlyOwner whenNotPaused {\n', '        require(deployer.owner() == address(this), "setDeployer: first set MultiTokenNetwork as owner");\n', '        emit NewDeployer(index, _deployers[index], deployer);\n', '        _deployers[index] = deployer;\n', '    }\n', '\n', '    function deploy(uint256 index, bytes data) public whenNotPaused {\n', '        address mtkn = _deployers[index].deploy(data);\n', '        _multitokens.push(mtkn);\n', '        emit NewMultitoken(mtkn);\n', '    }\n', '\n', '    function makeCall(address target, uint256 value, bytes data) public onlyOwner {\n', '        // solium-disable-next-line security/no-call-value\n', '        require(target.call.value(value)(data), "Arbitrary call failed");\n', '    }\n', '}']
