['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/* solium-disable security/no-block-members */\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(\n', '    address _beneficiary,\n', '    uint256 _start,\n', '    uint256 _cliff,\n', '    uint256 _duration,\n', '    bool _revocable\n', '  )\n', '    public\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    emit Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    emit Revoked();\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (block.timestamp < cliff) {\n', '      return 0;\n', '    } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title PresaleTokenVesting\n', ' * @dev PresaleTokenVesting allows for vesting periods which begin at\n', ' * the time the token sale ends.\n', ' */\n', 'contract PresaleTokenVesting is TokenVesting {\n', '\n', '    function PresaleTokenVesting(address _beneficiary, uint256 _duration) TokenVesting(_beneficiary, 0, _duration, _duration, false) public {\n', '    }\n', '\n', '    function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '        UrbitToken urbit = UrbitToken(token); \n', '        if (!urbit.saleClosed()) {\n', '            return(0);\n', '        } else {\n', '            uint256 currentBalance = token.balanceOf(this);\n', '            uint256 totalBalance = currentBalance.add(released[token]);\n', '            uint256 saleClosedTime = urbit.saleClosedTimestamp();\n', '            if (block.timestamp >= duration.add(saleClosedTime)) { // solium-disable-line security/no-block-members\n', '                return totalBalance;\n', '            } else {\n', '                return totalBalance.mul(block.timestamp.sub(saleClosedTime)).div(duration); // solium-disable-line security/no-block-members\n', '\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TokenVault\n', ' * @dev TokenVault is a token holder contract that will allow a\n', ' * beneficiary to spend the tokens from some function of a specified ERC20 token\n', ' */\n', 'contract TokenVault {\n', '    using SafeERC20 for ERC20;\n', '\n', '    // ERC20 token contract being held\n', '    ERC20 public token;\n', '\n', '    function TokenVault(ERC20 _token) public {\n', '        token = _token;\n', '    }\n', '\n', '    /**\n', '     * @notice Allow the token itself to send tokens\n', '     * using transferFrom().\n', '     */\n', '    function fillUpAllowance() public {\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.approve(token, amount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title UrbitToken\n', ' * @dev UrbitToken is a contract for the Urbit token sale, creating the\n', ' * tokens and managing the vaults.\n', ' */\n', 'contract UrbitToken is BurnableToken, StandardToken {\n', '    string public constant name = "Urbit Token"; // solium-disable-line uppercase\n', '    string public constant symbol = "URB"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '    uint256 public constant MAGNITUDE = 10**uint256(decimals);\n', '\n', '    /// Maximum tokens to be allocated (600 million)\n', '    uint256 public constant HARD_CAP = 600000000 * MAGNITUDE;\n', '\n', '    /// This address is used to manage the admin functions and allocate vested tokens\n', '    address public urbitAdminAddress;\n', '\n', '    /// This address is used to keep the tokens for sale\n', '    address public saleTokensAddress;\n', '\n', '    /// This vault is used to keep the bounty and marketing tokens\n', '    TokenVault public bountyTokensVault;\n', '\n', '    /// This vault is used to keep the team and founders tokens\n', '    TokenVault public urbitTeamTokensVault;\n', '\n', '    /// This vault is used to keep the advisors tokens\n', '    TokenVault public advisorsTokensVault;\n', '\n', '    /// This vault is used to keep the rewards tokens\n', '    TokenVault public rewardsTokensVault;\n', '\n', '    /// This vault is used to keep the retained tokens\n', '    TokenVault public retainedTokensVault;\n', '\n', '    /// Store the vesting contracts addresses\n', '    mapping(address => address[]) public vestingsOf;\n', '\n', '    /// when the token sale is closed, the trading is open\n', '    uint256 public saleClosedTimestamp = 0;\n', '\n', '    /// Only allowed to execute before the token sale is closed\n', '    modifier beforeSaleClosed {\n', '        require(!saleClosed());\n', '        _;\n', '    }\n', '\n', '    /// Limiting functions to the admins of the token only\n', '    modifier onlyAdmin {\n', '        require(senderIsAdmin());\n', '        _;\n', '    }\n', '\n', '    function UrbitToken(\n', '        address _urbitAdminAddress,\n', '        address _saleTokensAddress) public\n', '    {\n', '        require(_urbitAdminAddress != address(0));\n', '        require(_saleTokensAddress != address(0));\n', '\n', '        urbitAdminAddress = _urbitAdminAddress;\n', '        saleTokensAddress = _saleTokensAddress;\n', '    }\n', '\n', '    /// @dev allows the admin to assign a new admin\n', '    function changeAdmin(address _newUrbitAdminAddress) external onlyAdmin {\n', '        require(_newUrbitAdminAddress != address(0));\n', '        urbitAdminAddress = _newUrbitAdminAddress;\n', '    }\n', '\n', '    /// @dev creates the tokens needed for sale\n', '    function createSaleTokens() external onlyAdmin beforeSaleClosed {\n', '        require(bountyTokensVault == address(0));\n', '\n', '        /// Maximum tokens to be allocated on the sale\n', '        /// 252,000,000 URB\n', '        createTokens(252000000, saleTokensAddress);\n', '\n', '        /// Bounty tokens - 24M URB\n', '        bountyTokensVault = createTokenVault(24000000);\n', '    }\n', '\n', '    /// @dev Close the token sale\n', '    function closeSale() external onlyAdmin beforeSaleClosed {\n', '        createAwardTokens();\n', '        saleClosedTimestamp = block.timestamp; // solium-disable-line security/no-block-members\n', '    }\n', '\n', '    /// @dev Once the token sale is closed and tokens are distributed,\n', '    /// burn the remaining unsold, undistributed tokens\n', '    function burnUnsoldTokens() external onlyAdmin {\n', '        require(saleClosed());\n', '        _burn(saleTokensAddress, balances[saleTokensAddress]);\n', '        _burn(bountyTokensVault, balances[bountyTokensVault]);\n', '    }\n', '\n', '    function lockBountyTokens(uint256 _tokensAmount, address _beneficiary, uint256 _duration) external beforeSaleClosed {\n', '        require(msg.sender == saleTokensAddress || senderIsAdmin());\n', '        _presaleLock(bountyTokensVault, _tokensAmount, _beneficiary, _duration);\n', '    }\n', '\n', '    /// @dev Shorter version of vest tokens (lock for a single whole period)\n', '    function lockTokens(address _fromVault, uint256 _tokensAmount, address _beneficiary, uint256 _unlockTime) external onlyAdmin {\n', '        this.vestTokens(_fromVault, _tokensAmount, _beneficiary, _unlockTime, 0, 0, false); // solium-disable-line arg-overflow\n', '    }\n', '\n', '    /// @dev Vest tokens\n', '    function vestTokens(\n', '        address _fromVault,\n', '        uint256 _tokensAmount,\n', '        address _beneficiary,\n', '        uint256 _start,\n', '        uint256 _cliff,\n', '        uint256 _duration,\n', '        bool _revocable)\n', '        external onlyAdmin\n', '    {\n', '        TokenVesting vesting = new TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable);\n', '        vestingsOf[_beneficiary].push(address(vesting));\n', '\n', '        require(this.transferFrom(_fromVault, vesting, _tokensAmount));\n', '    }\n', '\n', '    /// @dev releases vested tokens for the caller&#39;s own address\n', '    function releaseVestedTokens() external {\n', '        this.releaseVestedTokensFor(msg.sender);\n', '    }\n', '\n', '    /// @dev releases vested tokens for the specified address.\n', '    /// Can be called by any account for any address.\n', '    function releaseVestedTokensFor(address _owner) external {\n', '        ERC20Basic token = ERC20Basic(address(this));\n', '        for (uint i = 0; i < vestingsOf[_owner].length; i++) {\n', '            TokenVesting tv = TokenVesting(vestingsOf[_owner][i]);\n', '            if (tv.releasableAmount(token) > 0) {\n', '                tv.release(token);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev returns whether the sender is admin (or the contract itself)\n', '    function senderIsAdmin() public view returns (bool) {\n', '        return (msg.sender == urbitAdminAddress || msg.sender == address(this));\n', '    }\n', '\n', '    /// @dev The sale is closed when the saleClosedTimestamp is set.\n', '    function saleClosed() public view returns (bool) {\n', '        return (saleClosedTimestamp > 0);\n', '    }\n', '\n', '    /// @dev check the locked balance for an address\n', '    function lockedBalanceOf(address _owner) public view returns (uint256) {\n', '        uint256 result = 0;\n', '        for (uint i = 0; i < vestingsOf[_owner].length; i++) {\n', '            result += balances[vestingsOf[_owner][i]];\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /// @dev check the locked but releasable balance for an address\n', '    function releasableBalanceOf(address _owner) public view returns (uint256) {\n', '        uint256 result = 0;\n', '        for (uint i = 0; i < vestingsOf[_owner].length; i++) {\n', '            result += TokenVesting(vestingsOf[_owner][i]).releasableAmount(this);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /// @dev get the number of TokenVesting contracts for an address\n', '    function vestingCountOf(address _owner) public view returns (uint) {\n', '        return vestingsOf[_owner].length;\n', '    }\n', '\n', '    /// @dev get the specified TokenVesting contract address for an address\n', '    function vestingOf(address _owner, uint _index) public view returns (address) {\n', '        return vestingsOf[_owner][_index];\n', '    }\n', '\n', '    /// @dev Trading is limited before the sale is closed\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (saleClosed() || msg.sender == saleTokensAddress || senderIsAdmin()) {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @dev Trading is limited before the sale is closed\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (saleClosed() || msg.sender == saleTokensAddress || senderIsAdmin()) {\n', '            return super.transfer(_to, _value);\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @dev Grant tokens which begin vesting upon close of sale.\n', '    function _presaleLock(TokenVault _fromVault, uint256 _tokensAmount, address _beneficiary, uint256 _duration) internal {\n', '        PresaleTokenVesting vesting = new PresaleTokenVesting(_beneficiary, _duration);\n', '        vestingsOf[_beneficiary].push(address(vesting));\n', '\n', '        require(this.transferFrom(_fromVault, vesting, _tokensAmount));\n', '    }\n', '\n', '    // @dev create specified number of toekns and transfer to destination\n', '    function createTokens(uint32 count, address destination) internal onlyAdmin {\n', '        uint256 tokens = count * MAGNITUDE;\n', '        totalSupply_ = totalSupply_.add(tokens);\n', '        balances[destination] = tokens;\n', '        emit Transfer(0x0, destination, tokens);\n', '    }\n', '\n', '    /// @dev Create a TokenVault and fill with the specified newly minted tokens\n', '    function createTokenVault(uint32 count) internal onlyAdmin returns (TokenVault) {\n', '        TokenVault tokenVault = new TokenVault(ERC20(this));\n', '        createTokens(count, tokenVault);\n', '        tokenVault.fillUpAllowance();\n', '        return tokenVault;\n', '    }\n', '\n', '    /// @dev Creates the tokens awarded after the sale is closed\n', '    function createAwardTokens() internal onlyAdmin {\n', '        /// Team tokens - 30M URB\n', '        urbitTeamTokensVault = createTokenVault(30000000);\n', '\n', '        /// Advisors tokens - 24M URB\n', '        advisorsTokensVault = createTokenVault(24000000);\n', '\n', '        /// Rewards tokens - 150M URB\n', '        rewardsTokensVault = createTokenVault(150000000);\n', '\n', '        /// Retained tokens - 120M URB\n', '        retainedTokensVault = createTokenVault(120000000);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/* solium-disable security/no-block-members */\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(\n', '    address _beneficiary,\n', '    uint256 _start,\n', '    uint256 _cliff,\n', '    uint256 _duration,\n', '    bool _revocable\n', '  )\n', '    public\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    emit Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    emit Revoked();\n', '  }\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (block.timestamp < cliff) {\n', '      return 0;\n', '    } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title PresaleTokenVesting\n', ' * @dev PresaleTokenVesting allows for vesting periods which begin at\n', ' * the time the token sale ends.\n', ' */\n', 'contract PresaleTokenVesting is TokenVesting {\n', '\n', '    function PresaleTokenVesting(address _beneficiary, uint256 _duration) TokenVesting(_beneficiary, 0, _duration, _duration, false) public {\n', '    }\n', '\n', '    function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '        UrbitToken urbit = UrbitToken(token); \n', '        if (!urbit.saleClosed()) {\n', '            return(0);\n', '        } else {\n', '            uint256 currentBalance = token.balanceOf(this);\n', '            uint256 totalBalance = currentBalance.add(released[token]);\n', '            uint256 saleClosedTime = urbit.saleClosedTimestamp();\n', '            if (block.timestamp >= duration.add(saleClosedTime)) { // solium-disable-line security/no-block-members\n', '                return totalBalance;\n', '            } else {\n', '                return totalBalance.mul(block.timestamp.sub(saleClosedTime)).div(duration); // solium-disable-line security/no-block-members\n', '\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TokenVault\n', ' * @dev TokenVault is a token holder contract that will allow a\n', ' * beneficiary to spend the tokens from some function of a specified ERC20 token\n', ' */\n', 'contract TokenVault {\n', '    using SafeERC20 for ERC20;\n', '\n', '    // ERC20 token contract being held\n', '    ERC20 public token;\n', '\n', '    function TokenVault(ERC20 _token) public {\n', '        token = _token;\n', '    }\n', '\n', '    /**\n', '     * @notice Allow the token itself to send tokens\n', '     * using transferFrom().\n', '     */\n', '    function fillUpAllowance() public {\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.approve(token, amount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title UrbitToken\n', ' * @dev UrbitToken is a contract for the Urbit token sale, creating the\n', ' * tokens and managing the vaults.\n', ' */\n', 'contract UrbitToken is BurnableToken, StandardToken {\n', '    string public constant name = "Urbit Token"; // solium-disable-line uppercase\n', '    string public constant symbol = "URB"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '    uint256 public constant MAGNITUDE = 10**uint256(decimals);\n', '\n', '    /// Maximum tokens to be allocated (600 million)\n', '    uint256 public constant HARD_CAP = 600000000 * MAGNITUDE;\n', '\n', '    /// This address is used to manage the admin functions and allocate vested tokens\n', '    address public urbitAdminAddress;\n', '\n', '    /// This address is used to keep the tokens for sale\n', '    address public saleTokensAddress;\n', '\n', '    /// This vault is used to keep the bounty and marketing tokens\n', '    TokenVault public bountyTokensVault;\n', '\n', '    /// This vault is used to keep the team and founders tokens\n', '    TokenVault public urbitTeamTokensVault;\n', '\n', '    /// This vault is used to keep the advisors tokens\n', '    TokenVault public advisorsTokensVault;\n', '\n', '    /// This vault is used to keep the rewards tokens\n', '    TokenVault public rewardsTokensVault;\n', '\n', '    /// This vault is used to keep the retained tokens\n', '    TokenVault public retainedTokensVault;\n', '\n', '    /// Store the vesting contracts addresses\n', '    mapping(address => address[]) public vestingsOf;\n', '\n', '    /// when the token sale is closed, the trading is open\n', '    uint256 public saleClosedTimestamp = 0;\n', '\n', '    /// Only allowed to execute before the token sale is closed\n', '    modifier beforeSaleClosed {\n', '        require(!saleClosed());\n', '        _;\n', '    }\n', '\n', '    /// Limiting functions to the admins of the token only\n', '    modifier onlyAdmin {\n', '        require(senderIsAdmin());\n', '        _;\n', '    }\n', '\n', '    function UrbitToken(\n', '        address _urbitAdminAddress,\n', '        address _saleTokensAddress) public\n', '    {\n', '        require(_urbitAdminAddress != address(0));\n', '        require(_saleTokensAddress != address(0));\n', '\n', '        urbitAdminAddress = _urbitAdminAddress;\n', '        saleTokensAddress = _saleTokensAddress;\n', '    }\n', '\n', '    /// @dev allows the admin to assign a new admin\n', '    function changeAdmin(address _newUrbitAdminAddress) external onlyAdmin {\n', '        require(_newUrbitAdminAddress != address(0));\n', '        urbitAdminAddress = _newUrbitAdminAddress;\n', '    }\n', '\n', '    /// @dev creates the tokens needed for sale\n', '    function createSaleTokens() external onlyAdmin beforeSaleClosed {\n', '        require(bountyTokensVault == address(0));\n', '\n', '        /// Maximum tokens to be allocated on the sale\n', '        /// 252,000,000 URB\n', '        createTokens(252000000, saleTokensAddress);\n', '\n', '        /// Bounty tokens - 24M URB\n', '        bountyTokensVault = createTokenVault(24000000);\n', '    }\n', '\n', '    /// @dev Close the token sale\n', '    function closeSale() external onlyAdmin beforeSaleClosed {\n', '        createAwardTokens();\n', '        saleClosedTimestamp = block.timestamp; // solium-disable-line security/no-block-members\n', '    }\n', '\n', '    /// @dev Once the token sale is closed and tokens are distributed,\n', '    /// burn the remaining unsold, undistributed tokens\n', '    function burnUnsoldTokens() external onlyAdmin {\n', '        require(saleClosed());\n', '        _burn(saleTokensAddress, balances[saleTokensAddress]);\n', '        _burn(bountyTokensVault, balances[bountyTokensVault]);\n', '    }\n', '\n', '    function lockBountyTokens(uint256 _tokensAmount, address _beneficiary, uint256 _duration) external beforeSaleClosed {\n', '        require(msg.sender == saleTokensAddress || senderIsAdmin());\n', '        _presaleLock(bountyTokensVault, _tokensAmount, _beneficiary, _duration);\n', '    }\n', '\n', '    /// @dev Shorter version of vest tokens (lock for a single whole period)\n', '    function lockTokens(address _fromVault, uint256 _tokensAmount, address _beneficiary, uint256 _unlockTime) external onlyAdmin {\n', '        this.vestTokens(_fromVault, _tokensAmount, _beneficiary, _unlockTime, 0, 0, false); // solium-disable-line arg-overflow\n', '    }\n', '\n', '    /// @dev Vest tokens\n', '    function vestTokens(\n', '        address _fromVault,\n', '        uint256 _tokensAmount,\n', '        address _beneficiary,\n', '        uint256 _start,\n', '        uint256 _cliff,\n', '        uint256 _duration,\n', '        bool _revocable)\n', '        external onlyAdmin\n', '    {\n', '        TokenVesting vesting = new TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable);\n', '        vestingsOf[_beneficiary].push(address(vesting));\n', '\n', '        require(this.transferFrom(_fromVault, vesting, _tokensAmount));\n', '    }\n', '\n', "    /// @dev releases vested tokens for the caller's own address\n", '    function releaseVestedTokens() external {\n', '        this.releaseVestedTokensFor(msg.sender);\n', '    }\n', '\n', '    /// @dev releases vested tokens for the specified address.\n', '    /// Can be called by any account for any address.\n', '    function releaseVestedTokensFor(address _owner) external {\n', '        ERC20Basic token = ERC20Basic(address(this));\n', '        for (uint i = 0; i < vestingsOf[_owner].length; i++) {\n', '            TokenVesting tv = TokenVesting(vestingsOf[_owner][i]);\n', '            if (tv.releasableAmount(token) > 0) {\n', '                tv.release(token);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev returns whether the sender is admin (or the contract itself)\n', '    function senderIsAdmin() public view returns (bool) {\n', '        return (msg.sender == urbitAdminAddress || msg.sender == address(this));\n', '    }\n', '\n', '    /// @dev The sale is closed when the saleClosedTimestamp is set.\n', '    function saleClosed() public view returns (bool) {\n', '        return (saleClosedTimestamp > 0);\n', '    }\n', '\n', '    /// @dev check the locked balance for an address\n', '    function lockedBalanceOf(address _owner) public view returns (uint256) {\n', '        uint256 result = 0;\n', '        for (uint i = 0; i < vestingsOf[_owner].length; i++) {\n', '            result += balances[vestingsOf[_owner][i]];\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /// @dev check the locked but releasable balance for an address\n', '    function releasableBalanceOf(address _owner) public view returns (uint256) {\n', '        uint256 result = 0;\n', '        for (uint i = 0; i < vestingsOf[_owner].length; i++) {\n', '            result += TokenVesting(vestingsOf[_owner][i]).releasableAmount(this);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /// @dev get the number of TokenVesting contracts for an address\n', '    function vestingCountOf(address _owner) public view returns (uint) {\n', '        return vestingsOf[_owner].length;\n', '    }\n', '\n', '    /// @dev get the specified TokenVesting contract address for an address\n', '    function vestingOf(address _owner, uint _index) public view returns (address) {\n', '        return vestingsOf[_owner][_index];\n', '    }\n', '\n', '    /// @dev Trading is limited before the sale is closed\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (saleClosed() || msg.sender == saleTokensAddress || senderIsAdmin()) {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @dev Trading is limited before the sale is closed\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (saleClosed() || msg.sender == saleTokensAddress || senderIsAdmin()) {\n', '            return super.transfer(_to, _value);\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @dev Grant tokens which begin vesting upon close of sale.\n', '    function _presaleLock(TokenVault _fromVault, uint256 _tokensAmount, address _beneficiary, uint256 _duration) internal {\n', '        PresaleTokenVesting vesting = new PresaleTokenVesting(_beneficiary, _duration);\n', '        vestingsOf[_beneficiary].push(address(vesting));\n', '\n', '        require(this.transferFrom(_fromVault, vesting, _tokensAmount));\n', '    }\n', '\n', '    // @dev create specified number of toekns and transfer to destination\n', '    function createTokens(uint32 count, address destination) internal onlyAdmin {\n', '        uint256 tokens = count * MAGNITUDE;\n', '        totalSupply_ = totalSupply_.add(tokens);\n', '        balances[destination] = tokens;\n', '        emit Transfer(0x0, destination, tokens);\n', '    }\n', '\n', '    /// @dev Create a TokenVault and fill with the specified newly minted tokens\n', '    function createTokenVault(uint32 count) internal onlyAdmin returns (TokenVault) {\n', '        TokenVault tokenVault = new TokenVault(ERC20(this));\n', '        createTokens(count, tokenVault);\n', '        tokenVault.fillUpAllowance();\n', '        return tokenVault;\n', '    }\n', '\n', '    /// @dev Creates the tokens awarded after the sale is closed\n', '    function createAwardTokens() internal onlyAdmin {\n', '        /// Team tokens - 30M URB\n', '        urbitTeamTokensVault = createTokenVault(30000000);\n', '\n', '        /// Advisors tokens - 24M URB\n', '        advisorsTokensVault = createTokenVault(24000000);\n', '\n', '        /// Rewards tokens - 150M URB\n', '        rewardsTokensVault = createTokenVault(150000000);\n', '\n', '        /// Retained tokens - 120M URB\n', '        retainedTokensVault = createTokenVault(120000000);\n', '    }\n', '}']
