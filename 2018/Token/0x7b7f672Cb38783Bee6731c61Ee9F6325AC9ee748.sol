['pragma solidity ^0.4.18;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract WeiFangQiCoin is owned {\n', '    string constant public name="Wei Fang Qi Coin";\n', '    uint8 constant public decimals=2; \n', '    string constant public symbol="WFQ";\n', '    uint256 constant private _initialAmount = 950000;\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    uint256 public sellPrice; //=10000000000000000;\n', '    uint256 public buyPrice;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed _from,uint256 _value);\n', '    event FrozenFunds(address indexed target, bool frozen);\n', '    event MintToken(address indexed target,uint256 _value);\n', '    event Buy(address indexed target,uint256 _value);\n', '    event WithDraw(address _value);\n', '\n', '    constructor(\n', '        /* uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol */) \n', '            public payable {\n', '        uint256 mint_total=_initialAmount * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = mint_total;\n', '        totalSupply = mint_total;\n', '        /*\n', '        name = _tokenName;\n', '        decimals = _decimalUnits;\n', '        symbol = _tokenSymbol; \n', '        */\n', '    }\n', '    function() public payable {\n', '        buy();\n', '    }\n', '\n', '    function buy() payable public returns (bool success) {\n', '        //require(!frozenAccount[msg.sender]); \n', '        uint256 amount = msg.value / buyPrice; \n', '        _transfer(owner, msg.sender, amount); \n', '        emit Buy(msg.sender,amount);\n', '        //token(owner).transfer(msg.sender,msg.value);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]); \n', '        if (_from == _to)\n', '            return;\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender,_to,_value);\n', '        return true;\n', '    }\n', '    /*\n', '    function adminTransfer(address _from,address _to, uint256 _value) onlyOwner public returns (bool success) {\n', '        _transfer(_from,_to,_value);\n', '        return true;\n', '    }*/\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balanceOf[_from] >= _value && allowance >= _value);\n', '        _transfer(_from,_to,_value);\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function burn(uint256 _value) public  {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        //balanceOf[msg.sender] -= _value * 10 ** uint256(decimals);\n', '        //totalSupply -= _value * 10 ** uint256(decimals);\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '    function burnFrom(address _from, uint256 _value) public {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        /*\n', '        balanceOf[_from] -= _value * 10 ** uint256(decimals);\n', '        allowed[_from][msg.sender] -= _value * 10 ** uint256(decimals);\n', '        totalSupply -= _value * 10 ** uint256(decimals);\n', '        */\n', '        emit Burn(_from, _value);\n', '    }\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        //balanceOf[target] += mintedAmount * 10 ** uint256(decimals);\n', '        //totalSupply += mintedAmount * 10 ** uint256(decimals);\n', '        //emit Transfer(0, this, mintedAmount);\n', '        //emit Transfer(this, target, mintedAmount);\n', '        emit MintToken(target,mintedAmount);\n', '    }\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '    function sell(uint256 _amount) public returns (bool success){\n', '        require(!frozenAccount[msg.sender]);\n', '        //uint256 amount = _amount * 10 ** uint256(decimals); \n', '        require(balanceOf[msg.sender] >= _amount);\n', '        require(address(this).balance >= _amount * sellPrice);\n', '        _transfer(msg.sender, owner, _amount);\n', '        if (!msg.sender.send(_amount * sellPrice)) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '    function withdraw(address target) onlyOwner public {\n', '        //require(withdrawPassword == 888888);\n', '        target.transfer(address(this).balance);\n', '        emit WithDraw(target);\n', '        /*\n', '        if (!msg.sender.send(amount)) {\n', '            return false;\n', '        }\n', '        */\n', '    }\n', '    /*\n', '    function withDrawInWei(uint256 amount) onlyOwner public returns (bool) {\n', '        if (!msg.sender.send(amount)) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '    */\n', '    function killSelf(uint256 target) onlyOwner public returns (bool success){\n', '        if (target == 31415926){\n', '            selfdestruct(owner);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}']