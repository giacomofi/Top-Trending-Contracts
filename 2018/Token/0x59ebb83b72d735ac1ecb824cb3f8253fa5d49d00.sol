['pragma solidity ^0.4.8;\n', 'contract Token{\n', '    // token总量，默认会为public变量生成一个getter函数接口，名称为totalSupply().\n', '    uint256 public totalSupply;  //总量\n', '    uint256 public teamlock;  //团队锁仓\n', '    uint256 public foundationlock;//基金会锁仓\n', '    uint256 public mininglock;//挖矿锁仓\n', '    uint256 public releaseTime;//锁仓时间\n', '    uint256 public starttime;//基金会锁仓\n', '    /// 获取账户_owner拥有token的数量 \n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    //从消息发送者账户中往_to账户转数量为_value的token\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    //从账户_from中往账户_to转数量为_value的token，与approve方法配合使用\n', '    function transferFrom(address _from, address _to, uint256 _value) returns   \n', '    (bool success);\n', '\n', '    //消息发送账户设置账户_spender能从发送账户中转出数量为_value的token\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    //获取账户_spender可以从账户_owner中转出token的数量\n', '    function allowance(address _owner, address _spender) constant returns \n', '    (uint256 remaining);\n', '\n', '    //发生转账时必须要触发的事件 \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    //当函数approve(address _spender, uint256 _value)成功执行时必须触发的事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 \n', '    _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //默认totalSupply 不会超过最大值 (2^256 - 1).\n', '        //如果随着时间的推移将会有新的token生成，则可以用下面这句避免溢出的异常\n', '        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value\n', '        balances[_to] += _value;//往接收账户增加token数量_value\n', '        Transfer(msg.sender, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns \n', '    (bool success) {\n', '        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= \n', '        // _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;//接收账户增加token数量_value\n', '        balances[_from] -= _value; //支出账户_from减去token数量_value\n', '        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value\n', '        Transfer(_from, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success)   \n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract HumanStandardToken is StandardToken { \n', '\n', '    /* Public variables of the token */\n', '    string public name;                 //名称: \n', '    uint8 public decimals;              //最多的小数位数\n', '    string public symbol;               //token简称\n', '   \n', '    string public version = &#39;H0.1&#39;;    //版本\n', '\n', '    function HumanStandardToken() {\n', '        //balances[msg.sender] = _initialAmount; // 初始token数量给予消息发送者\n', '       \n', '        totalSupply          =1000000000;  //总量\n', '        balances[msg.sender] =300000000;   //自由流通\n', '        teamlock             =150000000;   //团队锁仓\n', '        foundationlock       =100000000;   //基金会锁仓\n', '        mininglock           =450000000;   //挖矿锁仓\n', '        name = &#39;DPSChain token&#39;;           //token名称\n', '        decimals = 0;                      //小数位数\n', '        symbol = &#39;DPST&#39;;                   // token简称\n', '        releaseTime=365*3*24*60*60;        //锁仓时间\n', '        starttime=block.timestamp;\n', '       \n', '    }\n', '    \n', '      \n', '    function unlocktoken(address _team, address _foundation, address _mining) returns \n', '    (bool success) {\n', '        //require(block.timestamp >= releaseTime);\n', '        require(block.timestamp >= starttime+releaseTime);\n', '        require(teamlock > 0);\n', '        require(foundationlock > 0);\n', '        require(mininglock > 0);\n', '        \n', '         balances[_team] +=teamlock;  //团队锁仓\n', '         teamlock-=150000000;\n', '         Transfer(this, _team, teamlock);//触发转币交易事件\n', '         \n', '        balances[_foundation] +=foundationlock;//基金会锁仓\n', '        foundationlock-=100000000;\n', '        Transfer(this, _foundation, foundationlock);//触发转币交易事件\n', '        \n', '        \n', '        balances[_mining] +=mininglock;//挖矿锁仓\n', '         mininglock-=450000000;\n', '        Transfer(this, _mining, mininglock);//触发转币交易事件\n', '        \n', '        return true;\n', '    }\n', '    \n', '   \n', '\n', '    /* Approves and then calls the receiving contract */\n', '    \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.8;\n', 'contract Token{\n', '    // token总量，默认会为public变量生成一个getter函数接口，名称为totalSupply().\n', '    uint256 public totalSupply;  //总量\n', '    uint256 public teamlock;  //团队锁仓\n', '    uint256 public foundationlock;//基金会锁仓\n', '    uint256 public mininglock;//挖矿锁仓\n', '    uint256 public releaseTime;//锁仓时间\n', '    uint256 public starttime;//基金会锁仓\n', '    /// 获取账户_owner拥有token的数量 \n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    //从消息发送者账户中往_to账户转数量为_value的token\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    //从账户_from中往账户_to转数量为_value的token，与approve方法配合使用\n', '    function transferFrom(address _from, address _to, uint256 _value) returns   \n', '    (bool success);\n', '\n', '    //消息发送账户设置账户_spender能从发送账户中转出数量为_value的token\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    //获取账户_spender可以从账户_owner中转出token的数量\n', '    function allowance(address _owner, address _spender) constant returns \n', '    (uint256 remaining);\n', '\n', '    //发生转账时必须要触发的事件 \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    //当函数approve(address _spender, uint256 _value)成功执行时必须触发的事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 \n', '    _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //默认totalSupply 不会超过最大值 (2^256 - 1).\n', '        //如果随着时间的推移将会有新的token生成，则可以用下面这句避免溢出的异常\n', '        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value\n', '        balances[_to] += _value;//往接收账户增加token数量_value\n', '        Transfer(msg.sender, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns \n', '    (bool success) {\n', '        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= \n', '        // _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;//接收账户增加token数量_value\n', '        balances[_from] -= _value; //支出账户_from减去token数量_value\n', '        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value\n', '        Transfer(_from, _to, _value);//触发转币交易事件\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success)   \n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract HumanStandardToken is StandardToken { \n', '\n', '    /* Public variables of the token */\n', '    string public name;                 //名称: \n', '    uint8 public decimals;              //最多的小数位数\n', '    string public symbol;               //token简称\n', '   \n', "    string public version = 'H0.1';    //版本\n", '\n', '    function HumanStandardToken() {\n', '        //balances[msg.sender] = _initialAmount; // 初始token数量给予消息发送者\n', '       \n', '        totalSupply          =1000000000;  //总量\n', '        balances[msg.sender] =300000000;   //自由流通\n', '        teamlock             =150000000;   //团队锁仓\n', '        foundationlock       =100000000;   //基金会锁仓\n', '        mininglock           =450000000;   //挖矿锁仓\n', "        name = 'DPSChain token';           //token名称\n", '        decimals = 0;                      //小数位数\n', "        symbol = 'DPST';                   // token简称\n", '        releaseTime=365*3*24*60*60;        //锁仓时间\n', '        starttime=block.timestamp;\n', '       \n', '    }\n', '    \n', '      \n', '    function unlocktoken(address _team, address _foundation, address _mining) returns \n', '    (bool success) {\n', '        //require(block.timestamp >= releaseTime);\n', '        require(block.timestamp >= starttime+releaseTime);\n', '        require(teamlock > 0);\n', '        require(foundationlock > 0);\n', '        require(mininglock > 0);\n', '        \n', '         balances[_team] +=teamlock;  //团队锁仓\n', '         teamlock-=150000000;\n', '         Transfer(this, _team, teamlock);//触发转币交易事件\n', '         \n', '        balances[_foundation] +=foundationlock;//基金会锁仓\n', '        foundationlock-=100000000;\n', '        Transfer(this, _foundation, foundationlock);//触发转币交易事件\n', '        \n', '        \n', '        balances[_mining] +=mininglock;//挖矿锁仓\n', '         mininglock-=450000000;\n', '        Transfer(this, _mining, mininglock);//触发转币交易事件\n', '        \n', '        return true;\n', '    }\n', '    \n', '   \n', '\n', '    /* Approves and then calls the receiving contract */\n', '    \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '\n', '}']
