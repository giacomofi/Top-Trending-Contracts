['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract DateTime {\n', '\t\tfunction toTimestamp(uint16 year, uint8 month, uint8 day) public constant returns (uint timestamp);\n', '        function getYear(uint timestamp) public constant returns (uint16);\n', '        function getMonth(uint timestamp) public constant returns (uint8);\n', '        function getDay(uint timestamp) public constant returns (uint8);\n', '}\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name = "Authpaper Coin";\n', '    string public symbol = "AUPC";\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply = 400000000 * 10 ** uint256(decimals);\n', '\taddress public owner;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\tmapping (address => uint256) public icoAmount;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\t\n', '\t//Date related code\n', '\taddress public dateTimeAddr = 0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce;\n', '\tDateTime dateTime = DateTime(dateTimeAddr);\n', '\tuint[] lockupTime = [dateTime.toTimestamp(2018,9,15),dateTime.toTimestamp(2018,10,15),dateTime.toTimestamp(2018,11,15),\n', '\tdateTime.toTimestamp(2018,12,15),dateTime.toTimestamp(2019,1,15),dateTime.toTimestamp(2019,2,15),\n', '\tdateTime.toTimestamp(2019,3,15),dateTime.toTimestamp(2019,4,15),dateTime.toTimestamp(2019,5,15),\n', '\tdateTime.toTimestamp(2019,6,15),dateTime.toTimestamp(2019,7,15),dateTime.toTimestamp(2019,8,15),\n', '\tdateTime.toTimestamp(2019,9,15)];\n', '\tuint lockupRatio = 8;\n', '\tuint fullTradeTime = dateTime.toTimestamp(2019,10,1);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor() public {\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '\t\towner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '\t\trequire( balanceOf[_to] + _value >= balanceOf[_to] );\n', '\t\trequire( 100*(balanceOf[_from] - _value) >= (balanceOf[_from] - _value) );\n', '\t\trequire( 100*icoAmount[_from] >= icoAmount[_from] );\n', '\t\trequire( icoAmount[_to] + _value >= icoAmount[_to] );\n', '\t\t\n', '\t\tif(now < fullTradeTime && _from != owner && _to !=owner && icoAmount[_from] >0) {\n', '\t\t\t//Check for lockup period and lockup percentage\n', '\t\t\tuint256 i=0;\n', '\t\t\tfor (uint256 l = lockupTime.length; i < l; i++) {\n', '\t\t\t\tif(now < lockupTime[i]) break;\n', '\t\t\t}\n', '\t\t\tuint256 minAmountLeft = (i<1)? 0 : ( (lockupRatio*i>100)? 100 : lockupRatio*i );\n', '\t\t\tminAmountLeft = 100 - minAmountLeft;\n', '\t\t\trequire( ((balanceOf[_from] - _value)*100) >= (minAmountLeft*icoAmount[_from]) );\t\t\t\n', '\t\t}\t\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '\t\tif(_from == owner && now < fullTradeTime) icoAmount[_to] += _value;\n', '\t\tif(_to == owner){\n', '\t\t\tif(icoAmount[_from] >= _value) icoAmount[_from] -= _value;\n', '\t\t\telse icoAmount[_from]=0;\n', '\t\t}\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\tfunction addApprove(address _spender, uint256 _value) public returns (bool success){\n', '\t\trequire( allowance[msg.sender][_spender] + _value >= allowance[msg.sender][_spender] );\n', '\t\tallowance[msg.sender][_spender] += _value;\n', '        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\tfunction claimICOToken() public returns (bool success){\n', '\t\trequire(allowance[owner][msg.sender] > 0);     // Check allowance\n', '\t\ttransferFrom(owner,msg.sender,allowance[owner][msg.sender]);\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']