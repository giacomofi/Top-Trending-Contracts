['pragma solidity ^0.4.11;\n', '\n', 'contract VERIME  {\n', '    uint public _totalSupply = 1000000000000000000000000000;\n', '\n', '    string public constant symbol = "VME";\n', '    string public constant name = "Verime Mobile";\n', '    uint8 public constant decimals = 18;\n', '\n', '    address public owner;\n', '    address public whitelistedContract;\n', '    bool freeTransfer = false;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function VERIME(address _multisig) {\n', '        balances[_multisig] = _totalSupply;\n', '        owner = _multisig;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier ownerOrEnabledTransfer() {\n', '        require(freeTransfer || msg.sender == owner || msg.sender == whitelistedContract);\n', '        _;\n', '    }\n', '\n', '    function enableTransfer() ownerOrEnabledTransfer() {\n', '        freeTransfer = true;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256 totalSupply){\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length == size + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) ownerOrEnabledTransfer public returns (bool) {\n', '        require(\n', '        balances[msg.sender]>= _value\n', '        && _value > 0\n', '        );\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) ownerOrEnabledTransfer public returns (bool success) {\n', '        require(\n', '        allowed[_from][msg.sender]  >= _value\n', '        && balances[_from] >= _value\n', '        && _value > 0\n', '        );\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function changeWhitelistedContract(address newAddress) public onlyOwner returns (bool) {\n', '        require(newAddress != address(0));\n', '        whitelistedContract = newAddress;\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner returns (bool) {\n', '      require(newOwner != address(0));\n', '      owner = newOwner;\n', '    }\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '}']