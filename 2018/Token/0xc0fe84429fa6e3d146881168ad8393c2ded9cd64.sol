['pragma solidity ^0.4.15;\n', '\n', 'contract ForniteCoinSelling {\n', '    \n', '    Token public coin;\n', '    address public coinOwner;\n', '    address public owner;\n', '    \n', '    uint256 public pricePerCoin;\n', '    \n', '    constructor(address coinAddressToUse, address coinOwnerToUse, address ownerToUse, uint256 pricePerCoinToUse) public {\n', '        coin = Token(coinAddressToUse);\n', '        coinOwner = coinOwnerToUse;\n', '        owner = ownerToUse;\n', '        pricePerCoin = pricePerCoinToUse;\n', '    }\n', '    \n', '    function newCoinOwner(address newCoinOwnerToUse) public {\n', '        if(msg.sender == owner) {\n', '            coinOwner = newCoinOwnerToUse;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function newOwner(address newOwnerToUse) public {\n', '        if(msg.sender == owner) {\n', '            owner = newOwnerToUse;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function newPrice(uint256 newPricePerCoinToUse) public {\n', '        if(msg.sender == owner) {\n', '            pricePerCoin = newPricePerCoinToUse;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function payOut() public {\n', '        if(msg.sender == owner) {\n', '            owner.transfer(address(this).balance);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function() public payable {\n', '        uint256 numberOfCoin = msg.value/pricePerCoin;\n', '        if(numberOfCoin>=0) revert();\n', '        if(coin.balanceOf(coinOwner) < numberOfCoin) revert();\n', '        if(!coin.transferFrom(coinOwner, msg.sender, numberOfCoin)) revert();\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    mapping (address => uint256) public balanceOf;\n', '    function transferFrom(\n', '         address _from,\n', '         address _to,\n', '         uint256 _amount\n', '     ) public payable returns(bool success) {\n', '        _from = _from;\n', '        _to = _to;\n', '        _amount = _amount;\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'contract ForniteCoinSelling {\n', '    \n', '    Token public coin;\n', '    address public coinOwner;\n', '    address public owner;\n', '    \n', '    uint256 public pricePerCoin;\n', '    \n', '    constructor(address coinAddressToUse, address coinOwnerToUse, address ownerToUse, uint256 pricePerCoinToUse) public {\n', '        coin = Token(coinAddressToUse);\n', '        coinOwner = coinOwnerToUse;\n', '        owner = ownerToUse;\n', '        pricePerCoin = pricePerCoinToUse;\n', '    }\n', '    \n', '    function newCoinOwner(address newCoinOwnerToUse) public {\n', '        if(msg.sender == owner) {\n', '            coinOwner = newCoinOwnerToUse;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function newOwner(address newOwnerToUse) public {\n', '        if(msg.sender == owner) {\n', '            owner = newOwnerToUse;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function newPrice(uint256 newPricePerCoinToUse) public {\n', '        if(msg.sender == owner) {\n', '            pricePerCoin = newPricePerCoinToUse;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function payOut() public {\n', '        if(msg.sender == owner) {\n', '            owner.transfer(address(this).balance);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function() public payable {\n', '        uint256 numberOfCoin = msg.value/pricePerCoin;\n', '        if(numberOfCoin>=0) revert();\n', '        if(coin.balanceOf(coinOwner) < numberOfCoin) revert();\n', '        if(!coin.transferFrom(coinOwner, msg.sender, numberOfCoin)) revert();\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    mapping (address => uint256) public balanceOf;\n', '    function transferFrom(\n', '         address _from,\n', '         address _to,\n', '         uint256 _amount\n', '     ) public payable returns(bool success) {\n', '        _from = _from;\n', '        _to = _to;\n', '        _amount = _amount;\n', '        return true;\n', '    }\n', '}']
