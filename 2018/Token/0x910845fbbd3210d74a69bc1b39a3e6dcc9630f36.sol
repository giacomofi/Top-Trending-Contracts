['pragma solidity ^0.4.0;\n', '\n', 'interface ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public constant returns (uint);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'interface ERC223 {\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract Token {\n', '    string internal _symbol;\n', '    string internal _name;\n', '    uint8 internal _decimals;\n', '    uint internal _totalSupply = 1000;\n', '    mapping (address => uint) internal _balanceOf;\n', '    mapping (address => mapping (address => uint)) internal _allowances;\n', '\n', '    function Token(string symbol, string name, uint8 decimals, uint totalSupply) public {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply;\n', '    }\n', '\n', '    function name() public constant returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public constant returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public constant returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint);\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Organicco is Token("ORC", "Organicco", 18, 120000000000000000000000000), ERC20, ERC223 {\n', '\n', '    using SafeMath for uint;\n', '    address public constant FOUNDING_TEAM = 0x001c3234d614F12D5ef931E2871BFf35D8C05a29;\n', '    address public constant PARTNER_SALES = 0x00749ea1Ca25e9C027426D74Bb3659A80493fa6d;\n', '    address public constant PRESALES = 0x00faf4afd47ebA1D1713C0506f4a05BC36cc590D;\n', '    address public constant ICO = 0x000E945D52F3EF8602B3484ce04036fF4d2888CA;\n', '    address public constant BONUS = 0x009C88134EE3636E7f92A402ed9531DF54B802BB;\n', '\n', '    function Organicco() public {\n', '        _balanceOf[FOUNDING_TEAM] = _totalSupply * 20 / 100; //24,000,000 (24 million)\n', '        _balanceOf[PARTNER_SALES] = _totalSupply * 16 / 100; //19,200,000 (19.2 million)\n', '        _balanceOf[PRESALES] = _totalSupply * 10 / 100; //12,000,000 (12 million)\n', '        _balanceOf[ICO] = _totalSupply * 50 / 100; //60,000,000 (60 million)\n', '        _balanceOf[BONUS] = _totalSupply * 4 / 100; //4,800,000 (4.8 million)\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint) {\n', '        return _balanceOf[_addr];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        if (_value > 0 &&\n', '            _value <= _balanceOf[msg.sender] &&\n', '            !isContract(_to)) {\n', '            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n', '        if (_value > 0 &&\n', '            _value <= _balanceOf[msg.sender] &&\n', '            isContract(_to)) {\n', '            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n', '            _contract.tokenFallback(msg.sender, _value, _data);\n', '            Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function isContract(address _addr) private constant returns (bool) {\n', '        uint codeSize;\n', '        assembly {\n', '            codeSize := extcodesize(_addr)\n', '        }\n', '        return codeSize > 0;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        if (_allowances[_from][msg.sender] > 0 &&\n', '            _value > 0 &&\n', '            _allowances[_from][msg.sender] >= _value &&\n', '            _balanceOf[_from] >= _value) {\n', '            _balanceOf[_from] = _balanceOf[_from].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender].add(_value);\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint) {\n', '        return _allowances[_owner][_spender];\n', '    }\n', '}']
['pragma solidity ^0.4.0;\n', '\n', 'interface ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public constant returns (uint);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'interface ERC223 {\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract Token {\n', '    string internal _symbol;\n', '    string internal _name;\n', '    uint8 internal _decimals;\n', '    uint internal _totalSupply = 1000;\n', '    mapping (address => uint) internal _balanceOf;\n', '    mapping (address => mapping (address => uint)) internal _allowances;\n', '\n', '    function Token(string symbol, string name, uint8 decimals, uint totalSupply) public {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply;\n', '    }\n', '\n', '    function name() public constant returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public constant returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public constant returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint);\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Organicco is Token("ORC", "Organicco", 18, 120000000000000000000000000), ERC20, ERC223 {\n', '\n', '    using SafeMath for uint;\n', '    address public constant FOUNDING_TEAM = 0x001c3234d614F12D5ef931E2871BFf35D8C05a29;\n', '    address public constant PARTNER_SALES = 0x00749ea1Ca25e9C027426D74Bb3659A80493fa6d;\n', '    address public constant PRESALES = 0x00faf4afd47ebA1D1713C0506f4a05BC36cc590D;\n', '    address public constant ICO = 0x000E945D52F3EF8602B3484ce04036fF4d2888CA;\n', '    address public constant BONUS = 0x009C88134EE3636E7f92A402ed9531DF54B802BB;\n', '\n', '    function Organicco() public {\n', '        _balanceOf[FOUNDING_TEAM] = _totalSupply * 20 / 100; //24,000,000 (24 million)\n', '        _balanceOf[PARTNER_SALES] = _totalSupply * 16 / 100; //19,200,000 (19.2 million)\n', '        _balanceOf[PRESALES] = _totalSupply * 10 / 100; //12,000,000 (12 million)\n', '        _balanceOf[ICO] = _totalSupply * 50 / 100; //60,000,000 (60 million)\n', '        _balanceOf[BONUS] = _totalSupply * 4 / 100; //4,800,000 (4.8 million)\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint) {\n', '        return _balanceOf[_addr];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        if (_value > 0 &&\n', '            _value <= _balanceOf[msg.sender] &&\n', '            !isContract(_to)) {\n', '            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n', '        if (_value > 0 &&\n', '            _value <= _balanceOf[msg.sender] &&\n', '            isContract(_to)) {\n', '            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n', '            _contract.tokenFallback(msg.sender, _value, _data);\n', '            Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function isContract(address _addr) private constant returns (bool) {\n', '        uint codeSize;\n', '        assembly {\n', '            codeSize := extcodesize(_addr)\n', '        }\n', '        return codeSize > 0;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        if (_allowances[_from][msg.sender] > 0 &&\n', '            _value > 0 &&\n', '            _allowances[_from][msg.sender] >= _value &&\n', '            _balanceOf[_from] >= _value) {\n', '            _balanceOf[_from] = _balanceOf[_from].sub(_value);\n', '            _balanceOf[_to] = _balanceOf[_to].add(_value);\n', '            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender].add(_value);\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint) {\n', '        return _allowances[_owner][_spender];\n', '    }\n', '}']
