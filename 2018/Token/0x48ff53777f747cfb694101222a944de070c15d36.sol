['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using his signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig) constant returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    //Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      /* prefix might be needed for geth and parity\n', '      * https://github.com/ethereum/go-ethereum/issues/3731\n', '      */\n', '      bytes memory prefix = "\\x19Ethereum Signed Message:\\n32";\n', '      hash = sha3(prefix, hash);\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO ImpToken.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ValidationUtil {\n', '    function requireNotEmptyAddress(address value){\n', '        require(isAddressNotEmpty(value));\n', '    }\n', '\n', '    function isAddressNotEmpty(address value) internal returns (bool result){\n', '        return value != 0;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * Контракт ERC-20 токена\n', ' */\n', '\n', 'contract ImpToken is StandardToken, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    bool public isDistributed;\n', '    uint public distributedAmount;\n', '\n', '    event UpdatedTokenInformation(string name, string symbol);\n', '\n', '    /**\n', '     * Конструктор\n', '     *\n', '     * @param _name - имя токена\n', '     * @param _symbol - символ токена\n', '     * @param _totalSupply - со сколькими токенами мы стартуем\n', '     * @param _decimals - кол-во знаков после запятой\n', '     */\n', '    function ImpToken(string _name, string _symbol, uint _totalSupply, uint _decimals) {\n', '        require(_totalSupply != 0);\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Владелец должен вызвать эту функцию, чтобы сделать начальное распределение токенов\n', '     */\n', '    function distribute(address toAddress, uint tokenAmount) external onlyOwner {\n', '        require(!isDistributed);\n', '\n', '        balances[toAddress] = tokenAmount;\n', '\n', '        distributedAmount = distributedAmount.add(tokenAmount);\n', '\n', '        require(distributedAmount <= totalSupply);\n', '    }\n', '\n', '    function closeDistribution() external onlyOwner {\n', '        require(!isDistributed);\n', '\n', '        isDistributed = true;\n', '    }\n', '\n', '    /**\n', '     * Владелец может обновить инфу по токену\n', '     */\n', '    function setTokenInformation(string newName, string newSymbol) external onlyOwner {\n', '        name = newName;\n', '        symbol = newSymbol;\n', '\n', '        // Вызываем событие\n', '        UpdatedTokenInformation(name, symbol);\n', '    }\n', '\n', '    /**\n', '     * Владелец может поменять decimals\n', '     */\n', '    function setDecimals(uint newDecimals) external onlyOwner {\n', '        decimals = newDecimals;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ImpCore is Ownable, ValidationUtil {\n', '    using SafeMath for uint;\n', '    using ECRecovery for bytes32;\n', '\n', '    /* Токен, с которым работаем */\n', '    ImpToken public token;\n', '\n', '    /* Мапа адрес получателя токенов - nonce, нужно для того, чтобы нельзя было повторно запросить withdraw */\n', '    mapping (address => uint) private withdrawalsNonce;\n', '\n', '    event Withdraw(address receiver, uint tokenAmount);\n', '    event WithdrawCanceled(address receiver);\n', '\n', '    function ImpCore(address _token) {\n', '        requireNotEmptyAddress(_token);\n', '\n', '        token = ImpToken(_token);\n', '    }\n', '\n', '    function withdraw(uint tokenAmount, bytes signedData) external {\n', '        uint256 nonce = withdrawalsNonce[msg.sender] + 1;\n', '\n', '        bytes32 validatingHash = keccak256(msg.sender, tokenAmount, nonce);\n', '\n', '        // Подписывать все транзакции должен owner\n', '        address addressRecovered = validatingHash.recover(signedData);\n', '\n', '        require(addressRecovered == owner);\n', '\n', '        // Делаем перевод получателю\n', '        require(token.transfer(msg.sender, tokenAmount));\n', '\n', '        withdrawalsNonce[msg.sender] = nonce;\n', '\n', '        Withdraw(msg.sender, tokenAmount);\n', '    }\n', '\n', '    function cancelWithdraw() external {\n', '        withdrawalsNonce[msg.sender]++;\n', '\n', '        WithdrawCanceled(msg.sender);\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using his signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig) constant returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    //Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      /* prefix might be needed for geth and parity\n', '      * https://github.com/ethereum/go-ethereum/issues/3731\n', '      */\n', '      bytes memory prefix = "\\x19Ethereum Signed Message:\\n32";\n', '      hash = sha3(prefix, hash);\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO ImpToken.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ValidationUtil {\n', '    function requireNotEmptyAddress(address value){\n', '        require(isAddressNotEmpty(value));\n', '    }\n', '\n', '    function isAddressNotEmpty(address value) internal returns (bool result){\n', '        return value != 0;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * Контракт ERC-20 токена\n', ' */\n', '\n', 'contract ImpToken is StandardToken, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    bool public isDistributed;\n', '    uint public distributedAmount;\n', '\n', '    event UpdatedTokenInformation(string name, string symbol);\n', '\n', '    /**\n', '     * Конструктор\n', '     *\n', '     * @param _name - имя токена\n', '     * @param _symbol - символ токена\n', '     * @param _totalSupply - со сколькими токенами мы стартуем\n', '     * @param _decimals - кол-во знаков после запятой\n', '     */\n', '    function ImpToken(string _name, string _symbol, uint _totalSupply, uint _decimals) {\n', '        require(_totalSupply != 0);\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Владелец должен вызвать эту функцию, чтобы сделать начальное распределение токенов\n', '     */\n', '    function distribute(address toAddress, uint tokenAmount) external onlyOwner {\n', '        require(!isDistributed);\n', '\n', '        balances[toAddress] = tokenAmount;\n', '\n', '        distributedAmount = distributedAmount.add(tokenAmount);\n', '\n', '        require(distributedAmount <= totalSupply);\n', '    }\n', '\n', '    function closeDistribution() external onlyOwner {\n', '        require(!isDistributed);\n', '\n', '        isDistributed = true;\n', '    }\n', '\n', '    /**\n', '     * Владелец может обновить инфу по токену\n', '     */\n', '    function setTokenInformation(string newName, string newSymbol) external onlyOwner {\n', '        name = newName;\n', '        symbol = newSymbol;\n', '\n', '        // Вызываем событие\n', '        UpdatedTokenInformation(name, symbol);\n', '    }\n', '\n', '    /**\n', '     * Владелец может поменять decimals\n', '     */\n', '    function setDecimals(uint newDecimals) external onlyOwner {\n', '        decimals = newDecimals;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ImpCore is Ownable, ValidationUtil {\n', '    using SafeMath for uint;\n', '    using ECRecovery for bytes32;\n', '\n', '    /* Токен, с которым работаем */\n', '    ImpToken public token;\n', '\n', '    /* Мапа адрес получателя токенов - nonce, нужно для того, чтобы нельзя было повторно запросить withdraw */\n', '    mapping (address => uint) private withdrawalsNonce;\n', '\n', '    event Withdraw(address receiver, uint tokenAmount);\n', '    event WithdrawCanceled(address receiver);\n', '\n', '    function ImpCore(address _token) {\n', '        requireNotEmptyAddress(_token);\n', '\n', '        token = ImpToken(_token);\n', '    }\n', '\n', '    function withdraw(uint tokenAmount, bytes signedData) external {\n', '        uint256 nonce = withdrawalsNonce[msg.sender] + 1;\n', '\n', '        bytes32 validatingHash = keccak256(msg.sender, tokenAmount, nonce);\n', '\n', '        // Подписывать все транзакции должен owner\n', '        address addressRecovered = validatingHash.recover(signedData);\n', '\n', '        require(addressRecovered == owner);\n', '\n', '        // Делаем перевод получателю\n', '        require(token.transfer(msg.sender, tokenAmount));\n', '\n', '        withdrawalsNonce[msg.sender] = nonce;\n', '\n', '        Withdraw(msg.sender, tokenAmount);\n', '    }\n', '\n', '    function cancelWithdraw() external {\n', '        withdrawalsNonce[msg.sender]++;\n', '\n', '        WithdrawCanceled(msg.sender);\n', '    }\n', '\n', '\n', '}']
