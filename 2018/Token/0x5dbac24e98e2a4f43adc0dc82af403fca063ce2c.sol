['pragma solidity ^0.4.21;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract PoolRole is Ownable {\n', '    mapping (address => bool) internal poolRoleBearer;\n', '\n', '    event PoolRoleGranted(address indexed addr);\n', '    event PoolRoleRevoked(address indexed addr);\n', '\n', '    /**\n', '    * @dev give an address access to this role\n', '    */\n', '    function grantPoolRole(address addr) public onlyOwner {\n', '        poolRoleBearer[addr] = true;\n', '        emit PoolRoleGranted(addr);\n', '    }\n', '\n', '    /**\n', '    * @dev remove an address access to this role\n', '    */\n', '    function revokePoolRole(address addr) public onlyOwner {\n', '        poolRoleBearer[addr] = false;\n', '        emit PoolRoleRevoked(addr);\n', '    }\n', '\n', '    /**\n', '    * @dev check if an address has this role\n', '    * @return bool\n', '    */\n', '    function hasPoolRole(address addr) view public returns (bool)\n', '    {\n', '        return poolRoleBearer[addr];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract HasNoEther is Ownable, PoolRole {\n', '\n', '    /**\n', '    * @dev Constructor that rejects incoming Ether\n', '    * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '    * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '    * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '    * we could use assembly to access msg.value.\n', '    */\n', '    function HasNoEther() public payable {\n', '        require(msg.value == 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '     */\n', '    function() external {\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer all Ether held by the contract to the owner.\n', '     */\n', '    function reclaimEther() external onlyOwner {\n', '        assert(owner.send(address(this).balance));\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '    * To change the approve amount you first have to reduce the addresses`\n', '    * allowance to zero by calling `approve(_spender,0)` if it is not\n', '    * already 0 to mitigate the race condition described here:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        //  To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract BurnableToken is StandardToken, Ownable {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '}\n', '\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint a specific amount of tokens to owner.\n', '     * @param _amount The amount of token to be minted.\n', '     */\n', '    function mint(uint256 _amount) onlyOwner canMint public {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[msg.sender] = balances[msg.sender].add(_amount);\n', '        emit Mint(msg.sender, _amount);\n', '        emit Transfer(address(0), msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Disable minting forever\n', '     */\n', '    function finishMinting() onlyOwner canMint public {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title EngagementToken\n', ' * @dev ERC20 EGT Token\n', ' *\n', ' * EGT are displayed using 18 decimal places of precision.\n', ' *\n', ' * 1 Billion EGT Token total supply:\n', ' */\n', 'contract EngagementToken is BurnableToken, MintableToken, HasNoEther {\n', '\n', '    string public constant name = "EngagementToken";\n', '\n', '    string public constant symbol = "EGT";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 1e9 * (10 ** uint256(decimals));\n', '\n', '    // 06/14/2018 @ 11:59pm (UTC)\n', '    uint256 public constant FREEZE_END = 1529020799;\n', '\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function EngagementToken() public {\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(now >= FREEZE_END || msg.sender == owner || hasPoolRole(_to) || hasPoolRole(msg.sender));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(now >= FREEZE_END || msg.sender == owner || hasPoolRole(_to) || hasPoolRole(msg.sender));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function multiTransfer(address[] recipients, uint256[] amounts) public {\n', '        require(recipients.length == amounts.length);\n', '        for (uint i = 0; i < recipients.length; i++) {\n', '            transfer(recipients[i], amounts[i]);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract PoolRole is Ownable {\n', '    mapping (address => bool) internal poolRoleBearer;\n', '\n', '    event PoolRoleGranted(address indexed addr);\n', '    event PoolRoleRevoked(address indexed addr);\n', '\n', '    /**\n', '    * @dev give an address access to this role\n', '    */\n', '    function grantPoolRole(address addr) public onlyOwner {\n', '        poolRoleBearer[addr] = true;\n', '        emit PoolRoleGranted(addr);\n', '    }\n', '\n', '    /**\n', '    * @dev remove an address access to this role\n', '    */\n', '    function revokePoolRole(address addr) public onlyOwner {\n', '        poolRoleBearer[addr] = false;\n', '        emit PoolRoleRevoked(addr);\n', '    }\n', '\n', '    /**\n', '    * @dev check if an address has this role\n', '    * @return bool\n', '    */\n', '    function hasPoolRole(address addr) view public returns (bool)\n', '    {\n', '        return poolRoleBearer[addr];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract HasNoEther is Ownable, PoolRole {\n', '\n', '    /**\n', '    * @dev Constructor that rejects incoming Ether\n', '    * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '    * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '    * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '    * we could use assembly to access msg.value.\n', '    */\n', '    function HasNoEther() public payable {\n', '        require(msg.value == 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '     */\n', '    function() external {\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer all Ether held by the contract to the owner.\n', '     */\n', '    function reclaimEther() external onlyOwner {\n', '        assert(owner.send(address(this).balance));\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '    * To change the approve amount you first have to reduce the addresses`\n', '    * allowance to zero by calling `approve(_spender,0)` if it is not\n', '    * already 0 to mitigate the race condition described here:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        //  To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract BurnableToken is StandardToken, Ownable {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '}\n', '\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint a specific amount of tokens to owner.\n', '     * @param _amount The amount of token to be minted.\n', '     */\n', '    function mint(uint256 _amount) onlyOwner canMint public {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[msg.sender] = balances[msg.sender].add(_amount);\n', '        emit Mint(msg.sender, _amount);\n', '        emit Transfer(address(0), msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Disable minting forever\n', '     */\n', '    function finishMinting() onlyOwner canMint public {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title EngagementToken\n', ' * @dev ERC20 EGT Token\n', ' *\n', ' * EGT are displayed using 18 decimal places of precision.\n', ' *\n', ' * 1 Billion EGT Token total supply:\n', ' */\n', 'contract EngagementToken is BurnableToken, MintableToken, HasNoEther {\n', '\n', '    string public constant name = "EngagementToken";\n', '\n', '    string public constant symbol = "EGT";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 1e9 * (10 ** uint256(decimals));\n', '\n', '    // 06/14/2018 @ 11:59pm (UTC)\n', '    uint256 public constant FREEZE_END = 1529020799;\n', '\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function EngagementToken() public {\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(now >= FREEZE_END || msg.sender == owner || hasPoolRole(_to) || hasPoolRole(msg.sender));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(now >= FREEZE_END || msg.sender == owner || hasPoolRole(_to) || hasPoolRole(msg.sender));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function multiTransfer(address[] recipients, uint256[] amounts) public {\n', '        require(recipients.length == amounts.length);\n', '        for (uint i = 0; i < recipients.length; i++) {\n', '            transfer(recipients[i], amounts[i]);\n', '        }\n', '    }\n', '}']
