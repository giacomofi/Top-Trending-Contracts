['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused returns(bool) {\n', '    paused = true;\n', '    emit Pause();\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused returns(bool) {\n', '    paused = false;\n', '    emit Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '  uint256 public totalSupply;\n', '\n', '  function transfer(address _to, uint256 _value) public returns(bool success);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\n', '\n', '  function balanceOf(address _owner) constant public returns(uint256 balance);\n', '\n', '  function approve(address _spender, uint256 _value) public returns(bool success);\n', '\n', '  function allowance(address _owner, address _spender) constant public returns(uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract BasicToken is ERC20, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => mapping(address => uint256)) allowed;\n', '\n', '  function _transfer(address _from, address _to, uint256 _value) internal returns(bool success) {\n', '    require(_to != 0x0);\n', '    require(_value > 0);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns(bool success) {\n', '    require(balances[msg.sender] >= _value);\n', '    return _transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns(bool success) {\n', '    require(balances[_from] >= _value);\n', '    require(allowed[_from][msg.sender] >= _value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    return _transfer(_from, _to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant public returns(uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns(bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant public returns(uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract PayChainCoin is BasicToken {\n', '\n', '  string public constant name = "PayChainCoin";\n', '  string public constant symbol = "PCC";\n', '  uint256 public constant decimals = 18;\n', '\n', '  constructor() public {\n', '    _assign(0xa3f351bD8A2cB33822DeFE13e0efB968fc22A186, 690);\n', '    _assign(0xd3C72E4D0EAdab0Eb7A4f416b67754185F72A1fa, 10);\n', '    _assign(0x32A2594Ba3af6543E271e5749Dc39Dd85cFbE1e8, 150);\n', '    _assign(0x7c3db3C5862D32A97a53BFEbb34C384a4b52C2Cc, 150);\n', '  }\n', '\n', '  function _assign(address _address, uint256 _value) private {\n', '    uint256 amount = _value * (10 ** 6) * (10 ** decimals);\n', '    balances[_address] = amount;\n', '    totalSupply = totalSupply.add(amount);\n', '  }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused returns(bool) {\n', '    paused = true;\n', '    emit Pause();\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused returns(bool) {\n', '    paused = false;\n', '    emit Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '  uint256 public totalSupply;\n', '\n', '  function transfer(address _to, uint256 _value) public returns(bool success);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\n', '\n', '  function balanceOf(address _owner) constant public returns(uint256 balance);\n', '\n', '  function approve(address _spender, uint256 _value) public returns(bool success);\n', '\n', '  function allowance(address _owner, address _spender) constant public returns(uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract BasicToken is ERC20, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => mapping(address => uint256)) allowed;\n', '\n', '  function _transfer(address _from, address _to, uint256 _value) internal returns(bool success) {\n', '    require(_to != 0x0);\n', '    require(_value > 0);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns(bool success) {\n', '    require(balances[msg.sender] >= _value);\n', '    return _transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns(bool success) {\n', '    require(balances[_from] >= _value);\n', '    require(allowed[_from][msg.sender] >= _value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    return _transfer(_from, _to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant public returns(uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns(bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant public returns(uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract PayChainCoin is BasicToken {\n', '\n', '  string public constant name = "PayChainCoin";\n', '  string public constant symbol = "PCC";\n', '  uint256 public constant decimals = 18;\n', '\n', '  constructor() public {\n', '    _assign(0xa3f351bD8A2cB33822DeFE13e0efB968fc22A186, 690);\n', '    _assign(0xd3C72E4D0EAdab0Eb7A4f416b67754185F72A1fa, 10);\n', '    _assign(0x32A2594Ba3af6543E271e5749Dc39Dd85cFbE1e8, 150);\n', '    _assign(0x7c3db3C5862D32A97a53BFEbb34C384a4b52C2Cc, 150);\n', '  }\n', '\n', '  function _assign(address _address, uint256 _value) private {\n', '    uint256 amount = _value * (10 ** 6) * (10 ** decimals);\n', '    balances[_address] = amount;\n', '    totalSupply = totalSupply.add(amount);\n', '  }\n', '}']
