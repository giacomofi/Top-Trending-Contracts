['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Discountable is Ownable {\n', '    struct DiscStruct {\n', '        uint256 amount;\n', '        uint256 disc;\n', '    }\n', '    uint256 descPrecision = 1e2;\n', '    uint256 defaultCoef = 200;\n', '    DiscStruct[] public discounts;\n', '\n', '    function addDiscount(uint256 _amount, uint256 _disc) onlyOwner public{\n', '        discounts.push(DiscStruct(_amount, _disc));\n', '    }\n', '\n', '    function editDiscount(uint256 num, uint256 _amount, uint256 _disc) onlyOwner public{\n', '        discounts[num] = DiscStruct(_amount, _disc);\n', '    }\n', '\n', '    function getDiscountsAmount() public view returns(uint256 amount_){\n', '        return discounts.length;\n', '    }\n', '\n', '    function getDiscountByAmount(uint256 amount) internal view returns(uint256 disc_){\n', '        uint256 arrayLength = discounts.length;\n', '        if (amount < discounts[0].amount){\n', '            return defaultCoef;\n', '        }\n', '        for (uint8 i=0; i<arrayLength; i++) {\n', '            if(i == arrayLength - 1){\n', '                return discounts[arrayLength - 1].disc;\n', '            }\n', '            if (amount < discounts[i+1].amount){\n', '                return discounts[i].disc;\n', '            }\n', '        }\n', '        return defaultCoef;\n', '    }\n', '\n', '}\n', '\n', 'contract TransferStatistics {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private stat_tokensBoughtBack = 0;\n', '    uint256 private stat_timesBoughtBack = 0;\n', '    uint256 private stat_tokensPurchased = 0;\n', '    uint256 private stat_timesPurchased = 0;\n', '\n', '    uint256 private stat_ethSent = 0;\n', '    uint256 private stat_ethReceived = 0;\n', '\n', '    uint256 private stat_tokensSpend = 0;\n', '    uint256 private stat_timesSpend = 0;\n', '\n', '    uint256 private oddSent = 0;\n', '    uint256 private feeSent = 0;\n', '\n', '    function trackPurchase(uint256 tokens, uint256 sum) internal {\n', '        stat_tokensPurchased = stat_tokensPurchased.add(tokens);\n', '        stat_timesPurchased = stat_timesPurchased.add(1);\n', '        stat_ethSent = stat_ethSent.add(sum);\n', '    }\n', '\n', '    function trackBuyBack(uint256 tokens, uint256 sum) internal {\n', '        stat_tokensBoughtBack = stat_tokensBoughtBack.add(tokens);\n', '        stat_timesBoughtBack = stat_timesBoughtBack.add(1);\n', '        stat_ethReceived = stat_ethReceived.add(sum);\n', '    }\n', '\n', '    function trackSpend(uint256 tokens) internal{\n', '        stat_tokensSpend = stat_tokensSpend.add(tokens);\n', '        stat_timesSpend = stat_timesSpend.add(1);\n', '    }\n', '\n', '    function trackOdd(uint256 odd) internal {\n', '        oddSent = oddSent.add(odd);\n', '    }\n', '\n', '    function trackFee(uint256 fee) internal {\n', '        feeSent = feeSent.add(fee);\n', '    }\n', '\n', '    function getStatistics() internal view returns(\n', '        uint256 tokensBoughtBack_, uint256 timesBoughtBack_,\n', '        uint256 tokensPurchased_, uint256 timesPurchased_,\n', '        uint256 ethSent_, uint256 ethReceived_,\n', '        uint256 tokensSpend_, uint256 timesSpend_,\n', '        uint256 oddSent_, uint256 feeSent_) {\n', '        return (stat_tokensBoughtBack, stat_timesBoughtBack,\n', '        stat_tokensPurchased, stat_timesPurchased,\n', '        stat_ethSent, stat_ethReceived,\n', '        stat_tokensSpend, stat_timesSpend,\n', '        oddSent, feeSent);\n', '    }\n', '}\n', '\n', 'contract Haltable is Ownable {\n', '    bool public halted;\n', '\n', '    modifier stopInEmergency {\n', '        require(!halted);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyInEmergency {\n', '        require(halted);\n', '        _;\n', '    }\n', '\n', '\n', '    /// @dev called by the owner on emergency, triggers stopped state\n', '    function halt() external onlyOwner {\n', '        halted = true;\n', '    }\n', '\n', '\n', '    /// @dev called by the owner on end of emergency, returns to normal state\n', '    function unhalt() external onlyOwner onlyInEmergency {\n', '        halted = false;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken, Ownable {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public onlyOwner{\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract OMPxContract is BasicToken, Haltable, Discountable, TransferStatistics {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '    using SafeERC20 for OMPxToken;\n', '    /// @dev Token\n', '    OMPxToken public token;\n', '    Distribution public feeReceiverContract;    \n', '    uint256 private feeBalance = 0;\n', '\n', '    event TransferMoneyBack(address indexed to, uint256 value);\n', '    event Donation(address indexed donator, uint256 value);\n', '    event Spend(address indexed spender, uint256 tokensAmount, bytes32 indexed orderId);\n', '    event Purchase(address indexed received, uint256 tokensAmount, uint256 value);\n', '    event BuyBack(address indexed received, uint256 tokensAmount, uint256 value);\n', '    event NewReceiverSet(address newReceiver);\n', '\n', '    function OMPxContract() public payable{\n', '        addDiscount(1000 * 1e18,198);\n', '        addDiscount(5000 * 1e18,190);\n', '        addDiscount(20000 * 1e18,180);\n', '        addDiscount(100000 * 1e18,150);\n', '\n', '        token = new OMPxToken();\n', '        token.mint(owner, token.initialSupply());\n', '    }\n', '\n', '    // payable fallback\n', '\n', '    function() public payable {\n', '        emit Donation(msg.sender, msg.value);\n', '    }\n', '\n', '    function setFeeReceiver(address newReceiver) public onlyOwner {\n', '        require(newReceiver != address(0));\n', '        feeReceiverContract = Distribution(newReceiver);\n', '        emit NewReceiverSet(newReceiver);\n', '    }\n', '\n', '    function getFee() public {\n', '        if(feeBalance > 1e15){\n', '            feeReceiverContract.receiveFunds.value(feeBalance).gas(150000)();\n', '            trackFee(feeBalance);\n', '            feeBalance = 0;\n', '        }\n', '    }\n', '\n', '    function totalTokenSupply() public view returns(uint256 totalSupply_) {\n', '        return token.totalSupply();\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance_) {\n', '        return token.balanceOf(_owner);\n', '    }\n', '\n', '    // base price. How much eth-wui for 1e18 of wui-tokens (1 real token).\n', '    function getBuyBackPrice(uint256 buyBackValue) public view returns(uint256 price_) {\n', '        if (address(this).balance==0) {\n', '            return 0;\n', '        }\n', '        uint256 eth;\n', '        uint256 tokens = token.totalSupply();\n', '        if (buyBackValue > 0) {\n', '            eth = address(this).balance.sub(buyBackValue);\n', '        } else {\n', '            eth = address(this).balance;\n', '        }\n', '        return (eth.sub(feeBalance)).mul(1e18).div(tokens);\n', '    }\n', '\n', '\n', '    function getPurchasePrice(uint256 purchaseValue, uint256 amount) public view returns(uint256 price_) {\n', '        require(purchaseValue >= 0);\n', '        require(amount >= 0);\n', '        uint256 buyerContributionCoefficient = getDiscountByAmount(amount);\n', '        uint256 price = getBuyBackPrice(purchaseValue).mul(buyerContributionCoefficient).div(descPrecision);\n', '        if (price <= 0) {price = 1e11;}\n', '        return price;\n', '    }\n', '\n', '\n', '    // Purchase tokens to user.\n', '    // Money back should happens if current price is lower, then expected\n', '    function purchase(uint256 tokensToPurchase, uint256 maxPrice) public payable returns(uint256 tokensBought_) {\n', '        require(tokensToPurchase > 0);\n', '        require(msg.value > 0);\n', '        return purchaseSafe(tokensToPurchase, maxPrice);\n', '    }\n', '\n', '    function purchaseSafe(uint256 tokensToPurchase, uint256 maxPrice) internal returns(uint256 tokensBought_){\n', '        require(maxPrice >= 0);\n', '\n', '        uint256 currentPrice = getPurchasePrice(msg.value, tokensToPurchase);\n', '        require(currentPrice <= maxPrice);\n', '\n', '        uint256 tokensWuiAvailableByCurrentPrice = msg.value.mul(1e18).div(currentPrice);\n', '        if(tokensWuiAvailableByCurrentPrice > tokensToPurchase) {\n', '            tokensWuiAvailableByCurrentPrice = tokensToPurchase;\n', '        }\n', '        uint256 totalDealPrice = currentPrice.mul(tokensWuiAvailableByCurrentPrice).div(1e18);\n', '        require(msg.value >= tokensToPurchase.mul(maxPrice).div(1e18));\n', '        require(msg.value >= totalDealPrice);\n', '\n', '        // 9% system support fee\n', '        feeBalance = feeBalance + totalDealPrice.div(9);\n', '\n', '        //mint tokens to sender\n', '        uint256 availableTokens = token.balanceOf(this);\n', '        if (availableTokens < tokensWuiAvailableByCurrentPrice) {\n', '            uint256 tokensToMint = tokensWuiAvailableByCurrentPrice.sub(availableTokens);\n', '            token.mint(this, tokensToMint);\n', '        }\n', '        token.safeTransfer(msg.sender, tokensWuiAvailableByCurrentPrice);\n', '\n', '        // money back\n', '        if (totalDealPrice < msg.value) {\n', '            //            uint256 tokensToRefund = tokensToPurchase.sub(tokensWuiAvailableByCurrentPrice);\n', '            uint256 oddEthers = msg.value.sub(totalDealPrice);\n', '            if (oddEthers > 0) {\n', '                require(oddEthers < msg.value);\n', '                emit TransferMoneyBack(msg.sender, oddEthers);\n', '                msg.sender.transfer(oddEthers);\n', '                trackOdd(oddEthers);\n', '            }\n', '        }\n', '        emit Purchase(msg.sender, tokensToPurchase, totalDealPrice);\n', '        trackPurchase(tokensWuiAvailableByCurrentPrice, totalDealPrice);\n', '        return tokensWuiAvailableByCurrentPrice;\n', '    }\n', '\n', '    // buyback tokens from user\n', '    function buyBack(uint256 tokensToBuyBack, uint256 minPrice) public {\n', '        uint currentPrice = getBuyBackPrice(0);\n', '        require(currentPrice >= minPrice);\n', '        uint256 totalPrice = tokensToBuyBack.mul(currentPrice).div(1e18);\n', '        require(tokensToBuyBack > 0);\n', '        require(tokensToBuyBack <= token.balanceOf(msg.sender));\n', '\n', '        token.safeTransferFrom(msg.sender, this, tokensToBuyBack);\n', '\n', '        emit BuyBack(msg.sender, tokensToBuyBack, totalPrice);\n', '        trackBuyBack(tokensToBuyBack, totalPrice);\n', '        // send out eth\n', '        msg.sender.transfer(totalPrice);\n', '    }\n', '\n', '    // spend available tokens\n', '    function spend(uint256 tokensToSpend, bytes32 orderId) public {\n', '        token.safeTransferFrom(msg.sender, this, tokensToSpend);\n', '        token.burn(tokensToSpend);\n', '        trackSpend(tokensToSpend);\n', '        emit Spend(msg.sender, tokensToSpend, orderId);\n', '    }\n', '\n', '    // spend available and purchase up more if not enough\n', '    function purchaseUpAndSpend(uint256 tokensToSpend, uint256 maxPrice, bytes32 orderId) public payable returns(uint256 tokensSpent_){\n', '        uint256 tokensToPurchaseUp = tokensToSpend.sub(token.balanceOf(msg.sender));\n', '        uint256 currentPrice = getPurchasePrice(msg.value, tokensToPurchaseUp);\n', '        uint256 tokensAvailableByCurrentPrice = msg.value.mul(1e18).div(currentPrice);\n', '        require(tokensToPurchaseUp <= tokensAvailableByCurrentPrice);\n', '\n', '        if (tokensToPurchaseUp>0) {\n', '            purchase(tokensToPurchaseUp, maxPrice);\n', '        }\n', '        spend(tokensToSpend, orderId);\n', '        return tokensToSpend;\n', '    }\n', '\n', '    function getStat() onlyOwner public view returns(\n', '        uint256 tokensBoughtBack_, uint256 timesBoughtBack_,\n', '        uint256 tokensPurchased_, uint256 timesPurchased_,\n', '        uint256 ethSent_, uint256 ethReceived_,\n', '        uint256 tokensSpend_, uint256 timesSpend_,\n', '        uint256 oddSent_, uint256 feeSent_) {\n', '        return getStatistics();\n', '    }\n', '}\n', '\n', 'contract Distribution is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Recipient {\n', '        address addr;\n', '        uint256 share;\n', '        uint256 balance;\n', '        uint256 received;\n', '    }\n', '\n', '    uint256 sharesSum;\n', '    uint8 constant maxRecsAmount = 12;\n', '    mapping(address => Recipient) public recs;\n', '    address[maxRecsAmount] public recsLookUpTable; //to iterate\n', '\n', '    event Payment(address indexed to, uint256 value);\n', '    event AddShare(address to, uint256 value);\n', '    event ChangeShare(address to, uint256 value);\n', '    event DeleteShare(address to);\n', '    event ChangeAddessShare(address newAddress);\n', '    event FoundsReceived(uint256 value);\n', '\n', '    function Distribution() public {\n', '        sharesSum = 0;\n', '    }\n', '\n', '    function receiveFunds() public payable {\n', '        emit FoundsReceived(msg.value);\n', '        for (uint8 i = 0; i < maxRecsAmount; i++) {\n', '            Recipient storage rec = recs[recsLookUpTable[i]];\n', '            uint ethAmount = (rec.share.mul(msg.value)).div(sharesSum);\n', '            rec.balance = rec.balance + ethAmount;\n', '        }\n', '    }\n', '\n', '    modifier onlyMembers(){\n', '        require(recs[msg.sender].addr != address(0));\n', '        _;\n', '    }\n', '\n', '    function doPayments() public {\n', '        Recipient storage rec = recs[msg.sender];\n', '        require(rec.balance >= 1e12);\n', '        rec.addr.transfer(rec.balance);\n', '        emit Payment(rec.addr, rec.balance);\n', '        rec.received = (rec.received).add(rec.balance);\n', '        rec.balance = 0;\n', '    }\n', '\n', '    function addShare(address _rec, uint256 share) public onlyOwner {\n', '        require(_rec != address(0));\n', '        require(share > 0);\n', '        require(recs[_rec].addr == address(0));\n', '        recs[_rec].addr = _rec;\n', '        recs[_rec].share = share;\n', '        recs[_rec].received = 0;\n', '        for(uint8 i = 0; i < maxRecsAmount; i++ ) {\n', '            if (recsLookUpTable[i] == address(0)) {\n', '                recsLookUpTable[i] = _rec;\n', '                break;\n', '            }\n', '        }\n', '        sharesSum = sharesSum.add(share);\n', '        emit AddShare(_rec, share);\n', '    }\n', '\n', '    function changeShare(address _rec, uint share) public onlyOwner {\n', '        require(_rec != address(0));\n', '        require(share > 0);\n', '        require(recs[_rec].addr != address(0));\n', '        Recipient storage rec = recs[_rec];\n', '        sharesSum = sharesSum.sub(rec.share).add(share);\n', '        rec.share = share;\n', '        emit ChangeShare(_rec, share);\n', '    }\n', '\n', '    function deleteShare(address _rec) public onlyOwner {\n', '        require(_rec != address(0));\n', '        require(recs[_rec].addr != address(0));\n', '        sharesSum = sharesSum.sub(recs[_rec].share);\n', '        for(uint8 i = 0; i < maxRecsAmount; i++ ) {\n', '            if (recsLookUpTable[i] == recs[_rec].addr) {\n', '                recsLookUpTable[i] = address(0);\n', '                break;\n', '            }\n', '        }\n', '        delete recs[_rec];\n', '        emit DeleteShare(msg.sender);\n', '    }\n', '\n', '    function changeRecipientAddress(address _newRec) public {\n', '        require(msg.sender != address(0));\n', '        require(_newRec != address(0));\n', '        require(recs[msg.sender].addr != address(0));\n', '        require(recs[_newRec].addr == address(0));\n', '        require(recs[msg.sender].addr != _newRec);\n', '\n', '        Recipient storage rec = recs[msg.sender];\n', '        uint256 prevBalance = rec.balance;\n', '        addShare(_newRec, rec.share);\n', '        emit ChangeAddessShare(_newRec);\n', '        deleteShare(msg.sender);\n', '        recs[_newRec].balance = prevBalance;\n', '        emit DeleteShare(msg.sender);\n', '\n', '    }\n', '\n', '    function getMyBalance() public view returns(uint256) {\n', '        return recs[msg.sender].balance;\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  address internal owner;\n', '\n', '  function StandardToken() public {\n', '    // tokens available to sale\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender] || msg.sender == owner);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    if (msg.sender != owner) {\n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    }\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract OMPxToken is BurnableToken, MintableToken{\n', '    using SafeMath for uint256;\n', '    uint32 public constant decimals = 18;\n', '    uint256 public constant initialSupply = 1e24;\n', '\n', '    string public constant name = "OMPx Token";\n', '    string public constant symbol = "OMPX";\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Discountable is Ownable {\n', '    struct DiscStruct {\n', '        uint256 amount;\n', '        uint256 disc;\n', '    }\n', '    uint256 descPrecision = 1e2;\n', '    uint256 defaultCoef = 200;\n', '    DiscStruct[] public discounts;\n', '\n', '    function addDiscount(uint256 _amount, uint256 _disc) onlyOwner public{\n', '        discounts.push(DiscStruct(_amount, _disc));\n', '    }\n', '\n', '    function editDiscount(uint256 num, uint256 _amount, uint256 _disc) onlyOwner public{\n', '        discounts[num] = DiscStruct(_amount, _disc);\n', '    }\n', '\n', '    function getDiscountsAmount() public view returns(uint256 amount_){\n', '        return discounts.length;\n', '    }\n', '\n', '    function getDiscountByAmount(uint256 amount) internal view returns(uint256 disc_){\n', '        uint256 arrayLength = discounts.length;\n', '        if (amount < discounts[0].amount){\n', '            return defaultCoef;\n', '        }\n', '        for (uint8 i=0; i<arrayLength; i++) {\n', '            if(i == arrayLength - 1){\n', '                return discounts[arrayLength - 1].disc;\n', '            }\n', '            if (amount < discounts[i+1].amount){\n', '                return discounts[i].disc;\n', '            }\n', '        }\n', '        return defaultCoef;\n', '    }\n', '\n', '}\n', '\n', 'contract TransferStatistics {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private stat_tokensBoughtBack = 0;\n', '    uint256 private stat_timesBoughtBack = 0;\n', '    uint256 private stat_tokensPurchased = 0;\n', '    uint256 private stat_timesPurchased = 0;\n', '\n', '    uint256 private stat_ethSent = 0;\n', '    uint256 private stat_ethReceived = 0;\n', '\n', '    uint256 private stat_tokensSpend = 0;\n', '    uint256 private stat_timesSpend = 0;\n', '\n', '    uint256 private oddSent = 0;\n', '    uint256 private feeSent = 0;\n', '\n', '    function trackPurchase(uint256 tokens, uint256 sum) internal {\n', '        stat_tokensPurchased = stat_tokensPurchased.add(tokens);\n', '        stat_timesPurchased = stat_timesPurchased.add(1);\n', '        stat_ethSent = stat_ethSent.add(sum);\n', '    }\n', '\n', '    function trackBuyBack(uint256 tokens, uint256 sum) internal {\n', '        stat_tokensBoughtBack = stat_tokensBoughtBack.add(tokens);\n', '        stat_timesBoughtBack = stat_timesBoughtBack.add(1);\n', '        stat_ethReceived = stat_ethReceived.add(sum);\n', '    }\n', '\n', '    function trackSpend(uint256 tokens) internal{\n', '        stat_tokensSpend = stat_tokensSpend.add(tokens);\n', '        stat_timesSpend = stat_timesSpend.add(1);\n', '    }\n', '\n', '    function trackOdd(uint256 odd) internal {\n', '        oddSent = oddSent.add(odd);\n', '    }\n', '\n', '    function trackFee(uint256 fee) internal {\n', '        feeSent = feeSent.add(fee);\n', '    }\n', '\n', '    function getStatistics() internal view returns(\n', '        uint256 tokensBoughtBack_, uint256 timesBoughtBack_,\n', '        uint256 tokensPurchased_, uint256 timesPurchased_,\n', '        uint256 ethSent_, uint256 ethReceived_,\n', '        uint256 tokensSpend_, uint256 timesSpend_,\n', '        uint256 oddSent_, uint256 feeSent_) {\n', '        return (stat_tokensBoughtBack, stat_timesBoughtBack,\n', '        stat_tokensPurchased, stat_timesPurchased,\n', '        stat_ethSent, stat_ethReceived,\n', '        stat_tokensSpend, stat_timesSpend,\n', '        oddSent, feeSent);\n', '    }\n', '}\n', '\n', 'contract Haltable is Ownable {\n', '    bool public halted;\n', '\n', '    modifier stopInEmergency {\n', '        require(!halted);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyInEmergency {\n', '        require(halted);\n', '        _;\n', '    }\n', '\n', '\n', '    /// @dev called by the owner on emergency, triggers stopped state\n', '    function halt() external onlyOwner {\n', '        halted = true;\n', '    }\n', '\n', '\n', '    /// @dev called by the owner on end of emergency, returns to normal state\n', '    function unhalt() external onlyOwner onlyInEmergency {\n', '        halted = false;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken, Ownable {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public onlyOwner{\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract OMPxContract is BasicToken, Haltable, Discountable, TransferStatistics {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '    using SafeERC20 for OMPxToken;\n', '    /// @dev Token\n', '    OMPxToken public token;\n', '    Distribution public feeReceiverContract;    \n', '    uint256 private feeBalance = 0;\n', '\n', '    event TransferMoneyBack(address indexed to, uint256 value);\n', '    event Donation(address indexed donator, uint256 value);\n', '    event Spend(address indexed spender, uint256 tokensAmount, bytes32 indexed orderId);\n', '    event Purchase(address indexed received, uint256 tokensAmount, uint256 value);\n', '    event BuyBack(address indexed received, uint256 tokensAmount, uint256 value);\n', '    event NewReceiverSet(address newReceiver);\n', '\n', '    function OMPxContract() public payable{\n', '        addDiscount(1000 * 1e18,198);\n', '        addDiscount(5000 * 1e18,190);\n', '        addDiscount(20000 * 1e18,180);\n', '        addDiscount(100000 * 1e18,150);\n', '\n', '        token = new OMPxToken();\n', '        token.mint(owner, token.initialSupply());\n', '    }\n', '\n', '    // payable fallback\n', '\n', '    function() public payable {\n', '        emit Donation(msg.sender, msg.value);\n', '    }\n', '\n', '    function setFeeReceiver(address newReceiver) public onlyOwner {\n', '        require(newReceiver != address(0));\n', '        feeReceiverContract = Distribution(newReceiver);\n', '        emit NewReceiverSet(newReceiver);\n', '    }\n', '\n', '    function getFee() public {\n', '        if(feeBalance > 1e15){\n', '            feeReceiverContract.receiveFunds.value(feeBalance).gas(150000)();\n', '            trackFee(feeBalance);\n', '            feeBalance = 0;\n', '        }\n', '    }\n', '\n', '    function totalTokenSupply() public view returns(uint256 totalSupply_) {\n', '        return token.totalSupply();\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance_) {\n', '        return token.balanceOf(_owner);\n', '    }\n', '\n', '    // base price. How much eth-wui for 1e18 of wui-tokens (1 real token).\n', '    function getBuyBackPrice(uint256 buyBackValue) public view returns(uint256 price_) {\n', '        if (address(this).balance==0) {\n', '            return 0;\n', '        }\n', '        uint256 eth;\n', '        uint256 tokens = token.totalSupply();\n', '        if (buyBackValue > 0) {\n', '            eth = address(this).balance.sub(buyBackValue);\n', '        } else {\n', '            eth = address(this).balance;\n', '        }\n', '        return (eth.sub(feeBalance)).mul(1e18).div(tokens);\n', '    }\n', '\n', '\n', '    function getPurchasePrice(uint256 purchaseValue, uint256 amount) public view returns(uint256 price_) {\n', '        require(purchaseValue >= 0);\n', '        require(amount >= 0);\n', '        uint256 buyerContributionCoefficient = getDiscountByAmount(amount);\n', '        uint256 price = getBuyBackPrice(purchaseValue).mul(buyerContributionCoefficient).div(descPrecision);\n', '        if (price <= 0) {price = 1e11;}\n', '        return price;\n', '    }\n', '\n', '\n', '    // Purchase tokens to user.\n', '    // Money back should happens if current price is lower, then expected\n', '    function purchase(uint256 tokensToPurchase, uint256 maxPrice) public payable returns(uint256 tokensBought_) {\n', '        require(tokensToPurchase > 0);\n', '        require(msg.value > 0);\n', '        return purchaseSafe(tokensToPurchase, maxPrice);\n', '    }\n', '\n', '    function purchaseSafe(uint256 tokensToPurchase, uint256 maxPrice) internal returns(uint256 tokensBought_){\n', '        require(maxPrice >= 0);\n', '\n', '        uint256 currentPrice = getPurchasePrice(msg.value, tokensToPurchase);\n', '        require(currentPrice <= maxPrice);\n', '\n', '        uint256 tokensWuiAvailableByCurrentPrice = msg.value.mul(1e18).div(currentPrice);\n', '        if(tokensWuiAvailableByCurrentPrice > tokensToPurchase) {\n', '            tokensWuiAvailableByCurrentPrice = tokensToPurchase;\n', '        }\n', '        uint256 totalDealPrice = currentPrice.mul(tokensWuiAvailableByCurrentPrice).div(1e18);\n', '        require(msg.value >= tokensToPurchase.mul(maxPrice).div(1e18));\n', '        require(msg.value >= totalDealPrice);\n', '\n', '        // 9% system support fee\n', '        feeBalance = feeBalance + totalDealPrice.div(9);\n', '\n', '        //mint tokens to sender\n', '        uint256 availableTokens = token.balanceOf(this);\n', '        if (availableTokens < tokensWuiAvailableByCurrentPrice) {\n', '            uint256 tokensToMint = tokensWuiAvailableByCurrentPrice.sub(availableTokens);\n', '            token.mint(this, tokensToMint);\n', '        }\n', '        token.safeTransfer(msg.sender, tokensWuiAvailableByCurrentPrice);\n', '\n', '        // money back\n', '        if (totalDealPrice < msg.value) {\n', '            //            uint256 tokensToRefund = tokensToPurchase.sub(tokensWuiAvailableByCurrentPrice);\n', '            uint256 oddEthers = msg.value.sub(totalDealPrice);\n', '            if (oddEthers > 0) {\n', '                require(oddEthers < msg.value);\n', '                emit TransferMoneyBack(msg.sender, oddEthers);\n', '                msg.sender.transfer(oddEthers);\n', '                trackOdd(oddEthers);\n', '            }\n', '        }\n', '        emit Purchase(msg.sender, tokensToPurchase, totalDealPrice);\n', '        trackPurchase(tokensWuiAvailableByCurrentPrice, totalDealPrice);\n', '        return tokensWuiAvailableByCurrentPrice;\n', '    }\n', '\n', '    // buyback tokens from user\n', '    function buyBack(uint256 tokensToBuyBack, uint256 minPrice) public {\n', '        uint currentPrice = getBuyBackPrice(0);\n', '        require(currentPrice >= minPrice);\n', '        uint256 totalPrice = tokensToBuyBack.mul(currentPrice).div(1e18);\n', '        require(tokensToBuyBack > 0);\n', '        require(tokensToBuyBack <= token.balanceOf(msg.sender));\n', '\n', '        token.safeTransferFrom(msg.sender, this, tokensToBuyBack);\n', '\n', '        emit BuyBack(msg.sender, tokensToBuyBack, totalPrice);\n', '        trackBuyBack(tokensToBuyBack, totalPrice);\n', '        // send out eth\n', '        msg.sender.transfer(totalPrice);\n', '    }\n', '\n', '    // spend available tokens\n', '    function spend(uint256 tokensToSpend, bytes32 orderId) public {\n', '        token.safeTransferFrom(msg.sender, this, tokensToSpend);\n', '        token.burn(tokensToSpend);\n', '        trackSpend(tokensToSpend);\n', '        emit Spend(msg.sender, tokensToSpend, orderId);\n', '    }\n', '\n', '    // spend available and purchase up more if not enough\n', '    function purchaseUpAndSpend(uint256 tokensToSpend, uint256 maxPrice, bytes32 orderId) public payable returns(uint256 tokensSpent_){\n', '        uint256 tokensToPurchaseUp = tokensToSpend.sub(token.balanceOf(msg.sender));\n', '        uint256 currentPrice = getPurchasePrice(msg.value, tokensToPurchaseUp);\n', '        uint256 tokensAvailableByCurrentPrice = msg.value.mul(1e18).div(currentPrice);\n', '        require(tokensToPurchaseUp <= tokensAvailableByCurrentPrice);\n', '\n', '        if (tokensToPurchaseUp>0) {\n', '            purchase(tokensToPurchaseUp, maxPrice);\n', '        }\n', '        spend(tokensToSpend, orderId);\n', '        return tokensToSpend;\n', '    }\n', '\n', '    function getStat() onlyOwner public view returns(\n', '        uint256 tokensBoughtBack_, uint256 timesBoughtBack_,\n', '        uint256 tokensPurchased_, uint256 timesPurchased_,\n', '        uint256 ethSent_, uint256 ethReceived_,\n', '        uint256 tokensSpend_, uint256 timesSpend_,\n', '        uint256 oddSent_, uint256 feeSent_) {\n', '        return getStatistics();\n', '    }\n', '}\n', '\n', 'contract Distribution is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Recipient {\n', '        address addr;\n', '        uint256 share;\n', '        uint256 balance;\n', '        uint256 received;\n', '    }\n', '\n', '    uint256 sharesSum;\n', '    uint8 constant maxRecsAmount = 12;\n', '    mapping(address => Recipient) public recs;\n', '    address[maxRecsAmount] public recsLookUpTable; //to iterate\n', '\n', '    event Payment(address indexed to, uint256 value);\n', '    event AddShare(address to, uint256 value);\n', '    event ChangeShare(address to, uint256 value);\n', '    event DeleteShare(address to);\n', '    event ChangeAddessShare(address newAddress);\n', '    event FoundsReceived(uint256 value);\n', '\n', '    function Distribution() public {\n', '        sharesSum = 0;\n', '    }\n', '\n', '    function receiveFunds() public payable {\n', '        emit FoundsReceived(msg.value);\n', '        for (uint8 i = 0; i < maxRecsAmount; i++) {\n', '            Recipient storage rec = recs[recsLookUpTable[i]];\n', '            uint ethAmount = (rec.share.mul(msg.value)).div(sharesSum);\n', '            rec.balance = rec.balance + ethAmount;\n', '        }\n', '    }\n', '\n', '    modifier onlyMembers(){\n', '        require(recs[msg.sender].addr != address(0));\n', '        _;\n', '    }\n', '\n', '    function doPayments() public {\n', '        Recipient storage rec = recs[msg.sender];\n', '        require(rec.balance >= 1e12);\n', '        rec.addr.transfer(rec.balance);\n', '        emit Payment(rec.addr, rec.balance);\n', '        rec.received = (rec.received).add(rec.balance);\n', '        rec.balance = 0;\n', '    }\n', '\n', '    function addShare(address _rec, uint256 share) public onlyOwner {\n', '        require(_rec != address(0));\n', '        require(share > 0);\n', '        require(recs[_rec].addr == address(0));\n', '        recs[_rec].addr = _rec;\n', '        recs[_rec].share = share;\n', '        recs[_rec].received = 0;\n', '        for(uint8 i = 0; i < maxRecsAmount; i++ ) {\n', '            if (recsLookUpTable[i] == address(0)) {\n', '                recsLookUpTable[i] = _rec;\n', '                break;\n', '            }\n', '        }\n', '        sharesSum = sharesSum.add(share);\n', '        emit AddShare(_rec, share);\n', '    }\n', '\n', '    function changeShare(address _rec, uint share) public onlyOwner {\n', '        require(_rec != address(0));\n', '        require(share > 0);\n', '        require(recs[_rec].addr != address(0));\n', '        Recipient storage rec = recs[_rec];\n', '        sharesSum = sharesSum.sub(rec.share).add(share);\n', '        rec.share = share;\n', '        emit ChangeShare(_rec, share);\n', '    }\n', '\n', '    function deleteShare(address _rec) public onlyOwner {\n', '        require(_rec != address(0));\n', '        require(recs[_rec].addr != address(0));\n', '        sharesSum = sharesSum.sub(recs[_rec].share);\n', '        for(uint8 i = 0; i < maxRecsAmount; i++ ) {\n', '            if (recsLookUpTable[i] == recs[_rec].addr) {\n', '                recsLookUpTable[i] = address(0);\n', '                break;\n', '            }\n', '        }\n', '        delete recs[_rec];\n', '        emit DeleteShare(msg.sender);\n', '    }\n', '\n', '    function changeRecipientAddress(address _newRec) public {\n', '        require(msg.sender != address(0));\n', '        require(_newRec != address(0));\n', '        require(recs[msg.sender].addr != address(0));\n', '        require(recs[_newRec].addr == address(0));\n', '        require(recs[msg.sender].addr != _newRec);\n', '\n', '        Recipient storage rec = recs[msg.sender];\n', '        uint256 prevBalance = rec.balance;\n', '        addShare(_newRec, rec.share);\n', '        emit ChangeAddessShare(_newRec);\n', '        deleteShare(msg.sender);\n', '        recs[_newRec].balance = prevBalance;\n', '        emit DeleteShare(msg.sender);\n', '\n', '    }\n', '\n', '    function getMyBalance() public view returns(uint256) {\n', '        return recs[msg.sender].balance;\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  address internal owner;\n', '\n', '  function StandardToken() public {\n', '    // tokens available to sale\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender] || msg.sender == owner);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    if (msg.sender != owner) {\n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    }\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract OMPxToken is BurnableToken, MintableToken{\n', '    using SafeMath for uint256;\n', '    uint32 public constant decimals = 18;\n', '    uint256 public constant initialSupply = 1e24;\n', '\n', '    string public constant name = "OMPx Token";\n', '    string public constant symbol = "OMPX";\n', '}']
