['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '      assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '      assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '      assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract UBetCoin is StandardToken, Ownable {\n', '  \n', '    string public constant name = "UBetCoin";\n', '    string public constant symbol = "UBET";\n', '    uint8 public constant decimals = 0;\n', '    uint256 public constant totalCoinSupply = 4000000000 * (10 ** uint256(decimals));  \n', '\n', '    /// Base exchange rate is set to 1 ETH = 962 UBET.\n', '    uint256 public ratePerOneEther = 962;\n', '\n', '    /// Issue event index starting from 0.\n', '    uint64 public issueIndex = 0;\n', '\n', '    /// Emitted for each sucuessful token purchase.\n', '    event Issue(uint64 issueIndex, address addr, uint256 tokenAmount);\n', '    \n', '    // All funds will be transferred in this wallet.\n', '    address public moneyWallet = 0x709cbaF04d5Bd1D62D156DBda13064f994938f28;\n', '  \n', '    struct UBetCheck {\n', '      string accountNumber;\n', '      string routingNumber;\n', '      string institution;\n', '      uint256 amount;\n', '      string digitalCheckFingerPrint;\n', '    }\n', '    \n', '    mapping (address => UBetCheck) UBetChecks;\n', '    address[] public uBetCheckAccts;\n', '    \n', '    \n', '    function UBetCoin() public {\n', '    }\n', '\n', '    /// @dev This default function allows token to be purchased by directly\n', '    /// sending ether to this smart contract.\n', '    function () public payable {\n', '      purchaseTokens(msg.sender);\n', '    }\n', '    \n', '    /// @dev Register UBetCheck to the chain\n', '    /// @param _beneficiary recipient ether address\n', '    /// @param _accountNumber the account number stated in the check\n', '    /// @param _routingNumber the routing number stated in the check\n', '    /// @param _institution the name of the institution / bank in the check\n', '    /// @param _amount the amount in currency in the chek\n', '    /// @param _digitalCheckFingerPrint the hash 256 of the file\n', '    function registerUBetCheck(address _beneficiary, string _accountNumber, string _routingNumber, string _institution,  uint256 _amount, string _digitalCheckFingerPrint) public payable onlyOwner {\n', '      \n', '      require(_beneficiary != address(0));\n', '      \n', '      require(bytes(_accountNumber).length != 0);\n', '      require(bytes(_routingNumber).length != 0);\n', '      require(bytes(_institution).length != 0);\n', '      require(_amount > 0);\n', '      require(bytes(_digitalCheckFingerPrint).length != 0);\n', '      \n', '      var uBetCheck = UBetChecks[_beneficiary];\n', '      \n', '      uBetCheck.accountNumber = _accountNumber;\n', '      uBetCheck.routingNumber = _routingNumber;\n', '      uBetCheck.amount = _amount;\n', '      uBetCheck.digitalCheckFingerPrint = _digitalCheckFingerPrint;\n', '      \n', '      uBetCheckAccts.push(_beneficiary) -1;\n', '    }\n', '    \n', '    /// @dev List all the checks in the\n', '    function getUBetChecks() view public returns (address[]) {\n', '      return uBetCheckAccts;\n', '    }\n', '    \n', '    /// @dev Return UBetCheck information by supplying beneficiary adddress\n', '    function getUBetCheck(address _address) view public returns (string, string, string, uint256, string) {\n', '      return (UBetChecks[_address].accountNumber, \n', '              UBetChecks[_address].routingNumber, \n', '              UBetChecks[_address].institution,\n', '              UBetChecks[_address].amount, \n', '              UBetChecks[_address].digitalCheckFingerPrint);\n', '    }\n', '        \n', '    /// @dev Issue token based on Ether received.\n', '    /// @param _beneficiary Address that newly issued token will be sent to.\n', '    function purchaseTokens(address _beneficiary) public payable {\n', '      // only accept a minimum amount of ETH?\n', '      require(msg.value >= 0.00104 ether);\n', '\n', '      uint256 tokens = computeTokenAmount(msg.value);\n', '      doIssueTokens(_beneficiary, tokens);\n', '\n', '      /// forward the funds to the money wallet\n', '      moneyWallet.transfer(this.balance);\n', '    }\n', '    \n', '    /// @dev return total count of registered UBet Checks\n', '    function countUBetChecks() view public returns (uint) {\n', '        return uBetCheckAccts.length;\n', '    }\n', '    \n', '    /// @dev Issue tokens for a single buyer on the sale\n', '    /// @param _beneficiary addresses that the sale tokens will be sent to.\n', '    /// @param _tokens the amount of tokens, with decimals expanded (full).\n', '    function issueTokens(address _beneficiary, uint256 _tokens) public onlyOwner {\n', '      doIssueTokens(_beneficiary, _tokens);\n', '    }\n', '\n', '    /// @dev issue tokens for a single buyer\n', '    /// @param _beneficiary addresses that the tokens will be sent to.\n', '    /// @param _tokens the amount of tokens, with decimals expanded (full).\n', '    function doIssueTokens(address _beneficiary, uint256 _tokens) internal {\n', '      require(_beneficiary != address(0));    \n', '\n', '      // compute without actually increasing it\n', '      uint256 increasedTotalSupply = totalSupply.add(_tokens);\n', '    \n', '      // increase token total supply\n', '      totalSupply = increasedTotalSupply;\n', '      // update the beneficiary balance to number of tokens sent\n', '      balances[_beneficiary] = balances[_beneficiary].add(_tokens);\n', '\n', '      // event is fired when tokens issued\n', '      Issue(\n', '          issueIndex++,\n', '          _beneficiary,\n', '          _tokens\n', '      );\n', '    }\n', '\n', '    /// @dev Compute the amount of UBET token that can be purchased.\n', '    /// @param ethAmount Amount of Ether to purchase UBET.\n', '    /// @return Amount of UBET token to purchase\n', '    function computeTokenAmount(uint256 ethAmount) internal view returns (uint256 tokens) {\n', '      tokens = ethAmount.mul(ratePerOneEther).div(10**18);\n', '    }\n', '}']