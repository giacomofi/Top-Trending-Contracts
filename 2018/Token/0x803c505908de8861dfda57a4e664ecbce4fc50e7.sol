['pragma solidity ^0.4.24;\n', '\n', 'contract Token {\n', '\n', '    /// Возвращает общее количество токенов\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// Параметры владельца. Адрес, с которого будут извлекаться токены.\n', '    /// Возвращает текущий баланс.\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// Уведомляет об отправке `_value` токенов на адрес `_to` из `msg.sender`\n', '    /// Параметр _to означает адрес получателя\n', '    /// Параметр _value означает количество токенов, которые будут отправлены\n', '    /// Возвращает информацию, была ли транзакция успешной или нет\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// Уведомляет об отправке `_value` токенов на адрес `_to` из `_from` при условии, что подтверждено `_from`\n', '    /// Параметр _from означает адрес отправителя\n', '    /// Параметр _to означает адрес получателя\n', '    /// Параметр _value означает количество токенов, которые будут отправлены\n', '    /// Возвращает информацию, была ли транзакция успешной или нет\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// Уведомляет `msg.sender` подтвердить `_addr` для отправки `_value` токенов\n', '    /// Параметр _spender означает адрес счета, с которого можно отправлять токены\n', '    /// Параметр _value означает количество токенов, которое разрешено отправить\n', '    /// Возвращает информацию, была ли транзакция успешной или нет\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    \n', '    /// Параметр _owner означает адрес владельца токенов\n', '    /// Параметр _spender означает адрес счета, с которого можно отправлять токены\n', '    /// Возвращает информацию об оставшемся количестве токенов, которое можно потратить\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\n', '        //По умолчанию предполагается, что totalSupply не может быть больше (2^256 - 1).\n', '        //Если токен не содержит totalSupply и можно неограниченно выпускать токены, необходимо следить за переконвертацией токена.\n', '        //Замените оператор if на this one.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        \n', '                if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //Как и указано свыше, замените эту строку ниженаписанной, если желаете защитить контракт от переконвертированных токенов.  \n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract RussianCash is StandardToken { // ПОДЛЕЖИТ ИЗМЕНЕНИЮ. Обновить название контракта.\n', '\n', '    /* Публичные переменные токена */\n', '\n', '    /*\n', '    ВНИМАНИЕ:\n', '    Нижеизложенные переменные ОПЦИОНАЛЬНЫ. Нет строгой необходимости их включать.\n', '    \n', '      Они позволяют кастомизировать контракт токена и не влияют на основные функции.\n', '    Некоторые цифровые-кошельки/интерфейсы могут не поддерживать эти функции.\n', '    */\n', '    string public name;                   // Название токена\n', '    uint8 public decimals;                // Как много показывать десятичных. По умолчание устанавливает значение, равное 18\n', '    string public symbol;                 // Идентификатор: например SBX, XPR и т.д...\n', '    string public version = &#39;H1.0&#39;; \n', '    uint256 public unitsOneEthCanBuy;     // Как много единиц вашего токена можно купить за 1 ETH?\n', '    uint256 public totalEthInWei;         // WEI равняется минимальному значению ETH (эквивалентно центу в USD или сатоши в BTC). Здесь мы будем хранить все привлеченные ETH через ICO\n', '    address public fundsWallet;           // Куда должны перенаправляться привлеченные ETH?\n', '\n', '    // Это конструктор-функция, ее имя должно соответствовать вышенаписанному названию\n', '    function RussianCash() {\n', '        balances[msg.sender] = 1000000000000000000000000000;               // Предоставить создателю контракта все начальные токены. В нашем случае количество равно 1000000000. Если вы хотите, чтобы количество равнялось число X, а десятичные равнялись 5, установите следующее значение X * 100000. (ПОДЛЕЖИТ ИЗМЕНЕНИЮ)\n', '        totalSupply = 1000000000000000000000000000;                        // Обновить общий выпуск (1000000000 для примера) (ПОДЛЕЖИТ ИЗМЕНЕНИЮ)\n', '        name = "Russian Cash";                                   // Установить название токена для отображения на дисплее (ПОДЛЕЖИТ ИЗМЕНЕНИЮ)\n', '        decimals = 18;                                               // Количество десятичных знаков после запятой для отображения на дисплее (ПОДЛЕЖИТ ИЗМЕНЕНИЮ)\n', '        symbol = "RUS";                                             // Идентификатор токена для отображения на дисплее (ПОДЛЕЖИТ ИЗМЕНЕНИЮ)\n', '        unitsOneEthCanBuy = 2500;                                      // Установить цену за единицу вашего токена для ICO (ПОДЛЕЖИТ ИЗМЕНЕНИЮ)\n', '        fundsWallet = msg.sender;                                    // Владелец контракта получает ETH\n', '    }\n', '\n', '    function() payable{\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        uint256 amount = msg.value * unitsOneEthCanBuy;\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '        Transfer(fundsWallet, msg.sender, amount); // Передать сообщение блокчейн-сети\n', '\n', '        //Отправить Ether в fundsWallet\n', '        fundsWallet.transfer(msg.value);                               \n', '    }\n', '\n', '    /* Верификация и затем вызов контракта */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '       Approval(msg.sender, _spender, _value);\n', '\n', '        //вызов функции receiveApproval в контракте, который вы хотите уведомить. Этот процесс по умолчанию создает подпись функции, но в нашем случае это не нужно включать в контракт.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //к этому моменту, вызов к функции должен пройти успешно. \n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']