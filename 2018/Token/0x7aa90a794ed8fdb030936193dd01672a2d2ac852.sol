['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '   /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     require(msg.data.length >= size + 4);\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32)  public returns (bool) {\n', '    require (_to != address(0));\n', '    require (_value > 0);\n', '    require (balances[msg.sender] >= _value); // Check if the sender has enough\n', '    //require (balances[_to] + _value > balances[_to]); // Check for overflows\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32)  public returns (bool) {\n', '    require(_to != address(0));\n', '    require (_value > 0);\n', '    require (balances[_from] >= _value); // Check if the sender has enough\n', '    //require (balances[_to] + _value > balances[_to]); // Check for overflows\n', '    require (_value <= allowed[_from][msg.sender]); // Check allowance  \n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '  \trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '// This is just a contract of a MagnaChain Token.\n', '// It is a ERC20 token\n', 'contract MagnaChain is StandardToken, Ownable{\n', '    \n', '    string public version = "1.0";\n', '    string public name = "MagnaChain";\n', '    string public symbol = "MGC";\n', '    uint8 public  decimals = 18;\n', '\n', '    mapping(address=>uint256)  lockedBalance;\n', '    mapping(address=>uint)     timeRelease; \n', '    \n', '    uint256 internal constant INITIAL_SUPPLY = 20 * 100 * (10**6) * (10 **18);\n', '    uint256 internal constant MAX_TIME = 60*60*24*365*5;\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '    event Lock(address indexed locker, uint256 value, uint releaseTime);\n', '    event UnLock(address indexed unlocker, uint256 value);\n', '    \n', '\n', '    // constructor\n', '    function MagnaChain() { \n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        totalSupply = INITIAL_SUPPLY;\n', '    }\n', '\n', '    //balance of locked\n', '    function lockedOf(address _owner) public constant returns (uint256 balance) {\n', '        return lockedBalance[_owner];\n', '    }\n', '\n', '    //release time of locked\n', '    function unlockTimeOf(address _owner) public constant returns (uint timelimit) {\n', '        return timeRelease[_owner];\n', '    }\n', '\n', '    // transfer to and lock it\n', '    function transferAndLock(address _to, uint256 _value, uint _releaseTime) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(_value > 0);\n', '        require(_releaseTime > now && _releaseTime <= now + MAX_TIME);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '       \n', '        //if preLock can release \n', '        uint preRelease = timeRelease[_to];\n', '        if (preRelease <= now && preRelease != 0x0) {\n', '            balances[_to] = balances[_to].add(lockedBalance[_to]);\n', '            lockedBalance[_to] = 0;\n', '        }\n', '\n', '        lockedBalance[_to] = lockedBalance[_to].add(_value);\n', '        timeRelease[_to] =  _releaseTime >= timeRelease[_to] ? _releaseTime : timeRelease[_to]; \n', '        Transfer(msg.sender, _to, _value);\n', '        Lock(_to, _value, _releaseTime);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '   * @notice Transfers tokens held by lock.\n', '   */\n', '   function unlock() public constant returns (bool success){\n', '        uint256 amount = lockedBalance[msg.sender];\n', '        require(amount > 0);\n', '        require(now >= timeRelease[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        lockedBalance[msg.sender] = 0;\n', '        timeRelease[msg.sender] = 0;\n', '\n', '        Transfer(address(0), msg.sender, amount);\n', '        UnLock(msg.sender, amount);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '    \n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '        return true;\n', '    }\n', '}']