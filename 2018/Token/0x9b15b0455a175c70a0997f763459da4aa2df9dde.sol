['pragma solidity ^0.4.16;\n', '/* 创建一个父类， 账户管理员 */\n', 'contract owned {\n', '\n', '    address public owner;\n', '\n', '    function owned() public {\n', '    owner = msg.sender;\n', '    }\n', '\n', '    /* modifier是修改标志 */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /* 修改管理员账户， onlyOwner代表只能是用户管理员来修改 */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }   \n', '}\n', '\n', '/* receiveApproval服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的 */\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    // 代币（token）的公共变量\n', '    string public name;             //代币名字\n', '    string public symbol;           //代币符号\n', '    uint8 public decimals = 18;     //代币小数点位数， 18是默认， 尽量不要更改\n', '\n', '    uint256 public totalSupply;     //代币总量\n', '\n', '    // 记录各个账户的代币数目\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    // A账户存在B账户资金\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // 转账通知事件\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // 销毁金额通知事件\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /* 构造函数 */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // 根据decimals计算代币的数量\n', '        balanceOf[msg.sender] = totalSupply;                    // 给生成者所有的代币数量\n', '        name = tokenName;                                       // 设置代币的名字\n', '        symbol = tokenSymbol;                                   // 设置代币的符号\n', '    }\n', '\n', '    /* 私有的交易函数 */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // 防止转移到0x0， 用burn代替这个功能\n', '        require(_to != 0x0);\n', '        // 检测发送者是否有足够的资金\n', '        require(balanceOf[_from] >= _value);\n', '        // 检查是否溢出（数据类型的溢出）\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // 将此保存为将来的断言， 函数最后会有一个检验\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // 减少发送者资产\n', '        balanceOf[_from] -= _value;\n', '        // 增加接收者的资产\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // 断言检测， 不应该为错\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /* 传递tokens */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /* 从其他账户转移资产 */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /*  授权第三方从发送者账户转移代币，然后通过transferFrom()函数来执行第三方的转移操作 */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    为其他地址设置津贴， 并通知\n', '    发送者通知代币合约, 代币合约通知服务合约receiveApproval, 服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的transferFrom)\n', '    */\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * 销毁代币\n', '    */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * 从其他账户销毁代币\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       ADVANCED TOKEN STARTS HERE       */\n', '/******************************************/\n', '\n', 'contract ROSCtoken is owned, TokenERC20 {\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '\n', '    /* 冻结账户 */\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* 构造函数 */\n', '    function ROSCtoken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    /* 转账， 比父类加入了账户冻结 */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '/// 向指定账户增发资金\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '\n', '    }\n', '\n', '\n', '    /// 冻结 or 解冻账户\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;               // calculates the amount\n', '        _transfer(this, msg.sender, amount);              // makes the transfers\n', '    }\n', '\n', '    function sell(uint256 amount) public {\n', '        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n', '        _transfer(msg.sender, this, amount);              // makes the transfers\n', '        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It&#39;s important to do this last to avoid recursion attacks\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '/* 创建一个父类， 账户管理员 */\n', 'contract owned {\n', '\n', '    address public owner;\n', '\n', '    function owned() public {\n', '    owner = msg.sender;\n', '    }\n', '\n', '    /* modifier是修改标志 */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /* 修改管理员账户， onlyOwner代表只能是用户管理员来修改 */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }   \n', '}\n', '\n', '/* receiveApproval服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的 */\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    // 代币（token）的公共变量\n', '    string public name;             //代币名字\n', '    string public symbol;           //代币符号\n', '    uint8 public decimals = 18;     //代币小数点位数， 18是默认， 尽量不要更改\n', '\n', '    uint256 public totalSupply;     //代币总量\n', '\n', '    // 记录各个账户的代币数目\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    // A账户存在B账户资金\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // 转账通知事件\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // 销毁金额通知事件\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /* 构造函数 */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // 根据decimals计算代币的数量\n', '        balanceOf[msg.sender] = totalSupply;                    // 给生成者所有的代币数量\n', '        name = tokenName;                                       // 设置代币的名字\n', '        symbol = tokenSymbol;                                   // 设置代币的符号\n', '    }\n', '\n', '    /* 私有的交易函数 */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // 防止转移到0x0， 用burn代替这个功能\n', '        require(_to != 0x0);\n', '        // 检测发送者是否有足够的资金\n', '        require(balanceOf[_from] >= _value);\n', '        // 检查是否溢出（数据类型的溢出）\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // 将此保存为将来的断言， 函数最后会有一个检验\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // 减少发送者资产\n', '        balanceOf[_from] -= _value;\n', '        // 增加接收者的资产\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // 断言检测， 不应该为错\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /* 传递tokens */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /* 从其他账户转移资产 */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /*  授权第三方从发送者账户转移代币，然后通过transferFrom()函数来执行第三方的转移操作 */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /*\n', '    为其他地址设置津贴， 并通知\n', '    发送者通知代币合约, 代币合约通知服务合约receiveApproval, 服务合约指示代币合约将代币从发送者的账户转移到服务合约的账户（通过调用服务合约的transferFrom)\n', '    */\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * 销毁代币\n', '    */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * 从其他账户销毁代币\n', '    */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       ADVANCED TOKEN STARTS HERE       */\n', '/******************************************/\n', '\n', 'contract ROSCtoken is owned, TokenERC20 {\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '\n', '    /* 冻结账户 */\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* 构造函数 */\n', '    function ROSCtoken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    /* 转账， 比父类加入了账户冻结 */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '/// 向指定账户增发资金\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '\n', '    }\n', '\n', '\n', '    /// 冻结 or 解冻账户\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;               // calculates the amount\n', '        _transfer(this, msg.sender, amount);              // makes the transfers\n', '    }\n', '\n', '    function sell(uint256 amount) public {\n', '        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n', '        _transfer(msg.sender, this, amount);              // makes the transfers\n', "        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    }\n', '}']
