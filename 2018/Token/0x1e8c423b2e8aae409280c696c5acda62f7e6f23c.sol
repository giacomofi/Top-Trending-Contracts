['// Copyright (C) QTB Team\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) returns (bool ok);\n', '    function approve( address spender, uint value ) returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract DSMath {\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '}\n', '\n', 'contract QTB is ERC20,DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '\n', '    string   public  symbol;\n', '    string   public  name;\n', '    uint256  public  decimals = 18;\n', '    address  public  owner;\n', '    bool     public  stopped;\n', '    \n', '\n', '\n', '    function QTB(string _symbol,string _name,address _owner) {\n', '        symbol=_symbol;\n', '        name=_name;\n', '        owner=_owner;\n', '    }\n', '\n', '    modifier auth {\n', '        assert (msg.sender==owner);\n', '        _;\n', '    }\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() auth  {\n', '        stopped = true;\n', '    }\n', '    function start() auth  {\n', '        stopped = false;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address src) constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '\n', '    function transfer(address dst, uint wad) stoppable returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '\n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '\n', '        Transfer(msg.sender, dst, wad);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint wad)stoppable returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '\n', '        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '\n', '        Transfer(src, dst, wad);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address guy, uint256 wad) stoppable returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '\n', '        Approval(msg.sender, guy, wad);\n', '\n', '        return true;\n', '    }\n', '    function mint(address dst,uint128 wad) auth stoppable {\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        _supply = add(_supply, wad);\n', '    }\n', '\n', '    event LogSetOwner     (address indexed owner);\n', '\n', '    function setOwner(address owner_) auth\n', '    {\n', '        owner = owner_;\n', '        LogSetOwner(owner);\n', '    }\n', '}']
['// Copyright (C) QTB Team\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) returns (bool ok);\n', '    function approve( address spender, uint value ) returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract DSMath {\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '}\n', '\n', 'contract QTB is ERC20,DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '\n', '    string   public  symbol;\n', '    string   public  name;\n', '    uint256  public  decimals = 18;\n', '    address  public  owner;\n', '    bool     public  stopped;\n', '    \n', '\n', '\n', '    function QTB(string _symbol,string _name,address _owner) {\n', '        symbol=_symbol;\n', '        name=_name;\n', '        owner=_owner;\n', '    }\n', '\n', '    modifier auth {\n', '        assert (msg.sender==owner);\n', '        _;\n', '    }\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() auth  {\n', '        stopped = true;\n', '    }\n', '    function start() auth  {\n', '        stopped = false;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address src) constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '\n', '    function transfer(address dst, uint wad) stoppable returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '\n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '\n', '        Transfer(msg.sender, dst, wad);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint wad)stoppable returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '\n', '        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '\n', '        Transfer(src, dst, wad);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address guy, uint256 wad) stoppable returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '\n', '        Approval(msg.sender, guy, wad);\n', '\n', '        return true;\n', '    }\n', '    function mint(address dst,uint128 wad) auth stoppable {\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        _supply = add(_supply, wad);\n', '    }\n', '\n', '    event LogSetOwner     (address indexed owner);\n', '\n', '    function setOwner(address owner_) auth\n', '    {\n', '        owner = owner_;\n', '        LogSetOwner(owner);\n', '    }\n', '}']
