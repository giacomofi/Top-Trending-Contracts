['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract MainframeTokenDistribution is Ownable {\n', '\n', '  uint public totalDistributed;\n', '  ERC20 mainframeToken;\n', '\n', '  event TokensDistributed(address receiver, uint amount);\n', '\n', '  constructor(address tokenAddress) public {\n', '    mainframeToken = ERC20(tokenAddress);\n', '  }\n', '\n', '  function distributeTokens(address tokenOwner, address[] recipients, uint[] values) onlyOwner external {\n', '    require(recipients.length == values.length);\n', '    for(uint i = 0; i < recipients.length; i++) {\n', '      if(values[i] > 0) {\n', '        require(mainframeToken.transferFrom(tokenOwner, recipients[i], values[i]));\n', '        emit TokensDistributed(recipients[i], values[i]);\n', '        totalDistributed += values[i];\n', '      }\n', '    }\n', '  }\n', '\n', '  function emergencyERC20Drain(ERC20 token) external onlyOwner {\n', '    // owner can drain tokens that are sent here by mistake\n', '    uint256 amount = token.balanceOf(this);\n', '    token.transfer(owner, amount);\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract MainframeTokenDistribution is Ownable {\n', '\n', '  uint public totalDistributed;\n', '  ERC20 mainframeToken;\n', '\n', '  event TokensDistributed(address receiver, uint amount);\n', '\n', '  constructor(address tokenAddress) public {\n', '    mainframeToken = ERC20(tokenAddress);\n', '  }\n', '\n', '  function distributeTokens(address tokenOwner, address[] recipients, uint[] values) onlyOwner external {\n', '    require(recipients.length == values.length);\n', '    for(uint i = 0; i < recipients.length; i++) {\n', '      if(values[i] > 0) {\n', '        require(mainframeToken.transferFrom(tokenOwner, recipients[i], values[i]));\n', '        emit TokensDistributed(recipients[i], values[i]);\n', '        totalDistributed += values[i];\n', '      }\n', '    }\n', '  }\n', '\n', '  function emergencyERC20Drain(ERC20 token) external onlyOwner {\n', '    // owner can drain tokens that are sent here by mistake\n', '    uint256 amount = token.balanceOf(this);\n', '    token.transfer(owner, amount);\n', '  }\n', '}']
