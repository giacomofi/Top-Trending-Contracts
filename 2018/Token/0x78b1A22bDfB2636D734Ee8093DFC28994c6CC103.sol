['pragma solidity 0.4.21;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '\n', '    /// Constructor\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[this] = totalSupply;                // Give the contract, not the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', '/********************* Landcoin Token *********************/\n', '\n', 'contract LandCoin is owned, TokenERC20 {\n', '\n', '    /************ 0.1 Initialise variables and events ************/\n', '\n', '    uint256 public buyPrice;\n', '    uint256 public icoStartUnix;\n', '    uint256 public icoEndUnix;\n', '    bool public icoOverride;\n', '    bool public withdrawlsEnabled;\n', '\n', '    mapping (address => uint256) public paidIn;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /// Freezing and burning events\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Burn(address indexed from, uint256 value);\n', '    event FundTransfer(address recipient, uint256 amount);\n', '\n', '    /************ 0.2 Constructor ************/\n', '\n', '    /// Initializes contract with initial supply tokens to the creator of the contract\n', '    function LandCoin(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint256 _buyPrice,    //IN WEI. Default: 100000000000000000 (100 finney, or 100 * 10**15)\n', '        uint256 _icoStartUnix,      // Default: 1524182400 (20 April 2018 00:00:00 UTC)\n', '        uint256 _icoEndUnix         // Default: 1526774399 (19 May 2018 23:59:59 UTC)\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {\n', '        buyPrice = _buyPrice;\n', '        icoStartUnix = _icoStartUnix;\n', '        icoEndUnix = _icoEndUnix;\n', '        icoOverride = false;\n', '        withdrawlsEnabled = false;\n', "        // Grant owner allowance to the contract's supply\n", '        allowance[this][owner] = totalSupply;\n', '    }\n', '\n', '    /************ 1. Transfers ************/\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];  // for final check in a couple of lines\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        require(balanceOf[_from] + balanceOf[_to] == previousBalances); // Final check (basically an assertion)\n', '        emit Transfer(_from, _to, _value);                       // Broadcast event       \n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /************ 2. Buying ************/\n', '\n', '    /// Modifier to only allow after ICO has started\n', '    modifier inICOtimeframe() {\n', '        require((now >= icoStartUnix * 1 seconds && now <= icoEndUnix * 1 seconds) || (icoOverride == true));\n', '        _;\n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buy() inICOtimeframe payable public {\n', '        uint amount = msg.value * (10 ** uint256(decimals)) / buyPrice;            // calculates the amount\n', '        _transfer(this, msg.sender, amount);              \t\t\t\t// makes the transfers\n', '        paidIn[msg.sender] += msg.value;\n', '    }\n', '\n', '    /// also make this the default payable function\n', '    function () inICOtimeframe payable public {\n', '        uint amount = msg.value * (10 ** uint256(decimals)) / buyPrice;            // calculates the amount\n', '        _transfer(this, msg.sender, amount);              \t\t\t\t// makes the transfers\n', '        paidIn[msg.sender] += msg.value;\n', '    }\n', '\n', '    /************ 3. Currency Control ************/\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /// @notice Only central mint can burn from their own supply\n', '    function burn(uint256 _value, uint256 _confirmation) onlyOwner public returns (bool success) {\n', "        require(_confirmation==7007);                 // To make sure it's not done by mistake\n", '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', "    /// @notice Allow users to buy tokens for 'newBuyPrice', in wei\n", '    /// @param newBuyPrice Price users can buy from the contract, in wei\n', '    function setPrices(uint256 newBuyPrice) onlyOwner public {\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    /// Run this if ownership transferred\n', '    function setContractAllowance(address allowedAddress, uint256 allowedAmount) onlyOwner public returns (bool success) {\n', '    \trequire(allowedAmount <= totalSupply);\n', '    \tallowance[this][allowedAddress] = allowedAmount;\n', '    \treturn true;\n', '    }\n', '\n', '    /************ 4. Investor Withdrawls ************/\n', '   \n', '   \t/// Function to override ICO dates to allow secondary ICO\n', '    function secondaryICO(bool _icoOverride) onlyOwner public {\n', '    \ticoOverride = _icoOverride;\n', '    }\n', '\n', '    /// Function to allow investors to withdraw ETH\n', '    function enableWithdrawal(bool _withdrawlsEnabled) onlyOwner public {\n', '    \twithdrawlsEnabled = _withdrawlsEnabled;\n', '    }\n', '\n', '     function safeWithdrawal() public {\n', '    \trequire(withdrawlsEnabled);\n', '    \trequire(now > icoEndUnix);\n', '    \tuint256 weiAmount = paidIn[msg.sender]; \t\n', '    \tuint256 purchasedTokenAmount = paidIn[msg.sender] * (10 ** uint256(decimals)) / buyPrice;\n', '\n', "    \t// A tokenholder can't pour back into the system more Landcoin than you have \n", '    \tif(purchasedTokenAmount > balanceOf[msg.sender]) { purchasedTokenAmount = balanceOf[msg.sender]; }\n', '    \t// A tokenholder gets the Eth back for their remaining token max\n', '    \tif(weiAmount > balanceOf[msg.sender] * buyPrice / (10 ** uint256(decimals))) { weiAmount = balanceOf[msg.sender] * buyPrice / (10 ** uint256(decimals)); }\n', '    \t\n', '        if (purchasedTokenAmount > 0 && weiAmount > 0) {\n', '\t        _transfer(msg.sender, this, purchasedTokenAmount);\n', '            if (msg.sender.send(weiAmount)) {\n', '                paidIn[msg.sender] = 0;\n', '                emit FundTransfer(msg.sender, weiAmount);\n', '            } else {\n', '                _transfer(this, msg.sender, purchasedTokenAmount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function withdrawal() onlyOwner public returns (bool success) {\n', '\t\trequire(now > icoEndUnix && !icoOverride);\n', '\t\taddress thisContract = this;\n', '\t\tif (owner == msg.sender) {\n', '            if (msg.sender.send(thisContract.balance)) {\n', '                emit FundTransfer(msg.sender, thisContract.balance);\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        }\n', '    }\n', '\n', '    function manualWithdrawalFallback(address target, uint256 amount) onlyOwner public returns (bool success) {\n', '    \trequire(now > icoEndUnix && !icoOverride);\n', '    \taddress thisContract = this;\n', '    \trequire(amount <= thisContract.balance);\n', '\t\tif (owner == msg.sender) {\n', '\t\t    if (target.send(amount)) {\n', '\t\t        return true;\n', '\t\t    } else {\n', '\t\t        return false;\n', '\t\t    }\n', '        }\n', '    }\n', '}']