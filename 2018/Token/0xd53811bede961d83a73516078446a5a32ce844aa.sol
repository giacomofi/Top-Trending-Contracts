['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SKP-T ERC20 token by Sleekplay.\n', ' *\n', ' * @dev Based on OpenZeppelin framework.\n', ' *\n', ' * Features:\n', ' *\n', ' * * ERC20 compatibility, with token details as properties.\n', ' * * total supply: 6400000000 (initially given to the contract author).\n', ' * * decimals: 18\n', ' * * BurnableToken: some addresses are allowed to burn tokens.\n', ' * * “third-party smart contract trading protection”: transferFrom/approve/allowance methods are present but do nothing.\n', ' * * TimeLock: implemented externally (in TokenTimelock contract)\n', ' */\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract SKPT is BasicToken, BurnableToken, ERC20, Ownable {\n', '\n', '    string public constant name = "SKP-T: Sleekplay Token";\n', '    string public constant symbol = "SKPT";\n', '    uint8 public constant decimals = 18;\n', '    string public constant version = "1.0";\n', '\n', '    uint256 constant INITIAL_SUPPLY_SKPT = 6400000000;\n', '\n', '    /// @dev whether an address is permitted to perform burn operations.\n', '    mapping(address => bool) public isBurner;\n', '\n', '    /**\n', '     * @dev Constructor that:\n', '     * * gives all of existing tokens to the message sender;\n', '     * * initializes the burners (also adding the message sender);\n', '     */\n', '    function SKPT() public {\n', '        totalSupply = INITIAL_SUPPLY_SKPT * (10 ** uint256(decimals));\n', '        balances[msg.sender] = totalSupply;\n', '\n', '        isBurner[msg.sender] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Standard method to comply with ERC20 interface;\n', '     * prevents some Ethereum-contract-initiated operations.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Standard method to comply with ERC20 interface;\n', '     * prevents some Ethereum-contract-initiated operations.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Standard method to comply with ERC20 interface;\n', '     * prevents some Ethereum-contract-initiated operations.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Grant or remove burn permissions. Only owner can do that!\n', '     */\n', '    function grantBurner(address _burner, bool _value) public onlyOwner {\n', '        isBurner[_burner] = _value;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the burner.\n', '     */\n', '    modifier onlyBurner() {\n', '        require(isBurner[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * Only an address listed in `isBurner` can do this.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public onlyBurner {\n', '        super.burn(_value);\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SKP-T ERC20 token by Sleekplay.\n', ' *\n', ' * @dev Based on OpenZeppelin framework.\n', ' *\n', ' * Features:\n', ' *\n', ' * * ERC20 compatibility, with token details as properties.\n', ' * * total supply: 6400000000 (initially given to the contract author).\n', ' * * decimals: 18\n', ' * * BurnableToken: some addresses are allowed to burn tokens.\n', ' * * “third-party smart contract trading protection”: transferFrom/approve/allowance methods are present but do nothing.\n', ' * * TimeLock: implemented externally (in TokenTimelock contract)\n', ' */\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract SKPT is BasicToken, BurnableToken, ERC20, Ownable {\n', '\n', '    string public constant name = "SKP-T: Sleekplay Token";\n', '    string public constant symbol = "SKPT";\n', '    uint8 public constant decimals = 18;\n', '    string public constant version = "1.0";\n', '\n', '    uint256 constant INITIAL_SUPPLY_SKPT = 6400000000;\n', '\n', '    /// @dev whether an address is permitted to perform burn operations.\n', '    mapping(address => bool) public isBurner;\n', '\n', '    /**\n', '     * @dev Constructor that:\n', '     * * gives all of existing tokens to the message sender;\n', '     * * initializes the burners (also adding the message sender);\n', '     */\n', '    function SKPT() public {\n', '        totalSupply = INITIAL_SUPPLY_SKPT * (10 ** uint256(decimals));\n', '        balances[msg.sender] = totalSupply;\n', '\n', '        isBurner[msg.sender] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Standard method to comply with ERC20 interface;\n', '     * prevents some Ethereum-contract-initiated operations.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Standard method to comply with ERC20 interface;\n', '     * prevents some Ethereum-contract-initiated operations.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Standard method to comply with ERC20 interface;\n', '     * prevents some Ethereum-contract-initiated operations.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Grant or remove burn permissions. Only owner can do that!\n', '     */\n', '    function grantBurner(address _burner, bool _value) public onlyOwner {\n', '        isBurner[_burner] = _value;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the burner.\n', '     */\n', '    modifier onlyBurner() {\n', '        require(isBurner[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * Only an address listed in `isBurner` can do this.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public onlyBurner {\n', '        super.burn(_value);\n', '    }\n', '    \n', '}']
