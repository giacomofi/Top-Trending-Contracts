['pragma solidity ^0.4.18;\n', ' \n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', ' \n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', ' \n', '}\n', '\n', ' \n', 'interface IERC20 {\n', '  function totalSupply() public constant returns (uint256 );\n', '  function balanceOf(address _owner) public constant returns (uint256 );\n', '  function transfer(address _to, uint256 _value) public returns (bool );\n', '  function decimals() public constant returns (uint8 decimals);\n', '  //function transferFrom(address _from, address _to, uint256 _value) public returns (bool );\n', '  //function approve(address _spender, uint256 _value) public returns (bool );\n', '  //function allowance(address _owner, address _spender) public constant returns (uint256 );\n', '  //event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  //event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', ' \n', 'contract Airdropper is Ownable {\n', '    \n', '    function batchTransfer(address[] _recipients, uint[] _values, address _tokenAddress) onlyOwner public returns (bool) {\n', '        require( _recipients.length > 0 && _recipients.length == _values.length);\n', ' \n', '        IERC20 token = IERC20(_tokenAddress);\n', '        // uint8 decimals = token.decimals();\n', '\n', '        // uint total = 0;\n', '        // for(uint i = 0; i < _values.length; i++){\n', '        //     total += _values[i];\n', '        // }\n', '        // require(total <= token.balanceOf(this));\n', '        \n', '        for(uint j = 0; j < _recipients.length; j++){\n', '            token.transfer(_recipients[j], _values[j]  );\n', '        }\n', ' \n', '        return true;\n', '    }\n', ' \n', '     function withdrawalToken(address _tokenAddress) onlyOwner public { \n', '        IERC20 token = IERC20(_tokenAddress);\n', '        require(token.transfer(owner, token.balanceOf(this)));\n', '    }\n', '\n', '}']