['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns(uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '\n', '    function approve(address spender, uint256 value) public returns(bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath\n', '    for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns(uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract NECTToken is StandardToken {\n', '    string public constant name = "New Energy Blockchain Token";\n', '    string public constant symbol = "NECT";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant INITIAL_SUPPLY = 3000000000 * (10 ** uint256(decimals));\n', '\n', '    // contributors address\n', '    address public contributorsAddress = 0x00a044F2057d87529966c943556719C1eB3835cc;\n', '    // company address\n', '    address public companyAddress = 0xa1EF425992b8FBd11504d98Aca98653feE3a1beD;\n', '    // market Address \n', '    address public marketAddress = 0xe8Ae5b3754Ed3150f930BFBECD961f4a9456c35B;\n', '    // ICO Address \n', '    address public icoAddress = 0x5451A2dEdFeD0C4625c7b5aefe81Bc52F25169e8;\n', '\n', '    // the share of contributors\n', '    uint8 public constant CONTRIBUTORS_SHARE = 30;\n', '    // the share of company\n', '    uint8 public constant COMPANY_SHARE = 20;\n', '    // the share of market\n', '    uint8 public constant MARKET_SHARE = 30;\n', '    // the share of ICO\n', '    uint8 public constant ICO_SHARE = 20;\n', '    /**\n', '     * Constructor that gives three address all existing tokens.\n', '     */\n', '    constructor() public {\n', '        totalSupply = INITIAL_SUPPLY;\n', '        uint256 valueContributorsAddress = INITIAL_SUPPLY.mul(CONTRIBUTORS_SHARE).div(100);\n', '        balances[contributorsAddress] = valueContributorsAddress;\n', '        emit Transfer(address(0), contributorsAddress, valueContributorsAddress);\n', '\n', '        uint256 valueCompanyAddress = INITIAL_SUPPLY.mul(COMPANY_SHARE).div(100);\n', '        balances[companyAddress] = valueCompanyAddress;\n', '        emit Transfer(address(0), companyAddress, valueCompanyAddress);\n', '\n', '        uint256 valueMarketAddress = INITIAL_SUPPLY.mul(MARKET_SHARE).div(100);\n', '        balances[marketAddress] = valueMarketAddress;\n', '        emit Transfer(address(0), marketAddress, valueMarketAddress);\n', '\n', '        uint256 valueIcoAddress = INITIAL_SUPPLY.mul(ICO_SHARE).div(100);\n', '        balances[icoAddress] = valueIcoAddress;\n', '        emit Transfer(address(0), icoAddress, valueIcoAddress);\n', '\n', '    }\n', '}']