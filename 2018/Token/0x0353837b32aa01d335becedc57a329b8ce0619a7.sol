['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    require(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    require(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '\n', '  function name() public constant returns (string _name);\n', '  function symbol() public constant returns (string _symbol);\n', '  function decimals() public constant returns (uint8 _decimals);\n', '  function totalSupply() public constant returns (uint256 _supply);\n', '\n', '  function approve(address _spender, uint _value) external returns (bool);\n', '  function allowance(address _owner, address _spender) external constant returns (uint); \n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transferFrom(address _from, address _to, uint _value) external returns (bool);\n', '  \n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '}\n', '\n', 'contract ContractReceiver {\n', '  function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract Tacoin is ERC223 {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) internal _allowances;\n', '\n', '  string public name = "Tacoin";\n', '  string public symbol = "TACO";\n', '  uint8 public decimals = 18;\n', '  uint256 public totalSupply = 10000000000000000000000000;\n', '\n', 'function Tacoin (\n', '        uint256 initialSupply, \n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10000000000000000000000000  ** uint256(18);  \n', '        balances[msg.sender] = totalSupply = 10000000000000000000000000;                \n', '        name = tokenName = "Tacoin";                                   \n', '        symbol = tokenSymbol = "TACO";                               \n', '    }\n', '\n', '  // Function to access name of token .\n', '  function name() public constant returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() public constant returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() public constant returns (uint8 _decimals) {\n', '      return decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() public constant returns (uint256 _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '  \n', '  function approve(address _spender, uint _value) external returns (bool) {\n', '        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender].add(_value);\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '  \n', '  }\n', '  function allowance(address _owner, address _spender) external constant returns (uint) {\n', '        return _allowances[_owner][_spender];\n', '    }\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '}\n', '\n', '//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private constant returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        if(length>0) {\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver reciever = ContractReceiver(_to);\n', '    reciever.tokenFallback(msg.sender, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint _value) external returns (bool) {\n', '        if (_allowances[_from][msg.sender] > 0 &&\n', '            _value > 0 &&\n', '            _allowances[_from][msg.sender] >= _value &&\n', '            balances[_from] >= _value) {\n', '            balances[_from] = balances[_from].sub(_value);\n', '            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '  \n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    require(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    require(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '\n', '  function name() public constant returns (string _name);\n', '  function symbol() public constant returns (string _symbol);\n', '  function decimals() public constant returns (uint8 _decimals);\n', '  function totalSupply() public constant returns (uint256 _supply);\n', '\n', '  function approve(address _spender, uint _value) external returns (bool);\n', '  function allowance(address _owner, address _spender) external constant returns (uint); \n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transferFrom(address _from, address _to, uint _value) external returns (bool);\n', '  \n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '}\n', '\n', 'contract ContractReceiver {\n', '  function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract Tacoin is ERC223 {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) internal _allowances;\n', '\n', '  string public name = "Tacoin";\n', '  string public symbol = "TACO";\n', '  uint8 public decimals = 18;\n', '  uint256 public totalSupply = 10000000000000000000000000;\n', '\n', 'function Tacoin (\n', '        uint256 initialSupply, \n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10000000000000000000000000  ** uint256(18);  \n', '        balances[msg.sender] = totalSupply = 10000000000000000000000000;                \n', '        name = tokenName = "Tacoin";                                   \n', '        symbol = tokenSymbol = "TACO";                               \n', '    }\n', '\n', '  // Function to access name of token .\n', '  function name() public constant returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() public constant returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() public constant returns (uint8 _decimals) {\n', '      return decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() public constant returns (uint256 _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '  \n', '  function approve(address _spender, uint _value) external returns (bool) {\n', '        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender].add(_value);\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '  \n', '  }\n', '  function allowance(address _owner, address _spender) external constant returns (uint) {\n', '        return _allowances[_owner][_spender];\n', '    }\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '}\n', '\n', '//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private constant returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        if(length>0) {\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver reciever = ContractReceiver(_to);\n', '    reciever.tokenFallback(msg.sender, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint _value) external returns (bool) {\n', '        if (_allowances[_from][msg.sender] > 0 &&\n', '            _value > 0 &&\n', '            _allowances[_from][msg.sender] >= _value &&\n', '            balances[_from] >= _value) {\n', '            balances[_from] = balances[_from].sub(_value);\n', '            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '  \n', '}']
