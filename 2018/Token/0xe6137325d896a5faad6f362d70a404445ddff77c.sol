['pragma solidity ^0.4.24;\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address _owner) constant public returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract Airdropper\n', '{\n', '  function multisend(address _tokenAddr, address[] addr, uint256[] values) public\n', '  {\n', '    require(addr.length == values.length && addr.length > 0);\n', '    uint256 i=0;\n', '    while(i < addr.length)\n', '    {\n', '      require(addr[i] != address(0));\n', '      require(values[i] > 0);\n', '      require(ERC20(_tokenAddr).transferFrom(msg.sender, addr[i], values[i]));\n', '      i++;\n', '    }\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address _owner) constant public returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract Airdropper\n', '{\n', '  function multisend(address _tokenAddr, address[] addr, uint256[] values) public\n', '  {\n', '    require(addr.length == values.length && addr.length > 0);\n', '    uint256 i=0;\n', '    while(i < addr.length)\n', '    {\n', '      require(addr[i] != address(0));\n', '      require(values[i] > 0);\n', '      require(ERC20(_tokenAddr).transferFrom(msg.sender, addr[i], values[i]));\n', '      i++;\n', '    }\n', '  }\n', '}']
