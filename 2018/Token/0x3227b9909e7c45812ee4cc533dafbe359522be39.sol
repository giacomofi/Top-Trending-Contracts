['pragma solidity ^0.4.24;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', ' \n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', ' \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', ' \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '} \n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', ' \n', '  mapping(address => uint256) balances;\n', ' \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', ' \n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', ' \n', '}\n', ' \n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', ' \n', '  mapping (address => mapping (address => uint256)) allowed;\n', ' \n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', ' \n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', ' \n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', ' \n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', ' \n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', ' \n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', ' \n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /*\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '   */\n', '}\n', ' \n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', '*/\n', ' \n', 'contract BurnableToken is StandardToken {\n', ' \n', '  function burn(uint256 _value) public {\n', '    require(_value > 0);\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(burner, _value);\n', '    emit Transfer(msg.sender, address(0), _value);\n', '}\n', ' \n', '  event Burn(address indexed burner, uint256 indexed value);\n', '}\n', '\n', 'contract TMBToken is BurnableToken {\n', '    \n', '  string public constant name = "Teambrella Token";\n', '    \n', '  string public constant symbol = "TMB";\n', '    \n', '  uint32 public constant decimals = 18;\n', '    \n', '  uint256 public constant INITIAL_SUPPLY = 17500000E18;  // 60% is for sale:  10000000E18 max during the sale + 500000E18 max bonus during the pre-sale\n', '  \n', '  uint256 public constant lockPeriodStart = 1536796740;  // end of sale 2018-09-12 23:59\n', '    \n', '  bool public stopped = true;\n', '  address public owner;\n', '  \n', '  mapping(address => uint256) public unlockTimes;\n', '\n', '  modifier isRunning() {\n', '    if (stopped) {\n', '        if (msg.sender != owner)\n', '            revert();\n', '      }\n', '    _;\n', '  }\n', '\n', '  modifier isNotLocked() {\n', '    // unconditionally unlock everything in 2 years\n', '    \n', '    if (now < lockPeriodStart + 730 days) {\n', '        // add lockedPeriods \n', '        if (now < unlockTimes[msg.sender])\n', '            revert();\n', '      }\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n', '  }\n', '  \n', '  function start() public {\n', '    require(msg.sender == owner);\n', '    stopped = false;\n', '  }\n', '\n', '  function lockAddress(address _addr, uint256 _period) public {\n', '      require(msg.sender == owner);\n', '      require(stopped); // not possible to lock addresses after start of the contract\n', '      unlockTimes[_addr] = lockPeriodStart + _period;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public isRunning isNotLocked returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public isRunning returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public isRunning isNotLocked returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '/*\n', '  function increaseApproval(address _spender, uint256 _addedValue) public isRunning isNotLocked returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public isRunning isNotLocked returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '*/ \n', '  \n', '}\n', '\n', 'contract TMBTokenSale {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    address public multisigOwner;\n', '\n', '    address public multisigFunds;\n', '    address public company;\n', '    address public partners;\n', '    \n', '    // uint256 public constant rate = 1000;\n', '\n', '    uint256 public constant soldPercent = 60;\n', '    uint256 public constant partnersPercent = 5;\n', '    uint256 public constant companyPercent = 35;\n', '\n', '    uint256 public constant softcap = 2000 * 1 ether;\n', '    uint256 public constant presalecap = 2500 * 1 ether;\n', '    uint256 public constant hardcap = 10000 * 1 ether;\n', ' \n', '    uint256 public constant startPresale = 1532304000; // 2018-07-23 00:00\n', '    uint256 public constant endPresale = 1534118340; // 2018-08-12 23:59\n', '\n', '    uint256 public constant startSale = 1534118400; // 2018-08-13 00:00\n', '    uint256 public constant endSale = 1536796740; // 2018-09-12 23:59\n', '\n', '    TMBToken public token = new TMBToken();\n', '\n', '    bool public stoppedSale = false;\n', '    bool public stoppedPresale = false;\n', '\n', '    uint256 public receivedEth = 0;\n', '    uint256 public deliveredEth = 0;\n', '    \n', '    uint256 public issuedTokens;\n', ' \n', '    mapping(address => uint256) public preBalances;\n', '    mapping(address => uint256) public saleBalances;\n', '    \n', '    bool tokensaleFinished = false;\n', '    \n', '    event ReservedPresale(address indexed to, uint256 value);\n', '    event ReservedSale(address indexed to, uint256 value);\n', '    event Issued(address indexed to, uint256 value);\n', '    event Refunded(address indexed to, uint256 value);\n', '\n', '    constructor() public {\n', '        \n', '        multisigOwner = 0x101B8fA4F9fA10B9800aCa7b2f4F4841d24DA48E;\n', '\n', '        multisigFunds = 0xc65484367BdD9265D487d905A5AAe228e9eE1000;\n', '        company = 0x993C5743Fe73a805d125051f77A32cFAaEF08427;\n', '        partners = 0x66885Bf2915b687E37253F8efB50Cc01f9452802;\n', '\n', '    }\n', ' \n', '    modifier isAfterPresale() {\n', '    \trequire(now > endPresale || (stoppedPresale && now > startPresale));\n', '    \t_;\n', '    }\n', '\n', '    modifier isAfterSale() {\n', '    \trequire(now > endSale || (stoppedSale && now > startSale));\n', '    \t_;\n', '    }\n', '\t\n', '    modifier isAboveSoftCap() {\n', '        require(receivedEth >= softcap);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(multisigOwner == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    function() external payable {\n', '      reserveFunds();\n', '    }\n', '\n', '   function reserveFunds() public payable {\n', '       \n', '       uint256 _value = msg.value;\n', '       address _addr = msg.sender;\n', '       \n', '       require (!isContract(_addr));\n', '       require(_value >= 0.01 * 1 ether);\n', '       \n', '       uint256 _totalFundedEth;\n', '       \n', '       if (!stoppedPresale && now > startPresale && now < endPresale)\n', '       {\n', '           _totalFundedEth = preBalances[_addr].add(_value);\n', '           preBalances[_addr] = _totalFundedEth;\n', '           receivedEth = receivedEth.add(_value);\n', '           emit ReservedPresale(_addr, _value);\n', '       }\n', '       else if (!stoppedSale && now > startSale && now < endSale)\n', '       {\n', '           _totalFundedEth = saleBalances[_addr].add(_value);\n', '           saleBalances[_addr] = _totalFundedEth;\n', '           receivedEth = receivedEth.add(_value);\n', '           emit ReservedSale(_addr, _value);\n', '       }\n', '       else\n', '       {\n', '           revert();\n', '       }\n', '    }\n', '\n', '    function stopPresale() public onlyOwner {\n', '        stoppedPresale = true;\n', '    }\n', '    \n', '    function stopSale() public onlyOwner {\n', '        stoppedSale = true;\n', '    }\n', '\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '\t    uint256 size;\n', '\t    if (_addr == 0) return false;\n', '\t    assembly {\n', '\t\t    size := extcodesize(_addr)\n', '\t    }\n', '\t    return size > 0;\n', '    }\n', '\n', '    function issueTokens(address _addr, uint256 _valTokens) internal {\n', '\n', '        token.transfer(_addr, _valTokens);\n', '        issuedTokens = issuedTokens.add(_valTokens);\n', '        emit Issued(_addr, _valTokens);\n', '    }\n', '\n', '    function deliverPresale(address _addr, uint256 _valEth) internal {\n', '\n', '        uint256 _issuedTokens = _valEth * 1200; // _valEth * rate + 20% presale bonus, rate == 1000\n', '        uint256 _newDeliveredEth = deliveredEth.add(_valEth);\n', '        require(_newDeliveredEth < presalecap);\n', '        multisigFunds.transfer(_valEth);\n', '        deliveredEth = _newDeliveredEth;\n', '\n', '        issueTokens(_addr, _issuedTokens);\n', '    }\n', '    \n', '    function deliverSale(address _addr, uint256 _valEth) internal {\n', '\n', '        uint256 _issuedTokens = _valEth * 1000; // _valEth * rate, rate == 1000\n', '        uint256 _newDeliveredEth = deliveredEth.add(_valEth);\n', '        require(_newDeliveredEth < hardcap);\n', '        multisigFunds.transfer(_valEth);\n', '        deliveredEth = _newDeliveredEth;\n', '\n', '        issueTokens(_addr, _issuedTokens);\n', '    }\n', '    \n', '    // everyone is able to withdraw his own money if no softcap\n', '    function refund() public isAfterSale {\n', '        require(receivedEth < softcap);\n', '        uint256 _value = preBalances[msg.sender]; \n', '        _value += saleBalances[msg.sender]; \n', '        if (_value > 0)\n', '        {\n', '            preBalances[msg.sender] = 0;\n', '            saleBalances[msg.sender] = 0; \n', '            msg.sender.transfer(_value);\n', '            emit Refunded(msg.sender, _value);\n', '        }\n', '    }\n', '\n', '    function issueTokensPresale(address _addr, uint256 _val) public onlyOwner isAfterPresale isAboveSoftCap {\n', '\n', '        require(_val >= 0);\n', '        require(!tokensaleFinished);\n', '        \n', '        uint256 _fundedEth = preBalances[_addr];\n', '        if (_fundedEth > 0)\n', '        {\n', '            if (_fundedEth > _val)\n', '            {\n', '                // rollback the rest of funds\n', '                uint256 _refunded = _fundedEth.sub(_val);\n', '                _addr.transfer(_refunded);\n', '                emit Refunded(_addr, _refunded);\n', '                _fundedEth = _val;\n', '            }\n', '\n', '            if (_fundedEth > 0)\n', '            {\n', '                deliverPresale(_addr, _fundedEth);\n', '            }\n', '            preBalances[_addr] = 0;\n', '        }\n', '    }\n', '\n', '    function issueTokensSale(address _addr, uint256 _val) public onlyOwner isAfterSale isAboveSoftCap {\n', '\n', '        require(_val >= 0);\n', '        require(!tokensaleFinished);\n', '        \n', '        uint256 _fundedEth = saleBalances[_addr];\n', '        if (_fundedEth > 0)\n', '        {\n', '            if (_fundedEth > _val)\n', '            {\n', '                // rollback the rest of funds\n', '                uint256 _refunded = _fundedEth.sub(_val);\n', '                _addr.transfer(_refunded);\n', '                emit Refunded(_addr, _refunded);\n', '                _fundedEth = _val;\n', '            }\n', '\n', '            if (_fundedEth > 0)\n', '            {\n', '                deliverSale(_addr, _fundedEth);\n', '            }\n', '            saleBalances[_addr] = 0;\n', '        }\n', '    }\n', '\n', '    function issueTokensPresale(address[] _addrs) public onlyOwner isAfterPresale isAboveSoftCap {\n', '\n', '        require(!tokensaleFinished);\n', '\n', '        for (uint256 i; i < _addrs.length; i++)\n', '        {\n', '            address _addr = _addrs[i];\n', '            uint256 _fundedEth = preBalances[_addr];\n', '            if (_fundedEth > 0)\n', '            {\n', '                deliverPresale(_addr, _fundedEth);\n', '                preBalances[_addr] = 0;\n', '            }            \n', '        }\n', '    }\n', '\n', '    function issueTokensSale(address[] _addrs) public onlyOwner isAfterSale isAboveSoftCap {\n', '\n', '        require(!tokensaleFinished);\n', '\n', '        for (uint256 i; i < _addrs.length; i++)\n', '        {\n', '            address _addr = _addrs[i];\n', '            uint256 _fundedEth = saleBalances[_addr];\n', '            if (_fundedEth > 0)\n', '            {\n', '                deliverSale(_addr, _fundedEth);\n', '                saleBalances[_addr] = 0;\n', '            }            \n', '        }\n', '    }\n', '    \n', '    function refundTokensPresale(address[] _addrs) public onlyOwner isAfterPresale {\n', '\n', '        for (uint256 i; i < _addrs.length; i++)\n', '        {\n', '            address _addr = _addrs[i];\n', '            uint256 _fundedEth = preBalances[_addr];\n', '            if (_fundedEth > 0)\n', '            {\n', '                _addr.transfer(_fundedEth);\n', '                emit Refunded(_addr, _fundedEth);\n', '                preBalances[_addr] = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    function refundTokensSale(address[] _addrs) public onlyOwner isAfterSale {\n', '\n', '        for (uint256 i; i < _addrs.length; i++)\n', '        {\n', '            address _addr = _addrs[i];\n', '            uint256 _fundedEth = saleBalances[_addr];\n', '            if (_fundedEth > 0)\n', '            {\n', '                _addr.transfer(_fundedEth);\n', '                emit Refunded(_addr, _fundedEth);\n', '                saleBalances[_addr] = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    function lockAddress(address _addr, uint256 _period) public onlyOwner {\n', '        token.lockAddress(_addr, _period);\n', '    }\n', '\n', '    function finalize() public onlyOwner isAfterSale isAboveSoftCap {\n', '\n', '        require(!tokensaleFinished);\n', '\n', '        tokensaleFinished = true;\n', '        \n', '        uint256 _soldTokens = issuedTokens;\n', '        \n', '        // transfer tokens to partners\n', '        uint256 _partnersTokens = _soldTokens * partnersPercent / soldPercent;\n', '        issueTokens(partners, _partnersTokens);\n', '\n', '        // transfer tokens to company\n', '        uint256 _companyTokens = _soldTokens * companyPercent / soldPercent;\n', '        issueTokens(company, _companyTokens);\n', '        token.lockAddress(company, 730 days);\n', '\n', '        // burn everything but issued (sold + partners + company)\n', '        uint256 _tokensToBurn = token.balanceOf(this); //token.INITIAL_SUPPLY().sub(issuedTokens);\n', '        token.burn(_tokensToBurn);\n', '        token.start();\n', '    }\n', '}']