['pragma solidity ^0.4.21;\n', '\n', 'contract StandardToken {\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Issuance(address indexed to, uint256 value);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint public totalSupply;\n', '}\n', '\n', 'contract MintableToken is StandardToken {\n', '    address public owner;\n', '\n', '    bool public isMinted = false;\n', '\n', '    function mint(address _to) public {\n', '        assert(msg.sender == owner && !isMinted);\n', '\n', '        balances[_to] = totalSupply;\n', '        isMinted = true;\n', '    }\n', '}\n', '\n', 'contract SafeNetToken is MintableToken {\n', '    string public name = &#39;SafeNet Token&#39;;\n', '    string public symbol = &#39;SNT&#39;;\n', '    uint8 public decimals = 18;\n', '\n', '    function SafeNetToken(uint _totalSupply) public {\n', '        owner = msg.sender;\n', '        totalSupply = _totalSupply;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract StandardToken {\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Issuance(address indexed to, uint256 value);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint public totalSupply;\n', '}\n', '\n', 'contract MintableToken is StandardToken {\n', '    address public owner;\n', '\n', '    bool public isMinted = false;\n', '\n', '    function mint(address _to) public {\n', '        assert(msg.sender == owner && !isMinted);\n', '\n', '        balances[_to] = totalSupply;\n', '        isMinted = true;\n', '    }\n', '}\n', '\n', 'contract SafeNetToken is MintableToken {\n', "    string public name = 'SafeNet Token';\n", "    string public symbol = 'SNT';\n", '    uint8 public decimals = 18;\n', '\n', '    function SafeNetToken(uint _totalSupply) public {\n', '        owner = msg.sender;\n', '        totalSupply = _totalSupply;\n', '    }\n', '}']
