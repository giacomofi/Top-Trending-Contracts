['pragma solidity ^0.4.18;\n', '\n', '/*PTT final suggested version*/\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '       require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 is SafeMath {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '\n', '    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals); \n', '        balanceOf[msg.sender] = totalSupply;                \n', '        name = tokenName;                                   \n', '        symbol = tokenSymbol;  \n', '    }                             \n', '\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0); \n', '        require(balanceOf[_from] >= _value); \n', '        require(balanceOf[_to] + _value > balanceOf[_to]); \n', '        uint previousBalances = SafeMath.safeAdd(balanceOf[_from],balanceOf[_to]); \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value); \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value); \n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances); \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender],_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract MyToken is owned, TokenERC20 {\n', '\n', ' \n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint256) public freezeOf;\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '\n', '    function MyToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               \n', '        require (balanceOf[_from] >= _value);              \n', '        require (balanceOf[_to] + _value > balanceOf[_to]); \n', '        require(!frozenAccount[_from]);                     \n', '        require(!frozenAccount[_to]);                       \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                         \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                           \n', '        Transfer(_from, _to, _value);\n', '    }\n', '    \n', '        function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                \n', '        require(_value <= allowance[_from][msg.sender]);    \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);         \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);   \n', '        totalSupply = SafeMath.safeSub(totalSupply, _value);                             \n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '        function burn(uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);  \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);          \n', '        totalSupply = SafeMath.safeSub(totalSupply, _value);                     \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', ' \n', '       function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    \t// in case someone transfer ether to smart contract, delete if no one do this\n', '\t    function() payable public{}\n', '\t    \n', '        // transfer ether balance to owner\n', '\t    function withdrawEther(uint256 amount) onlyOwner public {\n', '\t\tmsg.sender.transfer(amount);\n', '\t}\n', '\t\n', '\t    // transfer token to owner\n', '        function withdrawMytoken(uint256 amount) onlyOwner public {\n', '        _transfer(this, msg.sender, amount); \n', '        }\n', '        \n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/*PTT final suggested version*/\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '       require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 is SafeMath {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '\n', '    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals); \n', '        balanceOf[msg.sender] = totalSupply;                \n', '        name = tokenName;                                   \n', '        symbol = tokenSymbol;  \n', '    }                             \n', '\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0); \n', '        require(balanceOf[_from] >= _value); \n', '        require(balanceOf[_to] + _value > balanceOf[_to]); \n', '        uint previousBalances = SafeMath.safeAdd(balanceOf[_from],balanceOf[_to]); \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value); \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value); \n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances); \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender],_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract MyToken is owned, TokenERC20 {\n', '\n', ' \n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint256) public freezeOf;\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '\n', '    function MyToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               \n', '        require (balanceOf[_from] >= _value);              \n', '        require (balanceOf[_to] + _value > balanceOf[_to]); \n', '        require(!frozenAccount[_from]);                     \n', '        require(!frozenAccount[_to]);                       \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                         \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                           \n', '        Transfer(_from, _to, _value);\n', '    }\n', '    \n', '        function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                \n', '        require(_value <= allowance[_from][msg.sender]);    \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);         \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);   \n', '        totalSupply = SafeMath.safeSub(totalSupply, _value);                             \n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '        function burn(uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);  \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);          \n', '        totalSupply = SafeMath.safeSub(totalSupply, _value);                     \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', ' \n', '       function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    \t// in case someone transfer ether to smart contract, delete if no one do this\n', '\t    function() payable public{}\n', '\t    \n', '        // transfer ether balance to owner\n', '\t    function withdrawEther(uint256 amount) onlyOwner public {\n', '\t\tmsg.sender.transfer(amount);\n', '\t}\n', '\t\n', '\t    // transfer token to owner\n', '        function withdrawMytoken(uint256 amount) onlyOwner public {\n', '        _transfer(this, msg.sender, amount); \n', '        }\n', '        \n', '}']
