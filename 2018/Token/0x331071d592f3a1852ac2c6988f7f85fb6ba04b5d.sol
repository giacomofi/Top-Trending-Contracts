['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable()public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '   \n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner)public onlyOwner {\n', '        require(newOwner != address(0));      \n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', '* @title ERC20Basic\n', '* @dev Simpler version of ERC20 interface\n', '* @dev https://github.com/ethereum/EIPs/issues/179\n', '*/\n', 'contract ERC20Basic is Ownable {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value)public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', '* @title ERC20 interface\n', '* @dev https://github.com/ethereum/EIPs/issues/20\n', '*/\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value)public returns(bool);\n', '    function approve(address spender, uint256 value)public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    mapping(address => uint256) balances;\n', '\n', '    bool public freeze = false;\n', '    \n', '    address contractICOAddress;\n', '    \n', '    function setContractICOAddress(address ICOAddress) public onlyOwner {\n', '        contractICOAddress = ICOAddress;\n', '    }\n', '\n', '    /**\n', '    * @dev Changes the value of freeze variable.\n', '    */\n', '    function freezeToken()public onlyOwner {\n', '        freeze = !freeze;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called when contract is frozen.\n', '    */\n', '    modifier isNotFrozen(){\n', '        require(!freeze || msg.sender == contractICOAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers tokens to a specified address.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) isNotFrozen public returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the balance of.\n', '    */\n', '    function balanceOf(address _owner)public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    /**\n', '    * @dev Transfers tokens from one address to another.\n', '    * @param _from The address which you want to send tokens from.\n', '    * @param _to The address which you want to transfer to.\n', '    * @param _value The amount of tokens to be transfered.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) isNotFrozen public returns(bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        var _allowance = allowed[_from][msg.sender];\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Approves the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) isNotFrozen public returns (bool) {\n', '        require((_value > 0)&&(_value <= balances[msg.sender]));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner The address which owns the funds.\n', '    * @param _spender The address which will spend the funds.\n', '    */\n', '    function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    \n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '    \n', '    /**\n', '    * @dev Throws if called when minting is finished.\n', '    */\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will recieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    */\n', '    function finishMinting() public onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is MintableToken {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '    function burn(uint _value) isNotFrozen public returns (bool success) {\n', '        require((_value > 0) && (_value <= balances[msg.sender]));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', ' \n', '    event Burn(address indexed burner, uint indexed value);\n', '}\n', '\n', '/**\n', ' * @title SimpleTokenCoin\n', ' * @dev SimpleToken is a standard ERC20 token with some additional functionality\n', ' */\n', 'contract BitcoinCityCoin is BurnableToken {\n', '    \n', '    string public constant name = "Bitcoin City";\n', '    \n', '    string public constant symbol = "BCKEY";\n', '    \n', '    uint32 public constant decimals = 8;\n', '    \n', '    address private contractAddress;\n', '    \n', '    \n', '    /**\n', '    * @dev The BitcoinCityCoin constructor mints tokens to four address.\n', '    */\n', '    function BitcoinCityCoin() public {\n', '       mint(msg.sender, 500000000 * 10**8);\n', '    }\n', '    \n', '    \n', '     /**\n', '    * @dev Sets the address of approveAndCall contract.\n', '    * @param _address The address of approveAndCall contract.\n', '    */\n', '    function setContractAddress (address _address) public onlyOwner {\n', '        contractAddress = _address;\n', '    }\n', '    \n', '    /**\n', '     * @dev Token owner can approve for spender to execute another function.\n', '     * @param tokens Amount of tokens to execute function.\n', '     * @param data Additional data.\n', '     */\n', '    function approveAndCall(uint tokens, bytes data) isNotFrozen public returns (bool success) {\n', '        approve(contractAddress, tokens);\n', '        ApproveAndCallFallBack(contractAddress).receiveApproval(msg.sender, tokens, data);\n', '        return true;\n', '    }\n', '}\n', '\n', 'interface ApproveAndCallFallBack { function receiveApproval(address from, uint256 tokens, bytes data) external; }']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable()public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '   \n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner)public onlyOwner {\n', '        require(newOwner != address(0));      \n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', '* @title ERC20Basic\n', '* @dev Simpler version of ERC20 interface\n', '* @dev https://github.com/ethereum/EIPs/issues/179\n', '*/\n', 'contract ERC20Basic is Ownable {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value)public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', '* @title ERC20 interface\n', '* @dev https://github.com/ethereum/EIPs/issues/20\n', '*/\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value)public returns(bool);\n', '    function approve(address spender, uint256 value)public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    mapping(address => uint256) balances;\n', '\n', '    bool public freeze = false;\n', '    \n', '    address contractICOAddress;\n', '    \n', '    function setContractICOAddress(address ICOAddress) public onlyOwner {\n', '        contractICOAddress = ICOAddress;\n', '    }\n', '\n', '    /**\n', '    * @dev Changes the value of freeze variable.\n', '    */\n', '    function freezeToken()public onlyOwner {\n', '        freeze = !freeze;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called when contract is frozen.\n', '    */\n', '    modifier isNotFrozen(){\n', '        require(!freeze || msg.sender == contractICOAddress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers tokens to a specified address.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) isNotFrozen public returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the balance of.\n', '    */\n', '    function balanceOf(address _owner)public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    /**\n', '    * @dev Transfers tokens from one address to another.\n', '    * @param _from The address which you want to send tokens from.\n', '    * @param _to The address which you want to transfer to.\n', '    * @param _value The amount of tokens to be transfered.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) isNotFrozen public returns(bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        var _allowance = allowed[_from][msg.sender];\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Approves the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) isNotFrozen public returns (bool) {\n', '        require((_value > 0)&&(_value <= balances[msg.sender]));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner The address which owns the funds.\n', '    * @param _spender The address which will spend the funds.\n', '    */\n', '    function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '    \n', '    event Mint(address indexed to, uint256 amount);\n', '    \n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '    \n', '    /**\n', '    * @dev Throws if called when minting is finished.\n', '    */\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will recieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    */\n', '    function finishMinting() public onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is MintableToken {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param _value The amount of token to be burned.\n', '    */\n', '    function burn(uint _value) isNotFrozen public returns (bool success) {\n', '        require((_value > 0) && (_value <= balances[msg.sender]));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', ' \n', '    event Burn(address indexed burner, uint indexed value);\n', '}\n', '\n', '/**\n', ' * @title SimpleTokenCoin\n', ' * @dev SimpleToken is a standard ERC20 token with some additional functionality\n', ' */\n', 'contract BitcoinCityCoin is BurnableToken {\n', '    \n', '    string public constant name = "Bitcoin City";\n', '    \n', '    string public constant symbol = "BCKEY";\n', '    \n', '    uint32 public constant decimals = 8;\n', '    \n', '    address private contractAddress;\n', '    \n', '    \n', '    /**\n', '    * @dev The BitcoinCityCoin constructor mints tokens to four address.\n', '    */\n', '    function BitcoinCityCoin() public {\n', '       mint(msg.sender, 500000000 * 10**8);\n', '    }\n', '    \n', '    \n', '     /**\n', '    * @dev Sets the address of approveAndCall contract.\n', '    * @param _address The address of approveAndCall contract.\n', '    */\n', '    function setContractAddress (address _address) public onlyOwner {\n', '        contractAddress = _address;\n', '    }\n', '    \n', '    /**\n', '     * @dev Token owner can approve for spender to execute another function.\n', '     * @param tokens Amount of tokens to execute function.\n', '     * @param data Additional data.\n', '     */\n', '    function approveAndCall(uint tokens, bytes data) isNotFrozen public returns (bool success) {\n', '        approve(contractAddress, tokens);\n', '        ApproveAndCallFallBack(contractAddress).receiveApproval(msg.sender, tokens, data);\n', '        return true;\n', '    }\n', '}\n', '\n', 'interface ApproveAndCallFallBack { function receiveApproval(address from, uint256 tokens, bytes data) external; }']
