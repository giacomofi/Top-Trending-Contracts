['pragma solidity ^0.4.23;\n', '\n', 'contract ERC20Interface {\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address _who) public view returns (uint256);\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * support ERC677\n', ' * reference: https://github.com/ethereum/EIPs/issues/677\n', ' * |--------------|            |-----------------------|            |-------------------------|\n', ' * |    Sender    |            | ERC677SenderInterface |            | ERC677ReceiverInterface |\n', ' * |--------------|            |-----------------------|            |-------------------------|\n', ' *        |       transferAndCall()        |                                      |\n', ' *        |------------------------------->|            tokenFallback()           |\n', ' *        |                                |------------------------------------->|\n', ' *        |                                |                                      |\n', ' */\n', 'contract ERC677ReceiverInterface {\n', '    function tokenFallback(address _sender, uint256 _value, bytes _extraData) \n', '        public returns (bool);\n', '}\n', '\n', 'contract ERC677SenderInterface {\n', '    function transferAndCall(address _recipient, uint256 _value, bytes _extraData) \n', '        public returns (bool);\n', '}\n', '\n', '/**\n', ' *    __             ___      _       \n', ' *   /__\\_ _  __ _  / __\\___ (_)_ __  \n', " *  /_\\/ _` |/ _` |/ /  / _ \\| | '_ \\ \n", ' * //_| (_| | (_| / /__| (_) | | | | |\n', ' * \\__/\\__, |\\__, \\____/\\___/|_|_| |_|\n', ' *     |___/ |___/                    \n', ' * Egg Coin is an internal token that play game developed by LEGG team.\n', ' * Actually, this token has no total supply limit, when minting, the total supply will increase.\n', ' * */\n', '\n', 'contract EggCoin is ERC20Interface, ERC677SenderInterface {\n', '    \n', '    using SafeMath for *;\n', '    \n', '    constructor()\n', '        public\n', '    {\n', '        owner_ = msg.sender;\n', '        // no supply any token after deploying contract.\n', '        totalSupply_ = 0;\n', '    }\n', '    \n', '    address public owner_;\n', '    \n', '    string public name = "Egg Coin";\n', '    string public symbol = "EGG";\n', '    uint8 public decimals = 18;\n', '    \n', '    mapping(address => uint256) private balances_;\n', '    mapping(address => mapping(address => uint256)) private allowed_;\n', '    uint256 private totalSupply_;\n', ' \n', '    /**\n', '     *                   _ _  __ _               \n', '     *   /\\/\\   ___   __| (_)/ _(_) ___ _ __ ___ \n', "     *  /    \\ / _ \\ / _` | | |_| |/ _ \\ '__/ __|\n", '     * / /\\/\\ \\ (_) | (_| | |  _| |  __/ |  \\__ \\\n', '     * \\/    \\/\\___/ \\__,_|_|_| |_|\\___|_|  |___/\n', '     * \n', '     * */   \n', '     \n', '    modifier onlyOwner(\n', '        address _address\n', '    )\n', '    {\n', '        require(_address == owner_, "This action not allowed because of permission.");\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     *     __                 _       \n', '     *    /__\\_   _____ _ __ | |_ ___   \n', "     *   /_\\ \\ \\ / / _ \\ '_ \\| __/ __|\n", '     *  //__  \\ V /  __/ | | | |_\\__ \\\n', '     *  \\__/   \\_/ \\___|_| |_|\\__|___/\n', '     * */\n', '    event Mint(\n', '        address miner,\n', '        uint256 totalSupply\n', '    );\n', '    \n', '    event TransferOwnership(\n', '        address newOwner\n', '    );\n', '    \n', '    /**\n', '     *      __  __    ___ ____   ___      ___                 _   _                 \n', '     *     /__\\/__\\  / __\\___ \\ / _ \\    / __\\   _ _ __   ___| |_(_) ___  _ __  ___  \n', "     *    /_\\ / \\// / /    __) | | | |  / _\\| | | | '_ \\ / __| __| |/ _ \\| '_ \\/ __|\n", '     *   //__/ _  \\/ /___ / __/| |_| | / /  | |_| | | | | (__| |_| | (_) | | | \\__ \\\n', '     *   \\__/\\/ \\_/\\____/|_____|\\___/  \\/    \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|___/\n', '     *  ERC20 Functions\n', '     * */\n', '     \n', '    function totalSupply()\n', '        view\n', '        public\n', '        returns\n', '        (uint256)\n', '    {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    function balanceOf(\n', '        address _address\n', '    )\n', '        view\n', '        public \n', '        returns\n', '        (uint256)\n', '    {\n', '        return balances_[_address];\n', '    }\n', '    \n', '    function allowance(\n', '        address _who,\n', '        address _spender\n', '    )\n', '        view\n', '        public\n', '        returns\n', '        (uint256)\n', '    {\n', '        return allowed_[_who][_spender];\n', '    }\n', '    \n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns\n', '        (bool)\n', '    {\n', '        require(balances_[msg.sender] >= _value, "Insufficient balance");\n', '        require(_to != address(0), "Don\'t burn the token please!");\n', '        \n', '        balances_[msg.sender] = balances_[msg.sender].sub(_value);\n', '        balances_[_to] = balances_[_to].add(_value);\n', '        \n', '        emit Transfer(\n', '            msg.sender,\n', '            _to,\n', '            _value\n', '        );\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(\n', '        address _spender, \n', '        uint256 _value\n', '    ) \n', '        public \n', '        returns \n', '        (bool)\n', '    {\n', '        allowed_[msg.sender][_spender] = _value;\n', '        emit Approval(\n', '            msg.sender,\n', '            _spender,\n', '            _value\n', '        );\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(\n', '        address _from, \n', '        address _to,\n', '        uint256 _value\n', '    ) \n', '        public \n', '        returns \n', '        (bool)\n', '    {\n', '        require(balances_[_from] >= _value, "Owner Insufficient balance");\n', '        require(allowed_[_from][msg.sender] >= _value, "Spender Insufficient balance");\n', '        require(_to != address(0), "Don\'t burn the coin.");\n', '        \n', '        balances_[_from] = balances_[_from].sub(_value);\n', '        balances_[_to] = balances_[_to].add(_value);\n', '        allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\n', '        \n', '        emit Transfer(\n', '            _from,\n', '            _to,\n', '            _value\n', '        );\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addValue\n', '    )\n', '        public\n', '        returns\n', '        (bool)\n', '    {\n', '        allowed_[msg.sender][_spender] = \n', '            allowed_[msg.sender][_spender].add(_addValue);\n', '        \n', '        emit Approval(\n', '            msg.sender,\n', '            _spender,\n', '            allowed_[msg.sender][_spender]\n', '        );\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _substractValue\n', '    )\n', '        public\n', '        returns\n', '        (bool)\n', '    {\n', '        uint256 _oldValue = allowed_[msg.sender][_spender];\n', '        if(_oldValue >= _substractValue) {\n', '            allowed_[msg.sender][_spender] = _oldValue.sub(_substractValue);\n', '        } \n', '        else {\n', '            allowed_[msg.sender][_spender] = 0;    \n', '        }\n', '        \n', '        emit Approval(\n', '            msg.sender,\n', '            _spender,\n', '            allowed_[msg.sender][_spender]\n', '        );\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev ERC677 support\n', '     * \n', '     * */\n', '    function transferAndCall(address _recipient,\n', '                    uint256 _value,\n', '                    bytes _extraData)\n', '        public\n', '        returns\n', '        (bool)\n', '    {\n', '        transfer(_recipient, _value);\n', '        if(isContract(_recipient)) {\n', '            require(ERC677ReceiverInterface(_recipient).tokenFallback(msg.sender, _value, _extraData));\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint len;\n', '        assembly {\n', '            len := extcodesize(_addr)\n', '        }\n', '        return len > 0;\n', '    }\n', '    \n', '    /**\n', '     \n', '     *    ___                                            _       \n', '     *   /___\\__      ___ __   ___ _ __       ___  _ __ | |_   _ \n', "     *  //  //\\ \\ /\\ / / '_ \\ / _ \\ '__|____ / _ \\| '_ \\| | | | |\n", '     * / \\_//  \\ V  V /| | | |  __/ | |_____| (_) | | | | | |_| |\n', '     * \\___/    \\_/\\_/ |_| |_|\\___|_|        \\___/|_| |_|_|\\__, |\n', '     *                                                     |___/                                               \n', '     * The functions that owner can call.\n', '     */\n', '     \n', '    function transferOwnership(\n', '        address _newOwner\n', '    )\n', '        public\n', '        onlyOwner(msg.sender)\n', '    {\n', '        owner_ = _newOwner;\n', '        emit TransferOwnership(_newOwner);\n', '    }\n', '    \n', '    function mint(\n', '        uint256 _amount\n', '    )\n', '        public\n', '        onlyOwner(msg.sender)\n', '    {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances_[msg.sender] = balances_[msg.sender].add(_amount);\n', '        emit Transfer(\n', '            address(0),\n', '            msg.sender,\n', '            _amount\n', '        );\n', '    }\n', '}\n', '\n', '/**\n', ' *   __        __                      _   _     \n', '    / _\\ __ _ / _| ___ _ __ ___   __ _| |_| |__  \n', "    \\ \\ / _` | |_ / _ \\ '_ ` _ \\ / _` | __| '_ \\ \n", '    _\\ \\ (_| |  _|  __/ | | | | | (_| | |_| | | |\n', '    \\__/\\__,_|_|  \\___|_| |_| |_|\\__,_|\\__|_| |_|\n', '      \n', '    SafeMath library, thanks to openzeppelin solidity.\n', '    https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' * */\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}']