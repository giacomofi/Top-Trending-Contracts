['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author OpenZeppelin math/SafeMath.sol\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is\n', '     * greater than minuend).\n', '     */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        assert(_b <= _a);\n', '        return _a - _b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        c = _a + _b;\n', '        assert(c >= _a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @author OpenZeppelin ownership/Ownable.sol\n', ' * @dev The Ownable contract has an owner address, and provides basic\n', ' * authorization control functions, this simplifies the implementation of\n', ' * "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract\n', '     * to the sender account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a\n', '     * newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @author OpenZeppelin lifecycle/Pausable.sol\n', ' * @dev Base contract which allows children to implement an emergency stop\n', ' * mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    bool public paused = false;\n', '\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not\n', '     * paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is\n', '     * paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Freezable\n', ' * @dev Base contract which allows children to freeze account.\n', ' */\n', 'contract Freezable is Ownable {\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event Frozen(address target, bool frozen);\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the target is not\n', '     * frozen.\n', '     */\n', '    modifier whenNotFrozen(address target) {\n', '        require(!frozenAccount[target]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice `freeze? Prevent | Allow` `target` from sending & receiving\n', '     * tokens\n', '     * @param target Address to be frozen\n', '     * @param freeze either to freeze it or not\n', '     */\n', '    function freezeAccount(address target, bool freeze) public onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        emit Frozen(target, freeze);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @author OpenZeppelin token/ERC20/ERC20.sol\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _who) public view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public view returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public returns (bool);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @author OpenZeppelin token/ERC20/StandardToken.sol\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/\n', ' * master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a\n', '     * spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for\n', '     * the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens\n', '     * on behalf of msg.sender. Beware that changing an allowance with this\n', '     * method brings the risk that someone may use both the old and the new\n', '     * allowance by unfortunate transaction ordering. One possible solution to\n', '     * mitigate this race condition is to first reduce the spender&#39;s allowance\n', '     * to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable, Freezable & Burnable Token\n', ' * @author OpenZeppelin token/ERC20/PausableToken.sol\n', ' * @author OpenZeppelin token/ERC20/BurnableToken.sol\n', ' * @dev StandardToken modified with pausable transfers.\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract Token is StandardToken, Pausable, Freezable {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint8 public decimals = 18;\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        whenNotFrozen(msg.sender)\n', '        whenNotFrozen(_to)\n', '        returns (bool)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        whenNotFrozen(msg.sender)\n', '        returns (bool)\n', '    {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        whenNotFrozen(msg.sender)\n', '        whenNotFrozen(_from)\n', '        whenNotFrozen(_to)\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public onlyOwner whenNotPaused {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be\n', '        // an assertion failure\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, address(0), _value);\n', '    }\n', '}\n', '\n', '\n', 'contract BIANGToken is Token {\n', '    constructor() public {\n', '        // Set the name for display purposes\n', '        name = "Biang Biang Mian";\n', '        // Set the symbol for display purposes\n', '        symbol = "BIANG";\n', '        // Update total supply with the decimal amount\n', '        totalSupply_ = 100000000 * 10 ** uint256(decimals);\n', '        // Give the creator all initial tokens\n', '        balances[msg.sender] = totalSupply_;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author OpenZeppelin math/SafeMath.sol\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is\n', '     * greater than minuend).\n', '     */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        assert(_b <= _a);\n', '        return _a - _b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        c = _a + _b;\n', '        assert(c >= _a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @author OpenZeppelin ownership/Ownable.sol\n', ' * @dev The Ownable contract has an owner address, and provides basic\n', ' * authorization control functions, this simplifies the implementation of\n', ' * "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract\n', '     * to the sender account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a\n', '     * newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @author OpenZeppelin lifecycle/Pausable.sol\n', ' * @dev Base contract which allows children to implement an emergency stop\n', ' * mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    bool public paused = false;\n', '\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not\n', '     * paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is\n', '     * paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Freezable\n', ' * @dev Base contract which allows children to freeze account.\n', ' */\n', 'contract Freezable is Ownable {\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event Frozen(address target, bool frozen);\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the target is not\n', '     * frozen.\n', '     */\n', '    modifier whenNotFrozen(address target) {\n', '        require(!frozenAccount[target]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice `freeze? Prevent | Allow` `target` from sending & receiving\n', '     * tokens\n', '     * @param target Address to be frozen\n', '     * @param freeze either to freeze it or not\n', '     */\n', '    function freezeAccount(address target, bool freeze) public onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        emit Frozen(target, freeze);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @author OpenZeppelin token/ERC20/ERC20.sol\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _who) public view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public view returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public returns (bool);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @author OpenZeppelin token/ERC20/StandardToken.sol\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/\n', ' * master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a\n', '     * spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for\n', '     * the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens\n', '     * on behalf of msg.sender. Beware that changing an allowance with this\n', '     * method brings the risk that someone may use both the old and the new\n', '     * allowance by unfortunate transaction ordering. One possible solution to\n', "     * mitigate this race condition is to first reduce the spender's allowance\n", '     * to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable, Freezable & Burnable Token\n', ' * @author OpenZeppelin token/ERC20/PausableToken.sol\n', ' * @author OpenZeppelin token/ERC20/BurnableToken.sol\n', ' * @dev StandardToken modified with pausable transfers.\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract Token is StandardToken, Pausable, Freezable {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint8 public decimals = 18;\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        whenNotFrozen(msg.sender)\n', '        whenNotFrozen(_to)\n', '        returns (bool)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function approve(\n', '        address _spender,\n', '        uint256 _value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        whenNotFrozen(msg.sender)\n', '        returns (bool)\n', '    {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        whenNotFrozen(msg.sender)\n', '        whenNotFrozen(_from)\n', '        whenNotFrozen(_to)\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public onlyOwner whenNotPaused {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be\n", '        // an assertion failure\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, address(0), _value);\n', '    }\n', '}\n', '\n', '\n', 'contract BIANGToken is Token {\n', '    constructor() public {\n', '        // Set the name for display purposes\n', '        name = "Biang Biang Mian";\n', '        // Set the symbol for display purposes\n', '        symbol = "BIANG";\n', '        // Update total supply with the decimal amount\n', '        totalSupply_ = 100000000 * 10 ** uint256(decimals);\n', '        // Give the creator all initial tokens\n', '        balances[msg.sender] = totalSupply_;\n', '    }\n', '}']
