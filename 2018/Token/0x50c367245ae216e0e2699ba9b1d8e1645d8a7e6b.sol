['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract BlockchainToken is StandardToken, Ownable {\n', '\n', '    string public constant name = &#39;Blockchain Token 2.0&#39;;\n', '\n', '    string public constant symbol = &#39;BCT&#39;;\n', '\n', '    uint32 public constant decimals = 18;\n', '\n', '    /**\n', '     *  how many USD cents for 1 * 10^18 token\n', '     */\n', '    uint public price = 210;\n', '\n', '    function setPrice(uint _price) onlyOwner public {\n', '        price = _price;\n', '    }\n', '\n', '    uint256 public INITIAL_SUPPLY = 21000000 * 1 ether;\n', '\n', '    /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier hasMintPermission() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '    {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _addr The address that will have _amount of tokens burned\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(\n', '        address _addr,\n', '        uint256 _value\n', '    )\n', '    public onlyOwner\n', '    {\n', '        _burn(_addr, _value);\n', '    }\n', '\n', '    function _burn(\n', '        address _who,\n', '        uint256 _value\n', '    )\n', '    internal\n', '    {\n', '        require(_value <= balances[_who]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() public onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract WealthBuilderToken is MintableToken {\n', '\n', '    string public name = &#39;Wealth Builder Token&#39;;\n', '\n', '    string public symbol = &#39;WBT&#39;;\n', '\n', '    uint32 public decimals = 18;\n', '\n', '    /**\n', '     *  how many {tokens*10^(-18)} get per 1wei\n', '     */\n', '    uint public rate = 10 ** 7;\n', '    /**\n', '     *  multiplicator for rate\n', '     */\n', '    uint public mrate = 10 ** 7;\n', '\n', '    function setRate(uint _rate) onlyOwner public {\n', '        rate = _rate;\n', '    }\n', '\n', '}\n', '\n', 'contract Data is Ownable {\n', '\n', '    // node => its parent\n', '    mapping (address => address) private parent;\n', '\n', '    // node => its status\n', '    mapping (address => uint8) public statuses;\n', '\n', '    // node => sum of all his child deposits in USD cents\n', '    mapping (address => uint) public referralDeposits;\n', '\n', '    // client => balance in wei*10^(-6) available for withdrawal\n', '    mapping(address => uint256) private balances;\n', '\n', '    // investor => balance in wei*10^(-6) available for withdrawal\n', '    mapping(address => uint256) private investorBalances;\n', '\n', '    function parentOf(address _addr) public constant returns (address) {\n', '        return parent[_addr];\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint256) {\n', '        return balances[_addr] / 1000000;\n', '    }\n', '\n', '    function investorBalanceOf(address _addr) public constant returns (uint256) {\n', '        return investorBalances[_addr] / 1000000;\n', '    }\n', '\n', '    /**\n', '     * @dev The Data constructor to set up the first depositer\n', '     */\n', '    constructor() public {\n', '        // DirectorOfRegion - 7\n', '        statuses[msg.sender] = 7;\n', '    }\n', '\n', '    function addBalance(address _addr, uint256 amount) onlyOwner public {\n', '        balances[_addr] += amount;\n', '    }\n', '\n', '    function subtrBalance(address _addr, uint256 amount) onlyOwner public {\n', '        require(balances[_addr] >= amount);\n', '        balances[_addr] -= amount;\n', '    }\n', '\n', '    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n', '        investorBalances[_addr] += amount;\n', '    }\n', '\n', '    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n', '        require(investorBalances[_addr] >= amount);\n', '        investorBalances[_addr] -= amount;\n', '    }\n', '\n', '    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {\n', '        referralDeposits[_addr] += amount;\n', '    }\n', '\n', '    function subtrReferralDeposit(address _addr, uint256 amount) onlyOwner public {\n', '        referralDeposits[_addr] -= amount;\n', '    }\n', '\n', '    function setStatus(address _addr, uint8 _status) onlyOwner public {\n', '        statuses[_addr] = _status;\n', '    }\n', '\n', '    function setParent(address _addr, address _parent) onlyOwner public {\n', '        parent[_addr] = _parent;\n', '    }\n', '\n', '}\n', '\n', 'contract Declaration {\n', '\n', '    // threshold in USD => status\n', '    mapping (uint => uint8) statusThreshold;\n', '\n', '    // status => (depositsNumber => percentage / 10)\n', '    mapping (uint8 => mapping (uint16 => uint256)) feeDistribution;\n', '\n', '    // status thresholds in USD\n', '    uint[8] thresholds = [\n', '    0, 5000, 35000, 150000, 500000, 2500000, 5000000, 10000000\n', '    ];\n', '\n', '    uint[5] referralFees = [50, 30, 20, 10, 5];\n', '    uint[5] serviceFees = [25, 20, 15, 10, 5];\n', '\n', '\n', '    /**\n', '     * @dev The Declaration constructor to define some constants\n', '     */\n', '    constructor() public {\n', '        setFeeDistributionsAndStatusThresholds();\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set up fee distribution & status thresholds\n', '     */\n', '    function setFeeDistributionsAndStatusThresholds() private {\n', '        // Agent - 0\n', '        setFeeDistributionAndStatusThreshold(0, [uint16(120), uint16(80), uint16(50), uint16(20), uint16(10)], thresholds[0]);\n', '        // SilverAgent - 1\n', '        setFeeDistributionAndStatusThreshold(1, [uint16(160), uint16(100), uint16(60), uint16(30), uint16(20)], thresholds[1]);\n', '        // Manager - 2\n', '        setFeeDistributionAndStatusThreshold(2, [uint16(200), uint16(120), uint16(80), uint16(40), uint16(25)], thresholds[2]);\n', '        // ManagerOfGroup - 3\n', '        setFeeDistributionAndStatusThreshold(3, [uint16(250), uint16(150), uint16(100), uint16(50), uint16(30)], thresholds[3]);\n', '        // ManagerOfRegion - 4\n', '        setFeeDistributionAndStatusThreshold(4, [300, 180, 120, 60, 35], thresholds[4]);\n', '        // Director - 5\n', '        setFeeDistributionAndStatusThreshold(5, [350, 210, 140, 70, 40], thresholds[5]);\n', '        // DirectorOfGroup - 6\n', '        setFeeDistributionAndStatusThreshold(6, [400, 240, 160, 80, 45], thresholds[6]);\n', '        // DirectorOfRegion - 7\n', '        setFeeDistributionAndStatusThreshold(7, [500, 300, 200, 100, 50], thresholds[7]);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set up specific fee and status threshold\n', '     * @param _st The status to set up for\n', '     * @param _percentages Array of pecentages, which should go to member\n', '     * @param _threshold The minimum amount of sum of children deposits to get\n', '     *                   the status _st\n', '     */\n', '    function setFeeDistributionAndStatusThreshold(\n', '        uint8 _st,\n', '        uint16[5] _percentages,\n', '        uint _threshold\n', '    )\n', '    private\n', '    {\n', '        statusThreshold[_threshold] = _st;\n', '        for (uint8 i = 0; i < _percentages.length; i++) {\n', '            feeDistribution[_st][i] = _percentages[i];\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract Referral is Declaration, Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    // reference to WBT token contract\n', '    WealthBuilderToken private wbtToken;\n', '\n', '    // reference to BCT2.0 token contract\n', '    BlockchainToken private bctToken;\n', '\n', '    // reference to data contract\n', '    Data private data;\n', '\n', '    /**\n', '     *  how many USD cents get per ETH\n', '     */\n', '    uint public ethUsdRate;\n', '\n', '    /**\n', '     * @dev The Referral constructor to set up the first depositer,\n', '     * reference to system wbt token, bct token, data and set ethUsdRate\n', '     */\n', '    constructor(\n', '        uint _ethUsdRate,\n', '        address _wbtToken,\n', '        address _bctToken,\n', '        address _data\n', '    )\n', '    public\n', '    {\n', '        ethUsdRate = _ethUsdRate;\n', '\n', '        // instantiate wbtToken & data contracts\n', '        wbtToken = WealthBuilderToken(_wbtToken);\n', '        bctToken = BlockchainToken(_bctToken);\n', '        data = Data(_data);\n', '    }\n', '\n', '    /**\n', '     * @dev Callback function\n', '     */\n', '    function() payable public {\n', '    }\n', '\n', '    /**\n', '     * @dev invest wbt token function\n', '     * @param _client to transfer WBT token\n', '     * @param _depositsCount num of the deposit\n', '     */\n', '    function invest(\n', '        address _client,\n', '        uint8 _depositsCount\n', '    )\n', '    payable public\n', '    {\n', '        uint amount = msg.value;\n', '\n', '        // if less then 5 deposits\n', '        if (_depositsCount < 5) {\n', '\n', '            uint serviceFee;\n', '\n', '            serviceFee = amount * serviceFees[_depositsCount];\n', '\n', '            uint referralFee = amount * referralFees[_depositsCount];\n', '\n', '            // distribute deposit fee among users above on the branch & update users&#39; statuses\n', '            distribute(data.parentOf(_client), 0, _depositsCount, amount);\n', '\n', '            // update balance & number of deposits of user\n', '            uint active = (amount * 100).sub(referralFee).sub(serviceFee);\n', '\n', '            wbtToken.mint(_client, active / 100 * wbtToken.rate() / wbtToken.mrate());\n', '\n', '            // update owner`s balance\n', '            data.addBalance(owner, serviceFee * 10000);\n', '        } else {\n', '            wbtToken.mint(_client, amount * wbtToken.rate() / wbtToken.mrate());\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev invest bct token function\n', '     * @param _client to transfer BCT token\n', '     */\n', '    function investBct(\n', '        address _client\n', '    )\n', '    public payable\n', '    {\n', '        uint amount = msg.value;\n', '        // distribute deposit fee among users above on the branch & update users&#39; statuses\n', '        distribute(data.parentOf(_client), 0, 0, amount);\n', '\n', '        bctToken.transfer(_client, amount * ethUsdRate / bctToken.price());\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Recursively distribute deposit fee between parents\n', '     * @param _node Parent address\n', '     * @param _prevPercentage The percentage for previous parent\n', '     * @param _depositsCount Count of depositer deposits\n', '     * @param _amount The amount of deposit\n', '     */\n', '    function distribute(\n', '        address _node,\n', '        uint _prevPercentage,\n', '        uint8 _depositsCount,\n', '        uint _amount\n', '    )\n', '    private\n', '    {\n', '        address node = _node;\n', '        uint prevPercentage = _prevPercentage;\n', '\n', '        // distribute deposit fee among users above on the branch & update users&#39; statuses\n', '        while(node != address(0)) {\n', '            uint8 status = data.statuses(node);\n', '\n', '            // count fee percentage of current node\n', '            uint nodePercentage = feeDistribution[status][_depositsCount];\n', '            uint percentage = nodePercentage.sub(prevPercentage);\n', '            data.addBalance(node, _amount * percentage * 1000);\n', '\n', '            //update refferals sum amount\n', '            data.addReferralDeposit(node, _amount * ethUsdRate / 10**18);\n', '\n', '            //update status\n', '            updateStatus(node, status);\n', '\n', '            node = data.parentOf(node);\n', '            prevPercentage = nodePercentage;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Update node status if children sum amount is enough\n', '     * @param _node Node address\n', '     * @param _status Node current status\n', '     */\n', '    function updateStatus(\n', '        address _node,\n', '        uint8 _status\n', '    )\n', '    private\n', '    {\n', '        uint refDep = data.referralDeposits(_node);\n', '\n', '        for (uint i = thresholds.length - 1; i > _status; i--) {\n', '            uint threshold = thresholds[i] * 100;\n', '\n', '            if (refDep >= threshold) {\n', '                data.setStatus(_node, statusThreshold[thresholds[i]]);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set wbtToken exchange rate\n', '     * @param _rate wbt/eth rate\n', '     */\n', '    function setRate(\n', '        uint _rate\n', '    )\n', '    onlyOwner public\n', '    {\n', '        wbtToken.setRate(_rate);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set bctToken price\n', '     * @param _price bct/usd rate\n', '     */\n', '    function setPrice(\n', '        uint _price\n', '    )\n', '    onlyOwner public\n', '    {\n', '        bctToken.setPrice(_price);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set ETH exchange rate\n', '     * @param _ethUsdRate eth/usd rate\n', '     */\n', '    function setEthUsdRate(\n', '        uint _ethUsdRate\n', '    )\n', '    onlyOwner public\n', '    {\n', '        ethUsdRate = _ethUsdRate;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Add new child\n', '     * @param _inviter parent\n', '     * @param _invitee child\n', '     */\n', '    function invite(\n', '        address _inviter,\n', '        address _invitee\n', '    )\n', '    public onlyOwner\n', '    {\n', '        data.setParent(_invitee, _inviter);\n', '        // Agent - 0\n', '        data.setStatus(_invitee, 0);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set _status for _addr\n', '     * @param _addr address\n', '     * @param _status ref. status\n', '     */\n', '    function setStatus(\n', '        address _addr,\n', '        uint8 _status\n', '    )\n', '    public onlyOwner\n', '    {\n', '        data.setStatus(_addr, _status);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Withdraw _amount for _addr\n', '     * @param _addr withdrawal address\n', '     * @param _amount withdrawal amount\n', '     * @param investor is investor\n', '     */\n', '    function withdraw(\n', '        address _addr,\n', '        uint256 _amount,\n', '        bool investor\n', '    )\n', '        public onlyOwner\n', '    {\n', '        uint amount = investor ? data.investorBalanceOf(_addr) : data.balanceOf(_addr);\n', '        require(amount >= _amount && address(this).balance >= _amount);\n', '\n', '        if (investor) {\n', '            data.subtrInvestorBalance(_addr, _amount * 1000000);\n', '        } else {\n', '            data.subtrBalance(_addr, _amount * 1000000);\n', '        }\n', '\n', '        _addr.transfer(_amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Withdraw contract balance to _addr\n', '     * @param _addr withdrawal address\n', '     */\n', '    function withdrawOwner(\n', '        address _addr,\n', '        uint256 _amount\n', '    )\n', '    public onlyOwner\n', '    {\n', '        require(address(this).balance >= _amount);\n', '        _addr.transfer(_amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Withdraw corresponding amount of ETH to _addr and burn _value tokens\n', '     * @param _addr buyer address\n', '     * @param _amount amount of tokens to buy\n', '     */\n', '    function transferBctToken(\n', '        address _addr,\n', '        uint _amount\n', '    )\n', '    onlyOwner public\n', '    {\n', '        require(bctToken.balanceOf(this) >= _amount);\n', '        bctToken.transfer(_addr, _amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Withdraw corresponding amount of ETH to _addr and burn _value tokens\n', '     * @param _addr withdrawal address\n', '     * @param _amount amount of tokens to sell\n', '     */\n', '    function withdrawWbtToken(\n', '        address _addr,\n', '        uint256 _amount\n', '    )\n', '    onlyOwner public\n', '    {\n', '        wbtToken.burn(_addr, _amount);\n', '        uint256 etherValue = _amount * wbtToken.mrate() / wbtToken.rate();\n', '        _addr.transfer(etherValue);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer ownership of wbtToken contract to _addr\n', '     * @param _addr address\n', '     */\n', '    function transferTokenOwnership(\n', '        address _addr\n', '    )\n', '    onlyOwner public\n', '    {\n', '        wbtToken.transferOwnership(_addr);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer ownership of data contract to _addr\n', '     * @param _addr address\n', '     */\n', '    function transferDataOwnership(\n', '        address _addr\n', '    )\n', '    onlyOwner public\n', '    {\n', '        data.transferOwnership(_addr);\n', '    }\n', '\n', '}\n', '\n', '//Payment Channel\n', 'contract PChannelBct is Ownable {\n', '\n', '    Referral private refProgram;\n', '\n', '    constructor(address _refProgram) public {\n', '        refProgram = Referral(_refProgram);\n', '    }\n', '\n', '    function() payable public {\n', '        uint amount = msg.value;\n', '        refProgram.investBct.value(amount)(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Set investors contract address\n', '     * @param _addr address\n', '     */\n', '    function setRefProgram(address _addr) public onlyOwner {\n', '        refProgram = Referral(_addr);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract BlockchainToken is StandardToken, Ownable {\n', '\n', "    string public constant name = 'Blockchain Token 2.0';\n", '\n', "    string public constant symbol = 'BCT';\n", '\n', '    uint32 public constant decimals = 18;\n', '\n', '    /**\n', '     *  how many USD cents for 1 * 10^18 token\n', '     */\n', '    uint public price = 210;\n', '\n', '    function setPrice(uint _price) onlyOwner public {\n', '        price = _price;\n', '    }\n', '\n', '    uint256 public INITIAL_SUPPLY = 21000000 * 1 ether;\n', '\n', '    /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier hasMintPermission() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '    {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _addr The address that will have _amount of tokens burned\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(\n', '        address _addr,\n', '        uint256 _value\n', '    )\n', '    public onlyOwner\n', '    {\n', '        _burn(_addr, _value);\n', '    }\n', '\n', '    function _burn(\n', '        address _who,\n', '        uint256 _value\n', '    )\n', '    internal\n', '    {\n', '        require(_value <= balances[_who]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() public onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract WealthBuilderToken is MintableToken {\n', '\n', "    string public name = 'Wealth Builder Token';\n", '\n', "    string public symbol = 'WBT';\n", '\n', '    uint32 public decimals = 18;\n', '\n', '    /**\n', '     *  how many {tokens*10^(-18)} get per 1wei\n', '     */\n', '    uint public rate = 10 ** 7;\n', '    /**\n', '     *  multiplicator for rate\n', '     */\n', '    uint public mrate = 10 ** 7;\n', '\n', '    function setRate(uint _rate) onlyOwner public {\n', '        rate = _rate;\n', '    }\n', '\n', '}\n', '\n', 'contract Data is Ownable {\n', '\n', '    // node => its parent\n', '    mapping (address => address) private parent;\n', '\n', '    // node => its status\n', '    mapping (address => uint8) public statuses;\n', '\n', '    // node => sum of all his child deposits in USD cents\n', '    mapping (address => uint) public referralDeposits;\n', '\n', '    // client => balance in wei*10^(-6) available for withdrawal\n', '    mapping(address => uint256) private balances;\n', '\n', '    // investor => balance in wei*10^(-6) available for withdrawal\n', '    mapping(address => uint256) private investorBalances;\n', '\n', '    function parentOf(address _addr) public constant returns (address) {\n', '        return parent[_addr];\n', '    }\n', '\n', '    function balanceOf(address _addr) public constant returns (uint256) {\n', '        return balances[_addr] / 1000000;\n', '    }\n', '\n', '    function investorBalanceOf(address _addr) public constant returns (uint256) {\n', '        return investorBalances[_addr] / 1000000;\n', '    }\n', '\n', '    /**\n', '     * @dev The Data constructor to set up the first depositer\n', '     */\n', '    constructor() public {\n', '        // DirectorOfRegion - 7\n', '        statuses[msg.sender] = 7;\n', '    }\n', '\n', '    function addBalance(address _addr, uint256 amount) onlyOwner public {\n', '        balances[_addr] += amount;\n', '    }\n', '\n', '    function subtrBalance(address _addr, uint256 amount) onlyOwner public {\n', '        require(balances[_addr] >= amount);\n', '        balances[_addr] -= amount;\n', '    }\n', '\n', '    function addInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n', '        investorBalances[_addr] += amount;\n', '    }\n', '\n', '    function subtrInvestorBalance(address _addr, uint256 amount) onlyOwner public {\n', '        require(investorBalances[_addr] >= amount);\n', '        investorBalances[_addr] -= amount;\n', '    }\n', '\n', '    function addReferralDeposit(address _addr, uint256 amount) onlyOwner public {\n', '        referralDeposits[_addr] += amount;\n', '    }\n', '\n', '    function subtrReferralDeposit(address _addr, uint256 amount) onlyOwner public {\n', '        referralDeposits[_addr] -= amount;\n', '    }\n', '\n', '    function setStatus(address _addr, uint8 _status) onlyOwner public {\n', '        statuses[_addr] = _status;\n', '    }\n', '\n', '    function setParent(address _addr, address _parent) onlyOwner public {\n', '        parent[_addr] = _parent;\n', '    }\n', '\n', '}\n', '\n', 'contract Declaration {\n', '\n', '    // threshold in USD => status\n', '    mapping (uint => uint8) statusThreshold;\n', '\n', '    // status => (depositsNumber => percentage / 10)\n', '    mapping (uint8 => mapping (uint16 => uint256)) feeDistribution;\n', '\n', '    // status thresholds in USD\n', '    uint[8] thresholds = [\n', '    0, 5000, 35000, 150000, 500000, 2500000, 5000000, 10000000\n', '    ];\n', '\n', '    uint[5] referralFees = [50, 30, 20, 10, 5];\n', '    uint[5] serviceFees = [25, 20, 15, 10, 5];\n', '\n', '\n', '    /**\n', '     * @dev The Declaration constructor to define some constants\n', '     */\n', '    constructor() public {\n', '        setFeeDistributionsAndStatusThresholds();\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set up fee distribution & status thresholds\n', '     */\n', '    function setFeeDistributionsAndStatusThresholds() private {\n', '        // Agent - 0\n', '        setFeeDistributionAndStatusThreshold(0, [uint16(120), uint16(80), uint16(50), uint16(20), uint16(10)], thresholds[0]);\n', '        // SilverAgent - 1\n', '        setFeeDistributionAndStatusThreshold(1, [uint16(160), uint16(100), uint16(60), uint16(30), uint16(20)], thresholds[1]);\n', '        // Manager - 2\n', '        setFeeDistributionAndStatusThreshold(2, [uint16(200), uint16(120), uint16(80), uint16(40), uint16(25)], thresholds[2]);\n', '        // ManagerOfGroup - 3\n', '        setFeeDistributionAndStatusThreshold(3, [uint16(250), uint16(150), uint16(100), uint16(50), uint16(30)], thresholds[3]);\n', '        // ManagerOfRegion - 4\n', '        setFeeDistributionAndStatusThreshold(4, [300, 180, 120, 60, 35], thresholds[4]);\n', '        // Director - 5\n', '        setFeeDistributionAndStatusThreshold(5, [350, 210, 140, 70, 40], thresholds[5]);\n', '        // DirectorOfGroup - 6\n', '        setFeeDistributionAndStatusThreshold(6, [400, 240, 160, 80, 45], thresholds[6]);\n', '        // DirectorOfRegion - 7\n', '        setFeeDistributionAndStatusThreshold(7, [500, 300, 200, 100, 50], thresholds[7]);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set up specific fee and status threshold\n', '     * @param _st The status to set up for\n', '     * @param _percentages Array of pecentages, which should go to member\n', '     * @param _threshold The minimum amount of sum of children deposits to get\n', '     *                   the status _st\n', '     */\n', '    function setFeeDistributionAndStatusThreshold(\n', '        uint8 _st,\n', '        uint16[5] _percentages,\n', '        uint _threshold\n', '    )\n', '    private\n', '    {\n', '        statusThreshold[_threshold] = _st;\n', '        for (uint8 i = 0; i < _percentages.length; i++) {\n', '            feeDistribution[_st][i] = _percentages[i];\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract Referral is Declaration, Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    // reference to WBT token contract\n', '    WealthBuilderToken private wbtToken;\n', '\n', '    // reference to BCT2.0 token contract\n', '    BlockchainToken private bctToken;\n', '\n', '    // reference to data contract\n', '    Data private data;\n', '\n', '    /**\n', '     *  how many USD cents get per ETH\n', '     */\n', '    uint public ethUsdRate;\n', '\n', '    /**\n', '     * @dev The Referral constructor to set up the first depositer,\n', '     * reference to system wbt token, bct token, data and set ethUsdRate\n', '     */\n', '    constructor(\n', '        uint _ethUsdRate,\n', '        address _wbtToken,\n', '        address _bctToken,\n', '        address _data\n', '    )\n', '    public\n', '    {\n', '        ethUsdRate = _ethUsdRate;\n', '\n', '        // instantiate wbtToken & data contracts\n', '        wbtToken = WealthBuilderToken(_wbtToken);\n', '        bctToken = BlockchainToken(_bctToken);\n', '        data = Data(_data);\n', '    }\n', '\n', '    /**\n', '     * @dev Callback function\n', '     */\n', '    function() payable public {\n', '    }\n', '\n', '    /**\n', '     * @dev invest wbt token function\n', '     * @param _client to transfer WBT token\n', '     * @param _depositsCount num of the deposit\n', '     */\n', '    function invest(\n', '        address _client,\n', '        uint8 _depositsCount\n', '    )\n', '    payable public\n', '    {\n', '        uint amount = msg.value;\n', '\n', '        // if less then 5 deposits\n', '        if (_depositsCount < 5) {\n', '\n', '            uint serviceFee;\n', '\n', '            serviceFee = amount * serviceFees[_depositsCount];\n', '\n', '            uint referralFee = amount * referralFees[_depositsCount];\n', '\n', "            // distribute deposit fee among users above on the branch & update users' statuses\n", '            distribute(data.parentOf(_client), 0, _depositsCount, amount);\n', '\n', '            // update balance & number of deposits of user\n', '            uint active = (amount * 100).sub(referralFee).sub(serviceFee);\n', '\n', '            wbtToken.mint(_client, active / 100 * wbtToken.rate() / wbtToken.mrate());\n', '\n', '            // update owner`s balance\n', '            data.addBalance(owner, serviceFee * 10000);\n', '        } else {\n', '            wbtToken.mint(_client, amount * wbtToken.rate() / wbtToken.mrate());\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev invest bct token function\n', '     * @param _client to transfer BCT token\n', '     */\n', '    function investBct(\n', '        address _client\n', '    )\n', '    public payable\n', '    {\n', '        uint amount = msg.value;\n', "        // distribute deposit fee among users above on the branch & update users' statuses\n", '        distribute(data.parentOf(_client), 0, 0, amount);\n', '\n', '        bctToken.transfer(_client, amount * ethUsdRate / bctToken.price());\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Recursively distribute deposit fee between parents\n', '     * @param _node Parent address\n', '     * @param _prevPercentage The percentage for previous parent\n', '     * @param _depositsCount Count of depositer deposits\n', '     * @param _amount The amount of deposit\n', '     */\n', '    function distribute(\n', '        address _node,\n', '        uint _prevPercentage,\n', '        uint8 _depositsCount,\n', '        uint _amount\n', '    )\n', '    private\n', '    {\n', '        address node = _node;\n', '        uint prevPercentage = _prevPercentage;\n', '\n', "        // distribute deposit fee among users above on the branch & update users' statuses\n", '        while(node != address(0)) {\n', '            uint8 status = data.statuses(node);\n', '\n', '            // count fee percentage of current node\n', '            uint nodePercentage = feeDistribution[status][_depositsCount];\n', '            uint percentage = nodePercentage.sub(prevPercentage);\n', '            data.addBalance(node, _amount * percentage * 1000);\n', '\n', '            //update refferals sum amount\n', '            data.addReferralDeposit(node, _amount * ethUsdRate / 10**18);\n', '\n', '            //update status\n', '            updateStatus(node, status);\n', '\n', '            node = data.parentOf(node);\n', '            prevPercentage = nodePercentage;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Update node status if children sum amount is enough\n', '     * @param _node Node address\n', '     * @param _status Node current status\n', '     */\n', '    function updateStatus(\n', '        address _node,\n', '        uint8 _status\n', '    )\n', '    private\n', '    {\n', '        uint refDep = data.referralDeposits(_node);\n', '\n', '        for (uint i = thresholds.length - 1; i > _status; i--) {\n', '            uint threshold = thresholds[i] * 100;\n', '\n', '            if (refDep >= threshold) {\n', '                data.setStatus(_node, statusThreshold[thresholds[i]]);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set wbtToken exchange rate\n', '     * @param _rate wbt/eth rate\n', '     */\n', '    function setRate(\n', '        uint _rate\n', '    )\n', '    onlyOwner public\n', '    {\n', '        wbtToken.setRate(_rate);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set bctToken price\n', '     * @param _price bct/usd rate\n', '     */\n', '    function setPrice(\n', '        uint _price\n', '    )\n', '    onlyOwner public\n', '    {\n', '        bctToken.setPrice(_price);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set ETH exchange rate\n', '     * @param _ethUsdRate eth/usd rate\n', '     */\n', '    function setEthUsdRate(\n', '        uint _ethUsdRate\n', '    )\n', '    onlyOwner public\n', '    {\n', '        ethUsdRate = _ethUsdRate;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Add new child\n', '     * @param _inviter parent\n', '     * @param _invitee child\n', '     */\n', '    function invite(\n', '        address _inviter,\n', '        address _invitee\n', '    )\n', '    public onlyOwner\n', '    {\n', '        data.setParent(_invitee, _inviter);\n', '        // Agent - 0\n', '        data.setStatus(_invitee, 0);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set _status for _addr\n', '     * @param _addr address\n', '     * @param _status ref. status\n', '     */\n', '    function setStatus(\n', '        address _addr,\n', '        uint8 _status\n', '    )\n', '    public onlyOwner\n', '    {\n', '        data.setStatus(_addr, _status);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Withdraw _amount for _addr\n', '     * @param _addr withdrawal address\n', '     * @param _amount withdrawal amount\n', '     * @param investor is investor\n', '     */\n', '    function withdraw(\n', '        address _addr,\n', '        uint256 _amount,\n', '        bool investor\n', '    )\n', '        public onlyOwner\n', '    {\n', '        uint amount = investor ? data.investorBalanceOf(_addr) : data.balanceOf(_addr);\n', '        require(amount >= _amount && address(this).balance >= _amount);\n', '\n', '        if (investor) {\n', '            data.subtrInvestorBalance(_addr, _amount * 1000000);\n', '        } else {\n', '            data.subtrBalance(_addr, _amount * 1000000);\n', '        }\n', '\n', '        _addr.transfer(_amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Withdraw contract balance to _addr\n', '     * @param _addr withdrawal address\n', '     */\n', '    function withdrawOwner(\n', '        address _addr,\n', '        uint256 _amount\n', '    )\n', '    public onlyOwner\n', '    {\n', '        require(address(this).balance >= _amount);\n', '        _addr.transfer(_amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Withdraw corresponding amount of ETH to _addr and burn _value tokens\n', '     * @param _addr buyer address\n', '     * @param _amount amount of tokens to buy\n', '     */\n', '    function transferBctToken(\n', '        address _addr,\n', '        uint _amount\n', '    )\n', '    onlyOwner public\n', '    {\n', '        require(bctToken.balanceOf(this) >= _amount);\n', '        bctToken.transfer(_addr, _amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Withdraw corresponding amount of ETH to _addr and burn _value tokens\n', '     * @param _addr withdrawal address\n', '     * @param _amount amount of tokens to sell\n', '     */\n', '    function withdrawWbtToken(\n', '        address _addr,\n', '        uint256 _amount\n', '    )\n', '    onlyOwner public\n', '    {\n', '        wbtToken.burn(_addr, _amount);\n', '        uint256 etherValue = _amount * wbtToken.mrate() / wbtToken.rate();\n', '        _addr.transfer(etherValue);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer ownership of wbtToken contract to _addr\n', '     * @param _addr address\n', '     */\n', '    function transferTokenOwnership(\n', '        address _addr\n', '    )\n', '    onlyOwner public\n', '    {\n', '        wbtToken.transferOwnership(_addr);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer ownership of data contract to _addr\n', '     * @param _addr address\n', '     */\n', '    function transferDataOwnership(\n', '        address _addr\n', '    )\n', '    onlyOwner public\n', '    {\n', '        data.transferOwnership(_addr);\n', '    }\n', '\n', '}\n', '\n', '//Payment Channel\n', 'contract PChannelBct is Ownable {\n', '\n', '    Referral private refProgram;\n', '\n', '    constructor(address _refProgram) public {\n', '        refProgram = Referral(_refProgram);\n', '    }\n', '\n', '    function() payable public {\n', '        uint amount = msg.value;\n', '        refProgram.investBct.value(amount)(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Set investors contract address\n', '     * @param _addr address\n', '     */\n', '    function setRefProgram(address _addr) public onlyOwner {\n', '        refProgram = Referral(_addr);\n', '    }\n', '\n', '}']
