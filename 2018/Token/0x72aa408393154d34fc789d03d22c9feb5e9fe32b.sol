['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', '* @title OneledgerToken\n', '* @dev this is the oneledger token\n', '*/\n', 'contract OneledgerToken is MintableToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "Oneledger Token";\n', '    string public symbol = "OLT";\n', '    uint8 public decimals = 18;\n', '    bool public active = false;\n', '    /**\n', '     * @dev restrict function to be callable when token is active\n', '     */\n', '    modifier activated() {\n', '        require(active == true);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev activate token transfers\n', '     */\n', '    function activate() public onlyOwner {\n', '        active = true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer    ERC20 standard transfer wrapped with `activated` modifier\n', '     */\n', '    function transfer(address to, uint256 value) public activated returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev transfer    ERC20 standard transferFrom wrapped with `activated` modifier\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public activated returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '}\n', '\n', 'contract ICO is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct WhiteListRecord {\n', '        uint256 offeredWei;\n', '        uint256 lastPurchasedTimestamp;\n', '    }\n', '\n', '    OneledgerToken public token;\n', '    address public wallet; // Address where funds are collected\n', '    uint256 public rate;   // How many token units a buyer gets per eth\n', '    mapping (address => WhiteListRecord) public whiteList;\n', '    uint256 public initialTime;\n', '    bool public saleClosed;\n', '    uint256 public weiCap;\n', '    uint256 public weiRaised;\n', '\n', '    uint256 public TOTAL_TOKEN_SUPPLY = 1000000000 * (10 ** 18);\n', '\n', '    event BuyTokens(uint256 weiAmount, uint256 rate, uint256 token, address beneficiary);\n', '    event UpdateRate(uint256 rate);\n', '    event UpdateWeiCap(uint256 weiCap);\n', '    /**\n', '    * @dev constructor\n', '    */\n', '    constructor(address _wallet, uint256 _rate, uint256 _startDate, uint256 _weiCap) public {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_weiCap.mul(_rate) <= TOTAL_TOKEN_SUPPLY);\n', '\n', '        wallet = _wallet;\n', '        rate = _rate;\n', '        initialTime = _startDate;\n', '        saleClosed = false;\n', '        weiCap = _weiCap;\n', '        weiRaised = 0;\n', '\n', '        token = new OneledgerToken();\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function() external payable {\n', '        buyTokens();\n', '    }\n', '\n', '    /**\n', '     * @dev update the rate\n', '     */\n', '    function updateRate(uint256 rate_) public onlyOwner {\n', '      require(now <= initialTime);\n', '      rate = rate_;\n', '      emit UpdateRate(rate);\n', '    }\n', '\n', '    /**\n', '     * @dev update the weiCap\n', '     */\n', '    function updateWeiCap(uint256 weiCap_) public onlyOwner {\n', '      require(now <= initialTime);\n', '      weiCap = weiCap_;\n', '      emit UpdateWeiCap(weiCap_);\n', '    }\n', '\n', '    /**\n', '     * @dev buy tokens\n', '     */\n', '    function buyTokens() public payable {\n', '        validatePurchase(msg.value);\n', '        uint256 tokenToBuy = msg.value.mul(rate);\n', '        whiteList[msg.sender].lastPurchasedTimestamp = now;\n', '        weiRaised = weiRaised.add(msg.value);\n', '        token.mint(msg.sender, tokenToBuy);\n', '        wallet.transfer(msg.value);\n', '        emit BuyTokens(msg.value, rate, tokenToBuy, msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev add to white list\n', '    * param addresses the list of address added to white list\n', '    * param weiPerContributor the wei can be transfer per contributor\n', '    * param capWei for the user in this list\n', '    */\n', '    function addToWhiteList(address[] addresses, uint256 weiPerContributor) public onlyOwner {\n', '        for (uint32 i = 0; i < addresses.length; i++) {\n', '            whiteList[addresses[i]] = WhiteListRecord(weiPerContributor, 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev mint token to new address, either contract or a wallet\n', '     * param OneledgerTokenVesting vesting contract\n', '     * param uint256 total token number to mint\n', '    */\n', '    function mintToken(address target, uint256 tokenToMint) public onlyOwner {\n', '      token.mint(target, tokenToMint);\n', '    }\n', '\n', '    /**\n', '     * @dev close the ICO\n', '     */\n', '    function closeSale() public onlyOwner {\n', '        saleClosed = true;\n', '        if (TOTAL_TOKEN_SUPPLY > token.totalSupply()) {\n', '          token.mint(owner, TOTAL_TOKEN_SUPPLY.sub(token.totalSupply()));\n', '        }\n', '        token.finishMinting();\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    function validatePurchase(uint256 weiPaid) internal view{\n', '        require(!saleClosed);\n', '        require(initialTime <= now);\n', '        require(whiteList[msg.sender].offeredWei > 0);\n', '        require(weiPaid <= weiCap.sub(weiRaised));\n', '        // can only purchase once every 24 hours\n', '        require(now.sub(whiteList[msg.sender].lastPurchasedTimestamp) > 24 hours);\n', '        uint256 elapsedTime = now.sub(initialTime);\n', '        // check day 1 buy limit\n', '        require(elapsedTime > 24 hours || msg.value <= whiteList[msg.sender].offeredWei);\n', '        // check day 2 buy limit\n', '        require(elapsedTime > 48 hours || msg.value <= whiteList[msg.sender].offeredWei.mul(2));\n', '    }\n', '}\n', '\n', '\n', 'contract OneledgerTokenVesting is Ownable{\n', '    using SafeMath for uint256;\n', '\n', '    event Released(uint256 amount);\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    uint256 public startFrom;\n', '    uint256 public period;\n', '    uint256 public tokensReleasedPerPeriod;\n', '\n', '    uint256 public elapsedPeriods;\n', '\n', '    OneledgerToken private token;\n', '\n', '    /**\n', '     * @dev Creates a vesting contract for OneledgerToken\n', '     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '     * @param _startFrom Datetime when the vesting will begin\n', '     * @param _period The preiod to release the token\n', '     * @param _tokensReleasedPerPeriod the token to release per period\n', '     */\n', '    constructor(\n', '        address _beneficiary,\n', '        uint256 _startFrom,\n', '        uint256 _period,\n', '        uint256 _tokensReleasedPerPeriod,\n', '        OneledgerToken _token\n', '    ) public {\n', '        require(_beneficiary != address(0));\n', '        require(_startFrom >= now);\n', '\n', '        beneficiary = _beneficiary;\n', '        startFrom = _startFrom;\n', '        period = _period;\n', '        tokensReleasedPerPeriod = _tokensReleasedPerPeriod;\n', '        elapsedPeriods = 0;\n', '        token = _token;\n', '    }\n', '\n', '    /**\n', '     *  @dev getToken this may be more convinience for user\n', '     *        to check if their vesting contract is binded with a right token\n', '     * return OneledgerToken\n', '     */\n', '     function getToken() public view returns(OneledgerToken) {\n', '       return token;\n', '     }\n', '\n', '    /**\n', '     * @dev release\n', '     * param _token Oneledgertoken that will be released to beneficiary\n', '     */\n', '    function release() public {\n', '        require(msg.sender == owner || msg.sender == beneficiary);\n', '        require(token.balanceOf(this) >= 0 && now >= startFrom);\n', '        uint256 elapsedTime = now.sub(startFrom);\n', '        uint256 periodsInCurrentRelease = elapsedTime.div(period).sub(elapsedPeriods);\n', '        uint256 tokensReadyToRelease = periodsInCurrentRelease.mul(tokensReleasedPerPeriod);\n', '        uint256 amountToTransfer = tokensReadyToRelease > token.balanceOf(this) ? token.balanceOf(this) : tokensReadyToRelease;\n', '        require(amountToTransfer > 0);\n', '        elapsedPeriods = elapsedPeriods.add(periodsInCurrentRelease);\n', '        token.transfer(beneficiary, amountToTransfer);\n', '        emit Released(amountToTransfer);\n', '    }\n', '}']