['pragma solidity ^0.4.18;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract owned {\n', '    address public owner;\n', '    uint8 public  n=0;\n', '    function owned(){\n', '     if(n==0){\n', '            owner = msg.sender;\n', '\t    n=n+1;\n', '        }        \n', '    }\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '       \n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', 'contract TokenERC20 is owned {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;  // 18 是建议的默认值\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;  \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '    uint minBalanceForAccounts;  \n', '   \n', '    event FrozenFunds(address target, bool frozen);\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '     \n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n', '            balanceOf[target] += mintedAmount;\n', '            totalSupply += mintedAmount;\n', '            Transfer(0, owner, mintedAmount);\n', '            Transfer(owner, target, mintedAmount);\n', '        }\n', '\n', '    function freezeAccount(address target,bool _bool) onlyOwner{\n', '        if(target != 0){\n', '            frozenAccount[target] = _bool;\n', '        }\n', '    }\n', '     \n', '     function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n', '            sellPrice = newSellPrice;\n', '            buyPrice = newBuyPrice;\n', '        }\n', '       \n', '     function buy() returns (uint amount){\n', '            amount = msg.value / buyPrice;                     // calculates the amount\n', '            if (balanceOf[this] < amount) throw;               // checks if it has enough to sell\n', '            balanceOf[msg.sender] += amount;                   // adds the amount to buyer&#39;s balance\n', '            balanceOf[this] -= amount;                         // subtracts amount from seller&#39;s balance\n', '            Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n', '            return amount;                                     // ends function and returns\n', '        }\n', '       \n', '        function sell(uint amount) returns (uint revenue){\n', '            if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\n', '            balanceOf[this] += amount;                         // adds the amount to owner&#39;s balance\n', '            balanceOf[msg.sender] -= amount;                   // subtracts the amount from seller&#39;s balance\n', '            revenue = amount * sellPrice;                      // calculate the revenue\n', '            msg.sender.send(revenue);                          // sends ether to the seller\n', '            Transfer(msg.sender, this, amount);                // executes an event reflecting on the change\n', '            return revenue;                                    // ends function and returns\n', '        }\n', '\n', '    \n', '        function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n', '            minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n', '        }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract owned {\n', '    address public owner;\n', '    uint8 public  n=0;\n', '    function owned(){\n', '     if(n==0){\n', '            owner = msg.sender;\n', '\t    n=n+1;\n', '        }        \n', '    }\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '       \n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', 'contract TokenERC20 is owned {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;  // 18 是建议的默认值\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;  \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '    uint minBalanceForAccounts;  \n', '   \n', '    event FrozenFunds(address target, bool frozen);\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '     \n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n', '            balanceOf[target] += mintedAmount;\n', '            totalSupply += mintedAmount;\n', '            Transfer(0, owner, mintedAmount);\n', '            Transfer(owner, target, mintedAmount);\n', '        }\n', '\n', '    function freezeAccount(address target,bool _bool) onlyOwner{\n', '        if(target != 0){\n', '            frozenAccount[target] = _bool;\n', '        }\n', '    }\n', '     \n', '     function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n', '            sellPrice = newSellPrice;\n', '            buyPrice = newBuyPrice;\n', '        }\n', '       \n', '     function buy() returns (uint amount){\n', '            amount = msg.value / buyPrice;                     // calculates the amount\n', '            if (balanceOf[this] < amount) throw;               // checks if it has enough to sell\n', "            balanceOf[msg.sender] += amount;                   // adds the amount to buyer's balance\n", "            balanceOf[this] -= amount;                         // subtracts amount from seller's balance\n", '            Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n', '            return amount;                                     // ends function and returns\n', '        }\n', '       \n', '        function sell(uint amount) returns (uint revenue){\n', '            if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\n', "            balanceOf[this] += amount;                         // adds the amount to owner's balance\n", "            balanceOf[msg.sender] -= amount;                   // subtracts the amount from seller's balance\n", '            revenue = amount * sellPrice;                      // calculate the revenue\n', '            msg.sender.send(revenue);                          // sends ether to the seller\n', '            Transfer(msg.sender, this, amount);                // executes an event reflecting on the change\n', '            return revenue;                                    // ends function and returns\n', '        }\n', '\n', '    \n', '        function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n', '            minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n', '        }\n', '}']
