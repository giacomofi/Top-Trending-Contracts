['pragma solidity ^0.4.18;\n', '\n', '/* @nitzaalfinas */\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract MerialCoin {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string  public symbol;\n', '    string  public name;\n', '    uint8   public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    address public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => bool) public frozenAddress;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event FrozenAddress(address indexed target, bool frozen);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor () public {\n', "        name        = 'Merial Coin';\n", "        symbol      = 'MRA';\n", '        decimals    = 18;\n', '        totalSupply = 1000000000 * 10 ** uint256(decimals);\n', '\n', '        owner                 = msg.sender;\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        owner = _newOwner;\n', '        return true;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n', '        return balanceOf[tokenOwner];\n', '    }\n', '\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '\n', '        require(_to != address(0x0));\n', '\n', '        require(!frozenAddress[_from]);\n', '\n', '        require(!frozenAddress[_to]);\n', '\n', '        require(_from != _to);\n', '\n', '        require(balanceOf[_from] >= _value);\n', '\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require (_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function freezeAddress(address target, bool freeze) public returns (bool success) {\n', '\n', '        require(msg.sender == owner);\n', '        require(target != owner);\n', '        require(msg.sender != target);\n', '\n', '        frozenAddress[target] = freeze;\n', '\n', '        emit FrozenAddress(target, freeze);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(!frozenAddress[msg.sender]);\n', '        require(!frozenAddress[_spender]);\n', '        require(msg.sender != _spender);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(!frozenAddress[msg.sender]);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(!frozenAddress[msg.sender]);\n', '        require(!frozenAddress[_from]);\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender] );\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '}']