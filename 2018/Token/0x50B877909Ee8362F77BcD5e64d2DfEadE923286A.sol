['/*************************************************************************\n', ' * This contract has been merged with solidify\n', ' * https://github.com/tiesnetwork/solidify\n', ' *************************************************************************/\n', ' \n', ' pragma solidity ^0.4.18;\n', '\n', '/*************************************************************************\n', ' * import "./LetsbetToken.sol" : start\n', ' *************************************************************************/\n', '\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/ERC20/PausableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : start\n', ' *************************************************************************/\n', '\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "../../math/SafeMath.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../../math/SafeMath.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "../../lifecycle/Pausable.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "../ownership/Ownable.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "../ownership/Ownable.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../../lifecycle/Pausable.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/ERC20/PausableToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title LetsbetToken Token\n', ' * @dev ERC20 LetsbetToken Token (XBET)\n', ' */\n', 'contract LetsbetToken is PausableToken, BurnableToken {\n', '\n', '    string public constant name = "Letsbet Token";\n', '    string public constant symbol = "XBET";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 100000000 * 10**uint256(decimals); // 100 000 000 (100m)\n', '    uint256 public constant TEAM_TOKENS = 18000000 * 10**uint256(decimals); // 18 000 000 (18m)\n', '    uint256 public constant BOUNTY_TOKENS = 5000000 * 10**uint256(decimals); // 5 000 000 (5m)\n', '    uint256 public constant AUCTION_TOKENS = 77000000 * 10**uint256(decimals); // 77 000 000 (77m)\n', '\n', '    event Deployed(uint indexed _totalSupply);\n', '\n', '    /**\n', '    * @dev LetsbetToken Constructor\n', '    */\n', '    function LetsbetToken(\n', '        address auctionAddress,\n', '        address walletAddress,\n', '        address bountyAddress)\n', '        public\n', '    {\n', '\n', '        require(auctionAddress != 0x0);\n', '        require(walletAddress != 0x0);\n', '        require(bountyAddress != 0x0);\n', '        \n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\n', '        balances[auctionAddress] = AUCTION_TOKENS;\n', '        balances[walletAddress] = TEAM_TOKENS;\n', '        balances[bountyAddress] = BOUNTY_TOKENS;\n', '\n', '        Transfer(0x0, auctionAddress, balances[auctionAddress]);\n', '        Transfer(0x0, walletAddress, balances[walletAddress]);\n', '        Transfer(0x0, bountyAddress, balances[bountyAddress]);\n', '\n', '        Deployed(totalSupply_);\n', '        assert(totalSupply_ == balances[auctionAddress] + balances[walletAddress] + balances[bountyAddress]);\n', '    }\n', '}/*************************************************************************\n', ' * import "./LetsbetToken.sol" : end\n', ' *************************************************************************/\n', '\n', '/// @title Dutch auction contract - distribution of a fixed number of tokens using an auction.\n', '/// The contract code is inspired by the Gnosis and Raiden auction contract. Main difference is that the\n', '/// auction ends if a fixed number of tokens was sold.\n', 'contract DutchAuction {\n', '    \n', '\t/*\n', '     * Auction for the XBET Token.\n', '     */\n', '    // Wait 7 days after the end of the auction, before anyone can claim tokens\n', '    uint constant public TOKEN_CLAIM_WAITING_PERIOD = 7 days;\n', '\n', '    LetsbetToken public token;\n', '    address public ownerAddress;\n', '    address public walletAddress;\n', '\n', '    // Starting price in WEI\n', '    uint public startPrice;\n', '\n', '    // Divisor constant; e.g. 180000000\n', '    uint public priceDecreaseRate;\n', '\n', '    // For calculating elapsed time for price\n', '    uint public startTime;\n', '\n', '    uint public endTimeOfBids;\n', '\n', '    // When auction was finalized\n', '    uint public finalizedTime;\n', '    uint public startBlock;\n', '\n', '    // Keep track of all ETH received in the bids\n', '    uint public receivedWei;\n', '\n', '    // Keep track of cumulative ETH funds for which the tokens have been claimed\n', '    uint public fundsClaimed;\n', '\n', '    uint public tokenMultiplier;\n', '\n', '    // Total number of Rei (XBET * tokenMultiplier) that will be auctioned\n', '    uint public tokensAuctioned;\n', '\n', '    // Wei per XBET\n', '    uint public finalPrice;\n', '\n', '    // Bidder address => bid value\n', '    mapping (address => uint) public bids;\n', '\n', '\n', '    Stages public stage;\n', '\n', '    /*\n', '     * Enums\n', '     */\n', '    enum Stages {\n', '        AuctionDeployed,\n', '        AuctionSetUp,\n', '        AuctionStarted,\n', '        AuctionEnded,\n', '        TokensDistributed\n', '    }\n', '\n', '    /*\n', '     * Modifiers\n', '     */\n', '    modifier atStage(Stages _stage) {\n', '        require(stage == _stage);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        require(msg.sender == ownerAddress);\n', '        _;\n', '    }\n', '\t\n', '    /*\n', '     * Events\n', '     */\n', '    event Deployed(\n', '        uint indexed _startPrice,\n', '        uint indexed _priceDecreaseRate\n', '    );\n', '    \n', '\tevent Setup();\n', '    \n', '\tevent AuctionStarted(uint indexed _startTime, uint indexed _blockNumber);\n', '    \n', '\tevent BidSubmission(\n', '        address indexed sender,\n', '        uint amount,\n', '        uint missingFunds,\n', '        uint timestamp\n', '    );\n', '    \n', '\tevent ClaimedTokens(address indexed _recipient, uint _sentAmount);\n', '    \n', '\tevent AuctionEnded(uint _finalPrice);\n', '    \n', '\tevent TokensDistributed();\n', '\n', '    /// @dev Contract constructor function sets the starting price, divisor constant and\n', '    /// divisor exponent for calculating the Dutch Auction price.\n', '    /// @param _walletAddress Wallet address to which all contributed ETH will be forwarded.\n', '    /// @param _startPrice High price in WEI at which the auction starts.\n', '    /// @param _priceDecreaseRate Auction price decrease rate.\n', '    /// @param _endTimeOfBids last time bids could be accepted.\n', '    function DutchAuction(\n', '        address _walletAddress,\n', '        uint _startPrice,\n', '        uint _priceDecreaseRate,\n', '        uint _endTimeOfBids) \n', '    public\n', '    {\n', '        require(_walletAddress != 0x0);\n', '        walletAddress = _walletAddress;\n', '\n', '        ownerAddress = msg.sender;\n', '        stage = Stages.AuctionDeployed;\n', '        changeSettings(_startPrice, _priceDecreaseRate,_endTimeOfBids);\n', '        Deployed(_startPrice, _priceDecreaseRate);\n', '    }\n', '\n', '    function () public payable atStage(Stages.AuctionStarted) {\n', '        bid();\n', '    }\n', '\n', '    /// @notice Set `_tokenAddress` as the token address to be used in the auction.\n', '    /// @dev Setup function sets external contracts addresses.\n', '    /// @param _tokenAddress Token address.\n', '    function setup(address _tokenAddress) public isOwner atStage(Stages.AuctionDeployed) {\n', '        require(_tokenAddress != 0x0);\n', '        token = LetsbetToken(_tokenAddress);\n', '\n', '        // Get number of Rei (XBET * tokenMultiplier) to be auctioned from token auction balance\n', '        tokensAuctioned = token.balanceOf(address(this));\n', '\n', '        // Set the number of the token multiplier for its decimals\n', '        tokenMultiplier = 10 ** uint(token.decimals());\n', '\n', '        stage = Stages.AuctionSetUp;\n', '        Setup();\n', '    }\n', '\n', '    /// @dev Changes auction price function parameters before auction is started.\n', '    /// @param _startPrice Updated start price.\n', '    /// @param _priceDecreaseRate Updated price decrease rate.\n', '    function changeSettings(\n', '        uint _startPrice,\n', '        uint _priceDecreaseRate,\n', '        uint _endTimeOfBids\n', '        )\n', '        internal\n', '    {\n', '        require(stage == Stages.AuctionDeployed || stage == Stages.AuctionSetUp);\n', '        require(_startPrice > 0);\n', '        require(_priceDecreaseRate > 0);\n', '        require(_endTimeOfBids > now);\n', '        \n', '        endTimeOfBids = _endTimeOfBids;\n', '        startPrice = _startPrice;\n', '        priceDecreaseRate = _priceDecreaseRate;\n', '    }\n', '\n', '\n', '    /// @notice Start the auction.\n', '    /// @dev Starts auction and sets startTime.\n', '    function startAuction() public isOwner atStage(Stages.AuctionSetUp) {\n', '        stage = Stages.AuctionStarted;\n', '        startTime = now;\n', '        startBlock = block.number;\n', '        AuctionStarted(startTime, startBlock);\n', '    }\n', '\n', '    /// @notice Finalize the auction - sets the final XBET token price and changes the auction\n', '    /// stage after no bids are allowed anymore.\n', '    /// @dev Finalize auction and set the final XBET token price.\n', '    function finalizeAuction() public isOwner atStage(Stages.AuctionStarted) {\n', '        // Missing funds should be 0 at this point\n', '        uint missingFunds = missingFundsToEndAuction();\n', '        require(missingFunds == 0 || now > endTimeOfBids);\n', '\n', '        // Calculate the final price = WEI / XBET = WEI / (Rei / tokenMultiplier)\n', '        // Reminder: tokensAuctioned is the number of Rei (XBET * tokenMultiplier) that are auctioned\n', '        finalPrice = tokenMultiplier * receivedWei / tokensAuctioned;\n', '\n', '        finalizedTime = now;\n', '        stage = Stages.AuctionEnded;\n', '        AuctionEnded(finalPrice);\n', '\n', '        assert(finalPrice > 0);\n', '    }\n', '\n', '    /// --------------------------------- Auction Functions ------------------\n', '\n', '\n', '    /// @notice Send `msg.value` WEI to the auction from the `msg.sender` account.\n', '    /// @dev Allows to send a bid to the auction.\n', '    function bid()\n', '        public\n', '        payable\n', '        atStage(Stages.AuctionStarted)\n', '    {\n', '        require(msg.value > 0);\n', '        assert(bids[msg.sender] + msg.value >= msg.value);\n', '\n', '        // Missing funds without the current bid value\n', '        uint missingFunds = missingFundsToEndAuction();\n', '\n', '        // We require bid values to be less than the funds missing to end the auction\n', '        // at the current price.\n', '        require(msg.value <= missingFunds);\n', '\n', '        bids[msg.sender] += msg.value;\n', '        receivedWei += msg.value;\n', '\n', '        // Send bid amount to wallet\n', '        walletAddress.transfer(msg.value);\n', '\n', '        BidSubmission(msg.sender, msg.value, missingFunds,block.timestamp);\n', '\n', '        assert(receivedWei >= msg.value);\n', '    }\n', '\n', '    /// @notice Claim auction tokens for `msg.sender` after the auction has ended.\n', '    /// @dev Claims tokens for `msg.sender` after auction. To be used if tokens can\n', '    /// be claimed by beneficiaries, individually.\n', '    function claimTokens() public atStage(Stages.AuctionEnded) returns (bool) {\n', '        return proxyClaimTokens(msg.sender);\n', '    }\n', '\n', '    /// @notice Claim auction tokens for `receiverAddress` after the auction has ended.\n', '    /// @dev Claims tokens for `receiverAddress` after auction has ended.\n', '    /// @param receiverAddress Tokens will be assigned to this address if eligible.\n', '    function proxyClaimTokens(address receiverAddress)\n', '        public\n', '        atStage(Stages.AuctionEnded)\n', '        returns (bool)\n', '    {\n', '        // Waiting period after the end of the auction, before anyone can claim tokens\n', '        // Ensures enough time to check if auction was finalized correctly\n', '        // before users start transacting tokens\n', '        require(now > finalizedTime + TOKEN_CLAIM_WAITING_PERIOD);\n', '        require(receiverAddress != 0x0);\n', '\n', '        if (bids[receiverAddress] == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint num = (tokenMultiplier * bids[receiverAddress]) / finalPrice;\n', '\n', '        // Due to finalPrice floor rounding, the number of assigned tokens may be higher\n', '        // than expected. Therefore, the number of remaining unassigned auction tokens\n', '        // may be smaller than the number of tokens needed for the last claimTokens call\n', '        uint auctionTokensBalance = token.balanceOf(address(this));\n', '        if (num > auctionTokensBalance) {\n', '            num = auctionTokensBalance;\n', '        }\n', '\n', '        // Update the total amount of funds for which tokens have been claimed\n', '        fundsClaimed += bids[receiverAddress];\n', '\n', '        // Set receiver bid to 0 before assigning tokens\n', '        bids[receiverAddress] = 0;\n', '\n', '        require(token.transfer(receiverAddress, num));\n', '\n', '        ClaimedTokens(receiverAddress, num);\n', '\n', '        // After the last tokens are claimed, we change the auction stage\n', '        // Due to the above logic, rounding errors will not be an issue\n', '        if (fundsClaimed == receivedWei) {\n', '            stage = Stages.TokensDistributed;\n', '            TokensDistributed();\n', '        }\n', '\n', '        assert(token.balanceOf(receiverAddress) >= num);\n', '        assert(bids[receiverAddress] == 0);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Get the XBET price in WEI during the auction, at the time of\n', '    /// calling this function. Returns `0` if auction has ended.\n', '    /// Returns `startPrice` before auction has started.\n', '    /// @dev Calculates the current XBET token price in WEI.\n', '    /// @return Returns WEI per XBET (tokenMultiplier * Rei).\n', '    function price() public constant returns (uint) {\n', '        if (stage == Stages.AuctionEnded ||\n', '            stage == Stages.TokensDistributed) {\n', '            return finalPrice;\n', '        }\n', '        return calcTokenPrice();\n', '    }\n', '\n', '    /// @notice Get the missing funds needed to end the auction,\n', '    /// calculated at the current XBET price in WEI.\n', '    /// @dev The missing funds amount necessary to end the auction at the current XBET price in WEI.\n', '    /// @return Returns the missing funds amount in WEI.\n', '    function missingFundsToEndAuction() constant public returns (uint) {\n', '\n', '        uint requiredWei = tokensAuctioned * price() / tokenMultiplier;\n', '        if (requiredWei <= receivedWei) {\n', '            return 0;\n', '        }\n', '\n', '        return requiredWei - receivedWei;\n', '    }\n', '\n', '    /*\n', '     *  Private functions\n', '     */\n', '    /// @dev Calculates the token price (WEI / XBET) at the current timestamp.\n', '    /// For every new block the price decreases with priceDecreaseRate * numberOfNewBLocks\n', '    /// @return current price\n', '    function calcTokenPrice() constant private returns (uint) {\n', '        uint currentPrice;\n', '        if (stage == Stages.AuctionStarted) {\n', '            currentPrice = startPrice - priceDecreaseRate * (block.number - startBlock);\n', '        }else {\n', '            currentPrice = startPrice;\n', '        }\n', '\n', '        return currentPrice;\n', '    }\n', '}']