['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract LAWOwner {\n', '    address public owner;\n', '    event SetOwner(address indexed lastOwner,address newOwner);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address newOwner) onlyOwner public {\n', '        require(newOwner != 0x0);\n', '        owner = newOwner;\n', '        SetOwner(msg.sender,newOwner);\n', '    }\n', '}\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        require((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '}\n', '\n', 'contract LAWStop is LAWOwner {\n', '    bool public stopped = false;\n', '\n', '    event SetStop(address sender,bool stopped);\n', '\n', '    modifier stoppable {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '    function stop() onlyOwner public {\n', '        stopped = true;\n', '        SetStop(msg.sender,stopped);\n', '    }\n', '\n', '    function start() onlyOwner public {\n', '        stopped = false;\n', '        SetStop(msg.sender,stopped);\n', '    }\n', '}\n', '\n', 'contract LAWCoin is LAWStop,DSMath {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf; \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function LAWCoin(uint256 initialSupply, string tokenName, string tokenSymbol, address _owner) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[_owner] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        owner = _owner;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) stoppable internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = add(balanceOf[_from],balanceOf[_to]);\n', '        // uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] = sub(balanceOf[_from],_value);\n', '        // balanceOf[_from] -= _value;\n', '        balanceOf[_to] = add(balanceOf[_to],_value);\n', '        // balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(add(balanceOf[_from],balanceOf[_to]) == previousBalances);\n', '        // assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) stoppable public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) stoppable public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] = sub(allowance[_from][msg.sender],_value);\n', '        // allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)  stoppable public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) stoppable public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) stoppable public returns (bool success) {   \n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = sub(balanceOf[msg.sender],_value);\n', '        // balanceOf[msg.sender] -= _value;\n', '        totalSupply = sub(totalSupply,_value);\n', '        // totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) stoppable public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] = sub(balanceOf[_from],_value);\n', '        // balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] = sub(allowance[_from][msg.sender],_value);\n', '        // allowance[_from][msg.sender] -= _value;\n', '        totalSupply = sub(totalSupply,_value);\n', '        // totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']