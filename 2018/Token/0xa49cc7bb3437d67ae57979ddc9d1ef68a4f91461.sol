['pragma solidity ^0.4.24;\n', '\n', '/*\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '*/\n', '\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() internal {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract XAIN_ERC20 is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\n', '    // Public variables for the XAIN ERC20 XNP token contract\n', '    string public constant standard = "XAIN erc20 and Genesis";\n', '    uint256 public constant decimals = 18;   // hardcoded to be a constant\n', '    string public name = "XAIN";\n', '    string public symbol = "XNP";\n', '    uint256 public totalSupply;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ;\n', '}\n', '\n', '\n', '//\n', '// This creates and adds six genesis pools of XNP tokens to the balance of the A,B,C,D,E and F Ethereum addresses\n', '//\n', '\n', 'contract XAIN is XAIN_ERC20 {\n', '\n', '\n', '        address public A;\n', '        address public B;\n', '        address public C;\n', '        address public D;\n', '        address public E;\n', '        address public F;\n', '\n', '\n', '    constructor (\n', '\n', '        ) public {\n', '\n', '        A = 0xc3b60984Df1FeffBd884Da6C083EaB735563C641;\n', '        B = 0xD5b8D79dE753C98f165bD8d3eb896C1276c4B1FF;\n', '        C = 0x75B351AD3e51376C9a3373D724e16daA52C54cD5;\n', '        D = 0x908dA0Eb55C64Ea116A47a9bF62C6bfBd542FA81;\n', '        E = 0x48875C46796C14e3fDC27D7acfBbd4a0f2a39953;\n', '        F = 0xA010C083B38A9013d7E1Db8b4e5015BB7b280224;\n', '\n', '        balances[A]=balances[A].add(5000000*(uint256(10)**decimals));\n', '        balances[B]=balances[B].add(5000000*(uint256(10)**decimals));\n', '        balances[C]=balances[C].add(10000000*(uint256(10)**decimals));\n', '        balances[D]=balances[D].add(10000000*(uint256(10)**decimals));\n', '        balances[E]=balances[E].add(25000000*(uint256(10)**decimals));\n', '        balances[F]=balances[F].add(45000000*(uint256(10)**decimals));\n', '\n', '        totalSupply=balances[A]+balances[B]+balances[C]+balances[D]+balances[E]+balances[F];\n', '\n', '\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/*\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '*/\n', '\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() internal {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract XAIN_ERC20 is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\n', '    // Public variables for the XAIN ERC20 XNP token contract\n', '    string public constant standard = "XAIN erc20 and Genesis";\n', '    uint256 public constant decimals = 18;   // hardcoded to be a constant\n', '    string public name = "XAIN";\n', '    string public symbol = "XNP";\n', '    uint256 public totalSupply;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ;\n', '}\n', '\n', '\n', '//\n', '// This creates and adds six genesis pools of XNP tokens to the balance of the A,B,C,D,E and F Ethereum addresses\n', '//\n', '\n', 'contract XAIN is XAIN_ERC20 {\n', '\n', '\n', '        address public A;\n', '        address public B;\n', '        address public C;\n', '        address public D;\n', '        address public E;\n', '        address public F;\n', '\n', '\n', '    constructor (\n', '\n', '        ) public {\n', '\n', '        A = 0xc3b60984Df1FeffBd884Da6C083EaB735563C641;\n', '        B = 0xD5b8D79dE753C98f165bD8d3eb896C1276c4B1FF;\n', '        C = 0x75B351AD3e51376C9a3373D724e16daA52C54cD5;\n', '        D = 0x908dA0Eb55C64Ea116A47a9bF62C6bfBd542FA81;\n', '        E = 0x48875C46796C14e3fDC27D7acfBbd4a0f2a39953;\n', '        F = 0xA010C083B38A9013d7E1Db8b4e5015BB7b280224;\n', '\n', '        balances[A]=balances[A].add(5000000*(uint256(10)**decimals));\n', '        balances[B]=balances[B].add(5000000*(uint256(10)**decimals));\n', '        balances[C]=balances[C].add(10000000*(uint256(10)**decimals));\n', '        balances[D]=balances[D].add(10000000*(uint256(10)**decimals));\n', '        balances[E]=balances[E].add(25000000*(uint256(10)**decimals));\n', '        balances[F]=balances[F].add(45000000*(uint256(10)**decimals));\n', '\n', '        totalSupply=balances[A]+balances[B]+balances[C]+balances[D]+balances[E]+balances[F];\n', '\n', '\n', '    }\n', '\n', '\n', '}']
