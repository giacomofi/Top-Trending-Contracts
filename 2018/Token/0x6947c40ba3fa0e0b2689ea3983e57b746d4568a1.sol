['pragma solidity ^0.4.24;\n', '\n', '//設定管理者//\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}    \n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract x32323 is owned{\n', '    \n', '//設定初始值//\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 2;\n', '    uint256 public totalSupply;\n', '    \n', '//初始化//\n', '\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '\ttotalSupply = 1000000000 * 100 ;\n', '    \tbalanceOf[msg.sender] = totalSupply ;\n', '        name = "Leimen coin";\n', '        symbol = "Lem";         \n', '    }\n', '    \n', '//管理權限//\n', '\n', '    uint256 minBalance ;\n', '    uint256 price ;\n', '    bool stopped ;\n', '    bool selling;\n', '\n', '\n', '    function set_prices(uint256 price_wei) onlyOwner {\n', '        price = price_wei  ;\n', '    }\n', '\n', '    function withdrawal_Lem(uint256 amount)  onlyOwner {\n', '        require(balanceOf[this] >= amount) ;\n', '        balanceOf[this] -= amount ;\n', '        balanceOf[msg.sender] += amount ;\n', '    }\n', '    \n', '    function withdrawal_Eth(uint amount_wei) onlyOwner {\n', '        msg.sender.transfer(amount_wei) ;\n', '    }\n', '    \n', '    function set_Name(string _name) onlyOwner {\n', '        name = _name;\n', '    }\n', '    \n', '    function set_symbol(string _symbol) onlyOwner {\n', '        symbol = _symbol;\n', '    }\n', '    \n', '    function set_sell(bool _selling) onlyOwner {\n', '        selling = _selling;\n', '    }\n', '    \n', '    function stop() onlyOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() onlyOwner {\n', '        stopped = false;\n', '    }\n', '\n', '//交易//\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '\t    require(!frozenAccount[_from]);\n', '\t    require(!stopped);\n', '        require(_to != 0x0);\n', '        \n', '        require(_value >= 0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        \n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '\t    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]); \n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '//販售\n', '\n', '    function () payable {\n', '        buy();\n', '    }\n', '\n', '    function buy() payable returns (uint amount){\n', '        require(price != 0);\n', '\t    require(selling);\n', '        amount = msg.value / price * 100 ;\n', '        require(balanceOf[this] > amount);           \n', '        balanceOf[msg.sender] += amount;           \n', '        balanceOf[this] -= amount; \n', '        Transfer(this, msg.sender, amount);         \n', '        return amount;    \n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '//設定管理者//\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}    \n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract x32323 is owned{\n', '    \n', '//設定初始值//\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 2;\n', '    uint256 public totalSupply;\n', '    \n', '//初始化//\n', '\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '\ttotalSupply = 1000000000 * 100 ;\n', '    \tbalanceOf[msg.sender] = totalSupply ;\n', '        name = "Leimen coin";\n', '        symbol = "Lem";         \n', '    }\n', '    \n', '//管理權限//\n', '\n', '    uint256 minBalance ;\n', '    uint256 price ;\n', '    bool stopped ;\n', '    bool selling;\n', '\n', '\n', '    function set_prices(uint256 price_wei) onlyOwner {\n', '        price = price_wei  ;\n', '    }\n', '\n', '    function withdrawal_Lem(uint256 amount)  onlyOwner {\n', '        require(balanceOf[this] >= amount) ;\n', '        balanceOf[this] -= amount ;\n', '        balanceOf[msg.sender] += amount ;\n', '    }\n', '    \n', '    function withdrawal_Eth(uint amount_wei) onlyOwner {\n', '        msg.sender.transfer(amount_wei) ;\n', '    }\n', '    \n', '    function set_Name(string _name) onlyOwner {\n', '        name = _name;\n', '    }\n', '    \n', '    function set_symbol(string _symbol) onlyOwner {\n', '        symbol = _symbol;\n', '    }\n', '    \n', '    function set_sell(bool _selling) onlyOwner {\n', '        selling = _selling;\n', '    }\n', '    \n', '    function stop() onlyOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() onlyOwner {\n', '        stopped = false;\n', '    }\n', '\n', '//交易//\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '\t    require(!frozenAccount[_from]);\n', '\t    require(!stopped);\n', '        require(_to != 0x0);\n', '        \n', '        require(_value >= 0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        \n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '\t    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]); \n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '//販售\n', '\n', '    function () payable {\n', '        buy();\n', '    }\n', '\n', '    function buy() payable returns (uint amount){\n', '        require(price != 0);\n', '\t    require(selling);\n', '        amount = msg.value / price * 100 ;\n', '        require(balanceOf[this] > amount);           \n', '        balanceOf[msg.sender] += amount;           \n', '        balanceOf[this] -= amount; \n', '        Transfer(this, msg.sender, amount);         \n', '        return amount;    \n', '    }\n', '}']
