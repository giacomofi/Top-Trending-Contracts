['pragma solidity ^0.4.18;\n', 'contract PingToken {\n', '  \n', '  event Pong(uint256 pong);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', 'uint256 public pings;\n', '  uint256 public totalSupply;\n', '  \n', '  string public constant name = "PingToken";\n', '  string public constant symbol = "PING";\n', '  uint8 public constant decimals = 18;\n', '  uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals)); // 100M\n', '  \n', '  mapping(address => uint256) balances;\n', 'function PingToken() public {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', 'function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', 'balances[msg.sender] = balances[msg.sender] - _value;\n', '    balances[_to] = balances[_to] + _value;\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', 'function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', 'function ping() external returns (uint256) {\n', '    // 1 token to use ping function\n', '    uint256 cost = 1 * (10 ** uint256(decimals));\n', '    require(cost <= balances[msg.sender]);\n', '    totalSupply -= cost;\n', '    balances[msg.sender] -= cost;\n', '    pings++;\n', '    emit Pong(pings);\n', '    return pings;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', 'contract PingToken {\n', '  \n', '  event Pong(uint256 pong);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', 'uint256 public pings;\n', '  uint256 public totalSupply;\n', '  \n', '  string public constant name = "PingToken";\n', '  string public constant symbol = "PING";\n', '  uint8 public constant decimals = 18;\n', '  uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(decimals)); // 100M\n', '  \n', '  mapping(address => uint256) balances;\n', 'function PingToken() public {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', 'function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', 'balances[msg.sender] = balances[msg.sender] - _value;\n', '    balances[_to] = balances[_to] + _value;\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', 'function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', 'function ping() external returns (uint256) {\n', '    // 1 token to use ping function\n', '    uint256 cost = 1 * (10 ** uint256(decimals));\n', '    require(cost <= balances[msg.sender]);\n', '    totalSupply -= cost;\n', '    balances[msg.sender] -= cost;\n', '    pings++;\n', '    emit Pong(pings);\n', '    return pings;\n', '  }\n', '}']
