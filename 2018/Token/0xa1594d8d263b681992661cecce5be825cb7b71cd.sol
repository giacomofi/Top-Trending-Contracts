['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ConoToken  {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public _totalSupply;\n', '    \n', '    uint256 public constant AMOUNT = 1000000000;    // initial amount of token\n', '    \n', '    string public constant symbol = "CONO";\n', '    string public constant name = "Cono Coins";\n', '    uint8 public constant decimals = 18; \n', "    string public version = '1.0';  \n", '\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    address _contractCreator;\n', '    \n', '    function ConoToken(address owner) public {\n', '        _contractCreator = owner;\n', '        _totalSupply = AMOUNT * 1000000000000000000;\n', '        balances[_contractCreator] = _totalSupply;\n', '    }\n', '     \n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant public returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /// @param who The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address who) constant public returns (uint256){\n', '        return balances[who];\n', '    }\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        \n', '        require(_to != 0x00);\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        require(balances[msg.sender] >= _value && _value > 0 );\n', '        require(balances[_to] + _value >= balances[_to]); // Check for overflows\n', '\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            //balances[msg.sender] -= _value;\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);  // Log the Transaction\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '        \n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '         //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        require(\n', '            allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0\n', '        );\n', '        require(balances[_to] + _value >= balances[_to]); // Check for overflows\n', '        \n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value); // Log the Transaction\n', '        return true;\n', '    }\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', ' \n', '}']