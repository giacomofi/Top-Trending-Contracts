['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath \n', '{\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '\n', '  /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds two numbers, throws on overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable \n', '{\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '  \n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable \n', '{\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpauseunpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic \n', '{\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic \n', '{\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  \n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic \n', '{\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken \n', '{\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable \n', '{\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint256 _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Frozenable Token\n', ' * @dev Illegal address that can be frozened.\n', ' */\n', 'contract FrozenableToken is Ownable \n', '{\n', '    \n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event FrozenFunds(address indexed to, bool frozen);\n', '\n', '    modifier whenNotFrozen(address _who) {\n', '      require(!frozenAccount[msg.sender] && !frozenAccount[_who]);\n', '      _;\n', '    }\n', '\n', '    function freezeAccount(address _to, bool _freeze) public onlyOwner {\n', '        require(_to != address(0));\n', '        frozenAccount[_to] = _freeze;\n', '        emit FrozenFunds(_to, _freeze);\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Colorbay Token\n', ' * @dev Global digital painting asset platform token.\n', ' * @author colorbay.org \n', ' */\n', 'contract Colorbay is PausableToken, FrozenableToken \n', '{\n', '\n', '    string public name = "Colorbay Token";\n', '    string public symbol = "CLOB";\n', '    uint256 public decimals = 18;\n', '    uint256 INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n', '\n', '    /**\n', '     * @dev Initializes the total release\n', '     */\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = totalSupply_;\n', '        emit Transfer(address(0), msg.sender, totalSupply_);\n', '    }\n', '\n', '    /**\n', '     * if ether is sent to this address, send it back.\n', '     */\n', '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public whenNotFrozen(_to) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotFrozen(_from) returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }        \n', '    \n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', 'contract TokenVesting is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '  \n', '    ERC20Basic public token;\n', '\n', '    uint256 public planCount = 0;\n', '    uint256 public payPool = 0;\n', '    \n', "    //A token holder's plan\n", '    struct Plan {\n', '      //beneficiary of tokens after they are released\n', '      address beneficiary; \n', '      \n', '      //Lock start time\n', '      uint256 startTime;\n', '      \n', '      //Lock deadline\n', '      uint256 locktoTime;\n', '      \n', '      //Number of installments of release time\n', '      uint256 releaseStages; \n', '      \n', '      //Release completion time\n', '      uint256 endTime;\n', '      \n', '      //Allocated token balance\n', '      uint256 totalToken;\n', '      \n', '      //Current release quantity\n', '      uint256 releasedAmount;\n', '      \n', '      //Whether the token can be revoked\n', '      bool revocable;\n', '      \n', '      //Whether the token has been revoked\n', '      bool isRevoked;\n', '      \n', '      //Remarks for a plan\n', '      string remark;\n', '    }\n', '    \n', "    //Token holder's plan set\n", '    mapping (address => Plan) public plans;\n', '    \n', '    event Released(address indexed beneficiary, uint256 amount);\n', '    event Revoked(address indexed beneficiary, uint256 refund);\n', '    event AddPlan(address indexed beneficiary, uint256 startTime, uint256 locktoTime, uint256 releaseStages, uint256 endTime, uint256 totalToken, uint256 releasedAmount, bool revocable, bool isRevoked, string remark);\n', '    \n', '    /**\n', '     * @param _token ERC20 token which is being vested\n', '     */\n', '    constructor(address _token) public {\n', '        token = ERC20Basic(_token);\n', '    }\n', '\n', '    /**\n', '     * @dev Check if the payment amount of the contract is sufficient\n', '     */\n', '    modifier checkPayPool(uint256 _totalToken) {\n', '        require(token.balanceOf(this) >= payPool.add(_totalToken));\n', '        payPool = payPool.add(_totalToken);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if the plan exists\n', '     */\n', '    modifier whenPlanExist(address _beneficiary) {\n', '        require(_beneficiary != address(0));\n', '        require(plans[_beneficiary].beneficiary != address(0));\n', '        _;\n', '    }\n', '    \n', '    /**\n', "     * @dev Add a token holder's plan\n", '     */\n', '    function addPlan(address _beneficiary, uint256 _startTime, uint256 _locktoTime, uint256 _releaseStages, uint256 _endTime, uint256 _totalToken, bool _revocable, string _remark) public onlyOwner checkPayPool(_totalToken) {\n', '        require(_beneficiary != address(0));\n', '        require(plans[_beneficiary].beneficiary == address(0));\n', '\n', '        require(_startTime > 0 && _locktoTime > 0 && _releaseStages > 0 && _totalToken > 0);\n', '        require(_locktoTime > block.timestamp && _locktoTime >= _startTime  && _endTime > _locktoTime);\n', '\n', '        plans[_beneficiary] = Plan(_beneficiary, _startTime, _locktoTime, _releaseStages, _endTime, _totalToken, 0, _revocable, false, _remark);\n', '        planCount = planCount.add(1);\n', '        emit AddPlan(_beneficiary, _startTime, _locktoTime, _releaseStages, _endTime, _totalToken, 0, _revocable, false, _remark);\n', '    }\n', '    \n', '    /**\n', '    * @notice Transfers vested tokens to beneficiary.\n', '    */\n', '    function release(address _beneficiary) public whenPlanExist(_beneficiary) {\n', '\n', '        require(!plans[_beneficiary].isRevoked);\n', '        \n', '        uint256 unreleased = releasableAmount(_beneficiary);\n', '\n', '        if(unreleased > 0 && unreleased <= plans[_beneficiary].totalToken) {\n', '            plans[_beneficiary].releasedAmount = plans[_beneficiary].releasedAmount.add(unreleased);\n', '            payPool = payPool.sub(unreleased);\n', '            token.safeTransfer(_beneficiary, unreleased);\n', '            emit Released(_beneficiary, unreleased);\n', '        }        \n', '        \n', '    }\n', '    \n', '    /**\n', "     * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '     */\n', '    function releasableAmount(address _beneficiary) public view whenPlanExist(_beneficiary) returns (uint256) {\n', '        return vestedAmount(_beneficiary).sub(plans[_beneficiary].releasedAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     */\n', '    function vestedAmount(address _beneficiary) public view whenPlanExist(_beneficiary) returns (uint256) {\n', '\n', '        if (block.timestamp <= plans[_beneficiary].locktoTime) {\n', '            return 0;\n', '        } else if (plans[_beneficiary].isRevoked) {\n', '            return plans[_beneficiary].releasedAmount;\n', '        } else if (block.timestamp > plans[_beneficiary].endTime && plans[_beneficiary].totalToken == plans[_beneficiary].releasedAmount) {\n', '            return plans[_beneficiary].totalToken;\n', '        }\n', '        \n', '        uint256 totalTime = plans[_beneficiary].endTime.sub(plans[_beneficiary].locktoTime);\n', '        uint256 totalToken = plans[_beneficiary].totalToken;\n', '        uint256 releaseStages = plans[_beneficiary].releaseStages;\n', '        uint256 endTime = block.timestamp > plans[_beneficiary].endTime ? plans[_beneficiary].endTime : block.timestamp;\n', '        uint256 passedTime = endTime.sub(plans[_beneficiary].locktoTime);\n', '        \n', '        uint256 unitStageTime = totalTime.div(releaseStages);\n', '        uint256 unitToken = totalToken.div(releaseStages);\n', '        uint256 currStage = passedTime.div(unitStageTime);\n', '\n', '        uint256 totalBalance = 0;        \n', '        if(currStage > 0 && releaseStages == currStage && (totalTime % releaseStages) > 0 && block.timestamp < plans[_beneficiary].endTime) {\n', '            totalBalance = unitToken.mul(releaseStages.sub(1));\n', '        } else if(currStage > 0 && releaseStages == currStage) {\n', '            totalBalance = totalToken;\n', '        } else if(currStage > 0) {\n', '            totalBalance = unitToken.mul(currStage);\n', '        }\n', '        return totalBalance;\n', '        \n', '    }\n', '    \n', '    /**\n', '     * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '     * remain in the contract, the rest are returned to the owner.\n', '     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '     */\n', '    function revoke(address _beneficiary) public onlyOwner whenPlanExist(_beneficiary) {\n', '\n', '        require(plans[_beneficiary].revocable && !plans[_beneficiary].isRevoked);\n', '        \n', '        //Transfer the attribution token to the beneficiary before revoking.\n', '        release(_beneficiary);\n', '\n', '        uint256 refund = revokeableAmount(_beneficiary);\n', '    \n', '        plans[_beneficiary].isRevoked = true;\n', '        payPool = payPool.sub(refund);\n', '        \n', '        token.safeTransfer(owner, refund);\n', '        emit Revoked(_beneficiary, refund);\n', '    }\n', '    \n', '    /**\n', '     * @dev Calculates the amount that recoverable token.\n', '     */\n', '    function revokeableAmount(address _beneficiary) public view whenPlanExist(_beneficiary) returns (uint256) {\n', '\n', '        uint256 totalBalance = 0;\n', '        \n', '        if(plans[_beneficiary].isRevoked) {\n', '            totalBalance = 0;\n', '        } else if (block.timestamp <= plans[_beneficiary].locktoTime) {\n', '            totalBalance = plans[_beneficiary].totalToken;\n', '        } else {\n', '            totalBalance = plans[_beneficiary].totalToken.sub(vestedAmount(_beneficiary));\n', '        }\n', '        return totalBalance;\n', '    }\n', '    \n', '    /**\n', '     * Current token balance of the contract\n', '     */\n', '    function thisTokenBalance() public view returns (uint256) {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '}']