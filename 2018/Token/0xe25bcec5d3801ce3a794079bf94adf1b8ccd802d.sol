['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract MANToken {\n', '    string public name; // MAN\n', '    string public symbol; // MAN\n', '    uint256 public decimals = 18;\n', '    uint256 DECIMALSFACTOR = 10**decimals;\n', '    uint256 constant weiDECIMALS = 18; \n', '    uint256 weiFACTOR =  10 ** weiDECIMALS; \n', '    \n', '    address ethFundAddress  = 0xdF039a39899eC1Bc571eBcb7944B3b3A0A30C36d; \n', '\n', '    address address1 = 0x75C6CBe2cd50932D1E565A9B1Aea9F7671c7fEbc; \n', '    address address2 = 0xD94D499685bDdC28477f394bf3d7e4Ba729077f6; \n', '    address address3 = 0x11786422E7dF7A88Ea47C2dA76EE0a94aD2c5c64; \n', '    address address4 = 0xb1Df8C1a78582Db6CeEbFe6aAE3E01617198322e; \n', '    address address5 = 0x7eCc05F2da74036a9152dB3a4891f0AFDBB4eCc2; \n', '    address address6 = 0x39aC1d06EA941E2A41113F54737D49d9dD2c5022; \n', '    address address7 = 0x371895F2000053a61216011Aa43542cdd0dEb750; \n', '    address address8 = 0xf6a5F686bAd809b2Eb163fBE7Df646c472458852; \n', '    address address9 = 0xD21eF6388b232E5ceb6c2a43F93D7337dEb63274; \n', '    address address10 = 0xE92fFe240773E1F60fe17db7fAF8a3CdCD7bC6EC;\n', '\n', '    uint256 public startTime; \n', '    uint256 public endTime; \n', '    uint256 lockedDuration = 3 * 24 * 60 * 60; \n', '    uint256 tokenPerETH = 3780; \n', '\n', '    address contractOwner; \n', '    uint256 ethRaised; \n', '    uint256 tokenDistributed; \n', '    uint256 donationCount; \n', '    uint256 public currentTokenPerETH = tokenPerETH;     \n', '\n', '    uint256 public totalSupply = 250 * (10**6) * DECIMALSFACTOR;\n', '    uint256 softCap = 20 * (10**6) * DECIMALSFACTOR; \n', '    uint256 reservedAmountPerAddress = 20 * (10**6) * DECIMALSFACTOR;\n', '    uint256 minimumDonation = 5 * 10 ** (weiDECIMALS - 1); \n', '    \n', '    uint256 public availableSupply = totalSupply; \n', '    uint8 public currentStage = 0;\n', '    bool public isInLockStage = true;\n', '    bool public finalised = false;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function MANToken(\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint256 _startTimestamp,\n', '        uint256 _endTimestamp) \n', '    public {\n', '        contractOwner = msg.sender;\n', '\n', '        name = tokenName; \n', '        symbol = tokenSymbol; \n', '        startTime = _startTimestamp;\n', '        endTime = _endTimestamp; \n', '\n', '        balanceOf[address1] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address2] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address3] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address4] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address5] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address6] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address7] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address8] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address9] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address10] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[contractOwner] = availableSupply;\n', '    }\n', '\n', '\n', '    function () payable public {\n', '        require(!finalised);\n', '\n', '        require(block.timestamp >= startTime);\n', '        require(block.timestamp <= endTime);\n', '\n', '        require(availableSupply > 0);\n', '\n', '        mintMAN(); \n', '    }\n', '\n', '    function mintMAN() payable public {\n', '        require(msg.value >= minimumDonation); \n', '\n', '        uint256 preLockedTime = startTime + lockedDuration;\n', '        \n', '        if (block.timestamp <= preLockedTime) { \n', '            currentStage = 0;\n', '            isInLockStage = true;\n', '        }else if (block.timestamp > preLockedTime && tokenDistributed <= softCap) { \n', '            currentStage = 1;\n', '            isInLockStage = true;\n', '        }else if (block.timestamp > preLockedTime && tokenDistributed <= 35 * (10**6) * DECIMALSFACTOR) { \n', '            currentTokenPerETH = 3430;\n', '            currentStage = 2;\n', '            isInLockStage = false;\n', '        }else if (block.timestamp > preLockedTime && tokenDistributed >= 35 * (10**6) * DECIMALSFACTOR) { \n', '            currentTokenPerETH = 3150;\n', '            currentStage = 3;\n', '            isInLockStage = false;\n', '        }\n', '\n', '        uint256 tokenValue = currentTokenPerETH * msg.value / 10 ** (weiDECIMALS - decimals);\n', '        uint256 etherValue = msg.value;\n', '\n', '        if (tokenValue > availableSupply) {\n', '            tokenValue = availableSupply;\n', '            \n', '            etherValue = weiFACTOR * availableSupply / currentTokenPerETH / DECIMALSFACTOR;\n', '\n', '            require(msg.sender.send(msg.value - etherValue));\n', '        }\n', '\n', '        ethRaised += etherValue;\n', '        donationCount += 1;\n', '        availableSupply -= tokenValue;\n', '\n', '        _transfer(contractOwner, msg.sender, tokenValue);\n', '        tokenDistributed += tokenValue;\n', '\n', '        require(ethFundAddress.send(etherValue));\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(!isInLockStage);\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    function finalise() public {\n', '        require( msg.sender == contractOwner );\n', '        require(!finalised);\n', '\n', '        finalised = true;\n', '    } \n', '\n', '\tfunction unlockTokens() public {\n', '        require(msg.sender == contractOwner);\n', '        isInLockStage = false;\n', '    }\n', '\n', '    function tokenHasDistributed() public constant returns (uint256) {\n', '        return tokenDistributed;\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract MANToken {\n', '    string public name; // MAN\n', '    string public symbol; // MAN\n', '    uint256 public decimals = 18;\n', '    uint256 DECIMALSFACTOR = 10**decimals;\n', '    uint256 constant weiDECIMALS = 18; \n', '    uint256 weiFACTOR =  10 ** weiDECIMALS; \n', '    \n', '    address ethFundAddress  = 0xdF039a39899eC1Bc571eBcb7944B3b3A0A30C36d; \n', '\n', '    address address1 = 0x75C6CBe2cd50932D1E565A9B1Aea9F7671c7fEbc; \n', '    address address2 = 0xD94D499685bDdC28477f394bf3d7e4Ba729077f6; \n', '    address address3 = 0x11786422E7dF7A88Ea47C2dA76EE0a94aD2c5c64; \n', '    address address4 = 0xb1Df8C1a78582Db6CeEbFe6aAE3E01617198322e; \n', '    address address5 = 0x7eCc05F2da74036a9152dB3a4891f0AFDBB4eCc2; \n', '    address address6 = 0x39aC1d06EA941E2A41113F54737D49d9dD2c5022; \n', '    address address7 = 0x371895F2000053a61216011Aa43542cdd0dEb750; \n', '    address address8 = 0xf6a5F686bAd809b2Eb163fBE7Df646c472458852; \n', '    address address9 = 0xD21eF6388b232E5ceb6c2a43F93D7337dEb63274; \n', '    address address10 = 0xE92fFe240773E1F60fe17db7fAF8a3CdCD7bC6EC;\n', '\n', '    uint256 public startTime; \n', '    uint256 public endTime; \n', '    uint256 lockedDuration = 3 * 24 * 60 * 60; \n', '    uint256 tokenPerETH = 3780; \n', '\n', '    address contractOwner; \n', '    uint256 ethRaised; \n', '    uint256 tokenDistributed; \n', '    uint256 donationCount; \n', '    uint256 public currentTokenPerETH = tokenPerETH;     \n', '\n', '    uint256 public totalSupply = 250 * (10**6) * DECIMALSFACTOR;\n', '    uint256 softCap = 20 * (10**6) * DECIMALSFACTOR; \n', '    uint256 reservedAmountPerAddress = 20 * (10**6) * DECIMALSFACTOR;\n', '    uint256 minimumDonation = 5 * 10 ** (weiDECIMALS - 1); \n', '    \n', '    uint256 public availableSupply = totalSupply; \n', '    uint8 public currentStage = 0;\n', '    bool public isInLockStage = true;\n', '    bool public finalised = false;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function MANToken(\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint256 _startTimestamp,\n', '        uint256 _endTimestamp) \n', '    public {\n', '        contractOwner = msg.sender;\n', '\n', '        name = tokenName; \n', '        symbol = tokenSymbol; \n', '        startTime = _startTimestamp;\n', '        endTime = _endTimestamp; \n', '\n', '        balanceOf[address1] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address2] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address3] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address4] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address5] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address6] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address7] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address8] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address9] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[address10] += reservedAmountPerAddress;\n', '        availableSupply -= reservedAmountPerAddress;\n', '\n', '        balanceOf[contractOwner] = availableSupply;\n', '    }\n', '\n', '\n', '    function () payable public {\n', '        require(!finalised);\n', '\n', '        require(block.timestamp >= startTime);\n', '        require(block.timestamp <= endTime);\n', '\n', '        require(availableSupply > 0);\n', '\n', '        mintMAN(); \n', '    }\n', '\n', '    function mintMAN() payable public {\n', '        require(msg.value >= minimumDonation); \n', '\n', '        uint256 preLockedTime = startTime + lockedDuration;\n', '        \n', '        if (block.timestamp <= preLockedTime) { \n', '            currentStage = 0;\n', '            isInLockStage = true;\n', '        }else if (block.timestamp > preLockedTime && tokenDistributed <= softCap) { \n', '            currentStage = 1;\n', '            isInLockStage = true;\n', '        }else if (block.timestamp > preLockedTime && tokenDistributed <= 35 * (10**6) * DECIMALSFACTOR) { \n', '            currentTokenPerETH = 3430;\n', '            currentStage = 2;\n', '            isInLockStage = false;\n', '        }else if (block.timestamp > preLockedTime && tokenDistributed >= 35 * (10**6) * DECIMALSFACTOR) { \n', '            currentTokenPerETH = 3150;\n', '            currentStage = 3;\n', '            isInLockStage = false;\n', '        }\n', '\n', '        uint256 tokenValue = currentTokenPerETH * msg.value / 10 ** (weiDECIMALS - decimals);\n', '        uint256 etherValue = msg.value;\n', '\n', '        if (tokenValue > availableSupply) {\n', '            tokenValue = availableSupply;\n', '            \n', '            etherValue = weiFACTOR * availableSupply / currentTokenPerETH / DECIMALSFACTOR;\n', '\n', '            require(msg.sender.send(msg.value - etherValue));\n', '        }\n', '\n', '        ethRaised += etherValue;\n', '        donationCount += 1;\n', '        availableSupply -= tokenValue;\n', '\n', '        _transfer(contractOwner, msg.sender, tokenValue);\n', '        tokenDistributed += tokenValue;\n', '\n', '        require(ethFundAddress.send(etherValue));\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(!isInLockStage);\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    function finalise() public {\n', '        require( msg.sender == contractOwner );\n', '        require(!finalised);\n', '\n', '        finalised = true;\n', '    } \n', '\n', '\tfunction unlockTokens() public {\n', '        require(msg.sender == contractOwner);\n', '        isInLockStage = false;\n', '    }\n', '\n', '    function tokenHasDistributed() public constant returns (uint256) {\n', '        return tokenDistributed;\n', '    }\n', '}']
