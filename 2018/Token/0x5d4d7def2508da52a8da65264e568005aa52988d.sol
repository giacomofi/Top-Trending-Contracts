['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', ' \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', ' \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a); \n', '    return a - b; \n', '  } \n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) { \n', '    uint256 c = a + b; assert(c >= a);\n', '    return c;\n', '  }\n', ' \n', '}\n', '\n', '\n', 'contract BlockContract {\n', '\n', '    uint256 totalSupply_; \n', '    string public constant name = "BlockContract";\n', '    string public constant symbol = "BLOCK";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant initialSupply = 100000000*(10**uint256(decimals));\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    mapping (address => uint256) balances; \n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    function totalSupply() public view returns (uint256){\n', '        return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256){\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '  }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool ) {\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value); \n', '        balances[msg.sender] = balances[msg.sender] - _value; \n', '        balances[_to] = balances[_to] + _value; \n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]); \n', '        balances[_from] = balances[_from] - _value; \n', '        balances[_to] = balances[_to] + _value; \n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value; \n', '        emit Transfer(_from, _to, _value); \n', '        return true; \n', '        } \n', '\n', '     function increaseApproval(address _spender, uint _addedValue) public returns (bool) { \n', '     allowed[msg.sender][_spender] = allowed[msg.sender][_spender] + _addedValue; \n', '     emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); \n', '     return true; \n', '     } \n', ' \n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) { \n', '    uint oldValue = allowed[msg.sender][_spender]; \n', '    if (_subtractedValue > oldValue) {\n', '\n', '        allowed[msg.sender][_spender] = 0;\n', '    } \n', '        else {\n', '        allowed[msg.sender][_spender] = oldValue - _subtractedValue;\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '    }\n', '\n', '    function BlockContract() public {\n', '        totalSupply_ = initialSupply;\n', '        balances[msg.sender] = initialSupply;\n', '        emit Transfer(0x0, msg.sender, initialSupply);\n', '    }\n', '}']