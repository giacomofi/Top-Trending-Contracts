['pragma solidity ^0.4.18;\n', '\n', 'contract PieTokenBase {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '    \n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '\n', '    function PieTokenBase() public {\n', '        \n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address src) public view returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) public view returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint wad) public returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '\n', '        Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function approve(address guy, uint256 wad) public returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '}\n', '\n', 'contract PieToken is PieTokenBase {\n', '    string  public  symbol = "PIE";\n', '    string  public name = "CANDY PIE";\n', '    uint256  public  decimals = 18; \n', '    address public owner;\n', '\n', '    function PieToken() public {\n', '        _supply = 10*(10**8)*(10**18);\n', '        owner = msg.sender;\n', '        _balances[msg.sender] = _supply;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        return super.transfer(dst, wad);\n', '    }\n', '\n', '    function transferFrom( address src, address dst, uint wad ) public returns (bool) {\n', '        return super.transferFrom(src, dst, wad);\n', '    }\n', '\n', '    function approve(address guy, uint wad) public returns (bool) {\n', '        return super.approve(guy, wad);\n', '    }\n', '\n', '    function burn(uint128 wad) public {\n', '        require(msg.sender==owner);\n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _supply = sub(_supply, wad);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract PieTokenBase {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '    \n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '\n', '    function PieTokenBase() public {\n', '        \n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address src) public view returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) public view returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint wad) public returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '\n', '        Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function approve(address guy, uint256 wad) public returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '}\n', '\n', 'contract PieToken is PieTokenBase {\n', '    string  public  symbol = "PIE";\n', '    string  public name = "CANDY PIE";\n', '    uint256  public  decimals = 18; \n', '    address public owner;\n', '\n', '    function PieToken() public {\n', '        _supply = 10*(10**8)*(10**18);\n', '        owner = msg.sender;\n', '        _balances[msg.sender] = _supply;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        return super.transfer(dst, wad);\n', '    }\n', '\n', '    function transferFrom( address src, address dst, uint wad ) public returns (bool) {\n', '        return super.transferFrom(src, dst, wad);\n', '    }\n', '\n', '    function approve(address guy, uint wad) public returns (bool) {\n', '        return super.approve(guy, wad);\n', '    }\n', '\n', '    function burn(uint128 wad) public {\n', '        require(msg.sender==owner);\n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _supply = sub(_supply, wad);\n', '    }\n', '}']
