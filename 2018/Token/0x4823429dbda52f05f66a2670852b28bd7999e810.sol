['pragma solidity ^0.4.18;\n', '\n', '\n', '//>> Reference to https://github.com/Arachnid/solidity-stringutils\n', '\n', 'library strings {\n', '    struct slice {\n', '        uint _len;\n', '        uint _ptr;\n', '    }\n', '    \n', '    /*\n', '     * @dev Returns a slice containing the entire string.\n', '     * @param self The string to make a slice from.\n', '     * @return A newly allocated slice containing the entire string.\n', '     */\n', '    function toSlice(string self) internal pure returns (slice) {\n', '        uint ptr;\n', '        assembly {\n', '            ptr := add(self, 0x20)\n', '        }\n', '        return slice(bytes(self).length, ptr);\n', '    }\n', '    \n', '    /*\n', '     * @dev Returns true if the slice is empty (has a length of 0).\n', '     * @param self The slice to operate on.\n', '     * @return True if the slice is empty, False otherwise.\n', '     */\n', '    function empty(slice self) internal pure returns (bool) {\n', '        return self._len == 0;\n', '    }\n', '}\n', '\n', '//<< Reference to https://github.com/Arachnid/solidity-stringutils\n', '\n', '\n', '\n', '\n', '//>> Reference to https://github.com/OpenZeppelin/zeppelin-solidity\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', '   @title ERC827 interface, an extension of ERC20 token standard\n', '   Interface of a ERC827 token, following the ERC20 standard with extra\n', '   methods to transfer value and data and execute calls in transfers and\n', '   approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '\n', '  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n', '  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n', '  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n', '\n', '}\n', '\n', '\n', '/**\n', '   @title ERC827, an extension of ERC20 token standard\n', '   Implementation the ERC827, following the ERC20 standard with extra\n', '   methods to transfer value and data and execute calls in transfers and\n', '   approvals.\n', '   Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, StandardToken {\n', '\n', '  /**\n', '     @dev Addition to ERC20 token methods. It allows to\n', '     approve the transfer of value and execute a call with the sent data.\n', '     Beware that changing an allowance with this method brings the risk that\n', '     someone may use both the old and the new allowance by unfortunate\n', '     transaction ordering. One possible solution to mitigate this race condition\n', '     is to first reduce the spender&#39;s allowance to 0 and set the desired value\n', '     afterwards:\n', '     https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     @param _spender The address that will spend the funds.\n', '     @param _value The amount of tokens to be spent.\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.approve(_spender, _value);\n', '\n', '    require(_spender.call(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '     @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '     address and execute a call with the sent data on the same transaction\n', '     @param _to address The address which you want to transfer to\n', '     @param _value uint256 the amout of tokens to be transfered\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    require(_to != address(this));\n', '\n', '    super.transfer(_to, _value);\n', '\n', '    require(_to.call(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '     @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '     another and make a contract call on the same transaction\n', '     @param _from The address which you want to send tokens from\n', '     @param _to The address which you want to transfer to\n', '     @param _value The amout of tokens to be transferred\n', '     @param _data ABI-encoded contract call to call `_to` address.\n', '     @return true if the call function was executed successfully\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    require(_to != address(this));\n', '\n', '    super.transferFrom(_from, _to, _value);\n', '\n', '    require(_to.call(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '   * an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.increaseApproval(_spender, _addedValue);\n', '\n', '    require(_spender.call(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '   * an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n', '    require(_spender != address(this));\n', '\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    require(_spender.call(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '//<< Reference to https://github.com/OpenZeppelin/zeppelin-solidity\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title MultiOwnable\n', ' */\n', 'contract MultiOwnable {\n', '    address public root;\n', '    mapping (address => address) public owners; // owner => parent of owner\n', '    \n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function MultiOwnable() public {\n', '        root= msg.sender;\n', '        owners[root]= root;\n', '    }\n', '    \n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender] != 0);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev Adding new owners\n', '    */\n', '    function newOwner(address _owner) onlyOwner public returns (bool) {\n', '        require(_owner != 0);\n', '        owners[_owner]= msg.sender;\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Deleting owners\n', '     */\n', '    function deleteOwner(address _owner) onlyOwner public returns (bool) {\n', '        require(owners[_owner] == msg.sender || (owners[_owner] != 0 && msg.sender == root));\n', '        owners[_owner]= 0;\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title KStarCoinBasic\n', ' */\n', 'contract KStarCoinBasic is ERC827Token, MultiOwnable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '    using strings for *;\n', '\n', '    // KStarCoin Distribution\n', '    // - Crowdsale : 9%(softcap) ~ 45%(hardcap)\n', '    // - Reserve: 15%\n', '    // - Team: 10%\n', '    // - Advisors & Partners: 5%\n', '    // - Bounty Program + Ecosystem : 25% ~ 61%\n', '    uint256 public capOfTotalSupply;\n', '    uint256 public constant INITIAL_SUPPLY= 30e6 * 1 ether; // Reserve(15) + Team(10) + Advisors&Patners(5)\n', '\n', '    uint256 public crowdsaleRaised;\n', '    uint256 public constant CROWDSALE_HARDCAP= 45e6 * 1 ether; // Crowdsale(Max 45)\n', '\n', '    /**\n', '     * @dev Function to increase capOfTotalSupply in the next phase of KStarCoin&#39;s ecosystem\n', '     */\n', '    function increaseCap(uint256 _addedValue) onlyOwner public returns (bool) {\n', '        require(_addedValue >= 100e6 * 1 ether);\n', '        capOfTotalSupply = capOfTotalSupply.add(_addedValue);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to check whether the current supply exceeds capOfTotalSupply\n', '     */\n', '    function checkCap(uint256 _amount) public view returns (bool) {\n', '        return (totalSupply_.add(_amount) <= capOfTotalSupply);\n', '    }\n', '    \n', '    //> for ERC20\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(super.transfer(_to, _value));\n', '        KSC_Send(msg.sender, _to, _value, "");\n', '        KSC_Receive(_to, msg.sender, _value, "");\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(super.transferFrom(_from, _to, _value));\n', '        KSC_SendTo(_from, _to, _value, "");\n', '        KSC_ReceiveFrom(_to, _from, _value, "");\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _to, uint256 _value) public returns (bool) {\n', '        require(super.approve(_to, _value));\n', '        KSC_Approve(msg.sender, _to, _value, "");\n', '        return true;\n', '    }\n', '    \n', '    // additional StandardToken method of zeppelin-solidity\n', '    function increaseApproval(address _to, uint _addedValue) public returns (bool) {\n', '        require(super.increaseApproval(_to, _addedValue));\n', '        KSC_ApprovalInc(msg.sender, _to, _addedValue, "");\n', '        return true;\n', '    }\n', '    \n', '    // additional StandardToken method of zeppelin-solidity\n', '    function decreaseApproval(address _to, uint _subtractedValue) public returns (bool) {\n', '        require(super.decreaseApproval(_to, _subtractedValue));\n', '        KSC_ApprovalDec(msg.sender, _to, _subtractedValue, "");\n', '        return true;\n', '    }\n', '\t//<\n', '    \n', '    //> for ERC827\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '        return transfer(_to, _value, _data, "");\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n', '        return transferFrom(_from, _to, _value, _data, "");\n', '    }\n', '    \n', '    function approve(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '        return approve(_to, _value, _data, "");\n', '    }\n', '    \n', '    // additional StandardToken method of zeppelin-solidity\n', '    function increaseApproval(address _to, uint _addedValue, bytes _data) public returns (bool) {\n', '        return increaseApproval(_to, _addedValue, _data, "");\n', '    }\n', '    \n', '    // additional StandardToken method of zeppelin-solidity\n', '    function decreaseApproval(address _to, uint _subtractedValue, bytes _data) public returns (bool) {\n', '        return decreaseApproval(_to, _subtractedValue, _data, "");\n', '    }\n', '\t//<\n', '    \n', '    //> notation for ERC827\n', '    function transfer(address _to, uint256 _value, bytes _data, string _note) public returns (bool) {\n', '        require(super.transfer(_to, _value, _data));\n', '        KSC_Send(msg.sender, _to, _value, _note);\n', '        KSC_Receive(_to, msg.sender, _value, _note);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value, bytes _data, string _note) public returns (bool) {\n', '        require(super.transferFrom(_from, _to, _value, _data));\n', '        KSC_SendTo(_from, _to, _value, _note);\n', '        KSC_ReceiveFrom(_to, _from, _value, _note);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _to, uint256 _value, bytes _data, string _note) public returns (bool) {\n', '        require(super.approve(_to, _value, _data));\n', '        KSC_Approve(msg.sender, _to, _value, _note);\n', '        return true;\n', '    }\n', '    \n', '    function increaseApproval(address _to, uint _addedValue, bytes _data, string _note) public returns (bool) {\n', '        require(super.increaseApproval(_to, _addedValue, _data));\n', '        KSC_ApprovalInc(msg.sender, _to, _addedValue, _note);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseApproval(address _to, uint _subtractedValue, bytes _data, string _note) public returns (bool) {\n', '        require(super.decreaseApproval(_to, _subtractedValue, _data));\n', '        KSC_ApprovalDec(msg.sender, _to, _subtractedValue, _note);\n', '        return true;\n', '    }\n', '\t//<\n', '      \n', '    /**\n', '     * @dev Function to mint coins\n', '     * @param _to The address that will receive the minted coins.\n', '     * @param _amount The amount of coins to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     * @dev reference : https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/MintableToken.sol\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner internal returns (bool) {\n', '        require(_to != address(0));\n', '        require(checkCap(_amount));\n', '\n', '        totalSupply_= totalSupply_.add(_amount);\n', '        balances[_to]= balances[_to].add(_amount);\n', '\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to mint coins\n', '     * @param _to The address that will receive the minted coins.\n', '     * @param _amount The amount of coins to mint.\n', '     * @param _note The notation for ethereum blockchain event log system\n', '     * @return A boolean that indicates if the operation was successful.\n', '     * @dev reference : https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/MintableToken.sol\n', '     */\n', '    function mint(address _to, uint256 _amount, string _note) onlyOwner public returns (bool) {\n', '        require(mint(_to, _amount));\n', '        KSC_Mint(_to, msg.sender, _amount, _note);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of coins.\n', '     * @param _to The address that will be burned the coins.\n', '     * @param _amount The amount of coins to be burned.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     * @dev reference : https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/BurnableToken.sol\n', '     */\n', '    function burn(address _to, uint256 _amount) onlyOwner internal returns (bool) {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '\n', '        balances[_to]= balances[_to].sub(_amount);\n', '        totalSupply_= totalSupply_.sub(_amount);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Burns a specific amount of coins.\n', '     * @param _to The address that will be burned the coins.\n', '     * @param _amount The amount of coins to be burned.\n', '     * @param _note The notation for ethereum blockchain event log system\n', '     * @return A boolean that indicates if the operation was successful.\n', '     * @dev reference : https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/BurnableToken.sol\n', '     */\n', '    function burn(address _to, uint256 _amount, string _note) onlyOwner public returns (bool) {\n', '        require(burn(_to, _amount));\n', '        KSC_Burn(_to, msg.sender, _amount, _note);\n', '        return true;\n', '    }\n', '    \n', '    // for crowdsale\n', '    /**\n', '     * @dev Function which allows users to buy KStarCoin during the crowdsale period\n', '     * @param _to The address that will receive the coins.\n', '     * @param _value The amount of coins to sell.\n', '     * @param _note The notation for ethereum blockchain event log system\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function sell(address _to, uint256 _value, string _note) onlyOwner public returns (bool) {\n', '        require(crowdsaleRaised.add(_value) <= CROWDSALE_HARDCAP);\n', '        require(mint(_to, _value));\n', '        \n', '        crowdsaleRaised= crowdsaleRaised.add(_value);\n', '        KSC_Buy(_to, msg.sender, _value, _note);\n', '        return true;\n', '    }\n', '    \n', '    // for buyer with cryptocurrency other than ETH\n', '    /**\n', '     * @dev This function is occured when owner mint coins to users as they buy with cryptocurrency other than ETH.\n', '     * @param _to The address that will receive the coins.\n', '     * @param _value The amount of coins to mint.\n', '     * @param _note The notation for ethereum blockchain event log system\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintToOtherCoinBuyer(address _to, uint256 _value, string _note) onlyOwner public returns (bool) {\n', '        require(mint(_to, _value));\n', '        KSC_BuyOtherCoin(_to, msg.sender, _value, _note);\n', '        return true;\n', '    }\n', '  \n', '    // for bounty program\n', '    /**\n', '     * @dev Function to reward influencers with KStarCoin\n', '     * @param _to The address that will receive the coins.\n', '     * @param _value The amount of coins to mint.\n', '     * @param _note The notation for ethereum blockchain event log system\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintToInfluencer(address _to, uint256 _value, string _note) onlyOwner public returns (bool) {\n', '        require(mint(_to, _value));\n', '        KSC_GetAsInfluencer(_to, msg.sender, _value, _note);\n', '        return true;\n', '    }\n', '    \n', '    // for KSCPoint (KStarLive ecosystem point)\n', '    /**\n', '     * @dev Function to exchange KSCPoint to KStarCoin\n', '     * @param _to The address that will receive the coins.\n', '     * @param _value The amount of coins to mint.\n', '     * @param _note The notation for ethereum blockchain event log system\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function exchangePointToCoin(address _to, uint256 _value, string _note) onlyOwner public returns (bool) {\n', '        require(mint(_to, _value));\n', '        KSC_ExchangePointToCoin(_to, msg.sender, _value, _note);\n', '        return true;\n', '    }\n', '    \n', '    // Event functions to log the notation for ethereum blockchain \n', '    // for initializing\n', '    event KSC_Initialize(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    \n', '    // for transfer()\n', '    event KSC_Send(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    event KSC_Receive(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    \n', '    // for approve(), increaseApproval(), decreaseApproval()\n', '    event KSC_Approve(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    event KSC_ApprovalInc(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    event KSC_ApprovalDec(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    \n', '    // for transferFrom()\n', '    event KSC_SendTo(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    event KSC_ReceiveFrom(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    \n', '    // for mint(), burn()\n', '    event KSC_Mint(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    event KSC_Burn(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    \n', '    // for crowdsale\n', '    event KSC_Buy(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    \n', '    // for buyer with cryptocurrency other than ETH\n', '    event KSC_BuyOtherCoin(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '    \n', '    // for bounty program\n', '    event KSC_GetAsInfluencer(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '\n', '    // for KSCPoint (KStarLive ecosystem point)\n', '    event KSC_ExchangePointToCoin(address indexed _src, address indexed _desc, uint256 _value, string _note);\n', '}\n', '\n', '\n', '/**\n', ' * @title KStarCoin v1.0\n', ' * @author Tae Kim\n', ' * @notice KStarCoin is an ERC20 (with an alternative of ERC827) Ethereum based token, which will be integrated in KStarLive platform.\n', ' */\n', 'contract KStarCoin is KStarCoinBasic {\n', '    string public constant name= "KStarCoin";\n', '    string public constant symbol= "KSC";\n', '    uint8 public constant decimals= 18;\n', '    \n', '    // Constructure\n', '    function KStarCoin() public {\n', '        totalSupply_= INITIAL_SUPPLY;\n', '        balances[msg.sender]= INITIAL_SUPPLY;\n', '\t    capOfTotalSupply = 100e6 * 1 ether;\n', '        crowdsaleRaised= 0;\n', '        \n', '        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '        KSC_Initialize(msg.sender, 0x0, INITIAL_SUPPLY, "");\n', '    }\n', '}']