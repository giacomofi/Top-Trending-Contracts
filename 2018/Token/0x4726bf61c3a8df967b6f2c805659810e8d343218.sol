['pragma solidity ^0.4.4;\n', '\n', 'contract Agriss {\n', '    uint8 public decimals = 18;\n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    constructor (\n', '        uint256 initialSupply\n', '        ) public {\n', '        balanceOf[msg.sender] = initialSupply * 10 ** uint256(decimals);              \n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);           \n', '        require(balanceOf[_to] + _value >= balanceOf[_to]); \n', '        balanceOf[msg.sender] -= _value;                    \n', '        balanceOf[_to] += _value;                           \n', '    }\n', '\n', '    function getBalanceOf(address src) constant public returns (uint256) {\n', '        return balanceOf[src];\n', '    }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'contract Agriss {\n', '    uint8 public decimals = 18;\n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    constructor (\n', '        uint256 initialSupply\n', '        ) public {\n', '        balanceOf[msg.sender] = initialSupply * 10 ** uint256(decimals);              \n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);           \n', '        require(balanceOf[_to] + _value >= balanceOf[_to]); \n', '        balanceOf[msg.sender] -= _value;                    \n', '        balanceOf[_to] += _value;                           \n', '    }\n', '\n', '    function getBalanceOf(address src) constant public returns (uint256) {\n', '        return balanceOf[src];\n', '    }\n', '}']
