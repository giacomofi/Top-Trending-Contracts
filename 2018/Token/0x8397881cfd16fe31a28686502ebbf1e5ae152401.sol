['//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '//File: contracts/ico/MftToken.sol\n', '/**\n', ' * @title MFT token\n', ' *\n', ' * @version 1.0\n', ' * @author Validity Labs AG <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="365f5850597640575a5f525f424f5a57544518594451">[email&#160;protected]</a>>\n', ' */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract MftToken is BurnableToken, MintableToken, PausableToken {\n', '    /* solhint-disable */\n', '    string public constant name = "MindFire Token";\n', '    string public constant symbol = "MFT";\n', '    uint8 public constant decimals = 18;\n', '    /* solhint-enable */\n', '\n', '    /** \n', '    * @dev `Checkpoint` is the structure that attaches a block number to a\n', '    * given value, the block number attached is the one that last changed the value\n', '    */\n', '    struct Checkpoint {\n', '        // `fromBlock` is the block number that the value was generatedsuper.mint(_to, _value); from\n', '        uint128 fromBlock;\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] public totalSupplyHistory;\n', '\n', '    /** \n', '    * `balances` is the map that tracks the balance of each address, in this\n', '    * contract when the balance changes the block number that the change\n', '    * occurred is also included in the map\n', '    */\n', '    mapping (address => Checkpoint[]) public balances;\n', '\n', '    /**\n', '     * @dev Constructor of MftToken that instantiates a new Mintable Pauseable Token\n', '     */\n', '    constructor() public {\n', '        paused = true;  // token should not be transferrable until after all tokens have been issued\n', '    }\n', '\n', '    /**\n', '    * @dev allows batch minting through the mint function call\n', '    * @param _to address[]\n', '    * @param _value uint256[]\n', '    */\n', '    function batchMint(address[] _to, uint256[] _value) external {\n', '        require(_to.length == _value.length, "[] len !=");\n', '\n', '        for (uint256 i; i < _to.length; i = i.add(1)) {\n', '            mint(_to[i], _value[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Send `_value` tokens to `_to` from `msg.sender`\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of tokens to be transferred\n', '    * @return Whether the transfer was successful or not\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(!paused, "token is paused");\n', '\n', '        doTransfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Send `_value` tokens to `_to` from `_from` on the condition it is approved by `_from`\n', '    * @param _from The address holding the tokens being transferred\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of tokens to be transferred\n', '    * @return True if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(!paused, "token is paused");\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        doTransfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @param _owner The address that&#39;s balance is being requested\n', '    * @return The balance of `_owner` at the current block\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /**\n', '    * @dev `msg.sender` approves `_spender` to spend `_value` tokens on\n', '    *  its behalf. This is a modified version of the ERC20 approve function\n', '    *  to be a little bit safer\n', '    * @param _spender The address of the account able to transfer the tokens\n', '    * @param _value The amount of tokens to be approved for transfer\n', '    * @return True if the approval was successful\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(!paused, "token is paused");\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0), "allowed not 0");\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev This function makes it easy to read the `allowed[]` map\n', '    * @param _owner The address of the account that owns the token\n', '    * @param _spender The address of the account able to transfer the tokens\n', '    * @return Amount of remaining tokens of _owner that _spender is allowed\n', '    *  to spend\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    *  @dev This function makes it easy to get the total number of tokens\n', '    * @return The total number of tokens\n', '    */\n', '    function totalSupply() public constant returns (uint256) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '    /**\n', '    * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    * @param _owner The address from which the balance will be retrieved\n', '    * @param _blockNumber The block number when the balance is queried\n', '    * @return The balance at `_blockNumber`\n', '    */\n', '    function balanceOfAt(address _owner, uint256 _blockNumber) public constant returns (uint256) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            return 0;\n', '        } else {    // This will return the expected balance during normal situations\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Total amount of tokens at a specific `_blockNumber`.\n', '    * @param _blockNumber The block number when the totalSupply is queried\n', '    * @return The total amount of tokens at `_blockNumber`\n', '    */\n', '    function totalSupplyAt(uint256 _blockNumber) public constant returns(uint256) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            return 0;\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Generates `_value` tokens that are assigned to `_owner`\n', '    * @param _to The address that will be assigned the new tokens\n', '    * @param _value The quantity of tokens generated\n', '    * @return True if the tokens are generated correctly\n', '    */\n', '    function mint(address _to, uint256 _value) public hasMintPermission canMint returns (bool) {\n', '        uint256 curTotalSupply = totalSupply();\n', '        uint256 previousBalanceTo = balanceOf(_to);\n', '\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply.add(_value));\n', '        updateValueAtNow(balances[_to], previousBalanceTo.add(_value));\n', '\n', '        emit Mint(_to, _value);\n', '        emit Transfer(0, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev called to burn _value of tokens by the msg.sender\n', '    * @param _value uint256 the amount of tokens to burn\n', '    */\n', '    function burn(uint256 _value) public {\n', '        uint256 curTotalSupply = totalSupply();\n', '        uint256 previousBalanceFrom = balanceOf(msg.sender);\n', '\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_value));\n', '        updateValueAtNow(balances[msg.sender], previousBalanceFrom.sub(_value));\n', '\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, 0, _value);\n', '    }\n', '\n', '    /*** INTERNAL FUNCTIONS ***/\n', '    /**\n', '    * @dev This is the actual transfer function\n', '    * @param _from The address holding the tokens being transferred\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of tokens to be transferred\n', '    * @return True if the transfer was successful\n', '    */\n', '    function doTransfer(address _from, address _to, uint256 _value) internal {\n', '        if (_value == 0) {\n', '            emit Transfer(_from, _to, _value);    // Follow the spec to louch the event when transfer 0\n', '            return;\n', '        }\n', '\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != address(0)) && (_to != address(this)), "cannot transfer to 0x0 or token contract");\n', '\n', '        \n', '        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n', '        // First update the balance array with the new value for the address\n', '        //  sending the tokens\n', '        updateValueAtNow(balances[_from], previousBalanceFrom.sub(_value));\n', '\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n', '        updateValueAtNow(balances[_to], previousBalanceTo.add(_value));\n', '\n', '        // An event to make the transfer easy to find on the blockchain\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    * @param checkpoints The history of values being queried\n', '    * @param _block The block number to retrieve the value at\n', '    * @return The number of tokens being queried\n', '    */\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length.sub(1)].fromBlock) {\n', '            return checkpoints[checkpoints.length.sub(1)].value;\n', '        }\n', '\n', '        if (_block < checkpoints[0].fromBlock) {\n', '            return 0;\n', '        } \n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length.sub(1);\n', '\n', '        while (max > min) {\n', '            uint mid = (max.add(min).add(1)).div(2);\n', '            if (checkpoints[mid].fromBlock <= _block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid.sub(1);\n', '            }\n', '        }\n', '\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /**\n', '    * @dev `updateValueAtNow` used to update the `_CheckpointBalances` map and the `_CheckpointTotalSupply`\n', '    * @param checkpoints The history of data being updated\n', '    * @param _value The new number of tokens\n', '    */\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n', '        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length.sub(1)].fromBlock < block.number)) {\n', '            checkpoints.push(Checkpoint(uint128(block.number), uint128(_value)));\n', '        } else {\n', '            checkpoints[checkpoints.length.sub(1)].value = uint128(_value);\n', '        }\n', '    }\n', '}']
['//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '//File: node_modules/openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '//File: contracts/ico/MftToken.sol\n', '/**\n', ' * @title MFT token\n', ' *\n', ' * @version 1.0\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract MftToken is BurnableToken, MintableToken, PausableToken {\n', '    /* solhint-disable */\n', '    string public constant name = "MindFire Token";\n', '    string public constant symbol = "MFT";\n', '    uint8 public constant decimals = 18;\n', '    /* solhint-enable */\n', '\n', '    /** \n', '    * @dev `Checkpoint` is the structure that attaches a block number to a\n', '    * given value, the block number attached is the one that last changed the value\n', '    */\n', '    struct Checkpoint {\n', '        // `fromBlock` is the block number that the value was generatedsuper.mint(_to, _value); from\n', '        uint128 fromBlock;\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] public totalSupplyHistory;\n', '\n', '    /** \n', '    * `balances` is the map that tracks the balance of each address, in this\n', '    * contract when the balance changes the block number that the change\n', '    * occurred is also included in the map\n', '    */\n', '    mapping (address => Checkpoint[]) public balances;\n', '\n', '    /**\n', '     * @dev Constructor of MftToken that instantiates a new Mintable Pauseable Token\n', '     */\n', '    constructor() public {\n', '        paused = true;  // token should not be transferrable until after all tokens have been issued\n', '    }\n', '\n', '    /**\n', '    * @dev allows batch minting through the mint function call\n', '    * @param _to address[]\n', '    * @param _value uint256[]\n', '    */\n', '    function batchMint(address[] _to, uint256[] _value) external {\n', '        require(_to.length == _value.length, "[] len !=");\n', '\n', '        for (uint256 i; i < _to.length; i = i.add(1)) {\n', '            mint(_to[i], _value[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Send `_value` tokens to `_to` from `msg.sender`\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of tokens to be transferred\n', '    * @return Whether the transfer was successful or not\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(!paused, "token is paused");\n', '\n', '        doTransfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Send `_value` tokens to `_to` from `_from` on the condition it is approved by `_from`\n', '    * @param _from The address holding the tokens being transferred\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of tokens to be transferred\n', '    * @return True if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(!paused, "token is paused");\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        doTransfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', "    * @param _owner The address that's balance is being requested\n", '    * @return The balance of `_owner` at the current block\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /**\n', '    * @dev `msg.sender` approves `_spender` to spend `_value` tokens on\n', '    *  its behalf. This is a modified version of the ERC20 approve function\n', '    *  to be a little bit safer\n', '    * @param _spender The address of the account able to transfer the tokens\n', '    * @param _value The amount of tokens to be approved for transfer\n', '    * @return True if the approval was successful\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(!paused, "token is paused");\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0), "allowed not 0");\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev This function makes it easy to read the `allowed[]` map\n', '    * @param _owner The address of the account that owns the token\n', '    * @param _spender The address of the account able to transfer the tokens\n', '    * @return Amount of remaining tokens of _owner that _spender is allowed\n', '    *  to spend\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    *  @dev This function makes it easy to get the total number of tokens\n', '    * @return The total number of tokens\n', '    */\n', '    function totalSupply() public constant returns (uint256) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '    /**\n', '    * @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    * @param _owner The address from which the balance will be retrieved\n', '    * @param _blockNumber The block number when the balance is queried\n', '    * @return The balance at `_blockNumber`\n', '    */\n', '    function balanceOfAt(address _owner, uint256 _blockNumber) public constant returns (uint256) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            return 0;\n', '        } else {    // This will return the expected balance during normal situations\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Total amount of tokens at a specific `_blockNumber`.\n', '    * @param _blockNumber The block number when the totalSupply is queried\n', '    * @return The total amount of tokens at `_blockNumber`\n', '    */\n', '    function totalSupplyAt(uint256 _blockNumber) public constant returns(uint256) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            return 0;\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Generates `_value` tokens that are assigned to `_owner`\n', '    * @param _to The address that will be assigned the new tokens\n', '    * @param _value The quantity of tokens generated\n', '    * @return True if the tokens are generated correctly\n', '    */\n', '    function mint(address _to, uint256 _value) public hasMintPermission canMint returns (bool) {\n', '        uint256 curTotalSupply = totalSupply();\n', '        uint256 previousBalanceTo = balanceOf(_to);\n', '\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply.add(_value));\n', '        updateValueAtNow(balances[_to], previousBalanceTo.add(_value));\n', '\n', '        emit Mint(_to, _value);\n', '        emit Transfer(0, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev called to burn _value of tokens by the msg.sender\n', '    * @param _value uint256 the amount of tokens to burn\n', '    */\n', '    function burn(uint256 _value) public {\n', '        uint256 curTotalSupply = totalSupply();\n', '        uint256 previousBalanceFrom = balanceOf(msg.sender);\n', '\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_value));\n', '        updateValueAtNow(balances[msg.sender], previousBalanceFrom.sub(_value));\n', '\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, 0, _value);\n', '    }\n', '\n', '    /*** INTERNAL FUNCTIONS ***/\n', '    /**\n', '    * @dev This is the actual transfer function\n', '    * @param _from The address holding the tokens being transferred\n', '    * @param _to The address of the recipient\n', '    * @param _value The amount of tokens to be transferred\n', '    * @return True if the transfer was successful\n', '    */\n', '    function doTransfer(address _from, address _to, uint256 _value) internal {\n', '        if (_value == 0) {\n', '            emit Transfer(_from, _to, _value);    // Follow the spec to louch the event when transfer 0\n', '            return;\n', '        }\n', '\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != address(0)) && (_to != address(this)), "cannot transfer to 0x0 or token contract");\n', '\n', '        \n', '        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n', '        // First update the balance array with the new value for the address\n', '        //  sending the tokens\n', '        updateValueAtNow(balances[_from], previousBalanceFrom.sub(_value));\n', '\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n', '        updateValueAtNow(balances[_to], previousBalanceTo.add(_value));\n', '\n', '        // An event to make the transfer easy to find on the blockchain\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    * @param checkpoints The history of values being queried\n', '    * @param _block The block number to retrieve the value at\n', '    * @return The number of tokens being queried\n', '    */\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length.sub(1)].fromBlock) {\n', '            return checkpoints[checkpoints.length.sub(1)].value;\n', '        }\n', '\n', '        if (_block < checkpoints[0].fromBlock) {\n', '            return 0;\n', '        } \n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length.sub(1);\n', '\n', '        while (max > min) {\n', '            uint mid = (max.add(min).add(1)).div(2);\n', '            if (checkpoints[mid].fromBlock <= _block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid.sub(1);\n', '            }\n', '        }\n', '\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /**\n', '    * @dev `updateValueAtNow` used to update the `_CheckpointBalances` map and the `_CheckpointTotalSupply`\n', '    * @param checkpoints The history of data being updated\n', '    * @param _value The new number of tokens\n', '    */\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n', '        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length.sub(1)].fromBlock < block.number)) {\n', '            checkpoints.push(Checkpoint(uint128(block.number), uint128(_value)));\n', '        } else {\n', '            checkpoints[checkpoints.length.sub(1)].value = uint128(_value);\n', '        }\n', '    }\n', '}']
