['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract ERC20Implementation is ERC20, BurnableToken, Ownable {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract BasicFreezableToken is ERC20Implementation {\n', '\n', '  address[] internal investors;\n', '  mapping (address => bool) internal isInvestor;\n', '  bool frozen;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(!frozen);\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    \n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20FreezableImplementation is BasicFreezableToken {\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(!frozen);\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(!frozen);\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    require(!frozen);\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    require(!frozen);\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '  function freeze() onlyOwner public {\n', '    frozen = true;\n', '  }\n', '\n', '\n', '  function unFreeze() onlyOwner public {\n', '    frozen = false;\n', '  }\n', '\n', '}\n', '\n', 'contract OIOToken is ERC20FreezableImplementation {\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  \n', '  \n', '  constructor(address[] _investors, uint256[] _tokenAmount, uint256 _totalSupply, string _name, string _symbol, uint8 _decimals) public {\n', '    require(_investors.length == _tokenAmount.length);\n', '\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '    \n', '    uint256 dif = 0;\n', '    totalSupply_ = _totalSupply;\n', '    for (uint i=0; i<_investors.length; i++) {\n', '      balances[_investors[i]] = balances[_investors[i]].add(_tokenAmount[i]);\n', '      isInvestor[_investors[i]] = true;\n', '      investors.push(_investors[i]);\n', '      dif = dif.add(_tokenAmount[i]);\n', '    }\n', '    balances[msg.sender] = totalSupply_.sub(dif);\n', '    isInvestor[msg.sender] = true;\n', '    investors.push(msg.sender);\n', '    frozen = false;\n', '  }\n', '\n', '  \n', '  function transferBack(address _from, uint256 _tokenAmount) onlyOwner public {\n', '    require(_from != address(0));\n', '    require(_tokenAmount <= balances[_from]);\n', '    \n', '    balances[_from] = balances[_from].sub(_tokenAmount);\n', '    balances[msg.sender] = balances[msg.sender].add(_tokenAmount);\n', '    emit Transfer(_from, msg.sender, _tokenAmount);\n', '  }\n', '\n', ' \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(!frozen);\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    if (!isInvestor[_to]) {\n', '      isInvestor[_to] = true;\n', '      investors.push(_to);\n', '    }\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', ' \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(!frozen);\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    if (!isInvestor[_to]) {\n', '      isInvestor[_to] = true;\n', '      investors.push(_to);\n', '    }\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  \n', '  function transferBulk(address[] _toAccounts, uint256[] _tokenAmount) onlyOwner public {\n', '    require(_toAccounts.length == _tokenAmount.length);\n', '    for(uint i=0; i<_toAccounts.length; i++) {\n', '      balances[msg.sender] = balances[msg.sender].sub(_tokenAmount[i]); \n', '      balances[_toAccounts[i]] = balances[_toAccounts[i]].add(_tokenAmount[i]);\n', '      if(!isInvestor[_toAccounts[i]]){\n', '        isInvestor[_toAccounts[i]] = true;\n', '        investors.push(_toAccounts[i]);\n', '      }\n', '    }\n', '  }\n', '\n', '  \n', '  function getInvestorsAndTheirBalances() public view returns (address[], uint[]) {\n', '      uint[] memory tempBalances = new uint[](investors.length);\n', '      for(uint i=0; i<investors.length; i++) {\n', '        tempBalances[i] = balances[investors[i]];\n', '      }\n', '       return (investors, tempBalances);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract ERC20Implementation is ERC20, BurnableToken, Ownable {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract BasicFreezableToken is ERC20Implementation {\n', '\n', '  address[] internal investors;\n', '  mapping (address => bool) internal isInvestor;\n', '  bool frozen;\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(!frozen);\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    \n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20FreezableImplementation is BasicFreezableToken {\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(!frozen);\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(!frozen);\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    require(!frozen);\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    require(!frozen);\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '  function freeze() onlyOwner public {\n', '    frozen = true;\n', '  }\n', '\n', '\n', '  function unFreeze() onlyOwner public {\n', '    frozen = false;\n', '  }\n', '\n', '}\n', '\n', 'contract OIOToken is ERC20FreezableImplementation {\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  \n', '  \n', '  constructor(address[] _investors, uint256[] _tokenAmount, uint256 _totalSupply, string _name, string _symbol, uint8 _decimals) public {\n', '    require(_investors.length == _tokenAmount.length);\n', '\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '    \n', '    uint256 dif = 0;\n', '    totalSupply_ = _totalSupply;\n', '    for (uint i=0; i<_investors.length; i++) {\n', '      balances[_investors[i]] = balances[_investors[i]].add(_tokenAmount[i]);\n', '      isInvestor[_investors[i]] = true;\n', '      investors.push(_investors[i]);\n', '      dif = dif.add(_tokenAmount[i]);\n', '    }\n', '    balances[msg.sender] = totalSupply_.sub(dif);\n', '    isInvestor[msg.sender] = true;\n', '    investors.push(msg.sender);\n', '    frozen = false;\n', '  }\n', '\n', '  \n', '  function transferBack(address _from, uint256 _tokenAmount) onlyOwner public {\n', '    require(_from != address(0));\n', '    require(_tokenAmount <= balances[_from]);\n', '    \n', '    balances[_from] = balances[_from].sub(_tokenAmount);\n', '    balances[msg.sender] = balances[msg.sender].add(_tokenAmount);\n', '    emit Transfer(_from, msg.sender, _tokenAmount);\n', '  }\n', '\n', ' \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(!frozen);\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    if (!isInvestor[_to]) {\n', '      isInvestor[_to] = true;\n', '      investors.push(_to);\n', '    }\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', ' \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(!frozen);\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    if (!isInvestor[_to]) {\n', '      isInvestor[_to] = true;\n', '      investors.push(_to);\n', '    }\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  \n', '  function transferBulk(address[] _toAccounts, uint256[] _tokenAmount) onlyOwner public {\n', '    require(_toAccounts.length == _tokenAmount.length);\n', '    for(uint i=0; i<_toAccounts.length; i++) {\n', '      balances[msg.sender] = balances[msg.sender].sub(_tokenAmount[i]); \n', '      balances[_toAccounts[i]] = balances[_toAccounts[i]].add(_tokenAmount[i]);\n', '      if(!isInvestor[_toAccounts[i]]){\n', '        isInvestor[_toAccounts[i]] = true;\n', '        investors.push(_toAccounts[i]);\n', '      }\n', '    }\n', '  }\n', '\n', '  \n', '  function getInvestorsAndTheirBalances() public view returns (address[], uint[]) {\n', '      uint[] memory tempBalances = new uint[](investors.length);\n', '      for(uint i=0; i<investors.length; i++) {\n', '        tempBalances[i] = balances[investors[i]];\n', '      }\n', '       return (investors, tempBalances);\n', '  }\n', '\n', '}']
