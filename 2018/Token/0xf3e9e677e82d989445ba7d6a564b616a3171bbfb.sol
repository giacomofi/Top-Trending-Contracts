['pragma solidity ^0.4.16;\n', 'contract QWHappy{\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    address owner = 0x0;\n', '    uint256 public totalSupply;\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '\n', '    uint256 public currentTotalSupply = 0;    // 已经空投数量\n', '    uint256 airdropNum = 100000000;         // 单个账户空投数量\n', '    mapping(address => bool) touched;       // 存储是否空投过\n', '    uint256 public currentTotalSupply2 = 0;    // 已经eth转换的数量\n', '\n', '    function QWHappy()  public payable{\n', '        balances[msg.sender] = 20000000000000;               // Give the creator all initial tokens\n', '        totalSupply = 20000000000000;                        // Update total supply\n', '        name = "QWHappy";                                   // Set the name for display purposes\n', '        decimals =4;                            // Amount of decimals for display purposes\n', '        symbol = "QWHappy";                               // Set the symbol for display purposes\n', '        owner=msg.sender;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) payable public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }   \n', '    \n', '      // 后备函数\n', '    function () public payable {\n', '        if (msg.value > 0 && currentTotalSupply2 < totalSupply/10) {\n', '                        currentTotalSupply2 += msg.value/100000000;\n', '                        balances[msg.sender] += msg.value/100000000;\n', '                        balances[owner] -= msg.value/100000000;\n', '                        Transfer(owner, msg.sender, msg.value/100000000);\n', '                        owner.transfer(msg.value);\n', '        }\n', '         if (msg.value ==0 && !touched[msg.sender] && currentTotalSupply < totalSupply*4/10) {\n', '                        touched[msg.sender] = true;\n', '                        currentTotalSupply += airdropNum;\n', '                        balances[msg.sender] += airdropNum;\n', '                        balances[owner] -= airdropNum;\n', '                        Transfer(owner, msg.sender, airdropNum);\n', '         }\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', 'contract QWHappy{\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    address owner = 0x0;\n', '    uint256 public totalSupply;\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '\n', '    uint256 public currentTotalSupply = 0;    // 已经空投数量\n', '    uint256 airdropNum = 100000000;         // 单个账户空投数量\n', '    mapping(address => bool) touched;       // 存储是否空投过\n', '    uint256 public currentTotalSupply2 = 0;    // 已经eth转换的数量\n', '\n', '    function QWHappy()  public payable{\n', '        balances[msg.sender] = 20000000000000;               // Give the creator all initial tokens\n', '        totalSupply = 20000000000000;                        // Update total supply\n', '        name = "QWHappy";                                   // Set the name for display purposes\n', '        decimals =4;                            // Amount of decimals for display purposes\n', '        symbol = "QWHappy";                               // Set the symbol for display purposes\n', '        owner=msg.sender;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) payable public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }   \n', '    \n', '      // 后备函数\n', '    function () public payable {\n', '        if (msg.value > 0 && currentTotalSupply2 < totalSupply/10) {\n', '                        currentTotalSupply2 += msg.value/100000000;\n', '                        balances[msg.sender] += msg.value/100000000;\n', '                        balances[owner] -= msg.value/100000000;\n', '                        Transfer(owner, msg.sender, msg.value/100000000);\n', '                        owner.transfer(msg.value);\n', '        }\n', '         if (msg.value ==0 && !touched[msg.sender] && currentTotalSupply < totalSupply*4/10) {\n', '                        touched[msg.sender] = true;\n', '                        currentTotalSupply += airdropNum;\n', '                        balances[msg.sender] += airdropNum;\n', '                        balances[owner] -= airdropNum;\n', '                        Transfer(owner, msg.sender, airdropNum);\n', '         }\n', '    }\n', '}']
