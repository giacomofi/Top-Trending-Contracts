['pragma solidity ^0.4.25;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(owner, address(0));\n', '        owner = address(0);\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    bool public paused;\n', '    \n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    constructor() internal {\n', '        paused = false;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', 'contract BaseToken is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    uint256 public _totalLimit;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function _transfer(address from, address to, uint value) internal {\n', '        require(to != address(0));\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '        totalSupply = totalSupply.add(value);\n', '        require(_totalLimit >= totalSupply);\n', '        balanceOf[account] = balanceOf[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        require(spender != address(0));\n', '        allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\n', '        require(spender != address(0));\n', '        allowance[msg.sender][spender] = allowance[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\n', '        require(spender != address(0));\n', '        allowance[msg.sender][spender] = allowance[msg.sender][spender].sub(subtractedValue);\n', '        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BurnToken is BaseToken {\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function burn(uint256 value) public whenNotPaused returns (bool) {\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Burn(msg.sender, value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address from, uint256 value) public whenNotPaused returns (bool) {\n', '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Burn(from, value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract BatchToken is BaseToken {\n', '    \n', '    function batchTransfer(address[] addressList, uint256[] amountList) public returns (bool) {\n', '        uint256 length = addressList.length;\n', '        require(addressList.length == amountList.length);\n', '        require(length > 0 && length <= 20);\n', '\n', '        for (uint256 i = 0; i < length; i++) {\n', '            transfer(addressList[i], amountList[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract LockToken is BaseToken {\n', '\n', '    struct LockItem {\n', '        uint256 endtime;\n', '        uint256 remain;\n', '    }\n', '\n', '    struct LockMeta {\n', '        uint8 lockType;\n', '        LockItem[] lockItems;\n', '    }\n', '\n', '    mapping (address => LockMeta) public lockData;\n', '\n', '    event Lock(address indexed lockAddress, uint8 indexed lockType, uint256[] endtimeList, uint256[] remainList);\n', '\n', '    function _transfer(address from, address to, uint value) internal {\n', '        uint8 lockType = lockData[from].lockType;\n', '        if (lockType != 0) {\n', '            uint256 remain = balanceOf[from].sub(value);\n', '            uint256 length = lockData[from].lockItems.length;\n', '            for (uint256 i = 0; i < length; i++) {\n', '                LockItem storage item = lockData[from].lockItems[i];\n', '                if (block.timestamp < item.endtime && remain < item.remain) {\n', '                    revert();\n', '                }\n', '            }\n', '        }\n', '        super._transfer(from, to, value);\n', '    }\n', '\n', '    function lock(address lockAddress, uint8 lockType, uint256[] endtimeList, uint256[] remainList) public onlyOwner returns (bool) {\n', '        require(lockAddress != address(0));\n', '        require(lockType == 0 || lockType == 1 || lockType == 2);\n', '        require(lockData[lockAddress].lockType != 1);\n', '\n', '        lockData[lockAddress].lockItems.length = 0;\n', '\n', '        lockData[lockAddress].lockType = lockType;\n', '        if (lockType == 0) {\n', '            emit Lock(lockAddress, lockType, endtimeList, remainList);\n', '            return true;\n', '        }\n', '\n', '        require(endtimeList.length == remainList.length);\n', '        uint256 length = endtimeList.length;\n', '        require(length > 0 && length <= 12);\n', '        uint256 thisEndtime = endtimeList[0];\n', '        uint256 thisRemain = remainList[0];\n', '        lockData[lockAddress].lockItems.push(LockItem({endtime: thisEndtime, remain: thisRemain}));\n', '        for (uint256 i = 1; i < length; i++) {\n', '            require(endtimeList[i] > thisEndtime && remainList[i] < thisRemain);\n', '            lockData[lockAddress].lockItems.push(LockItem({endtime: endtimeList[i], remain: remainList[i]}));\n', '            thisEndtime = endtimeList[i];\n', '            thisRemain = remainList[i];\n', '        }\n', '\n', '        emit Lock(lockAddress, lockType, endtimeList, remainList);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MintToken is BaseToken {\n', '    uint256 public mintMax;\n', '    uint256 public mintTotal;\n', '    uint256 public mintBegintime;\n', '    uint256 public mintPerday;\n', '\n', '    event Mint(address indexed to, uint256 value);\n', '\n', '    function mint(address to, uint256 value) public onlyOwner returns (bool) {\n', '        require(block.timestamp >= mintBegintime);\n', '        require(value > 0);\n', '\n', '        if (mintPerday > 0) {\n', '            uint256 currentMax = (block.timestamp - mintBegintime).mul(mintPerday) / (3600 * 24);\n', '            uint256 leave = currentMax.sub(mintTotal);\n', '            require(leave >= value);\n', '        }\n', '\n', '        mintTotal = mintTotal.add(value);\n', '        if (mintMax > 0 && mintTotal > mintMax) {\n', '            revert();\n', '        }\n', '\n', '        _mint(to, value);\n', '        emit Mint(to, value);\n', '        return true;\n', '    }\n', '\n', '    function mintToMax(address to) public onlyOwner returns (bool) {\n', '        require(block.timestamp >= mintBegintime);\n', '        require(mintMax > 0);\n', '\n', '        uint256 value;\n', '        if (mintPerday > 0) {\n', '            uint256 currentMax = (block.timestamp - mintBegintime).mul(mintPerday) / (3600 * 24);\n', '            value = currentMax.sub(mintTotal);\n', '            uint256 leave = mintMax.sub(mintTotal);\n', '            if (value > leave) {\n', '                value = leave;\n', '            }\n', '        } else {\n', '            value = mintMax.sub(mintTotal);\n', '        }\n', '\n', '        require(value > 0);\n', '        mintTotal = mintTotal.add(value);\n', '        _mint(to, value);\n', '        emit Mint(to, value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CustomToken is BaseToken, BurnToken, BatchToken, LockToken, MintToken {\n', '    constructor() public {\n', "        name = '华夏全球通证';\n", "        symbol = 'HXT';\n", '        decimals = 18;\n', '        totalSupply = 999999999999000000000000000000;\n', '        _totalLimit = 100000000000000000000000000000000;\n', '        balanceOf[0xbCADE28d8C2F22345165f0e07C94A600f6C4e925] = totalSupply;\n', '        emit Transfer(address(0), 0xbCADE28d8C2F22345165f0e07C94A600f6C4e925, totalSupply);\n', '\n', '        owner = 0xbCADE28d8C2F22345165f0e07C94A600f6C4e925;\n', '\n', '        mintMax = 0;\n', '        mintBegintime = 1544381539;\n', '        mintPerday = 0;\n', '    }\n', '}']