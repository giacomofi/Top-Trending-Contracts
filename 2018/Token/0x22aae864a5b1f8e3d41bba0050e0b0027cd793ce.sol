['pragma solidity ^0.4.16;\n', '\n', '\t/*\n', '\t * Abstract Token Smart Contract.  Copyright &#169; 2017 by ABDK Consulting.\n', '\t * Author: Mikhail Vladimirov <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7b161210131a1217550d171a1f12161209140d3b1c161a121755181416">[email&#160;protected]</a>>\n', '\t */\n', '\tpragma solidity ^0.4.20;\n', '\n', '\t/*\n', '\t * EIP-20 Standard Token Smart Contract Interface.\n', '\t * Copyright &#169; 2016–2018 by ABDK Consulting.\n', '\t * Author: Mikhail Vladimirov <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="234e4a484b424a4f0d554f42474a4e4a514c5563444e424a4f0d404c4e">[email&#160;protected]</a>>\n', '\t */\n', '\tpragma solidity ^0.4.20;\n', '\n', '\t/**\n', '\t * ERC-20 standard token interface, as defined\n', '\t * <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md">here</a>.\n', '\t */\n', '\tcontract Token {\n', '\t  /**\n', '\t   * Get total number of tokens in circulation.\n', '\t   *\n', '\t   * @return total number of tokens in circulation\n', '\t   */\n', '\t  function totalSupply () public view returns (uint256 supply);\n', '\n', '\t  /**\n', '\t   * Get number of tokens currently belonging to given owner.\n', '\t   *\n', '\t   * @param _owner address to get number of tokens currently belonging to the\n', '\t   *        owner of\n', '\t   * @return number of tokens currently belonging to the owner of given address\n', '\t   */\n', '\t  function balanceOf (address _owner) public view returns (uint256 balance);\n', '\n', '\t  /**\n', '\t   * Transfer given number of tokens from message sender to given recipient.\n', '\t   *\n', '\t   * @param _to address to transfer tokens to the owner of\n', '\t   * @param _value number of tokens to transfer to the owner of given address\n', '\t   * @return true if tokens were transferred successfully, false otherwise\n', '\t   */\n', '\t  function transfer (address _to, uint256 _value)\n', '\t  public returns (bool success);\n', '\n', '\t  /**\n', '\t   * Transfer given number of tokens from given owner to given recipient.\n', '\t   *\n', '\t   * @param _from address to transfer tokens from the owner of\n', '\t   * @param _to address to transfer tokens to the owner of\n', '\t   * @param _value number of tokens to transfer from given owner to given\n', '\t   *        recipient\n', '\t   * @return true if tokens were transferred successfully, false otherwise\n', '\t   */\n', '\t  function transferFrom (address _from, address _to, uint256 _value)\n', '\t  public returns (bool success);\n', '\n', '\t  /**\n', '\t   * Allow given spender to transfer given number of tokens from message sender.\n', '\t   *\n', '\t   * @param _spender address to allow the owner of to transfer tokens from\n', '\t   *        message sender\n', '\t   * @param _value number of tokens to allow to transfer\n', '\t   * @return true if token transfer was successfully approved, false otherwise\n', '\t   */\n', '\t  function approve (address _spender, uint256 _value)\n', '\t  public returns (bool success);\n', '\n', '\t  /**\n', '\t   * Tell how many tokens given spender is currently allowed to transfer from\n', '\t   * given owner.\n', '\t   *\n', '\t   * @param _owner address to get number of tokens allowed to be transferred\n', '\t   *        from the owner of\n', '\t   * @param _spender address to get number of tokens allowed to be transferred\n', '\t   *        by the owner of\n', '\t   * @return number of tokens given spender is currently allowed to transfer\n', '\t   *         from given owner\n', '\t   */\n', '\t  function allowance (address _owner, address _spender)\n', '\t  public view returns (uint256 remaining);\n', '\n', '\t  /**\n', '\t   * Logged when tokens were transferred from one owner to another.\n', '\t   *\n', '\t   * @param _from address of the owner, tokens were transferred from\n', '\t   * @param _to address of the owner, tokens were transferred to\n', '\t   * @param _value number of tokens transferred\n', '\t   */\n', '\t  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n', '\n', '\t  /**\n', '\t   * Logged when owner approved his tokens to be transferred by some spender.\n', '\t   *\n', '\t   * @param _owner owner who approved his tokens to be transferred\n', '\t   * @param _spender spender who were allowed to transfer the tokens belonging\n', '\t   *        to the owner\n', '\t   * @param _value number of tokens belonging to the owner, approved to be\n', '\t   *        transferred by the spender\n', '\t   */\n', '\t  event Approval (\n', '\t\taddress indexed _owner, address indexed _spender, uint256 _value);\n', '\t}\n', '\t/*\n', '\t * Safe Math Smart Contract.  Copyright &#169; 2016–2017 by ABDK Consulting.\n', '\t * Author: Mikhail Vladimirov <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="365b5f5d5e575f5a18405a57525f5b5f44594076515b575f5a1855595b">[email&#160;protected]</a>>\n', '\t */\n', '\tpragma solidity ^0.4.20;\n', '\n', '\t/**\n', '\t * Provides methods to safely add, subtract and multiply uint256 numbers.\n', '\t */\n', '\tcontract SafeMath {\n', '\t  uint256 constant private MAX_UINT256 =\n', '\t\t0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '\t  /**\n', '\t   * Add two uint256 values, throw in case of overflow.\n', '\t   *\n', '\t   * @param x first value to add\n', '\t   * @param y second value to add\n', '\t   * @return x + y\n', '\t   */\n', '\t  function safeAdd (uint256 x, uint256 y)\n', '\t  pure internal\n', '\t  returns (uint256 z) {\n', '\t\tassert (x <= MAX_UINT256 - y);\n', '\t\treturn x + y;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Subtract one uint256 value from another, throw in case of underflow.\n', '\t   *\n', '\t   * @param x value to subtract from\n', '\t   * @param y value to subtract\n', '\t   * @return x - y\n', '\t   */\n', '\t  function safeSub (uint256 x, uint256 y)\n', '\t  pure internal\n', '\t  returns (uint256 z) {\n', '\t\tassert (x >= y);\n', '\t\treturn x - y;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Multiply two uint256 values, throw in case of overflow.\n', '\t   *\n', '\t   * @param x first value to multiply\n', '\t   * @param y second value to multiply\n', '\t   * @return x * y\n', '\t   */\n', '\t  function safeMul (uint256 x, uint256 y)\n', '\t  pure internal\n', '\t  returns (uint256 z) {\n', '\t\tif (y == 0) return 0; // Prevent division by zero at the next line\n', '\t\tassert (x <= MAX_UINT256 / y);\n', '\t\treturn x * y;\n', '\t  }\n', '\t}\n', '\n', '\n', '\t/**\n', '\t * Abstract Token Smart Contract that could be used as a base contract for\n', '\t * ERC-20 token contracts.\n', '\t */\n', '\tcontract AbstractToken is Token, SafeMath {\n', '\t  /**\n', '\t   * Create new Abstract Token contract.\n', '\t   */\n', '\t  function AbstractToken () public {\n', '\t\t// Do nothing\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Get number of tokens currently belonging to given owner.\n', '\t   *\n', '\t   * @param _owner address to get number of tokens currently belonging to the\n', '\t   *        owner of\n', '\t   * @return number of tokens currently belonging to the owner of given address\n', '\t   */\n', '\t  function balanceOf (address _owner) public view returns (uint256 balance) {\n', '\t\treturn accounts [_owner];\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Transfer given number of tokens from message sender to given recipient.\n', '\t   *\n', '\t   * @param _to address to transfer tokens to the owner of\n', '\t   * @param _value number of tokens to transfer to the owner of given address\n', '\t   * @return true if tokens were transferred successfully, false otherwise\n', '\t   */\n', '\t  function transfer (address _to, uint256 _value)\n', '\t  public returns (bool success) {\n', '\t\tuint256 fromBalance = accounts [msg.sender];\n', '\t\tif (fromBalance < _value) return false;\n', '\t\tif (_value > 0 && msg.sender != _to) {\n', '\t\t  accounts [msg.sender] = safeSub (fromBalance, _value);\n', '\t\t  accounts [_to] = safeAdd (accounts [_to], _value);\n', '\t\t}\n', '\t\tTransfer (msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Transfer given number of tokens from given owner to given recipient.\n', '\t   *\n', '\t   * @param _from address to transfer tokens from the owner of\n', '\t   * @param _to address to transfer tokens to the owner of\n', '\t   * @param _value number of tokens to transfer from given owner to given\n', '\t   *        recipient\n', '\t   * @return true if tokens were transferred successfully, false otherwise\n', '\t   */\n', '\t  function transferFrom (address _from, address _to, uint256 _value)\n', '\t  public returns (bool success) {\n', '\t\tuint256 spenderAllowance = allowances [_from][msg.sender];\n', '\t\tif (spenderAllowance < _value) return false;\n', '\t\tuint256 fromBalance = accounts [_from];\n', '\t\tif (fromBalance < _value) return false;\n', '\n', '\t\tallowances [_from][msg.sender] =\n', '\t\t  safeSub (spenderAllowance, _value);\n', '\n', '\t\tif (_value > 0 && _from != _to) {\n', '\t\t  accounts [_from] = safeSub (fromBalance, _value);\n', '\t\t  accounts [_to] = safeAdd (accounts [_to], _value);\n', '\t\t}\n', '\t\tTransfer (_from, _to, _value);\n', '\t\treturn true;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Allow given spender to transfer given number of tokens from message sender.\n', '\t   *\n', '\t   * @param _spender address to allow the owner of to transfer tokens from\n', '\t   *        message sender\n', '\t   * @param _value number of tokens to allow to transfer\n', '\t   * @return true if token transfer was successfully approved, false otherwise\n', '\t   */\n', '\t  function approve (address _spender, uint256 _value)\n', '\t  public returns (bool success) {\n', '\t\tallowances [msg.sender][_spender] = _value;\n', '\t\tApproval (msg.sender, _spender, _value);\n', '\n', '\t\treturn true;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Tell how many tokens given spender is currently allowed to transfer from\n', '\t   * given owner.\n', '\t   *\n', '\t   * @param _owner address to get number of tokens allowed to be transferred\n', '\t   *        from the owner of\n', '\t   * @param _spender address to get number of tokens allowed to be transferred\n', '\t   *        by the owner of\n', '\t   * @return number of tokens given spender is currently allowed to transfer\n', '\t   *         from given owner\n', '\t   */\n', '\t  function allowance (address _owner, address _spender)\n', '\t  public view returns (uint256 remaining) {\n', '\t\treturn allowances [_owner][_spender];\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Mapping from addresses of token holders to the numbers of tokens belonging\n', '\t   * to these token holders.\n', '\t   */\n', '\t  mapping (address => uint256) internal accounts;\n', '\n', '\t  /**\n', '\t   * Mapping from addresses of token holders to the mapping of addresses of\n', '\t   * spenders to the allowances set by these token holders to these spenders.\n', '\t   */\n', '\t  mapping (address => mapping (address => uint256)) internal allowances;\n', '\t}\n', '\n', '\n', '\t/**\n', '\t * Cubomania token smart contract.\n', '\t */\n', '\tcontract CuboToken is AbstractToken {\n', '\t  /**\n', '\t   * Total number of tokens in circulation.\n', '\t   */\n', '\t  uint256 tokenCount;\n', '\n', '\t  /**\n', '\t   * Create new Cubomania token smart contract, with given number of tokens issued\n', '\t   * and given to msg.sender.\n', '\t   *\n', '\t   * @param _tokenCount number of tokens to issue and give to msg.sender\n', '\t   */\n', '\t  function CuboToken (uint256 _tokenCount) public {\n', '\t\ttokenCount = _tokenCount;\n', '\t\taccounts [msg.sender] = _tokenCount;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Get total number of tokens in circulation.\n', '\t   *\n', '\t   * @return total number of tokens in circulation\n', '\t   */\n', '\t  function totalSupply () public view returns (uint256 supply) {\n', '\t\treturn tokenCount;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Get name of this token.\n', '\t   *\n', '\t   * @return name of this token\n', '\t   */\n', '\t  function name () public pure returns (string result) {\n', '\t\treturn "Cubo";\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Get symbol of this token.\n', '\t   *\n', '\t   * @return symbol of this token\n', '\t   */\n', '\t  function symbol () public pure returns (string result) {\n', '\t\treturn "CUBO";\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Get number of decimals for this token.\n', '\t   *\n', '\t   * @return number of decimals for this token\n', '\t   */\n', '\t  function decimals () public pure returns (uint8 result) {\n', '\t\treturn 6;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Change how many tokens given spender is allowed to transfer from message\n', '\t   * spender.  In order to prevent double spending of allowance, this method\n', '\t   * receives assumed current allowance value as an argument.  If actual\n', '\t   * allowance differs from an assumed one, this method just returns false.\n', '\t   *\n', '\t   * @param _spender address to allow the owner of to transfer tokens from\n', '\t   *        message sender\n', '\t   * @param _currentValue assumed number of tokens currently allowed to be\n', '\t   *        transferred\n', '\t   * @param _newValue number of tokens to allow to transfer\n', '\t   * @return true if token transfer was successfully approved, false otherwise\n', '\t   */\n', '\t  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\n', '\t\tpublic returns (bool success) {\n', '\t\tif (allowance (msg.sender, _spender) == _currentValue)\n', '\t\t  return approve (_spender, _newValue);\n', '\t\telse return false;\n', '\t  }\n', '\t}']
['pragma solidity ^0.4.16;\n', '\n', '\t/*\n', '\t * Abstract Token Smart Contract.  Copyright © 2017 by ABDK Consulting.\n', '\t * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', '\t */\n', '\tpragma solidity ^0.4.20;\n', '\n', '\t/*\n', '\t * EIP-20 Standard Token Smart Contract Interface.\n', '\t * Copyright © 2016–2018 by ABDK Consulting.\n', '\t * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', '\t */\n', '\tpragma solidity ^0.4.20;\n', '\n', '\t/**\n', '\t * ERC-20 standard token interface, as defined\n', '\t * <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md">here</a>.\n', '\t */\n', '\tcontract Token {\n', '\t  /**\n', '\t   * Get total number of tokens in circulation.\n', '\t   *\n', '\t   * @return total number of tokens in circulation\n', '\t   */\n', '\t  function totalSupply () public view returns (uint256 supply);\n', '\n', '\t  /**\n', '\t   * Get number of tokens currently belonging to given owner.\n', '\t   *\n', '\t   * @param _owner address to get number of tokens currently belonging to the\n', '\t   *        owner of\n', '\t   * @return number of tokens currently belonging to the owner of given address\n', '\t   */\n', '\t  function balanceOf (address _owner) public view returns (uint256 balance);\n', '\n', '\t  /**\n', '\t   * Transfer given number of tokens from message sender to given recipient.\n', '\t   *\n', '\t   * @param _to address to transfer tokens to the owner of\n', '\t   * @param _value number of tokens to transfer to the owner of given address\n', '\t   * @return true if tokens were transferred successfully, false otherwise\n', '\t   */\n', '\t  function transfer (address _to, uint256 _value)\n', '\t  public returns (bool success);\n', '\n', '\t  /**\n', '\t   * Transfer given number of tokens from given owner to given recipient.\n', '\t   *\n', '\t   * @param _from address to transfer tokens from the owner of\n', '\t   * @param _to address to transfer tokens to the owner of\n', '\t   * @param _value number of tokens to transfer from given owner to given\n', '\t   *        recipient\n', '\t   * @return true if tokens were transferred successfully, false otherwise\n', '\t   */\n', '\t  function transferFrom (address _from, address _to, uint256 _value)\n', '\t  public returns (bool success);\n', '\n', '\t  /**\n', '\t   * Allow given spender to transfer given number of tokens from message sender.\n', '\t   *\n', '\t   * @param _spender address to allow the owner of to transfer tokens from\n', '\t   *        message sender\n', '\t   * @param _value number of tokens to allow to transfer\n', '\t   * @return true if token transfer was successfully approved, false otherwise\n', '\t   */\n', '\t  function approve (address _spender, uint256 _value)\n', '\t  public returns (bool success);\n', '\n', '\t  /**\n', '\t   * Tell how many tokens given spender is currently allowed to transfer from\n', '\t   * given owner.\n', '\t   *\n', '\t   * @param _owner address to get number of tokens allowed to be transferred\n', '\t   *        from the owner of\n', '\t   * @param _spender address to get number of tokens allowed to be transferred\n', '\t   *        by the owner of\n', '\t   * @return number of tokens given spender is currently allowed to transfer\n', '\t   *         from given owner\n', '\t   */\n', '\t  function allowance (address _owner, address _spender)\n', '\t  public view returns (uint256 remaining);\n', '\n', '\t  /**\n', '\t   * Logged when tokens were transferred from one owner to another.\n', '\t   *\n', '\t   * @param _from address of the owner, tokens were transferred from\n', '\t   * @param _to address of the owner, tokens were transferred to\n', '\t   * @param _value number of tokens transferred\n', '\t   */\n', '\t  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n', '\n', '\t  /**\n', '\t   * Logged when owner approved his tokens to be transferred by some spender.\n', '\t   *\n', '\t   * @param _owner owner who approved his tokens to be transferred\n', '\t   * @param _spender spender who were allowed to transfer the tokens belonging\n', '\t   *        to the owner\n', '\t   * @param _value number of tokens belonging to the owner, approved to be\n', '\t   *        transferred by the spender\n', '\t   */\n', '\t  event Approval (\n', '\t\taddress indexed _owner, address indexed _spender, uint256 _value);\n', '\t}\n', '\t/*\n', '\t * Safe Math Smart Contract.  Copyright © 2016–2017 by ABDK Consulting.\n', '\t * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n', '\t */\n', '\tpragma solidity ^0.4.20;\n', '\n', '\t/**\n', '\t * Provides methods to safely add, subtract and multiply uint256 numbers.\n', '\t */\n', '\tcontract SafeMath {\n', '\t  uint256 constant private MAX_UINT256 =\n', '\t\t0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '\t  /**\n', '\t   * Add two uint256 values, throw in case of overflow.\n', '\t   *\n', '\t   * @param x first value to add\n', '\t   * @param y second value to add\n', '\t   * @return x + y\n', '\t   */\n', '\t  function safeAdd (uint256 x, uint256 y)\n', '\t  pure internal\n', '\t  returns (uint256 z) {\n', '\t\tassert (x <= MAX_UINT256 - y);\n', '\t\treturn x + y;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Subtract one uint256 value from another, throw in case of underflow.\n', '\t   *\n', '\t   * @param x value to subtract from\n', '\t   * @param y value to subtract\n', '\t   * @return x - y\n', '\t   */\n', '\t  function safeSub (uint256 x, uint256 y)\n', '\t  pure internal\n', '\t  returns (uint256 z) {\n', '\t\tassert (x >= y);\n', '\t\treturn x - y;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Multiply two uint256 values, throw in case of overflow.\n', '\t   *\n', '\t   * @param x first value to multiply\n', '\t   * @param y second value to multiply\n', '\t   * @return x * y\n', '\t   */\n', '\t  function safeMul (uint256 x, uint256 y)\n', '\t  pure internal\n', '\t  returns (uint256 z) {\n', '\t\tif (y == 0) return 0; // Prevent division by zero at the next line\n', '\t\tassert (x <= MAX_UINT256 / y);\n', '\t\treturn x * y;\n', '\t  }\n', '\t}\n', '\n', '\n', '\t/**\n', '\t * Abstract Token Smart Contract that could be used as a base contract for\n', '\t * ERC-20 token contracts.\n', '\t */\n', '\tcontract AbstractToken is Token, SafeMath {\n', '\t  /**\n', '\t   * Create new Abstract Token contract.\n', '\t   */\n', '\t  function AbstractToken () public {\n', '\t\t// Do nothing\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Get number of tokens currently belonging to given owner.\n', '\t   *\n', '\t   * @param _owner address to get number of tokens currently belonging to the\n', '\t   *        owner of\n', '\t   * @return number of tokens currently belonging to the owner of given address\n', '\t   */\n', '\t  function balanceOf (address _owner) public view returns (uint256 balance) {\n', '\t\treturn accounts [_owner];\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Transfer given number of tokens from message sender to given recipient.\n', '\t   *\n', '\t   * @param _to address to transfer tokens to the owner of\n', '\t   * @param _value number of tokens to transfer to the owner of given address\n', '\t   * @return true if tokens were transferred successfully, false otherwise\n', '\t   */\n', '\t  function transfer (address _to, uint256 _value)\n', '\t  public returns (bool success) {\n', '\t\tuint256 fromBalance = accounts [msg.sender];\n', '\t\tif (fromBalance < _value) return false;\n', '\t\tif (_value > 0 && msg.sender != _to) {\n', '\t\t  accounts [msg.sender] = safeSub (fromBalance, _value);\n', '\t\t  accounts [_to] = safeAdd (accounts [_to], _value);\n', '\t\t}\n', '\t\tTransfer (msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Transfer given number of tokens from given owner to given recipient.\n', '\t   *\n', '\t   * @param _from address to transfer tokens from the owner of\n', '\t   * @param _to address to transfer tokens to the owner of\n', '\t   * @param _value number of tokens to transfer from given owner to given\n', '\t   *        recipient\n', '\t   * @return true if tokens were transferred successfully, false otherwise\n', '\t   */\n', '\t  function transferFrom (address _from, address _to, uint256 _value)\n', '\t  public returns (bool success) {\n', '\t\tuint256 spenderAllowance = allowances [_from][msg.sender];\n', '\t\tif (spenderAllowance < _value) return false;\n', '\t\tuint256 fromBalance = accounts [_from];\n', '\t\tif (fromBalance < _value) return false;\n', '\n', '\t\tallowances [_from][msg.sender] =\n', '\t\t  safeSub (spenderAllowance, _value);\n', '\n', '\t\tif (_value > 0 && _from != _to) {\n', '\t\t  accounts [_from] = safeSub (fromBalance, _value);\n', '\t\t  accounts [_to] = safeAdd (accounts [_to], _value);\n', '\t\t}\n', '\t\tTransfer (_from, _to, _value);\n', '\t\treturn true;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Allow given spender to transfer given number of tokens from message sender.\n', '\t   *\n', '\t   * @param _spender address to allow the owner of to transfer tokens from\n', '\t   *        message sender\n', '\t   * @param _value number of tokens to allow to transfer\n', '\t   * @return true if token transfer was successfully approved, false otherwise\n', '\t   */\n', '\t  function approve (address _spender, uint256 _value)\n', '\t  public returns (bool success) {\n', '\t\tallowances [msg.sender][_spender] = _value;\n', '\t\tApproval (msg.sender, _spender, _value);\n', '\n', '\t\treturn true;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Tell how many tokens given spender is currently allowed to transfer from\n', '\t   * given owner.\n', '\t   *\n', '\t   * @param _owner address to get number of tokens allowed to be transferred\n', '\t   *        from the owner of\n', '\t   * @param _spender address to get number of tokens allowed to be transferred\n', '\t   *        by the owner of\n', '\t   * @return number of tokens given spender is currently allowed to transfer\n', '\t   *         from given owner\n', '\t   */\n', '\t  function allowance (address _owner, address _spender)\n', '\t  public view returns (uint256 remaining) {\n', '\t\treturn allowances [_owner][_spender];\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Mapping from addresses of token holders to the numbers of tokens belonging\n', '\t   * to these token holders.\n', '\t   */\n', '\t  mapping (address => uint256) internal accounts;\n', '\n', '\t  /**\n', '\t   * Mapping from addresses of token holders to the mapping of addresses of\n', '\t   * spenders to the allowances set by these token holders to these spenders.\n', '\t   */\n', '\t  mapping (address => mapping (address => uint256)) internal allowances;\n', '\t}\n', '\n', '\n', '\t/**\n', '\t * Cubomania token smart contract.\n', '\t */\n', '\tcontract CuboToken is AbstractToken {\n', '\t  /**\n', '\t   * Total number of tokens in circulation.\n', '\t   */\n', '\t  uint256 tokenCount;\n', '\n', '\t  /**\n', '\t   * Create new Cubomania token smart contract, with given number of tokens issued\n', '\t   * and given to msg.sender.\n', '\t   *\n', '\t   * @param _tokenCount number of tokens to issue and give to msg.sender\n', '\t   */\n', '\t  function CuboToken (uint256 _tokenCount) public {\n', '\t\ttokenCount = _tokenCount;\n', '\t\taccounts [msg.sender] = _tokenCount;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Get total number of tokens in circulation.\n', '\t   *\n', '\t   * @return total number of tokens in circulation\n', '\t   */\n', '\t  function totalSupply () public view returns (uint256 supply) {\n', '\t\treturn tokenCount;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Get name of this token.\n', '\t   *\n', '\t   * @return name of this token\n', '\t   */\n', '\t  function name () public pure returns (string result) {\n', '\t\treturn "Cubo";\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Get symbol of this token.\n', '\t   *\n', '\t   * @return symbol of this token\n', '\t   */\n', '\t  function symbol () public pure returns (string result) {\n', '\t\treturn "CUBO";\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Get number of decimals for this token.\n', '\t   *\n', '\t   * @return number of decimals for this token\n', '\t   */\n', '\t  function decimals () public pure returns (uint8 result) {\n', '\t\treturn 6;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * Change how many tokens given spender is allowed to transfer from message\n', '\t   * spender.  In order to prevent double spending of allowance, this method\n', '\t   * receives assumed current allowance value as an argument.  If actual\n', '\t   * allowance differs from an assumed one, this method just returns false.\n', '\t   *\n', '\t   * @param _spender address to allow the owner of to transfer tokens from\n', '\t   *        message sender\n', '\t   * @param _currentValue assumed number of tokens currently allowed to be\n', '\t   *        transferred\n', '\t   * @param _newValue number of tokens to allow to transfer\n', '\t   * @return true if token transfer was successfully approved, false otherwise\n', '\t   */\n', '\t  function approve (address _spender, uint256 _currentValue, uint256 _newValue)\n', '\t\tpublic returns (bool success) {\n', '\t\tif (allowance (msg.sender, _spender) == _currentValue)\n', '\t\t  return approve (_spender, _newValue);\n', '\t\telse return false;\n', '\t  }\n', '\t}']
