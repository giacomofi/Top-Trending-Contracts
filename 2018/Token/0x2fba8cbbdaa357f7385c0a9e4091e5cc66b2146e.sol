['pragma solidity 0.4.19;\n', '\n', '// File: contracts/NokuPricingPlan.sol\n', '\n', '/**\n', '* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\n', '*/\n', 'interface NokuPricingPlan {\n', '    /**\n', '    * @dev Pay the fee for the service identified by the specified name.\n', '    * The fee amount shall already be approved by the client.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @param client The client of the target service.\n', '    * @return true if fee has been paid.\n', '    */\n', '    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\n', '\n', '    /**\n', '    * @dev Get the usage fee for the service identified by the specified name.\n', '    * The returned fee amount shall be approved before using #payFee method.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @return The amount to approve before really paying such fee.\n', '    */\n', '    function usageFee(bytes32 serviceName, uint256 multiplier) public constant returns(uint fee);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/NokuTokenBurner.sol\n', '\n', 'contract BurnableERC20 is ERC20 {\n', '    function burn(uint256 amount) public returns (bool burned);\n', '}\n', '\n', '/**\n', '* @dev The NokuTokenBurner contract has the responsibility to burn the configured fraction of received\n', '* ERC20-compliant tokens and distribute the remainder to the configured wallet.\n', '*/\n', 'contract NokuTokenBurner is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    event LogNokuTokenBurnerCreated(address indexed caller, address indexed wallet);\n', '    event LogBurningPercentageChanged(address indexed caller, uint256 indexed burningPercentage);\n', '\n', '    // The wallet receiving the unburnt tokens.\n', '    address public wallet;\n', '\n', '    // The percentage of tokens to burn after being received (range [0, 100])\n', '    uint256 public burningPercentage;\n', '\n', '    // The cumulative amount of burnt tokens.\n', '    uint256 public burnedTokens;\n', '\n', '    // The cumulative amount of tokens transferred back to the wallet.\n', '    uint256 public transferredTokens;\n', '\n', '    /**\n', '    * @dev Create a new NokuTokenBurner with predefined burning fraction.\n', '    * @param _wallet The wallet receiving the unburnt tokens.\n', '    */\n', '    function NokuTokenBurner(address _wallet) public {\n', '        require(_wallet != address(0));\n', '        \n', '        wallet = _wallet;\n', '        burningPercentage = 100;\n', '\n', '        LogNokuTokenBurnerCreated(msg.sender, _wallet);\n', '    }\n', '\n', '    /**\n', '    * @dev Change the percentage of tokens to burn after being received.\n', '    * @param _burningPercentage The percentage of tokens to be burnt.\n', '    */\n', '    function setBurningPercentage(uint256 _burningPercentage) public onlyOwner {\n', '        require(0 <= _burningPercentage && _burningPercentage <= 100);\n', '        require(_burningPercentage != burningPercentage);\n', '        \n', '        burningPercentage = _burningPercentage;\n', '\n', '        LogBurningPercentageChanged(msg.sender, _burningPercentage);\n', '    }\n', '\n', '    /**\n', '    * @dev Called after burnable tokens has been transferred for burning.\n', '    * @param _token THe extended ERC20 interface supported by the sent tokens.\n', '    * @param _amount The amount of burnable tokens just arrived ready for burning.\n', '    */\n', '    function tokenReceived(address _token, uint256 _amount) public whenNotPaused {\n', '        require(_token != address(0));\n', '        require(_amount > 0);\n', '\n', '        uint256 amountToBurn = _amount.mul(burningPercentage).div(100);\n', '        if (amountToBurn > 0) {\n', '            assert(BurnableERC20(_token).burn(amountToBurn));\n', '            \n', '            burnedTokens = burnedTokens.add(amountToBurn);\n', '        }\n', '\n', '        uint256 amountToTransfer = _amount.sub(amountToBurn);\n', '        if (amountToTransfer > 0) {\n', '            assert(BurnableERC20(_token).transfer(wallet, amountToTransfer));\n', '\n', '            transferredTokens = transferredTokens.add(amountToTransfer);\n', '        }\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/NokuCustomERC20.sol\n', '\n', '/**\n', '* @dev The NokuCustomERC20Token contract is a custom ERC20-compliant token available in the Noku Service Platform (NSP).\n', '* The Noku customer is able to choose the token name, symbol, decimals, initial supply and to administer its lifecycle\n', '* by minting or burning tokens in order to increase or decrease the token supply.\n', '*/\n', 'contract NokuCustomERC20 is Ownable, DetailedERC20, MintableToken, BurnableToken {\n', '    using SafeMath for uint256;\n', '\n', '    event LogNokuCustomERC20Created(\n', '        address indexed caller,\n', '        string indexed name,\n', '        string indexed symbol,\n', '        uint8 decimals,\n', '        address pricingPlan,\n', '        address serviceProvider\n', '    );\n', '    event LogTransferFeePercentageChanged(address indexed caller, uint256 indexed transferFeePercentage);\n', '    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n', '\n', '    // The entity acting as Custom token service provider i.e. Noku\n', '    address public serviceProvider;\n', '\n', '    // The pricing plan determining the fee to be paid in NOKU tokens by customers for using Noku services\n', '    address public pricingPlan;\n', '\n', '    // The fee percentage for Custom token transfer or zero if transfer is free of charge\n', '    uint256 public transferFeePercentage;\n', '\n', '    bytes32 public constant CUSTOM_ERC20_BURN_SERVICE_NAME = "NokuCustomERC20.burn";\n', '    bytes32 public constant CUSTOM_ERC20_MINT_SERVICE_NAME = "NokuCustomERC20.mint";\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only by service provider i.e. Noku.\n', '    */\n', '    modifier onlyServiceProvider() {\n', '        require(msg.sender == serviceProvider);\n', '        _;\n', '    }\n', '\n', '    function NokuCustomERC20(\n', '        string _name,\n', '        string _symbol,\n', '        uint8 _decimals,\n', '        address _pricingPlan,\n', '        address _serviceProvider\n', '    )\n', '    DetailedERC20 (_name, _symbol, _decimals) public\n', '    {\n', '        require(bytes(_name).length > 0);\n', '        require(bytes(_symbol).length > 0);\n', '        require(_pricingPlan != 0);\n', '        require(_serviceProvider != 0);\n', '\n', '        pricingPlan = _pricingPlan;\n', '        serviceProvider = _serviceProvider;\n', '\n', '        LogNokuCustomERC20Created(\n', '            msg.sender,\n', '            _name,\n', '            _symbol,\n', '            _decimals,\n', '            _pricingPlan,\n', '            _serviceProvider\n', '        );\n', '    }\n', '\n', '    function isCustomToken() public pure returns(bool isCustom) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Change the transfer fee percentage to be paid in Custom tokens.\n', '    * @param _transferFeePercentage The fee percentage to be paid for transfer in range [0, 100].\n', '    */\n', '    function setTransferFeePercentage(uint256 _transferFeePercentage) public onlyOwner {\n', '        require(0 <= _transferFeePercentage && _transferFeePercentage <= 100);\n', '        require(_transferFeePercentage != transferFeePercentage);\n', '\n', '        transferFeePercentage = _transferFeePercentage;\n', '\n', '        LogTransferFeePercentageChanged(msg.sender, _transferFeePercentage);\n', '    }\n', '\n', '    /**\n', '    * @dev Change the pricing plan of service fee to be paid in NOKU tokens.\n', '    * @param _pricingPlan The pricing plan of NOKU token to be paid, zero means flat subscription.\n', '    */\n', '    function setPricingPlan(address _pricingPlan) public onlyServiceProvider {\n', '        require(_pricingPlan != 0);\n', '        require(_pricingPlan != pricingPlan);\n', '\n', '        pricingPlan = _pricingPlan;\n', '\n', '        LogPricingPlanChanged(msg.sender, _pricingPlan);\n', '    }\n', '\n', '    /**\n', '    * @dev Get the fee to be paid for the transfer of NOKU tokens.\n', '    * @param _value The amount of NOKU tokens to be transferred.\n', '    */\n', '    function transferFee(uint256 _value) public view returns (uint256 usageFee) {\n', '        return _value.mul(transferFeePercentage).div(100);\n', '    }\n', '\n', '    /**\n', '    * @dev Override #transfer for optionally paying fee to Custom token owner.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool transferred) {\n', '        if (transferFeePercentage == 0) {\n', '            return super.transfer(_to, _value);\n', '        }\n', '        else {\n', '            uint256 usageFee = transferFee(_value);\n', '            uint256 netValue = _value.sub(usageFee);\n', '\n', '            bool feeTransferred = super.transfer(owner, usageFee);\n', '            bool netValueTransferred = super.transfer(_to, netValue);\n', '\n', '            return feeTransferred && netValueTransferred;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Override #transferFrom for optionally paying fee to Custom token owner.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool transferred) {\n', '        if (transferFeePercentage == 0) {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '        else {\n', '            uint256 usageFee = transferFee(_value);\n', '            uint256 netValue = _value.sub(usageFee);\n', '\n', '            bool feeTransferred = super.transferFrom(_from, owner, usageFee);\n', '            bool netValueTransferred = super.transferFrom(_from, _to, netValue);\n', '\n', '            return feeTransferred && netValueTransferred;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Burn a specific amount of tokens, paying the service fee.\n', '    * @param _amount The amount of token to be burned.\n', '    */\n', '    function burn(uint256 _amount) public {\n', '        require(_amount > 0);\n', '\n', '        super.burn(_amount);\n', '\n', '        require(NokuPricingPlan(pricingPlan).payFee(CUSTOM_ERC20_BURN_SERVICE_NAME, _amount, msg.sender));\n', '    }\n', '\n', '    /**\n', '    * @dev Mint a specific amount of tokens, paying the service fee.\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool minted) {\n', '        require(_to != 0);\n', '        require(_amount > 0);\n', '\n', '        super.mint(_to, _amount);\n', '\n', '        require(NokuPricingPlan(pricingPlan).payFee(CUSTOM_ERC20_MINT_SERVICE_NAME, _amount, msg.sender));\n', '\n', '        return true;\n', '    }\n', '}']