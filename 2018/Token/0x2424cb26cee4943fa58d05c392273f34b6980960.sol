['pragma solidity ^0.4.18;\n', '\n', 'contract DelegateERC20 {\n', '  function delegateTotalSupply() public view returns (uint256);\n', '  function delegateBalanceOf(address who) public view returns (uint256);\n', '  function delegateTransfer(address to, uint256 value, address origSender) public returns (bool);\n', '  function delegateAllowance(address owner, address spender) public view returns (uint256);\n', '  function delegateTransferFrom(address from, address to, uint256 value, address origSender) public returns (bool);\n', '  function delegateApprove(address spender, uint256 value, address origSender) public returns (bool);\n', '  function delegateIncreaseApproval(address spender, uint addedValue, address origSender) public returns (bool);\n', '  function delegateDecreaseApproval(address spender, uint subtractedValue, address origSender) public returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract AddressList is Claimable {\n', '    string public name;\n', '    mapping (address => bool) public onList;\n', '\n', '    function AddressList(string _name, bool nullValue) public {\n', '        name = _name;\n', '        onList[0x0] = nullValue;\n', '    }\n', '    event ChangeWhiteList(address indexed to, bool onList);\n', '\n', '    // Set whether _to is on the list or not. Whether 0x0 is on the list\n', '    // or not cannot be set here - it is set once and for all by the constructor.\n', '    function changeList(address _to, bool _onList) onlyOwner public {\n', '        require(_to != 0x0);\n', '        if (onList[_to] != _onList) {\n', '            onList[_to] = _onList;\n', '            ChangeWhiteList(_to, _onList);\n', '        }\n', '    }\n', '}\n', '\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimContract(address contractAddr) external onlyOwner {\n', '    Ownable contractInst = Ownable(contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    assert(owner.send(this.balance));\n', '  }\n', '}\n', '\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC223 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n', '}\n', '\n', 'contract AllowanceSheet is Claimable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowanceOf;\n', '\n', '    function addAllowance(address tokenHolder, address spender, uint256 value) public onlyOwner {\n', '        allowanceOf[tokenHolder][spender] = allowanceOf[tokenHolder][spender].add(value);\n', '    }\n', '\n', '    function subAllowance(address tokenHolder, address spender, uint256 value) public onlyOwner {\n', '        allowanceOf[tokenHolder][spender] = allowanceOf[tokenHolder][spender].sub(value);\n', '    }\n', '\n', '    function setAllowance(address tokenHolder, address spender, uint256 value) public onlyOwner {\n', '        allowanceOf[tokenHolder][spender] = value;\n', '    }\n', '}\n', '\n', 'contract BalanceSheet is Claimable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    function addBalance(address addr, uint256 value) public onlyOwner {\n', '        balanceOf[addr] = balanceOf[addr].add(value);\n', '    }\n', '\n', '    function subBalance(address addr, uint256 value) public onlyOwner {\n', '        balanceOf[addr] = balanceOf[addr].sub(value);\n', '    }\n', '\n', '    function setBalance(address addr, uint256 value) public onlyOwner {\n', '        balanceOf[addr] = value;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic, Claimable {\n', '  using SafeMath for uint256;\n', '\n', '  BalanceSheet balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function setBalanceSheet(address sheet) external onlyOwner {\n', '    balances = BalanceSheet(sheet);\n', '    balances.claimOwnership();\n', '  }\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    transferAllArgsNoAllowance(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferAllArgsNoAllowance(address _from, address _to, uint256 _value) internal {\n', '    require(_to != address(0));\n', '    require(_from != address(0));\n', '    require(_value <= balances.balanceOf(_from));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances.subBalance(_from, _value);\n', '    balances.addBalance(_to, _value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances.balanceOf(_owner);\n', '  }\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances.balanceOf(msg.sender));\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances.subBalance(burner, _value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  AllowanceSheet allowances;\n', '\n', '  function setAllowanceSheet(address sheet) external onlyOwner {\n', '    allowances = AllowanceSheet(sheet);\n', '    allowances.claimOwnership();\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    transferAllArgsYesAllowance(_from, _to, _value, msg.sender);\n', '    return true;\n', '  }\n', '\n', '  function transferAllArgsYesAllowance(address _from, address _to, uint256 _value, address spender) internal {\n', '    require(_value <= allowances.allowanceOf(_from, spender));\n', '\n', '    allowances.subAllowance(_from, spender, _value);\n', '    transferAllArgsNoAllowance(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    approveAllArgs(_spender, _value, msg.sender);\n', '    return true;\n', '  }\n', '\n', '  function approveAllArgs(address _spender, uint256 _value, address _tokenHolder) internal {\n', '    allowances.setAllowance(_tokenHolder, _spender, _value);\n', '    Approval(_tokenHolder, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowances.allowanceOf(_owner, _spender);\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    increaseApprovalAllArgs(_spender, _addedValue, msg.sender);\n', '    return true;\n', '  }\n', '\n', '  function increaseApprovalAllArgs(address _spender, uint _addedValue, address tokenHolder) internal {\n', '    allowances.addAllowance(tokenHolder, _spender, _addedValue);\n', '    Approval(tokenHolder, _spender, allowances.allowanceOf(tokenHolder, _spender));\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    decreaseApprovalAllArgs(_spender, _subtractedValue, msg.sender);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApprovalAllArgs(address _spender, uint _subtractedValue, address tokenHolder) internal {\n', '    uint oldValue = allowances.allowanceOf(tokenHolder, _spender);\n', '    if (_subtractedValue > oldValue) {\n', '      allowances.setAllowance(tokenHolder, _spender, 0);\n', '    } else {\n', '      allowances.subAllowance(tokenHolder, _spender, _subtractedValue);\n', '    }\n', '    Approval(tokenHolder, _spender, allowances.allowanceOf(tokenHolder, _spender));\n', '  }\n', '\n', '}\n', '\n', 'contract CanDelegate is StandardToken {\n', '    // If this contract needs to be upgraded, the new contract will be stored\n', '    // in &#39;delegate&#39; and any ERC20 calls to this contract will be delegated to that one.\n', '    DelegateERC20 public delegate;\n', '\n', '    event DelegatedTo(address indexed newContract);\n', '\n', '    // Can undelegate by passing in newContract = address(0)\n', '    function delegateToNewContract(DelegateERC20 newContract) public onlyOwner {\n', '        delegate = newContract;\n', '        DelegatedTo(delegate);\n', '    }\n', '\n', '    // If a delegate has been designated, all ERC20 calls are forwarded to it\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        if (delegate == address(0)) {\n', '            return super.transfer(to, value);\n', '        } else {\n', '            return delegate.delegateTransfer(to, value, msg.sender);\n', '        }\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        if (delegate == address(0)) {\n', '            return super.transferFrom(from, to, value);\n', '        } else {\n', '            return delegate.delegateTransferFrom(from, to, value, msg.sender);\n', '        }\n', '    }\n', '\n', '    function balanceOf(address who) public view returns (uint256) {\n', '        if (delegate == address(0)) {\n', '            return super.balanceOf(who);\n', '        } else {\n', '            return delegate.delegateBalanceOf(who);\n', '        }\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        if (delegate == address(0)) {\n', '            return super.approve(spender, value);\n', '        } else {\n', '            return delegate.delegateApprove(spender, value, msg.sender);\n', '        }\n', '    }\n', '\n', '    function allowance(address _owner, address spender) public view returns (uint256) {\n', '        if (delegate == address(0)) {\n', '            return super.allowance(_owner, spender);\n', '        } else {\n', '            return delegate.delegateAllowance(_owner, spender);\n', '        }\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        if (delegate == address(0)) {\n', '            return super.totalSupply();\n', '        } else {\n', '            return delegate.delegateTotalSupply();\n', '        }\n', '    }\n', '\n', '    function increaseApproval(address spender, uint addedValue) public returns (bool) {\n', '        if (delegate == address(0)) {\n', '            return super.increaseApproval(spender, addedValue);\n', '        } else {\n', '            return delegate.delegateIncreaseApproval(spender, addedValue, msg.sender);\n', '        }\n', '    }\n', '\n', '    function decreaseApproval(address spender, uint subtractedValue) public returns (bool) {\n', '        if (delegate == address(0)) {\n', '            return super.decreaseApproval(spender, subtractedValue);\n', '        } else {\n', '            return delegate.delegateDecreaseApproval(spender, subtractedValue, msg.sender);\n', '        }\n', '    }\n', '}\n', '\n', 'contract StandardDelegate is StandardToken, DelegateERC20 {\n', '    address public delegatedFrom;\n', '\n', '    modifier onlySender(address source) {\n', '        require(msg.sender == source);\n', '        _;\n', '    }\n', '\n', '    function setDelegatedFrom(address addr) onlyOwner public {\n', '        delegatedFrom = addr;\n', '    }\n', '\n', '    // All delegate ERC20 functions are forwarded to corresponding normal functions\n', '    function delegateTotalSupply() public view returns (uint256) {\n', '        return totalSupply();\n', '    }\n', '\n', '    function delegateBalanceOf(address who) public view returns (uint256) {\n', '        return balanceOf(who);\n', '    }\n', '\n', '    function delegateTransfer(address to, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\n', '        transferAllArgsNoAllowance(origSender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function delegateAllowance(address owner, address spender) public view returns (uint256) {\n', '        return allowance(owner, spender);\n', '    }\n', '\n', '    function delegateTransferFrom(address from, address to, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\n', '        transferAllArgsYesAllowance(from, to, value, origSender);\n', '        return true;\n', '    }\n', '\n', '    function delegateApprove(address spender, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\n', '        approveAllArgs(spender, value, origSender);\n', '        return true;\n', '    }\n', '\n', '    function delegateIncreaseApproval(address spender, uint addedValue, address origSender) onlySender(delegatedFrom) public returns (bool) {\n', '        increaseApprovalAllArgs(spender, addedValue, origSender);\n', '        return true;\n', '    }\n', '\n', '    function delegateDecreaseApproval(address spender, uint subtractedValue, address origSender) onlySender(delegatedFrom) public returns (bool) {\n', '        decreaseApprovalAllArgs(spender, subtractedValue, origSender);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract TrueUSD is StandardDelegate, PausableToken, BurnableToken, NoOwner, CanDelegate {\n', '    string public name = "TrueUSD";\n', '    string public symbol = "TUSD";\n', '    uint8 public constant decimals = 18;\n', '\n', '    AddressList public canReceiveMintWhiteList;\n', '    AddressList public canBurnWhiteList;\n', '    AddressList public blackList;\n', '    AddressList public noFeesList;\n', '    uint256 public burnMin = 10000 * 10**uint256(decimals);\n', '    uint256 public burnMax = 20000000 * 10**uint256(decimals);\n', '\n', '    uint80 public transferFeeNumerator = 7;\n', '    uint80 public transferFeeDenominator = 10000;\n', '    uint80 public mintFeeNumerator = 0;\n', '    uint80 public mintFeeDenominator = 10000;\n', '    uint256 public mintFeeFlat = 0;\n', '    uint80 public burnFeeNumerator = 0;\n', '    uint80 public burnFeeDenominator = 10000;\n', '    uint256 public burnFeeFlat = 0;\n', '    address public staker;\n', '\n', '    event ChangeBurnBoundsEvent(uint256 newMin, uint256 newMax);\n', '    event Mint(address indexed to, uint256 amount);\n', '    event WipedAccount(address indexed account, uint256 balance);\n', '\n', '    function TrueUSD() public {\n', '        totalSupply_ = 0;\n', '        staker = msg.sender;\n', '    }\n', '\n', '    function setLists(AddressList _canReceiveMintWhiteList, AddressList _canBurnWhiteList, AddressList _blackList, AddressList _noFeesList) onlyOwner public {\n', '        canReceiveMintWhiteList = _canReceiveMintWhiteList;\n', '        canBurnWhiteList = _canBurnWhiteList;\n', '        blackList = _blackList;\n', '        noFeesList = _noFeesList;\n', '    }\n', '\n', '    function changeName(string _name, string _symbol) onlyOwner public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    //Burning functions as withdrawing money from the system. The platform will keep track of who burns coins,\n', '    //and will send them back the equivalent amount of money (rounded down to the nearest cent).\n', '    function burn(uint256 _value) public {\n', '        require(canBurnWhiteList.onList(msg.sender));\n', '        require(_value >= burnMin);\n', '        require(_value <= burnMax);\n', '        uint256 fee = payStakingFee(msg.sender, _value, burnFeeNumerator, burnFeeDenominator, burnFeeFlat, 0x0);\n', '        uint256 remaining = _value.sub(fee);\n', '        super.burn(remaining);\n', '    }\n', '\n', '    //Create _amount new tokens and transfer them to _to.\n', '    //Based on code by OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/MintableToken.sol\n', '    function mint(address _to, uint256 _amount) onlyOwner public {\n', '        require(canReceiveMintWhiteList.onList(_to));\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances.addBalance(_to, _amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        payStakingFee(_to, _amount, mintFeeNumerator, mintFeeDenominator, mintFeeFlat, 0x0);\n', '    }\n', '\n', '    //Change the minimum and maximum amount that can be burned at once. Burning\n', '    //may be disabled by setting both to 0 (this will not be done under normal\n', '    //operation, but we can&#39;t add checks to disallow it without losing a lot of\n', '    //flexibility since burning could also be as good as disabled\n', '    //by setting the minimum extremely high, and we don&#39;t want to lock\n', '    //in any particular cap for the minimum)\n', '    function changeBurnBounds(uint newMin, uint newMax) onlyOwner public {\n', '        require(newMin <= newMax);\n', '        burnMin = newMin;\n', '        burnMax = newMax;\n', '        ChangeBurnBoundsEvent(newMin, newMax);\n', '    }\n', '\n', '    // transfer and transferFrom are both dispatched to this function, so we\n', '    // check blacklist and pay staking fee here.\n', '    function transferAllArgsNoAllowance(address _from, address _to, uint256 _value) internal {\n', '        require(!blackList.onList(_from));\n', '        require(!blackList.onList(_to));\n', '        super.transferAllArgsNoAllowance(_from, _to, _value);\n', '        payStakingFee(_to, _value, transferFeeNumerator, transferFeeDenominator, 0, _from);\n', '    }\n', '\n', '    function wipeBlacklistedAccount(address account) public onlyOwner {\n', '        require(blackList.onList(account));\n', '        uint256 oldValue = balanceOf(account);\n', '        balances.setBalance(account, 0);\n', '        totalSupply_ = totalSupply_.sub(oldValue);\n', '        WipedAccount(account, oldValue);\n', '    }\n', '\n', '    function payStakingFee(address payer, uint256 value, uint80 numerator, uint80 denominator, uint256 flatRate, address otherParticipant) private returns (uint256) {\n', '        if (noFeesList.onList(payer) || noFeesList.onList(otherParticipant)) {\n', '            return 0;\n', '        }\n', '        uint256 stakingFee = value.mul(numerator).div(denominator).add(flatRate);\n', '        if (stakingFee > 0) {\n', '            super.transferAllArgsNoAllowance(payer, staker, stakingFee);\n', '        }\n', '        return stakingFee;\n', '    }\n', '\n', '    function changeStakingFees(uint80 _transferFeeNumerator,\n', '                                 uint80 _transferFeeDenominator,\n', '                                 uint80 _mintFeeNumerator,\n', '                                 uint80 _mintFeeDenominator,\n', '                                 uint256 _mintFeeFlat,\n', '                                 uint80 _burnFeeNumerator,\n', '                                 uint80 _burnFeeDenominator,\n', '                                 uint256 _burnFeeFlat) public onlyOwner {\n', '        require(_transferFeeDenominator != 0);\n', '        require(_mintFeeDenominator != 0);\n', '        require(_burnFeeDenominator != 0);\n', '        transferFeeNumerator = _transferFeeNumerator;\n', '        transferFeeDenominator = _transferFeeDenominator;\n', '        mintFeeNumerator = _mintFeeNumerator;\n', '        mintFeeDenominator = _mintFeeDenominator;\n', '        mintFeeFlat = _mintFeeFlat;\n', '        burnFeeNumerator = _burnFeeNumerator;\n', '        burnFeeDenominator = _burnFeeDenominator;\n', '        burnFeeFlat = _burnFeeFlat;\n', '    }\n', '\n', '    function changeStaker(address newStaker) public onlyOwner {\n', '        require(newStaker != address(0));\n', '        staker = newStaker;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract DelegateERC20 {\n', '  function delegateTotalSupply() public view returns (uint256);\n', '  function delegateBalanceOf(address who) public view returns (uint256);\n', '  function delegateTransfer(address to, uint256 value, address origSender) public returns (bool);\n', '  function delegateAllowance(address owner, address spender) public view returns (uint256);\n', '  function delegateTransferFrom(address from, address to, uint256 value, address origSender) public returns (bool);\n', '  function delegateApprove(address spender, uint256 value, address origSender) public returns (bool);\n', '  function delegateIncreaseApproval(address spender, uint addedValue, address origSender) public returns (bool);\n', '  function delegateDecreaseApproval(address spender, uint subtractedValue, address origSender) public returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract AddressList is Claimable {\n', '    string public name;\n', '    mapping (address => bool) public onList;\n', '\n', '    function AddressList(string _name, bool nullValue) public {\n', '        name = _name;\n', '        onList[0x0] = nullValue;\n', '    }\n', '    event ChangeWhiteList(address indexed to, bool onList);\n', '\n', '    // Set whether _to is on the list or not. Whether 0x0 is on the list\n', '    // or not cannot be set here - it is set once and for all by the constructor.\n', '    function changeList(address _to, bool _onList) onlyOwner public {\n', '        require(_to != 0x0);\n', '        if (onList[_to] != _onList) {\n', '            onList[_to] = _onList;\n', '            ChangeWhiteList(_to, _onList);\n', '        }\n', '    }\n', '}\n', '\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimContract(address contractAddr) external onlyOwner {\n', '    Ownable contractInst = Ownable(contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    assert(owner.send(this.balance));\n', '  }\n', '}\n', '\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC223 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n', '}\n', '\n', 'contract AllowanceSheet is Claimable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowanceOf;\n', '\n', '    function addAllowance(address tokenHolder, address spender, uint256 value) public onlyOwner {\n', '        allowanceOf[tokenHolder][spender] = allowanceOf[tokenHolder][spender].add(value);\n', '    }\n', '\n', '    function subAllowance(address tokenHolder, address spender, uint256 value) public onlyOwner {\n', '        allowanceOf[tokenHolder][spender] = allowanceOf[tokenHolder][spender].sub(value);\n', '    }\n', '\n', '    function setAllowance(address tokenHolder, address spender, uint256 value) public onlyOwner {\n', '        allowanceOf[tokenHolder][spender] = value;\n', '    }\n', '}\n', '\n', 'contract BalanceSheet is Claimable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    function addBalance(address addr, uint256 value) public onlyOwner {\n', '        balanceOf[addr] = balanceOf[addr].add(value);\n', '    }\n', '\n', '    function subBalance(address addr, uint256 value) public onlyOwner {\n', '        balanceOf[addr] = balanceOf[addr].sub(value);\n', '    }\n', '\n', '    function setBalance(address addr, uint256 value) public onlyOwner {\n', '        balanceOf[addr] = value;\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic, Claimable {\n', '  using SafeMath for uint256;\n', '\n', '  BalanceSheet balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function setBalanceSheet(address sheet) external onlyOwner {\n', '    balances = BalanceSheet(sheet);\n', '    balances.claimOwnership();\n', '  }\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    transferAllArgsNoAllowance(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferAllArgsNoAllowance(address _from, address _to, uint256 _value) internal {\n', '    require(_to != address(0));\n', '    require(_from != address(0));\n', '    require(_value <= balances.balanceOf(_from));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances.subBalance(_from, _value);\n', '    balances.addBalance(_to, _value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances.balanceOf(_owner);\n', '  }\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances.balanceOf(msg.sender));\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances.subBalance(burner, _value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  AllowanceSheet allowances;\n', '\n', '  function setAllowanceSheet(address sheet) external onlyOwner {\n', '    allowances = AllowanceSheet(sheet);\n', '    allowances.claimOwnership();\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    transferAllArgsYesAllowance(_from, _to, _value, msg.sender);\n', '    return true;\n', '  }\n', '\n', '  function transferAllArgsYesAllowance(address _from, address _to, uint256 _value, address spender) internal {\n', '    require(_value <= allowances.allowanceOf(_from, spender));\n', '\n', '    allowances.subAllowance(_from, spender, _value);\n', '    transferAllArgsNoAllowance(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    approveAllArgs(_spender, _value, msg.sender);\n', '    return true;\n', '  }\n', '\n', '  function approveAllArgs(address _spender, uint256 _value, address _tokenHolder) internal {\n', '    allowances.setAllowance(_tokenHolder, _spender, _value);\n', '    Approval(_tokenHolder, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowances.allowanceOf(_owner, _spender);\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    increaseApprovalAllArgs(_spender, _addedValue, msg.sender);\n', '    return true;\n', '  }\n', '\n', '  function increaseApprovalAllArgs(address _spender, uint _addedValue, address tokenHolder) internal {\n', '    allowances.addAllowance(tokenHolder, _spender, _addedValue);\n', '    Approval(tokenHolder, _spender, allowances.allowanceOf(tokenHolder, _spender));\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    decreaseApprovalAllArgs(_spender, _subtractedValue, msg.sender);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApprovalAllArgs(address _spender, uint _subtractedValue, address tokenHolder) internal {\n', '    uint oldValue = allowances.allowanceOf(tokenHolder, _spender);\n', '    if (_subtractedValue > oldValue) {\n', '      allowances.setAllowance(tokenHolder, _spender, 0);\n', '    } else {\n', '      allowances.subAllowance(tokenHolder, _spender, _subtractedValue);\n', '    }\n', '    Approval(tokenHolder, _spender, allowances.allowanceOf(tokenHolder, _spender));\n', '  }\n', '\n', '}\n', '\n', 'contract CanDelegate is StandardToken {\n', '    // If this contract needs to be upgraded, the new contract will be stored\n', "    // in 'delegate' and any ERC20 calls to this contract will be delegated to that one.\n", '    DelegateERC20 public delegate;\n', '\n', '    event DelegatedTo(address indexed newContract);\n', '\n', '    // Can undelegate by passing in newContract = address(0)\n', '    function delegateToNewContract(DelegateERC20 newContract) public onlyOwner {\n', '        delegate = newContract;\n', '        DelegatedTo(delegate);\n', '    }\n', '\n', '    // If a delegate has been designated, all ERC20 calls are forwarded to it\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        if (delegate == address(0)) {\n', '            return super.transfer(to, value);\n', '        } else {\n', '            return delegate.delegateTransfer(to, value, msg.sender);\n', '        }\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        if (delegate == address(0)) {\n', '            return super.transferFrom(from, to, value);\n', '        } else {\n', '            return delegate.delegateTransferFrom(from, to, value, msg.sender);\n', '        }\n', '    }\n', '\n', '    function balanceOf(address who) public view returns (uint256) {\n', '        if (delegate == address(0)) {\n', '            return super.balanceOf(who);\n', '        } else {\n', '            return delegate.delegateBalanceOf(who);\n', '        }\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        if (delegate == address(0)) {\n', '            return super.approve(spender, value);\n', '        } else {\n', '            return delegate.delegateApprove(spender, value, msg.sender);\n', '        }\n', '    }\n', '\n', '    function allowance(address _owner, address spender) public view returns (uint256) {\n', '        if (delegate == address(0)) {\n', '            return super.allowance(_owner, spender);\n', '        } else {\n', '            return delegate.delegateAllowance(_owner, spender);\n', '        }\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        if (delegate == address(0)) {\n', '            return super.totalSupply();\n', '        } else {\n', '            return delegate.delegateTotalSupply();\n', '        }\n', '    }\n', '\n', '    function increaseApproval(address spender, uint addedValue) public returns (bool) {\n', '        if (delegate == address(0)) {\n', '            return super.increaseApproval(spender, addedValue);\n', '        } else {\n', '            return delegate.delegateIncreaseApproval(spender, addedValue, msg.sender);\n', '        }\n', '    }\n', '\n', '    function decreaseApproval(address spender, uint subtractedValue) public returns (bool) {\n', '        if (delegate == address(0)) {\n', '            return super.decreaseApproval(spender, subtractedValue);\n', '        } else {\n', '            return delegate.delegateDecreaseApproval(spender, subtractedValue, msg.sender);\n', '        }\n', '    }\n', '}\n', '\n', 'contract StandardDelegate is StandardToken, DelegateERC20 {\n', '    address public delegatedFrom;\n', '\n', '    modifier onlySender(address source) {\n', '        require(msg.sender == source);\n', '        _;\n', '    }\n', '\n', '    function setDelegatedFrom(address addr) onlyOwner public {\n', '        delegatedFrom = addr;\n', '    }\n', '\n', '    // All delegate ERC20 functions are forwarded to corresponding normal functions\n', '    function delegateTotalSupply() public view returns (uint256) {\n', '        return totalSupply();\n', '    }\n', '\n', '    function delegateBalanceOf(address who) public view returns (uint256) {\n', '        return balanceOf(who);\n', '    }\n', '\n', '    function delegateTransfer(address to, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\n', '        transferAllArgsNoAllowance(origSender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function delegateAllowance(address owner, address spender) public view returns (uint256) {\n', '        return allowance(owner, spender);\n', '    }\n', '\n', '    function delegateTransferFrom(address from, address to, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\n', '        transferAllArgsYesAllowance(from, to, value, origSender);\n', '        return true;\n', '    }\n', '\n', '    function delegateApprove(address spender, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {\n', '        approveAllArgs(spender, value, origSender);\n', '        return true;\n', '    }\n', '\n', '    function delegateIncreaseApproval(address spender, uint addedValue, address origSender) onlySender(delegatedFrom) public returns (bool) {\n', '        increaseApprovalAllArgs(spender, addedValue, origSender);\n', '        return true;\n', '    }\n', '\n', '    function delegateDecreaseApproval(address spender, uint subtractedValue, address origSender) onlySender(delegatedFrom) public returns (bool) {\n', '        decreaseApprovalAllArgs(spender, subtractedValue, origSender);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract TrueUSD is StandardDelegate, PausableToken, BurnableToken, NoOwner, CanDelegate {\n', '    string public name = "TrueUSD";\n', '    string public symbol = "TUSD";\n', '    uint8 public constant decimals = 18;\n', '\n', '    AddressList public canReceiveMintWhiteList;\n', '    AddressList public canBurnWhiteList;\n', '    AddressList public blackList;\n', '    AddressList public noFeesList;\n', '    uint256 public burnMin = 10000 * 10**uint256(decimals);\n', '    uint256 public burnMax = 20000000 * 10**uint256(decimals);\n', '\n', '    uint80 public transferFeeNumerator = 7;\n', '    uint80 public transferFeeDenominator = 10000;\n', '    uint80 public mintFeeNumerator = 0;\n', '    uint80 public mintFeeDenominator = 10000;\n', '    uint256 public mintFeeFlat = 0;\n', '    uint80 public burnFeeNumerator = 0;\n', '    uint80 public burnFeeDenominator = 10000;\n', '    uint256 public burnFeeFlat = 0;\n', '    address public staker;\n', '\n', '    event ChangeBurnBoundsEvent(uint256 newMin, uint256 newMax);\n', '    event Mint(address indexed to, uint256 amount);\n', '    event WipedAccount(address indexed account, uint256 balance);\n', '\n', '    function TrueUSD() public {\n', '        totalSupply_ = 0;\n', '        staker = msg.sender;\n', '    }\n', '\n', '    function setLists(AddressList _canReceiveMintWhiteList, AddressList _canBurnWhiteList, AddressList _blackList, AddressList _noFeesList) onlyOwner public {\n', '        canReceiveMintWhiteList = _canReceiveMintWhiteList;\n', '        canBurnWhiteList = _canBurnWhiteList;\n', '        blackList = _blackList;\n', '        noFeesList = _noFeesList;\n', '    }\n', '\n', '    function changeName(string _name, string _symbol) onlyOwner public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    //Burning functions as withdrawing money from the system. The platform will keep track of who burns coins,\n', '    //and will send them back the equivalent amount of money (rounded down to the nearest cent).\n', '    function burn(uint256 _value) public {\n', '        require(canBurnWhiteList.onList(msg.sender));\n', '        require(_value >= burnMin);\n', '        require(_value <= burnMax);\n', '        uint256 fee = payStakingFee(msg.sender, _value, burnFeeNumerator, burnFeeDenominator, burnFeeFlat, 0x0);\n', '        uint256 remaining = _value.sub(fee);\n', '        super.burn(remaining);\n', '    }\n', '\n', '    //Create _amount new tokens and transfer them to _to.\n', '    //Based on code by OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/MintableToken.sol\n', '    function mint(address _to, uint256 _amount) onlyOwner public {\n', '        require(canReceiveMintWhiteList.onList(_to));\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances.addBalance(_to, _amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        payStakingFee(_to, _amount, mintFeeNumerator, mintFeeDenominator, mintFeeFlat, 0x0);\n', '    }\n', '\n', '    //Change the minimum and maximum amount that can be burned at once. Burning\n', '    //may be disabled by setting both to 0 (this will not be done under normal\n', "    //operation, but we can't add checks to disallow it without losing a lot of\n", '    //flexibility since burning could also be as good as disabled\n', "    //by setting the minimum extremely high, and we don't want to lock\n", '    //in any particular cap for the minimum)\n', '    function changeBurnBounds(uint newMin, uint newMax) onlyOwner public {\n', '        require(newMin <= newMax);\n', '        burnMin = newMin;\n', '        burnMax = newMax;\n', '        ChangeBurnBoundsEvent(newMin, newMax);\n', '    }\n', '\n', '    // transfer and transferFrom are both dispatched to this function, so we\n', '    // check blacklist and pay staking fee here.\n', '    function transferAllArgsNoAllowance(address _from, address _to, uint256 _value) internal {\n', '        require(!blackList.onList(_from));\n', '        require(!blackList.onList(_to));\n', '        super.transferAllArgsNoAllowance(_from, _to, _value);\n', '        payStakingFee(_to, _value, transferFeeNumerator, transferFeeDenominator, 0, _from);\n', '    }\n', '\n', '    function wipeBlacklistedAccount(address account) public onlyOwner {\n', '        require(blackList.onList(account));\n', '        uint256 oldValue = balanceOf(account);\n', '        balances.setBalance(account, 0);\n', '        totalSupply_ = totalSupply_.sub(oldValue);\n', '        WipedAccount(account, oldValue);\n', '    }\n', '\n', '    function payStakingFee(address payer, uint256 value, uint80 numerator, uint80 denominator, uint256 flatRate, address otherParticipant) private returns (uint256) {\n', '        if (noFeesList.onList(payer) || noFeesList.onList(otherParticipant)) {\n', '            return 0;\n', '        }\n', '        uint256 stakingFee = value.mul(numerator).div(denominator).add(flatRate);\n', '        if (stakingFee > 0) {\n', '            super.transferAllArgsNoAllowance(payer, staker, stakingFee);\n', '        }\n', '        return stakingFee;\n', '    }\n', '\n', '    function changeStakingFees(uint80 _transferFeeNumerator,\n', '                                 uint80 _transferFeeDenominator,\n', '                                 uint80 _mintFeeNumerator,\n', '                                 uint80 _mintFeeDenominator,\n', '                                 uint256 _mintFeeFlat,\n', '                                 uint80 _burnFeeNumerator,\n', '                                 uint80 _burnFeeDenominator,\n', '                                 uint256 _burnFeeFlat) public onlyOwner {\n', '        require(_transferFeeDenominator != 0);\n', '        require(_mintFeeDenominator != 0);\n', '        require(_burnFeeDenominator != 0);\n', '        transferFeeNumerator = _transferFeeNumerator;\n', '        transferFeeDenominator = _transferFeeDenominator;\n', '        mintFeeNumerator = _mintFeeNumerator;\n', '        mintFeeDenominator = _mintFeeDenominator;\n', '        mintFeeFlat = _mintFeeFlat;\n', '        burnFeeNumerator = _burnFeeNumerator;\n', '        burnFeeDenominator = _burnFeeDenominator;\n', '        burnFeeFlat = _burnFeeFlat;\n', '    }\n', '\n', '    function changeStaker(address newStaker) public onlyOwner {\n', '        require(newStaker != address(0));\n', '        staker = newStaker;\n', '    }\n', '}']
