['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  uint constant public MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/*\n', '  Contract to handle all behavior related to ownership of contracts\n', '  -handles tracking current owner and transferring ownership to new owners\n', '*/\n', 'contract Owned {\n', '  address public owner;\n', '  address private newOwner;\n', '\n', '  event OwnershipTransferred(address indexed_from, address indexed_to);\n', '\n', '  function Owned() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0); //reset newOwner to 0/null\n', '  }\n', '}\n', '\n', '/*\n', '  Interface for being ERC223 compliant\n', '  -ERC223 is an industry standard for smart contracts\n', '*/\n', 'contract ERC223 {\n', '  function balanceOf(address who) public view returns (uint);\n', '  \n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function decimals() public view returns (uint8 _decimals);\n', '  function totalSupply() public view returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', '/*\n', ' * Contract that is working with ERC223 tokens as a receiver for contract transfers\n', ' */\n', ' \n', ' contract ContractReceiver {\n', '     \n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '    \n', '    \n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '      TKN memory tkn;\n', '      tkn.sender = _from;\n', '      tkn.value = _value;\n', '      tkn.data = _data;\n', '      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '      tkn.sig = bytes4(u);\n', '      \n', '      /* tkn variable is analogue of msg variable of Ether transaction\n', '      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '      *  tkn.data is data of token transaction   (analogue of msg.data)\n', '      *  tkn.sig is 4 bytes signature of function\n', '      *  if data of token transaction is a function execution\n', '      */\n', '    }\n', '}\n', '\n', '/*\n', '  @author Nicholas Tuley\n', '  @desc Contract for the C2L token that carries out all token-specific behaviors for the C2L token\n', '*/\n', 'contract C2L is ERC223, Owned {\n', '  //constants\n', '  uint internal constant INITIAL_COIN_BALANCE = 21000000; //starting balance of 21 million coins\n', '\n', '  //variables\n', '  string public name = "C2L"; //name of currency\n', '  string public symbol = "C2L";\n', '  uint8 public decimals = 0;\n', '  mapping(address => bool) beingEdited; //mapping to prevent multiple edits of the same account occuring at the same time (reentrancy)\n', '\n', '  uint public totalCoinSupply = INITIAL_COIN_BALANCE; //number of this coin in active existence\n', '  mapping(address => uint) internal balances; //balances of users with this coin\n', '  mapping(address => mapping(address => uint)) internal allowed; //map holding how much each user is allowed to transfer out of other addresses\n', '  address[] addressLUT;\n', '\n', '  //C2L contract constructor\n', '  function C2L() public {\n', '    totalCoinSupply = INITIAL_COIN_BALANCE;\n', '    balances[owner] = totalCoinSupply;\n', '    updateAddresses(owner);\n', '  }\n', '\n', '  //getter methods for basic contract info\n', '  function name() public view returns (string _name) {\n', '    return name;\n', '  }\n', '\n', '  function symbol() public view returns (string _symbol) {\n', '    return symbol;\n', '  }\n', '\n', '  function decimals() public view returns (uint8 _decimals) {\n', '    return decimals;\n', '  }\n', '\n', '  /*\n', '    @return the total supply of this coin\n', '  */\n', '  function totalSupply() public view returns (uint256 _supply) {\n', '    return totalCoinSupply;\n', '  }\n', '\n', '  //toggle beingEdited status of this account\n', '  function setEditedTrue(address _subject) private {\n', '    beingEdited[_subject] = true;\n', '  }\n', '\n', '  function setEditedFalse(address _subject) private {\n', '    beingEdited[_subject] = false;\n', '  }\n', '\n', '  /*\n', '    get the balance of a given user\n', '    @param tokenOwner the address of the user account being queried\n', '    @return the balance of the given account\n', '  */\n', '  function balanceOf(address who) public view returns (uint) {\n', '    return balances[who];\n', '  }\n', '\n', '  /*\n', '    Check if the given address is a contract\n', '  */\n', '  function isContract(address _addr) private view returns (bool is_contract) {\n', '    uint length;\n', '    assembly {\n', '          //retrieve the size of the code on target address, this needs assembly\n', '          length := extcodesize(_addr)\n', '    }\n', '    return (length>0);\n', '  }\n', '\n', '  /*\n', '    owner mints new coins\n', '    @param amount The number of coins to mint\n', '    @condition\n', '      -the sender of this message must be the owner/minter/creator of this contract\n', '  */\n', '  function mint(uint amount) public onlyOwner {\n', '    require(beingEdited[owner] != true);\n', '    setEditedTrue(owner);\n', '    totalCoinSupply = SafeMath.add(totalCoinSupply, amount);\n', '    balances[owner] = SafeMath.add(balances[owner], amount);\n', '    setEditedFalse(owner);\n', '  }\n', '\n', '  /*\n', '    transfer tokens to a user from the msg sender\n', '    @param _to The address of the user coins are being sent to\n', '    @param _value The number of coins to send\n', '    @param _data The msg data for this transfer\n', '    @param _custom_fallback A custom fallback function for this transfer\n', '    @conditions:\n', '      -coin sender must have enough coins to carry out transfer\n', '      -the balances of the sender and receiver of the tokens must not be being edited by another transfer at the same time\n', '    @return True if execution of transfer is successful, False otherwise\n', '  */\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '    if(isContract(_to)) {\n', '      require(beingEdited[_to] != true && beingEdited[msg.sender] != true);\n', '      //make sure the sender has enough coins to transfer\n', '      require (balances[msg.sender] >= _value); \n', '      setEditedTrue(_to);\n', '      setEditedTrue(msg.sender);\n', '      //transfer the coins\n', '      balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '      balances[_to] = SafeMath.add(balances[_to], _value);\n', '      assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '      emit Transfer(msg.sender, _to, _value, _data); //log the transfer\n', '      setEditedFalse(_to);\n', '      setEditedFalse(msg.sender);\n', '      updateAddresses(_to);\n', '      updateAddresses(msg.sender);\n', '      return true;\n', '    }\n', '    else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  /*\n', '    Carry out transfer of tokens between accounts\n', '    @param _to The address of the user coins are being sent to\n', '    @param _value The number of coins to send\n', '    @param _data The msg data for this transfer\n', '    @conditions:\n', '      -coin sender must have enough coins to carry out transfer\n', '      -the balances of the sender and receiver of the tokens must not be being edited by another transfer at the same time\n', '    @return True if execution of transfer is successful, False otherwise\n', '  */\n', '  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '      if(isContract(_to)) {\n', '          return transferToContract(_to, _value, _data);\n', '      }\n', '      else {\n', '          return transferToAddress(_to, _value, _data);\n', '      }\n', '  }\n', '\n', '  /*\n', '    Backwards compatible transfer function to satisfy ERC20\n', '  */\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '      //standard function transfer similar to ERC20 transfer with no _data\n', '      //added due to backwards compatibility reasons\n', '      bytes memory empty;\n', '      if(isContract(_to)) {\n', '          return transferToContract(_to, _value, empty);\n', '      }\n', '      else {\n', '          return transferToAddress(_to, _value, empty);\n', '      }\n', '  }\n', '\n', '  //transfer function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '      require(beingEdited[_to] != true && beingEdited[msg.sender] != true);\n', '      require (balanceOf(msg.sender) >= _value);\n', '      setEditedTrue(_to);\n', '      setEditedTrue(msg.sender);\n', '      balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n', '      balances[_to] = SafeMath.add(balanceOf(_to), _value);\n', '      emit Transfer(msg.sender, _to, _value, _data);\n', '      setEditedFalse(_to);\n', '      setEditedFalse(msg.sender);\n', '      updateAddresses(_to);\n', '      updateAddresses(msg.sender);\n', '      return true;\n', '    }\n', '\n', '  //transfer function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '      require(beingEdited[_to] != true && beingEdited[msg.sender] != true);\n', '      require (balanceOf(msg.sender) >= _value);\n', '      setEditedTrue(_to);\n', '      setEditedTrue(msg.sender);\n', '      balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n', '      balances[_to] = SafeMath.add(balanceOf(_to), _value);\n', '      ContractReceiver receiver = ContractReceiver(_to);\n', '      receiver.tokenFallback(msg.sender, _value, _data);\n', '      emit Transfer(msg.sender, _to, _value, _data);\n', '      setEditedFalse(_to);\n', '      setEditedFalse(msg.sender);\n', '      updateAddresses(_to);\n', '      updateAddresses(msg.sender);\n', '      return true;\n', '  }\n', '\n', '  /*\n', '    update the addressLUT list of addresses by checking if the address is in the list already, and if not, add the address to the list\n', '    @param _lookup The address to check if it is in the list\n', '  */\n', '  function updateAddresses(address _lookup) private {\n', '    for(uint i = 0; i < addressLUT.length; i++) {\n', '      if(addressLUT[i] == _lookup) return;\n', '    }\n', '    addressLUT.push(_lookup);\n', '  }\n', '\n', '  //default, fallback function\n', '  function () public payable {\n', '  }\n', '\n', '  //self-destruct function for this contract\n', '  function killCoin() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '}']
['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  uint constant public MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/*\n', '  Contract to handle all behavior related to ownership of contracts\n', '  -handles tracking current owner and transferring ownership to new owners\n', '*/\n', 'contract Owned {\n', '  address public owner;\n', '  address private newOwner;\n', '\n', '  event OwnershipTransferred(address indexed_from, address indexed_to);\n', '\n', '  function Owned() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0); //reset newOwner to 0/null\n', '  }\n', '}\n', '\n', '/*\n', '  Interface for being ERC223 compliant\n', '  -ERC223 is an industry standard for smart contracts\n', '*/\n', 'contract ERC223 {\n', '  function balanceOf(address who) public view returns (uint);\n', '  \n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function decimals() public view returns (uint8 _decimals);\n', '  function totalSupply() public view returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', '/*\n', ' * Contract that is working with ERC223 tokens as a receiver for contract transfers\n', ' */\n', ' \n', ' contract ContractReceiver {\n', '     \n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '    \n', '    \n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '      TKN memory tkn;\n', '      tkn.sender = _from;\n', '      tkn.value = _value;\n', '      tkn.data = _data;\n', '      uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '      tkn.sig = bytes4(u);\n', '      \n', '      /* tkn variable is analogue of msg variable of Ether transaction\n', '      *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n', '      *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n', '      *  tkn.data is data of token transaction   (analogue of msg.data)\n', '      *  tkn.sig is 4 bytes signature of function\n', '      *  if data of token transaction is a function execution\n', '      */\n', '    }\n', '}\n', '\n', '/*\n', '  @author Nicholas Tuley\n', '  @desc Contract for the C2L token that carries out all token-specific behaviors for the C2L token\n', '*/\n', 'contract C2L is ERC223, Owned {\n', '  //constants\n', '  uint internal constant INITIAL_COIN_BALANCE = 21000000; //starting balance of 21 million coins\n', '\n', '  //variables\n', '  string public name = "C2L"; //name of currency\n', '  string public symbol = "C2L";\n', '  uint8 public decimals = 0;\n', '  mapping(address => bool) beingEdited; //mapping to prevent multiple edits of the same account occuring at the same time (reentrancy)\n', '\n', '  uint public totalCoinSupply = INITIAL_COIN_BALANCE; //number of this coin in active existence\n', '  mapping(address => uint) internal balances; //balances of users with this coin\n', '  mapping(address => mapping(address => uint)) internal allowed; //map holding how much each user is allowed to transfer out of other addresses\n', '  address[] addressLUT;\n', '\n', '  //C2L contract constructor\n', '  function C2L() public {\n', '    totalCoinSupply = INITIAL_COIN_BALANCE;\n', '    balances[owner] = totalCoinSupply;\n', '    updateAddresses(owner);\n', '  }\n', '\n', '  //getter methods for basic contract info\n', '  function name() public view returns (string _name) {\n', '    return name;\n', '  }\n', '\n', '  function symbol() public view returns (string _symbol) {\n', '    return symbol;\n', '  }\n', '\n', '  function decimals() public view returns (uint8 _decimals) {\n', '    return decimals;\n', '  }\n', '\n', '  /*\n', '    @return the total supply of this coin\n', '  */\n', '  function totalSupply() public view returns (uint256 _supply) {\n', '    return totalCoinSupply;\n', '  }\n', '\n', '  //toggle beingEdited status of this account\n', '  function setEditedTrue(address _subject) private {\n', '    beingEdited[_subject] = true;\n', '  }\n', '\n', '  function setEditedFalse(address _subject) private {\n', '    beingEdited[_subject] = false;\n', '  }\n', '\n', '  /*\n', '    get the balance of a given user\n', '    @param tokenOwner the address of the user account being queried\n', '    @return the balance of the given account\n', '  */\n', '  function balanceOf(address who) public view returns (uint) {\n', '    return balances[who];\n', '  }\n', '\n', '  /*\n', '    Check if the given address is a contract\n', '  */\n', '  function isContract(address _addr) private view returns (bool is_contract) {\n', '    uint length;\n', '    assembly {\n', '          //retrieve the size of the code on target address, this needs assembly\n', '          length := extcodesize(_addr)\n', '    }\n', '    return (length>0);\n', '  }\n', '\n', '  /*\n', '    owner mints new coins\n', '    @param amount The number of coins to mint\n', '    @condition\n', '      -the sender of this message must be the owner/minter/creator of this contract\n', '  */\n', '  function mint(uint amount) public onlyOwner {\n', '    require(beingEdited[owner] != true);\n', '    setEditedTrue(owner);\n', '    totalCoinSupply = SafeMath.add(totalCoinSupply, amount);\n', '    balances[owner] = SafeMath.add(balances[owner], amount);\n', '    setEditedFalse(owner);\n', '  }\n', '\n', '  /*\n', '    transfer tokens to a user from the msg sender\n', '    @param _to The address of the user coins are being sent to\n', '    @param _value The number of coins to send\n', '    @param _data The msg data for this transfer\n', '    @param _custom_fallback A custom fallback function for this transfer\n', '    @conditions:\n', '      -coin sender must have enough coins to carry out transfer\n', '      -the balances of the sender and receiver of the tokens must not be being edited by another transfer at the same time\n', '    @return True if execution of transfer is successful, False otherwise\n', '  */\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '    if(isContract(_to)) {\n', '      require(beingEdited[_to] != true && beingEdited[msg.sender] != true);\n', '      //make sure the sender has enough coins to transfer\n', '      require (balances[msg.sender] >= _value); \n', '      setEditedTrue(_to);\n', '      setEditedTrue(msg.sender);\n', '      //transfer the coins\n', '      balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '      balances[_to] = SafeMath.add(balances[_to], _value);\n', '      assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '      emit Transfer(msg.sender, _to, _value, _data); //log the transfer\n', '      setEditedFalse(_to);\n', '      setEditedFalse(msg.sender);\n', '      updateAddresses(_to);\n', '      updateAddresses(msg.sender);\n', '      return true;\n', '    }\n', '    else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  /*\n', '    Carry out transfer of tokens between accounts\n', '    @param _to The address of the user coins are being sent to\n', '    @param _value The number of coins to send\n', '    @param _data The msg data for this transfer\n', '    @conditions:\n', '      -coin sender must have enough coins to carry out transfer\n', '      -the balances of the sender and receiver of the tokens must not be being edited by another transfer at the same time\n', '    @return True if execution of transfer is successful, False otherwise\n', '  */\n', '  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '      if(isContract(_to)) {\n', '          return transferToContract(_to, _value, _data);\n', '      }\n', '      else {\n', '          return transferToAddress(_to, _value, _data);\n', '      }\n', '  }\n', '\n', '  /*\n', '    Backwards compatible transfer function to satisfy ERC20\n', '  */\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '      //standard function transfer similar to ERC20 transfer with no _data\n', '      //added due to backwards compatibility reasons\n', '      bytes memory empty;\n', '      if(isContract(_to)) {\n', '          return transferToContract(_to, _value, empty);\n', '      }\n', '      else {\n', '          return transferToAddress(_to, _value, empty);\n', '      }\n', '  }\n', '\n', '  //transfer function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '      require(beingEdited[_to] != true && beingEdited[msg.sender] != true);\n', '      require (balanceOf(msg.sender) >= _value);\n', '      setEditedTrue(_to);\n', '      setEditedTrue(msg.sender);\n', '      balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n', '      balances[_to] = SafeMath.add(balanceOf(_to), _value);\n', '      emit Transfer(msg.sender, _to, _value, _data);\n', '      setEditedFalse(_to);\n', '      setEditedFalse(msg.sender);\n', '      updateAddresses(_to);\n', '      updateAddresses(msg.sender);\n', '      return true;\n', '    }\n', '\n', '  //transfer function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '      require(beingEdited[_to] != true && beingEdited[msg.sender] != true);\n', '      require (balanceOf(msg.sender) >= _value);\n', '      setEditedTrue(_to);\n', '      setEditedTrue(msg.sender);\n', '      balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n', '      balances[_to] = SafeMath.add(balanceOf(_to), _value);\n', '      ContractReceiver receiver = ContractReceiver(_to);\n', '      receiver.tokenFallback(msg.sender, _value, _data);\n', '      emit Transfer(msg.sender, _to, _value, _data);\n', '      setEditedFalse(_to);\n', '      setEditedFalse(msg.sender);\n', '      updateAddresses(_to);\n', '      updateAddresses(msg.sender);\n', '      return true;\n', '  }\n', '\n', '  /*\n', '    update the addressLUT list of addresses by checking if the address is in the list already, and if not, add the address to the list\n', '    @param _lookup The address to check if it is in the list\n', '  */\n', '  function updateAddresses(address _lookup) private {\n', '    for(uint i = 0; i < addressLUT.length; i++) {\n', '      if(addressLUT[i] == _lookup) return;\n', '    }\n', '    addressLUT.push(_lookup);\n', '  }\n', '\n', '  //default, fallback function\n', '  function () public payable {\n', '  }\n', '\n', '  //self-destruct function for this contract\n', '  function killCoin() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '}']
