['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '}\n', 'contract Dcoin is SafeMath{\n', '    string public name;\n', '    string public symbol;\n', '    address public owner;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    address public icoContractAddress;\n', '    uint256 public  tokensTotalSupply =  2000 * (10**6) * 10**18;\n', '    mapping (address => bool) restrictedAddresses;\n', '    uint256 constant initialSupply = 2000 * (10**6) * 10**18;\n', "    string constant  tokenName = 'Dcoin';\n", '    uint8 constant decimalUnits = 18;\n', "    string constant tokenSymbol = 'DGAS';\n", '\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\tmapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint256 value);\n', '\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint256 value);\n', '  //  Mint event\n', '    event Mint(address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    modifier onlyOwner {\n', '      assert(owner == msg.sender);\n', '      _;\n', '    }\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor() public {\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '\t    owner = msg.sender;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public {\n', '\t\trequire (_value > 0) ;\n', '        require (balanceOf[msg.sender] >= _value);           // Check if the sender has enough\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]) ;     // Check for overflows\n', '        require (!restrictedAddresses[_to]);\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient\n', '        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;          // Set allowance\n', '      \temit Approval(msg.sender, _spender, _value);     // Raise Approval event\n', '      \treturn true;\n', '    }\n', '\n', '    function prodTokens(address _to, uint256 _amount) public onlyOwner {\n', '      require (_amount != 0 ) ;   // Check if values are not null;\n', '      require (balanceOf[_to] + _amount > balanceOf[_to]) ;     // Check for overflows\n', '      require (totalSupply <=tokensTotalSupply);\n', '      //require (!restrictedAddresses[_to]);\n', '      totalSupply += _amount;                                      // Update total supply\n', '      balanceOf[_to] += _amount;                    \t\t    // Set minted coins to target\n', '      emit Mint(_to, _amount);                          \t\t    // Create Mint event\n', '      emit Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require (balanceOf[_from] >= _value);                 // Check if the sender has enough\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]) ;  // Check for overflows\n', '        require (_value <= allowance[_from][msg.sender]) ;     // Check allowance\n', '        require (!restrictedAddresses[_to]);\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender\n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require (balanceOf[msg.sender] >= _value) ;            // Check if the sender has enough\n', '\t\t    require (_value <= 0) ;\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\tfunction freeze(uint256 _value) public returns (bool success) {\n', '        require (balanceOf[msg.sender] >= _value) ;            // Check if the sender has enough\n', '\t\t    require (_value > 0) ;\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender\n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                                // Updates totalSupply\n', '        emit Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\tfunction unfreeze(uint256 _value) public returns (bool success) {\n', '        require (balanceOf[msg.sender] >= _value) ;            // Check if the sender has enough\n', '        require (_value > 0) ;\n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                      // Subtract from the sender\n', '\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n', '        emit Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '\t// transfer balance to owner\n', '\tfunction withdrawEther(uint256 amount) public onlyOwner {\n', '\t\towner.transfer(amount);\n', '\t}\n', '\n', '  function totalSupply() public constant returns (uint256 Supply) {\n', '\t\treturn totalSupply;\n', '\t}\n', '\n', '\t/* Get balance of specific address */\n', '\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\n', '\t\treturn balanceOf[_owner];\n', '\t}\n', '\n', '\n', '\tfunction() public payable {\n', '    revert();\n', '    }\n', '\n', '    /* Owner can add new restricted address or removes one */\n', '\tfunction editRestrictedAddress(address _newRestrictedAddress) public onlyOwner {\n', '\t\trestrictedAddresses[_newRestrictedAddress] = !restrictedAddresses[_newRestrictedAddress];\n', '\t}\n', '\n', '\tfunction isRestrictedAddress(address _querryAddress) public constant returns (bool answer){\n', '\t\treturn restrictedAddresses[_querryAddress];\n', '\t}\n', '}']