['pragma solidity ^0.4.24;\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that revert on error\n', '*/\n', 'library SafeMath {\n', '/**\n', '* @dev Multiplies two numbers, reverts on overflow.\n', '*/\n', 'function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "// benefit is lost if 'b' is also tested.\n", '// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', 'if (a == 0) {\n', 'return 0;\n', '}\n', 'uint256 c = a * b;\n', 'require(c / a == b);\n', 'return c;\n', '}\n', '/**\n', '* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '*/\n', 'function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', 'require(b > 0); // Solidity only automatically asserts when dividing by 0\n', 'uint256 c = a / b;\n', "// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", 'return c;\n', '}\n', '/**\n', '* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '*/\n', 'function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', 'require(b <= a);\n', 'uint256 c = a - b;\n', 'return c;\n', '}\n', '/**\n', '* @dev Adds two numbers, reverts on overflow.\n', '*/\n', 'function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', 'uint256 c = a + b;\n', 'require(c >= a);\n', 'return c;\n', '}\n', '/**\n', '* @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '* reverts when dividing by zero.\n', '*/\n', 'function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', 'require(b != 0);\n', 'return a % b;\n', '}\n', '}\n', '/**\n', '* @title Ownable\n', '* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of \\"user permissions\\".\n', '*/\n', 'contract Ownable {\n', 'address private _owner;\n', 'event OwnershipTransferred(\n', 'address indexed previousOwner,\n', 'address indexed newOwner\n', ');\n', '/**\n', '* @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '* account.\n', '*/\n', 'constructor() internal {\n', '_owner = msg.sender;\n', 'emit OwnershipTransferred(address(0), _owner);\n', '}\n', '/**\n', '* @return the address of the owner.\n', '*/\n', 'function owner() public view returns(address) {\n', 'return _owner;\n', '}\n', '/**\n', '* @dev Throws if called by any account other than the owner.\n', '*/\n', 'modifier onlyOwner() {\n', 'require(isOwner());\n', '_;\n', '}\n', '/**\n', '* @return true if `msg.sender` is the owner of the contract.\n', '*/\n', 'function isOwner() public view returns(bool) {\n', 'return msg.sender == _owner;\n', '}\n', '/**\n', '* @dev Allows the current owner to relinquish control of the contract.\n', '* @notice Renouncing to ownership will leave the contract without an owner.\n', '* It will not be possible to call the functions with the `onlyOwner`\n', '* modifier anymore.\n', '*/\n', 'function renounceOwnership() public onlyOwner {\n', 'emit OwnershipTransferred(_owner, address(0));\n', '_owner = address(0);\n', '}\n', '/**\n', '* @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '* @param newOwner The address to transfer ownership to.\n', '*/\n', 'function transferOwnership(address newOwner) public onlyOwner {\n', '_transferOwnership(newOwner);\n', '}\n', '/**\n', '* @dev Transfers control of the contract to a newOwner.\n', '* @param newOwner The address to transfer ownership to.\n', '*/\n', 'function _transferOwnership(address newOwner) internal {\n', 'require(newOwner != address(0));\n', 'emit OwnershipTransferred(_owner, newOwner);\n', '_owner = newOwner;\n', '}\n', '}\n', '/**\n', '* @title ERC20 interface\n', '* @dev see https://github.com/ethereum/EIPs/issues/20\n', '*/\n', 'interface IERC20 {\n', 'function totalSupply() external view returns (uint256);\n', 'function balanceOf(address who) external view returns (uint256);\n', 'function allowance(address owner, address spender)\n', 'external view returns (uint256);\n', 'function transfer(address to, uint256 value) external returns (bool);\n', 'function approve(address spender, uint256 value)\n', 'external returns (bool);\n', 'function transferFrom(address from, address to, uint256 value)\n', 'external returns (bool);\n', 'event Transfer(\n', 'address indexed from,\n', 'address indexed to,\n', 'uint256 value\n', ');\n', 'event Approval(\n', 'address indexed owner,\n', 'address indexed spender,\n', 'uint256 value\n', ');\n', '}\n', '/**\n', '* @title Standard ERC20 token\n', '*\n', '* @dev Implementation of the basic standard token.\n', '* https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '* \n', '*/\n', 'contract Uptherium is IERC20, Ownable {\n', '\n', 'using SafeMath for uint256;\n', 'mapping (address => uint256) private _balances;\n', 'mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', 'mapping (address => bool) public allowedAddresses;\n', '\n', 'uint256 private _totalSupply;\n', 'string private _name = "Uptherium";\n', 'string private _symbol = "UPZT";\n', 'uint8 private _decimals = 18;\n', 'bool private _poolsSetted;\n', 'bool private _burningAllowed;\n', '\n', 'event Burn(address indexed owner,\n', 'uint256 value\n', ');\n', '\n', 'modifier checkTransfer() {\n', 'require(allowedAddresses[msg.sender] == true);\n', '_;\n', '}\n', 'constructor() public {\n', '_poolsSetted = false;\n', '_burningAllowed = false;\n', 'allowedAddresses[msg.sender] = true;\n', '\n', '}\n', '\n', '/**\n', '* @dev Function for adding address to the whitelist.\n', '*/\n', 'function addAddress(address newAddress) public onlyOwner {\n', 'allowedAddresses[newAddress] = true;\n', '}\n', '\n', '/**\n', '* @dev Function for removing address from whitelist.\n', '*/\n', 'function removeAddress(address oldAddress) public onlyOwner {\n', 'allowedAddresses[oldAddress] = false;\n', '}\n', '\n', '/**\n', '* @dev Function for initial token minting.\n', '*/\n', 'function initialMint(address icoPool, address bountyPool, address teamPool, uint256 icoValue, uint256 bountyValue, uint256 teamValue) public onlyOwner {\n', 'require(!_poolsSetted);\n', '_mint(icoPool, icoValue);\n', '_mint(bountyPool, bountyValue);\n', '_mint(teamPool, teamValue);\n', '_poolsSetted = true;\n', '}\n', '\n', '/**\n', '* @return the name of the token.\n', '*/\n', 'function name() public view returns(string) {\n', 'return _name;\n', '}\n', '/**\n', '* @return the symbol of the token.\n', '*/\n', 'function symbol() public view returns(string) {\n', 'return _symbol;\n', '}\n', '/**\n', '* @return the number of decimals of the token.\n', '*/\n', 'function decimals() public view returns(uint8) {\n', 'return _decimals;\n', '}\n', '/**\n', '* @dev Total number of tokens in existence\n', '*/\n', 'function totalSupply() public view returns (uint256) {\n', 'return _totalSupply;\n', '}\n', '/**\n', '* @dev Gets the balance of the specified address.\n', '* @param owner The address to query the balance of.\n', '* @return An uint256 representing the amount owned by the passed address.\n', '*/\n', 'function balanceOf(address owner) public view returns (uint256) {\n', 'return _balances[owner];\n', '}\n', '/**\n', '* @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '* @param owner address The address which owns the funds.\n', '* @param spender address The address which will spend the funds.\n', '* @return A uint256 specifying the amount of tokens still available for the spender.\n', '*/\n', 'function allowance(\n', 'address owner,\n', 'address spender\n', ')\n', 'public\n', 'view\n', 'returns (uint256)\n', '{\n', 'return _allowed[owner][spender];\n', '}\n', '/**\n', '* @dev Transfer token for a specified address\n', '* @param to The address to transfer to.\n', '* @param value The amount to be transferred.\n', '*/\n', 'function transfer(address to, uint256 value) public checkTransfer returns (bool) {\n', '_transfer(msg.sender, to, value);\n', 'return true;\n', '}\n', '/**\n', '* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '* Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '* @param spender The address which will spend the funds.\n', '* @param value The amount of tokens to be spent.\n', '*/\n', 'function approve(address spender, uint256 value) public returns (bool) {\n', 'require(spender != address(0));\n', '_allowed[msg.sender][spender] = value;\n', 'emit Approval(msg.sender, spender, value);\n', 'return true;\n', '}\n', '/**\n', '* @dev Transfer tokens from one address to another\n', '* @param from address The address which you want to send tokens from\n', '* @param to address The address which you want to transfer to\n', '* @param value uint256 the amount of tokens to be transferred\n', '*/\n', 'function transferFrom(address from, address to, uint256 value) public checkTransfer returns (bool) {\n', '_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '_transfer(from, to, value);\n', 'return true;\n', '}\n', '/**\n', '* @dev Increase the amount of tokens that an owner allowed to a spender.\n', '* approve should be called when allowed_[_spender] == 0. To increment\n', '* allowed value is better to use this function to avoid 2 calls (and wait until\n', '* the first transaction is mined)\n', '* From MonolithDAO Token.sol\n', '* @param spender The address which will spend the funds.\n', '* @param addedValue The amount of tokens to increase the allowance by.\n', '*/\n', 'function increaseAllowance(\n', 'address spender,\n', 'uint256 addedValue\n', ')\n', 'public\n', 'returns (bool)\n', '{\n', 'require(spender != address(0));\n', '_allowed[msg.sender][spender] = (\n', '_allowed[msg.sender][spender].add(addedValue));\n', 'emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', 'return true;\n', '}\n', '/**\n', '* @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '* approve should be called when allowed_[_spender] == 0. To decrement\n', '* allowed value is better to use this function to avoid 2 calls (and wait until\n', '* the first transaction is mined)\n', '* From MonolithDAO Token.sol\n', '* @param spender The address which will spend the funds.\n', '* @param subtractedValue The amount of tokens to decrease the allowance by.\n', '*/\n', 'function decreaseAllowance(\n', 'address spender,\n', 'uint256 subtractedValue\n', ')\n', 'public\n', 'returns (bool)\n', '{\n', 'require(spender != address(0));\n', '_allowed[msg.sender][spender] = (\n', '_allowed[msg.sender][spender].sub(subtractedValue));\n', 'emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', 'return true;\n', '}\n', '/**\n', '* @dev Transfer token for a specified addresses\n', '* @param from The address to transfer from.\n', '* @param to The address to transfer to.\n', '* @param value The amount to be transferred.\n', '*/\n', 'function _transfer(address from, address to, uint256 value) internal {\n', 'require(to != address(0));\n', '_balances[from] = _balances[from].sub(value);\n', '_balances[to] = _balances[to].add(value);\n', 'emit Transfer(from, to, value);\n', '}\n', '/**\n', '* @dev Internal function that mints an amount of the token and assigns it to\n', '* an account. This encapsulates the modification of balances such that the\n', '* proper events are emitted.\n', '* @param account The account that will receive the created tokens.\n', '* @param value The amount that will be created.\n', '*/\n', 'function _mint(address account, uint256 value) internal {\n', 'require(account != address(0));\n', '_totalSupply = _totalSupply.add(value);\n', '_balances[account] = _balances[account].add(value);\n', 'emit Transfer(address(0), account, value);\n', '}\n', '\n', '/**\n', '* @dev Public function that allows burning an amount of the token.\n', '*/\n', 'function allowBurning() public onlyOwner returns(bool) {\n', '_burningAllowed = true;\n', 'return _burningAllowed;\n', '}\n', '\n', '/**\n', '* @dev Public function that burns an amount of the token and assigns it to\n', '* an account. This encapsulates the modification of balances such that the\n', '* proper events are emitted.\n', '* @param value The amount that will be burned.\n', '*/\n', 'function burn(uint256 value) public {\n', 'require(_burningAllowed);  \n', 'require(msg.sender != address(0));\n', 'require(_balances[msg.sender] >= value);\n', '_totalSupply = _totalSupply.sub(value);\n', '_balances[msg.sender] = _balances[msg.sender].sub(value);\n', 'emit Burn(address(msg.sender), value);\n', '}\n', '}']