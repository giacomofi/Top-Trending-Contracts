['pragma solidity 0.4.24;\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an account&#39;s access to this role\n', '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n', '\n', 'contract MinterRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '\n', '  Roles.Role private minters;\n', '\n', '  constructor() public {\n', '    minters.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(isMinter(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return minters.has(account);\n', '  }\n', '\n', '  function addMinter(address account) public onlyMinter {\n', '    minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '\n', '  function renounceMinter() public {\n', '    minters.remove(msg.sender);\n', '  }\n', '\n', '  function _removeMinter(address account) internal {\n', '    minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/introspection/IERC165.sol\n', '\n', '/**\n', ' * @title IERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface IERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', '/**\n', ' * @title ERC165\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '\n', '  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', '   *   bytes4(keccak256(&#39;supportsInterface(bytes4)&#39;))\n', '   */\n', '\n', '  /**\n', '   * @dev a mapping of interface id to whether or not it&#39;s supported\n', '   */\n', '  mapping(bytes4 => bool) internal _supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    public\n', '  {\n', '    _registerInterface(_InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _supportedInterfaces[interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev private method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 interfaceId)\n', '    internal\n', '  {\n', '    require(interfaceId != 0xffffffff);\n', '    _supportedInterfaces[interfaceId] = true;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param account address of the account to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address account) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(account) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721 is IERC165 {\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 indexed tokenId\n', '  );\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed approved,\n', '    uint256 indexed tokenId\n', '  );\n', '  event ApprovalForAll(\n', '    address indexed owner,\n', '    address indexed operator,\n', '    bool approved\n', '  );\n', '\n', '  function balanceOf(address owner) public view returns (uint256 balance);\n', '  function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '  function approve(address to, uint256 tokenId) public;\n', '  function getApproved(uint256 tokenId)\n', '    public view returns (address operator);\n', '\n', '  function setApprovalForAll(address operator, bool _approved) public;\n', '  function isApprovedForAll(address owner, address operator)\n', '    public view returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 tokenId) public;\n', '  function safeTransferFrom(address from, address to, uint256 tokenId)\n', '    public;\n', '\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract IERC721Receiver {\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   * after a `safeTransfer`. This function MUST return the function selector,\n', '   * otherwise the caller will revert the transaction. The selector to be\n', '   * returned can be obtained as `this.onERC721Received.selector`. This\n', '   * function MAY throw to revert and reject the transfer.\n', '   * Note: the ERC721 contract address is always the message sender.\n', '   * @param operator The address which called `safeTransferFrom` function\n', '   * @param from The address which previously owned the token\n', '   * @param tokenId The NFT identifier which is being transferred\n', '   * @param data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address operator,\n', '    address from,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC165, IERC721 {\n', '\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private _tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private _tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) private _ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n', '  /*\n', '   * 0x80ac58cd ===\n', '   *   bytes4(keccak256(&#39;balanceOf(address)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;ownerOf(uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;approve(address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;getApproved(uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;setApprovalForAll(address,bool)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;isApprovedForAll(address,address)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;transferFrom(address,address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;safeTransferFrom(address,address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;safeTransferFrom(address,address,uint256,bytes)&#39;))\n', '   */\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    require(owner != address(0));\n', '    return _ownedTokensCount[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 tokenId) public view returns (address) {\n', '    address owner = _tokenOwner[tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param to address to be approved for the given token ID\n', '   * @param tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address to, uint256 tokenId) public {\n', '    address owner = ownerOf(tokenId);\n', '    require(to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    _tokenApprovals[tokenId] = to;\n', '    emit Approval(owner, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * Reverts if the token ID does not exist.\n', '   * @param tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 tokenId) public view returns (address) {\n', '    require(_exists(tokenId));\n', '    return _tokenApprovals[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param to operator address to set the approval\n', '   * @param approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address to, bool approved) public {\n', '    require(to != msg.sender);\n', '    _operatorApprovals[msg.sender][to] = approved;\n', '    emit ApprovalForAll(msg.sender, to, approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param owner owner address which you want to query the approval of\n', '   * @param operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address owner,\n', '    address operator\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _operatorApprovals[owner][operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    require(_isApprovedOrOwner(msg.sender, tokenId));\n', '    require(to != address(0));\n', '\n', '    _clearApproval(from, tokenId);\n', '    _removeTokenFrom(from, tokenId);\n', '    _addTokenTo(to, tokenId);\n', '\n', '    emit Transfer(from, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   *\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(from, to, tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    transferFrom(from, to, tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(_checkAndCallSafeTransfer(from, to, tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param tokenId uint256 ID of the token to query the existence of\n', '   * @return whether the token exists\n', '   */\n', '  function _exists(uint256 tokenId) internal view returns (bool) {\n', '    address owner = _tokenOwner[tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param spender address of the spender to query\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function _isApprovedOrOwner(\n', '    address spender,\n', '    uint256 tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    address owner = ownerOf(tokenId);\n', '    // Disable solium check because of\n', '    // https://github.com/duaraghav8/Solium/issues/175\n', '    // solium-disable-next-line operator-whitespace\n', '    return (\n', '      spender == owner ||\n', '      getApproved(tokenId) == spender ||\n', '      isApprovedForAll(owner, spender)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to The address that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    require(to != address(0));\n', '    _addTokenTo(to, tokenId);\n', '    emit Transfer(address(0), to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    _clearApproval(owner, tokenId);\n', '    _removeTokenFrom(owner, tokenId);\n', '    emit Transfer(owner, address(0), tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * Reverts if the given address is not indeed the owner of the token\n', '   * @param owner owner of the token\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function _clearApproval(address owner, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == owner);\n', '    if (_tokenApprovals[tokenId] != address(0)) {\n', '      _tokenApprovals[tokenId] = address(0);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    require(_tokenOwner[tokenId] == address(0));\n', '    _tokenOwner[tokenId] = to;\n', '    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == from);\n', '    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n', '    _tokenOwner[tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param to target address that will receive the tokens\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function _checkAndCallSafeTransfer(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = IERC721Receiver(to).onERC721Received(\n', '      msg.sender, from, tokenId, _data);\n', '    return (retval == _ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Enumerable is IERC721 {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 tokenId);\n', '\n', '  function tokenByIndex(uint256 index) public view returns (uint256);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\n', '\n', 'contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) private _ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] private _allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '  /**\n', '   * 0x780e9d63 ===\n', '   *   bytes4(keccak256(&#39;totalSupply()&#39;)) ^\n', '   *   bytes4(keccak256(&#39;tokenOfOwnerByIndex(address,uint256)&#39;)) ^\n', '   *   bytes4(keccak256(&#39;tokenByIndex(uint256)&#39;))\n', '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor() public {\n', '    // register the supported interface to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721Enumerable);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param owner address owning the tokens list to be accessed\n', '   * @param index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    require(index < balanceOf(owner));\n', '    return _ownedTokens[owner][index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens\n', '   * @param index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 index) public view returns (uint256) {\n', '    require(index < totalSupply());\n', '    return _allTokens[index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    super._addTokenTo(to, tokenId);\n', '    uint256 length = _ownedTokens[to].length;\n', '    _ownedTokens[to].push(tokenId);\n', '    _ownedTokensIndex[tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    super._removeTokenFrom(from, tokenId);\n', '\n', '    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot.\n', '    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n', '    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n', '\n', '    _ownedTokens[from][tokenIndex] = lastToken;\n', '    // This also deletes the contents at the last position of the array\n', '    _ownedTokens[from].length--;\n', '\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    _ownedTokensIndex[tokenId] = 0;\n', '    _ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to address the beneficiary that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    super._mint(to, tokenId);\n', '\n', '    _allTokensIndex[tokenId] = _allTokens.length;\n', '    _allTokens.push(tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = _allTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _allTokens.length.sub(1);\n', '    uint256 lastToken = _allTokens[lastTokenIndex];\n', '\n', '    _allTokens[tokenIndex] = lastToken;\n', '    _allTokens[lastTokenIndex] = 0;\n', '\n', '    _allTokens.length--;\n', '    _allTokensIndex[tokenId] = 0;\n', '    _allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Metadata is IERC721 {\n', '  function name() external view returns (string);\n', '  function symbol() external view returns (string);\n', '  function tokenURI(uint256 tokenId) public view returns (string);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\n', '\n', 'contract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n', '  // Token name\n', '  string internal _name;\n', '\n', '  // Token symbol\n', '  string internal _symbol;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) private _tokenURIs;\n', '\n', '  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '  /**\n', '   * 0x5b5e139f ===\n', '   *   bytes4(keccak256(&#39;name()&#39;)) ^\n', '   *   bytes4(keccak256(&#39;symbol()&#39;)) ^\n', '   *   bytes4(keccak256(&#39;tokenURI(uint256)&#39;))\n', '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor(string name, string symbol) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * Throws if the token ID does not exist. May return an empty string.\n', '   * @param tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 tokenId) public view returns (string) {\n', '    require(_exists(tokenId));\n', '    return _tokenURIs[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * Reverts if the token ID does not exist\n', '   * @param tokenId uint256 ID of the token to set its URI\n', '   * @param uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 tokenId, string uri) internal {\n', '    require(_exists(tokenId));\n', '    _tokenURIs[tokenId] = uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '      delete _tokenURIs[tokenId];\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n', '  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n', '    public\n', '  {\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol\n', '\n', '/**\n', ' * @title ERC721Mintable\n', ' * @dev ERC721 minting logic\n', ' */\n', 'contract ERC721Mintable is ERC721Full, MinterRole {\n', '  event MintingFinished();\n', '\n', '  bool private _mintingFinished = false;\n', '\n', '  modifier onlyBeforeMintingFinished() {\n', '    require(!_mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if the minting is finished.\n', '   */\n', '  function mintingFinished() public view returns(bool) {\n', '    return _mintingFinished;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param to The address that will receive the minted tokens.\n', '   * @param tokenId The token id to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mint(to, tokenId);\n', '    return true;\n', '  }\n', '\n', '  function mintWithTokenURI(\n', '    address to,\n', '    uint256 tokenId,\n', '    string tokenURI\n', '  )\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    mint(to, tokenId);\n', '    _setTokenURI(tokenId, tokenURI);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting()\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mintingFinished = true;\n', '    emit MintingFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n', '\n', 'contract PauserRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event PauserAdded(address indexed account);\n', '  event PauserRemoved(address indexed account);\n', '\n', '  Roles.Role private pausers;\n', '\n', '  constructor() public {\n', '    pausers.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyPauser() {\n', '    require(isPauser(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isPauser(address account) public view returns (bool) {\n', '    return pausers.has(account);\n', '  }\n', '\n', '  function addPauser(address account) public onlyPauser {\n', '    pausers.add(account);\n', '    emit PauserAdded(account);\n', '  }\n', '\n', '  function renouncePauser() public {\n', '    pausers.remove(msg.sender);\n', '  }\n', '\n', '  function _removePauser(address account) internal {\n', '    pausers.remove(account);\n', '    emit PauserRemoved(account);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '  event Paused();\n', '  event Unpaused();\n', '\n', '  bool private _paused = false;\n', '\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns(bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyPauser whenNotPaused {\n', '    _paused = true;\n', '    emit Paused();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyPauser whenPaused {\n', '    _paused = false;\n', '    emit Unpaused();\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Pausable.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Pausable token\n', ' * @dev ERC721 modified with pausable transfers.\n', ' **/\n', 'contract ERC721Pausable is ERC721, Pausable {\n', '  function approve(\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.approve(to, tokenId);\n', '  }\n', '\n', '  function setApprovalForAll(\n', '    address to,\n', '    bool approved\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.setApprovalForAll(to, approved);\n', '  }\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.transferFrom(from, to, tokenId);\n', '  }\n', '}\n', '\n', '// File: contracts/HeroAsset.sol\n', '\n', 'contract HeroAsset is ERC721Mintable, ERC721Pausable {\n', '\n', '    uint16 public constant HERO_TYPE_OFFSET = 10000;\n', '\n', '    string public tokenURIPrefix = "https://www.mycryptoheroes.net/metadata/hero/";\n', '    mapping(uint16 => uint16) private heroTypeToSupplyLimit;\n', '\n', '    constructor() public ERC721Full("MyCryptoHeroes:Hero", "MCHH") {}\n', '\n', '    function setSupplyLimit(uint16 _heroType, uint16 _supplyLimit) external onlyMinter {\n', '        require(heroTypeToSupplyLimit[_heroType] == 0 || _supplyLimit < heroTypeToSupplyLimit[_heroType],\n', '            "_supplyLimit is bigger");\n', '        heroTypeToSupplyLimit[_heroType] = _supplyLimit;\n', '    }\n', '\n', '    function setTokenURIPrefix(string _tokenURIPrefix) external onlyMinter {\n', '        tokenURIPrefix = _tokenURIPrefix;\n', '    }\n', '\n', '    function getSupplyLimit(uint16 _heroType) public view returns (uint16) {\n', '        return heroTypeToSupplyLimit[_heroType];\n', '    }\n', '\n', '    function mintHeroAsset(address _owner, uint256 _tokenId) public onlyMinter {\n', '        uint16 _heroType = uint16(_tokenId / HERO_TYPE_OFFSET);\n', '        uint16 _heroTypeIndex = uint16(_tokenId % HERO_TYPE_OFFSET) - 1;\n', '        require(_heroTypeIndex < heroTypeToSupplyLimit[_heroType], "supply over");\n', '        _mint(_owner, _tokenId);\n', '    }\n', '\n', '    function tokenURI(uint256 tokenId) public view returns (string) {\n', '        bytes32 tokenIdBytes;\n', '        if (tokenId == 0) {\n', '            tokenIdBytes = "0";\n', '        } else {\n', '            uint256 value = tokenId;\n', '            while (value > 0) {\n', '                tokenIdBytes = bytes32(uint256(tokenIdBytes) / (2 ** 8));\n', '                tokenIdBytes |= bytes32(((value % 10) + 48) * 2 ** (8 * 31));\n', '                value /= 10;\n', '            }\n', '        }\n', '\n', '        bytes memory prefixBytes = bytes(tokenURIPrefix);\n', '        bytes memory tokenURIBytes = new bytes(prefixBytes.length + tokenIdBytes.length);\n', '\n', '        uint8 i;\n', '        uint8 index = 0;\n', '        \n', '        for (i = 0; i < prefixBytes.length; i++) {\n', '            tokenURIBytes[index] = prefixBytes[i];\n', '            index++;\n', '        }\n', '        \n', '        for (i = 0; i < tokenIdBytes.length; i++) {\n', '            tokenURIBytes[index] = tokenIdBytes[i];\n', '            index++;\n', '        }\n', '        \n', '        return string(tokenURIBytes);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(_owner);\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param amount The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    require(amount <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account, deducting from the sender&#39;s allowance for said account. Uses the\n', '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 amount) internal {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      amount);\n', '    _burn(account, amount);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="bac8dfd7d9d5fa88">[email&#160;protected]</span>π.com>, Eenae <<span class="__cf_email__" data-cfemail="7d1c11180518043d1014051f0409180e531412">[email&#160;protected]</span>>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /// @dev counter to allow mutex lock with only one SSTORE operation\n', '  uint256 private _guardCounter = 1;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one `nonReentrant` function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and an `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    _guardCounter += 1;\n', '    uint256 localCounter = _guardCounter;\n', '    _;\n', '    require(localCounter == _guardCounter);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/HeroPresale.sol\n', '\n', 'contract HeroPresale is Ownable, Pausable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    struct HeroSale {\n', '        uint128 highestPrice;\n', '        uint128 previousPrice;\n', '        uint128 priceIncreaseTo;\n', '        uint64  since;\n', '        uint64  until;\n', '        uint64  previousSaleAt;\n', '        uint16  lowestPriceRate;\n', '        uint16  decreaseRate;\n', '        uint16  supplyLimit;\n', '        uint16  suppliedCounts;\n', '        uint8   currency;\n', '        bool    exists;\n', '    }\n', '    \n', '    mapping(uint16 => HeroSale) public heroTypeToHeroSales;\n', '    mapping(uint16 => uint256[]) public heroTypeIds;\n', '    mapping(uint16 => mapping(address => bool)) public hasAirDropHero;\n', '\n', '    ERC20 public coin;\n', '    HeroAsset public heroAsset;\n', '    uint16 constant internal SUPPLY_LIMIT_MAX = 10000;\n', '\n', '    event AddSalesEvent(\n', '        uint16 indexed heroType,\n', '        uint128 startPrice,\n', '        uint256 lowestPrice,\n', '        uint256 becomeLowestAt\n', '    );\n', '\n', '    event SoldHeroEvent(\n', '        uint16 indexed heroType,\n', '        uint256 soldPrice,\n', '        uint64  soldAt,\n', '        uint256 priceIncreaseTo,\n', '        uint256 lowestPrice,\n', '        uint256 becomeLowestAt,\n', '        address purchasedBy,\n', '        address indexed code,\n', '        uint8   currency\n', '    );\n', '\n', '    function setHeroAssetAddress(address _heroAssetAddress) external onlyOwner() {\n', '        heroAsset = HeroAsset(_heroAssetAddress);\n', '    }\n', '\n', '    function setCoinAddress(ERC20 _coinAddress) external onlyOwner() {\n', '        coin = _coinAddress;\n', '    }\n', '\n', '    function withdrawEther() external onlyOwner() {\n', '        owner().transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawEMONT() external onlyOwner() {\n', '        uint256 emontBalance = coin.balanceOf(this);\n', '        coin.approve(address(this), emontBalance);\n', '        coin.transferFrom(address(this), msg.sender, emontBalance);\n', '    }\n', '\n', '    function addSales(\n', '        uint16 _heroType,\n', '        uint128 _startPrice,\n', '        uint16 _lowestPriceRate,\n', '        uint16 _decreaseRate,\n', '        uint64 _since,\n', '        uint64 _until,\n', '        uint16 _supplyLimit,\n', '        uint8  _currency\n', '    ) external onlyOwner() {\n', '        require(!heroTypeToHeroSales[_heroType].exists, "this heroType is already added sales");\n', '        require(0 <= _lowestPriceRate && _lowestPriceRate <= 100, "lowestPriceRate should be between 0 and 100");\n', '        require(1 <= _decreaseRate && _decreaseRate <= 100, "decreaseRate should be should be between 1 and 100");\n', '        require (_until > _since, "until should be later than since");\n', '\n', '        HeroSale memory _herosale = HeroSale({\n', '            highestPrice: _startPrice,\n', '            previousPrice: _startPrice,\n', '            priceIncreaseTo: _startPrice,\n', '            since:_since,\n', '            until:_until,\n', '            previousSaleAt: _since,\n', '            lowestPriceRate: _lowestPriceRate,\n', '            decreaseRate: _decreaseRate,\n', '            supplyLimit:_supplyLimit,\n', '            suppliedCounts: 0,\n', '            currency: _currency,\n', '            exists: true\n', '        });\n', '\n', '        heroTypeToHeroSales[_heroType] = _herosale;\n', '        heroAsset.setSupplyLimit(_heroType, _supplyLimit);\n', '\n', '        uint256 _lowestPrice = uint256(_startPrice).mul(_lowestPriceRate).div(100);\n', '        uint256 _becomeLowestAt = uint256(86400).mul(uint256(100).sub(_lowestPriceRate)).div(_decreaseRate).add(_since);\n', '\n', '        emit AddSalesEvent(\n', '            _heroType,\n', '            _startPrice,\n', '            _lowestPrice,\n', '            _becomeLowestAt\n', '        );\n', '    }\n', '\n', '    function purchase(uint16 _heroType, address _code) external whenNotPaused() nonReentrant() payable {\n', '    // solium-disable-next-line security/no-block-members\n', '        return purchaseImpl(_heroType, uint64(block.timestamp), _code);\n', '    }\n', '\n', '    function purchaseByEMONT(uint16 _heroType, uint256 _price, address _code) external whenNotPaused() {\n', '      // solium-disable-next-line security/no-block-members\n', '        return purchaseByEMONTImpl(_heroType, _price, uint64(block.timestamp), _code);\n', '    }\n', '\n', '    function airDrop(uint16 _heroType) external whenNotPaused() {\n', '        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n', '        require(airDropHero(_heroType), "currency is not 2 (airdrop)");\n', '        require(!hasAirDropHero[_heroType][msg.sender]);\n', '        uint64 _at = uint64(block.timestamp);\n', '        require(isOnSale(_heroType, _at), "out of sales period");\n', '\n', '        createHero(_heroType, msg.sender);\n', '        hasAirDropHero[_heroType][msg.sender] = true;\n', '        heroSales.suppliedCounts++;\n', '        heroSales.previousSaleAt = _at;\n', '\n', '        emit SoldHeroEvent(\n', '            _heroType,\n', '            1,\n', '            _at,\n', '            1,\n', '            1,\n', '            1,\n', '            msg.sender,\n', '            0x0000000000000000000000000000000000000000,\n', '            2\n', '        );\n', '    }\n', '\n', '\n', '    function computeCurrentPrice(uint16 _heroType) external view returns (uint8, uint256){\n', '        // solium-disable-next-line security/no-block-members\n', '        return computeCurrentPriceImpl(_heroType, uint64(block.timestamp));\n', '    }\n', '\n', '    function canBePurchasedByETH(uint16 _heroType) internal view returns (bool){\n', '        return (heroTypeToHeroSales[_heroType].currency == 0);\n', '    }\n', '\n', '    function canBePurchasedByEMONT(uint16 _heroType) internal view returns (bool){\n', '        return (heroTypeToHeroSales[_heroType].currency == 1);\n', '    }\n', '\n', '    function airDropHero(uint16 _heroType) internal view returns (bool){\n', '        return (heroTypeToHeroSales[_heroType].currency == 2);\n', '    }\n', '\n', '    function isOnSale(uint16 _heroType, uint64 _now) internal view returns (bool){\n', '        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n', '        require(heroSales.exists, "not exist sales of this heroType");\n', '\n', '        if (heroSales.since <= _now && _now <= heroSales.until) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function computeCurrentPriceImpl(uint16 _heroType, uint64 _at) internal view returns (uint8, uint256) {\n', '        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n', '        require(heroSales.exists, "not exist sales of this heroType");\n', '        require(heroSales.previousSaleAt < _at, "current timestamp should be later than previousSaleAt");\n', '\n', '        uint256 _lowestPrice = uint256(heroSales.highestPrice).mul(heroSales.lowestPriceRate).div(100);\n', '        uint256 _secondsPassed = uint256(_at).sub(heroSales.previousSaleAt);\n', '        uint256 _decreasedPrice = uint256(heroSales.priceIncreaseTo).mul(_secondsPassed).mul(heroSales.decreaseRate).div(100).div(86400);\n', '        uint256 currentPrice;\n', '\n', '        if (uint256(heroSales.priceIncreaseTo).sub(_lowestPrice) > _decreasedPrice){\n', '            currentPrice = uint256(heroSales.priceIncreaseTo).sub(_decreasedPrice);\n', '        } else {\n', '            currentPrice = _lowestPrice;\n', '        }\n', '\n', '        return (1, currentPrice);\n', '    }\n', '\n', '    function purchaseImpl(uint16 _heroType, uint64 _at, address code)\n', '        internal\n', '    {\n', '        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n', '        require(canBePurchasedByETH(_heroType), "currency is not 0 (eth)");\n', '        require(isOnSale(_heroType, _at), "out of sales period");\n', '        (,uint256 _price)  = computeCurrentPriceImpl(_heroType, _at);\n', '        require(msg.value >= _price, "value is less than the price");\n', '\n', '        createHero(_heroType, msg.sender);\n', '\n', '        if (msg.value > _price){\n', '            msg.sender.transfer(msg.value.sub(_price));\n', '        }\n', '\n', '        heroSales.previousPrice = uint128(_price);\n', '        heroSales.suppliedCounts++;\n', '        heroSales.previousSaleAt = _at;\n', '\n', '        if (heroSales.previousPrice > heroSales.highestPrice){\n', '            heroSales.highestPrice = heroSales.previousPrice;\n', '        }\n', '\n', '        uint256 _priceIncreaseTo;\n', '        uint256 _lowestPrice;\n', '        uint256 _becomeLowestAt;\n', '\n', '        if(heroSales.supplyLimit > heroSales.suppliedCounts){\n', '            _priceIncreaseTo = SafeMath.add(_price, _price.div((uint256(heroSales.supplyLimit).sub(heroSales.suppliedCounts))));\n', '            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n', '            _lowestPrice = uint256(heroSales.lowestPriceRate).mul(heroSales.highestPrice).div(100);\n', '            _becomeLowestAt = uint256(86400).mul(100).mul((_priceIncreaseTo.sub(_lowestPrice))).div(_priceIncreaseTo).div(heroSales.decreaseRate).add(_at);\n', '        } else {\n', '            _priceIncreaseTo = heroSales.previousPrice;\n', '            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n', '            _lowestPrice = heroSales.previousPrice;\n', '            _becomeLowestAt = _at;\n', '        }\n', '\n', '        address Invitees;\n', '\n', '        if (code == msg.sender){\n', '            Invitees = address(0x0);\n', '        } else {\n', '            Invitees = code;\n', '        }\n', '\n', '        emit SoldHeroEvent(\n', '            _heroType,\n', '            _price,\n', '            _at,\n', '            _priceIncreaseTo,\n', '            _lowestPrice,\n', '            _becomeLowestAt,\n', '            msg.sender,\n', '            Invitees,\n', '            0\n', '        );\n', '\n', '    }\n', '\n', '    function purchaseByEMONTImpl(uint16 _heroType, uint256 _inputPrice, uint64 _at, address _code)\n', '        internal\n', '    {\n', '        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n', '        require(canBePurchasedByEMONT(_heroType), "currency is not 1 (EMONT)");\n', '        require(isOnSale(_heroType, _at), "out of sales period");\n', '        (,uint256 _price)  = computeCurrentPriceImpl(_heroType, _at);\n', '        require(_inputPrice > _price, "input price is not more than actual price");\n', '\n', '        createHero(_heroType, msg.sender);\n', '        coin.transferFrom(msg.sender, address(this), _price);\n', '\n', '        heroSales.previousPrice = uint128(_price);\n', '        heroSales.suppliedCounts++;\n', '        heroSales.previousSaleAt = _at;\n', '\n', '        if (heroSales.previousPrice > heroSales.highestPrice){\n', '            heroSales.highestPrice = heroSales.previousPrice;\n', '        }\n', '\n', '        uint256 _priceIncreaseTo;\n', '        uint256 _lowestPrice;\n', '        uint256 _becomeLowestAt;\n', '\n', '        if(heroSales.supplyLimit > heroSales.suppliedCounts){\n', '            _priceIncreaseTo = SafeMath.add(_price, _price.div((uint256(heroSales.supplyLimit).sub(heroSales.suppliedCounts))));\n', '            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n', '            _lowestPrice = uint256(heroSales.lowestPriceRate).mul(heroSales.highestPrice).div(100);\n', '            _becomeLowestAt = uint256(86400).mul(100).mul((_priceIncreaseTo.sub(_lowestPrice))).div(_priceIncreaseTo).div(heroSales.decreaseRate).add(_at);\n', '        } else {\n', '            _priceIncreaseTo = heroSales.previousPrice;\n', '            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n', '            _lowestPrice = heroSales.previousPrice;\n', '            _becomeLowestAt = _at;\n', '        }\n', '\n', '        address Invitees;\n', '\n', '        if (_code == msg.sender){\n', '            Invitees = address(0x0);\n', '        } else {\n', '            Invitees = _code;\n', '        }\n', '\n', '        emit SoldHeroEvent(\n', '            _heroType,\n', '            _price,\n', '            _at,\n', '            _priceIncreaseTo,\n', '            _lowestPrice,\n', '            _becomeLowestAt,\n', '            msg.sender,\n', '            Invitees,\n', '            1\n', '        );\n', '\n', '    }\n', '\n', '    function createHero(uint16 _heroType, address _owner) internal {\n', '        require(heroTypeToHeroSales[_heroType].exists, "not exist sales of this heroType");\n', '        require(heroTypeIds[_heroType].length < heroTypeToHeroSales[_heroType].supplyLimit, "Heroes cant be created more than supplyLimit");\n', '\n', '        uint256 _heroId = uint256(_heroType).mul(SUPPLY_LIMIT_MAX).add(heroTypeIds[_heroType].length).add(1);\n', '        heroTypeIds[_heroType].push(_heroId);\n', '        heroAsset.mintHeroAsset(_owner, _heroId);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an account's access to this role\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n', '\n', 'contract MinterRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event MinterAdded(address indexed account);\n', '  event MinterRemoved(address indexed account);\n', '\n', '  Roles.Role private minters;\n', '\n', '  constructor() public {\n', '    minters.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(isMinter(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isMinter(address account) public view returns (bool) {\n', '    return minters.has(account);\n', '  }\n', '\n', '  function addMinter(address account) public onlyMinter {\n', '    minters.add(account);\n', '    emit MinterAdded(account);\n', '  }\n', '\n', '  function renounceMinter() public {\n', '    minters.remove(msg.sender);\n', '  }\n', '\n', '  function _removeMinter(address account) internal {\n', '    minters.remove(account);\n', '    emit MinterRemoved(account);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/introspection/IERC165.sol\n', '\n', '/**\n', ' * @title IERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface IERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', '/**\n', ' * @title ERC165\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '\n', '  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', "   *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '   */\n', '\n', '  /**\n', "   * @dev a mapping of interface id to whether or not it's supported\n", '   */\n', '  mapping(bytes4 => bool) internal _supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    public\n', '  {\n', '    _registerInterface(_InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _supportedInterfaces[interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev private method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 interfaceId)\n', '    internal\n', '  {\n', '    require(interfaceId != 0xffffffff);\n', '    _supportedInterfaces[interfaceId] = true;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param account address of the account to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address account) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(account) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721 is IERC165 {\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 indexed tokenId\n', '  );\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed approved,\n', '    uint256 indexed tokenId\n', '  );\n', '  event ApprovalForAll(\n', '    address indexed owner,\n', '    address indexed operator,\n', '    bool approved\n', '  );\n', '\n', '  function balanceOf(address owner) public view returns (uint256 balance);\n', '  function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '  function approve(address to, uint256 tokenId) public;\n', '  function getApproved(uint256 tokenId)\n', '    public view returns (address operator);\n', '\n', '  function setApprovalForAll(address operator, bool _approved) public;\n', '  function isApprovedForAll(address owner, address operator)\n', '    public view returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 tokenId) public;\n', '  function safeTransferFrom(address from, address to, uint256 tokenId)\n', '    public;\n', '\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract IERC721Receiver {\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   * after a `safeTransfer`. This function MUST return the function selector,\n', '   * otherwise the caller will revert the transaction. The selector to be\n', '   * returned can be obtained as `this.onERC721Received.selector`. This\n', '   * function MAY throw to revert and reject the transfer.\n', '   * Note: the ERC721 contract address is always the message sender.\n', '   * @param operator The address which called `safeTransferFrom` function\n', '   * @param from The address which previously owned the token\n', '   * @param tokenId The NFT identifier which is being transferred\n', '   * @param data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address operator,\n', '    address from,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC165, IERC721 {\n', '\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private _tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private _tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) private _ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n', '  /*\n', '   * 0x80ac58cd ===\n', "   *   bytes4(keccak256('balanceOf(address)')) ^\n", "   *   bytes4(keccak256('ownerOf(uint256)')) ^\n", "   *   bytes4(keccak256('approve(address,uint256)')) ^\n", "   *   bytes4(keccak256('getApproved(uint256)')) ^\n", "   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n", '   */\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    require(owner != address(0));\n', '    return _ownedTokensCount[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 tokenId) public view returns (address) {\n', '    address owner = _tokenOwner[tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param to address to be approved for the given token ID\n', '   * @param tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address to, uint256 tokenId) public {\n', '    address owner = ownerOf(tokenId);\n', '    require(to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    _tokenApprovals[tokenId] = to;\n', '    emit Approval(owner, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * Reverts if the token ID does not exist.\n', '   * @param tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 tokenId) public view returns (address) {\n', '    require(_exists(tokenId));\n', '    return _tokenApprovals[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param to operator address to set the approval\n', '   * @param approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address to, bool approved) public {\n', '    require(to != msg.sender);\n', '    _operatorApprovals[msg.sender][to] = approved;\n', '    emit ApprovalForAll(msg.sender, to, approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param owner owner address which you want to query the approval of\n', '   * @param operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address owner,\n', '    address operator\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _operatorApprovals[owner][operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    require(_isApprovedOrOwner(msg.sender, tokenId));\n', '    require(to != address(0));\n', '\n', '    _clearApproval(from, tokenId);\n', '    _removeTokenFrom(from, tokenId);\n', '    _addTokenTo(to, tokenId);\n', '\n', '    emit Transfer(from, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   *\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(from, to, tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    transferFrom(from, to, tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(_checkAndCallSafeTransfer(from, to, tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param tokenId uint256 ID of the token to query the existence of\n', '   * @return whether the token exists\n', '   */\n', '  function _exists(uint256 tokenId) internal view returns (bool) {\n', '    address owner = _tokenOwner[tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param spender address of the spender to query\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function _isApprovedOrOwner(\n', '    address spender,\n', '    uint256 tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    address owner = ownerOf(tokenId);\n', '    // Disable solium check because of\n', '    // https://github.com/duaraghav8/Solium/issues/175\n', '    // solium-disable-next-line operator-whitespace\n', '    return (\n', '      spender == owner ||\n', '      getApproved(tokenId) == spender ||\n', '      isApprovedForAll(owner, spender)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to The address that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    require(to != address(0));\n', '    _addTokenTo(to, tokenId);\n', '    emit Transfer(address(0), to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    _clearApproval(owner, tokenId);\n', '    _removeTokenFrom(owner, tokenId);\n', '    emit Transfer(owner, address(0), tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * Reverts if the given address is not indeed the owner of the token\n', '   * @param owner owner of the token\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function _clearApproval(address owner, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == owner);\n', '    if (_tokenApprovals[tokenId] != address(0)) {\n', '      _tokenApprovals[tokenId] = address(0);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    require(_tokenOwner[tokenId] == address(0));\n', '    _tokenOwner[tokenId] = to;\n', '    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == from);\n', '    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n', '    _tokenOwner[tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param to target address that will receive the tokens\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function _checkAndCallSafeTransfer(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = IERC721Receiver(to).onERC721Received(\n', '      msg.sender, from, tokenId, _data);\n', '    return (retval == _ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Enumerable is IERC721 {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 tokenId);\n', '\n', '  function tokenByIndex(uint256 index) public view returns (uint256);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\n', '\n', 'contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) private _ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] private _allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '  /**\n', '   * 0x780e9d63 ===\n', "   *   bytes4(keccak256('totalSupply()')) ^\n", "   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "   *   bytes4(keccak256('tokenByIndex(uint256)'))\n", '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor() public {\n', '    // register the supported interface to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721Enumerable);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param owner address owning the tokens list to be accessed\n', '   * @param index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    require(index < balanceOf(owner));\n', '    return _ownedTokens[owner][index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens\n', '   * @param index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 index) public view returns (uint256) {\n', '    require(index < totalSupply());\n', '    return _allTokens[index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    super._addTokenTo(to, tokenId);\n', '    uint256 length = _ownedTokens[to].length;\n', '    _ownedTokens[to].push(tokenId);\n', '    _ownedTokensIndex[tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    super._removeTokenFrom(from, tokenId);\n', '\n', '    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot.\n', '    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n', '    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n', '\n', '    _ownedTokens[from][tokenIndex] = lastToken;\n', '    // This also deletes the contents at the last position of the array\n', '    _ownedTokens[from].length--;\n', '\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    _ownedTokensIndex[tokenId] = 0;\n', '    _ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to address the beneficiary that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    super._mint(to, tokenId);\n', '\n', '    _allTokensIndex[tokenId] = _allTokens.length;\n', '    _allTokens.push(tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = _allTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _allTokens.length.sub(1);\n', '    uint256 lastToken = _allTokens[lastTokenIndex];\n', '\n', '    _allTokens[tokenIndex] = lastToken;\n', '    _allTokens[lastTokenIndex] = 0;\n', '\n', '    _allTokens.length--;\n', '    _allTokensIndex[tokenId] = 0;\n', '    _allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Metadata is IERC721 {\n', '  function name() external view returns (string);\n', '  function symbol() external view returns (string);\n', '  function tokenURI(uint256 tokenId) public view returns (string);\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\n', '\n', 'contract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n', '  // Token name\n', '  string internal _name;\n', '\n', '  // Token symbol\n', '  string internal _symbol;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) private _tokenURIs;\n', '\n', '  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '  /**\n', '   * 0x5b5e139f ===\n', "   *   bytes4(keccak256('name()')) ^\n", "   *   bytes4(keccak256('symbol()')) ^\n", "   *   bytes4(keccak256('tokenURI(uint256)'))\n", '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor(string name, string symbol) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * Throws if the token ID does not exist. May return an empty string.\n', '   * @param tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 tokenId) public view returns (string) {\n', '    require(_exists(tokenId));\n', '    return _tokenURIs[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * Reverts if the token ID does not exist\n', '   * @param tokenId uint256 ID of the token to set its URI\n', '   * @param uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 tokenId, string uri) internal {\n', '    require(_exists(tokenId));\n', '    _tokenURIs[tokenId] = uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '      delete _tokenURIs[tokenId];\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n', '  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n', '    public\n', '  {\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Mintable.sol\n', '\n', '/**\n', ' * @title ERC721Mintable\n', ' * @dev ERC721 minting logic\n', ' */\n', 'contract ERC721Mintable is ERC721Full, MinterRole {\n', '  event MintingFinished();\n', '\n', '  bool private _mintingFinished = false;\n', '\n', '  modifier onlyBeforeMintingFinished() {\n', '    require(!_mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if the minting is finished.\n', '   */\n', '  function mintingFinished() public view returns(bool) {\n', '    return _mintingFinished;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param to The address that will receive the minted tokens.\n', '   * @param tokenId The token id to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mint(to, tokenId);\n', '    return true;\n', '  }\n', '\n', '  function mintWithTokenURI(\n', '    address to,\n', '    uint256 tokenId,\n', '    string tokenURI\n', '  )\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    mint(to, tokenId);\n', '    _setTokenURI(tokenId, tokenURI);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting()\n', '    public\n', '    onlyMinter\n', '    onlyBeforeMintingFinished\n', '    returns (bool)\n', '  {\n', '    _mintingFinished = true;\n', '    emit MintingFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n', '\n', 'contract PauserRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event PauserAdded(address indexed account);\n', '  event PauserRemoved(address indexed account);\n', '\n', '  Roles.Role private pausers;\n', '\n', '  constructor() public {\n', '    pausers.add(msg.sender);\n', '  }\n', '\n', '  modifier onlyPauser() {\n', '    require(isPauser(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isPauser(address account) public view returns (bool) {\n', '    return pausers.has(account);\n', '  }\n', '\n', '  function addPauser(address account) public onlyPauser {\n', '    pausers.add(account);\n', '    emit PauserAdded(account);\n', '  }\n', '\n', '  function renouncePauser() public {\n', '    pausers.remove(msg.sender);\n', '  }\n', '\n', '  function _removePauser(address account) internal {\n', '    pausers.remove(account);\n', '    emit PauserRemoved(account);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '  event Paused();\n', '  event Unpaused();\n', '\n', '  bool private _paused = false;\n', '\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns(bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyPauser whenNotPaused {\n', '    _paused = true;\n', '    emit Paused();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyPauser whenPaused {\n', '    _paused = false;\n', '    emit Unpaused();\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC721/ERC721Pausable.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Pausable token\n', ' * @dev ERC721 modified with pausable transfers.\n', ' **/\n', 'contract ERC721Pausable is ERC721, Pausable {\n', '  function approve(\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.approve(to, tokenId);\n', '  }\n', '\n', '  function setApprovalForAll(\n', '    address to,\n', '    bool approved\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.setApprovalForAll(to, approved);\n', '  }\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '  {\n', '    super.transferFrom(from, to, tokenId);\n', '  }\n', '}\n', '\n', '// File: contracts/HeroAsset.sol\n', '\n', 'contract HeroAsset is ERC721Mintable, ERC721Pausable {\n', '\n', '    uint16 public constant HERO_TYPE_OFFSET = 10000;\n', '\n', '    string public tokenURIPrefix = "https://www.mycryptoheroes.net/metadata/hero/";\n', '    mapping(uint16 => uint16) private heroTypeToSupplyLimit;\n', '\n', '    constructor() public ERC721Full("MyCryptoHeroes:Hero", "MCHH") {}\n', '\n', '    function setSupplyLimit(uint16 _heroType, uint16 _supplyLimit) external onlyMinter {\n', '        require(heroTypeToSupplyLimit[_heroType] == 0 || _supplyLimit < heroTypeToSupplyLimit[_heroType],\n', '            "_supplyLimit is bigger");\n', '        heroTypeToSupplyLimit[_heroType] = _supplyLimit;\n', '    }\n', '\n', '    function setTokenURIPrefix(string _tokenURIPrefix) external onlyMinter {\n', '        tokenURIPrefix = _tokenURIPrefix;\n', '    }\n', '\n', '    function getSupplyLimit(uint16 _heroType) public view returns (uint16) {\n', '        return heroTypeToSupplyLimit[_heroType];\n', '    }\n', '\n', '    function mintHeroAsset(address _owner, uint256 _tokenId) public onlyMinter {\n', '        uint16 _heroType = uint16(_tokenId / HERO_TYPE_OFFSET);\n', '        uint16 _heroTypeIndex = uint16(_tokenId % HERO_TYPE_OFFSET) - 1;\n', '        require(_heroTypeIndex < heroTypeToSupplyLimit[_heroType], "supply over");\n', '        _mint(_owner, _tokenId);\n', '    }\n', '\n', '    function tokenURI(uint256 tokenId) public view returns (string) {\n', '        bytes32 tokenIdBytes;\n', '        if (tokenId == 0) {\n', '            tokenIdBytes = "0";\n', '        } else {\n', '            uint256 value = tokenId;\n', '            while (value > 0) {\n', '                tokenIdBytes = bytes32(uint256(tokenIdBytes) / (2 ** 8));\n', '                tokenIdBytes |= bytes32(((value % 10) + 48) * 2 ** (8 * 31));\n', '                value /= 10;\n', '            }\n', '        }\n', '\n', '        bytes memory prefixBytes = bytes(tokenURIPrefix);\n', '        bytes memory tokenURIBytes = new bytes(prefixBytes.length + tokenIdBytes.length);\n', '\n', '        uint8 i;\n', '        uint8 index = 0;\n', '        \n', '        for (i = 0; i < prefixBytes.length; i++) {\n', '            tokenURIBytes[index] = prefixBytes[i];\n', '            index++;\n', '        }\n', '        \n', '        for (i = 0; i < tokenIdBytes.length; i++) {\n', '            tokenURIBytes[index] = tokenIdBytes[i];\n', '            index++;\n', '        }\n', '        \n', '        return string(tokenURIBytes);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(_owner);\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param amount The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(account != 0);\n', '    require(amount <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param amount The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 amount) internal {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      amount);\n', '    _burn(account, amount);\n', '  }\n', '}\n', '\n', '// File: contracts/lib/openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /// @dev counter to allow mutex lock with only one SSTORE operation\n', '  uint256 private _guardCounter = 1;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one `nonReentrant` function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and an `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    _guardCounter += 1;\n', '    uint256 localCounter = _guardCounter;\n', '    _;\n', '    require(localCounter == _guardCounter);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/HeroPresale.sol\n', '\n', 'contract HeroPresale is Ownable, Pausable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    struct HeroSale {\n', '        uint128 highestPrice;\n', '        uint128 previousPrice;\n', '        uint128 priceIncreaseTo;\n', '        uint64  since;\n', '        uint64  until;\n', '        uint64  previousSaleAt;\n', '        uint16  lowestPriceRate;\n', '        uint16  decreaseRate;\n', '        uint16  supplyLimit;\n', '        uint16  suppliedCounts;\n', '        uint8   currency;\n', '        bool    exists;\n', '    }\n', '    \n', '    mapping(uint16 => HeroSale) public heroTypeToHeroSales;\n', '    mapping(uint16 => uint256[]) public heroTypeIds;\n', '    mapping(uint16 => mapping(address => bool)) public hasAirDropHero;\n', '\n', '    ERC20 public coin;\n', '    HeroAsset public heroAsset;\n', '    uint16 constant internal SUPPLY_LIMIT_MAX = 10000;\n', '\n', '    event AddSalesEvent(\n', '        uint16 indexed heroType,\n', '        uint128 startPrice,\n', '        uint256 lowestPrice,\n', '        uint256 becomeLowestAt\n', '    );\n', '\n', '    event SoldHeroEvent(\n', '        uint16 indexed heroType,\n', '        uint256 soldPrice,\n', '        uint64  soldAt,\n', '        uint256 priceIncreaseTo,\n', '        uint256 lowestPrice,\n', '        uint256 becomeLowestAt,\n', '        address purchasedBy,\n', '        address indexed code,\n', '        uint8   currency\n', '    );\n', '\n', '    function setHeroAssetAddress(address _heroAssetAddress) external onlyOwner() {\n', '        heroAsset = HeroAsset(_heroAssetAddress);\n', '    }\n', '\n', '    function setCoinAddress(ERC20 _coinAddress) external onlyOwner() {\n', '        coin = _coinAddress;\n', '    }\n', '\n', '    function withdrawEther() external onlyOwner() {\n', '        owner().transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawEMONT() external onlyOwner() {\n', '        uint256 emontBalance = coin.balanceOf(this);\n', '        coin.approve(address(this), emontBalance);\n', '        coin.transferFrom(address(this), msg.sender, emontBalance);\n', '    }\n', '\n', '    function addSales(\n', '        uint16 _heroType,\n', '        uint128 _startPrice,\n', '        uint16 _lowestPriceRate,\n', '        uint16 _decreaseRate,\n', '        uint64 _since,\n', '        uint64 _until,\n', '        uint16 _supplyLimit,\n', '        uint8  _currency\n', '    ) external onlyOwner() {\n', '        require(!heroTypeToHeroSales[_heroType].exists, "this heroType is already added sales");\n', '        require(0 <= _lowestPriceRate && _lowestPriceRate <= 100, "lowestPriceRate should be between 0 and 100");\n', '        require(1 <= _decreaseRate && _decreaseRate <= 100, "decreaseRate should be should be between 1 and 100");\n', '        require (_until > _since, "until should be later than since");\n', '\n', '        HeroSale memory _herosale = HeroSale({\n', '            highestPrice: _startPrice,\n', '            previousPrice: _startPrice,\n', '            priceIncreaseTo: _startPrice,\n', '            since:_since,\n', '            until:_until,\n', '            previousSaleAt: _since,\n', '            lowestPriceRate: _lowestPriceRate,\n', '            decreaseRate: _decreaseRate,\n', '            supplyLimit:_supplyLimit,\n', '            suppliedCounts: 0,\n', '            currency: _currency,\n', '            exists: true\n', '        });\n', '\n', '        heroTypeToHeroSales[_heroType] = _herosale;\n', '        heroAsset.setSupplyLimit(_heroType, _supplyLimit);\n', '\n', '        uint256 _lowestPrice = uint256(_startPrice).mul(_lowestPriceRate).div(100);\n', '        uint256 _becomeLowestAt = uint256(86400).mul(uint256(100).sub(_lowestPriceRate)).div(_decreaseRate).add(_since);\n', '\n', '        emit AddSalesEvent(\n', '            _heroType,\n', '            _startPrice,\n', '            _lowestPrice,\n', '            _becomeLowestAt\n', '        );\n', '    }\n', '\n', '    function purchase(uint16 _heroType, address _code) external whenNotPaused() nonReentrant() payable {\n', '    // solium-disable-next-line security/no-block-members\n', '        return purchaseImpl(_heroType, uint64(block.timestamp), _code);\n', '    }\n', '\n', '    function purchaseByEMONT(uint16 _heroType, uint256 _price, address _code) external whenNotPaused() {\n', '      // solium-disable-next-line security/no-block-members\n', '        return purchaseByEMONTImpl(_heroType, _price, uint64(block.timestamp), _code);\n', '    }\n', '\n', '    function airDrop(uint16 _heroType) external whenNotPaused() {\n', '        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n', '        require(airDropHero(_heroType), "currency is not 2 (airdrop)");\n', '        require(!hasAirDropHero[_heroType][msg.sender]);\n', '        uint64 _at = uint64(block.timestamp);\n', '        require(isOnSale(_heroType, _at), "out of sales period");\n', '\n', '        createHero(_heroType, msg.sender);\n', '        hasAirDropHero[_heroType][msg.sender] = true;\n', '        heroSales.suppliedCounts++;\n', '        heroSales.previousSaleAt = _at;\n', '\n', '        emit SoldHeroEvent(\n', '            _heroType,\n', '            1,\n', '            _at,\n', '            1,\n', '            1,\n', '            1,\n', '            msg.sender,\n', '            0x0000000000000000000000000000000000000000,\n', '            2\n', '        );\n', '    }\n', '\n', '\n', '    function computeCurrentPrice(uint16 _heroType) external view returns (uint8, uint256){\n', '        // solium-disable-next-line security/no-block-members\n', '        return computeCurrentPriceImpl(_heroType, uint64(block.timestamp));\n', '    }\n', '\n', '    function canBePurchasedByETH(uint16 _heroType) internal view returns (bool){\n', '        return (heroTypeToHeroSales[_heroType].currency == 0);\n', '    }\n', '\n', '    function canBePurchasedByEMONT(uint16 _heroType) internal view returns (bool){\n', '        return (heroTypeToHeroSales[_heroType].currency == 1);\n', '    }\n', '\n', '    function airDropHero(uint16 _heroType) internal view returns (bool){\n', '        return (heroTypeToHeroSales[_heroType].currency == 2);\n', '    }\n', '\n', '    function isOnSale(uint16 _heroType, uint64 _now) internal view returns (bool){\n', '        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n', '        require(heroSales.exists, "not exist sales of this heroType");\n', '\n', '        if (heroSales.since <= _now && _now <= heroSales.until) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function computeCurrentPriceImpl(uint16 _heroType, uint64 _at) internal view returns (uint8, uint256) {\n', '        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n', '        require(heroSales.exists, "not exist sales of this heroType");\n', '        require(heroSales.previousSaleAt < _at, "current timestamp should be later than previousSaleAt");\n', '\n', '        uint256 _lowestPrice = uint256(heroSales.highestPrice).mul(heroSales.lowestPriceRate).div(100);\n', '        uint256 _secondsPassed = uint256(_at).sub(heroSales.previousSaleAt);\n', '        uint256 _decreasedPrice = uint256(heroSales.priceIncreaseTo).mul(_secondsPassed).mul(heroSales.decreaseRate).div(100).div(86400);\n', '        uint256 currentPrice;\n', '\n', '        if (uint256(heroSales.priceIncreaseTo).sub(_lowestPrice) > _decreasedPrice){\n', '            currentPrice = uint256(heroSales.priceIncreaseTo).sub(_decreasedPrice);\n', '        } else {\n', '            currentPrice = _lowestPrice;\n', '        }\n', '\n', '        return (1, currentPrice);\n', '    }\n', '\n', '    function purchaseImpl(uint16 _heroType, uint64 _at, address code)\n', '        internal\n', '    {\n', '        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n', '        require(canBePurchasedByETH(_heroType), "currency is not 0 (eth)");\n', '        require(isOnSale(_heroType, _at), "out of sales period");\n', '        (,uint256 _price)  = computeCurrentPriceImpl(_heroType, _at);\n', '        require(msg.value >= _price, "value is less than the price");\n', '\n', '        createHero(_heroType, msg.sender);\n', '\n', '        if (msg.value > _price){\n', '            msg.sender.transfer(msg.value.sub(_price));\n', '        }\n', '\n', '        heroSales.previousPrice = uint128(_price);\n', '        heroSales.suppliedCounts++;\n', '        heroSales.previousSaleAt = _at;\n', '\n', '        if (heroSales.previousPrice > heroSales.highestPrice){\n', '            heroSales.highestPrice = heroSales.previousPrice;\n', '        }\n', '\n', '        uint256 _priceIncreaseTo;\n', '        uint256 _lowestPrice;\n', '        uint256 _becomeLowestAt;\n', '\n', '        if(heroSales.supplyLimit > heroSales.suppliedCounts){\n', '            _priceIncreaseTo = SafeMath.add(_price, _price.div((uint256(heroSales.supplyLimit).sub(heroSales.suppliedCounts))));\n', '            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n', '            _lowestPrice = uint256(heroSales.lowestPriceRate).mul(heroSales.highestPrice).div(100);\n', '            _becomeLowestAt = uint256(86400).mul(100).mul((_priceIncreaseTo.sub(_lowestPrice))).div(_priceIncreaseTo).div(heroSales.decreaseRate).add(_at);\n', '        } else {\n', '            _priceIncreaseTo = heroSales.previousPrice;\n', '            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n', '            _lowestPrice = heroSales.previousPrice;\n', '            _becomeLowestAt = _at;\n', '        }\n', '\n', '        address Invitees;\n', '\n', '        if (code == msg.sender){\n', '            Invitees = address(0x0);\n', '        } else {\n', '            Invitees = code;\n', '        }\n', '\n', '        emit SoldHeroEvent(\n', '            _heroType,\n', '            _price,\n', '            _at,\n', '            _priceIncreaseTo,\n', '            _lowestPrice,\n', '            _becomeLowestAt,\n', '            msg.sender,\n', '            Invitees,\n', '            0\n', '        );\n', '\n', '    }\n', '\n', '    function purchaseByEMONTImpl(uint16 _heroType, uint256 _inputPrice, uint64 _at, address _code)\n', '        internal\n', '    {\n', '        HeroSale storage heroSales = heroTypeToHeroSales[_heroType];\n', '        require(canBePurchasedByEMONT(_heroType), "currency is not 1 (EMONT)");\n', '        require(isOnSale(_heroType, _at), "out of sales period");\n', '        (,uint256 _price)  = computeCurrentPriceImpl(_heroType, _at);\n', '        require(_inputPrice > _price, "input price is not more than actual price");\n', '\n', '        createHero(_heroType, msg.sender);\n', '        coin.transferFrom(msg.sender, address(this), _price);\n', '\n', '        heroSales.previousPrice = uint128(_price);\n', '        heroSales.suppliedCounts++;\n', '        heroSales.previousSaleAt = _at;\n', '\n', '        if (heroSales.previousPrice > heroSales.highestPrice){\n', '            heroSales.highestPrice = heroSales.previousPrice;\n', '        }\n', '\n', '        uint256 _priceIncreaseTo;\n', '        uint256 _lowestPrice;\n', '        uint256 _becomeLowestAt;\n', '\n', '        if(heroSales.supplyLimit > heroSales.suppliedCounts){\n', '            _priceIncreaseTo = SafeMath.add(_price, _price.div((uint256(heroSales.supplyLimit).sub(heroSales.suppliedCounts))));\n', '            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n', '            _lowestPrice = uint256(heroSales.lowestPriceRate).mul(heroSales.highestPrice).div(100);\n', '            _becomeLowestAt = uint256(86400).mul(100).mul((_priceIncreaseTo.sub(_lowestPrice))).div(_priceIncreaseTo).div(heroSales.decreaseRate).add(_at);\n', '        } else {\n', '            _priceIncreaseTo = heroSales.previousPrice;\n', '            heroSales.priceIncreaseTo = uint128(_priceIncreaseTo);\n', '            _lowestPrice = heroSales.previousPrice;\n', '            _becomeLowestAt = _at;\n', '        }\n', '\n', '        address Invitees;\n', '\n', '        if (_code == msg.sender){\n', '            Invitees = address(0x0);\n', '        } else {\n', '            Invitees = _code;\n', '        }\n', '\n', '        emit SoldHeroEvent(\n', '            _heroType,\n', '            _price,\n', '            _at,\n', '            _priceIncreaseTo,\n', '            _lowestPrice,\n', '            _becomeLowestAt,\n', '            msg.sender,\n', '            Invitees,\n', '            1\n', '        );\n', '\n', '    }\n', '\n', '    function createHero(uint16 _heroType, address _owner) internal {\n', '        require(heroTypeToHeroSales[_heroType].exists, "not exist sales of this heroType");\n', '        require(heroTypeIds[_heroType].length < heroTypeToHeroSales[_heroType].supplyLimit, "Heroes cant be created more than supplyLimit");\n', '\n', '        uint256 _heroId = uint256(_heroType).mul(SUPPLY_LIMIT_MAX).add(heroTypeIds[_heroType].length).add(1);\n', '        heroTypeIds[_heroType].push(_heroId);\n', '        heroAsset.mintHeroAsset(_owner, _heroId);\n', '    }\n', '}']
