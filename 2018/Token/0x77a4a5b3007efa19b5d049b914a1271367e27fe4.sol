['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20 {\n', '\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function totalSupply() external constant returns (uint);\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool);\n', '\n', '    function allowance(address _owner, address _spender) external constant returns (uint256);\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /*\n', '        @return sum of a and b\n', '    */\n', '    function ADD (uint256 a, uint256 b) pure internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /*\n', '        @return difference of a and b\n', '    */\n', '    function SUB (uint256 a, uint256 b) pure internal returns (uint256) {\n', '        assert(a >= b);\n', '        return a - b;\n', '    }\n', '    \n', '}\n', '\n', 'contract Ownable {\n', '\n', '\n', '    address owner;\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '        OwnershipTransferred (address(0), owner);\n', '    }\n', '\n', '    function transferOwnership(address _newOwner)\n', '        public\n', '        onlyOwner\n', '        notZeroAddress(_newOwner)\n', '    {\n', '        owner = _newOwner;\n', '        OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '\n', '    //Only owner can call function\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier notZeroAddress(address _address) {\n', '        require(_address != address(0));\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '/*\n', '\tTrustable saves trusted addresses\n', '*/\n', 'contract Trustable is Ownable {\n', '\n', '\n', '    //Only trusted addresses are able to transfer tokens during the Crowdsale\n', '    mapping (address => bool) trusted;\n', '\n', '    event AddTrusted (address indexed _trustable);\n', '    event RemoveTrusted (address indexed _trustable);\n', '\n', '    function Trustable() public {\n', '        trusted[msg.sender] = true;\n', '        AddTrusted(msg.sender);\n', '    }\n', '\n', '    //Add new trusted address\n', '    function addTrusted(address _address)\n', '        external\n', '        onlyOwner\n', '        notZeroAddress(_address)\n', '    {\n', '        trusted[_address] = true;\n', '        AddTrusted(_address);\n', '    }\n', '\n', '    //Remove address from a trusted list\n', '    function removeTrusted(address _address)\n', '        external\n', '        onlyOwner\n', '        notZeroAddress(_address)\n', '    {\n', '        trusted[_address] = false;\n', '        RemoveTrusted(_address);\n', '    }\n', '\n', '}\n', '\n', 'contract Pausable is Trustable {\n', '\n', '\n', '    //To check if Token is paused\n', '    bool public paused;\n', '    //Block number on pause\n', '    uint256 public pauseBlockNumber;\n', '    //Block number on resume\n', '    uint256 public resumeBlockNumber;\n', '\n', '    event Pause(uint256 _blockNumber);\n', '    event Unpause(uint256 _blockNumber);\n', '\n', '    function pause()\n', '        public\n', '        onlyOwner\n', '        whenNotPaused\n', '    {\n', '        paused = true;\n', '        pauseBlockNumber = block.number;\n', '        resumeBlockNumber = 0;\n', '        Pause(pauseBlockNumber);\n', '    }\n', '\n', '    function unpause()\n', '        public\n', '        onlyOwner\n', '        whenPaused\n', '    {\n', '        paused = false;\n', '        resumeBlockNumber = block.number;\n', '        pauseBlockNumber = 0;\n', '        Unpause(resumeBlockNumber);\n', '    }\n', '\n', '    modifier whenNotPaused {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '/*\n', '\tContract determines token\n', '*/\n', 'contract Token is ERC20, Pausable{\n', '\n', '\n', '    using SafeMath for uint256;\n', '\n', '    //Total amount of Outing\n', '    uint256 _totalSupply = 56000000000000000; \n', '\n', '    //Balances for each account\n', '    mapping (address => uint256)  balances;\n', '    //Owner of the account approves the transfer of an amount to another account\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    //Notifies users about the amount burnt\n', '    event Burn(address indexed _from, uint256 _value);\n', '    //Notifies users about end block change\n', '    event CrowdsaleEndChanged (uint256 _crowdsaleEnd, uint256 _newCrowdsaleEnd);\n', '\n', '    //return _totalSupply of the Token\n', '    function totalSupply() external constant returns (uint256 totalTokenSupply) {\n', '        totalTokenSupply = _totalSupply;\n', '    }\n', '\n', '    //What is the balance of a particular account?\n', '    function balanceOf(address _owner)\n', '        external\n', '        constant\n', '        returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', "    //Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _amount)\n', '        external\n', '        notZeroAddress(_to)\n', '        whenNotPaused\n', '        returns (bool success)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].SUB(_amount);\n', '        balances[_to] = balances[_to].ADD(_amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount)\n', '        external\n', '        notZeroAddress(_to)\n', '        whenNotPaused\n', '        returns (bool success)\n', '    {\n', '        //Require allowance to be not too big\n', '        require(allowed[_from][msg.sender] >= _amount);\n', '        balances[_from] = balances[_from].SUB(_amount);\n', '        balances[_to] = balances[_to].ADD(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].SUB(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount)\n', '        external\n', '        whenNotPaused\n', '        notZeroAddress(_spender)\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    //Return how many tokens left that you can spend from\n', '    function allowance(address _owner, address _spender)\n', '        external\n', '        constant\n', '        returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint256 _addedValue)\n', '        external\n', '        whenNotPaused\n', '        returns (bool success)\n', '    {\n', '        uint256 increased = allowed[msg.sender][_spender].ADD(_addedValue);\n', '        require(increased <= balances[msg.sender]);\n', '        //Cannot approve more coins then you have\n', '        allowed[msg.sender][_spender] = increased;\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '        external\n', '        whenNotPaused\n', '        returns (bool success)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.SUB(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) external returns (bool success) {\n', '        require(trusted[msg.sender]);\n', '        //Subtract from the sender\n', '        balances[msg.sender] = balances[msg.sender].SUB(_value);\n', '        //Update _totalSupply\n', '        _totalSupply = _totalSupply.SUB(_value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/*\n', '\tContract defines specific token\n', '*/\n', 'contract OutingToken is Token{\n', '\n', '    //Name of the token\n', '    string public constant name = "Outing";\n', '    //Symbol of the token\n', '    string public constant symbol = "OTG";\n', '    //Number of decimals of Outing\n', '    uint8 public constant decimals = 8;\n', '\n', '    //Tokens allocation\n', '    //Outing Reserve wallet that will be unlocked after 0.5 year after ICO\n', '    address public constant OUTINGRESERVE = 0xB8E6C4Eab5BC0eAF1f3D8A9a59a8A26112a56fE2;\n', '    //Team wallet that will be unlocked after 1 year after ICO\n', '\n', '    address public constant TEAM = 0x0702dd2f7DC2FF1dCc6beC2De9D1e6e0d467AfaC;\n', '    //0.5 year after ICO\n', '    uint256 public UNLOCK_OUTINGRESERVE = now + 262800 minutes;\n', '    //1 year after ICO\n', '    uint256 public UNLOCK_TEAM = now + 525600 minutes;\n', '    //outing reserve wallet balance\n', '    uint256 public outingreserveBalance;\n', '    //team wallet balance\n', '    uint256 public teamBalance;\n', '\n', '    //56%\n', '    uint256 private constant OUTINGRESERVE_THOUSANDTH = 560;\n', '    //7%\n', '    uint256 private constant TEAM_THOUSANDTH = 70;\n', '    //37%\n', '    uint256 private constant ICO_THOUSANDTH = 370;\n', '    //100%\n', '    uint256 private constant DENOMINATOR = 1000;\n', '\n', '    function OutingToken() public {\n', '        //36% of _totalSupply\n', '        balances[msg.sender] = _totalSupply * ICO_THOUSANDTH / DENOMINATOR;\n', '        //56% of _totalSupply\n', '        outingreserveBalance = _totalSupply * OUTINGRESERVE_THOUSANDTH / DENOMINATOR;\n', '        //8% of _totalSupply\n', '        teamBalance = _totalSupply * TEAM_THOUSANDTH / DENOMINATOR;\n', '\n', '        Transfer (this, msg.sender, balances[msg.sender]);\n', '    }\n', '\n', '    //Check if team wallet is unlocked\n', '    function unlockTokens(address _address) external {\n', '        if (_address == OUTINGRESERVE) {\n', '            require(UNLOCK_OUTINGRESERVE <= now);\n', '            require (outingreserveBalance > 0);\n', '            balances[OUTINGRESERVE] = outingreserveBalance;\n', '            outingreserveBalance = 0;\n', '            Transfer (this, OUTINGRESERVE, balances[OUTINGRESERVE]);\n', '        } else if (_address == TEAM) {\n', '            require(UNLOCK_TEAM <= now);\n', '            require (teamBalance > 0);\n', '            balances[TEAM] = teamBalance;\n', '            teamBalance = 0;\n', '            Transfer (this, TEAM, balances[TEAM]);\n', '        }\n', '    }\n', '}']