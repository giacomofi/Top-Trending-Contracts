['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\t\t\t\t\t\t\t/* name 代币名称 */\n', '    string public symbol;\t\t\t\t\t\t/* symbol 代币图标 */\n', '    uint8  public decimals = 18;\t\t\t/* decimals 代币小数点位数 */ \n', '    uint256 public totalSupply;\t\t\t//代币总量\n', '\n', '    \n', '    /* 设置一个数组存储每个账户的代币信息，创建所有账户余额数组 */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    /* event事件，它的作用是提醒客户端发生了这个事件，你会注意到钱包有时候会在右下角弹出信息 */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '     /*初始化合约，将最初的令牌打入创建者的账户中*/\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  //以太币是10^18，后面18个0，所以默认decimals是18,给令牌设置18位小数的长度\n', '        balanceOf[msg.sender] = totalSupply;                \t\t// 给创建者所有初始令牌\n', '        name = tokenName;                                   \t\t// 设置代币（token）名称\n', '        symbol = tokenSymbol;                               \t\t// 设置代币（token）符号\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '     /**\n', '     * 私有方法从一个帐户发送给另一个帐户代币\n', '     * @param  _from address 发送代币的地址\n', '     * @param  _to address 接受代币的地址\n', '     * @param  _value uint256 接受代币的数量\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '    \n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        //避免转帐的地址是0x0\n', '        require(_to != 0x0);\n', '        \n', '        // Check if the sender has enough\n', '        //检查发送者是否拥有足够余额\n', '        require(balanceOf[_from] >= _value);\n', '        \n', '        // Check for overflows\n', '        //检查是否溢出\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        \n', '        // Save this for an assertion in the future\n', '        //保存数据用于后面的判断\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        \n', '        // Subtract from the sender\n', '        //从发送者减掉发送额\n', '        balanceOf[_from] -= _value;\n', '        \n', '        // Add the same to the recipient\n', '        //给接收者加上相同的量\n', '        balanceOf[_to] += _value;\n', '        \n', '        //通知任何监听该交易的客户端\n', '        Transfer(_from, _to, _value);\n', '        \n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        \n', '        //判断买、卖双方的数据是否和转换前一致\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    \n', '     /**\n', '     * 从主帐户合约调用者发送给别人代币\n', '     * @param  _to address 接受代币的地址\n', '     * @param  _value uint256 接受代币的数量\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '     /**\n', '     * 从某个指定的帐户中，向另一个帐户发送代币\n', '     *\n', '     * 调用过程，会检查设置的允许最大交易额\n', '     *\n', '     * @param  _from address 发送者地址\n', '     * @param  _to address 接受者地址\n', '     * @param  _value uint256 要转移的代币数量\n', '     * @return success        是否交易成功\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', ' \t\t/**\n', '     * 设置帐户允许支付的最大金额\n', '     * 一般在智能合约的时候，避免支付过多，造成风险\n', '     * @param _spender 帐户地址\n', '     * @param _value 金额\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '\t\t/**\n', '     * 设置帐户允许支付的最大金额\n', '     * 一般在智能合约的时候，避免支付过多，造成风险，加入时间参数，可以在 tokenRecipient 中做其他操作\n', '     * @param _spender 帐户地址\n', '     * @param _value 金额\n', '     * @param _extraData 操作的时间\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * 减少代币调用者的余额\n', '     * 操作以后是不可逆的\n', '     * @param _value 要删除的数量\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * 删除帐户的余额（含其他帐户）\n', '     * 删除以后是不可逆的\n', '     * @param _from 要操作的帐户地址\n', '     * @param _value 要减去的数量\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\t\t\t\t\t\t\t/* name 代币名称 */\n', '    string public symbol;\t\t\t\t\t\t/* symbol 代币图标 */\n', '    uint8  public decimals = 18;\t\t\t/* decimals 代币小数点位数 */ \n', '    uint256 public totalSupply;\t\t\t//代币总量\n', '\n', '    \n', '    /* 设置一个数组存储每个账户的代币信息，创建所有账户余额数组 */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    /* event事件，它的作用是提醒客户端发生了这个事件，你会注意到钱包有时候会在右下角弹出信息 */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '     /*初始化合约，将最初的令牌打入创建者的账户中*/\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  //以太币是10^18，后面18个0，所以默认decimals是18,给令牌设置18位小数的长度\n', '        balanceOf[msg.sender] = totalSupply;                \t\t// 给创建者所有初始令牌\n', '        name = tokenName;                                   \t\t// 设置代币（token）名称\n', '        symbol = tokenSymbol;                               \t\t// 设置代币（token）符号\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '     /**\n', '     * 私有方法从一个帐户发送给另一个帐户代币\n', '     * @param  _from address 发送代币的地址\n', '     * @param  _to address 接受代币的地址\n', '     * @param  _value uint256 接受代币的数量\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '    \n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        //避免转帐的地址是0x0\n', '        require(_to != 0x0);\n', '        \n', '        // Check if the sender has enough\n', '        //检查发送者是否拥有足够余额\n', '        require(balanceOf[_from] >= _value);\n', '        \n', '        // Check for overflows\n', '        //检查是否溢出\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        \n', '        // Save this for an assertion in the future\n', '        //保存数据用于后面的判断\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        \n', '        // Subtract from the sender\n', '        //从发送者减掉发送额\n', '        balanceOf[_from] -= _value;\n', '        \n', '        // Add the same to the recipient\n', '        //给接收者加上相同的量\n', '        balanceOf[_to] += _value;\n', '        \n', '        //通知任何监听该交易的客户端\n', '        Transfer(_from, _to, _value);\n', '        \n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        \n', '        //判断买、卖双方的数据是否和转换前一致\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    \n', '     /**\n', '     * 从主帐户合约调用者发送给别人代币\n', '     * @param  _to address 接受代币的地址\n', '     * @param  _value uint256 接受代币的数量\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '     /**\n', '     * 从某个指定的帐户中，向另一个帐户发送代币\n', '     *\n', '     * 调用过程，会检查设置的允许最大交易额\n', '     *\n', '     * @param  _from address 发送者地址\n', '     * @param  _to address 接受者地址\n', '     * @param  _value uint256 要转移的代币数量\n', '     * @return success        是否交易成功\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', ' \t\t/**\n', '     * 设置帐户允许支付的最大金额\n', '     * 一般在智能合约的时候，避免支付过多，造成风险\n', '     * @param _spender 帐户地址\n', '     * @param _value 金额\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '\t\t/**\n', '     * 设置帐户允许支付的最大金额\n', '     * 一般在智能合约的时候，避免支付过多，造成风险，加入时间参数，可以在 tokenRecipient 中做其他操作\n', '     * @param _spender 帐户地址\n', '     * @param _value 金额\n', '     * @param _extraData 操作的时间\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * 减少代币调用者的余额\n', '     * 操作以后是不可逆的\n', '     * @param _value 要删除的数量\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * 删除帐户的余额（含其他帐户）\n', '     * 删除以后是不可逆的\n', '     * @param _from 要操作的帐户地址\n', '     * @param _value 要减去的数量\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
