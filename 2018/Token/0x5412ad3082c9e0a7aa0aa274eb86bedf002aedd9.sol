['pragma solidity ^0.4.24;\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint _value, address _token, bytes _extraData) external;\n', '}\n', '\n', 'contract owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner public returns (bool success) {\n', '        newOwner = _newOwner;\n', '        return true;\n', '    }\n', '\n', '    function acceptOwnership() public returns (bool success) {\n', '        require(msg.sender == newOwner);\n', '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        newOwner = address(0);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract TokenERC20 is owned {\n', '    string public name = &#39;Telex&#39;;\n', '    string public symbol = &#39;TLX&#39;;\n', '    uint8 public decimals = 8;\n', '    uint public totalSupply = 2000000000000000;\n', '\n', '    mapping (address => uint) public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event FrozenFunds(address indexed target, bool frozen);\n', '\n', '    constructor() TokenERC20() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        if (msg.sender != owner) {\n', '          require(!frozenAccount[msg.sender]);\n', '          require(!frozenAccount[_from]);\n', '          require(!frozenAccount[_to]);\n', '        }\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function _multipleTransfer(address _from, address[] addresses, uint[] amounts) internal {\n', '        for (uint i=0; i<addresses.length; i++) {\n', '            address _to = addresses[i];\n', '            uint _value = amounts[i];\n', '            _transfer(_from, _to, _value);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function multipleTransfer(address[] addresses, uint[] amounts) public returns (bool success) {\n', '        _multipleTransfer(msg.sender, addresses, amounts);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        if (msg.sender != owner) {\n', '            require(allowance[_from][msg.sender] >= _value);\n', '            allowance[_from][msg.sender] -= _value;\n', '        }\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public returns (bool success) {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '        return true;\n', '    }\n', '}']