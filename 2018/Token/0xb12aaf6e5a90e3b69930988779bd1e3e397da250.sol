['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract TokenReceiver {\n', '    /**\n', '    * @dev Method to be triggerred during approveAndCall execution\n', '    * @param _sender A wallet that initiated the operation\n', '    * @param _value Amount of approved tokens\n', '    * @param _data Additional arguments\n', '    */\n', '    function tokenFallback(address _sender, uint256 _value, bytes _data) external returns (bool);\n', '}\n', '\n', '/**\n', '* @title Timestamped\n', '* @dev Timestamped contract has a separate method for receiving current timestamp.\n', '* This simplifies derived contracts testability.\n', '*/\n', 'contract Timestamped {\n', '    /**\n', '    * @dev Returns current timestamp.\n', '    */\n', '    function _currentTime() internal view returns(uint256) {\n', '        // solium-disable-next-line security/no-block-members\n', '        return block.timestamp;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5022353d333f1062">[email&#160;protected]</a>π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this Ether.\n', ' * @notice Ether can still be sent to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', ' */\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  constructor() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by setting a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    owner.transfer(address(this).balance);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', '* @title FlipNpikToken\n', '* @dev The FlipNpikToken is a ERC20 token \n', '*/\n', 'contract FlipNpikToken is Timestamped, StandardToken, DetailedERC20, HasNoEther {\n', '    using SafeMath for uint256;\n', '\n', '    // A wallet that will hold tokens\n', '    address public mainWallet;\n', '    // A wallet that is required to unlock reserve tokens\n', '    address public financeWallet;\n', '\n', '    // Locked reserve tokens amount is 500M FNP\n', '    uint256 public reserveSize = uint256(500000000).mul(10 ** 18);\n', '    // List of signatures required to unlock reserve tokens\n', '    mapping (address => bool) public reserveHolders;\n', '    // Total amount of unlocked reserve tokens\n', '    uint256 public totalUnlocked = 0;\n', '\n', '    // Scheduled for minting reserve tokens amount is 575M FNP\n', '    uint256 public mintSize = uint256(575000000).mul(10 ** 18);\n', '    // Datetime when minting according to schedule becomes available\n', '    uint256 public mintStart;\n', '    // Total amount of minted reserve tokens\n', '    uint256 public totalMinted = 0;    \n', '\n', '    /**\n', '    * Describes minting stage structure fields\n', '    * @param start Minting stage start date\n', '    * @param volumt Total tokens available for the stage\n', '    */\n', '    struct MintStage {\n', '        uint256 start;\n', '        uint256 volume;       \n', '    }\n', '\n', '    // Array of stages\n', '    MintStage[] public stages;\n', '\n', '    /**\n', '    * @dev Event for reserve tokens minting operation logging\n', '    * @param _amount Amount minted\n', '    */\n', '    event MintReserveLog(uint256 _amount);\n', '\n', '    /**\n', '    * @dev Event for reserve tokens unlock operation logging\n', '    * @param _amount Amount unlocked\n', '    */\n', '    event UnlockReserveLog(uint256 _amount);\n', '\n', '    /**\n', '    * @param _mintStart Datetime when minting according to schedule becomes available\n', '    * @param _mainWallet A wallet that will hold tokens\n', '    * @param _financeWallet A wallet that is required to unlock reserve tokens\n', '    * @param _owner Smart contract owner address\n', '    */\n', '    constructor (uint256 _mintStart, address _mainWallet, address _financeWallet, address _owner)\n', '        DetailedERC20("FlipNpik", "FNP", 18) public {\n', '\n', '        require(_mainWallet != address(0), "Main address is invalid.");\n', '        mainWallet = _mainWallet;       \n', '\n', '        require(_financeWallet != address(0), "Finance address is invalid.");\n', '        financeWallet = _financeWallet;        \n', '\n', '        require(_owner != address(0), "Owner address is invalid.");\n', '        owner = _owner;\n', '\n', '        _setStages(_mintStart);\n', '        _setReserveHolders();\n', '\n', '        // 425M FNP should be minted initially\n', '        _mint(uint256(425000000).mul(10 ** 18));\n', '    }       \n', '\n', '    /**\n', '    * @dev Mints reserved tokens\n', '    */\n', '    function mintReserve() public onlyOwner {\n', '        require(mintStart < _currentTime(), "Minting has not been allowed yet.");\n', '        require(totalMinted < mintSize, "No tokens are available for minting.");\n', '        \n', '        // Get stage based on current datetime\n', '        MintStage memory currentStage = _getCurrentStage();\n', '        // Get amount available for minting\n', '        uint256 mintAmount = currentStage.volume.sub(totalMinted);\n', '\n', '        if (mintAmount > 0 && _mint(mintAmount)) {\n', '            emit MintReserveLog(mintAmount);\n', '            totalMinted = totalMinted.add(mintAmount);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Unlocks reserve\n', '    */\n', '    function unlockReserve() public {\n', '        require(msg.sender == owner || msg.sender == financeWallet, "Operation is not allowed for the wallet.");\n', '        require(totalUnlocked < reserveSize, "Reserve has been unlocked.");        \n', '        \n', '        // Save sender&#39;s signature for reserve tokens unlock\n', '        reserveHolders[msg.sender] = true;\n', '\n', '        if (_isReserveUnlocked() && _mint(reserveSize)) {\n', '            emit UnlockReserveLog(reserveSize);\n', '            totalUnlocked = totalUnlocked.add(reserveSize);\n', '        }        \n', '    }\n', '\n', '    /**\n', '    * @dev Executes regular token approve operation and trigger receiver SC accordingly\n', '    * @param _to Address (SC) that should receive approval and be triggerred\n', '    * @param _value Amount of tokens for approve operation\n', '    * @param _data Additional arguments to be passed to the contract\n', '    */\n', '    function approveAndCall(address _to, uint256 _value, bytes _data) public returns(bool) {\n', '        require(super.approve(_to, _value), "Approve operation failed.");\n', '\n', '        // Check if destination address is SC\n', '        if (isContract(_to)) {\n', '            TokenReceiver receiver = TokenReceiver(_to);\n', '            return receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '\n', '        return true;\n', '    } \n', '\n', '    /**\n', '    * @dev Mints tokens to main wallet balance\n', '    * @param _amount Amount to be minted\n', '    */\n', '    function _mint(uint256 _amount) private returns(bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[mainWallet] = balances[mainWallet].add(_amount);\n', '\n', '        emit Transfer(address(0), mainWallet, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Configures minting stages\n', '    * @param _mintStart Datetime when minting according to schedule becomes available\n', '    */\n', '    function _setStages(uint256 _mintStart) private {\n', '        require(_mintStart >= _currentTime(), "Mint start date is invalid.");\n', '        mintStart = _mintStart;\n', '\n', '        stages.push(MintStage(_mintStart, uint256(200000000).mul(10 ** 18)));\n', '        stages.push(MintStage(_mintStart.add(365 days), uint256(325000000).mul(10 ** 18)));\n', '        stages.push(MintStage(_mintStart.add(2 * 365 days), uint256(450000000).mul(10 ** 18)));\n', '        stages.push(MintStage(_mintStart.add(3 * 365 days), uint256(575000000).mul(10 ** 18)));\n', '    }\n', '\n', '    /**\n', '    * @dev Configures unlock signature holders list\n', '    */\n', '    function _setReserveHolders() private {\n', '        reserveHolders[mainWallet] = false;\n', '        reserveHolders[financeWallet] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Finds current stage parameters according to the rules and current date and time\n', '    * @return Current stage parameters (stage start date and available volume of tokens)\n', '    */\n', '    function _getCurrentStage() private view returns (MintStage) {\n', '        uint256 index = 0;\n', '        uint256 time = _currentTime();        \n', '\n', '        MintStage memory result;\n', '\n', '        while (index < stages.length) {\n', '            MintStage memory activeStage = stages[index];\n', '\n', '            if (time >= activeStage.start) {\n', '                result = activeStage;\n', '            }\n', '\n', '            index++;             \n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks if an address is a SC\n', '    */\n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint256 size;\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(_addr) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks if reserve tokens have all required signatures for unlock operation\n', '    */\n', '    function _isReserveUnlocked() private view returns(bool) {\n', '        return reserveHolders[owner] == reserveHolders[financeWallet] && reserveHolders[owner];\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract TokenReceiver {\n', '    /**\n', '    * @dev Method to be triggerred during approveAndCall execution\n', '    * @param _sender A wallet that initiated the operation\n', '    * @param _value Amount of approved tokens\n', '    * @param _data Additional arguments\n', '    */\n', '    function tokenFallback(address _sender, uint256 _value, bytes _data) external returns (bool);\n', '}\n', '\n', '/**\n', '* @title Timestamped\n', '* @dev Timestamped contract has a separate method for receiving current timestamp.\n', '* This simplifies derived contracts testability.\n', '*/\n', 'contract Timestamped {\n', '    /**\n', '    * @dev Returns current timestamp.\n', '    */\n', '    function _currentTime() internal view returns(uint256) {\n', '        // solium-disable-next-line security/no-block-members\n', '        return block.timestamp;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this Ether.\n', ' * @notice Ether can still be sent to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', ' */\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  constructor() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by setting a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    owner.transfer(address(this).balance);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', '* @title FlipNpikToken\n', '* @dev The FlipNpikToken is a ERC20 token \n', '*/\n', 'contract FlipNpikToken is Timestamped, StandardToken, DetailedERC20, HasNoEther {\n', '    using SafeMath for uint256;\n', '\n', '    // A wallet that will hold tokens\n', '    address public mainWallet;\n', '    // A wallet that is required to unlock reserve tokens\n', '    address public financeWallet;\n', '\n', '    // Locked reserve tokens amount is 500M FNP\n', '    uint256 public reserveSize = uint256(500000000).mul(10 ** 18);\n', '    // List of signatures required to unlock reserve tokens\n', '    mapping (address => bool) public reserveHolders;\n', '    // Total amount of unlocked reserve tokens\n', '    uint256 public totalUnlocked = 0;\n', '\n', '    // Scheduled for minting reserve tokens amount is 575M FNP\n', '    uint256 public mintSize = uint256(575000000).mul(10 ** 18);\n', '    // Datetime when minting according to schedule becomes available\n', '    uint256 public mintStart;\n', '    // Total amount of minted reserve tokens\n', '    uint256 public totalMinted = 0;    \n', '\n', '    /**\n', '    * Describes minting stage structure fields\n', '    * @param start Minting stage start date\n', '    * @param volumt Total tokens available for the stage\n', '    */\n', '    struct MintStage {\n', '        uint256 start;\n', '        uint256 volume;       \n', '    }\n', '\n', '    // Array of stages\n', '    MintStage[] public stages;\n', '\n', '    /**\n', '    * @dev Event for reserve tokens minting operation logging\n', '    * @param _amount Amount minted\n', '    */\n', '    event MintReserveLog(uint256 _amount);\n', '\n', '    /**\n', '    * @dev Event for reserve tokens unlock operation logging\n', '    * @param _amount Amount unlocked\n', '    */\n', '    event UnlockReserveLog(uint256 _amount);\n', '\n', '    /**\n', '    * @param _mintStart Datetime when minting according to schedule becomes available\n', '    * @param _mainWallet A wallet that will hold tokens\n', '    * @param _financeWallet A wallet that is required to unlock reserve tokens\n', '    * @param _owner Smart contract owner address\n', '    */\n', '    constructor (uint256 _mintStart, address _mainWallet, address _financeWallet, address _owner)\n', '        DetailedERC20("FlipNpik", "FNP", 18) public {\n', '\n', '        require(_mainWallet != address(0), "Main address is invalid.");\n', '        mainWallet = _mainWallet;       \n', '\n', '        require(_financeWallet != address(0), "Finance address is invalid.");\n', '        financeWallet = _financeWallet;        \n', '\n', '        require(_owner != address(0), "Owner address is invalid.");\n', '        owner = _owner;\n', '\n', '        _setStages(_mintStart);\n', '        _setReserveHolders();\n', '\n', '        // 425M FNP should be minted initially\n', '        _mint(uint256(425000000).mul(10 ** 18));\n', '    }       \n', '\n', '    /**\n', '    * @dev Mints reserved tokens\n', '    */\n', '    function mintReserve() public onlyOwner {\n', '        require(mintStart < _currentTime(), "Minting has not been allowed yet.");\n', '        require(totalMinted < mintSize, "No tokens are available for minting.");\n', '        \n', '        // Get stage based on current datetime\n', '        MintStage memory currentStage = _getCurrentStage();\n', '        // Get amount available for minting\n', '        uint256 mintAmount = currentStage.volume.sub(totalMinted);\n', '\n', '        if (mintAmount > 0 && _mint(mintAmount)) {\n', '            emit MintReserveLog(mintAmount);\n', '            totalMinted = totalMinted.add(mintAmount);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Unlocks reserve\n', '    */\n', '    function unlockReserve() public {\n', '        require(msg.sender == owner || msg.sender == financeWallet, "Operation is not allowed for the wallet.");\n', '        require(totalUnlocked < reserveSize, "Reserve has been unlocked.");        \n', '        \n', "        // Save sender's signature for reserve tokens unlock\n", '        reserveHolders[msg.sender] = true;\n', '\n', '        if (_isReserveUnlocked() && _mint(reserveSize)) {\n', '            emit UnlockReserveLog(reserveSize);\n', '            totalUnlocked = totalUnlocked.add(reserveSize);\n', '        }        \n', '    }\n', '\n', '    /**\n', '    * @dev Executes regular token approve operation and trigger receiver SC accordingly\n', '    * @param _to Address (SC) that should receive approval and be triggerred\n', '    * @param _value Amount of tokens for approve operation\n', '    * @param _data Additional arguments to be passed to the contract\n', '    */\n', '    function approveAndCall(address _to, uint256 _value, bytes _data) public returns(bool) {\n', '        require(super.approve(_to, _value), "Approve operation failed.");\n', '\n', '        // Check if destination address is SC\n', '        if (isContract(_to)) {\n', '            TokenReceiver receiver = TokenReceiver(_to);\n', '            return receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '\n', '        return true;\n', '    } \n', '\n', '    /**\n', '    * @dev Mints tokens to main wallet balance\n', '    * @param _amount Amount to be minted\n', '    */\n', '    function _mint(uint256 _amount) private returns(bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[mainWallet] = balances[mainWallet].add(_amount);\n', '\n', '        emit Transfer(address(0), mainWallet, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Configures minting stages\n', '    * @param _mintStart Datetime when minting according to schedule becomes available\n', '    */\n', '    function _setStages(uint256 _mintStart) private {\n', '        require(_mintStart >= _currentTime(), "Mint start date is invalid.");\n', '        mintStart = _mintStart;\n', '\n', '        stages.push(MintStage(_mintStart, uint256(200000000).mul(10 ** 18)));\n', '        stages.push(MintStage(_mintStart.add(365 days), uint256(325000000).mul(10 ** 18)));\n', '        stages.push(MintStage(_mintStart.add(2 * 365 days), uint256(450000000).mul(10 ** 18)));\n', '        stages.push(MintStage(_mintStart.add(3 * 365 days), uint256(575000000).mul(10 ** 18)));\n', '    }\n', '\n', '    /**\n', '    * @dev Configures unlock signature holders list\n', '    */\n', '    function _setReserveHolders() private {\n', '        reserveHolders[mainWallet] = false;\n', '        reserveHolders[financeWallet] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Finds current stage parameters according to the rules and current date and time\n', '    * @return Current stage parameters (stage start date and available volume of tokens)\n', '    */\n', '    function _getCurrentStage() private view returns (MintStage) {\n', '        uint256 index = 0;\n', '        uint256 time = _currentTime();        \n', '\n', '        MintStage memory result;\n', '\n', '        while (index < stages.length) {\n', '            MintStage memory activeStage = stages[index];\n', '\n', '            if (time >= activeStage.start) {\n', '                result = activeStage;\n', '            }\n', '\n', '            index++;             \n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks if an address is a SC\n', '    */\n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint256 size;\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(_addr) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks if reserve tokens have all required signatures for unlock operation\n', '    */\n', '    function _isReserveUnlocked() private view returns(bool) {\n', '        return reserveHolders[owner] == reserveHolders[financeWallet] && reserveHolders[owner];\n', '    }\n', '}']
