['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20NonTransfer {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BergToken is ERC20NonTransfer {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  string public name = "Berg";\n', '  string public symbol = "BERG";\n', '  uint256 totalSupply_;\n', '  uint8 public constant decimals = 18;\n', '  enum States {\n', '    Sale,\n', '    Stop\n', '  }\n', '  States public state;        \n', '  address public initialHolder;\n', '  uint256 public price;\n', '  uint256 public min_amount;\n', '\n', '  constructor() public {\n', '    totalSupply_ = 0;\n', '    initialHolder = msg.sender;\n', '    state = States.Sale;\n', '    price = 2134107302920000;\n', '    min_amount = 213410730292000000;\n', '  }\n', '\n', '  modifier requireState(States _requiredState) {\n', '    require(state == _requiredState);\n', '    _;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == initialHolder);\n', '    _;\n', '  }\n', '  function requestPayout(uint256 _amount, address _address)\n', '  onlyOwner\n', '  public\n', '  {\n', '    _address.transfer(_amount);\n', '  }\n', '  modifier minAmount(uint256 amount) {\n', '    require(amount >= min_amount);\n', '    _;\n', '  }\n', '  function changePrice(uint256 _new_price)\n', '  onlyOwner\n', '  public \n', '  {\n', '    price = _new_price;\n', '  }\n', '  function changeMinAmount(uint256 _new_min_amount)\n', '  onlyOwner\n', '  public \n', '  {\n', '    min_amount = _new_min_amount;\n', '  }\n', '  function changeState(States _newState)\n', '  onlyOwner\n', '  public\n', '  {\n', '    state = _newState;\n', '  }\n', '  \n', '  function() payable\n', '  requireState(States.Sale)\n', '  minAmount(msg.value)\n', '  public\n', '  {\n', '    uint256 _coinIncrease = msg.value.mul((10 ** uint256(decimals))).div(price);\n', '    totalSupply_ = totalSupply_.add(_coinIncrease);\n', '    balances[msg.sender] = balances[msg.sender].add(_coinIncrease);\n', '    emit Transfer(initialHolder, msg.sender, _coinIncrease);\n', '  }\n', '  \n', '  function decreaseTokens(address _address, uint256 _amount) \n', '  onlyOwner\n', '  public {\n', '    balances[_address] = balances[_address].sub(_amount);\n', '    totalSupply_ = totalSupply_.sub(_amount);\n', '  }\n', '  \n', '  function decreaseTokensMulti(address[] _address, uint256[] _amount) \n', '  onlyOwner\n', '  public {\n', '      for(uint i = 0; i < _address.length; i++){\n', '        balances[_address[i]] = balances[_address[i]].sub(_amount[i]);\n', '        totalSupply_ = totalSupply_.sub(_amount[i]);\n', '      }\n', '  }\n', '  \n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function addTokens(address _address, uint256 _amount) \n', '  onlyOwner\n', '  public {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_address] = balances[_address].add(_amount);\n', '    emit Transfer(initialHolder, _address, _amount);\n', '  }\n', '  \n', '  function addTokensMulti(address[] _address, uint256[] _amount) \n', '  onlyOwner\n', '  public {\n', '      for(uint i = 0; i < _address.length; i++){\n', '        totalSupply_ = totalSupply_.add(_amount[i]);\n', '        balances[_address[i]] = balances[_address[i]].add(_amount[i]);\n', '        emit Transfer(initialHolder, _address[i], _amount[i]);\n', '      }\n', '  }\n', '\n', '}']