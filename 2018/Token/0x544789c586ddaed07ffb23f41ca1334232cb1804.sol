['pragma solidity ^0.4.25;\n', '/* TAXPHONE THE FIRST EDITION\n', 'THE NEW WORLD BLOCKCHAIN PROJECT\n', 'CREATED 2018-10-11 BY DAO DRIVER ETHEREUM (c)*/\n', 'contract OWN\n', '{\n', '    address public owner;\n', '    address internal newOwner;\n', '    constructor() \n', '    public\n', '    payable\n', '    {\n', '    owner = msg.sender;\n', '    }\n', '    modifier onlyOwner \n', '    {\n', '    require(owner == msg.sender);\n', '    _;\n', '    }\n', '    \n', '    function changeOwner(address _owner)\n', '    onlyOwner \n', '    public\n', '    {\n', '    require(_owner != 0);\n', '    newOwner = _owner;\n', '    }\n', '    function confirmOwner()\n', '    public \n', '    { \n', '    require(newOwner == msg.sender);\n', '    owner = newOwner;\n', '    delete newOwner;\n', '    }\n', '}\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '    return 0;\n', '    }\n', '    uint256 c = a*b;\n', '    assert(c/a == b);\n', '    return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a/b;\n', '    return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '    }\n', '}\n', 'contract ERC20\n', '{\n', '    string public constant name     = "TAXPHONE";\n', '    string public constant symbol   = "TAXPHONE";\n', '    uint8  public constant decimals =  6;\n', '    uint256 public totalSupply;\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    mapping (address => mapping(address => uint256)) public allowance;\n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    function balanceOf(address who)\n', '    public constant\n', '    returns (uint)\n', '    {\n', '    return balanceOf[who];\n', '    }\n', '    function approve(address _spender, uint _value)\n', '    public\n', '    {\n', '    allowance[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    }\n', '    function allowance(address _owner, address _spender) \n', '    public constant \n', '    returns (uint remaining) \n', '    {\n', '    return allowance[_owner][_spender];\n', '    }\n', '    modifier onlyPayloadSize(uint size) \n', '    {\n', '    require(msg.data.length >= size + 4);\n', '    _;\n', '    }\n', '}\n', '\n', 'contract A_TAXPHONE is OWN, ERC20\n', '{\n', '    using SafeMath for uint256;\n', '    uint256 internal Bank = 0;\n', '    uint256 public Price = 800000000;\n', '    uint256 internal constant Minn = 10000000000000000;\n', '    uint256 internal constant Maxx = 10000000000000000000;\n', '    address internal constant ethdriver = 0x0311dEdC05cfb1870f25de4CD80dCF9e6bF4F2e8;\n', '    address internal constant partone = 0xC92Af66B0d64B2E63796Fd325f2c7ff5c70aB8B7;\n', '    address internal constant parttwo = 0xbfd0Aea4b32030c985b467CF5bcc075364BD83e7;\n', '    \n', '    function() \n', '    payable \n', '    public\n', '        {\n', '        require(msg.value>0);\n', '        require(msg.value >= Minn);\n', '        require(msg.value <= Maxx);\n', '        mintTokens(msg.sender, msg.value);\n', '        }\n', '        \n', '    function mintTokens(address _who, uint256 _value) \n', '    internal \n', '        {\n', '        uint256 tokens = _value / (Price*100/80); //sale\n', '        require(tokens > 0); \n', '        require(balanceOf[_who] + tokens > balanceOf[_who]);\n', '        totalSupply += tokens; //mint\n', '        balanceOf[_who] += tokens; //sale\n', '        uint256 perc = _value.div(100);\n', '        Bank += perc.mul(85);  //reserve\n', '        Price = Bank.div(totalSupply); //pump\n', '        uint256 minus = _value % (Price*100/80); //change\n', '        emit Transfer(this, _who, tokens);\n', '        _value=0; tokens=0;\n', '        owner.transfer(perc.mul(5)); //owners\n', '        ethdriver.transfer(perc.mul(3)); //systems\n', '        partone.transfer(perc.mul(2));\n', '        parttwo.transfer(perc.mul(1));\n', '        if(minus > 0){\n', '        _who.transfer(minus); minus=0;}\n', '        }\n', '        \n', '    function transfer (address _to, uint _value) \n', '    public onlyPayloadSize(2 * 32) \n', '    returns (bool success)\n', '        {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        if(_to != address(this)) //standart\n', '        {\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        }\n', '        else //tokens to contract\n', '        {\n', '        balanceOf[msg.sender] -= _value;\n', '        uint256 change = _value.mul(Price);\n', '        require(address(this).balance >= change);\n', '\t\t\n', '\t\tif(totalSupply > _value)\n', '\t\t{\n', '        uint256 plus = (address(this).balance - Bank).div(totalSupply);    \n', '        Bank -= change; totalSupply -= _value;\n', '        Bank += (plus.mul(_value));  //reserve\n', '        Price = Bank.div(totalSupply); //pump\n', '        emit Transfer(msg.sender, _to, _value);\n', '        }\n', '        if(totalSupply == _value)\n', '        {\n', '        Price = address(this).balance/totalSupply;\n', '        Price = (Price.mul(101)).div(100); //pump\n', '        totalSupply=0; Bank=0;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        owner.transfer(address(this).balance - change);\n', '        }\n', '        msg.sender.transfer(change);\n', '        }\n', '        return true;\n', '        }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) \n', '    public onlyPayloadSize(3 * 32)\n', '    returns (bool success)\n', '        {\n', '        require(balanceOf[_from] >= _value);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        if(_to != address(this)) //standart\n', '        {\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        }\n', '        else //sale\n', '        {\n', '        balanceOf[_from] -= _value;\n', '        uint256 change = _value.mul(Price);\n', '        require(address(this).balance >= change);\n', '        if(totalSupply > _value)\n', '        {\n', '        uint256 plus = (address(this).balance - Bank).div(totalSupply);   \n', '        Bank -= change;\n', '        totalSupply -= _value;\n', '        Bank += (plus.mul(_value)); //reserve\n', '        Price = Bank.div(totalSupply); //pump\n', '        emit Transfer(_from, _to, _value);\n', '        allowance[_from][msg.sender] -= _value;\n', '        }\n', '        if(totalSupply == _value)\n', '        {\n', '        Price = address(this).balance/totalSupply;\n', '        Price = (Price.mul(101)).div(100); //pump\n', '        totalSupply=0; Bank=0; \n', '        emit Transfer(_from, _to, _value);\n', '        allowance[_from][msg.sender] -= _value;\n', '        owner.transfer(address(this).balance - change);\n', '        }\n', '        _from.transfer(change);\n', '        }\n', '        return true;\n', '        }\n', '}']
['pragma solidity ^0.4.25;\n', '/* TAXPHONE THE FIRST EDITION\n', 'THE NEW WORLD BLOCKCHAIN PROJECT\n', 'CREATED 2018-10-11 BY DAO DRIVER ETHEREUM (c)*/\n', 'contract OWN\n', '{\n', '    address public owner;\n', '    address internal newOwner;\n', '    constructor() \n', '    public\n', '    payable\n', '    {\n', '    owner = msg.sender;\n', '    }\n', '    modifier onlyOwner \n', '    {\n', '    require(owner == msg.sender);\n', '    _;\n', '    }\n', '    \n', '    function changeOwner(address _owner)\n', '    onlyOwner \n', '    public\n', '    {\n', '    require(_owner != 0);\n', '    newOwner = _owner;\n', '    }\n', '    function confirmOwner()\n', '    public \n', '    { \n', '    require(newOwner == msg.sender);\n', '    owner = newOwner;\n', '    delete newOwner;\n', '    }\n', '}\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '    return 0;\n', '    }\n', '    uint256 c = a*b;\n', '    assert(c/a == b);\n', '    return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a/b;\n', '    return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '    }\n', '}\n', 'contract ERC20\n', '{\n', '    string public constant name     = "TAXPHONE";\n', '    string public constant symbol   = "TAXPHONE";\n', '    uint8  public constant decimals =  6;\n', '    uint256 public totalSupply;\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    mapping (address => mapping(address => uint256)) public allowance;\n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    function balanceOf(address who)\n', '    public constant\n', '    returns (uint)\n', '    {\n', '    return balanceOf[who];\n', '    }\n', '    function approve(address _spender, uint _value)\n', '    public\n', '    {\n', '    allowance[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    }\n', '    function allowance(address _owner, address _spender) \n', '    public constant \n', '    returns (uint remaining) \n', '    {\n', '    return allowance[_owner][_spender];\n', '    }\n', '    modifier onlyPayloadSize(uint size) \n', '    {\n', '    require(msg.data.length >= size + 4);\n', '    _;\n', '    }\n', '}\n', '\n', 'contract A_TAXPHONE is OWN, ERC20\n', '{\n', '    using SafeMath for uint256;\n', '    uint256 internal Bank = 0;\n', '    uint256 public Price = 800000000;\n', '    uint256 internal constant Minn = 10000000000000000;\n', '    uint256 internal constant Maxx = 10000000000000000000;\n', '    address internal constant ethdriver = 0x0311dEdC05cfb1870f25de4CD80dCF9e6bF4F2e8;\n', '    address internal constant partone = 0xC92Af66B0d64B2E63796Fd325f2c7ff5c70aB8B7;\n', '    address internal constant parttwo = 0xbfd0Aea4b32030c985b467CF5bcc075364BD83e7;\n', '    \n', '    function() \n', '    payable \n', '    public\n', '        {\n', '        require(msg.value>0);\n', '        require(msg.value >= Minn);\n', '        require(msg.value <= Maxx);\n', '        mintTokens(msg.sender, msg.value);\n', '        }\n', '        \n', '    function mintTokens(address _who, uint256 _value) \n', '    internal \n', '        {\n', '        uint256 tokens = _value / (Price*100/80); //sale\n', '        require(tokens > 0); \n', '        require(balanceOf[_who] + tokens > balanceOf[_who]);\n', '        totalSupply += tokens; //mint\n', '        balanceOf[_who] += tokens; //sale\n', '        uint256 perc = _value.div(100);\n', '        Bank += perc.mul(85);  //reserve\n', '        Price = Bank.div(totalSupply); //pump\n', '        uint256 minus = _value % (Price*100/80); //change\n', '        emit Transfer(this, _who, tokens);\n', '        _value=0; tokens=0;\n', '        owner.transfer(perc.mul(5)); //owners\n', '        ethdriver.transfer(perc.mul(3)); //systems\n', '        partone.transfer(perc.mul(2));\n', '        parttwo.transfer(perc.mul(1));\n', '        if(minus > 0){\n', '        _who.transfer(minus); minus=0;}\n', '        }\n', '        \n', '    function transfer (address _to, uint _value) \n', '    public onlyPayloadSize(2 * 32) \n', '    returns (bool success)\n', '        {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        if(_to != address(this)) //standart\n', '        {\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        }\n', '        else //tokens to contract\n', '        {\n', '        balanceOf[msg.sender] -= _value;\n', '        uint256 change = _value.mul(Price);\n', '        require(address(this).balance >= change);\n', '\t\t\n', '\t\tif(totalSupply > _value)\n', '\t\t{\n', '        uint256 plus = (address(this).balance - Bank).div(totalSupply);    \n', '        Bank -= change; totalSupply -= _value;\n', '        Bank += (plus.mul(_value));  //reserve\n', '        Price = Bank.div(totalSupply); //pump\n', '        emit Transfer(msg.sender, _to, _value);\n', '        }\n', '        if(totalSupply == _value)\n', '        {\n', '        Price = address(this).balance/totalSupply;\n', '        Price = (Price.mul(101)).div(100); //pump\n', '        totalSupply=0; Bank=0;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        owner.transfer(address(this).balance - change);\n', '        }\n', '        msg.sender.transfer(change);\n', '        }\n', '        return true;\n', '        }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) \n', '    public onlyPayloadSize(3 * 32)\n', '    returns (bool success)\n', '        {\n', '        require(balanceOf[_from] >= _value);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        if(_to != address(this)) //standart\n', '        {\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        }\n', '        else //sale\n', '        {\n', '        balanceOf[_from] -= _value;\n', '        uint256 change = _value.mul(Price);\n', '        require(address(this).balance >= change);\n', '        if(totalSupply > _value)\n', '        {\n', '        uint256 plus = (address(this).balance - Bank).div(totalSupply);   \n', '        Bank -= change;\n', '        totalSupply -= _value;\n', '        Bank += (plus.mul(_value)); //reserve\n', '        Price = Bank.div(totalSupply); //pump\n', '        emit Transfer(_from, _to, _value);\n', '        allowance[_from][msg.sender] -= _value;\n', '        }\n', '        if(totalSupply == _value)\n', '        {\n', '        Price = address(this).balance/totalSupply;\n', '        Price = (Price.mul(101)).div(100); //pump\n', '        totalSupply=0; Bank=0; \n', '        emit Transfer(_from, _to, _value);\n', '        allowance[_from][msg.sender] -= _value;\n', '        owner.transfer(address(this).balance - change);\n', '        }\n', '        _from.transfer(change);\n', '        }\n', '        return true;\n', '        }\n', '}']
