['pragma solidity ^0.4.18;\n', '/*\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '    return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract StarUniteChain is SafeMath {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\taddress public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function StarUniteChain(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) public  {\n', '        balanceOf[msg.sender] = initialSupply;              \n', '        totalSupply = initialSupply;                        \n', '        name = tokenName;                                   \n', '        symbol = tokenSymbol;                               \n', '        decimals = decimalUnits;                    \n', '\t\towner = msg.sender;\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        if (_to == 0x0)  revert();                               \n', '\t\tif (_value <= 0)  revert(); \n', '        if (balanceOf[msg.sender] < _value)  revert();           \n', '        if (balanceOf[_to] + _value < balanceOf[_to])  revert(); \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                    \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                           \n', '        Transfer(msg.sender, _to, _value);                  \n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (_to == 0x0)  revert();                                \n', '\t\tif (_value <= 0)  revert(); \n', '        if (balanceOf[_from] < _value)  revert();                 \n', '        if (balanceOf[_to] + _value < balanceOf[_to])  revert();  \n', '        if (_value > allowance[_from][msg.sender])  revert();     \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '/*\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '    return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract StarUniteChain is SafeMath {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\taddress public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function StarUniteChain(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) public  {\n', '        balanceOf[msg.sender] = initialSupply;              \n', '        totalSupply = initialSupply;                        \n', '        name = tokenName;                                   \n', '        symbol = tokenSymbol;                               \n', '        decimals = decimalUnits;                    \n', '\t\towner = msg.sender;\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        if (_to == 0x0)  revert();                               \n', '\t\tif (_value <= 0)  revert(); \n', '        if (balanceOf[msg.sender] < _value)  revert();           \n', '        if (balanceOf[_to] + _value < balanceOf[_to])  revert(); \n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                    \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                           \n', '        Transfer(msg.sender, _to, _value);                  \n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (_to == 0x0)  revert();                                \n', '\t\tif (_value <= 0)  revert(); \n', '        if (balanceOf[_from] < _value)  revert();                 \n', '        if (balanceOf[_to] + _value < balanceOf[_to])  revert();  \n', '        if (_value > allowance[_from][msg.sender])  revert();     \n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '}']
