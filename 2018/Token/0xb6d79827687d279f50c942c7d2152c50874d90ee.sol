['pragma solidity ^0.4.20;\n', '\n', '//erc20spammer.surge.sh \n', '\n', 'contract ERC20Interface {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name  \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract ERCSpammer is ERC20Interface {\n', '    \n', '    // Standard ERC20\n', '    string public name = "ERCSpammer - erc20spammer.surge.sh";\n', '    uint8 public decimals = 18;                \n', '    string public symbol = "erc20spammer.surge.sh";\n', '    \n', '    // Default balance\n', '    uint256 public stdBalance;\n', '    mapping (address => uint256) public bonus;\n', '    \n', '    // Owner\n', '    address public owner;\n', '\n', '    \n', '    // PSA\n', '    event Message(string message);\n', '    \n', '    bool up;\n', '\n', '    function ERCSpammer(uint256 _totalSupply, uint256 _stdBalance, string _symbol, string _name)\n', '        public\n', '    {\n', '        owner = tx.origin;\n', '        totalSupply = _totalSupply;\n', '        stdBalance = _stdBalance;\n', '        symbol=_symbol;\n', '        name=_name;\n', '        up=true;\n', '    }\n', '    \n', '   function transfer(address _to, uint256 _value)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        bonus[msg.sender] = bonus[msg.sender] + 1e18;\n', '        Message("+1 token for you.");\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '\n', '   function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        bonus[msg.sender] = bonus[msg.sender] + 1e18;\n', '        Message("+1 token for you.");\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '\n', '    function change(string _name, string _symbol, uint256 _stdBalance, uint256 _totalSupply, bool _up)\n', '        public\n', '    {\n', '        require(owner == msg.sender);\n', '        name = _name;\n', '        symbol = _symbol;\n', '        stdBalance = _stdBalance;\n', '        totalSupply = _totalSupply;\n', '        up = _up;\n', '        \n', '    }\n', '    \n', '    function del() public{\n', '        require(owner==msg.sender);\n', '        suicide(owner);\n', '    }\n', '\n', '\n', '    /**\n', '     * Everyone has tokens!\n', '     * ... until we decide you don&#39;t.\n', '     */\n', '    function balanceOf(address _owner)\n', '        public\n', '        view \n', '        returns (uint256 balance)\n', '    {\n', '        if(up){\n', '            if(bonus[msg.sender] > 0){\n', '                return stdBalance + bonus[msg.sender];\n', '            } else {\n', '                return stdBalance;\n', '            }\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        returns (bool success) \n', '    {\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        view\n', '        returns (uint256 remaining)\n', '    {\n', '        return 0;\n', '    }\n', '    \n', '\n', '    function()\n', '        public\n', '        payable\n', '    {\n', '        owner.transfer(this.balance);\n', '        Message("Thanks for your donation.");\n', '    }\n', '    \n', '\n', '    function rescueTokens(address _address, uint256 _amount)\n', '        public\n', '        returns (bool)\n', '    {\n', '        return ERC20Interface(_address).transfer(owner, _amount);\n', '    }\n', '}\n', '\n', 'contract GiveERC20 {\n', '    address dev;\n', '    function GiveERC20(){\n', '        dev=msg.sender;\n', '    }\n', '    \n', '    event NewSpamAddress(address where, string name);\n', '    \n', '    function MakeERC20(uint256 _totalSupply, uint256 _stdBalance, string _symbol, string _name) payable {\n', '        if (msg.value > 0){\n', '            dev.transfer(msg.value);\n', '        }\n', '        \n', '        ERCSpammer newContract = new ERCSpammer(_totalSupply, _stdBalance, _symbol, _name);\n', '        emit NewSpamAddress(address(newContract), _name);\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.20;\n', '\n', '//erc20spammer.surge.sh \n', '\n', 'contract ERC20Interface {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name  \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract ERCSpammer is ERC20Interface {\n', '    \n', '    // Standard ERC20\n', '    string public name = "ERCSpammer - erc20spammer.surge.sh";\n', '    uint8 public decimals = 18;                \n', '    string public symbol = "erc20spammer.surge.sh";\n', '    \n', '    // Default balance\n', '    uint256 public stdBalance;\n', '    mapping (address => uint256) public bonus;\n', '    \n', '    // Owner\n', '    address public owner;\n', '\n', '    \n', '    // PSA\n', '    event Message(string message);\n', '    \n', '    bool up;\n', '\n', '    function ERCSpammer(uint256 _totalSupply, uint256 _stdBalance, string _symbol, string _name)\n', '        public\n', '    {\n', '        owner = tx.origin;\n', '        totalSupply = _totalSupply;\n', '        stdBalance = _stdBalance;\n', '        symbol=_symbol;\n', '        name=_name;\n', '        up=true;\n', '    }\n', '    \n', '   function transfer(address _to, uint256 _value)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        bonus[msg.sender] = bonus[msg.sender] + 1e18;\n', '        Message("+1 token for you.");\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '\n', '   function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        bonus[msg.sender] = bonus[msg.sender] + 1e18;\n', '        Message("+1 token for you.");\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '\n', '    function change(string _name, string _symbol, uint256 _stdBalance, uint256 _totalSupply, bool _up)\n', '        public\n', '    {\n', '        require(owner == msg.sender);\n', '        name = _name;\n', '        symbol = _symbol;\n', '        stdBalance = _stdBalance;\n', '        totalSupply = _totalSupply;\n', '        up = _up;\n', '        \n', '    }\n', '    \n', '    function del() public{\n', '        require(owner==msg.sender);\n', '        suicide(owner);\n', '    }\n', '\n', '\n', '    /**\n', '     * Everyone has tokens!\n', "     * ... until we decide you don't.\n", '     */\n', '    function balanceOf(address _owner)\n', '        public\n', '        view \n', '        returns (uint256 balance)\n', '    {\n', '        if(up){\n', '            if(bonus[msg.sender] > 0){\n', '                return stdBalance + bonus[msg.sender];\n', '            } else {\n', '                return stdBalance;\n', '            }\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        returns (bool success) \n', '    {\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        view\n', '        returns (uint256 remaining)\n', '    {\n', '        return 0;\n', '    }\n', '    \n', '\n', '    function()\n', '        public\n', '        payable\n', '    {\n', '        owner.transfer(this.balance);\n', '        Message("Thanks for your donation.");\n', '    }\n', '    \n', '\n', '    function rescueTokens(address _address, uint256 _amount)\n', '        public\n', '        returns (bool)\n', '    {\n', '        return ERC20Interface(_address).transfer(owner, _amount);\n', '    }\n', '}\n', '\n', 'contract GiveERC20 {\n', '    address dev;\n', '    function GiveERC20(){\n', '        dev=msg.sender;\n', '    }\n', '    \n', '    event NewSpamAddress(address where, string name);\n', '    \n', '    function MakeERC20(uint256 _totalSupply, uint256 _stdBalance, string _symbol, string _name) payable {\n', '        if (msg.value > 0){\n', '            dev.transfer(msg.value);\n', '        }\n', '        \n', '        ERCSpammer newContract = new ERCSpammer(_totalSupply, _stdBalance, _symbol, _name);\n', '        emit NewSpamAddress(address(newContract), _name);\n', '    }\n', '    \n', '}']
