['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = _a * _b;\n', '    require(c / _a == _b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    require(_b <= _a);\n', '    uint256 c = _a - _b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    uint256 c = _a + _b;\n', '    require(c >= _a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = 0x6C25AbD85AD13Bea51Ae93D04d89Af87475a961C;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address _who) external view returns (uint256);\n', '\n', '  function allowance(address _owner, address _spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) external returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private balances_;\n', '\n', '  mapping (address => mapping (address => uint256)) private allowed_;\n', '  \n', '  uint256 private totalSupply_;\n', '  uint256 public tokensSold;\n', '  \n', '  address public fundsWallet = 0x1defDc87eF32479928eeB933891907Fb56818821;\n', '  \n', '  constructor() public {\n', '      totalSupply_ = 10000000000e18;\n', '      balances_[address(this)] = 10000000000e18;\n', '      emit Transfer(address(0), address(this), totalSupply_);\n', '      tokensSold = 0;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances_[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed_[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances_[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances_[msg.sender] = balances_[msg.sender].sub(_value);\n', '    balances_[_to] = balances_[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  \n', '  /**\n', '   * Allows the owner to withdraw XPI tokens from the contract\n', '   * @param _value The total amount of tokens to be withdrawn\n', '   * @return true if function executes successfully, false otherwise\n', '   * */\n', '  function withdrawXPI(uint256 _value) public onlyOwner returns(bool){\n', '    require(_value <= balances_[address(this)]);\n', '    balances_[owner] = balances_[owner].add(_value);\n', '    balances_[address(this)] = balances_[address(this)].sub(_value);\n', '    emit Transfer(address(this), owner, _value);\n', '    return true;\n', '  }\n', '  \n', '  \n', '  /**\n', '   * Enables investors to purchase XPI tokens by simply sending ETH \n', '   * to the contract address.\n', '   * */\n', '  function() public payable {\n', '      buyTokens(msg.sender);\n', '  }\n', '  \n', '\n', '  function buyTokens(address _investor) public payable returns(bool) {\n', '    require(_investor != address(0));\n', '    require(msg.value >= 5e15 && msg.value <= 5e18);\n', '    require(tokensSold < 6000000000e18);\n', '    uint256 XPiToTransfer = msg.value.mul(20000000);\n', '    if(msg.value < 5e16) {\n', '        dispatchTokens(_investor, XPiToTransfer);\n', '        return true;\n', '    } else if(msg.value < 1e17) {\n', '        XPiToTransfer = XPiToTransfer.add((XPiToTransfer.mul(20)).div(100));\n', '        dispatchTokens(_investor, XPiToTransfer);\n', '        return true;\n', '    } else if(msg.value < 5e17) {\n', '        XPiToTransfer = XPiToTransfer.add((XPiToTransfer.mul(30)).div(100));\n', '        dispatchTokens(_investor, XPiToTransfer);\n', '        return true;\n', '    } else if(msg.value < 1e18) {\n', '        XPiToTransfer = XPiToTransfer.add((XPiToTransfer.mul(50)).div(100));\n', '        dispatchTokens(_investor, XPiToTransfer);\n', '        return true;\n', '    } else if(msg.value >= 1e18) {\n', '        XPiToTransfer = XPiToTransfer.mul(2);\n', '        dispatchTokens(_investor, XPiToTransfer);\n', '        return true;\n', '    }\n', '  }\n', '  \n', '  function dispatchTokens(address _investor, uint256 _XPiToTransfer) internal {\n', '      balances_[address(this)] = balances_[address(this)].sub(_XPiToTransfer);\n', '      balances_[_investor] = balances_[_investor].add(_XPiToTransfer);\n', '      emit Transfer(address(this), _investor, _XPiToTransfer);\n', '      tokensSold = tokensSold.add(_XPiToTransfer);\n', '      fundsWallet.transfer(msg.value);\n', '  }\n', '  \n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed_[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances_[_from]);\n', '    require(_value <= allowed_[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances_[_from] = balances_[_from].sub(_value);\n', '    balances_[_to] = balances_[_to].add(_value);\n', '    allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed_[msg.sender][_spender] = (\n', '      allowed_[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed_[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed_[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed_[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param _account The account whose tokens will be burnt.\n', '   * @param _amount The amount that will be burnt.\n', '   */\n', '  function _burn(address _account, uint256 _amount) internal {\n', '    require(_account != 0);\n', '    require(_amount <= balances_[_account]);\n', '\n', '    totalSupply_ = totalSupply_.sub(_amount);\n', '    balances_[_account] = balances_[_account].sub(_amount);\n', '    emit Transfer(_account, address(0), _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal _burn function.\n', '   * @param _account The account whose tokens will be burnt.\n', '   * @param _amount The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address _account, uint256 _amount) internal {\n', '    require(_amount <= allowed_[_account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    allowed_[_account][msg.sender] = allowed_[_account][msg.sender].sub(\n', '      _amount);\n', '    _burn(_account, _amount);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '\n', '  event TokensBurned(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public {\n', '    _burnFrom(_from, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides ERC20._burn in order for burn and burnFrom to emit\n', '   * an additional Burn event.\n', '   */\n', '  function _burn(address _who, uint256 _value) internal {\n', '    super._burn(_who, _value);\n', '    emit TokensBurned(_who, _value);\n', '  }\n', '}\n', '\n', '\n', 'contract XPiBlock is ERC20Burnable {\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    \n', '    constructor() public {\n', '        name = "XPiBlock";\n', '        symbol = "XPI";\n', '        decimals = 18;\n', '    }\n', '}']