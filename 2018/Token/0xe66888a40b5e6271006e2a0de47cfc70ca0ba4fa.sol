['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Airdrop Controller \n', ' * @dev Controlls ERC20 token airdrop \n', ' * @notice Token Contract Must send enough tokens to this contract to be distributed before aidrop\n', ' */\n', 'contract AirdropController is Ownable {\n', '    using SafeMath for uint;\n', '    \n', '    uint public totalClaimed;\n', '    \n', '    bool public airdropAllowed;\n', '    \n', '    ERC20 public token;\n', '    \n', '    mapping (address => bool) public tokenReceived;\n', '    \n', '    modifier isAllowed() {\n', '        require(airdropAllowed == true);\n', '        _;\n', '    }\n', '    \n', '    function AirdropController() public {\n', '        airdropAllowed = true;\n', '    }\n', '    \n', '    function airdrop(address[] _recipients, uint[] _amounts) public onlyOwner isAllowed {\n', '        for (uint i = 0; i < _recipients.length; i++) {\n', '            require(_recipients[i] != address(0));\n', '            require(tokenReceived[_recipients[i]] == false);\n', '            require(token.transfer(_recipients[i], _amounts[i]));\n', '            tokenReceived[_recipients[i]] = true;\n', '            totalClaimed = totalClaimed.add(_amounts[i]);\n', '        }\n', '    }\n', '    \n', '    function airdropManually(address _holder, uint _amount) public onlyOwner isAllowed {\n', '        require(_holder != address(0));\n', '        require(tokenReceived[_holder] == false);\n', '        if (!token.transfer(_holder, _amount)) revert();\n', '        tokenReceived[_holder] = true;\n', '        totalClaimed = totalClaimed.add(_amount);\n', '    }\n', '    \n', '    function setTokenAddress(address _token) public onlyOwner {\n', '        require(_token != address(0));\n', '        token = ERC20(_token);\n', '    }\n', '    \n', '    function remainingTokenAmount() public view returns (uint) {\n', '        return token.balanceOf(this);\n', '    }\n', '    \n', '    function setAirdropEnabled(bool _allowed) public onlyOwner {\n', '        airdropAllowed = _allowed;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Airdrop Controller \n', ' * @dev Controlls ERC20 token airdrop \n', ' * @notice Token Contract Must send enough tokens to this contract to be distributed before aidrop\n', ' */\n', 'contract AirdropController is Ownable {\n', '    using SafeMath for uint;\n', '    \n', '    uint public totalClaimed;\n', '    \n', '    bool public airdropAllowed;\n', '    \n', '    ERC20 public token;\n', '    \n', '    mapping (address => bool) public tokenReceived;\n', '    \n', '    modifier isAllowed() {\n', '        require(airdropAllowed == true);\n', '        _;\n', '    }\n', '    \n', '    function AirdropController() public {\n', '        airdropAllowed = true;\n', '    }\n', '    \n', '    function airdrop(address[] _recipients, uint[] _amounts) public onlyOwner isAllowed {\n', '        for (uint i = 0; i < _recipients.length; i++) {\n', '            require(_recipients[i] != address(0));\n', '            require(tokenReceived[_recipients[i]] == false);\n', '            require(token.transfer(_recipients[i], _amounts[i]));\n', '            tokenReceived[_recipients[i]] = true;\n', '            totalClaimed = totalClaimed.add(_amounts[i]);\n', '        }\n', '    }\n', '    \n', '    function airdropManually(address _holder, uint _amount) public onlyOwner isAllowed {\n', '        require(_holder != address(0));\n', '        require(tokenReceived[_holder] == false);\n', '        if (!token.transfer(_holder, _amount)) revert();\n', '        tokenReceived[_holder] = true;\n', '        totalClaimed = totalClaimed.add(_amount);\n', '    }\n', '    \n', '    function setTokenAddress(address _token) public onlyOwner {\n', '        require(_token != address(0));\n', '        token = ERC20(_token);\n', '    }\n', '    \n', '    function remainingTokenAmount() public view returns (uint) {\n', '        return token.balanceOf(this);\n', '    }\n', '    \n', '    function setAirdropEnabled(bool _allowed) public onlyOwner {\n', '        airdropAllowed = _allowed;\n', '    }\n', '}']
