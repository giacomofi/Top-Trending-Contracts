['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract IController is Pausable {\n', '    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\n', '\n', '    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\n', '    function updateController(bytes32 _id, address _controller) external;\n', '    function getContract(bytes32 _id) public view returns (address);\n', '}\n', '\n', 'contract IManager {\n', '    event SetController(address controller);\n', '    event ParameterUpdate(string param);\n', '\n', '    function setController(address _controller) external;\n', '}\n', '\n', 'contract Controller is Pausable, IController {\n', '    // Track information about a registered contract\n', '    struct ContractInfo {\n', '        address contractAddress;                 // Address of contract\n', '        bytes20 gitCommitHash;                   // SHA1 hash of head Git commit during registration of this contract\n', '    }\n', '\n', '    // Track contract ids and contract info\n', '    mapping (bytes32 => ContractInfo) private registry;\n', '\n', '    function Controller() public {\n', '        // Start system as paused\n', '        paused = true;\n', '    }\n', '\n', '    /*\n', '     * @dev Register contract id and mapped address\n', '     * @param _id Contract id (keccak256 hash of contract name)\n', '     * @param _contract Contract address\n', '     */\n', '    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external onlyOwner {\n', '        registry[_id].contractAddress = _contractAddress;\n', '        registry[_id].gitCommitHash = _gitCommitHash;\n', '\n', '        SetContractInfo(_id, _contractAddress, _gitCommitHash);\n', '    }\n', '\n', '    /*\n', "     * @dev Update contract's controller\n", '     * @param _id Contract id (keccak256 hash of contract name)\n', '     * @param _controller Controller address\n', '     */\n', '    function updateController(bytes32 _id, address _controller) external onlyOwner {\n', '        return IManager(registry[_id].contractAddress).setController(_controller);\n', '    }\n', '\n', '    /*\n', '     * @dev Return contract info for a given contract id\n', '     * @param _id Contract id (keccak256 hash of contract name)\n', '     */\n', '    function getContractInfo(bytes32 _id) public view returns (address, bytes20) {\n', '        return (registry[_id].contractAddress, registry[_id].gitCommitHash);\n', '    }\n', '\n', '    /*\n', '     * @dev Get contract address for an id\n', '     * @param _id Contract id\n', '     */\n', '    function getContract(bytes32 _id) public view returns (address) {\n', '        return registry[_id].contractAddress;\n', '    }\n', '}']