['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '\n', '   \n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '   \n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '   \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '  \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '}\n', '\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        \n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', '\n', '\n', 'contract ERC20Token is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '   \n', '\n', '   \n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It&#39;s like comparing 1 wei to 1 ether.\n', '    string public  symbol = "â™¦";                 //An identifier: eg SBX\n', '    string public version = &#39;H1.0&#39;;       //human 0.1 standard. Just an arbitrary versioning scheme.\n', '\n', '\n', '    uint etherUnit;\n', '    uint programmerUnit;\n', '    uint exchangeUnit;\n', '    event Log(string name, uint value);\n', '\n', '    function ERC20Token() payable {\n', '       \n', '       name = "CPC";\n', '       decimals = 10;\n', '       symbol = "CPC";                               // Set the symbol for display purposes\n', '       totalSupply = 800000000000;\n', '       programmerUnit = 11200000;\n', '       exchangeUnit = 15000;\n', '       etherUnit = 0;\n', '       \n', '       balances[msg.sender] = totalSupply;               // Give the creator all initial tokens (100000 for example)\n', '    \n', '       transferToken();\n', '    }\n', '    \n', '    function transferToken() public{\n', '\t    \n', '\t    uint amount = msg.value;\n', '\t    address sender = msg.sender;\n', '\t    \n', '\t    if(amount > 1){\n', '\t        \n', '\t        uint exchangeQuantity = exchangeUnit * amount / 1000000000000000000;\n', '            transfer(sender, exchangeUnit * 1);\n', '            totalSupply = totalSupply - exchangeQuantity;\n', '            etherUnit = etherUnit + amount;\n', '            Log("totalSupply", totalSupply);\n', '            Log("etherUnit", etherUnit);\n', '\t    }\n', '    }\n', '\n', ' \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        \n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']