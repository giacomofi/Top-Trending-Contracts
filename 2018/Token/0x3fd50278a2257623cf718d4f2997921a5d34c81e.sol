['pragma solidity ^0.4.16;\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner()  {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        sAssert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        sAssert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    function sAssert(bool assertion) internal pure {\n', '        if (!assertion) {\n', '            revert();\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '\n', '    function transfer(address toAcct, uint value) public returns (bool ok);\n', '    function transferFrom(address fromAcct, address toAcct, uint value) public returns (bool ok);\n', '    function approve(address spender, uint value) public returns (bool ok);\n', '    event Transfer(address indexed fromAcct, address indexed toAcct, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '    mapping(address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Burn(address indexed fromAcct, uint256 value);\n', '\n', '    function transfer(address _toAcct, uint _value) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_toAcct] = safeAdd(balances[_toAcct], _value);\n', '        Transfer(msg.sender, _toAcct, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _fromAcct, address _toAcct, uint _value) public returns (bool success) {\n', '        var _allowance = allowed[_fromAcct][msg.sender];\n', '        balances[_toAcct] = safeAdd(balances[_toAcct], _value);\n', '        balances[_fromAcct] = safeSub(balances[_fromAcct], _value);\n', '        allowed[_fromAcct][msg.sender] = safeSub(_allowance, _value);\n', '        Transfer(_fromAcct, _toAcct, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public  returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value); // Subtract from the sender\n', '        totalSupply = safeSub(totalSupply,_value); // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    \n', '\n', '}\n', '\n', 'contract CXCoin is Ownable, StandardToken {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;                  \n', '    uint public totalSupply;  \n', '\n', '\n', '    /// @notice Initializes the contract and allocates all initial tokens to the owner and agreement account\n', '    function CXCoin() public {\n', '    totalSupply = 100 * (10**6) * (10**6);\n', '        balances[msg.sender] = totalSupply;\n', '        name = "CX";\n', '        symbol = "CX";\n', '        decimals = 6;\n', '    }\n', '\n', '    function () payable public{\n', '    }\n', '\n', '    /// @notice To transfer token contract ownership\n', '    /// @param _newOwner The address of the new owner of this contract\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        balances[_newOwner] = safeAdd(balances[owner], balances[_newOwner]);\n', '        balances[owner] = 0;\n', '        Ownable.transferOwnership(_newOwner);\n', '    }\n', '\n', '    // Owner can transfer out any ERC20 tokens sent in by mistake\n', '    function transferAnyERC20Token(address tokenAddress, uint amount) public onlyOwner returns (bool success)\n', '    {\n', '        return ERC20(tokenAddress).transfer(owner, amount);\n', '    }\n', '    \n', '    function freezeAccount(address target, bool freeze) public onlyOwner  {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    function mintToken(address _toAcct, uint256 _value) public onlyOwner  {\n', '        balances[_toAcct] = safeAdd(balances[_toAcct], _value);\n', '        totalSupply = safeAdd(totalSupply, _value);\n', '        Transfer(0, this, _value);\n', '        Transfer(this, _toAcct, _value);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner()  {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeSub(uint a, uint b) pure internal returns (uint) {\n', '        sAssert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        sAssert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    function sAssert(bool assertion) internal pure {\n', '        if (!assertion) {\n', '            revert();\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '\n', '    function transfer(address toAcct, uint value) public returns (bool ok);\n', '    function transferFrom(address fromAcct, address toAcct, uint value) public returns (bool ok);\n', '    function approve(address spender, uint value) public returns (bool ok);\n', '    event Transfer(address indexed fromAcct, address indexed toAcct, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '    mapping(address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Burn(address indexed fromAcct, uint256 value);\n', '\n', '    function transfer(address _toAcct, uint _value) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_toAcct] = safeAdd(balances[_toAcct], _value);\n', '        Transfer(msg.sender, _toAcct, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _fromAcct, address _toAcct, uint _value) public returns (bool success) {\n', '        var _allowance = allowed[_fromAcct][msg.sender];\n', '        balances[_toAcct] = safeAdd(balances[_toAcct], _value);\n', '        balances[_fromAcct] = safeSub(balances[_fromAcct], _value);\n', '        allowed[_fromAcct][msg.sender] = safeSub(_allowance, _value);\n', '        Transfer(_fromAcct, _toAcct, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public  returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value); // Subtract from the sender\n', '        totalSupply = safeSub(totalSupply,_value); // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    \n', '\n', '}\n', '\n', 'contract CXCoin is Ownable, StandardToken {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;                  \n', '    uint public totalSupply;  \n', '\n', '\n', '    /// @notice Initializes the contract and allocates all initial tokens to the owner and agreement account\n', '    function CXCoin() public {\n', '    totalSupply = 100 * (10**6) * (10**6);\n', '        balances[msg.sender] = totalSupply;\n', '        name = "CX";\n', '        symbol = "CX";\n', '        decimals = 6;\n', '    }\n', '\n', '    function () payable public{\n', '    }\n', '\n', '    /// @notice To transfer token contract ownership\n', '    /// @param _newOwner The address of the new owner of this contract\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        balances[_newOwner] = safeAdd(balances[owner], balances[_newOwner]);\n', '        balances[owner] = 0;\n', '        Ownable.transferOwnership(_newOwner);\n', '    }\n', '\n', '    // Owner can transfer out any ERC20 tokens sent in by mistake\n', '    function transferAnyERC20Token(address tokenAddress, uint amount) public onlyOwner returns (bool success)\n', '    {\n', '        return ERC20(tokenAddress).transfer(owner, amount);\n', '    }\n', '    \n', '    function freezeAccount(address target, bool freeze) public onlyOwner  {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    function mintToken(address _toAcct, uint256 _value) public onlyOwner  {\n', '        balances[_toAcct] = safeAdd(balances[_toAcct], _value);\n', '        totalSupply = safeAdd(totalSupply, _value);\n', '        Transfer(0, this, _value);\n', '        Transfer(this, _toAcct, _value);\n', '    }\n', '\n', '}']
