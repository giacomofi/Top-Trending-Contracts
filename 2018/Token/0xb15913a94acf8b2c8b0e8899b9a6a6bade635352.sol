['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '\n', '    /// @dev `owner` is the only address that can call a function with this modifier\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n', '    ///  an unowned neutral vault, however that cannot be undone\n', '    function changeOwner(address _newOwner) onlyOwner public returns(bool){\n', '        require (_newOwner != address(0));\n', '        \n', '        newOwner = _newOwner;\n', '        return true;\n', '    }\n', '\n', '    function acceptOwnership() public returns(bool) {\n', '        require(newOwner != address(0));\n', '        require(msg.sender == newOwner);\n', '\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require (_value <= allowed[_from][msg.sender]);\n', '    \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract LifeBankerCoin is Owned, StandardToken{\n', '    string public constant name = "LifeBanker Coin";\n', '    string public constant symbol = "LBC";\n', '    uint8 public constant decimals = 18;\n', '\n', '    address public lockAddress;\n', '    address public teamAddress;\n', '\n', '    constructor() public {\n', '        totalSupply = 10000000000000000000000000000; //10 billion\n', '    }\n', '\n', '    /*\n', '     * @dev Initialize token attribution,only allowed to call once\n', '     * @param _team address : TeamTokensHolder contract deployment address\n', '     * @param _lock address : TokenLock contract deployment address\n', '     * @param _sare address : The token storage address of the sales part\n', '     */\n', '    function initialization(address _team, address _lock, address _sale) onlyOwner public returns(bool) {\n', '        require(lockAddress == 0 && teamAddress == 0);\n', '        require(_team != 0 && _lock != 0);\n', '        require(_sale != 0);\n', '        teamAddress = _team;\n', '        lockAddress = _lock;\n', '    \n', '        balances[teamAddress] = totalSupply.mul(225).div(1000); //22.5% \n', '        balances[lockAddress] = totalSupply.mul(500).div(1000); //50.0% \n', '        balances[_sale]       = totalSupply.mul(275).div(1000); //27.5%\n', '        return true;\n', '    }\n', '}\n', '\n', '/* @title This contract locks the tokens of the team and early investors.\n', ' * @notice The tokens are locked for a total of three years, unlocking one-sixth every six months.\n', ' * Unlockable Amount(%)\n', ' *    ^\n', ' * 100|---------------------------- * * *\n', ' *    |                           / :  \n', ' *    |----------------------- *    :  \n', ' *    |                      / :    :  \n', ' *    |------------------ *    :    :  \n', ' *    |                 / :    :    :  \n', ' *  50|------------- *    :    :    :  \n', ' *    |            / :    :    :    :  \n', ' *    |-------- *    :    :    :    :  \n', ' *    |       / :    :    :    :    :  \n', ' *    |--- *    :    :    :    :    :  \n', ' *    |  / :    :    :    :    :    :  \n', ' *    +----*----*----*----*----*----*-->\n', ' *    0   0.5   1   1.5   2   2.5   3   Time(year)\n', ' *\n', ' */\n', 'contract TeamTokensHolder is Owned{\n', '    using SafeMath for uint256;\n', '\n', '    LifeBankerCoin public LBC;\n', '    uint256 public startTime;\n', '    uint256 public duration = 6 * 30 * 24 * 3600; //six months\n', '\n', '    uint256 public total = 2250000000000000000000000000;  // 2.25 billion  22.5% \n', '    uint256 public amountPerRelease = total.div(6);       // 375 million\n', '    uint256 public collectedTokens;\n', '\n', '    address public TeamAddress = 0x7572b353B176Cc8ceF510616D0fDF8B4551Ba16e;\n', '\n', '    event TokensWithdrawn(address indexed _holder, uint256 _amount);\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\n', '\n', '\n', '    constructor(address _owner, address _lbc) public{\n', '        owner = _owner;\n', '        LBC = LifeBankerCoin(_lbc);\n', '        startTime = now;\n', '    }\n', '\n', '    /*\n', '     * @dev The Dev (Owner) will call this method to extract the tokens\n', '     */\n', '    function unLock() public onlyOwner returns(bool){\n', '        uint256 balance = LBC.balanceOf(address(this));\n', '\n', '        //  amountPerRelease * [(now - startTime) / duration]\n', '        uint256 canExtract = amountPerRelease.mul((getTime().sub(startTime)).div(duration));\n', '\n', '        uint256 amount = canExtract.sub(collectedTokens);\n', '\n', '        if (amount == 0){\n', '            revert();\n', '        } \n', '\n', '        if (amount > balance) {\n', '            amount = balance;\n', '        }\n', '\n', '        assert (LBC.transfer(TeamAddress, amount));\n', '        emit TokensWithdrawn(TeamAddress, amount);\n', '        collectedTokens = collectedTokens.add(amount);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /* Get the timestamp of the current block */\n', '    function getTime() view public returns(uint256){\n', '        return now;\n', '    }\n', '\n', '    /// Safe Function\n', '    /// @dev This method can be used by the controller to extract mistakenly\n', '    /// @param _token The address of the token contract that you want to recover\n', '    function claimTokens(address _token) public onlyOwner returns(bool){\n', '        require(_token != address(LBC));\n', '\n', '        ERC20 token = ERC20(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '        emit ClaimedTokens(_token, owner, balance);\n', '        return true;\n', '    }\n', '}\n', '\n', '/*\n', ' * @title This contract locks 50% of the total, 30% for mining, \n', ' *        10% for community promotion, and 10% for operation and maintenance.\n', ' * @notice The tokens are locked for a total of five years, \n', ' *        and the number of tokens that can be unlocked each year is halved. \n', ' *        Each year&#39;s tokens are divided into 12 months equals to unlock.\n', ' *        Percentage per year : 50%, 25%, 12.5%, 6.25% ,6.25% \n', ' * Unlockable Amount(%)\n', ' *    ^\n', ' * 100|_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n', ' *    |_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _     *   :\n', ' *    |_ _ _ _ _ _ _ _ _ _ _ _ _      *   :        : \n', ' *    |                         *:        :        : \n', ' *  75|_ _ _ _ _ _ _ _ _    *    :        :        : \n', ' *    |                *:        :        :        : \n', ' *    |             *   :        :        :        : \n', ' *    |          *      :        :        :        : \n', ' *  50|_ _ _ _ *        :        :        :        :   \n', ' *    |       *:        :        :        :        : \n', ' *    |      * :        :        :        :        : \n', ' *    |     *  :        :        :        :        : \n', ' *    |    *   :        :        :        :        : \n', ' *    |   *    :        :        :        :        : \n', ' *    |  *     :        :        :        :        : \n', ' *    | *      :        :        :        :        : \n', ' *    |*       :        :        :        :        : \n', ' *    +--------*--------*--------*--------*--------*---> Time(year)\n', ' *    0        1        2        3        4        5    \n', ' */\n', 'contract TokenLock is Owned{\n', '    using SafeMath for uint256;\n', '\n', '    LifeBankerCoin public LBC;\n', '\n', '    uint256 public totalSupply = 10000000000000000000000000000;\n', '    uint256 public totalLocked = totalSupply.div(2); // 50% of totalSupply\n', '    uint256 public collectedTokens;\n', '    uint256 public startTime;\n', '\n', '    address public POSAddress       = 0x23eB4df52175d89d8Df83F44992A5723bBbac00c; //30% DPOS\n', '    address public CommunityAddress = 0x9370973BEa603b86F07C2BFA8461f178081ce49F; //10% Community promotion\n', '    address public OperationAddress = 0x69Ce6E9E77869bFcf0Ec3c217b5e7E4905F4AFFf; //10% Operation and maintenance\n', '\n', '    uint256 _1stYear = totalLocked.mul(5000).div(10000);  // 50%\n', '    uint256 _2stYear = totalLocked.mul(2500).div(10000);  // 25%\n', '    uint256 _3stYear = totalLocked.mul(1250).div(10000);  // 12.5%\n', '    uint256 _4stYear = totalLocked.mul(625).div(10000);   // 6.25%\n', '    uint256 _5stYear = totalLocked.mul(625).div(10000);   // 6.25%\n', '\n', '    mapping (address => bool) public whiteList;\n', '    \n', '\n', '    event TokensWithdrawn(uint256 _amount);\n', '    event LogMangeWhile(address indexed _dest, bool _allow);\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\n', '\n', '    modifier onlyWhite() { \n', '        require (whiteList[msg.sender] == true); \n', '        _; \n', '    }\n', '\n', '    /// @param _lbc address : LifeBankerCoin contract deployment address\n', '    constructor(address _lbc) public{\n', '        startTime = now;\n', '        LBC = LifeBankerCoin(_lbc);\n', '        whiteList[msg.sender] = true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Add or remove call permissions for an address\n', '     * @param _dest    address  : The address of the permission to be modified\n', '     * @param _allow   bool     : True means increase, False means remove\n', '     * @return success bool     : Successful operation returns True\n', '     */\n', '    function mangeWhileList(address _dest, bool _allow) onlyOwner public returns(bool success){\n', '        require(_dest != address(0));\n', '\n', '        whiteList[_dest] = _allow;\n', '        emit LogMangeWhile(_dest, _allow);\n', '        return true;\n', '    }\n', '\n', '    /* @dev Called by &#39;owner&#39; to unlock the token.   */\n', '    function unlock() public onlyWhite returns(bool success){\n', '        uint256 canExtract = calculation();\n', '        uint256 _amount = canExtract.sub(collectedTokens); // canExtract - collectedTokens\n', '        distribute(_amount);\n', '        collectedTokens = collectedTokens.add(_amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * @dev Calculates the total number of tokens that can be unlocked based on time.\n', '     * @return uint256 : total number of unlockable\n', '     */\n', '    function calculation() view public returns(uint256){\n', '        uint256 _month = getMonths();\n', '        uint256 _amount;\n', '\n', '        if (_month == 0){\n', '            return 0;\n', '        }\n', '\n', '        if (_month <= 12 ){\n', '            _amount = _1stYear.mul(_month).div(12);\n', '\n', '        }else if(_month <= 24){\n', '            // _1stYear + [_2stYear * (moneth - 12) / 12]\n', '            _amount = _1stYear;\n', '            _amount = _amount.add(_2stYear.mul(_month.sub(12)).div(12));\n', '\n', '        }else if(_month <= 36){\n', '            // _1stYear + _2stYear + [_3stYear * (moneth - 24) / 12]\n', '            _amount = _1stYear + _2stYear;\n', '            _amount = _amount.add(_3stYear.mul(_month.sub(24)).div(12));\n', '\n', '        }else if(_month <= 48){\n', '            // _1stYear + _2stYear + _3stYear + [_4stYear * (moneth - 36) / 12]\n', '            _amount = _1stYear + _2stYear + _3stYear;\n', '            _amount = _amount.add(_4stYear.mul(_month.sub(36)).div(12));      \n', '\n', '        }else if(_month <= 60){\n', '            // _1stYear + _2stYear + _3stYear + _4stYear + [_5stYear * (moneth - 48) / 12]\n', '            _amount = _1stYear + _2stYear + _3stYear + _4stYear;\n', '            _amount = _amount.add(_5stYear.mul(_month.sub(48)).div(12)); \n', '\n', '        }else{\n', '            // more than 5years\n', '            _amount = LBC.balanceOf(this);\n', '        }\n', '        return _amount;\n', '    }\n', '\n', '    /* Get how many months have passed since the contract was deployed. */\n', '    function getMonths() view public returns(uint256){\n', '        uint256 countMonth = (getTime().sub(startTime)).div(30 * 24 * 3600);\n', '        return countMonth; // begin 0\n', '    }\n', '\n', '    /*\n', '     * @dev Distribute unlockable tokens to three addresses, proportion 3:1:1\n', '     * @param _amount uint256 : Number of tokens that can be unlocked\n', '     */\n', '    function distribute(uint256 _amount) internal returns(bool){\n', '        require (_amount != 0);\n', '\n', '        uint256 perAmount = _amount.div(5);\n', '        \n', '        assert (LBC.transfer(POSAddress, perAmount.mul(3)));\n', '        assert (LBC.transfer(CommunityAddress, perAmount.mul(1)));\n', '        assert (LBC.transfer(OperationAddress, perAmount.mul(1)));\n', '\n', '        emit TokensWithdrawn(_amount);\n', '        return true;\n', '    }\n', '\n', '    /* Get the timestamp of the current block */\n', '    function getTime() view public returns(uint256){\n', '        return now; //block.timestamp\n', '    }\n', '\n', '\n', '    /// Safe Function\n', '    /// @dev This method can be used by the controller to extract mistakenly\n', '    /// @param _token The address of the token contract that you want to recover\n', '    function claimTokens(address _token) public onlyOwner returns(bool){\n', '        require(_token != address(LBC));\n', '\n', '        ERC20 token = ERC20(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '        emit ClaimedTokens(_token, owner, balance);\n', '        return true;\n', '    }\n', '}']