['pragma solidity ^0.4.23;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', ' contract BurnableToken is StandardToken {\n', '\n', '   event Burn(address indexed burner, uint256 value);\n', '\n', '   function burn(uint256 _value) public {\n', '     _burn(msg.sender, _value);\n', '   }\n', '\n', '   function _burn(address _who, uint256 _value) internal {\n', '     require(_value <= balances[_who]);\n', '\n', '     balances[_who] = balances[_who].sub(_value);\n', '     totalSupply_ = totalSupply_.sub(_value);\n', '     emit Burn(_who, _value);\n', '     emit Transfer(_who, address(0), _value);\n', '   }\n', ' }\n', '\n', ' contract Ownable {\n', '   address public owner;\n', '\n', '   event OwnershipRenounced(address indexed previousOwner);\n', '   event OwnershipTransferred(\n', '     address indexed previousOwner,\n', '     address indexed newOwner\n', '   );\n', '\n', '   constructor() public {\n', '     owner = msg.sender;\n', '   }\n', '\n', '   modifier onlyOwner() {\n', '     require(msg.sender == owner);\n', '     _;\n', '   }\n', '\n', '   function renounceOwnership() public onlyOwner {\n', '     emit OwnershipRenounced(owner);\n', '     owner = address(0);\n', '   }\n', '\n', '   function transferOwnership(address _newOwner) public onlyOwner {\n', '     _transferOwnership(_newOwner);\n', '   }\n', '\n', '   function _transferOwnership(address _newOwner) internal {\n', '     require(_newOwner != address(0));\n', '     emit OwnershipTransferred(owner, _newOwner);\n', '     owner = _newOwner;\n', '   }\n', ' }\n', '\n', ' contract MintableToken is StandardToken, Ownable {\n', '   event Mint(address indexed to, uint256 amount);\n', '   event MintFinished();\n', '\n', '   bool public mintingFinished = false;\n', '\n', '\n', '   modifier canMint() {\n', '     require(!mintingFinished);\n', '     _;\n', '   }\n', '\n', '   modifier hasMintPermission() {\n', '     require(msg.sender == owner);\n', '     _;\n', '   }\n', '\n', '   function mint(\n', '     address _to,\n', '     uint256 _amount\n', '   )\n', '     hasMintPermission\n', '     canMint\n', '     public\n', '     returns (bool)\n', '   {\n', '     totalSupply_ = totalSupply_.add(_amount);\n', '     balances[_to] = balances[_to].add(_amount);\n', '     emit Mint(_to, _amount);\n', '     emit Transfer(address(0), _to, _amount);\n', '     return true;\n', '   }\n', '\n', '   function finishMinting() onlyOwner canMint public returns (bool) {\n', '     mintingFinished = true;\n', '     emit MintFinished();\n', '     return true;\n', '   }\n', ' }\n', '\n', '\n', 'contract BTX is BurnableToken, MintableToken {\n', '  string public name = "BTX";\n', '  string public symbol = "BTX";\n', '  uint public decimals = 6;\n', '  uint public INITIAL_SUPPLY = 20000000 * (10 ** decimals);\n', '\n', '  constructor() public {\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', ' contract BurnableToken is StandardToken {\n', '\n', '   event Burn(address indexed burner, uint256 value);\n', '\n', '   function burn(uint256 _value) public {\n', '     _burn(msg.sender, _value);\n', '   }\n', '\n', '   function _burn(address _who, uint256 _value) internal {\n', '     require(_value <= balances[_who]);\n', '\n', '     balances[_who] = balances[_who].sub(_value);\n', '     totalSupply_ = totalSupply_.sub(_value);\n', '     emit Burn(_who, _value);\n', '     emit Transfer(_who, address(0), _value);\n', '   }\n', ' }\n', '\n', ' contract Ownable {\n', '   address public owner;\n', '\n', '   event OwnershipRenounced(address indexed previousOwner);\n', '   event OwnershipTransferred(\n', '     address indexed previousOwner,\n', '     address indexed newOwner\n', '   );\n', '\n', '   constructor() public {\n', '     owner = msg.sender;\n', '   }\n', '\n', '   modifier onlyOwner() {\n', '     require(msg.sender == owner);\n', '     _;\n', '   }\n', '\n', '   function renounceOwnership() public onlyOwner {\n', '     emit OwnershipRenounced(owner);\n', '     owner = address(0);\n', '   }\n', '\n', '   function transferOwnership(address _newOwner) public onlyOwner {\n', '     _transferOwnership(_newOwner);\n', '   }\n', '\n', '   function _transferOwnership(address _newOwner) internal {\n', '     require(_newOwner != address(0));\n', '     emit OwnershipTransferred(owner, _newOwner);\n', '     owner = _newOwner;\n', '   }\n', ' }\n', '\n', ' contract MintableToken is StandardToken, Ownable {\n', '   event Mint(address indexed to, uint256 amount);\n', '   event MintFinished();\n', '\n', '   bool public mintingFinished = false;\n', '\n', '\n', '   modifier canMint() {\n', '     require(!mintingFinished);\n', '     _;\n', '   }\n', '\n', '   modifier hasMintPermission() {\n', '     require(msg.sender == owner);\n', '     _;\n', '   }\n', '\n', '   function mint(\n', '     address _to,\n', '     uint256 _amount\n', '   )\n', '     hasMintPermission\n', '     canMint\n', '     public\n', '     returns (bool)\n', '   {\n', '     totalSupply_ = totalSupply_.add(_amount);\n', '     balances[_to] = balances[_to].add(_amount);\n', '     emit Mint(_to, _amount);\n', '     emit Transfer(address(0), _to, _amount);\n', '     return true;\n', '   }\n', '\n', '   function finishMinting() onlyOwner canMint public returns (bool) {\n', '     mintingFinished = true;\n', '     emit MintFinished();\n', '     return true;\n', '   }\n', ' }\n', '\n', '\n', 'contract BTX is BurnableToken, MintableToken {\n', '  string public name = "BTX";\n', '  string public symbol = "BTX";\n', '  uint public decimals = 6;\n', '  uint public INITIAL_SUPPLY = 20000000 * (10 ** decimals);\n', '\n', '  constructor() public {\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '}']
