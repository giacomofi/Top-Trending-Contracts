['pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract KanadeCoin is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct VoteStruct {\n', '        uint128 number;\n', '        uint256 amount;\n', '        address from;\n', '        uint128 time;\n', '    }\n', '\n', '    struct QuestionStruct {\n', '        uint8   isStarted;\n', '        address recipient;\n', '        uint128 finish;\n', '        uint    under;\n', '        VoteStruct[] votes;\n', '    }\n', '\n', '    struct RandomBoxStruct {\n', '        uint8   isStarted;\n', '        address recipient;\n', '        uint64  volume;\n', '        uint256 amount;\n', '        uint128 finish;\n', '    }\n', '\n', '    struct RandomItemStruct {\n', '        mapping(bytes32 => uint256[]) values;\n', '    }\n', '\n', '\n', '    address public constant addrDevTeam      = 0x4d85FCF252c02FA849258f16c5464aF529ebFA5F; // 1%\n', '    address public constant addrLockUp       = 0x0101010101010101010101010101010101010101; // 9%\n', '    address public constant addrBounty       = 0x3CCDb82F43EEF681A39AE854Be37ad1C40446F0d; // 25%\n', '    address public constant addrDistribution = 0x9D6FB734a716306a9575E3ce971AB8839eDcEdF3; // 10%\n', '    address public constant addrAirDrop      = 0xD6A4ce07f18619Ec73f91CcDbefcCE53f048AE05; // 55%\n', '\n', '    uint public constant atto = 100000000;\n', '    uint public constant decimals = 8;\n', '\n', '    string public constant name   = "KanadeCoin";\n', '    string public constant symbol = "KNDC";\n', '\n', '    uint public contractStartTime;\n', '\n', '    uint64 public constant lockupSeconds = 60 * 60 * 24 * 365 * 3;\n', '\n', '    mapping(bytes32 => QuestionStruct) questions;\n', '    mapping(address => string) saveData;\n', '    mapping(bytes32 => RandomBoxStruct) randomBoxes;\n', '    mapping(address => RandomItemStruct) randomItems;\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    function initializeContract() onlyOwner public {\n', '        if (totalSupply_ != 0) return;\n', '\n', '        contractStartTime = now;\n', '\n', '        balances[addrDevTeam]      = 10000000000 * 0.01 * atto;\n', '        balances[addrLockUp]       = 10000000000 * 0.09 * atto;\n', '        balances[addrBounty]       = 10000000000 * 0.25 * atto;\n', '        balances[addrDistribution] = 10000000000 * 0.10 * atto;\n', '        balances[addrAirDrop]      = 10000000000 * 0.55 * atto;\n', '\n', '        Transfer(0x0, addrDevTeam, balances[addrDevTeam]);\n', '        Transfer(0x0, addrLockUp, balances[addrLockUp]);\n', '        Transfer(0x0, addrBounty, balances[addrBounty]);\n', '        Transfer(0x0, addrDistribution, balances[addrDistribution]);\n', '        Transfer(0x0, addrAirDrop, balances[addrAirDrop]);\n', '\n', '        totalSupply_ = 10000000000 * atto;\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////\n', '\n', '    function unLockup() onlyOwner public {\n', '        require(uint256(now).sub(lockupSeconds) > contractStartTime);\n', '        uint _amount = balances[addrLockUp];\n', '        balances[addrLockUp] = balances[addrLockUp].sub(_amount);\n', '        balances[addrDevTeam] = balances[addrDevTeam].add(_amount);\n', '        Transfer(addrLockUp, addrDevTeam, _amount);\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////\n', '\n', '    function createQuestion(string _id_max32, address _recipient, uint128 _finish, uint _under) public {\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        require(questions[_idByte].isStarted == 0);\n', '\n', '        transfer(addrBounty, 5000 * atto);\n', '\n', '        questions[_idByte].isStarted = 1;\n', '        questions[_idByte].recipient = _recipient;\n', '        questions[_idByte].finish = _finish;\n', '        questions[_idByte].under = _under;\n', '    }\n', '\n', '    function getQuestion(string _id_max32) constant public returns (uint[4]) {\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        uint[4] values;\n', '        values[0] = questions[_idByte].isStarted;\n', '        values[1] = uint(questions[_idByte].recipient);\n', '        values[2] = questions[_idByte].finish;\n', '        values[3] = questions[_idByte].under;\n', '        return values;\n', '    }\n', '\n', '    function vote(string _id_max32, uint128 _number, uint _amount) public {\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        require(\n', '            questions[_idByte].isStarted == 1 &&\n', '            questions[_idByte].under <= _amount &&\n', '            questions[_idByte].finish >= uint128(now));\n', '\n', '        if (_amount > 0) {\n', '            transfer(questions[_idByte].recipient, _amount);\n', '        }\n', '\n', '        questions[_idByte].votes.push(VoteStruct(_number, _amount, msg.sender, uint128(now)));\n', '    }\n', '\n', '    function getQuestionVotesAllCount(string _id_max32) constant public returns (uint) {\n', '        return questions[keccak256(_id_max32)].votes.length;\n', '    }\n', '\n', '    function getQuestionVote(string _id_max32, uint _position) constant public returns (uint[4]) {\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        uint[4] values;\n', '        values[0] = questions[_idByte].votes[_position].number;\n', '        values[1] = questions[_idByte].votes[_position].amount;\n', '        values[2] = uint(questions[_idByte].votes[_position].from);\n', '        values[3] = questions[_idByte].votes[_position].time;\n', '        return values;\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////\n', '\n', '    function putSaveData(string _text) public {\n', '        saveData[msg.sender] = _text;\n', '    }\n', '\n', '    function getSaveData(address _address) constant public returns (string) {\n', '        return saveData[_address];\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////\n', '\n', '    function createRandomBox(string _id_max32, address _recipient, uint64 _volume, uint256 _amount, uint128 _finish) public {\n', '        require(_volume > 0);\n', '\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        require(randomBoxes[_idByte].isStarted == 0);\n', '\n', '        transfer(addrBounty, 5000 * atto);\n', '\n', '        randomBoxes[_idByte].isStarted = 1;\n', '        randomBoxes[_idByte].recipient = _recipient;\n', '        randomBoxes[_idByte].volume = _volume;\n', '        randomBoxes[_idByte].amount = _amount;\n', '        randomBoxes[_idByte].finish = _finish;\n', '    }\n', '\n', '    function getRandomBox(string _id_max32) constant public returns (uint[5]) {\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        uint[5] values;\n', '        values[0] = randomBoxes[_idByte].isStarted;\n', '        values[1] = uint(randomBoxes[_idByte].recipient);\n', '        values[2] = randomBoxes[_idByte].volume;\n', '        values[3] = randomBoxes[_idByte].amount;\n', '        values[4] = randomBoxes[_idByte].finish;\n', '        return values;\n', '    }\n', '\n', '    function drawRandomItem(string _id_max32, uint _count) public {\n', '        require(_count > 0 && _count <= 1000);\n', '\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        uint _totalAmount = randomBoxes[_idByte].amount.mul(_count);\n', '        require(\n', '            randomBoxes[_idByte].isStarted == 1 &&\n', '            randomBoxes[_idByte].finish >= uint128(now));\n', '\n', '        transfer(randomBoxes[_idByte].recipient, _totalAmount);\n', '\n', '        for (uint i = 0; i < _count; i++) {\n', '            uint randomVal = uint(\n', '                keccak256(blockhash(block.number-1), randomItems[msg.sender].values[_idByte].length))\n', '                % randomBoxes[_idByte].volume;\n', '            randomItems[msg.sender].values[_idByte].push(randomVal);\n', '        }\n', '    }\n', '\n', '    function getRandomItems(address _addrss, string _id_max32) constant public returns (uint[]) {\n', '        return randomItems[_addrss].values[keccak256(_id_max32)];\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////\n', '\n', '    function airDrop(address[] _recipients, uint[] _values) onlyOwner public returns (bool) {\n', '        return distribute(addrAirDrop, _recipients, _values);\n', '    }\n', '\n', '    function rain(address[] _recipients, uint[] _values) public returns (bool) {\n', '        return distribute(msg.sender, _recipients, _values);\n', '    }\n', '\n', '    function distribute(address _from, address[] _recipients, uint[] _values) internal returns (bool) {\n', '        require(_recipients.length > 0 && _recipients.length == _values.length);\n', '\n', '        uint total = 0;\n', '        for(uint i = 0; i < _values.length; i++) {\n', '            total = total.add(_values[i]);\n', '        }\n', '        require(total <= balances[_from]);\n', '\n', '        for(uint j = 0; j < _recipients.length; j++) {\n', '            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\n', '            Transfer(_from, _recipients[j], _values[j]);\n', '        }\n', '\n', '        balances[_from] = balances[_from].sub(total);\n', '\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract KanadeCoin is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct VoteStruct {\n', '        uint128 number;\n', '        uint256 amount;\n', '        address from;\n', '        uint128 time;\n', '    }\n', '\n', '    struct QuestionStruct {\n', '        uint8   isStarted;\n', '        address recipient;\n', '        uint128 finish;\n', '        uint    under;\n', '        VoteStruct[] votes;\n', '    }\n', '\n', '    struct RandomBoxStruct {\n', '        uint8   isStarted;\n', '        address recipient;\n', '        uint64  volume;\n', '        uint256 amount;\n', '        uint128 finish;\n', '    }\n', '\n', '    struct RandomItemStruct {\n', '        mapping(bytes32 => uint256[]) values;\n', '    }\n', '\n', '\n', '    address public constant addrDevTeam      = 0x4d85FCF252c02FA849258f16c5464aF529ebFA5F; // 1%\n', '    address public constant addrLockUp       = 0x0101010101010101010101010101010101010101; // 9%\n', '    address public constant addrBounty       = 0x3CCDb82F43EEF681A39AE854Be37ad1C40446F0d; // 25%\n', '    address public constant addrDistribution = 0x9D6FB734a716306a9575E3ce971AB8839eDcEdF3; // 10%\n', '    address public constant addrAirDrop      = 0xD6A4ce07f18619Ec73f91CcDbefcCE53f048AE05; // 55%\n', '\n', '    uint public constant atto = 100000000;\n', '    uint public constant decimals = 8;\n', '\n', '    string public constant name   = "KanadeCoin";\n', '    string public constant symbol = "KNDC";\n', '\n', '    uint public contractStartTime;\n', '\n', '    uint64 public constant lockupSeconds = 60 * 60 * 24 * 365 * 3;\n', '\n', '    mapping(bytes32 => QuestionStruct) questions;\n', '    mapping(address => string) saveData;\n', '    mapping(bytes32 => RandomBoxStruct) randomBoxes;\n', '    mapping(address => RandomItemStruct) randomItems;\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    function initializeContract() onlyOwner public {\n', '        if (totalSupply_ != 0) return;\n', '\n', '        contractStartTime = now;\n', '\n', '        balances[addrDevTeam]      = 10000000000 * 0.01 * atto;\n', '        balances[addrLockUp]       = 10000000000 * 0.09 * atto;\n', '        balances[addrBounty]       = 10000000000 * 0.25 * atto;\n', '        balances[addrDistribution] = 10000000000 * 0.10 * atto;\n', '        balances[addrAirDrop]      = 10000000000 * 0.55 * atto;\n', '\n', '        Transfer(0x0, addrDevTeam, balances[addrDevTeam]);\n', '        Transfer(0x0, addrLockUp, balances[addrLockUp]);\n', '        Transfer(0x0, addrBounty, balances[addrBounty]);\n', '        Transfer(0x0, addrDistribution, balances[addrDistribution]);\n', '        Transfer(0x0, addrAirDrop, balances[addrAirDrop]);\n', '\n', '        totalSupply_ = 10000000000 * atto;\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////\n', '\n', '    function unLockup() onlyOwner public {\n', '        require(uint256(now).sub(lockupSeconds) > contractStartTime);\n', '        uint _amount = balances[addrLockUp];\n', '        balances[addrLockUp] = balances[addrLockUp].sub(_amount);\n', '        balances[addrDevTeam] = balances[addrDevTeam].add(_amount);\n', '        Transfer(addrLockUp, addrDevTeam, _amount);\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////\n', '\n', '    function createQuestion(string _id_max32, address _recipient, uint128 _finish, uint _under) public {\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        require(questions[_idByte].isStarted == 0);\n', '\n', '        transfer(addrBounty, 5000 * atto);\n', '\n', '        questions[_idByte].isStarted = 1;\n', '        questions[_idByte].recipient = _recipient;\n', '        questions[_idByte].finish = _finish;\n', '        questions[_idByte].under = _under;\n', '    }\n', '\n', '    function getQuestion(string _id_max32) constant public returns (uint[4]) {\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        uint[4] values;\n', '        values[0] = questions[_idByte].isStarted;\n', '        values[1] = uint(questions[_idByte].recipient);\n', '        values[2] = questions[_idByte].finish;\n', '        values[3] = questions[_idByte].under;\n', '        return values;\n', '    }\n', '\n', '    function vote(string _id_max32, uint128 _number, uint _amount) public {\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        require(\n', '            questions[_idByte].isStarted == 1 &&\n', '            questions[_idByte].under <= _amount &&\n', '            questions[_idByte].finish >= uint128(now));\n', '\n', '        if (_amount > 0) {\n', '            transfer(questions[_idByte].recipient, _amount);\n', '        }\n', '\n', '        questions[_idByte].votes.push(VoteStruct(_number, _amount, msg.sender, uint128(now)));\n', '    }\n', '\n', '    function getQuestionVotesAllCount(string _id_max32) constant public returns (uint) {\n', '        return questions[keccak256(_id_max32)].votes.length;\n', '    }\n', '\n', '    function getQuestionVote(string _id_max32, uint _position) constant public returns (uint[4]) {\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        uint[4] values;\n', '        values[0] = questions[_idByte].votes[_position].number;\n', '        values[1] = questions[_idByte].votes[_position].amount;\n', '        values[2] = uint(questions[_idByte].votes[_position].from);\n', '        values[3] = questions[_idByte].votes[_position].time;\n', '        return values;\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////\n', '\n', '    function putSaveData(string _text) public {\n', '        saveData[msg.sender] = _text;\n', '    }\n', '\n', '    function getSaveData(address _address) constant public returns (string) {\n', '        return saveData[_address];\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////\n', '\n', '    function createRandomBox(string _id_max32, address _recipient, uint64 _volume, uint256 _amount, uint128 _finish) public {\n', '        require(_volume > 0);\n', '\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        require(randomBoxes[_idByte].isStarted == 0);\n', '\n', '        transfer(addrBounty, 5000 * atto);\n', '\n', '        randomBoxes[_idByte].isStarted = 1;\n', '        randomBoxes[_idByte].recipient = _recipient;\n', '        randomBoxes[_idByte].volume = _volume;\n', '        randomBoxes[_idByte].amount = _amount;\n', '        randomBoxes[_idByte].finish = _finish;\n', '    }\n', '\n', '    function getRandomBox(string _id_max32) constant public returns (uint[5]) {\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        uint[5] values;\n', '        values[0] = randomBoxes[_idByte].isStarted;\n', '        values[1] = uint(randomBoxes[_idByte].recipient);\n', '        values[2] = randomBoxes[_idByte].volume;\n', '        values[3] = randomBoxes[_idByte].amount;\n', '        values[4] = randomBoxes[_idByte].finish;\n', '        return values;\n', '    }\n', '\n', '    function drawRandomItem(string _id_max32, uint _count) public {\n', '        require(_count > 0 && _count <= 1000);\n', '\n', '        bytes32 _idByte = keccak256(_id_max32);\n', '        uint _totalAmount = randomBoxes[_idByte].amount.mul(_count);\n', '        require(\n', '            randomBoxes[_idByte].isStarted == 1 &&\n', '            randomBoxes[_idByte].finish >= uint128(now));\n', '\n', '        transfer(randomBoxes[_idByte].recipient, _totalAmount);\n', '\n', '        for (uint i = 0; i < _count; i++) {\n', '            uint randomVal = uint(\n', '                keccak256(blockhash(block.number-1), randomItems[msg.sender].values[_idByte].length))\n', '                % randomBoxes[_idByte].volume;\n', '            randomItems[msg.sender].values[_idByte].push(randomVal);\n', '        }\n', '    }\n', '\n', '    function getRandomItems(address _addrss, string _id_max32) constant public returns (uint[]) {\n', '        return randomItems[_addrss].values[keccak256(_id_max32)];\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////\n', '\n', '    function airDrop(address[] _recipients, uint[] _values) onlyOwner public returns (bool) {\n', '        return distribute(addrAirDrop, _recipients, _values);\n', '    }\n', '\n', '    function rain(address[] _recipients, uint[] _values) public returns (bool) {\n', '        return distribute(msg.sender, _recipients, _values);\n', '    }\n', '\n', '    function distribute(address _from, address[] _recipients, uint[] _values) internal returns (bool) {\n', '        require(_recipients.length > 0 && _recipients.length == _values.length);\n', '\n', '        uint total = 0;\n', '        for(uint i = 0; i < _values.length; i++) {\n', '            total = total.add(_values[i]);\n', '        }\n', '        require(total <= balances[_from]);\n', '\n', '        for(uint j = 0; j < _recipients.length; j++) {\n', '            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\n', '            Transfer(_from, _recipients[j], _values[j]);\n', '        }\n', '\n', '        balances[_from] = balances[_from].sub(total);\n', '\n', '        return true;\n', '    }\n', '\n', '}']
