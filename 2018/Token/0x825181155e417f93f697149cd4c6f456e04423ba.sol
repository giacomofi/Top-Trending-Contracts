['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract YUPTimelock is Ownable {\n', '    using SafeERC20 for StandardToken;\n', '    using SafeMath for uint256;\n', '    \n', '    /** Contract events **/\n', '    event IsLocked(uint256 _time);\n', '    event IsClaiming(uint256 _time);\n', '    event IsFinalized(uint256 _time);\n', '    event Claimed(address indexed _to, uint256 _value);\n', '    event ClaimedFutureUse(address indexed _to, uint256 _value);\n', '    \n', '    /** State variables **/\n', '    enum ContractState { Locked, Claiming, Finalized }\n', '    ContractState public state;\n', '    uint256 constant D160 = 0x0010000000000000000000000000000000000000000;\n', '    StandardToken public token;\n', '    mapping(address => uint256) public allocations;\n', '    mapping(address => bool) public claimed;                //indicates whether beneficiary has claimed tokens\n', '    uint256 public expectedAmount = 193991920 * (10**18);   //should hold 193,991,920 x 10^18 (43.59% of total supply)\n', '    uint256 public amountLocked;\n', '    uint256 public amountClaimed;\n', '    uint256 public releaseTime;     //investor claim starting time\n', '    uint256 public claimEndTime;    //investor claim expiration time\n', '    uint256 public fUseAmount;  //amount of tokens for future use\n', '    address fUseBeneficiary;    //address of future use tokens beneficiary\n', '    uint256 fUseReleaseTime;    //release time of locked future use tokens\n', '    \n', '    /** Modifiers **/\n', '    modifier isLocked() {\n', '        require(state == ContractState.Locked);\n', '        _;\n', '    }\n', '    \n', '    modifier isClaiming() {\n', '        require(state == ContractState.Claiming);\n', '        _;\n', '    }\n', '    \n', '    modifier isFinalized() {\n', '        require(state == ContractState.Finalized);\n', '        _;\n', '    }\n', '    \n', '    /** Constructor **/\n', '    function YUPTimelock(\n', '        uint256 _releaseTime,\n', '        uint256 _amountLocked,\n', '        address _fUseBeneficiary,\n', '        uint256 _fUseReleaseTime\n', '    ) public {\n', '        require(_releaseTime > now);\n', '        \n', '        releaseTime = _releaseTime;\n', '        amountLocked = _amountLocked;\n', '        fUseAmount = 84550000 * 10**18;     //84,550,000 tokens (with 18 decimals)\n', '        claimEndTime = now + 60*60*24*275;  //9 months (in seconds) from time of lock\n', '        fUseBeneficiary = _fUseBeneficiary;\n', '        fUseReleaseTime = _fUseReleaseTime;\n', '        \n', '        if (amountLocked != expectedAmount)\n', '            revert();\n', '    }\n', '    \n', '    /** Allows the owner to set the token contract address **/\n', '    function setTokenAddr(StandardToken tokAddr) public onlyOwner {\n', '        require(token == address(0x0)); //initialize only once\n', '        \n', '        token = tokAddr;\n', '        \n', '        state = ContractState.Locked; //switch contract to locked state\n', '        IsLocked(now);\n', '    }\n', '    \n', '    /** Retrieves individual investor token balance **/\n', '    function getUserBalance(address _owner) public view returns (uint256) {\n', '        if (claimed[_owner] == false && allocations[_owner] > 0)\n', '            return allocations[_owner];\n', '        else\n', '            return 0;\n', '    }\n', '    \n', '    /** Allows owner to initiate the claiming phase **/\n', '    function startClaim() public isLocked onlyOwner {\n', '        state = ContractState.Claiming;\n', '        IsClaiming(now);\n', '    }\n', '    \n', '    /** Allows owner to finalize contract (only after investor claimEnd time) **/\n', '    function finalize() public isClaiming onlyOwner {\n', '        require(now >= claimEndTime);\n', '        \n', '        state = ContractState.Finalized;\n', '        IsFinalized(now);\n', '    }\n', '    \n', '    /** Allows the owner to claim all unclaimed investor tokens **/\n', '    function ownerClaim() public isFinalized onlyOwner {\n', '        uint256 remaining = token.balanceOf(this);\n', '        amountClaimed = amountClaimed.add(remaining);\n', '        amountLocked = amountLocked.sub(remaining);\n', '        \n', '        token.safeTransfer(owner, remaining);\n', '        Claimed(owner, remaining);\n', '    }\n', '    \n', '    /** Facilitates the assignment of investor addresses and amounts (only before claiming phase starts) **/\n', '    function loadBalances(uint256[] data) public isLocked onlyOwner {\n', '        require(token != address(0x0));  //Fail if token is not set\n', '        \n', '        for (uint256 i = 0; i < data.length; i++) {\n', '            address addr = address(data[i] & (D160 - 1));\n', '            uint256 amount = data[i] / D160;\n', '            \n', '            allocations[addr] = amount;\n', '            claimed[addr] = false;\n', '        }\n', '    }\n', '    \n', '    /** Allows owner to claim future use tokens in favor of fUseBeneficiary account **/\n', '    function claimFutureUse() public onlyOwner {\n', '        require(now >= fUseReleaseTime);\n', '        \n', '        amountClaimed = amountClaimed.add(fUseAmount);\n', '        amountLocked = amountLocked.sub(fUseAmount);\n', '        \n', '        token.safeTransfer(fUseBeneficiary, fUseAmount);\n', '        ClaimedFutureUse(fUseBeneficiary, fUseAmount);\n', '    }\n', '    \n', '    /** Allows presale investors to claim tokens **/\n', '    function claim() external isClaiming {\n', '        require(token != address(0x0)); //Fail if token is not set\n', '        require(now >= releaseTime);\n', '        require(allocations[msg.sender] > 0);\n', '        \n', '        uint256 amount = allocations[msg.sender];\n', '        allocations[msg.sender] = 0;\n', '        claimed[msg.sender] = true;\n', '        amountClaimed = amountClaimed.add(amount);\n', '        amountLocked = amountLocked.sub(amount);\n', '        \n', '        token.safeTransfer(msg.sender, amount);\n', '        Claimed(msg.sender, amount);\n', '    }\n', '}']
['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract YUPTimelock is Ownable {\n', '    using SafeERC20 for StandardToken;\n', '    using SafeMath for uint256;\n', '    \n', '    /** Contract events **/\n', '    event IsLocked(uint256 _time);\n', '    event IsClaiming(uint256 _time);\n', '    event IsFinalized(uint256 _time);\n', '    event Claimed(address indexed _to, uint256 _value);\n', '    event ClaimedFutureUse(address indexed _to, uint256 _value);\n', '    \n', '    /** State variables **/\n', '    enum ContractState { Locked, Claiming, Finalized }\n', '    ContractState public state;\n', '    uint256 constant D160 = 0x0010000000000000000000000000000000000000000;\n', '    StandardToken public token;\n', '    mapping(address => uint256) public allocations;\n', '    mapping(address => bool) public claimed;                //indicates whether beneficiary has claimed tokens\n', '    uint256 public expectedAmount = 193991920 * (10**18);   //should hold 193,991,920 x 10^18 (43.59% of total supply)\n', '    uint256 public amountLocked;\n', '    uint256 public amountClaimed;\n', '    uint256 public releaseTime;     //investor claim starting time\n', '    uint256 public claimEndTime;    //investor claim expiration time\n', '    uint256 public fUseAmount;  //amount of tokens for future use\n', '    address fUseBeneficiary;    //address of future use tokens beneficiary\n', '    uint256 fUseReleaseTime;    //release time of locked future use tokens\n', '    \n', '    /** Modifiers **/\n', '    modifier isLocked() {\n', '        require(state == ContractState.Locked);\n', '        _;\n', '    }\n', '    \n', '    modifier isClaiming() {\n', '        require(state == ContractState.Claiming);\n', '        _;\n', '    }\n', '    \n', '    modifier isFinalized() {\n', '        require(state == ContractState.Finalized);\n', '        _;\n', '    }\n', '    \n', '    /** Constructor **/\n', '    function YUPTimelock(\n', '        uint256 _releaseTime,\n', '        uint256 _amountLocked,\n', '        address _fUseBeneficiary,\n', '        uint256 _fUseReleaseTime\n', '    ) public {\n', '        require(_releaseTime > now);\n', '        \n', '        releaseTime = _releaseTime;\n', '        amountLocked = _amountLocked;\n', '        fUseAmount = 84550000 * 10**18;     //84,550,000 tokens (with 18 decimals)\n', '        claimEndTime = now + 60*60*24*275;  //9 months (in seconds) from time of lock\n', '        fUseBeneficiary = _fUseBeneficiary;\n', '        fUseReleaseTime = _fUseReleaseTime;\n', '        \n', '        if (amountLocked != expectedAmount)\n', '            revert();\n', '    }\n', '    \n', '    /** Allows the owner to set the token contract address **/\n', '    function setTokenAddr(StandardToken tokAddr) public onlyOwner {\n', '        require(token == address(0x0)); //initialize only once\n', '        \n', '        token = tokAddr;\n', '        \n', '        state = ContractState.Locked; //switch contract to locked state\n', '        IsLocked(now);\n', '    }\n', '    \n', '    /** Retrieves individual investor token balance **/\n', '    function getUserBalance(address _owner) public view returns (uint256) {\n', '        if (claimed[_owner] == false && allocations[_owner] > 0)\n', '            return allocations[_owner];\n', '        else\n', '            return 0;\n', '    }\n', '    \n', '    /** Allows owner to initiate the claiming phase **/\n', '    function startClaim() public isLocked onlyOwner {\n', '        state = ContractState.Claiming;\n', '        IsClaiming(now);\n', '    }\n', '    \n', '    /** Allows owner to finalize contract (only after investor claimEnd time) **/\n', '    function finalize() public isClaiming onlyOwner {\n', '        require(now >= claimEndTime);\n', '        \n', '        state = ContractState.Finalized;\n', '        IsFinalized(now);\n', '    }\n', '    \n', '    /** Allows the owner to claim all unclaimed investor tokens **/\n', '    function ownerClaim() public isFinalized onlyOwner {\n', '        uint256 remaining = token.balanceOf(this);\n', '        amountClaimed = amountClaimed.add(remaining);\n', '        amountLocked = amountLocked.sub(remaining);\n', '        \n', '        token.safeTransfer(owner, remaining);\n', '        Claimed(owner, remaining);\n', '    }\n', '    \n', '    /** Facilitates the assignment of investor addresses and amounts (only before claiming phase starts) **/\n', '    function loadBalances(uint256[] data) public isLocked onlyOwner {\n', '        require(token != address(0x0));  //Fail if token is not set\n', '        \n', '        for (uint256 i = 0; i < data.length; i++) {\n', '            address addr = address(data[i] & (D160 - 1));\n', '            uint256 amount = data[i] / D160;\n', '            \n', '            allocations[addr] = amount;\n', '            claimed[addr] = false;\n', '        }\n', '    }\n', '    \n', '    /** Allows owner to claim future use tokens in favor of fUseBeneficiary account **/\n', '    function claimFutureUse() public onlyOwner {\n', '        require(now >= fUseReleaseTime);\n', '        \n', '        amountClaimed = amountClaimed.add(fUseAmount);\n', '        amountLocked = amountLocked.sub(fUseAmount);\n', '        \n', '        token.safeTransfer(fUseBeneficiary, fUseAmount);\n', '        ClaimedFutureUse(fUseBeneficiary, fUseAmount);\n', '    }\n', '    \n', '    /** Allows presale investors to claim tokens **/\n', '    function claim() external isClaiming {\n', '        require(token != address(0x0)); //Fail if token is not set\n', '        require(now >= releaseTime);\n', '        require(allocations[msg.sender] > 0);\n', '        \n', '        uint256 amount = allocations[msg.sender];\n', '        allocations[msg.sender] = 0;\n', '        claimed[msg.sender] = true;\n', '        amountClaimed = amountClaimed.add(amount);\n', '        amountLocked = amountLocked.sub(amount);\n', '        \n', '        token.safeTransfer(msg.sender, amount);\n', '        Claimed(msg.sender, amount);\n', '    }\n', '}']
