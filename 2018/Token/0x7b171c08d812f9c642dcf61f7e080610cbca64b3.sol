['library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external;\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) external;\n', '  function approve(address spender, uint256 value) external;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '    function transfer(address _to, uint256 _value) external {\n', '        address _from = msg.sender;\n', '        require (balances[_from] >= _value && balances[_to] + _value > balances[_to]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]){\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance) {\n', '        balance = balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) external {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) external view returns (uint256 remaining) {\n', '        remaining = allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '\n', 'contract HadeCoin is BasicToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /*\n', '       STORAGE\n', '    */\n', '\n', '    // name of the token\n', '    string public name = "HADE Platform";\n', '\n', '    // symbol of token\n', '    string public symbol = "HADE";\n', '\n', '    // decimals\n', '    uint8 public decimals = 18;\n', '\n', '    // total supply of Hade Coin\n', '    uint256 public totalSupply = 150000000 * 10**18;\n', '\n', '    // multi sign address of founders which hold\n', '    address public adminMultiSig;\n', '\n', '    /*\n', '       EVENTS\n', '    */\n', '\n', '    event ChangeAdminWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\n', '\n', '    /*\n', '       CONSTRUCTOR\n', '    */\n', '\n', '    function HadeCoin(address _adminMultiSig) public {\n', '\n', '        adminMultiSig = _adminMultiSig;\n', '        balances[adminMultiSig] = totalSupply;\n', '    }\n', '\n', '    /*\n', '       MODIFIERS\n', '    */\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == adminMultiSig);\n', '        _;\n', '    }\n', '\n', '    /*\n', '       OWNER FUNCTIONS\n', '    */\n', '\n', '    // @title mint sends new coin to the specificed recepiant\n', '    // @param _to is the recepiant the new coins\n', '    // @param _value is the number of coins to mint\n', '    function mint(address _to, uint256 _value) external onlyAdmin {\n', '\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '        totalSupply += _value;\n', '        balances[_to] += _value;\n', '        Transfer(address(0), _to, _value);\n', '    }\n', '\n', '    // @title burn allows the administrator to burn their own tokens\n', '    // @param _value is the number of tokens to burn\n', '    // @dev note that admin can only burn their own tokens\n', '    function burn(uint256 _value) external onlyAdmin {\n', '\n', '        require(_value > 0 && balances[msg.sender] >= _value);\n', '        totalSupply -= _value;\n', '        balances[msg.sender] -= _value;\n', '    }\n', '\n', '    // @title changeAdminAddress allows to update the owner wallet\n', '    // @param _newAddress is the address of the new admin wallet\n', '    // @dev only callable by current owner\n', '    function changeAdminAddress(address _newAddress)\n', '\n', '    external\n', '    onlyAdmin\n', '    nonZeroAddress(_newAddress)\n', '    {\n', '        adminMultiSig = _newAddress;\n', '        ChangeAdminWalletAddress(now, adminMultiSig);\n', '    }\n', '\n', '    // @title fallback reverts if a method call does not match\n', '    // @dev reverts if any money is sent\n', '    function() public {\n', '        revert();\n', '    }\n', '}']