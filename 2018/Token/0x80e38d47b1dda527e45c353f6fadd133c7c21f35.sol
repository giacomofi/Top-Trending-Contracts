['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract SkinPresale is Pausable {\n', '\n', '    // Record number of packages each account buy\n', '    mapping (address => uint256) public accountToBoughtNum;\n', '\n', '    // Total number of packages for presale\n', '    uint256 public totalSupplyForPresale = 10000;\n', '\n', '    // Number of packages each account can buy\n', '    uint256 public accountBuyLimit = 100;\n', '\n', '    // Remaining packages for presale\n', '    uint256 public remainPackage = 10000;\n', '\n', '    // Event\n', '    event BuyPresale(address account);\n', '\n', '    function buyPresale() payable external whenNotPaused {\n', '        address account = msg.sender;\n', '\n', '        // Check account limit\n', '        require(accountToBoughtNum[account] + 1 < accountBuyLimit);\n', '\n', '        // Check total presale limit\n', '        require(remainPackage > 0);\n', '\n', '        // Check enough money\n', '        uint256 price = 20 finney + (10000 - remainPackage) / 500 * 10 finney;\n', '        require(msg.value >= price);\n', '\n', '        // Perform purchase\n', '        accountToBoughtNum[account] += 1;\n', '        remainPackage -= 1;\n', '\n', '        // Fire event\n', '        BuyPresale(account);\n', '    }\n', '\n', '    function withdrawETH() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract SkinPresale is Pausable {\n', '\n', '    // Record number of packages each account buy\n', '    mapping (address => uint256) public accountToBoughtNum;\n', '\n', '    // Total number of packages for presale\n', '    uint256 public totalSupplyForPresale = 10000;\n', '\n', '    // Number of packages each account can buy\n', '    uint256 public accountBuyLimit = 100;\n', '\n', '    // Remaining packages for presale\n', '    uint256 public remainPackage = 10000;\n', '\n', '    // Event\n', '    event BuyPresale(address account);\n', '\n', '    function buyPresale() payable external whenNotPaused {\n', '        address account = msg.sender;\n', '\n', '        // Check account limit\n', '        require(accountToBoughtNum[account] + 1 < accountBuyLimit);\n', '\n', '        // Check total presale limit\n', '        require(remainPackage > 0);\n', '\n', '        // Check enough money\n', '        uint256 price = 20 finney + (10000 - remainPackage) / 500 * 10 finney;\n', '        require(msg.value >= price);\n', '\n', '        // Perform purchase\n', '        accountToBoughtNum[account] += 1;\n', '        remainPackage -= 1;\n', '\n', '        // Fire event\n', '        BuyPresale(account);\n', '    }\n', '\n', '    function withdrawETH() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '}']
