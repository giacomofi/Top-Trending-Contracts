['pragma solidity ^0.4.21;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint _value, address _token, bytes _extraData) external; }\n', '\n', 'contract LocusToken {\n', '    \n', '    address public tokenOwner;\n', '    \n', '    string public constant name = "Locus Chain";\n', '    string public constant symbol = "LOCUS";\n', '    \n', '    uint8 public constant decimals = 18;\n', '    uint public totalSupply;\n', '    \n', '    uint internal constant initialSupply = 7000000000 * (10 ** uint(decimals));\n', '    \n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => mapping(address => uint)) internal allowed;\n', '\t\n', '\tfunction balanceOfToken(address _owner) public view returns(uint) {\n', '\t    return balanceOf[_owner];\n', '\t}\n', '    \n', '    function allowance(address _owner, address _spender) public view returns(uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Burn(address indexed from, uint value);\n', '    \n', '    function LocusToken() public {\n', '        tokenOwner = msg.sender;\n', '        totalSupply = initialSupply;\n', '        balanceOf[tokenOwner] = totalSupply;\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != address(0));\n', '        require(_value <= balanceOf[_from]);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint prevBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == prevBalances);\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns(bool) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns(bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint _value, bytes _extraData) public returns(bool) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if(approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    function burn(uint _value) public returns(bool) {\n', '        require(_value <= balanceOf[msg.sender]);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, address(0), _value);\n', '        return true;\n', '    }  \n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint _value, address _token, bytes _extraData) external; }\n', '\n', 'contract LocusToken {\n', '    \n', '    address public tokenOwner;\n', '    \n', '    string public constant name = "Locus Chain";\n', '    string public constant symbol = "LOCUS";\n', '    \n', '    uint8 public constant decimals = 18;\n', '    uint public totalSupply;\n', '    \n', '    uint internal constant initialSupply = 7000000000 * (10 ** uint(decimals));\n', '    \n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => mapping(address => uint)) internal allowed;\n', '\t\n', '\tfunction balanceOfToken(address _owner) public view returns(uint) {\n', '\t    return balanceOf[_owner];\n', '\t}\n', '    \n', '    function allowance(address _owner, address _spender) public view returns(uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Burn(address indexed from, uint value);\n', '    \n', '    function LocusToken() public {\n', '        tokenOwner = msg.sender;\n', '        totalSupply = initialSupply;\n', '        balanceOf[tokenOwner] = totalSupply;\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != address(0));\n', '        require(_value <= balanceOf[_from]);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint prevBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == prevBalances);\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) public returns(bool) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) public returns(bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint _value, bytes _extraData) public returns(bool) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if(approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    function burn(uint _value) public returns(bool) {\n', '        require(_value <= balanceOf[msg.sender]);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, address(0), _value);\n', '        return true;\n', '    }  \n', '}']
