['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '     \n', '\n', ' \n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 public totalSupply_;\n', '\n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(msg.data.length>=(2*32)+4);\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer (msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_value==0||allowed[msg.sender][_spender]==0);\n', '        require(msg.data.length>=(2*32)+4);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Lock token\n', ' * @dev Lock  which is defined the lock logic\n', ' **/\n', 'contract  Lock is PausableToken{\n', '\n', '    mapping(address => uint256) public teamLockTime; // Lock start time\n', '    mapping(address => uint256) public fundLockTime; // Lock start time\n', '    uint256 public issueDate =0 ;//issueDate\n', '    mapping(address => uint256) public teamLocked;// Total Team lock \n', '    mapping(address => uint256) public fundLocked;// Total fund lock\n', '    mapping(address => uint256) public teamUsed;   // Team Used\n', '    mapping(address => uint256) public fundUsed;   // Fund Used\n', '    mapping(address => uint256) public teamReverse;   // Team reserve\n', '    mapping(address => uint256) public fundReverse;   // Fund reserve\n', '    \n', '\n', '   /**\n', '    * @dev Calculate the number of Tokens available for teamAccount\n', "    * @param _to teamAccount's address\n", '   */\n', '    function teamAvailable(address _to) internal constant returns (uint256) {\n', '        require(teamLockTime[_to]>0);\n', '        //Cover the start time of the lock before the release is the issueDate\n', '        if(teamLockTime[_to] != issueDate)\n', '        {\n', '            teamLockTime[_to]= issueDate;\n', '        }\n', '        uint256 now1 = block.timestamp;\n', '        uint256 lockTime = teamLockTime[_to];\n', '        uint256 time = now1.sub(lockTime);\n', '        uint256 percent = 0;\n', '        //locks team account for 1 year\n', '        if(time >= 365 days) {\n', '          percent =  (time.div(30 days)) .add(1);\n', '        }\n', '        percent = percent > 12 ? 12 : percent;\n', '        uint256 avail = teamLocked[_to];\n', '        require(avail>0);\n', '        avail = avail.mul(percent).div(12).sub(teamUsed[_to]);\n', '        return avail ;\n', '    }\n', '    \n', '    /**\n', '     * @dev Get the number of Tokens available for the current private fund account \n', "     * @param _to mainFundAccount's address\n", '    **/\n', '    function fundAvailable(address _to) internal constant returns (uint256) {\n', '        require(fundLockTime[_to]>0);\n', '        //Cover the start time of the lock before the release is the issueDate\n', '        if(fundLockTime[_to] != issueDate)\n', '        {\n', '            fundLockTime[_to]= issueDate;\n', '        }\n', '        //The start time of the lock position\n', '        uint256 lockTime = fundLockTime[_to];\n', '        //The interval between the current time and the start time of the lockout\n', '        uint256 time = block.timestamp.sub(lockTime);\n', '        //Unlocked 25%\n', '        uint256 percent = 250;\n', '        //After more than 30 days, 75% of the minutes and 150 days of unlocking 5/1000 per day\n', '        if(time >= 30 days) {\n', '            percent = percent.add( (((time.sub(30 days)).div (1 days)).add (1)).mul (5));\n', '        }\n', '        percent = percent > 1000 ? 1000 : percent;\n', '        uint256 avail = fundLocked[_to];\n', '        require(avail>0);\n', '        avail = avail.mul(percent).div(1000).sub(fundUsed[_to]);\n', '        return avail ;\n', '    }\n', '    /**\n', '      * @dev Team lock\n', "      * @param _to  team lock account's address\n", '      * @param _value the number of Token\n', '     */\n', '    function teamLock(address _to,uint256 _value) internal {\n', '        require(_value>0);\n', '        teamLocked[_to] = teamLocked[_to].add(_value);\n', '        teamReverse[_to] = teamReverse[_to].add(_value);\n', '        teamLockTime[_to] = block.timestamp;  // Lock start time\n', '    }\n', '    /**\n', '      * @dev  Privately offered fund lock\n', "      * @param _to  Privately offered fund account's address\n", '      * @param _value the number of Token\n', '     */\n', '    function fundLock(address _to,uint256 _value) internal {\n', '        require(_value>0);\n', '        fundLocked[_to] =fundLocked[_to].add(_value);\n', '        fundReverse[_to] = fundReverse[_to].add(_value);\n', '        if(fundLockTime[_to] == 0)\n', '          fundLockTime[_to] = block.timestamp;  // Lock start time\n', '    }\n', '\n', '    /**\n', '     * @dev Team account transaction\n', '     * @param _to  The accept token address\n', '     * @param _value Number of transactions\n', '     */\n', '    function teamLockTransfer(address _to, uint256 _value) internal returns (bool) {\n', '        //The remaining part\n', '       uint256 availReverse = balances[msg.sender].sub((teamLocked[msg.sender].sub(teamUsed[msg.sender]))+(fundLocked[msg.sender].sub(fundUsed[msg.sender])));\n', '       uint256 totalAvail=0;\n', '       uint256 availTeam =0;\n', '       if(issueDate==0)\n', '        {\n', '             totalAvail = availReverse;\n', '        }\n', '        else{\n', "            //the number of Tokens available for teamAccount'Locked part\n", '             availTeam = teamAvailable(msg.sender);\n', '             //the number of Tokens available for teamAccount\n', '             totalAvail = availTeam.add(availReverse);\n', '        }\n', '        require(_value <= totalAvail);\n', '        bool ret = super.transfer(_to,_value);\n', '        if(ret == true && issueDate>0) {\n', "            //If over the teamAccount's released part\n", '            if(_value > availTeam){\n', '                teamUsed[msg.sender] = teamUsed[msg.sender].add(availTeam);\n', '                 teamReverse[msg.sender] = teamReverse[msg.sender].sub(availTeam);\n', '          }\n', "            //If in the teamAccount's released part\n", '            else{\n', '                teamUsed[msg.sender] = teamUsed[msg.sender].add(_value);\n', '                teamReverse[msg.sender] = teamReverse[msg.sender].sub(_value);\n', '            }\n', '        }\n', '        if(teamUsed[msg.sender] >= teamLocked[msg.sender]){\n', '            delete teamLockTime[msg.sender];\n', '            delete teamReverse[msg.sender];\n', '        }\n', '        return ret;\n', '    }\n', '\n', '    /**\n', '     * @dev Team account authorization transaction\n', '     * @param _from The give token address\n', '     * @param _to  The accept token address\n', '     * @param _value Number of transactions\n', '     */\n', '    function teamLockTransferFrom(address _from,address _to, uint256 _value) internal returns (bool) {\n', '       //The remaining part\n', '       uint256 availReverse = balances[_from].sub((teamLocked[_from].sub(teamUsed[_from]))+(fundLocked[_from].sub(fundUsed[_from])));\n', '       uint256 totalAvail=0;\n', '       uint256 availTeam =0;\n', '        if(issueDate==0)\n', '        {\n', '             totalAvail = availReverse;\n', '        }\n', '        else{\n', "            //the number of Tokens available for teamAccount'Locked part\n", '             availTeam = teamAvailable(_from);\n', '              //the number of Tokens available for teamAccount\n', '             totalAvail = availTeam.add(availReverse);\n', '        }\n', '       require(_value <= totalAvail);\n', '        bool ret = super.transferFrom(_from,_to,_value);\n', '        if(ret == true && issueDate>0) {\n', "            //If over the teamAccount's released part\n", '            if(_value > availTeam){\n', '                teamUsed[_from] = teamUsed[_from].add(availTeam);\n', '                teamReverse[_from] = teamReverse[_from].sub(availTeam);\n', '           }\n', "            //If in the teamAccount's released part\n", '            else{\n', '                teamUsed[_from] = teamUsed[_from].add(_value);\n', '                teamReverse[_from] = teamReverse[_from].sub(_value);\n', '            }\n', '        }\n', '        if(teamUsed[_from] >= teamLocked[_from]){\n', '            delete teamLockTime[_from];\n', '            delete teamReverse[_from];\n', '        }\n', '        return ret;\n', '    }\n', '\n', '    /**\n', '     * @dev Privately Offered Fund Transfer Token\n', '     * @param _to The accept token address\n', '     * @param _value Number of transactions\n', '     */\n', '    function fundLockTransfer(address _to, uint256 _value) internal returns (bool) {\n', '      //The remaining part\n', '       uint256 availReverse = balances[msg.sender].sub((teamLocked[msg.sender].sub(teamUsed[msg.sender]))+(fundLocked[msg.sender].sub(fundUsed[msg.sender])));\n', '       uint256 totalAvail=0;\n', '       uint256 availFund = 0;\n', '        if(issueDate==0)\n', '        {\n', '             totalAvail = availReverse;\n', '        }\n', '        else{\n', '             require(now>issueDate);\n', "            //the number of Tokens available for mainFundAccount'Locked part\n", '             availFund = fundAvailable(msg.sender);\n', '             //the number of Tokens available for mainFundAccount\n', '             totalAvail = availFund.add(availReverse);\n', '        }\n', '        require(_value <= totalAvail);\n', '        bool ret = super.transfer(_to,_value);\n', '        if(ret == true && issueDate>0) {\n', "            //If over the mainFundAccount's released part\n", '            if(_value > availFund){\n', '                fundUsed[msg.sender] = fundUsed[msg.sender].add(availFund);\n', '                fundReverse[msg.sender] = fundReverse[msg.sender].sub(availFund);\n', '             }\n', "            //If in the mainFundAccount's released part\n", '            else{\n', '                fundUsed[msg.sender] =  fundUsed[msg.sender].add(_value);\n', '                fundReverse[msg.sender] = fundReverse[msg.sender].sub(_value);\n', '            }\n', '        }\n', '        if(fundUsed[msg.sender] >= fundLocked[msg.sender]){\n', '            delete fundLockTime[msg.sender];\n', '            delete fundReverse[msg.sender];\n', '        }\n', '        return ret;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Privately Offered Fund Transfer Token\n', '     * @param _from The give token address\n', '     * @param _to The accept token address\n', '     * @param _value Number of transactions\n', '     */\n', '    function fundLockTransferFrom(address _from,address _to, uint256 _value) internal returns (bool) {\n', '         //The remaining part\n', '        uint256 availReverse =  balances[_from].sub((teamLocked[_from].sub(teamUsed[_from]))+(fundLocked[_from].sub(fundUsed[_from])));\n', '        uint256 totalAvail=0;\n', '        uint256 availFund = 0;\n', '        if(issueDate==0)\n', '         {\n', '             totalAvail = availReverse;\n', '        }\n', '        else{\n', '             require(now>issueDate);\n', "             //the number of Tokens available for mainFundAccount'Locked part\n", '             availFund = fundAvailable(_from);\n', '              //the number of Tokens available for mainFundAccount\n', '             totalAvail = availFund.add(availReverse);\n', '         }\n', '      \n', '        require(_value <= totalAvail);\n', '        bool ret = super.transferFrom(_from,_to,_value);\n', '        if(ret == true && issueDate>0) {\n', "           //If over the mainFundAccount's released part\n", '            if(_value > availFund){\n', '                fundUsed[_from] = fundUsed[_from].add(availFund);\n', '                fundReverse[_from] = fundReverse[_from].sub(availFund);\n', '            }\n', "            //If in the mainFundAccount's released part\n", '            else{\n', '                fundUsed[_from] =  fundUsed[_from].add(_value);\n', '                fundReverse[_from] = fundReverse[_from].sub(_value);\n', '            }\n', '        }\n', '        if(fundUsed[_from] >= fundLocked[_from]){\n', '            delete fundLockTime[_from];\n', '        }\n', '        return ret;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title HitToken\n', ' * @dev HitToken Contract\n', ' **/\n', 'contract HitToken is Lock {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    // Proportional accuracy\n', '    uint256  public precentDecimal = 2;\n', '    // mainFundPrecent\n', '    uint256 public mainFundPrecent = 2650; \n', '    //subFundPrecent\n', '    uint256 public subFundPrecent = 350; \n', '    //devTeamPrecent\n', '    uint256 public devTeamPrecent = 1500;\n', '    //hitFoundationPrecent\n', '    uint256 public hitFoundationPrecent = 5500;\n', '    //mainFundBalance\n', '    uint256 public  mainFundBalance;\n', '    //subFundBalance\n', '    uint256 public subFundBalance;\n', '    //devTeamBalance\n', '    uint256 public  devTeamBalance;\n', '    //hitFoundationBalance\n', '    uint256 public hitFoundationBalance;\n', '    //subFundAccount\n', '    address public subFundAccount;\n', '    //mainFundAccount\n', '    address public mainFundAccount;\n', '    \n', '\n', '    /**\n', '     *  @dev Contract constructor\n', "     *  @param _name token's name\n", "     *  @param _symbol token's symbol\n", "     *  @param _decimals token's decimals\n", "     *  @param _initialSupply token's initialSupply\n", '     *  @param _teamAccount  teamAccount\n', '     *  @param _subFundAccount subFundAccount\n', '     *  @param _mainFundAccount mainFundAccount\n', '     *  @param _hitFoundationAccount hitFoundationAccount\n', '    */\n', '    function HitToken(string _name, string _symbol, uint8 _decimals, uint256 _initialSupply,address _teamAccount,address _subFundAccount,address _mainFundAccount,address _hitFoundationAccount) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        //Define a subFundAccount\n', '        subFundAccount = _subFundAccount;\n', '        //Define a mainFundAccount\n', '        mainFundAccount = _mainFundAccount;\n', '        //Calculated according to accuracy, if the precision is 18, it is _initialSupply x 10 to the power of 18\n', '        totalSupply_ = _initialSupply * 10 ** uint256(_decimals);\n', '        //Calculate the total value of mainFund\n', '        mainFundBalance =  totalSupply_.mul(mainFundPrecent).div(100* 10 ** precentDecimal) ;\n', '        //Calculate the total value of subFund\n', '        subFundBalance =  totalSupply_.mul(subFundPrecent).div(100* 10 ** precentDecimal);\n', '        //Calculate the total value of devTeamBalance\n', '        devTeamBalance =  totalSupply_.mul(devTeamPrecent).div(100* 10 ** precentDecimal);\n', '        //Calculate the total value of  hitFoundationBalance\n', '        hitFoundationBalance = totalSupply_.mul(hitFoundationPrecent).div(100* 10 ** precentDecimal) ;\n', '        //Initially put the hitFoundationBalance into the hitFoundationAccount\n', '        balances[_hitFoundationAccount] = hitFoundationBalance; \n', '        //Initially put the devTeamBalance into the teamAccount\n', '        balances[_teamAccount] = devTeamBalance;\n', '        //Initially put the subFundBalance into the subFundAccount\n', '        balances[_subFundAccount] = subFundBalance;\n', '         //Initially put the mainFundBalance into the mainFundAccount\n', '        balances[_mainFundAccount]=mainFundBalance;\n', '        //Initially lock the team account\n', '        teamLock(_teamAccount,devTeamBalance);\n', '        \n', '    }\n', '\n', '    /**\n', "      * @dev destroy the msg sender's token onlyOwner\n", '      * @param _value the number of the destroy token\n', '     */\n', '    function burn(uint256 _value) public onlyOwner returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[address(0)] = balances[address(0)].add(_value);\n', '        emit Transfer(msg.sender, address(0), _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token\n', '     * @param _to the accept token address\n', '     * @param _value the number of transfer token\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if(issueDate==0)\n', '        {\n', '             //the mainFundAccounts is not allowed to transfer before issued\n', '            require(msg.sender != mainFundAccount);\n', '        }\n', '\n', '        if(teamLockTime[msg.sender] > 0){\n', '             return super.teamLockTransfer(_to,_value);\n', '            }else if(fundLockTime[msg.sender] > 0){\n', '                return super.fundLockTransfer(_to,_value);\n', '            }else {\n', '               return super.transfer(_to, _value);\n', '            \n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token\n', '     * @param _from the give token address\n', '     * @param _to the accept token address\n', '     * @param _value the number of transfer token\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '          if(issueDate==0)\n', '        {\n', '              //the mainFundAccounts is not allowed to transfer before issued\n', '            require(_from != mainFundAccount);\n', '        }\n', '      \n', '        if(teamLockTime[_from] > 0){\n', '            return super.teamLockTransferFrom(_from,_to,_value);\n', '        }else if(fundLockTime[_from] > 0 ){  \n', '            return super.fundLockTransferFrom(_from,_to,_value);\n', '        }else{\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     *  @dev Privately offered Fund \n', '     *  @param _to the accept token address\n', '     *  @param _value the number of transfer token\n', '     */\n', '    function mintFund(address _to, uint256 _value) public  returns (bool){\n', '        require(msg.sender==mainFundAccount);\n', '        require(mainFundBalance >0);\n', '        require(_value >0);\n', '        if(_value <= mainFundBalance){\n', '            super.transfer(_to,_value);\n', '            fundLock(_to,_value);\n', '            mainFundBalance = mainFundBalance.sub(_value);\n', '        }\n', '    }\n', '\n', '     /**\n', '      * @dev Issue the token \n', '     */\n', '     function issue() public onlyOwner  returns (uint){\n', '         //Only one time \n', '         require(issueDate==0);\n', '         issueDate = now;\n', '         return now;\n', '     }\n', '     \n', '     /**avoid mis-transfer*/\n', '     function() public payable{\n', '         revert();\n', '     }\n', '     \n', '   \n', '}']