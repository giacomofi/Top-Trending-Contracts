['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-soliditysettable\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAddress(address addr) {\n', '        require(addr != address(0));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner)\n', '        public\n', '        onlyOwner\n', '        onlyValidAddress(newOwner)\n', '    {\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    constructor () public {\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal _totalSupply;\n', '    mapping(address => uint256) internal _balanceOf;\n', '    mapping (address => mapping (address => uint256)) internal _allowance;\n', '\n', '    modifier onlyValidAddress(address addr) {\n', '        require(addr != address(0));\n', '        _;\n', '    }\n', '\n', '    modifier onlySufficientBalance(address from, uint256 value) {\n', '        require(value <= _balanceOf[from]);\n', '        _;\n', '    }\n', '\n', '    modifier onlySufficientAllowance(address from, address to, uint256 value) {\n', '        require(value <= _allowance[from][msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '      * @dev Transfers token to the specified address\n', '      * @param to The address to transfer to.\n', '      * @param value The amount to be transferred.\n', '      */\n', '    function transfer(address to, uint256 value)\n', '        public\n', '        onlyValidAddress(to)\n', '        onlySufficientBalance(msg.sender, value)\n', '        returns (bool)\n', '    {\n', '        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(value);\n', '        _balanceOf[to] = _balanceOf[to].add(value);\n', '\n', '        emit Transfer(msg.sender, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers tokens from one address to another\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public\n', '        onlyValidAddress(to)\n', '        onlySufficientBalance(from, value)\n', '        onlySufficientAllowance(from, to, value)\n', '        returns (bool)\n', '    {\n', '        _balanceOf[from] = _balanceOf[from].sub(value);\n', '        _balanceOf[to] = _balanceOf[to].add(value);\n', '        _allowance[from][msg.sender] = _allowance[from][msg.sender].sub(value);\n', '\n', '        emit Transfer(from, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approves the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _allowance[msg.sender][spender] = value;\n', '\n', '        emit Approval(msg.sender, spender, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increases the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when _allowance[spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address spender, uint addedValue) public returns (bool) {\n', '        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].add(addedValue);\n', '\n', '        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decreases the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when _allowance[spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address spender, uint subtractedValue) public returns (bool) {\n', '        uint oldValue = _allowance[msg.sender][spender];\n', '        if (subtractedValue > oldValue) {\n', '            _allowance[msg.sender][spender] = 0;\n', '        } else {\n', '            _allowance[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balanceOf[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Checks the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowance[owner][spender];\n', '    }\n', '}\n', '\n', '// File: contracts/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '// File: contracts/Protection.sol\n', '\n', 'contract Protection {\n', '\n', '\t/**\n', '\t * @dev Protection against short address attack\n', '\t */\n', '\tmodifier onlyPayloadSize(uint numwords) {\n', '\t    assert(msg.data.length == numwords * 32 + 4);\n', '\t    _;\n', '\t}\n', '}\n', '\n', '// File: contracts/TokenRecipient.sol\n', '\n', 'contract TokenRecipient {\n', '    /**\n', '     * @dev receive approval\n', '     */\n', '    function receiveApproval(address _from, uint256 _value, address _to, bytes _extraData) public;\n', '}\n', '\n', '// File: contracts/PeloponnesianToken.sol\n', '\n', 'contract PeloponnesianToken is Protection,PausableToken {\n', '    string public name = "Peloponnesian";\n', '    string public symbol = "PELO";\n', '    uint256 public decimals = 18;\n', '    uint256 public initialSupply = 100 * 10**8 * uint256(10**decimals);\n', '\n', '\n', '    constructor( ) public {\n', '\n', '        _totalSupply = initialSupply;\n', '        _balanceOf[msg.sender] = initialSupply;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer with short address attack protection\n', '     */\n', '    function transfer(address _to, uint _value) public onlyPayloadSize(2) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev TransferFrom with short address attack protection\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3) returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Allowance with short address attack protection\n', '     */\n', '    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\n', '        return super.allowance(_owner, _spender);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve and then communicate the approved contract in a single transaction\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        TokenRecipient spender = TokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '\n', '}']