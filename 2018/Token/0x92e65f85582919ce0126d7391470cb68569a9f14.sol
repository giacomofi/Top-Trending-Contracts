['pragma solidity ^0.4.13;\n', '\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(!has(role, account));\n', '\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an account&#39;s access to this role\n', '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(has(role, account));\n', '\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', 'contract PauserRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event PauserAdded(address indexed account);\n', '  event PauserRemoved(address indexed account);\n', '\n', '  Roles.Role private pausers;\n', '\n', '  constructor() internal {\n', '    _addPauser(msg.sender);\n', '  }\n', '\n', '  modifier onlyPauser() {\n', '    require(isPauser(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isPauser(address account) public view returns (bool) {\n', '    return pausers.has(account);\n', '  }\n', '\n', '  function addPauser(address account) public onlyPauser {\n', '    _addPauser(account);\n', '  }\n', '\n', '  function renouncePauser() public {\n', '    _removePauser(msg.sender);\n', '  }\n', '\n', '  function _addPauser(address account) internal {\n', '    pausers.add(account);\n', '    emit PauserAdded(account);\n', '  }\n', '\n', '  function _removePauser(address account) internal {\n', '    pausers.remove(account);\n', '    emit PauserRemoved(account);\n', '  }\n', '}\n', '\n', 'contract Pausable is PauserRole {\n', '  event Paused(address account);\n', '  event Unpaused(address account);\n', '\n', '  bool private _paused;\n', '\n', '  constructor() internal {\n', '    _paused = false;\n', '  }\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns(bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyPauser whenNotPaused {\n', '    _paused = true;\n', '    emit Paused(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyPauser whenPaused {\n', '    _paused = false;\n', '    emit Unpaused(msg.sender);\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract CSTWallet is Ownable, Pausable {\n', '\n', '    // Account balances\n', '    mapping (address => uint) public balances; \n', '  \n', '    // ERC20 Token Contract address\n', '    address public tokenAddress;\n', '\n', '    // Emergency withdraw address, only for recovering ETH/ERC20 that is stuck in the smart contract, due an incorrect behaviour.\n', '    address public emergencyWithdrawAddress;\n', '  \n', '    // ERC20 Token Instance\n', '    IERC20 tokenInstance;\n', '\n', '    event Deposit(address from, uint amount, uint blockNumber);\n', '    event Withdrawal(address to, uint amount, uint blockNumber);\n', '    \n', '    event EmergencyWithdrawERC20(address to, uint balance, address tokenTarget);\n', '    event EmergencyWithdrawETH(address to, uint balance);\n', '    event EmergencyAddressChanged(address account);\n', '\n', '    constructor(address targetToken) public {\n', '        setToken(targetToken);\n', '        setEmergencyWithdrawAddress(msg.sender);\n', '    }\n', '\n', '    function depositERC20(address account, uint256 amount) public whenNotPaused{\n', '        require(tokenAddress != address(0), "ERC20 token contract is not set. Please contact with the smart contract owner.");\n', '        require(account != address(0), "The 0x address is not allowed to deposit tokens in this contract.");\n', '        require(tokenInstance.allowance(account, address(this)) >= amount, "Owner did not allow this smart contract to transfer.");\n', '        require(amount > 0, "Amount can not be zero");\n', '        tokenInstance.transferFrom(account, address(this), amount);\n', '        balances[account] += amount;\n', '        emit Deposit(account, amount, block.number);\n', '    }\n', '\n', '    function withdrawERC20(uint amount) public whenNotPaused {\n', '        require(tokenAddress != address(0), "ERC20 token contract is not set. Please contact with the smart contract owner.");\n', '        require(msg.sender != address(0), "The 0x address is not allowed to withdraw tokens in this contract.");\n', '        require(amount > 0, "Amount can not be zero");\n', '        uint256 currentBalance = balances[msg.sender];\n', '        require(amount <= currentBalance,  "Amount is greater than current balance.");\n', '        balances[msg.sender] -= amount;\n', '        require(tokenInstance.transfer(msg.sender, amount), "Error while making ERC20 transfer");\n', '        emit Withdrawal(msg.sender, amount, block.number);\n', '    }\n', '\n', '    function emergencyWithdrawERC20(address tokenTarget, uint amount) public onlyOwner whenPaused {\n', '        require(tokenTarget != address(0), "Token address can not be the zero address");\n', '        require(emergencyWithdrawAddress != address(0), "The emergency withdraw address can not be the zero address");\n', '        uint currentBalance = IERC20(tokenTarget).balanceOf(address(this));\n', '        require(amount <= currentBalance, "Withdrawal amount is bigger than balance");\n', '        IERC20(tokenTarget).transfer(emergencyWithdrawAddress, amount);\n', '        emit EmergencyWithdrawERC20(emergencyWithdrawAddress, amount, tokenTarget);\n', '    }\n', '\n', '    function emergencyWithdrawETH(uint amount) public onlyOwner whenPaused {\n', '        require(emergencyWithdrawAddress != address(0), "The emergency withdraw address can not be the zero address");\n', '        uint currentBalance = address(this).balance;\n', '        require(amount <= currentBalance, "Withdrawal amount is bigger than balance");\n', '        emergencyWithdrawAddress.transfer(amount);\n', '        emit EmergencyWithdrawETH(emergencyWithdrawAddress, amount);\n', '    }\n', '\n', '    function setEmergencyWithdrawAddress(address withdrawAddress) public onlyOwner {\n', '        require(withdrawAddress != address(0), "The emergency withdraw address can not be the zero address");\n', '        emergencyWithdrawAddress = withdrawAddress;\n', '        emit EmergencyAddressChanged(emergencyWithdrawAddress);\n', '    }\n', '\n', '    function setToken(address contractAddress) public onlyOwner {\n', '        tokenAddress = contractAddress;\n', '        tokenInstance = IERC20(tokenAddress);\n', '    }\n', '\n', '    function () external {\n', '        require(false, "Fallback function is disabled");\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(!has(role, account));\n', '\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an account's access to this role\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(has(role, account));\n', '\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', 'contract PauserRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event PauserAdded(address indexed account);\n', '  event PauserRemoved(address indexed account);\n', '\n', '  Roles.Role private pausers;\n', '\n', '  constructor() internal {\n', '    _addPauser(msg.sender);\n', '  }\n', '\n', '  modifier onlyPauser() {\n', '    require(isPauser(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isPauser(address account) public view returns (bool) {\n', '    return pausers.has(account);\n', '  }\n', '\n', '  function addPauser(address account) public onlyPauser {\n', '    _addPauser(account);\n', '  }\n', '\n', '  function renouncePauser() public {\n', '    _removePauser(msg.sender);\n', '  }\n', '\n', '  function _addPauser(address account) internal {\n', '    pausers.add(account);\n', '    emit PauserAdded(account);\n', '  }\n', '\n', '  function _removePauser(address account) internal {\n', '    pausers.remove(account);\n', '    emit PauserRemoved(account);\n', '  }\n', '}\n', '\n', 'contract Pausable is PauserRole {\n', '  event Paused(address account);\n', '  event Unpaused(address account);\n', '\n', '  bool private _paused;\n', '\n', '  constructor() internal {\n', '    _paused = false;\n', '  }\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns(bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyPauser whenNotPaused {\n', '    _paused = true;\n', '    emit Paused(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyPauser whenPaused {\n', '    _paused = false;\n', '    emit Unpaused(msg.sender);\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract CSTWallet is Ownable, Pausable {\n', '\n', '    // Account balances\n', '    mapping (address => uint) public balances; \n', '  \n', '    // ERC20 Token Contract address\n', '    address public tokenAddress;\n', '\n', '    // Emergency withdraw address, only for recovering ETH/ERC20 that is stuck in the smart contract, due an incorrect behaviour.\n', '    address public emergencyWithdrawAddress;\n', '  \n', '    // ERC20 Token Instance\n', '    IERC20 tokenInstance;\n', '\n', '    event Deposit(address from, uint amount, uint blockNumber);\n', '    event Withdrawal(address to, uint amount, uint blockNumber);\n', '    \n', '    event EmergencyWithdrawERC20(address to, uint balance, address tokenTarget);\n', '    event EmergencyWithdrawETH(address to, uint balance);\n', '    event EmergencyAddressChanged(address account);\n', '\n', '    constructor(address targetToken) public {\n', '        setToken(targetToken);\n', '        setEmergencyWithdrawAddress(msg.sender);\n', '    }\n', '\n', '    function depositERC20(address account, uint256 amount) public whenNotPaused{\n', '        require(tokenAddress != address(0), "ERC20 token contract is not set. Please contact with the smart contract owner.");\n', '        require(account != address(0), "The 0x address is not allowed to deposit tokens in this contract.");\n', '        require(tokenInstance.allowance(account, address(this)) >= amount, "Owner did not allow this smart contract to transfer.");\n', '        require(amount > 0, "Amount can not be zero");\n', '        tokenInstance.transferFrom(account, address(this), amount);\n', '        balances[account] += amount;\n', '        emit Deposit(account, amount, block.number);\n', '    }\n', '\n', '    function withdrawERC20(uint amount) public whenNotPaused {\n', '        require(tokenAddress != address(0), "ERC20 token contract is not set. Please contact with the smart contract owner.");\n', '        require(msg.sender != address(0), "The 0x address is not allowed to withdraw tokens in this contract.");\n', '        require(amount > 0, "Amount can not be zero");\n', '        uint256 currentBalance = balances[msg.sender];\n', '        require(amount <= currentBalance,  "Amount is greater than current balance.");\n', '        balances[msg.sender] -= amount;\n', '        require(tokenInstance.transfer(msg.sender, amount), "Error while making ERC20 transfer");\n', '        emit Withdrawal(msg.sender, amount, block.number);\n', '    }\n', '\n', '    function emergencyWithdrawERC20(address tokenTarget, uint amount) public onlyOwner whenPaused {\n', '        require(tokenTarget != address(0), "Token address can not be the zero address");\n', '        require(emergencyWithdrawAddress != address(0), "The emergency withdraw address can not be the zero address");\n', '        uint currentBalance = IERC20(tokenTarget).balanceOf(address(this));\n', '        require(amount <= currentBalance, "Withdrawal amount is bigger than balance");\n', '        IERC20(tokenTarget).transfer(emergencyWithdrawAddress, amount);\n', '        emit EmergencyWithdrawERC20(emergencyWithdrawAddress, amount, tokenTarget);\n', '    }\n', '\n', '    function emergencyWithdrawETH(uint amount) public onlyOwner whenPaused {\n', '        require(emergencyWithdrawAddress != address(0), "The emergency withdraw address can not be the zero address");\n', '        uint currentBalance = address(this).balance;\n', '        require(amount <= currentBalance, "Withdrawal amount is bigger than balance");\n', '        emergencyWithdrawAddress.transfer(amount);\n', '        emit EmergencyWithdrawETH(emergencyWithdrawAddress, amount);\n', '    }\n', '\n', '    function setEmergencyWithdrawAddress(address withdrawAddress) public onlyOwner {\n', '        require(withdrawAddress != address(0), "The emergency withdraw address can not be the zero address");\n', '        emergencyWithdrawAddress = withdrawAddress;\n', '        emit EmergencyAddressChanged(emergencyWithdrawAddress);\n', '    }\n', '\n', '    function setToken(address contractAddress) public onlyOwner {\n', '        tokenAddress = contractAddress;\n', '        tokenInstance = IERC20(tokenAddress);\n', '    }\n', '\n', '    function () external {\n', '        require(false, "Fallback function is disabled");\n', '    }\n', '}']
