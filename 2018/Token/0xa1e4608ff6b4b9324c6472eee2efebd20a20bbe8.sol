['pragma solidity ^0.4.19;\n', '\n', '/* Functions from Kitten Coin main contract to be used by sale contract */\n', 'contract KittenCoin {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract KittenSelfDrop is Ownable {\n', '    KittenCoin public kittenContract;\n', '    uint8 public dropNumber;\n', '    uint256 public kittensDroppedToTheWorld;\n', '    uint256 public kittensRemainingToDrop;\n', '    uint256 public holderAmount;\n', '    uint256 public basicReward;\n', '    uint256 public donatorReward;\n', '    uint256 public holderReward;\n', '    uint8 public totalDropTransactions;\n', '    mapping (address => uint8) participants;\n', '    \n', '    \n', '    // Initialize the cutest contract in the world\n', '    function KittenSelfDrop () {\n', '        address c = 0xac2BD14654BBf22F9d8f20c7b3a70e376d3436B4; // set Kitten Coin contract address\n', '        kittenContract = KittenCoin(c); \n', '        dropNumber = 1;\n', '        kittensDroppedToTheWorld = 0;\n', '        kittensRemainingToDrop = 0;\n', '        basicReward = 50000000000; // set initial basic reward to 500 Kitten Coins\n', '        donatorReward = 50000000000; // set initial donator reward to 500 Kitten Coins\n', '        holderReward = 50000000000; // set initial holder reward to 500 Kitten Coins\n', '        holderAmount = 5000000000000; // set initial hold amount to 50000 Kitten Coins for extra reward\n', '        totalDropTransactions = 0;\n', '    }\n', '    \n', '    \n', '    // Drop some wonderful cutest Kitten Coins to sender every time contract is called without function\n', '    function() payable {\n', '        require (participants[msg.sender] < dropNumber && kittensRemainingToDrop > basicReward);\n', '        uint256 tokensIssued = basicReward;\n', '        // Send extra Kitten Coins bonus if participant is donating Ether\n', '        if (msg.value > 0)\n', '            tokensIssued += donatorReward;\n', '        // Send extra Kitten Coins bonus if participant holds at least holderAmount\n', '        if (kittenContract.balanceOf(msg.sender) >= holderAmount)\n', '            tokensIssued += holderReward;\n', '        // Check if number of Kitten Coins to issue is higher than coins remaining for airdrop (last transaction of airdrop)\n', '        if (tokensIssued > kittensRemainingToDrop)\n', '            tokensIssued = kittensRemainingToDrop;\n', '        \n', '        // Give away these so cute Kitten Coins to contributor\n', '        kittenContract.transfer(msg.sender, tokensIssued);\n', '        participants[msg.sender] = dropNumber;\n', '        kittensRemainingToDrop -= tokensIssued;\n', '        kittensDroppedToTheWorld += tokensIssued;\n', '        totalDropTransactions += 1;\n', '    }\n', '    \n', '    \n', '    function participant(address part) public constant returns (uint8 participationCount) {\n', '        return participants[part];\n', '    }\n', '    \n', '    \n', '    // Increase the airdrop count to allow sweet humans asking for more beautiful Kitten Coins\n', '    function setDropNumber(uint8 dropN) public onlyOwner {\n', '        dropNumber = dropN;\n', '        kittensRemainingToDrop = kittenContract.balanceOf(this);\n', '    }\n', '    \n', '    \n', '    // Define amount of Kitten Coins to hold in order to get holder reward\n', '    function setHolderAmount(uint256 amount) public onlyOwner {\n', '        holderAmount = amount;\n', '    }\n', '    \n', '    \n', '    // Define how many wonderful Kitten Coins contributors will receive for participating the selfdrop\n', '    function setRewards(uint256 basic, uint256 donator, uint256 holder) public onlyOwner {\n', '        basicReward = basic;\n', '        donatorReward = donator;\n', '        holderReward = holder;\n', '    }\n', '    \n', '    \n', '    // Sends all ETH contributions to lovely kitten owner\n', '    function withdrawAll() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '    \n', '    // Sends all remaining Kitten Coins to owner, just in case of emergency\n', '    function withdrawKittenCoins() public onlyOwner {\n', '        kittenContract.transfer(owner, kittenContract.balanceOf(this));\n', '        kittensRemainingToDrop = 0;\n', '    }\n', '    \n', '    \n', '    // Update number of Kitten Coins remaining for drop, just in case it is needed\n', '    function updateKittenCoinsRemainingToDrop() public {\n', '        kittensRemainingToDrop = kittenContract.balanceOf(this);\n', '    }\n', '    \n', '}']