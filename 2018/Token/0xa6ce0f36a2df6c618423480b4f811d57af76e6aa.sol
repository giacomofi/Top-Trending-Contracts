['pragma solidity 0.4.21;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256){\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256){\n', '        assert(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256){\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256){\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address who) constant public returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) constant public returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address  owner;\n', '\n', '    function Ownable() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public{\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool){\n', '        assert(0 < _value);\n', '        assert(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the balance of. \n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) constant public returns (uint256 balance){\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        assert (balances[_from] >= _value);\n', '        assert (_allowance >= _value);\n', '        assert (_value > 0);\n', '        // assert ( balances[_to] + _value > balances[_to]);\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool){\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        // allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        // already 0 to mitigate the race condition described here:\n', '        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining){\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', 'contract  Ammbr is StandardToken, Ownable {\n', '    string public name = &#39;&#39;;\n', '    string public symbol = &#39;&#39;;\n', '    uint8 public  decimals = 0;\n', '    uint256 public maxMintBlock = 0;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will recieve the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner  public returns (bool){\n', '        assert(maxMintBlock == 0);\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        maxMintBlock = 1;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function is used to perform a multi-transfer operation. This could play a significant role in the Ammbr Mesh Routing protocol.\n', '     *  \n', '     * Mechanics:\n', '     * Sends tokens from Sender to destinations[0..n] the amount tokens[0..n]. Both arrays\n', '     * must have the same size, and must have a greater-than-zero length. Max array size is 127.\n', '     * \n', '     * IMPORTANT: ANTIPATTERN\n', '     * This function performs a loop over arrays. Unless executed in a controlled environment,\n', '     * it has the potential of failing due to gas running out. This is not dangerous, yet care\n', '     * must be taken to prevent quality being affected.\n', '     * \n', '     * @param destinations An array of destinations we would be sending tokens to\n', '     * @param tokens An array of tokens, sent to destinations (index is used for destination->token match)\n', '     */\n', '    function multiTransfer(address[] destinations, uint[] tokens) public returns (bool success){\n', '        // Two variables must match in length, and must contain elements\n', '        // Plus, a maximum of 127 transfers are supported\n', '        assert(destinations.length > 0);\n', '        assert(destinations.length < 128);\n', '        assert(destinations.length == tokens.length);\n', '        // Check total requested balance\n', '        uint8 i = 0;\n', '        uint totalTokensToTransfer = 0;\n', '        for (i = 0; i < destinations.length; i++){\n', '            assert(tokens[i] > 0);\n', '            totalTokensToTransfer += tokens[i];\n', '        }\n', '        // Do we have enough tokens in hand?\n', '        assert (balances[msg.sender] > totalTokensToTransfer);\n', '        // We have enough tokens, execute the transfer\n', '        balances[msg.sender] = balances[msg.sender].sub(totalTokensToTransfer);\n', '        for (i = 0; i < destinations.length; i++){\n', '            // Add the token to the intended destination\n', '            balances[destinations[i]] = balances[destinations[i]].add(tokens[i]);\n', '            // Call the event...\n', '            emit Transfer(msg.sender, destinations[i], tokens[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function Ammbr(string _name , string _symbol , uint8 _decimals) public{\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '}']