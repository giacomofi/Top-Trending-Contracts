['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) view public returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) view public returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  //время заморозки токенов для команды 2018-10-31T00:00:00+00:00 in ISO 8601\n', '  uint public constant timeFreezeTeamTokens = 1540944000;\n', '  \n', '  address public walletTeam = 0x7eF1ac89B028A9Bc20Ce418c1e6973F4c7977eB0;\n', '\n', '  modifier onlyPayloadSize(uint size) {\n', '       assert(msg.data.length >= size + 4);\n', '       _;\n', '   }\n', '   \n', '   modifier canTransfer() {\n', '       if(msg.sender == walletTeam){\n', '          require(now > timeFreezeTeamTokens); \n', '       }\n', '        _;\n', '   }\n', '\n', '\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value)canTransfer onlyPayloadSize(2 * 32) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) view public returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value)canTransfer public returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public{\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public{\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', ' \n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint _value) public {\n', '    require(_value > 0);\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', ' \n', '  event Burn(address indexed burner, uint indexed value);\n', ' \n', '}\n', '\n', '/**\n', '* @dev https://t.me/devKatAlexeeva\n', '*/\n', '\n', 'contract LoanBit is BurnableToken, Ownable {\n', '    \n', '    string public constant name = "LoanBit";\n', '    \n', '    string public constant symbol = "LBT";\n', '    \n', '    uint public constant decimals = 18;\n', '    \n', '    \n', '    \n', '    //Внутренние кошельки компании\n', '    address public walletICO =     0x8ffF4a8c4F1bd333a215f072ef9AEF934F677bFa;\n', '    uint public tokenICO = 31450000*10**decimals; \n', '    address public walletTeam =    0x7eF1ac89B028A9Bc20Ce418c1e6973F4c7977eB0;\n', '    uint public tokenTeam = 2960000*10**decimals; \n', '    address public walletAdvisor = 0xB6B01233cE7794D004aF238b3A53A0FcB1c5D8BD;\n', '    uint public tokenAdvisor = 1480000*10**decimals; \n', '    \n', '    //кошельки для баунти программы\n', '    \n', '    address public walletAvatar =   0x9E6bA5600cF5f4656697E3aF2A963f56f522991C;\n', '    uint public tokenAvatar = 444000*10**decimals;\n', '    address public walletFacebook = 0x43827ba49d8eBd20afD137791227d3139E5BD074;\n', '    uint public tokenFacebook = 155400*10**decimals;\n', '    address public walletTwitter =  0xeFF945E9F29eA8c7a94F84Fb9fFd711d179ab520;\n', '    uint public tokenTwitter = 155400*10**decimals;\n', '    address public walletBlogs   =  0x16Df4Dc0Dd47dDD47759d54957C021650c76aed1;\n', '    uint public tokenBlogs = 210900*10**decimals;\n', '    address public walletTranslate =  0x19A903405fDcce9b32f48882C698A3842f09253F;\n', '    uint public tokenTranslate = 133200*10**decimals;\n', '    address public walletEmail   =  0x3912AE42372ff35f56d2f7f26313da7F48Fe5248;\n', '    uint public tokenEmail = 11100*10**decimals;\n', '    \n', '    //кошелек разработчика\n', '    address public walletDev = 0xF4e16e79102B19702Cc10Cbcc02c6EC0CcAD8b1D;\n', '    uint public tokenDev = 6000*10**decimals;\n', '    \n', '    function LoanBit()public{\n', '        \n', '        totalSupply = 37000000*10**decimals;\n', '        \n', '        balances[walletICO] = tokenICO;\n', '        transferFrom(this,walletICO, 0);\n', '        \n', '        \n', '        balances[walletTeam] = tokenTeam;\n', '        transferFrom(this,walletTeam, 0);\n', '        \n', '        \n', '        balances[walletAdvisor] = tokenAdvisor;\n', '        transferFrom(this,walletAdvisor, 0);\n', '        \n', '        balances[walletDev] = tokenDev;\n', '        transferFrom(this,walletDev, 0);\n', '        \n', '        balances[walletAvatar] = tokenAvatar;\n', '        transferFrom(this,walletAvatar, 0);\n', '        \n', '        balances[walletFacebook] = tokenFacebook;\n', '        transferFrom(this,walletFacebook, 0);\n', '        \n', '        balances[walletTwitter] = tokenTwitter;\n', '        transferFrom(this,walletTwitter, 0);\n', '        \n', '        balances[walletBlogs] = tokenBlogs;\n', '        transferFrom(this,walletBlogs, 0);\n', '        \n', '        balances[walletTranslate] = tokenTranslate;\n', '        transferFrom(this,walletTranslate, 0);\n', '        \n', '        balances[walletEmail] = tokenEmail;\n', '        transferFrom(this,walletEmail, 0);\n', '        \n', '    }\n', '    \n', '   \n', '}']