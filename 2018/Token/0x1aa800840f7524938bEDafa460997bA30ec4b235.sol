['pragma solidity ^0.4.18;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ConfigurableToken is StandardToken, Ownable {\n', '  uint256 public totalTokens = uint256(1000000000).mul(1 ether);\n', '  uint256 public tokensForSale = uint256(750000000).mul(1 ether);\n', '  uint256 public bountyTokens = uint256(25000000).mul(1 ether);\n', '  uint256 public teamTokens = uint256(100000000).mul(1 ether);\n', '  uint256 public teamReleased = 0;\n', '  uint256 public employeePoolTokens = uint256(50000000).mul(1 ether);\n', '  uint256 public liquidityPoolTokens = uint256(50000000).mul(1 ether);\n', '  uint256 public advisorsTokens = uint256(25000000).mul(1 ether);\n', '  uint256 public advisorsReleased = 0;\n', '  uint256 public listingDate = 0;\n', '  uint256 tokensUnlockPeriod = 2592000; // 30 days\n', '  uint256 vestingPeriod = 15724800; // 182 days (6 months)\n', '  address public saleContract;\n', '  address public advisors;\n', '  address public team;\n', '  bool public tokensLocked = true;\n', '\n', '  event SaleContractActivation(address saleContract, uint256 tokensForSale);\n', '\n', '  event Burn(address tokensOwner, uint256 burnedTokensAmount);\n', '\n', '  modifier tokenNotLocked() {\n', '    if (tokensLocked && msg.sender != owner) {\n', '      if (listingDate > 0 && now.sub(listingDate) > tokensUnlockPeriod) {\n', '        tokensLocked = false;\n', '      } else {\n', '        revert();\n', '      }\n', '    }\n', '    _;\n', '  }\n', '\n', '  function activateSaleContract(address _saleContract) public onlyOwner {\n', '    require(_saleContract != address(0));\n', '    saleContract = _saleContract;\n', '    balances[saleContract] = balances[saleContract].add(tokensForSale);\n', '    totalSupply_ = totalSupply_.add(tokensForSale);\n', '    require(totalSupply_ <= totalTokens);\n', '    Transfer(address(this), saleContract, tokensForSale);\n', '    SaleContractActivation(saleContract, tokensForSale);\n', '  }\n', '\n', '  function isListing() public onlyOwner {\n', '    listingDate = now;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public tokenNotLocked returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public tokenNotLocked returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public tokenNotLocked returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public tokenNotLocked returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public tokenNotLocked returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '\n', '  function saleTransfer(address _to, uint256 _value) public returns (bool) {\n', '    require(saleContract != address(0));\n', '    require(msg.sender == saleContract);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function sendBounty(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '    uint256 value = _value.mul(1 ether);\n', '    require(bountyTokens >= value);\n', '    totalSupply_ = totalSupply_.add(value);\n', '    require(totalSupply_ <= totalTokens);\n', '    balances[_to] = balances[_to].add(value);\n', '    bountyTokens = bountyTokens.sub(value);\n', '    Transfer(address(this), _to, value);\n', '    return true;\n', '  }\n', '\n', '  function burn(uint256 _value) public onlyOwner returns (bool) {\n', '    uint256 value = _value.mul(1 ether);\n', '    require(balances[owner] >= value);\n', '    require(totalSupply_ >= value);\n', '    balances[owner] = balances[owner].sub(value);\n', '    totalSupply_ = totalSupply_.sub(value);\n', '    Burn(owner, value);\n', '    return true;\n', '  }\n', '\n', '  function burnTokensForSale() public returns (bool) {\n', '    require(saleContract != address(0));\n', '    require(msg.sender == saleContract);\n', '    uint256 tokens = balances[saleContract];\n', '    require(tokens > 0);\n', '    require(tokens <= totalSupply_);\n', '    balances[saleContract] =0;\n', '    totalSupply_ = totalSupply_.sub(tokens);\n', '    Burn(saleContract, tokens);\n', '    return true;\n', '  }\n', '\n', '  function getVestingPeriodNumber() public view returns (uint256) {\n', '    if (listingDate == 0) return 0;\n', '    return now.sub(listingDate).div(vestingPeriod);\n', '  }\n', '\n', '  function releaseAdvisorsTokens() public returns (bool) {\n', '    uint256 vestingPeriodNumber = getVestingPeriodNumber();\n', '    uint256 percents = vestingPeriodNumber.mul(50);\n', '    if (percents > 100) percents = 100;\n', '    uint256 tokensToRelease = advisorsTokens.mul(percents).div(100).sub(advisorsReleased);\n', '    require(tokensToRelease > 0);\n', '    totalSupply_ = totalSupply_.add(tokensToRelease);\n', '    require(totalSupply_ <= totalTokens);\n', '    balances[advisors] = balances[advisors].add(tokensToRelease);\n', '    advisorsReleased = advisorsReleased.add(tokensToRelease);\n', '    require(advisorsReleased <= advisorsTokens);\n', '    Transfer(address(this), advisors, tokensToRelease);\n', '    return true;\n', '  }\n', '\n', '  function releaseTeamTokens() public returns (bool) {\n', '    uint256 vestingPeriodNumber = getVestingPeriodNumber();\n', '    uint256 percents = vestingPeriodNumber.mul(25);\n', '    if (percents > 100) percents = 100;\n', '    uint256 tokensToRelease = teamTokens.mul(percents).div(100).sub(teamReleased);\n', '    require(tokensToRelease > 0);\n', '    totalSupply_ = totalSupply_.add(tokensToRelease);\n', '    require(totalSupply_ <= totalTokens);\n', '    balances[team] = balances[team].add(tokensToRelease);\n', '    teamReleased = teamReleased.add(tokensToRelease);\n', '    require(teamReleased <= teamTokens);\n', '    Transfer(address(this), team, tokensToRelease);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract IDAP is ConfigurableToken {\n', '  string public constant name = "IDAP";\n', '  string public constant symbol = "IDAP";\n', '  uint32 public constant decimals = 18;\n', '\n', '  function IDAP(address _newOwner, address _team, address _advisors) public {\n', '    require(_newOwner != address(0));\n', '    require(_team != address(0));\n', '    require(_advisors != address(0));\n', '    totalSupply_ = employeePoolTokens.add(liquidityPoolTokens); \n', '    owner = _newOwner;\n', '    team = _team;\n', '    advisors = _advisors;\n', '    balances[owner] = totalSupply_;\n', '    Transfer(address(this), owner, totalSupply_);\n', '  }\n', '}']