['/*! ppmt.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author my.life.cookie | License: MIT */\n', '\n', 'pragma solidity 0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if(a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '        OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    bool public paused = false;\n', '\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    modifier whenNotPaused() { require(!paused); _; }\n', '    modifier whenPaused() { require(paused); _; }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function balanceOf(address who) public view returns(uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '    function approve(address spender, uint256 value) public returns(bool);\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns(uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n', '        require(_to.length == _value.length);\n', '\n', '        for(uint i = 0; i < _to.length; i++) {\n', '            transfer(_to[i], _value[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '\n', '        if(_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() { require(!mintingFinished); _; }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns(bool) {\n', '        mintingFinished = true;\n', '\n', '        MintFinished();\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '    uint256 public cap;\n', '\n', '    function CappedToken(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n', '        require(totalSupply.add(_amount) <= cap);\n', '\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract RewardToken is StandardToken, Ownable {\n', '    struct Payment {\n', '        uint time;\n', '        uint amount;\n', '    }\n', '\n', '    Payment[] public repayments;\n', '    mapping(address => Payment[]) public rewards;\n', '\n', '    event Reward(address indexed to, uint256 amount);\n', '\n', '    function repayment() onlyOwner payable public {\n', '        require(msg.value >= 0.01 * 1 ether);\n', '\n', '        repayments.push(Payment({time : now, amount : msg.value}));\n', '    }\n', '\n', '    function _reward(address _to) private returns(bool) {\n', '        if(rewards[_to].length < repayments.length) {\n', '            uint sum = 0;\n', '            for(uint i = rewards[_to].length; i < repayments.length; i++) {\n', '                uint amount = balances[_to] > 0 ? (repayments[i].amount * balances[_to] / totalSupply) : 0;\n', '                rewards[_to].push(Payment({time : now, amount : amount}));\n', '                sum += amount;\n', '            }\n', '\n', '            if(sum > 0) {\n', '                _to.transfer(sum);\n', '                Reward(_to, sum);\n', '            }\n', '\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function reward() public returns(bool) {\n', '        return _reward(msg.sender);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        _reward(msg.sender);\n', '        _reward(_to);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n', '        _reward(msg.sender);\n', '        for(uint i = 0; i < _to.length; i++) {\n', '            _reward(_to[i]);\n', '        }\n', '\n', '        return super.multiTransfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        _reward(_from);\n', '        _reward(_to);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '/*\n', '    ICO Patriot Project Mall\n', '    - Эмиссия токенов ограничена (всего 1 800 000 токенов, токены выпускаются во время Crowdsale)\n', '    - Цена токена во время старта: 1 ETH = 140 токенов (цену можно изменить во время ICO)\n', '    - Минимальная сумма покупки: 0.01 ETH\n', '    - Токенов на продажу 1 791 000\n', '    - Средства от покупки токенов остаются на контракте\n', '    - Закрытие Crowdsale происходит с помощью функции `closeCrowdsale()`: управление токеном и не раскупленные токены передаются бенефициару, средства с контракта передаются бенефициару\n', '    - Возрат происходит функцией `refundCrowdsale()` Crowdsale закрывается а вкладчики могут вернуть свои вклады функцией `refund()` управление токеном остается Crowdsale\n', '    - Измение цены токена происходит функцией `setTokenRate(_value)`, где `_value` - кол-во токенов покумаемое за 1 Ether, смена стоимости токена доступно только во время паузы администратору, после завершения Crowdsale функция становится недоступной\n', '    - Измение размера бонуса происходит функцией `setBonusPercent(_value)`, где `_value` - % начисляемых бонусов при покупке токенов, смена стоимости токена доступно только во время паузы администратору, после завершения Crowdsale функция становится недоступной\n', '    - На Token могут быть начислены дивиденды функцией `repayment()`\n', '    - Чтобы забрать дивиденды держателю токенов необходимо вызвать у Token функцию `reward()`\n', '*/\n', 'contract Token is CappedToken, BurnableToken, RewardToken {\n', '    function Token() CappedToken(1800000 * 1 ether) StandardToken("Patriot Project Mall Token", "PPMT", 18) public {\n', '        \n', '    }\n', '}\n', '\n', 'contract Crowdsale is Pausable {\n', '    using SafeMath for uint;\n', '\n', '    Token public token;\n', '    address public beneficiary = 0x9028233131d986484293eEde62507E3d75d6284e;\n', '\n', '    uint public collectedWei;\n', '    uint public refundedWei;\n', '    uint public tokensSold;\n', '\n', '    uint public tokensForSale = 1791000 * 1 ether;\n', '    uint public priceTokenWei = 7142857142857142;\n', '    uint public bonusPercent = 0;\n', '\n', '    bool public crowdsaleClosed = false;\n', '    bool public crowdsaleRefund = false;\n', '\n', '    mapping(address => uint256) public purchaseBalances; \n', '\n', '    event Rurchase(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n', '    event Refund(address indexed holder, uint256 etherAmount);\n', '    event CrowdsaleClose();\n', '    event CrowdsaleRefund();\n', '\n', '    function Crowdsale() public {\n', '        token = new Token();\n', '    }\n', '\n', '    function() payable public {\n', '        purchase();\n', '    }\n', '\n', '    function setTokenRate(uint _value) onlyOwner whenPaused public {\n', '        require(!crowdsaleClosed);\n', '        priceTokenWei = 1 ether / _value;\n', '    }\n', '\n', '    function setBonusPercent(uint _value) onlyOwner whenPaused public {\n', '        require(!crowdsaleClosed);\n', '        bonusPercent = _value;\n', '    }\n', '    \n', '    function purchase() whenNotPaused payable public {\n', '        require(!crowdsaleClosed);\n', '        require(tokensSold < tokensForSale);\n', '        require(msg.value >= 0.01 ether);\n', '\n', '        uint sum = msg.value;\n', '        uint amount = sum.mul(1 ether).div(priceTokenWei);\n', '        uint retSum = 0;\n', '\n', '        if(bonusPercent > 0) {\n', '            amount = amount.div(100).mul(bonusPercent);\n', '        }\n', '        \n', '        if(tokensSold.add(amount) > tokensForSale) {\n', '            uint retAmount = tokensSold.add(amount).sub(tokensForSale);\n', '            retSum = retAmount.mul(priceTokenWei).div(1 ether);\n', '\n', '            amount = amount.sub(retAmount);\n', '            sum = sum.sub(retSum);\n', '        }\n', '\n', '        tokensSold = tokensSold.add(amount);\n', '        collectedWei = collectedWei.add(sum);\n', '        purchaseBalances[msg.sender] = purchaseBalances[msg.sender].add(sum);\n', '\n', '        token.mint(msg.sender, amount);\n', '\n', '        if(retSum > 0) {\n', '            msg.sender.transfer(retSum);\n', '        }\n', '\n', '        Rurchase(msg.sender, amount, sum);\n', '    }\n', '\n', '    function refund() public {\n', '        require(crowdsaleRefund);\n', '        require(purchaseBalances[msg.sender] > 0);\n', '\n', '        uint sum = purchaseBalances[msg.sender];\n', '\n', '        purchaseBalances[msg.sender] = 0;\n', '        refundedWei = refundedWei.add(sum);\n', '\n', '        msg.sender.transfer(sum);\n', '        \n', '        Refund(msg.sender, sum);\n', '    }\n', '\n', '    function closeCrowdsale() onlyOwner public {\n', '        require(!crowdsaleClosed);\n', '        \n', '        beneficiary.transfer(this.balance);\n', '        token.mint(beneficiary, token.cap().sub(token.totalSupply()));\n', '        token.transferOwnership(beneficiary);\n', '\n', '        crowdsaleClosed = true;\n', '\n', '        CrowdsaleClose();\n', '    }\n', '\n', '    function refundCrowdsale() onlyOwner public {\n', '        require(!crowdsaleClosed);\n', '\n', '        crowdsaleRefund = true;\n', '        crowdsaleClosed = true;\n', '\n', '        CrowdsaleRefund();\n', '    }\n', '}']