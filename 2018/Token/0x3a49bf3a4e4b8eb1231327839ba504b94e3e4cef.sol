['pragma solidity ^0.4.23;\n', '\n', 'contract NotASecurity {\n', '  uint public totalSupply;\n', '\n', '  uint public decimals = 18;\n', '  string public symbol = "NOT";\n', '  string public name = "NotASecurity";\n', '\n', '  mapping (address => uint) public balanceOf;\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '\n', '  address[11] public benefactors;\n', '  uint public benefactorsBalance;\n', '\n', '  // Caching things for performance reasons\n', '  mapping (address => uint8) private benefactorMap;\n', '  address private lowestBenefactor;\n', '\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '\n', '  constructor (uint _fee) public {\n', '    benefactors[1] = msg.sender;\n', '    lowestBenefactor = address(0);\n', '    benefactorMap[msg.sender] = 1;\n', '    balanceOf[msg.sender] = _fee;\n', '    totalSupply = _fee;\n', '    benefactorsBalance = _fee;\n', '  }\n', '\n', '  function buy() payable public returns (uint) {\n', '    uint _wei = msg.value;\n', '    address _investor = msg.sender;\n', '\n', '    require(_wei > 0);\n', '    require(distribute(_wei));\n', '\n', '    balanceOf[_investor] += _wei;\n', '    totalSupply += _wei;\n', '\n', '    require(reorganize(_wei, _investor));\n', '\n', '    return _wei;\n', '  }\n', '\n', '  function () payable public {\n', '    buy();\n', '  }\n', '\n', '  event Distribution(address _addr, uint _amount);\n', '\n', '  function distribute(uint _amount) public returns (bool) {\n', '    for (uint _i = 1; _i < benefactors.length; _i++) {\n', '      address _benefactor = benefactors[_i];\n', '      uint _benefactorBalance = balanceOf[_benefactor];\n', '\n', '      uint _amountToTransfer = (_benefactorBalance * _amount) / benefactorsBalance;\n', '      emit Distribution(_benefactor, _amountToTransfer);\n', '\n', '      if (_amountToTransfer > 0 && _benefactor != address(0)) {\n', '        _benefactor.transfer(_amountToTransfer);\n', '      }\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function findLowestBenefactor() public returns (address) {\n', '    address _lowestBenefactor = benefactors[1];\n', '    address _benefactor;\n', '    for (\n', '      uint _j = 2;\n', '      _j < benefactors.length;\n', '      _j++\n', '    ) {\n', '      _benefactor = benefactors[_j];\n', '      if (_benefactor == address(0)) {\n', '        return _benefactor;\n', '\n', '      } else if (balanceOf[_benefactor] < balanceOf[_lowestBenefactor]) {\n', '        _lowestBenefactor = _benefactor;\n', '      }\n', '    }\n', '    return _lowestBenefactor;\n', '  }\n', '\n', '  function findEmptyBenefactorIndex() public returns (uint8) {\n', '    for (uint8 _i = 1; _i < benefactors.length; _i++) {\n', '      if (benefactors[_i] == address(0)) {\n', '        return _i;\n', '      }\n', '    }\n', '\n', '    return 0;\n', '  }\n', '\n', '  function reorganize(uint _amount, address _investor) public returns (bool) {\n', '    // if investor is already a benefactor\n', '    if (benefactorMap[_investor] > 0) {\n', '      benefactorsBalance += _amount;\n', '\n', '    // if investor is now a top token holder\n', '    } else if (balanceOf[_investor] > balanceOf[lowestBenefactor]) {\n', '      bool _lowestBenefactorEmpty = lowestBenefactor == address(0);\n', '      uint _oldBalance = balanceOf[lowestBenefactor];\n', '      uint8 _indexToSwap = _lowestBenefactorEmpty\n', '        ? findEmptyBenefactorIndex()\n', '        : benefactorMap[lowestBenefactor];\n', '\n', '      // Swap out benefactors\n', '      if (!_lowestBenefactorEmpty) {\n', '        benefactorMap[lowestBenefactor] = 0;\n', '      }\n', '      benefactors[_indexToSwap] = _investor;\n', '      benefactorMap[_investor] = _indexToSwap;\n', '      lowestBenefactor = findLowestBenefactor();\n', '\n', '      // Adjust benefactors balance\n', '      benefactorsBalance += (balanceOf[_investor] - _oldBalance);\n', '\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function _transfer(\n', '    address _from,\n', '    address _to,\n', '    uint _amount\n', '  ) internal returns (bool success) {\n', '    require(_to != address(0));\n', '    require(_to != address(this));\n', '    require(_amount > 0);\n', '    require(balanceOf[_from] >= _amount);\n', '    require(balanceOf[_to] + _amount > balanceOf[_to]);\n', '\n', '    balanceOf[_from] -= _amount;\n', '    balanceOf[_to] += _amount;\n', '\n', '    // reorganize for both addresses\n', '\n', '    emit Transfer(msg.sender, _to, _amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _amount) public returns (bool success) {\n', '    return _transfer(msg.sender, _to, _amount);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _amount) external returns (bool success) {\n', '    require(allowed[_from][msg.sender] >= _amount);\n', '\n', '    bool _tranferSuccess = _transfer(_from, _to, _amount);\n', '    if (_tranferSuccess) {\n', '      allowed[_from][msg.sender] -= _amount;\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function approve(address _spender, uint _value) external returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) external constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract NotASecurity {\n', '  uint public totalSupply;\n', '\n', '  uint public decimals = 18;\n', '  string public symbol = "NOT";\n', '  string public name = "NotASecurity";\n', '\n', '  mapping (address => uint) public balanceOf;\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '\n', '  address[11] public benefactors;\n', '  uint public benefactorsBalance;\n', '\n', '  // Caching things for performance reasons\n', '  mapping (address => uint8) private benefactorMap;\n', '  address private lowestBenefactor;\n', '\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '\n', '  constructor (uint _fee) public {\n', '    benefactors[1] = msg.sender;\n', '    lowestBenefactor = address(0);\n', '    benefactorMap[msg.sender] = 1;\n', '    balanceOf[msg.sender] = _fee;\n', '    totalSupply = _fee;\n', '    benefactorsBalance = _fee;\n', '  }\n', '\n', '  function buy() payable public returns (uint) {\n', '    uint _wei = msg.value;\n', '    address _investor = msg.sender;\n', '\n', '    require(_wei > 0);\n', '    require(distribute(_wei));\n', '\n', '    balanceOf[_investor] += _wei;\n', '    totalSupply += _wei;\n', '\n', '    require(reorganize(_wei, _investor));\n', '\n', '    return _wei;\n', '  }\n', '\n', '  function () payable public {\n', '    buy();\n', '  }\n', '\n', '  event Distribution(address _addr, uint _amount);\n', '\n', '  function distribute(uint _amount) public returns (bool) {\n', '    for (uint _i = 1; _i < benefactors.length; _i++) {\n', '      address _benefactor = benefactors[_i];\n', '      uint _benefactorBalance = balanceOf[_benefactor];\n', '\n', '      uint _amountToTransfer = (_benefactorBalance * _amount) / benefactorsBalance;\n', '      emit Distribution(_benefactor, _amountToTransfer);\n', '\n', '      if (_amountToTransfer > 0 && _benefactor != address(0)) {\n', '        _benefactor.transfer(_amountToTransfer);\n', '      }\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function findLowestBenefactor() public returns (address) {\n', '    address _lowestBenefactor = benefactors[1];\n', '    address _benefactor;\n', '    for (\n', '      uint _j = 2;\n', '      _j < benefactors.length;\n', '      _j++\n', '    ) {\n', '      _benefactor = benefactors[_j];\n', '      if (_benefactor == address(0)) {\n', '        return _benefactor;\n', '\n', '      } else if (balanceOf[_benefactor] < balanceOf[_lowestBenefactor]) {\n', '        _lowestBenefactor = _benefactor;\n', '      }\n', '    }\n', '    return _lowestBenefactor;\n', '  }\n', '\n', '  function findEmptyBenefactorIndex() public returns (uint8) {\n', '    for (uint8 _i = 1; _i < benefactors.length; _i++) {\n', '      if (benefactors[_i] == address(0)) {\n', '        return _i;\n', '      }\n', '    }\n', '\n', '    return 0;\n', '  }\n', '\n', '  function reorganize(uint _amount, address _investor) public returns (bool) {\n', '    // if investor is already a benefactor\n', '    if (benefactorMap[_investor] > 0) {\n', '      benefactorsBalance += _amount;\n', '\n', '    // if investor is now a top token holder\n', '    } else if (balanceOf[_investor] > balanceOf[lowestBenefactor]) {\n', '      bool _lowestBenefactorEmpty = lowestBenefactor == address(0);\n', '      uint _oldBalance = balanceOf[lowestBenefactor];\n', '      uint8 _indexToSwap = _lowestBenefactorEmpty\n', '        ? findEmptyBenefactorIndex()\n', '        : benefactorMap[lowestBenefactor];\n', '\n', '      // Swap out benefactors\n', '      if (!_lowestBenefactorEmpty) {\n', '        benefactorMap[lowestBenefactor] = 0;\n', '      }\n', '      benefactors[_indexToSwap] = _investor;\n', '      benefactorMap[_investor] = _indexToSwap;\n', '      lowestBenefactor = findLowestBenefactor();\n', '\n', '      // Adjust benefactors balance\n', '      benefactorsBalance += (balanceOf[_investor] - _oldBalance);\n', '\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function _transfer(\n', '    address _from,\n', '    address _to,\n', '    uint _amount\n', '  ) internal returns (bool success) {\n', '    require(_to != address(0));\n', '    require(_to != address(this));\n', '    require(_amount > 0);\n', '    require(balanceOf[_from] >= _amount);\n', '    require(balanceOf[_to] + _amount > balanceOf[_to]);\n', '\n', '    balanceOf[_from] -= _amount;\n', '    balanceOf[_to] += _amount;\n', '\n', '    // reorganize for both addresses\n', '\n', '    emit Transfer(msg.sender, _to, _amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _amount) public returns (bool success) {\n', '    return _transfer(msg.sender, _to, _amount);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _amount) external returns (bool success) {\n', '    require(allowed[_from][msg.sender] >= _amount);\n', '\n', '    bool _tranferSuccess = _transfer(_from, _to, _amount);\n', '    if (_tranferSuccess) {\n', '      allowed[_from][msg.sender] -= _amount;\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function approve(address _spender, uint _value) external returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) external constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}']
