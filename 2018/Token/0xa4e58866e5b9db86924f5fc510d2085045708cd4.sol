['// 0.4.20+commit.3155dd80.Emscripten.clang\n', 'pragma solidity ^0.4.20;\n', '\n', '/**\n', ' * Ethereum Token callback\n', ' */\n', 'interface tokenRecipient {\n', '  function receiveApproval( address from, uint256 value, bytes data ) external;\n', '}\n', '\n', '/**\n', ' * ERC223 callback\n', ' */\n', 'interface ContractReceiver {\n', '  function tokenFallback( address from, uint value, bytes data ) external;\n', '}\n', '\n', '/**\n', ' * Ownable Contract\n', ' */\n', 'contract Owned {\n', '  address public owner;\n', '\n', '  function owned() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function changeOwner(address _newOwner) public onlyOwner {\n', '    owner = _newOwner;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require (msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * ERC20 token with added ERC223 and Ethereum-Token support\n', ' *\n', ' * Blend of multiple interfaces:\n', ' * - https://theethereum.wiki/w/index.php/ERC20_Token_Standard\n', ' * - https://www.ethereum.org/token (uncontrolled, non-standard)\n', ' * - https://github.com/Dexaran/ERC23-tokens/blob/Recommended/ERC223_Token.sol\n', ' */\n', 'contract Token is Owned {\n', '  string  public name;\n', '  string  public symbol;\n', '  uint8   public decimals = 18;\n', '  uint256 public totalSupply;\n', '\n', '  mapping( address => uint256 ) balances;\n', '  mapping( address => mapping(address => uint256) ) allowances;\n', '\n', '  /**\n', '   * ERC20 Approval Event\n', '   */\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint value\n', '  );\n', '\n', '  /**\n', '   * ERC20-compatible version only, breaks ERC223 compliance but block\n', '   * explorers and exchanges expect ERC20. Also, cannot overload events\n', '   */\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  function Token(\n', '    uint256 _initialSupply,\n', '    string _tokenName,\n', '    string _tokenSymbol\n', '  )\n', '    public\n', '  {\n', '    totalSupply = _initialSupply * 10**18;\n', '    balances[msg.sender] = _initialSupply * 10**18;\n', '\n', '    name = _tokenName;\n', '    symbol = _tokenSymbol;\n', '  }\n', '\n', '  /**\n', '   * ERC20 Balance Of Function\n', '   */\n', '  function balanceOf( address owner ) public constant returns (uint) {\n', '    return balances[owner];\n', '  }\n', '\n', '  /**\n', '   * ERC20 Approve Function\n', '   */\n', '  function approve( address spender, uint256 value ) public returns (bool success) {\n', '    // WARNING! When changing the approval amount, first set it back to zero\n', '    // AND wait until the transaction is mined. Only afterwards set the new\n', '    // amount. Otherwise you may be prone to a race condition attack.\n', '    // See: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    allowances[msg.sender][spender] = value;\n', '    Approval( msg.sender, spender, value );\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Recommended fix for known attack on any ERC20\n', '   */\n', '  function safeApprove(\n', '    address _spender,\n', '    uint256 _currentValue,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool success)\n', '  {\n', '    // If current allowance for _spender is equal to _currentValue, then\n', '    // overwrite it with _value and return true, otherwise return false.\n', '\n', '    if (allowances[msg.sender][_spender] == _currentValue)\n', '      return approve(_spender, _value);\n', '\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * ERC20 Allowance Function\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '  )\n', '    public constant\n', '    returns (uint256 remaining)\n', '  {\n', '    return allowances[owner][spender];\n', '  }\n', '\n', '  /**\n', '   * ERC20 Transfer Function\n', '   */\n', '  function transfer(\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool success)\n', '  {\n', '    bytes memory empty; // null\n', '    _transfer( msg.sender, to, value, empty );\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * ERC20 Transfer From Function\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool success)\n', '  {\n', '    require( value <= allowances[from][msg.sender] );\n', '\n', '    allowances[from][msg.sender] -= value;\n', '    bytes memory empty;\n', '    _transfer( from, to, value, empty );\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Ethereum Token Approve and Call Function\n', '   */\n', '  function approveAndCall(\n', '    address spender,\n', '    uint256 value,\n', '    bytes context\n', '  )\n', '    public\n', '    returns (bool success)\n', '  {\n', '    if (approve(spender, value))\n', '    {\n', '      tokenRecipient recip = tokenRecipient(spender);\n', '\n', '      if (isContract(recip))\n', '        recip.receiveApproval(msg.sender, value, context);\n', '\n', '      return true;\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '\n', '  /**\n', '   * ERC223 Transfer and invoke specified callback\n', '   */\n', '  function transfer(\n', '    address to,\n', '    uint value,\n', '    bytes data,\n', '    string custom_fallback\n', '  )\n', '    public\n', '    returns (bool success)\n', '  {\n', '    _transfer( msg.sender, to, value, data );\n', '\n', '    // throws if custom_fallback is not a valid contract call\n', '    require(\n', '      address(to).call.value(0)(\n', '        bytes4(keccak256(custom_fallback)),\n', '        msg.sender,\n', '        value,\n', '        data\n', '      )\n', '    );\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * ERC223 Transfer to a contract or externally-owned account\n', '   */\n', '  function transfer(\n', '    address to,\n', '    uint value,\n', '    bytes data\n', '  )\n', '    public\n', '    returns (bool success)\n', '  {\n', '    if (isContract(to)) {\n', '      return transferToContract( to, value, data );\n', '    }\n', '\n', '    _transfer( msg.sender, to, value, data );\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * ERC223 Transfer to contract and invoke tokenFallback() method\n', '   */\n', '  function transferToContract(\n', '    address to,\n', '    uint value,\n', '    bytes data\n', '  )\n', '    private\n', '    returns (bool success)\n', '  {\n', '    _transfer( msg.sender, to, value, data );\n', '\n', '    ContractReceiver rx = ContractReceiver(to);\n', '\n', '    if (isContract(rx)) {\n', '      rx.tokenFallback( msg.sender, value, data );\n', '      return true;\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * ERC223 fetch contract size (must be nonzero to be a contract)\n', '   */\n', '  function isContract(address _addr)\n', '    private\n', '    constant\n', '    returns (bool)\n', '  {\n', '    uint length;\n', '    assembly { length := extcodesize(_addr) }\n', '    return (length > 0);\n', '  }\n', '\n', '  /**\n', '   * Transfer Functionality\n', '   */\n', '  function _transfer(\n', '    address from,\n', '    address to,\n', '    uint value,\n', '    bytes data\n', '  )\n', '    internal\n', '  {\n', '    require( to != 0x0 );\n', '    require( balances[from] >= value );\n', '    require( balances[to] + value > balances[to] ); // catch overflow\n', '\n', '    balances[from] -= value;\n', '    balances[to] += value;\n', '\n', '    bytes memory ignore;\n', '    ignore = data; // ignore compiler warning\n', '    Transfer( from, to, value ); // ERC20-version, ignore data\n', '  }\n', '}']