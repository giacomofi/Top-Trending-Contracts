['pragma solidity ^0.4.4;\n', '\n', '\tcontract Token {\n', '\n', '\t\t/// @return total amount of tokens\n', '\t\tfunction totalSupply() constant returns (uint256 supply) {}\n', '\n', '\t\t/// @param _owner The address from which the balance will be retrieved\n', '\t\t/// @return The balance\n', '\t\tfunction balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '\t\t/// @notice send `_value` token to `_to` from `msg.sender`\n', '\t\t/// @param _to The address of the recipient\n', '\t\t/// @param _value The amount of token to be transferred\n', '\t\t/// @return Whether the transfer was successful or not\n', '\t\tfunction transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '\t\t/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '\t\t/// @param _from The address of the sender\n', '\t\t/// @param _to The address of the recipient\n', '\t\t/// @param _value The amount of token to be transferred\n', '\t\t/// @return Whether the transfer was successful or not\n', '\t\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '\t\t/// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '\t\t/// @param _spender The address of the account able to transfer the tokens\n', '\t\t/// @param _value The amount of wei to be approved for transfer\n', '\t\t/// @return Whether the approval was successful or not\n', '\t\tfunction approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '\t\t/// @param _owner The address of the account owning tokens\n', '\t\t/// @param _spender The address of the account able to transfer the tokens\n', '\t\t/// @return Amount of remaining tokens allowed to spent\n', '\t\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '\t\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\t\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '\t}\n', '\n', '\tcontract StandardToken is Token {\n', '\n', '\t\tfunction transfer(address _to, uint256 _value) returns (bool success) {\n', "\t\t\t//Default assumes totalSupply can't be over max (2^256 - 1).\n", "\t\t\t//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '\t\t\t//Replace the if with this one instead.\n', '\t\t\t//if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '\t\t\tif (balances[msg.sender] >= _value && _value > 0) {\n', '\t\t\t\tbalances[msg.sender] -= _value;\n', '\t\t\t\tbalances[_to] += _value;\n', '\t\t\t\tTransfer(msg.sender, _to, _value);\n', '\t\t\t\treturn true;\n', '\t\t\t} else { return false; }\n', '\t\t}\n', '\n', '\t\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\t\t\t//same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '\t\t\t//if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '\t\t\tif (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '\t\t\t\tbalances[_to] += _value;\n', '\t\t\t\tbalances[_from] -= _value;\n', '\t\t\t\tallowed[_from][msg.sender] -= _value;\n', '\t\t\t\tTransfer(_from, _to, _value);\n', '\t\t\t\treturn true;\n', '\t\t\t} else { return false; }\n', '\t\t}\n', '\n', '\t\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n', '\t\t\treturn balances[_owner];\n', '\t\t}\n', '\n', '\t\tfunction approve(address _spender, uint256 _value) returns (bool success) {\n', '\t\t\tallowed[msg.sender][_spender] = _value;\n', '\t\t\tApproval(msg.sender, _spender, _value);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '\t\t  return allowed[_owner][_spender];\n', '\t\t}\n', '\n', '\t\tmapping (address => uint256) balances;\n', '\t\tmapping (address => mapping (address => uint256)) allowed;\n', '\t\tuint256 public totalSupply;\n', '\t}\n', '\n', '\tcontract MoonDollars is StandardToken { // CHANGE THIS. Update the contract name.\n', '\n', '\t\t/* Public variables of the token */\n', '\n', '\t\t/*\n', '\t\tNOTE:\n', '\t\tThe following variables are OPTIONAL vanities. One does not have to include them.\n', '\t\tThey allow one to customise the token contract & in no way influences the core functionality.\n', '\t\tSome wallets/interfaces might not even bother to look at this information.\n', '\t\t*/\n', '\t\tstring public name;                   // Token Name\n', '\t\tuint8 public decimals;                // How many decimals to show. To be standard complicant keep it 18\n', '\t\tstring public symbol;                 // An identifier: eg SBX, XPR etc..\n', "\t\tstring public version = 'H1.0'; \n", '\t\tuint256 public unitsOneEthCanBuy;     // How many units of your coin can be bought by 1 ETH?\n', "\t\tuint256 public totalEthInWei;         // WEI is the smallest unit of ETH (the equivalent of cent in USD or satoshi in BTC). We'll store the total ETH raised via our ICO here.  \n", '\t\taddress public fundsWallet;           // Where should the raised ETH go?\n', '\n', '\t\t// This is a constructor function \n', '\t\t// which means the following function name has to match the contract name declared above\n', '\t\tfunction MoonDollars() {\n', '\t\t\tbalances[msg.sender] = 1000000000000000000000000000;               // Give the creator all initial tokens. This is set to 1000 for example. If you want your initial tokens to be X and your decimal is 5, set this value to X * 100000. (CHANGE THIS)\n', '\t\t\ttotalSupply = 1000000000000000000000000000;                        // Update total supply (1000 for example) (CHANGE THIS)\n', '\t\t\tname = "Moon Dollars";                                   // Set the name for display purposes (CHANGE THIS)\n', '\t\t\tdecimals = 18;                                               // Amount of decimals for display purposes (CHANGE THIS)\n', '\t\t\tsymbol = "M$";                                             // Set the symbol for display purposes (CHANGE THIS)\n', '\t\t\tunitsOneEthCanBuy = 50000;                                      // Set the price of your token for the ICO (CHANGE THIS)\n', '\t\t\tfundsWallet = msg.sender;                                    // The owner of the contract gets ETH\n', '\t\t}\n', '\n', '\t\tfunction() payable{\n', '\t\t\ttotalEthInWei = totalEthInWei + msg.value;\n', '\t\t\tuint256 amount = msg.value * unitsOneEthCanBuy;\n', '\t\t\tif (balances[fundsWallet] < amount) {\n', '\t\t\t\treturn;\n', '\t\t\t}\n', '\n', '\t\t\tbalances[fundsWallet] = balances[fundsWallet] - amount;\n', '\t\t\tbalances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '\t\t\tTransfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\n', '\n', '\t\t\t//Transfer ether to fundsWallet\n', '\t\t\tfundsWallet.transfer(msg.value);                               \n', '\t\t}\n', '\n', '\t\t/* Approves and then calls the receiving contract */\n', '\t\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '\t\t\tallowed[msg.sender][_spender] = _value;\n', '\t\t\tApproval(msg.sender, _spender, _value);\n', '\n', "\t\t\t//call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '\t\t\t//receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '\t\t\t//it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '\t\t\tif(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '\t\t\treturn true;\n', '\t\t}\n', '\t}']