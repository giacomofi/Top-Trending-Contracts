['pragma solidity ^0.4.17;\n', '\n', 'contract ERC223Interface {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function transfer(address to, uint value, bytes data) public;\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', 'contract ERC223ReceivingContract { \n', '  function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract Token10xAmin is ERC223Interface, ERC20Interface {\n', '  address public owner;\n', '  uint public totalSupply;\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '  string public constant name = "10xAmin Token";\n', '  string public constant symbol = "10xAMIN";\n', '  uint8 public constant decimals = 18;\n', '\n', '  function Token10xAmin() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transfer(address _to, uint _value, bytes _data) public {\n', '    uint codeLength;\n', '\n', '    assembly {\n', '        codeLength := extcodesize(_to)\n', '    }\n', '\n', '    balances[msg.sender] = safeSub(balances[msg.sender],_value);\n', '    balances[_to] = safeAdd(balances[_to], rerollValue(_value));\n', '    if(codeLength>0) {\n', '        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '    }\n', '    Transfer(msg.sender, _to, _value, _data);\n', '  }\n', '  \n', '  function transfer(address _to, uint _value) public returns (bool){\n', '    uint codeLength;\n', '    bytes memory empty;\n', '\n', '    assembly {\n', '        codeLength := extcodesize(_to)\n', '    }\n', '\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], rerollValue(_value));\n', '    if(codeLength>0) {\n', '        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '        receiver.tokenFallback(msg.sender, _value, empty);\n', '    }\n', '    Transfer(msg.sender, _to, _value, empty);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    balances[from] = safeSub(balances[from], tokens);\n', '    allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '    balances[to] = safeAdd(balances[to], rerollValue(tokens));\n', '    Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '  function rerollValue(uint val) internal view returns (uint) {\n', '    uint rnd = uint(block.blockhash(block.number-1))%100;\n', '    if (rnd < 40) {\n', '      return safeDiv(val, 10);\n', '    }\n', '    if (rnd < 80) {\n', '      return safeMul(val, 10);\n', '    }\n', '    return val;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function changeOwner(address newOwner) public onlyOwner {\n', '    owner = newOwner;\n', '  }\n', '\n', '  function mint(address _to, uint _amount) public onlyOwner {\n', '    totalSupply = safeAdd(totalSupply, _amount);\n', '    balances[_to] = safeAdd(balances[_to], _amount);\n', '  }\n', '\n', '  function destruct() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function safeMul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', 'contract ERC223Interface {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function transfer(address to, uint value, bytes data) public;\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', 'contract ERC223ReceivingContract { \n', '  function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract Token10xAmin is ERC223Interface, ERC20Interface {\n', '  address public owner;\n', '  uint public totalSupply;\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '  string public constant name = "10xAmin Token";\n', '  string public constant symbol = "10xAMIN";\n', '  uint8 public constant decimals = 18;\n', '\n', '  function Token10xAmin() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transfer(address _to, uint _value, bytes _data) public {\n', '    uint codeLength;\n', '\n', '    assembly {\n', '        codeLength := extcodesize(_to)\n', '    }\n', '\n', '    balances[msg.sender] = safeSub(balances[msg.sender],_value);\n', '    balances[_to] = safeAdd(balances[_to], rerollValue(_value));\n', '    if(codeLength>0) {\n', '        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '    }\n', '    Transfer(msg.sender, _to, _value, _data);\n', '  }\n', '  \n', '  function transfer(address _to, uint _value) public returns (bool){\n', '    uint codeLength;\n', '    bytes memory empty;\n', '\n', '    assembly {\n', '        codeLength := extcodesize(_to)\n', '    }\n', '\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], rerollValue(_value));\n', '    if(codeLength>0) {\n', '        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '        receiver.tokenFallback(msg.sender, _value, empty);\n', '    }\n', '    Transfer(msg.sender, _to, _value, empty);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    balances[from] = safeSub(balances[from], tokens);\n', '    allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '    balances[to] = safeAdd(balances[to], rerollValue(tokens));\n', '    Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '  function rerollValue(uint val) internal view returns (uint) {\n', '    uint rnd = uint(block.blockhash(block.number-1))%100;\n', '    if (rnd < 40) {\n', '      return safeDiv(val, 10);\n', '    }\n', '    if (rnd < 80) {\n', '      return safeMul(val, 10);\n', '    }\n', '    return val;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function changeOwner(address newOwner) public onlyOwner {\n', '    owner = newOwner;\n', '  }\n', '\n', '  function mint(address _to, uint _amount) public onlyOwner {\n', '    totalSupply = safeAdd(totalSupply, _amount);\n', '    balances[_to] = safeAdd(balances[_to], _amount);\n', '  }\n', '\n', '  function destruct() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function safeMul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
