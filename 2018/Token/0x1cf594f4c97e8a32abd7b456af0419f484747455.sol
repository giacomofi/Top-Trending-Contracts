['pragma solidity ^0.4.13;\n', '\n', '/**\n', '* @title PlusCoin Contract\n', '* @dev The main token contract\n', '*/\n', '\n', '\n', '\n', 'contract PlusCoin {\n', '    address public owner; // Token owner address\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    string public standard = &#39;PlusCoin 2.0&#39;;\n', '    string public constant name = "PlusCoin";\n', '    string public constant symbol = "PLC";\n', '    uint   public constant decimals = 18;\n', '    uint public totalSupply;\n', '\n', '    address public allowed_contract;\n', '\n', '    //\n', '    // Events\n', '    // This generates a publics event on the blockchain that will notify clients\n', '    \n', '    event Sent(address from, address to, uint amount);\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '    event Withdraw(address indexed sender, address to, uint eth);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    //\n', '    // Modifiers\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyAllowedContract() {\n', '        require(msg.sender == allowed_contract);\n', '        _;\n', '    }\n', '\n', '    //\n', '    // Functions\n', '    // \n', '\n', '    // Constructor\n', '    function PlusCoin() {\n', '        owner = msg.sender;\n', '        totalSupply = 28272323624 * 1000000000000000000;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '    }\n', '\n', '    function safeMul(uint a, uint b) internal returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) internal returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', ' \n', '\n', '\tfunction setAllowedContract(address _contract_address) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        allowed_contract = _contract_address;\n', '        return true;\n', '    }\n', '\n', '\n', '    function withdrawEther(address _to) public \n', '        onlyOwner\n', '    {\n', '        _to.transfer(this.balance);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * ERC 20 token functions\n', '     *\n', '     * https://github.com/ethereum/EIPs/issues/20\n', '     */\n', '    \n', '    function transfer(address _to, uint256 _value) public\n', '        returns (bool success) \n', '    {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '        returns (bool success)\n', '    {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public\n', '        constant returns (uint256 remaining)\n', '    {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '}']