['pragma solidity ^0.4.11;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract VanilCoin is MintableToken {\n', '  \t\n', '\tstring public name = "Vanil";\n', '  \tstring public symbol = "VAN";\n', '  \tuint256 public decimals = 18;\n', '  \n', '  \t// tokens locked for one week after ICO, 8 Oct 2017, 0:0:0 GMT: 1507420800\n', '  \tuint public releaseTime = 1507420800;\n', '  \n', '\tmodifier canTransfer(address _sender, uint256 _value) {\n', '\t\trequire(_value <= transferableTokens(_sender, now));\n', '\t   \t_;\n', '\t}\n', '\t\n', '\tfunction transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) returns (bool) {\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\t\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) returns (bool) {\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\t\n', '\tfunction transferableTokens(address holder, uint time) constant public returns (uint256) {\n', '\t\t\n', '\t\tuint256 result = 0;\n', '\t\t\t\t\n', '\t\tif(time > releaseTime){\n', '\t\t\tresult = balanceOf(holder);\n', '\t\t}\n', '\t\t\n', '\t\treturn result;\n', '\t}\n', '\t\n', '}\n', '\n', 'contract ETH888CrowdsaleS2 {\n', '\n', '\tusing SafeMath for uint256;\n', '\t\n', '\t// The token being sold\n', '\taddress public vanilAddress;\n', '\tVanilCoin public vanilCoin;\n', '\t\n', '\t// address where funds are collected\n', '\taddress public wallet;\n', '\t\n', '\t// how many token units a buyer gets per wei\n', '\tuint256 public rate = 400;\n', '\t\n', '\t// timestamps for ICO starts and ends\n', '\tuint public startTimestamp;\n', '\tuint public endTimestamp;\n', '\t\n', '\t// amount of raised money in wei\n', '\tuint256 public weiRaised;\n', '\t\n', '\tmapping(uint8 => uint64) public rates;\n', '\t// week 2, 5 May 2018, 000:00:00 GMT\n', '\tuint public timeTier1 = 1525478400;\n', '\t// week 3, 12 May 2018, 000:00:00 GMT\n', '\tuint public timeTier2 = 1526083200;\n', '\t// week 4, 19 May 2018, 000:00:00 GMT\n', '\tuint public timeTier3 = 1526688000;\n', '\n', '\t/**\n', '\t   * event for token purchase logging\n', '\t   * @param purchaser who paid for the tokens\n', '\t   * @param beneficiary who got the tokens\n', '\t   * @param value weis paid for purchase\n', '\t   * @param amount amount of tokens purchased\n', '\t   */ \n', '\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\tfunction ETH888CrowdsaleS2(address _wallet, address _vanilAddress) {\n', '\t\t\n', '\t\trequire(_wallet != 0x0 && _vanilAddress != 0x0);\n', '\t\t\n', '\t\t// 28 April 2018, 00:00:00 GMT: 1524873600\n', '\t\tstartTimestamp = 1524873600;\n', '\t\t\n', '\t\t// 28 May 2018, 00:00:00 GMT: 1527465600\n', '\t\tendTimestamp = 1527465600;\n', '\t\t\n', '\t\trates[0] = 400;\n', '\t\trates[1] = 300;\n', '\t\trates[2] = 200;\n', '\t\trates[3] = 100;\n', '\n', '\t\twallet = _wallet;\n', '\t\tvanilAddress = _vanilAddress;\n', '\t\tvanilCoin = VanilCoin(vanilAddress);\n', '\t}\n', '\t\t\n', '\t// fallback function can be used to buy tokens\n', '\tfunction () payable {\n', '\t    buyTokens(msg.sender);\n', '\t}\n', '\t\n', '\t// low level token purchase function\n', '\tfunction buyTokens(address beneficiary) payable {\n', '\t\trequire(beneficiary != 0x0 && validPurchase() && validAmount());\n', '\n', '\t\tif(now < timeTier1)\n', '\t\t\trate = rates[0];\n', '\t\telse if(now < timeTier2)\n', '\t\t\trate = rates[1];\n', '\t\telse if(now < timeTier3)\n', '\t\t\trate = rates[2];\n', '\t\telse\n', '\t\t\trate = rates[3];\n', '\n', '\t\tuint256 weiAmount = msg.value;\n', '\t\tuint256 tokens = weiAmount.mul(rate);\n', '\n', '\t\t// update state\n', '\t\tweiRaised = weiRaised.add(weiAmount);\n', '\t\tvanilCoin.transfer(beneficiary, tokens);\n', '\n', '\t\tTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '\t\tforwardFunds();\n', '\t}\n', '\n', '\tfunction totalSupply() public constant returns (uint)\n', '\t{\n', '\t\treturn vanilCoin.totalSupply();\n', '\t}\n', '\n', '\tfunction vanilAddress() public constant returns (address)\n', '\t{\n', '\t\treturn vanilAddress;\n', '\t}\n', '\n', '\t// send ether to the fund collection wallet\n', '\tfunction forwardFunds() internal {\n', '\t\twallet.transfer(msg.value);\n', '\t}\t\n', '\t\n', '\tfunction validAmount() internal constant returns (bool)\n', '\t{\n', '\t\tuint256 weiAmount = msg.value;\n', '\t\tuint256 tokens = weiAmount.mul(rate);\n', '\n', '\t\treturn (vanilCoin.balanceOf(this) >= tokens);\n', '\t}\n', '\n', '\t// @return true if investors can buy at the moment\n', '\tfunction validPurchase() internal constant returns (bool) {\n', '\t\t\n', '\t\tuint current = now;\n', '\t\tbool withinPeriod = current >= startTimestamp && current <= endTimestamp;\n', '\t\tbool nonZeroPurchase = msg.value != 0;\n', '\t\t\n', '\t\treturn withinPeriod && nonZeroPurchase && msg.value >= 1000 szabo;\n', '\t}\n', '\n', '\t// @return true if crowdsale event has ended\n', '\tfunction hasEnded() public constant returns (bool) {\n', '\t\t\n', '\t\treturn now > endTimestamp;\n', '\t}\n', '\t\n', '}']