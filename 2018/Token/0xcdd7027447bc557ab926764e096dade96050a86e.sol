['pragma solidity ^0.4.22;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', ' \n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address) public view returns (uint256);\n', '    function transfer(address, uint256) public returns (bool);\n', '    function transferFrom(address, address, uint256) public returns (bool);\n', '    function approve(address, uint256) public returns (bool);\n', '    function allowance(address, address) public view returns (uint256);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // allow transfer of ownership to another address in case shit hits the fan. \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t    require(_to != address(0));\n', '\t    require(_value <= balances[_from]);\n', '\t    require(_value <= allowed[_from][msg.sender]);\n', '\n', '\t    balances[_from] = balances[_from].sub(_value);\n', '\t    balances[_to] = balances[_to].add(_value);\n', '\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t    emit Transfer(_from, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // Added to prevent potential race attack.\n', '        // forces caller of this function to ensure address allowance is already 0\n', '        // ref: https://github.com/ethereum/EIPs/issues/738\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '//token contract\n', 'contract GalaxiumCoin is Owned, StandardToken {\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '    \n', '    /* Public variables of the token */\n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '    uint256 public totalSupply;\n', '    address public distributionAddress;\n', '    bool public isTransferable = false;\n', '    \n', '\n', '    function GalaxiumCoin() {\n', '        name = "Galaxium Coin";                          \n', '        decimals = 18; \n', '        symbol = "GXM";\n', '        totalSupply = 50000000 * 10 ** uint256(decimals); \n', '        owner = msg.sender;\n', '\n', '        //transfer all to handler address\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(0x0, msg.sender, totalSupply);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferable);\n', '        return super.transfer(_to, _value);\n', '    } \n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferable);\n', '        return super.transferFrom(_from, _to, _value);\n', '    } \n', '\n', '    /**\n', '     * Get totalSupply of tokens - Minus any from address 0 if that was used as a burnt method\n', '     * Suggested way is still to use the burnSent function\n', '     */    \n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '     * unlocks tokens, only allowed once\n', '     */\n', '    function enableTransfers() public onlyOwner {\n', '        isTransferable = true;\n', '    }\n', '    \n', '    /**\n', '     * Callable by anyone\n', '     * Accepts an input of the number of tokens to be burnt held by the sender.\n', '     */\n', '    function burnSent(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '\n', '    /**\n', '     * Allow distribution helper to help with distributeToken function\n', '     */\n', '    function setDistributionAddress(address _setAddress) public onlyOwner {\n', '        distributionAddress = _setAddress;\n', '    }\n', '\n', '    /**\n', '     * Called by owner to transfer tokens - Managing manual distribution.\n', '     * Also allow distribution contract to call for this function\n', '     */\n', '    function distributeTokens(address _to, uint256 _value) public {\n', '        require(distributionAddress == msg.sender || owner == msg.sender);\n', '        super.transfer(_to, _value);\n', '    }\n', '}']
['pragma solidity ^0.4.22;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', ' \n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address) public view returns (uint256);\n', '    function transfer(address, uint256) public returns (bool);\n', '    function transferFrom(address, address, uint256) public returns (bool);\n', '    function approve(address, uint256) public returns (bool);\n', '    function allowance(address, address) public view returns (uint256);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // allow transfer of ownership to another address in case shit hits the fan. \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t    require(_to != address(0));\n', '\t    require(_value <= balances[_from]);\n', '\t    require(_value <= allowed[_from][msg.sender]);\n', '\n', '\t    balances[_from] = balances[_from].sub(_value);\n', '\t    balances[_to] = balances[_to].add(_value);\n', '\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t    emit Transfer(_from, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // Added to prevent potential race attack.\n', '        // forces caller of this function to ensure address allowance is already 0\n', '        // ref: https://github.com/ethereum/EIPs/issues/738\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '//token contract\n', 'contract GalaxiumCoin is Owned, StandardToken {\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '    \n', '    /* Public variables of the token */\n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '    uint256 public totalSupply;\n', '    address public distributionAddress;\n', '    bool public isTransferable = false;\n', '    \n', '\n', '    function GalaxiumCoin() {\n', '        name = "Galaxium Coin";                          \n', '        decimals = 18; \n', '        symbol = "GXM";\n', '        totalSupply = 50000000 * 10 ** uint256(decimals); \n', '        owner = msg.sender;\n', '\n', '        //transfer all to handler address\n', '        balances[msg.sender] = totalSupply;\n', '        emit Transfer(0x0, msg.sender, totalSupply);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferable);\n', '        return super.transfer(_to, _value);\n', '    } \n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferable);\n', '        return super.transferFrom(_from, _to, _value);\n', '    } \n', '\n', '    /**\n', '     * Get totalSupply of tokens - Minus any from address 0 if that was used as a burnt method\n', '     * Suggested way is still to use the burnSent function\n', '     */    \n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '     * unlocks tokens, only allowed once\n', '     */\n', '    function enableTransfers() public onlyOwner {\n', '        isTransferable = true;\n', '    }\n', '    \n', '    /**\n', '     * Callable by anyone\n', '     * Accepts an input of the number of tokens to be burnt held by the sender.\n', '     */\n', '    function burnSent(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '\n', '    /**\n', '     * Allow distribution helper to help with distributeToken function\n', '     */\n', '    function setDistributionAddress(address _setAddress) public onlyOwner {\n', '        distributionAddress = _setAddress;\n', '    }\n', '\n', '    /**\n', '     * Called by owner to transfer tokens - Managing manual distribution.\n', '     * Also allow distribution contract to call for this function\n', '     */\n', '    function distributeTokens(address _to, uint256 _value) public {\n', '        require(distributionAddress == msg.sender || owner == msg.sender);\n', '        super.transfer(_to, _value);\n', '    }\n', '}']
