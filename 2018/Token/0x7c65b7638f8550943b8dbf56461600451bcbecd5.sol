['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Interface {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ERC20 is ERC20Interface {\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '\n', '    function ERC20(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '    ) public {\n', '        balances[msg.sender] = _initialAmount;\n', '        totalSupply = _initialAmount;\n', '        name = _tokenName;\n', '        decimals = _decimalUnits;\n', '        symbol = _tokenSymbol;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }   \n', '}\n', '\n', 'contract EtherZaarFactory {\n', '\n', '    mapping(address => address[]) public created;\n', '    mapping(address => bool) public isERC20;\n', '    bytes public ERC20ByteCode;\n', '\n', '    function EtherZaarFactory() public {\n', '        address verifiedToken = createERC20(100, "Verification Tokens", 0, "EtherZaar");\n', '        ERC20ByteCode = codeAt(verifiedToken);\n', '    }\n', '\n', '    function verifyERC20(address _tokenContract) public view returns (bool) {\n', '        bytes memory fetchedTokenByteCode = codeAt(_tokenContract);\n', '\n', '        if (fetchedTokenByteCode.length != ERC20ByteCode.length) {\n', '            return false;\n', '        }\n', '\n', '        for (uint i = 0; i < fetchedTokenByteCode.length; i++) {\n', '            if (fetchedTokenByteCode[i] != ERC20ByteCode[i]) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function createERC20(uint256 _initialAmount, string _name, uint8 _decimals, string _symbol) \n', '        public \n', '    returns (address) {\n', '\n', '        ERC20 newToken = (new ERC20(_initialAmount, _name, _decimals, _symbol));\n', '        created[msg.sender].push(address(newToken));\n', '        isERC20[address(newToken)] = true;\n', '        newToken.transfer(msg.sender, _initialAmount); \n', '        return address(newToken);\n', '    }\n', '\n', '    function codeAt(address _addr) internal view returns (bytes outputCode) {\n', '        assembly { \n', '            let size := extcodesize(_addr)\n', '            outputCode := mload(0x40)\n', '            mstore(0x40, add(outputCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n', '            mstore(outputCode, size)\n', '            extcodecopy(_addr, add(outputCode, 0x20), 0, size)\n', '        }\n', '    }\n', '}']