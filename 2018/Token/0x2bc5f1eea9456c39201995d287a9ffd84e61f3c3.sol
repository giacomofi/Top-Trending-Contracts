['pragma solidity ^0.4.19;\n', '\n', '//*************** SafeMath ***************\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b > 0);\n', '      uint256 c = a / b;\n', '      return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '  }\n', '}\n', '\n', '//*************** Ownable\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner)public onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '  }\n', '\n', '}\n', '\n', '//************* ERC20\n', '\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who)public constant returns (uint256);\n', '  function transfer(address to, uint256 value)public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value)public returns (bool);\n', '  function allowance(address owner, address spender)public constant returns (uint256);\n', '  function approve(address spender, uint256 value)public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event ExchangeTokenPushed(address indexed buyer, uint256 amount);\n', '  event TokenPurchase(address indexed purchaser, uint256 value,uint256 amount);  \n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//************* SOSRcoinToken\n', '\n', 'contract SOSRcoinToken is ERC20,Ownable {\n', ' using SafeMath for uint256;\n', '\n', ' // Token Info.\n', ' string public name;\n', ' string public symbol;\n', '\n', ' uint8 public constant decimals = 18;\n', '\n', ' address[] private walletArr;\n', ' uint walletIdx = 0;\n', ' uint256 public candyTotalSupply = 100000*(10**18);\n', ' uint256 public currentCandyTotalSupply = 0;\n', ' uint256 public candyBalance = 5*(10**18);\n', ' uint256 public date610 = 1528560000;\n', ' uint256 public totalSupply1 = 20000000*(10**18);\n', ' uint256 public totalSupply2 = 40000000*(10**18);\n', ' uint256 public minValue1 = 15 ether;\n', ' uint256 public minValue2 = 0.1 ether;\n', ' uint256 public rate1 = 1620;\n', ' uint256 public rate2 = 1500;\n', ' uint256 public rate3 = 1200;\n', '\n', ' mapping (address => bool) touched;\n', ' mapping (address => uint256) public balanceOf;\n', ' mapping (address => mapping (address => uint256)) allowed;\n', '\n', ' event TokenPurchase(address indexed purchaser, uint256 value,uint256 amount);\n', ' event FundTransfer(address fundWallet, uint256 amount);\n', '\n', ' function SOSRcoinToken( ) public {\n', '   totalSupply = 50000000*(10**18);         \n', '   balanceOf[msg.sender] = totalSupply ; \n', '   name = "SOSRcoin"; \n', '   symbol ="SOSR"; \n', '   walletArr.push(0x72BA86a847Ead7b69c3e92F88eb2Aa21C3Aa1C58); \n', '   walletArr.push(0x39DE3fa8976572819b0012B11b506E100a765453);\n', '   touched[owner] = true;\n', ' }\n', '\n', ' function balanceOf(address _who)public constant returns (uint256 balance) {\n', '    return getBalance(_who);\n', ' }\n', ' \n', 'function getBalance(address _who) internal constant returns(uint256){\n', '\tif( currentCandyTotalSupply < candyTotalSupply ){\n', '\t    if( touched[_who] )\n', '\t\treturn balanceOf[_who];\n', '\t    else\n', '\t\treturn balanceOf[_who].add( candyBalance );\n', '\t} else {\n', '\t    return balanceOf[_who];\n', '\t}\n', '}\n', '    \n', ' function _transferFrom(address _from, address _to, uint256 _value)  internal {\n', '     require(_to != 0x0);\n', '     \n', '     if( currentCandyTotalSupply < candyTotalSupply && !touched[_from]  ){\n', '            balanceOf[_from] = balanceOf[_from].add( candyBalance );\n', '            touched[_from] = true;\n', '            currentCandyTotalSupply = currentCandyTotalSupply.add( candyBalance );\n', '     }     \n', '     require(balanceOf[_from] >= _value);\n', '     require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '     balanceOf[_from] = balanceOf[_from].sub(_value);\n', '     balanceOf[_to] = balanceOf[_to].add(_value);\n', '     Transfer(_from, _to, _value);\n', ' }\n', '\n', ' function transfer(address _to, uint256 _value) public returns (bool){     \n', '     _transferFrom(msg.sender,_to,_value);\n', '     return true;\n', ' }\n', '\n', ' function push(address _buyer, uint256 _amount) public onlyOwner {\n', '     uint256 val=_amount*(10**18);\n', '     _transferFrom(msg.sender,_buyer,val);\n', '     ExchangeTokenPushed(_buyer, val);\n', ' }\n', '\n', ' function ()public payable {\n', '     _tokenPurchase( );\n', ' }\n', '\n', ' function _tokenPurchase( ) internal {   \n', '     require(saleActive(msg.value));     \n', '     uint256 weiAmount = msg.value;\n', '     uint256 actualRate = getActualRate(); \n', '     uint256 amount = weiAmount.mul(actualRate);\n', '     _transferFrom(owner, msg.sender,amount);\n', '     TokenPurchase(msg.sender, weiAmount,amount);        \n', '     address wallet = walletArr[walletIdx];\n', '     walletIdx = (walletIdx+1) % walletArr.length;\n', '     wallet.transfer(msg.value);\n', '     FundTransfer(wallet, msg.value);\n', ' }\n', '\n', ' function saleActive(uint256 _value) public constant returns (bool) {\n', '     bool res = false;\n', '     uint256 t = getCurrentTimestamp();\n', '     uint256 s = totalSupply - balanceOf[owner];\n', '     if(supply() > 0 && t < date610){\n', '       if(s < totalSupply2){\n', '           if( _value>=minValue1 ){\n', '              res = true;\n', '           }\n', '       }else{\n', '           if( _value>= minValue2 ){\n', '              res = true;\n', '           }\n', '       }\n', '     }\n', '     return res;\n', ' }\n', '\n', ' function getActualRate() internal view returns (uint256){  \n', '    uint256 rate=0;      \n', '    uint256 s = totalSupply - balanceOf[owner];\t\n', '    if(s < totalSupply1){\n', '\t rate = rate1;\n', '    }else if(s < totalSupply2){\n', '\t rate = rate2;\n', '    }else{\n', '         rate = rate3;\n', '    }    \n', '    return rate;\n', ' }\n', ' \n', ' function supply()  internal constant  returns (uint256) {\n', '     return balanceOf[owner];\n', ' }\n', '\n', ' function getCurrentTimestamp() internal view returns (uint256){\n', '     return now;\n', ' }\n', '\n', ' function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '     return allowed[_owner][_spender];\n', ' }\n', '\n', ' function approve(address _spender, uint256 _value)public returns (bool) {\n', '     require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '     allowed[msg.sender][_spender] = _value;\n', '     Approval(msg.sender, _spender, _value);\n', '     return true;\n', ' }\n', ' \n', ' function transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n', '     var _allowance = allowed[_from][msg.sender];\n', '     require (_value <= _allowance);  \n', '      _transferFrom(_from,_to,_value);\n', '     allowed[_from][msg.sender] = _allowance.sub(_value);\n', '     Transfer(_from, _to, _value);\n', '     return true;\n', '   }\n', ' \n', '}']
['pragma solidity ^0.4.19;\n', '\n', '//*************** SafeMath ***************\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b > 0);\n', '      uint256 c = a / b;\n', '      return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '  }\n', '}\n', '\n', '//*************** Ownable\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner)public onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '  }\n', '\n', '}\n', '\n', '//************* ERC20\n', '\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who)public constant returns (uint256);\n', '  function transfer(address to, uint256 value)public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value)public returns (bool);\n', '  function allowance(address owner, address spender)public constant returns (uint256);\n', '  function approve(address spender, uint256 value)public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event ExchangeTokenPushed(address indexed buyer, uint256 amount);\n', '  event TokenPurchase(address indexed purchaser, uint256 value,uint256 amount);  \n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//************* SOSRcoinToken\n', '\n', 'contract SOSRcoinToken is ERC20,Ownable {\n', ' using SafeMath for uint256;\n', '\n', ' // Token Info.\n', ' string public name;\n', ' string public symbol;\n', '\n', ' uint8 public constant decimals = 18;\n', '\n', ' address[] private walletArr;\n', ' uint walletIdx = 0;\n', ' uint256 public candyTotalSupply = 100000*(10**18);\n', ' uint256 public currentCandyTotalSupply = 0;\n', ' uint256 public candyBalance = 5*(10**18);\n', ' uint256 public date610 = 1528560000;\n', ' uint256 public totalSupply1 = 20000000*(10**18);\n', ' uint256 public totalSupply2 = 40000000*(10**18);\n', ' uint256 public minValue1 = 15 ether;\n', ' uint256 public minValue2 = 0.1 ether;\n', ' uint256 public rate1 = 1620;\n', ' uint256 public rate2 = 1500;\n', ' uint256 public rate3 = 1200;\n', '\n', ' mapping (address => bool) touched;\n', ' mapping (address => uint256) public balanceOf;\n', ' mapping (address => mapping (address => uint256)) allowed;\n', '\n', ' event TokenPurchase(address indexed purchaser, uint256 value,uint256 amount);\n', ' event FundTransfer(address fundWallet, uint256 amount);\n', '\n', ' function SOSRcoinToken( ) public {\n', '   totalSupply = 50000000*(10**18);         \n', '   balanceOf[msg.sender] = totalSupply ; \n', '   name = "SOSRcoin"; \n', '   symbol ="SOSR"; \n', '   walletArr.push(0x72BA86a847Ead7b69c3e92F88eb2Aa21C3Aa1C58); \n', '   walletArr.push(0x39DE3fa8976572819b0012B11b506E100a765453);\n', '   touched[owner] = true;\n', ' }\n', '\n', ' function balanceOf(address _who)public constant returns (uint256 balance) {\n', '    return getBalance(_who);\n', ' }\n', ' \n', 'function getBalance(address _who) internal constant returns(uint256){\n', '\tif( currentCandyTotalSupply < candyTotalSupply ){\n', '\t    if( touched[_who] )\n', '\t\treturn balanceOf[_who];\n', '\t    else\n', '\t\treturn balanceOf[_who].add( candyBalance );\n', '\t} else {\n', '\t    return balanceOf[_who];\n', '\t}\n', '}\n', '    \n', ' function _transferFrom(address _from, address _to, uint256 _value)  internal {\n', '     require(_to != 0x0);\n', '     \n', '     if( currentCandyTotalSupply < candyTotalSupply && !touched[_from]  ){\n', '            balanceOf[_from] = balanceOf[_from].add( candyBalance );\n', '            touched[_from] = true;\n', '            currentCandyTotalSupply = currentCandyTotalSupply.add( candyBalance );\n', '     }     \n', '     require(balanceOf[_from] >= _value);\n', '     require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '     balanceOf[_from] = balanceOf[_from].sub(_value);\n', '     balanceOf[_to] = balanceOf[_to].add(_value);\n', '     Transfer(_from, _to, _value);\n', ' }\n', '\n', ' function transfer(address _to, uint256 _value) public returns (bool){     \n', '     _transferFrom(msg.sender,_to,_value);\n', '     return true;\n', ' }\n', '\n', ' function push(address _buyer, uint256 _amount) public onlyOwner {\n', '     uint256 val=_amount*(10**18);\n', '     _transferFrom(msg.sender,_buyer,val);\n', '     ExchangeTokenPushed(_buyer, val);\n', ' }\n', '\n', ' function ()public payable {\n', '     _tokenPurchase( );\n', ' }\n', '\n', ' function _tokenPurchase( ) internal {   \n', '     require(saleActive(msg.value));     \n', '     uint256 weiAmount = msg.value;\n', '     uint256 actualRate = getActualRate(); \n', '     uint256 amount = weiAmount.mul(actualRate);\n', '     _transferFrom(owner, msg.sender,amount);\n', '     TokenPurchase(msg.sender, weiAmount,amount);        \n', '     address wallet = walletArr[walletIdx];\n', '     walletIdx = (walletIdx+1) % walletArr.length;\n', '     wallet.transfer(msg.value);\n', '     FundTransfer(wallet, msg.value);\n', ' }\n', '\n', ' function saleActive(uint256 _value) public constant returns (bool) {\n', '     bool res = false;\n', '     uint256 t = getCurrentTimestamp();\n', '     uint256 s = totalSupply - balanceOf[owner];\n', '     if(supply() > 0 && t < date610){\n', '       if(s < totalSupply2){\n', '           if( _value>=minValue1 ){\n', '              res = true;\n', '           }\n', '       }else{\n', '           if( _value>= minValue2 ){\n', '              res = true;\n', '           }\n', '       }\n', '     }\n', '     return res;\n', ' }\n', '\n', ' function getActualRate() internal view returns (uint256){  \n', '    uint256 rate=0;      \n', '    uint256 s = totalSupply - balanceOf[owner];\t\n', '    if(s < totalSupply1){\n', '\t rate = rate1;\n', '    }else if(s < totalSupply2){\n', '\t rate = rate2;\n', '    }else{\n', '         rate = rate3;\n', '    }    \n', '    return rate;\n', ' }\n', ' \n', ' function supply()  internal constant  returns (uint256) {\n', '     return balanceOf[owner];\n', ' }\n', '\n', ' function getCurrentTimestamp() internal view returns (uint256){\n', '     return now;\n', ' }\n', '\n', ' function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '     return allowed[_owner][_spender];\n', ' }\n', '\n', ' function approve(address _spender, uint256 _value)public returns (bool) {\n', '     require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '     allowed[msg.sender][_spender] = _value;\n', '     Approval(msg.sender, _spender, _value);\n', '     return true;\n', ' }\n', ' \n', ' function transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n', '     var _allowance = allowed[_from][msg.sender];\n', '     require (_value <= _allowance);  \n', '      _transferFrom(_from,_to,_value);\n', '     allowed[_from][msg.sender] = _allowance.sub(_value);\n', '     Transfer(_from, _to, _value);\n', '     return true;\n', '   }\n', ' \n', '}']
