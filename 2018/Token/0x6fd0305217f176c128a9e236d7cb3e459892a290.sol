['/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract BigbomPrivateSaleList is Ownable {\n', '    mapping(address=>uint) public addressCap;\n', '\n', '    function BigbomPrivateSaleList() public  {}\n', '\n', '    event ListAddress( address _user, uint _amount, uint _time );\n', '\n', '    // Owner can delist by setting amount = 0.\n', '    // Onwer can also change it at any time\n', '    function listAddress( address _user, uint _amount ) public onlyOwner {\n', '        require(_user != address(0x0));\n', '\n', '        addressCap[_user] = _amount;\n', '        ListAddress( _user, _amount, now );\n', '    }\n', '\n', '    // an optimization in case of network congestion\n', '    function listAddresses( address[] _users, uint[] _amount ) public onlyOwner {\n', '        require(_users.length == _amount.length );\n', '        for( uint i = 0 ; i < _users.length ; i++ ) {\n', '            listAddress( _users[i], _amount[i] );\n', '        }\n', '    }\n', '\n', '    function getCap( address _user ) public constant returns(uint) {\n', '        return addressCap[_user];\n', '    }\n', '\n', '}']
['/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract BigbomPrivateSaleList is Ownable {\n', '    mapping(address=>uint) public addressCap;\n', '\n', '    function BigbomPrivateSaleList() public  {}\n', '\n', '    event ListAddress( address _user, uint _amount, uint _time );\n', '\n', '    // Owner can delist by setting amount = 0.\n', '    // Onwer can also change it at any time\n', '    function listAddress( address _user, uint _amount ) public onlyOwner {\n', '        require(_user != address(0x0));\n', '\n', '        addressCap[_user] = _amount;\n', '        ListAddress( _user, _amount, now );\n', '    }\n', '\n', '    // an optimization in case of network congestion\n', '    function listAddresses( address[] _users, uint[] _amount ) public onlyOwner {\n', '        require(_users.length == _amount.length );\n', '        for( uint i = 0 ; i < _users.length ; i++ ) {\n', '            listAddress( _users[i], _amount[i] );\n', '        }\n', '    }\n', '\n', '    function getCap( address _user ) public constant returns(uint) {\n', '        return addressCap[_user];\n', '    }\n', '\n', '}']
