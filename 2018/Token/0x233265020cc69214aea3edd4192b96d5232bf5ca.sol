['pragma solidity ^0.4.17;\n', '\n', '//Slightly modified SafeMath library - includes a min function\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function min(uint a, uint b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '//Swap interface- descriptions can be found in TokenToTokenSwap.sol\n', 'interface TokenToTokenSwap_Interface {\n', '  function CreateSwap(uint _amount_a, uint _amount_b, bool _sender_is_long, address _senderAdd) public payable;\n', '  function EnterSwap(uint _amount_a, uint _amount_b, bool _sender_is_long, address _senderAdd) public;\n', '  function createTokens() public;\n', '}\n', '\n', '\n', '//Swap factory functions - descriptions can be found in Factory.sol\n', 'interface Factory_Interface {\n', '  function createToken(uint _supply, address _party, bool _long, uint _start_date) public returns (address created, uint token_ratio);\n', '  function payToken(address _party, address _token_add) public;\n', '  function deployContract(uint _start_date) public payable returns (address created);\n', '   function getBase() public view returns(address _base1, address base2);\n', '  function getVariables() public view returns (address oracle_addr, uint swap_duration, uint swap_multiplier, address token_a_addr, address token_b_addr);\n', '}\n', '\n', '\n', '//This is the basic wrapped Ether contract. \n', '//All money deposited is transformed into ERC20 tokens at the rate of 1 wei = 1 token\n', 'contract Wrapped_Ether {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  /*Variables*/\n', '\n', '  //ERC20 fields\n', '  string public name = "Wrapped Ether";\n', '  uint public total_supply;\n', '\n', '\n', '  //ERC20 fields\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping (address => uint)) allowed;\n', '\n', '  /*Events*/\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '  event StateChanged(bool _success, string _message);\n', '\n', '  /*Functions*/\n', '\n', '  //This function creates tokens equal in value to the amount sent to the contract\n', '  function CreateToken() public payable {\n', '    require(msg.value > 0);\n', '    balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '    total_supply = total_supply.add(msg.value);\n', '  }\n', '\n', '  /*\n', "  * This function 'unwraps' an _amount of Ether in the sender's balance by transferring Ether to them\n", '  *\n', '  * @param "_amount": The amount of the token to unwrap\n', '  */\n', '  function withdraw(uint _value) public {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    total_supply = total_supply.sub(_value);\n', '    msg.sender.transfer(_value);\n', '  }\n', '\n', '  //Returns the balance associated with the passed in _owner\n', '  function balanceOf(address _owner) public constant returns (uint bal) { return balances[_owner]; }\n', '\n', '  /*\n', '  * Allows for a transfer of tokens to _to\n', '  *\n', '  * @param "_to": The address to send tokens to\n', '  * @param "_amount": The amount of tokens to send\n', '  */\n', '  function transfer(address _to, uint _amount) public returns (bool success) {\n', '    if (balances[msg.sender] >= _amount\n', '    && _amount > 0\n', '    && balances[_to] + _amount > balances[_to]) {\n', '      balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '      balances[_to] = balances[_to].add(_amount);\n', '      Transfer(msg.sender, _to, _amount);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  /*\n', '  * Allows an address with sufficient spending allowance to send tokens on the behalf of _from\n', '  *\n', '  * @param "_from": The address to send tokens from\n', '  * @param "_to": The address to send tokens to\n', '  * @param "_amount": The amount of tokens to send\n', '  */\n', '  function transferFrom(address _from, address _to, uint _amount) public returns (bool success) {\n', '    if (balances[_from] >= _amount\n', '    && allowed[_from][msg.sender] >= _amount\n', '    && _amount > 0\n', '    && balances[_to] + _amount > balances[_to]) {\n', '      balances[_from] = balances[_from].sub(_amount);\n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '      balances[_to] = balances[_to].add(_amount);\n', '      Transfer(_from, _to, _amount);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  //Approves a _spender an _amount of tokens to use\n', '  function approve(address _spender, uint _amount) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = _amount;\n', '    Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  //Returns the remaining allowance of tokens granted to the _spender from the _owner\n', '  function allowance(address _owner, address _spender) public view returns (uint remaining) { return allowed[_owner][_spender]; }\n', '}\n', '\n', '//The User Contract enables the entering of a deployed swap along with the wrapping of Ether.  This contract was specifically made for drct.decentralizedderivatives.org to simplify user metamask calls\n', 'contract UserContract{\n', '  TokenToTokenSwap_Interface swap;\n', '  Wrapped_Ether token;\n', '  Factory_Interface factory;\n', '\n', '  address public factory_address;\n', '  address owner;\n', '\n', '  function UserContract() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '  //The _swapAdd is the address of the deployed contract created from the Factory contract.\n', '  //_amounta and _amountb are the amounts of token_a and token_b (the base tokens) in the swap.  For wrapped Ether, this is wei.\n', '  //_premium is a base payment to the other party for taking the other side of the swap\n', '  // _isLong refers to whether the sender is long or short the reference rate\n', '  //Value must be sent with Initiate and Enter equivalent to the _amounta(in wei) and the premium, and _amountb respectively\n', '\n', '  function Initiate(address _swapadd, uint _amounta, uint _amountb, uint _premium, bool _isLong) payable public returns (bool) {\n', '    require(msg.value == _amounta + _premium);\n', '    swap = TokenToTokenSwap_Interface(_swapadd);\n', '    swap.CreateSwap.value(_premium)(_amounta, _amountb, _isLong, msg.sender);\n', '    address token_a_address;\n', '    address token_b_address;\n', '    (token_a_address,token_b_address) = factory.getBase();\n', '    token = Wrapped_Ether(token_a_address);\n', '    token.CreateToken.value(_amounta)();\n', '    bool success = token.transfer(_swapadd,_amounta);\n', '    return success;\n', '  }\n', '\n', '  function Enter(uint _amounta, uint _amountb, bool _isLong, address _swapadd) payable public returns(bool){\n', '    require(msg.value ==_amountb);\n', '    swap = TokenToTokenSwap_Interface(_swapadd);\n', '    swap.EnterSwap(_amounta, _amountb, _isLong,msg.sender);\n', '    address token_a_address;\n', '    address token_b_address;\n', '    (token_a_address,token_b_address) = factory.getBase();\n', '    token = Wrapped_Ether(token_b_address);\n', '    token.CreateToken.value(_amountb)();\n', '    bool success = token.transfer(_swapadd,_amountb);\n', '    swap.createTokens();\n', '    return success;\n', '\n', '  }\n', '\n', '\n', '  function setFactory(address _factory_address) public {\n', '      require (msg.sender == owner);\n', '    factory_address = _factory_address;\n', '    factory = Factory_Interface(factory_address);\n', '  }\n', '}']