['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenWithOwner {\n', '    address public owner;\n', '}\n', '\n', '/**\n', ' * @title PeriodicalReleaseLock\n', ' * @dev PeriodicalReleaseLock is a token holder contract that will allow a group of\n', ' * beneficiaries to release the tokens evenly and periodically after the frozen age\n', ' */\n', 'contract PeriodicReleaseLock {\n', '    using SafeERC20 for ERC20Basic;\n', '    using SafeMath for uint256;\n', '\n', '    struct FrozenStatus {\n', '        uint256 frozenTimestamp;        // the frozen time\n', '        uint256 frozenAmount;           // the remain frozen amount\n', '        uint256 releaseAmount;          // release amount each time\n', '        uint256 lastReleaseTimestamp;   // last release time\n', '    }\n', '\n', '    // Fired when token contract successfully calls freeze\n', '    event FreezeTokens(address indexed _target, uint256 _frozenAmount);\n', '    // Fired when token holder successfully calls release\n', '    event ReleaseTokens(address indexed _target, uint256 _releaseAmount);\n', '\n', '    event Test(uint256 balance, uint256 frozen);\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    modifier byToken {\n', '        require(msg.sender == address(token));\n', '        _;\n', '    }\n', '\n', '    uint256 public totalFrozen;\n', '    mapping (address => FrozenStatus) public frozenStatuses;\n', '\n', '    // time period between frozen and first release\n', '    uint256 public firstReleasePeriod;\n', '    // time period between last release and next release\n', '    uint256 public regularReleasePeriod;\n', '\n', '    function PeriodicReleaseLock(ERC20Basic _token, uint256 _firstReleasePeriod, uint256 _regularReleasePeriod) public {\n', '        require(_firstReleasePeriod >= 1 seconds);\n', '        require(_regularReleasePeriod >= 1 seconds);\n', '\n', '        token = _token;\n', '        firstReleasePeriod = _firstReleasePeriod;\n', '        regularReleasePeriod = _regularReleasePeriod;\n', '    }\n', '\n', '    function frozenStatusOf(address _target) public view returns (uint256, uint256, uint256, uint256) {\n', '        FrozenStatus storage frozenStatus = frozenStatuses[_target];\n', '        return (\n', '            frozenStatus.frozenTimestamp,\n', '            frozenStatus.frozenAmount,\n', '            frozenStatus.releaseAmount,\n', '            frozenStatus.lastReleaseTimestamp\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Freeze _frozenAmount of tokens held by _target with PeriodicReleaseLock.\n', '     */\n', '    function freeze(address _target, uint256 _frozenAmount, uint256 _releaseAmount) byToken public returns (bool) {\n', '        require(_target != 0x0);\n', '        require(_frozenAmount > 0);\n', '        require(_releaseAmount < _frozenAmount);\n', '\n', '        totalFrozen = totalFrozen.add(_frozenAmount);\n', '\n', '        FrozenStatus storage frozenStatus = frozenStatuses[_target];\n', '        require(frozenStatus.frozenAmount == 0); // each address can only be locked in a contract once\n', '\n', '        frozenStatus.frozenTimestamp = now;\n', '        frozenStatus.frozenAmount = _frozenAmount;\n', '        frozenStatus.releaseAmount = _releaseAmount;\n', '\n', '        FreezeTokens(_target, _frozenAmount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by PeriodicReleaseLock to beneficiary.\n', '     */\n', '    function release() public returns (bool) {\n', '        address target = msg.sender;\n', '\n', '        FrozenStatus storage frozenStatus = frozenStatuses[target];\n', '        require(frozenStatus.frozenAmount > 0);\n', '\n', '        uint256 actualLastReleaseTimestamp;\n', '\n', '        if (frozenStatus.lastReleaseTimestamp == 0) {\n', '            actualLastReleaseTimestamp = frozenStatus.frozenTimestamp + firstReleasePeriod;\n', '        } else {\n', '            actualLastReleaseTimestamp = frozenStatus.lastReleaseTimestamp + regularReleasePeriod;\n', '        }\n', '\n', '        require(now >= actualLastReleaseTimestamp);\n', '        frozenStatus.lastReleaseTimestamp = actualLastReleaseTimestamp;\n', '\n', '        uint256 actualReleaseAmount = Math.min256(frozenStatus.frozenAmount, frozenStatus.releaseAmount);\n', '\n', '        token.safeTransfer(target, actualReleaseAmount);\n', '\n', '        frozenStatus.frozenAmount = frozenStatus.frozenAmount.sub(actualReleaseAmount);\n', '        totalFrozen = totalFrozen.sub(actualReleaseAmount);\n', '\n', '        ReleaseTokens(target, actualReleaseAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Transfers tokens of unknown holders to token contract owner.\n', '    */\n', '    function missingTokensFallback() public {\n', '        uint256 missingTokens = token.balanceOf(this).sub(totalFrozen);\n', '        require(missingTokens > 0);\n', '\n', '        TokenWithOwner tokenWithOwner = TokenWithOwner(token);\n', '\n', '        token.safeTransfer(tokenWithOwner.owner(), missingTokens);\n', '    }\n', '}\n', '\n', 'contract Tutoreum is Ownable, StandardToken, BurnableToken {\n', '    string public constant name = "Ecotopia";\n', '    string public constant symbol = "ECO";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 20000000000 * (10 ** uint256(decimals));\n', '\n', '    function Tutoreum() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '    function transferAndFreeze(address _to, PeriodicReleaseLock _lock, uint256 _transferAmount, uint256 _frozenAmount, uint256 _releaseAmount) public {\n', '        require(_lock.token() == this);\n', '\n', '        if (_transferAmount > 0) {\n', '            assert(transfer(_to, _transferAmount));\n', '        }\n', '\n', '        if (_frozenAmount > 0) {\n', '            assert(transfer(_lock, _frozenAmount));\n', '            assert(_lock.freeze(_to, _frozenAmount, _releaseAmount));\n', '\n', '            assert(balances[_lock] >= _lock.totalFrozen());\n', '        }\n', '    }\n', '}']