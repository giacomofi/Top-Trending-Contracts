['pragma solidity ^0.4.23;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract CFSToken is ERC20Interface, Owned, SafeMath {\n', '    string  public symbol;\n', '    string  public name;\n', '    uint8   public decimals;\n', '    uint256 public totalSupply;\n', '    bool    public isStop;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    modifier runnable {\n', '        require(isStop == false);\n', '        _;\n', '    }\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor () public {\n', '        decimals = 18;                                     // Amount of decimals for display purposes\n', '        totalSupply = 10000000000 * 10**uint(decimals);    //total supply (Generate 1 billion tokens)\n', '        balances[msg.sender] = totalSupply;                \n', '        name = "Crypto Future SAFT";                       // Set the name for display purposes\n', '        symbol = "CFS";                                    // Set the symbol for display purposes\n', '        isStop = false;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account tokenOwner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public runnable returns (bool success) {\n', '        assert(balances[msg.sender] >= value);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], value);\n', '        balances[to] = safeAdd(balances[to], value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 tokens) public runnable returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 tokens) public runnable returns (bool success) {        \n', '        allowed[from][to] = safeSub(allowed[from][to], tokens);\n', '        balances[from] = safeSub(balances[from], tokens);        \n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public runnable view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function stop() public onlyOwner {\n', '        require(isStop == false);\n', '        isStop = true;\n', '    }\n', '\n', '    function restart() public onlyOwner {\n', '        require(isStop == true);\n', '        isStop = false;\n', '    }\n', '\n', '    function supplement(uint256 value) public runnable onlyOwner {\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], value);\n', '        totalSupply = safeAdd(totalSupply, value);\n', '    }\n', '    \n', '    function burn(uint256 value) public runnable onlyOwner{\n', '        assert(balances[msg.sender] >= value);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], value);\n', '        totalSupply = safeSub(totalSupply, value);\n', '        emit Burn(msg.sender, value);\n', '    }\n', '\n', '    function burnFrom(address from, uint256 value) public runnable onlyOwner returns (bool success) {\n', '        assert(balances[from] >= value);\n', '        assert(value <= allowed[from][msg.sender]);\n', '        balances[from] = safeSub(balances[from], value);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], value);\n', '        totalSupply = safeSub(totalSupply, value);\n', '        emit Burn(from, value);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function safeMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract CFSToken is ERC20Interface, Owned, SafeMath {\n', '    string  public symbol;\n', '    string  public name;\n', '    uint8   public decimals;\n', '    uint256 public totalSupply;\n', '    bool    public isStop;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    modifier runnable {\n', '        require(isStop == false);\n', '        _;\n', '    }\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor () public {\n', '        decimals = 18;                                     // Amount of decimals for display purposes\n', '        totalSupply = 10000000000 * 10**uint(decimals);    //total supply (Generate 1 billion tokens)\n', '        balances[msg.sender] = totalSupply;                \n', '        name = "Crypto Future SAFT";                       // Set the name for display purposes\n', '        symbol = "CFS";                                    // Set the symbol for display purposes\n', '        isStop = false;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account tokenOwner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public runnable returns (bool success) {\n', '        assert(balances[msg.sender] >= value);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], value);\n', '        balances[to] = safeAdd(balances[to], value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 tokens) public runnable returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 tokens) public runnable returns (bool success) {        \n', '        allowed[from][to] = safeSub(allowed[from][to], tokens);\n', '        balances[from] = safeSub(balances[from], tokens);        \n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public runnable view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function stop() public onlyOwner {\n', '        require(isStop == false);\n', '        isStop = true;\n', '    }\n', '\n', '    function restart() public onlyOwner {\n', '        require(isStop == true);\n', '        isStop = false;\n', '    }\n', '\n', '    function supplement(uint256 value) public runnable onlyOwner {\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], value);\n', '        totalSupply = safeAdd(totalSupply, value);\n', '    }\n', '    \n', '    function burn(uint256 value) public runnable onlyOwner{\n', '        assert(balances[msg.sender] >= value);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], value);\n', '        totalSupply = safeSub(totalSupply, value);\n', '        emit Burn(msg.sender, value);\n', '    }\n', '\n', '    function burnFrom(address from, uint256 value) public runnable onlyOwner returns (bool success) {\n', '        assert(balances[from] >= value);\n', '        assert(value <= allowed[from][msg.sender]);\n', '        balances[from] = safeSub(balances[from], value);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], value);\n', '        totalSupply = safeSub(totalSupply, value);\n', '        emit Burn(from, value);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
