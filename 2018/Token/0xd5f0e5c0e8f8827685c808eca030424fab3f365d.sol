['pragma solidity ^0.4.24;\n', '\n', 'contract BasicToken {\n', '    uint256 public totalSupply;\n', '    bool public allowTransfer;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is BasicToken {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require(allowTransfer);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', 'contract UtlToken is StandardToken {\n', '\n', '    string public name = "Utile Token";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "UTL";\n', '    string public version = &#39;UTL_1.0&#39;;\n', '    address public presaleAddress;\n', '    address public mainsaleAddress;\n', '    address public platformAddress;\n', '    address public creator;\n', '\n', '    event DepositEvent(address user, uint256 amount);\n', '    event WithdrawEvent(address from, address to, uint256 amount);\n', '\n', '    function UtlToken(address presale_address, address mainsale_address, address platform_address) {\n', '        balances[msg.sender] = 0;\n', '        totalSupply = 0;\n', '        creator = msg.sender;\n', '        name = name;\n', '        decimals = decimals;\n', '        symbol = symbol;\n', '        presaleAddress = presale_address;\n', '        mainsaleAddress = mainsale_address;\n', '        platformAddress = platform_address;\n', '        allowTransfer = true;\n', '        createTokens();\n', '    }\n', '\n', '    // creates all tokens 200 million\n', '    // this address will hold all tokens\n', '    // all community contributions coins will be taken from this address\n', '    function createTokens() internal {\n', '        uint256 total = 200000000000000000000000000;\n', '        balances[this] = total;\n', '        totalSupply = total;\n', '    }\n', '\n', '    function setAllowTransfer(bool allowed) external {\n', '        require(msg.sender == creator);\n', '        allowTransfer = allowed;\n', '    }\n', '\n', '    function mintToken(address to, uint256 amount) external returns (bool success) {\n', '        require(msg.sender == presaleAddress || msg.sender == mainsaleAddress || msg.sender == creator || msg.sender == platformAddress);\n', '        require(balances[this] >= amount);\n', '        balances[this] -= amount;\n', '        balances[to] += amount;\n', '        Transfer(this, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function withdrawToken(address to, uint256 amount) external returns (bool success) {\n', '        require(msg.sender == platformAddress);\n', '        require(balances[this] >= amount || balances[msg.sender] >= amount);\n', '        if(balances[msg.sender] >= amount){\n', '            balances[msg.sender] -= amount;\n', '            balances[to] += amount;\n', '            WithdrawEvent(msg.sender, to, amount);\n', '        } else {\n', '            balances[this] -= amount;\n', '            balances[to] += amount;\n', '            WithdrawEvent(this, to, amount);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        if(_to == platformAddress){\n', '            DepositEvent(msg.sender, _value);\n', '        } else {\n', '            Transfer(msg.sender, _to, _value);\n', '        }\n', '        return true;\n', '    }\n', '}']