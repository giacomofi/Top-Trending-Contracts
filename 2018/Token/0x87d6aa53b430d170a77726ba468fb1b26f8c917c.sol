['pragma solidity 0.4.24;\n', '\n', '/*\n', '* SafeMath to avoid data overwrite\n', '*/\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0);\n', '        uint c = a / b;\n', '        require(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '}\n', '\n', '/*\n', ' * \n', ' * find in https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function balanceOf(address _owner) view public returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner validAddress public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Lockable is Ownable {\n', '    bool public lockStatus = false;\n', '    \n', '    event Lock(address);    \n', '    event UnLock(address);\n', '    \n', '    modifier unLocked() {\n', '        assert(!lockStatus);\n', '        _;\n', '    }\n', '\n', '    modifier inLocked() {\n', '        assert(lockStatus);\n', '        _;\n', '    }\n', '    \n', '    function lock() onlyOwner unLocked public returns (bool) {\n', '        lockStatus = true;\n', '        emit Lock(msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function unlock() onlyOwner inLocked public returns (bool) {\n', '        lockStatus = false;\n', '        emit UnLock(msg.sender);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/* \n', ' * @title Standard ERC20 token\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, Lockable {\n', '    using SafeMath for uint;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    function balanceOf(address _owner) view public returns (uint256 balance){\n', '        require(address(0) != _owner);\n', '        return balanceOf[_owner];\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '        require(address(0) != _owner);\n', '        require(address(0) != _spender);\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) unLocked public returns (bool success) {\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) unLocked public returns (bool success) {\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(address(0) != _spender);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract TokenTemp is StandardToken {\n', '    constructor (uint256 _supply, string _name, string _symbol, uint8 _decimals) public {\n', '        totalSupply = _supply * 10 ** uint256(_decimals); \n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/*\n', '* SafeMath to avoid data overwrite\n', '*/\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0);\n', '        uint c = a / b;\n', '        require(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '}\n', '\n', '/*\n', ' * \n', ' * find in https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function balanceOf(address _owner) view public returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner validAddress public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Lockable is Ownable {\n', '    bool public lockStatus = false;\n', '    \n', '    event Lock(address);    \n', '    event UnLock(address);\n', '    \n', '    modifier unLocked() {\n', '        assert(!lockStatus);\n', '        _;\n', '    }\n', '\n', '    modifier inLocked() {\n', '        assert(lockStatus);\n', '        _;\n', '    }\n', '    \n', '    function lock() onlyOwner unLocked public returns (bool) {\n', '        lockStatus = true;\n', '        emit Lock(msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function unlock() onlyOwner inLocked public returns (bool) {\n', '        lockStatus = false;\n', '        emit UnLock(msg.sender);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/* \n', ' * @title Standard ERC20 token\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, Lockable {\n', '    using SafeMath for uint;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    function balanceOf(address _owner) view public returns (uint256 balance){\n', '        require(address(0) != _owner);\n', '        return balanceOf[_owner];\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '        require(address(0) != _owner);\n', '        require(address(0) != _spender);\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) unLocked public returns (bool success) {\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) unLocked public returns (bool success) {\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(address(0) != _spender);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract TokenTemp is StandardToken {\n', '    constructor (uint256 _supply, string _name, string _symbol, uint8 _decimals) public {\n', '        totalSupply = _supply * 10 ** uint256(_decimals); \n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '}']
