['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        ERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '    internal\n', '    {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev Modifier by Rolong <rolong at vip.qq.com>\n', ' */\n', 'contract TokenVesting {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    event Released(uint256 amount);\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public constant beneficiary1 = 0xD2A0cADD34De9E514D5c87C3c1BfC30bC7a05bF9;\n', '    address public constant beneficiary2 = 0xbAf2A44d11Ded7d0ba1D03a3baE3b36E6125Ac24;\n', '\n', '    uint256 public constant start = 1548086400; // 2019/1/22 0:0:0\n', '    uint256 public constant duration = 15638400; // duration = 1563724800(2019/7/22) - 1548086400(2018/1/22)\n', '    uint256 public constant month = 2606400; // month = duration / 6\n', '    \n', '    // YCCC\n', '    ERC20Basic token = ERC20Basic(0xc9ca0a382ae69dba0c8ff2c00c1662529ddee430);\n', '\n', '    uint256 public released;\n', '\n', '    function TokenVesting() public\n', '    {\n', '    }\n', '\n', '    function() payable public {\n', '        if (msg.value > 0) { revert();  }\n', '\n', '        uint256 unreleased = releasableAmount();\n', '\n', '        require(unreleased > 0);\n', '\n', '        uint256 unreleasedHalf = unreleased.div(2);\n', '\n', '        released = released.add(unreleasedHalf.mul(2));\n', '\n', '        token.safeTransfer(beneficiary1, unreleasedHalf);\n', '        token.safeTransfer(beneficiary2, unreleasedHalf);\n', '\n', '        emit Released(unreleasedHalf.mul(2));\n', '    }\n', '\n', '    function releasableAmount() public view returns (uint256) {\n', '        uint256 amount = vestedAmount().sub(released);\n', '        uint256 currentBalance = token.balanceOf(this);\n', '        if (amount > currentBalance) {\n', '            return currentBalance;\n', '        }\n', '        return amount;\n', '    }\n', '\n', '    function vestedAmount() public view returns (uint256) {\n', '        uint256 currentBalance = token.balanceOf(this);\n', '        uint256 totalBalance = currentBalance.add(released);\n', '\n', '        if (block.timestamp < start) {\n', '            return 0;\n', '        } else if (block.timestamp >= start.add(duration)) {\n', '            return totalBalance;\n', '        } else {\n', '            uint256 timeGap = block.timestamp.sub(start);\n', '            if (timeGap < month) {\n', '                return 0;\n', '            } else {\n', '                uint256 sec = timeGap.div(month).mul(month);\n', '                return totalBalance.mul(sec).div(duration);\n', '            }\n', '        }\n', '    }\n', '}']