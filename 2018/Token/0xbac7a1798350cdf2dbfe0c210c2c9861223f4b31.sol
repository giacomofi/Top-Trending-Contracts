['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract MNC is StandardToken, Ownable {\n', '  string public constant name = "Moneynet Coin";\n', '  string public constant symbol = "MNC";\n', '  uint32 public constant decimals = 18;\n', '\n', '  // Tokens amount\n', '  uint256 public saleTokens = uint256(6e9).mul(1 ether);\n', '  uint256 public ecosystemTokens = uint256(204e8).mul(1 ether);\n', '  uint256 public teamTokens = uint256(4e9).mul(1 ether);\n', '  uint256 public investorsTokens = uint256(24e8).mul(1 ether);\n', '  uint256 public advisorsTokens = uint256(2e9).mul(1 ether);\n', '  uint256 public bonusTokens = uint256(16e8).mul(1 ether);\n', '  uint256 public reserveTokens = uint256(36e8).mul(1 ether);\n', '\n', '  // sale contract address\n', '  address public saleContract;\n', '\n', '  // locked tokens data\n', '  mapping(address => uint256) public lockedTokens_3;\n', '  mapping(address => uint256) public lockedTokens_6;\n', '  mapping(address => uint256) public lockedTokens_12;\n', '  uint256 lockTime = now;\n', '\n', '  constructor(address _newOwner) public {\n', '    require(_newOwner != address(0));\n', '    uint256 tokens = ecosystemTokens;\n', '    owner = _newOwner;\n', '    balances[owner] = balances[owner].add(tokens);\n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    emit Transfer(address(0), owner, tokens);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Sending tokens for sale to the sale contract address.\n', '   * @param _contract Sale contract address.\n', '   */\n', '  function activateSaleContract(address _contract) public onlyOwner returns (bool) {\n', '    require(_contract != address(0));\n', '    require(saleTokens > 0);\n', '    uint256 tokens = saleTokens;\n', '    saleTokens = 0;\n', '    saleContract = _contract;\n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    balances[_contract] = balances[_contract].add(tokens);\n', '    emit Transfer(address(0), _contract, tokens);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Sending reserve tokens to the sale contract address.\n', '   */\n', '  function sendReserveTokens() public onlyOwner returns (bool) {\n', '    require(saleContract != address(0));\n', '    require(reserveTokens > 0);\n', '    uint256 tokens = reserveTokens;\n', '    reserveTokens = 0;\n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    balances[saleContract] = balances[saleContract].add(tokens);\n', '    emit Transfer(address(0), saleContract, tokens);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev  Team tokens accrual.\n', '   * @param _address Recepient address.\n', '   * @param _amount Accrued amount.\n', '   */\n', '  function accrueTeamTokens(address _address, uint256 _amount) public onlyOwner returns (bool) {\n', '    require(_amount > 0);\n', '    require(_amount <= teamTokens);\n', '    require(_address != address(0));\n', '    teamTokens = teamTokens.sub(_amount);\n', '    lockedTokens_12[_address] = lockedTokens_12[_address].add(_amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev  Investors tokens accrual.\n', '   * @param _address Recepient address.\n', '   * @param _amount Accrued amount.\n', '   */\n', '  function accrueInvestorsTokens(address _address, uint256 _amount) public onlyOwner returns (bool) {\n', '    require(_amount > 0);\n', '    require(_amount <= investorsTokens);\n', '    require(_address != address(0));\n', '    investorsTokens = investorsTokens.sub(_amount);\n', '    lockedTokens_6[_address] = lockedTokens_6[_address].add(_amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev  Advisors tokens accrual.\n', '   * @param _address Recepient address.\n', '   * @param _amount Accrued amount.\n', '   */\n', '  function accrueAdvisorsTokens(address _address, uint256 _amount) public onlyOwner returns (bool) {\n', '    require(_amount > 0);\n', '    require(_amount <= advisorsTokens);\n', '    require(_address != address(0));\n', '    advisorsTokens = advisorsTokens.sub(_amount);\n', '    lockedTokens_6[_address] = lockedTokens_6[_address].add(_amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev  Bonus tokens accrual.\n', '   * @param _address Recepient address.\n', '   * @param _amount Accrued amount.\n', '   */\n', '  function accrueBonusTokens(address _address, uint256 _amount) public onlyOwner returns (bool) {\n', '    require(_amount > 0);\n', '    require(_amount <= bonusTokens);\n', '    require(_address != address(0));\n', '    bonusTokens = bonusTokens.sub(_amount);\n', '    lockedTokens_3[_address] = lockedTokens_3[_address].add(_amount);\n', '    return true;\n', '  }\n', '\n', '  function releaseTokens() public returns (bool) {\n', '    uint256 tokens = 0;\n', '    if (lockedTokens_3[msg.sender] > 0 && now.sub(lockTime) > 91 days) {\n', '      tokens = tokens.add(lockedTokens_3[msg.sender]);\n', '      lockedTokens_3[msg.sender] = 0;\n', '    }\n', '    if (lockedTokens_6[msg.sender] > 0 && now.sub(lockTime) > 182 days) {\n', '      tokens = tokens.add(lockedTokens_6[msg.sender]);\n', '      lockedTokens_6[msg.sender] = 0;\n', '    }\n', '    if (lockedTokens_12[msg.sender] > 0 && now.sub(lockTime) > 365 days) {\n', '      tokens = tokens.add(lockedTokens_12[msg.sender]);\n', '      lockedTokens_12[msg.sender] = 0;\n', '    }\n', '    require (tokens > 0);\n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '    emit Transfer(address(0), msg.sender, tokens);\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract MNC is StandardToken, Ownable {\n', '  string public constant name = "Moneynet Coin";\n', '  string public constant symbol = "MNC";\n', '  uint32 public constant decimals = 18;\n', '\n', '  // Tokens amount\n', '  uint256 public saleTokens = uint256(6e9).mul(1 ether);\n', '  uint256 public ecosystemTokens = uint256(204e8).mul(1 ether);\n', '  uint256 public teamTokens = uint256(4e9).mul(1 ether);\n', '  uint256 public investorsTokens = uint256(24e8).mul(1 ether);\n', '  uint256 public advisorsTokens = uint256(2e9).mul(1 ether);\n', '  uint256 public bonusTokens = uint256(16e8).mul(1 ether);\n', '  uint256 public reserveTokens = uint256(36e8).mul(1 ether);\n', '\n', '  // sale contract address\n', '  address public saleContract;\n', '\n', '  // locked tokens data\n', '  mapping(address => uint256) public lockedTokens_3;\n', '  mapping(address => uint256) public lockedTokens_6;\n', '  mapping(address => uint256) public lockedTokens_12;\n', '  uint256 lockTime = now;\n', '\n', '  constructor(address _newOwner) public {\n', '    require(_newOwner != address(0));\n', '    uint256 tokens = ecosystemTokens;\n', '    owner = _newOwner;\n', '    balances[owner] = balances[owner].add(tokens);\n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    emit Transfer(address(0), owner, tokens);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Sending tokens for sale to the sale contract address.\n', '   * @param _contract Sale contract address.\n', '   */\n', '  function activateSaleContract(address _contract) public onlyOwner returns (bool) {\n', '    require(_contract != address(0));\n', '    require(saleTokens > 0);\n', '    uint256 tokens = saleTokens;\n', '    saleTokens = 0;\n', '    saleContract = _contract;\n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    balances[_contract] = balances[_contract].add(tokens);\n', '    emit Transfer(address(0), _contract, tokens);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Sending reserve tokens to the sale contract address.\n', '   */\n', '  function sendReserveTokens() public onlyOwner returns (bool) {\n', '    require(saleContract != address(0));\n', '    require(reserveTokens > 0);\n', '    uint256 tokens = reserveTokens;\n', '    reserveTokens = 0;\n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    balances[saleContract] = balances[saleContract].add(tokens);\n', '    emit Transfer(address(0), saleContract, tokens);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev  Team tokens accrual.\n', '   * @param _address Recepient address.\n', '   * @param _amount Accrued amount.\n', '   */\n', '  function accrueTeamTokens(address _address, uint256 _amount) public onlyOwner returns (bool) {\n', '    require(_amount > 0);\n', '    require(_amount <= teamTokens);\n', '    require(_address != address(0));\n', '    teamTokens = teamTokens.sub(_amount);\n', '    lockedTokens_12[_address] = lockedTokens_12[_address].add(_amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev  Investors tokens accrual.\n', '   * @param _address Recepient address.\n', '   * @param _amount Accrued amount.\n', '   */\n', '  function accrueInvestorsTokens(address _address, uint256 _amount) public onlyOwner returns (bool) {\n', '    require(_amount > 0);\n', '    require(_amount <= investorsTokens);\n', '    require(_address != address(0));\n', '    investorsTokens = investorsTokens.sub(_amount);\n', '    lockedTokens_6[_address] = lockedTokens_6[_address].add(_amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev  Advisors tokens accrual.\n', '   * @param _address Recepient address.\n', '   * @param _amount Accrued amount.\n', '   */\n', '  function accrueAdvisorsTokens(address _address, uint256 _amount) public onlyOwner returns (bool) {\n', '    require(_amount > 0);\n', '    require(_amount <= advisorsTokens);\n', '    require(_address != address(0));\n', '    advisorsTokens = advisorsTokens.sub(_amount);\n', '    lockedTokens_6[_address] = lockedTokens_6[_address].add(_amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev  Bonus tokens accrual.\n', '   * @param _address Recepient address.\n', '   * @param _amount Accrued amount.\n', '   */\n', '  function accrueBonusTokens(address _address, uint256 _amount) public onlyOwner returns (bool) {\n', '    require(_amount > 0);\n', '    require(_amount <= bonusTokens);\n', '    require(_address != address(0));\n', '    bonusTokens = bonusTokens.sub(_amount);\n', '    lockedTokens_3[_address] = lockedTokens_3[_address].add(_amount);\n', '    return true;\n', '  }\n', '\n', '  function releaseTokens() public returns (bool) {\n', '    uint256 tokens = 0;\n', '    if (lockedTokens_3[msg.sender] > 0 && now.sub(lockTime) > 91 days) {\n', '      tokens = tokens.add(lockedTokens_3[msg.sender]);\n', '      lockedTokens_3[msg.sender] = 0;\n', '    }\n', '    if (lockedTokens_6[msg.sender] > 0 && now.sub(lockTime) > 182 days) {\n', '      tokens = tokens.add(lockedTokens_6[msg.sender]);\n', '      lockedTokens_6[msg.sender] = 0;\n', '    }\n', '    if (lockedTokens_12[msg.sender] > 0 && now.sub(lockTime) > 365 days) {\n', '      tokens = tokens.add(lockedTokens_12[msg.sender]);\n', '      lockedTokens_12[msg.sender] = 0;\n', '    }\n', '    require (tokens > 0);\n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '    emit Transfer(address(0), msg.sender, tokens);\n', '  }\n', '}']
