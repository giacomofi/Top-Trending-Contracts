['pragma solidity ^0.4.18;\n', '\n', 'contract EIP20Interface {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract STTR is EIP20Interface {\n', '    \n', '    using SafeMath for uint;\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    address public wallet;\n', '    address public contractOwner;\n', '    \n', '    uint public price = 0.0000000000995 ether;\n', '    \n', '    bool public isSalePaused = false;\n', '    bool public transfersPaused = false;\n', '    \n', '\n', '    function STTR(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        address _wallet,\n', '        address _contractOwner\n', '        \n', '    ) public {\n', '        balances[msg.sender] = _initialAmount;             \n', '        totalSupply = _initialAmount;                   \n', '        name = _tokenName;                                  \n', '        decimals = _decimalUnits;                           \n', '        symbol = _tokenSymbol;     \n', '        wallet = _wallet;\n', '        contractOwner = _contractOwner;\n', '        \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        \n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] =  allowed[_from][msg.sender].sub(_value);\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }   \n', '    \n', '   \n', '\n', '    \n', '      modifier onlyWhileOpen {\n', '        require(!isSalePaused);\n', '        _;\n', '    }\n', '       modifier onlyOwner() {\n', '        require(contractOwner == msg.sender);\n', '        _;\n', '    }\n', '    \n', '   \n', '    function () public payable onlyWhileOpen{\n', '        require(msg.value>0);\n', '        require(msg.value<=200 ether);\n', '        require(msg.sender != address(0));\n', '        \n', '        uint toMint = msg.value/price;\n', '        totalSupply += toMint;\n', '        balances[msg.sender] = balances[msg.sender].add(toMint);\n', '        wallet.transfer(msg.value);\n', '        Transfer(0, msg.sender, toMint);\n', '        \n', '    }\n', '    \n', '   \n', '    function pauseSale()\n', '        public\n', '        onlyOwner\n', '        returns (bool) {\n', '            isSalePaused = true;\n', '            return true;\n', '        }\n', '\n', '    function restartSale()\n', '        public\n', '        onlyOwner\n', '        returns (bool) {\n', '            isSalePaused = false;\n', '            return true;\n', '        }\n', '        \n', '    function setPrice(uint newPrice)\n', '        public\n', '        onlyOwner {\n', '            price = newPrice;\n', '        }\n', '   \n', '      modifier whenNotPaused() {\n', '    require(!transfersPaused);\n', '    _;\n', '  }\n', '  \n', '  modifier whenPaused() {\n', '    require(transfersPaused);\n', '    _;\n', '  }\n', '\n', '  function pauseTransfers() \n', '    onlyOwner \n', '    whenNotPaused \n', '    public {\n', '    transfersPaused = true;\n', '  }\n', '\n', '  function unPauseTransfers() \n', '    onlyOwner \n', '    whenPaused \n', '    public {\n', '    transfersPaused = false;\n', '  }\n', '     function withdrawTokens(address where) onlyOwner public returns (bool) {\n', '        uint256 Amount = balances[address(this)];\n', '        balances[address(this)] = balances[address(this)].sub(Amount);\n', '        balances[where] = balances[where].add(Amount);\n', '        Transfer(address(this), where, Amount);\n', '    }\n', '\n', '    \n', '}']