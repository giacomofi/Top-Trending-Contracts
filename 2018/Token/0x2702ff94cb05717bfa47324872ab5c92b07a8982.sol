['pragma solidity ^0.4.0;\n', '\n', '\n', '/// @title Abstract token contract - Functions to be implemented by token contracts.\n', 'contract Token {\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '\n', '    // This is not an abstract function, because solc won&#39;t recognize generated getter functions for public variables as functions.\n', '    function totalSupply() public constant returns (uint256 supply);\n', '    function balanceOf(address owner) public constant returns (uint256 balance);\n', '    function allowance(address owner, address spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/// @title Standard token contract - Standard token interface implementation.\n', 'contract StandardToken is Token {\n', '\n', '    /*\n', '     *  Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public maxSupply;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success.\n', '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @return Returns success of function call.\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (balances[msg.sender] < _value) {\n', '            // Balance too low\n', '            revert();\n', '        }\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @return Returns success of function call.\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\n', '            // Balance or allowance too low\n', '            revert();\n', '        }\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    /// @return Returns success of function call.\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read functions\n', '     */\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    /// @return Returns remaining allowance for spender.\n', '    function allowance(address _owner, address _spender)\n', '        constant\n', '        public\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @return Returns balance of owner.\n', '    function balanceOf(address _owner)\n', '        constant\n', '        public\n', '        returns (uint256)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', '// author: SuXeN\n', 'contract SolarNA is StandardToken {\n', '\n', '    /*\n', '     *  Token meta data\n', '     */\n', '    string constant public name = "SolarNA Token";\n', '    string constant public symbol = "SOLA";\n', '    uint8 constant public decimals = 3;\n', '    address public owner;\n', '    uint remaining;\n', '    uint divPrice = 10 ** 12;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Contract constructor function gives tokens to presale_addresses and leave 100k tokens for sale.\n', '    /// @param presale_addresses Array of addresses receiving preassigned tokens.\n', '    /// @param tokens Array of preassigned token amounts.\n', '    /// NB: Max 4 presale_addresses\n', '    function SolarNA(address[] presale_addresses, uint[] tokens)\n', '        public\n', '    {\n', '        uint assignedTokens;\n', '        owner = msg.sender;\n', '        maxSupply = 500000 * 10**3;\n', '        for (uint i=0; i<presale_addresses.length; i++) {\n', '            if (presale_addresses[i] == 0) {\n', '                // Address should not be null.\n', '                revert();\n', '            }\n', '            balances[presale_addresses[i]] += tokens[i];\n', '            assignedTokens += tokens[i];\n', '            emit Transfer(0, presale_addresses[i], tokens[i]); // emit an event\n', '        }\n', '        /// If presale_addresses > 4 => The maxSupply will increase\n', '        remaining = maxSupply - assignedTokens;\n', '        assignedTokens += remaining;\n', '        if (assignedTokens != maxSupply) {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /// Change price from 1000 SOLA = 1 ether to 500 SOLA = 1 ether \n', '    function changePrice(bool _conditon) public returns (uint) {\n', '        require(msg.sender == owner);\n', '        if (_conditon) {\n', '            divPrice *= 2;\n', '        }\n', '        return divPrice;\n', '    }\n', '\n', '    function () public payable {\n', '        /// Required msg.value > 0 and still remaining tokens\n', '        uint value = msg.value / uint(divPrice);\n', '        require(remaining >= value && value != 0);\n', '        balances[msg.sender] += value;\n', '        remaining -= value;\n', '        emit Transfer(address(0), msg.sender, value);\n', '    }\n', '    \n', '    /// Transfer all the funds in ETH to the owner\n', '    function transferAll() public returns (bool) {\n', '        require(msg.sender == owner);\n', '        owner.transfer(address(this).balance);\n', '        return true;\n', '    }\n', '\n', '    /// Return MaxSupply    \n', '    function totalSupply()  public constant returns (uint256 supply) {\n', '        return maxSupply;\n', '    }\n', '    \n', '    /// Return remaining tokens\n', '    function remainingTokens() public view returns (uint256) {\n', '        return remaining;\n', '    } \n', '\n', '}']
['pragma solidity ^0.4.0;\n', '\n', '\n', '/// @title Abstract token contract - Functions to be implemented by token contracts.\n', 'contract Token {\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '\n', "    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions.\n", '    function totalSupply() public constant returns (uint256 supply);\n', '    function balanceOf(address owner) public constant returns (uint256 balance);\n', '    function allowance(address owner, address spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/// @title Standard token contract - Standard token interface implementation.\n', 'contract StandardToken is Token {\n', '\n', '    /*\n', '     *  Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public maxSupply;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', "    /// @dev Transfers sender's tokens to a given address. Returns success.\n", '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @return Returns success of function call.\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (balances[msg.sender] < _value) {\n', '            // Balance too low\n', '            revert();\n', '        }\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @return Returns success of function call.\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\n', '            // Balance or allowance too low\n', '            revert();\n', '        }\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    /// @return Returns success of function call.\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read functions\n', '     */\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    /// @return Returns remaining allowance for spender.\n', '    function allowance(address _owner, address _spender)\n', '        constant\n', '        public\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @return Returns balance of owner.\n', '    function balanceOf(address _owner)\n', '        constant\n', '        public\n', '        returns (uint256)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', '// author: SuXeN\n', 'contract SolarNA is StandardToken {\n', '\n', '    /*\n', '     *  Token meta data\n', '     */\n', '    string constant public name = "SolarNA Token";\n', '    string constant public symbol = "SOLA";\n', '    uint8 constant public decimals = 3;\n', '    address public owner;\n', '    uint remaining;\n', '    uint divPrice = 10 ** 12;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Contract constructor function gives tokens to presale_addresses and leave 100k tokens for sale.\n', '    /// @param presale_addresses Array of addresses receiving preassigned tokens.\n', '    /// @param tokens Array of preassigned token amounts.\n', '    /// NB: Max 4 presale_addresses\n', '    function SolarNA(address[] presale_addresses, uint[] tokens)\n', '        public\n', '    {\n', '        uint assignedTokens;\n', '        owner = msg.sender;\n', '        maxSupply = 500000 * 10**3;\n', '        for (uint i=0; i<presale_addresses.length; i++) {\n', '            if (presale_addresses[i] == 0) {\n', '                // Address should not be null.\n', '                revert();\n', '            }\n', '            balances[presale_addresses[i]] += tokens[i];\n', '            assignedTokens += tokens[i];\n', '            emit Transfer(0, presale_addresses[i], tokens[i]); // emit an event\n', '        }\n', '        /// If presale_addresses > 4 => The maxSupply will increase\n', '        remaining = maxSupply - assignedTokens;\n', '        assignedTokens += remaining;\n', '        if (assignedTokens != maxSupply) {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /// Change price from 1000 SOLA = 1 ether to 500 SOLA = 1 ether \n', '    function changePrice(bool _conditon) public returns (uint) {\n', '        require(msg.sender == owner);\n', '        if (_conditon) {\n', '            divPrice *= 2;\n', '        }\n', '        return divPrice;\n', '    }\n', '\n', '    function () public payable {\n', '        /// Required msg.value > 0 and still remaining tokens\n', '        uint value = msg.value / uint(divPrice);\n', '        require(remaining >= value && value != 0);\n', '        balances[msg.sender] += value;\n', '        remaining -= value;\n', '        emit Transfer(address(0), msg.sender, value);\n', '    }\n', '    \n', '    /// Transfer all the funds in ETH to the owner\n', '    function transferAll() public returns (bool) {\n', '        require(msg.sender == owner);\n', '        owner.transfer(address(this).balance);\n', '        return true;\n', '    }\n', '\n', '    /// Return MaxSupply    \n', '    function totalSupply()  public constant returns (uint256 supply) {\n', '        return maxSupply;\n', '    }\n', '    \n', '    /// Return remaining tokens\n', '    function remainingTokens() public view returns (uint256) {\n', '        return remaining;\n', '    } \n', '\n', '}']
