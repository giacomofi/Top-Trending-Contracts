['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/FFUELCoinToken.sol\n', '\n', 'contract FFUELCoinToken is MintableToken {\n', '    string public constant name = "FIFO FUEL";\n', '    string public constant symbol = "FFUEL";\n', '    uint8 public decimals = 18;\n', '    bool public tradingStarted = false;\n', '\n', '    // version cache buster\n', '    string public constant version = "v2";\n', '\n', '    // allow exceptional transfer for sender address - this mapping  can be modified only before the starting rounds\n', '    mapping (address => bool) public transferable;\n', '\n', '    /**\n', '     * @dev modifier that throws if spender address is not allowed to transfer\n', '     * and the trading is not enabled\n', '     */\n', '    modifier allowTransfer(address _spender) {\n', '\n', '        require(tradingStarted || transferable[_spender]);\n', '        _;\n', '    }\n', '    /**\n', '    *\n', '    * Only the owner of the token smart contract can add allow token to be transfer before the trading has started\n', '    *\n', '    */\n', '\n', '    function modifyTransferableHash(address _spender, bool value) onlyOwner public {\n', '        transferable[_spender] = value;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to enable the trading.\n', '     */\n', '    function startTrading() onlyOwner public {\n', '        tradingStarted = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows anyone to transfer the tokens once trading has started\n', '     * @param _to the recipient address of the tokens.\n', '     * @param _value number of tokens to be transfered.\n', '     */\n', '    function transfer(address _to, uint _value) allowTransfer(msg.sender) public returns (bool){\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows anyone to transfer the  tokens once trading has started or if the spender is part of the mapping\n', '\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) allowTransfer(_from) public returns (bool){\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender when not paused.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approve(address _spender, uint256 _value) public allowTransfer(_spender) returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * Adding whenNotPaused\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public allowTransfer(_spender) returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '     * Adding whenNotPaused\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public allowTransfer(_spender) returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '// File: contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  // override to create custom buy\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // overrided to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '// File: contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal{\n', '  }\n', '}\n', '\n', '// File: contracts/FFUELCoinTokenCrowdSale.sol\n', '\n', 'contract FFUELCoinTokenCrowdSale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    uint256 public numberOfPurchasers = 0;\n', '\n', '    // maximum tokens that can be minted in this crowd sale\n', '    uint256 public maxTokenSupply = 0;\n', '\n', '    // amounts of tokens already minted at the begining of this crowd sale - initialised later by the constructor\n', '    uint256 public initialTokenAmount = 0;\n', '\n', '    // version cache buster\n', '    string public constant version = "v2";\n', '\n', '    // pending contract owner\n', '    address public pendingOwner;\n', '\n', '    // minimum amount to participate\n', '    uint256 public minimumAmount = 0;\n', '\n', '    //\n', '    FFUELCoinToken public token;\n', '\n', '    // white listing admin - initialised later by the constructor\n', '    address public whiteListingAdmin;\n', '    address public rateAdmin;\n', '\n', '\n', '    bool public preSaleMode = true;\n', '    uint256 public tokenRateGwei;\n', '    address vested;\n', '    uint256 vestedAmount;\n', '\n', '    function FFUELCoinTokenCrowdSale(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        uint256 _minimumAmount,\n', '        uint256 _maxTokenSupply,\n', '        address _wallet,\n', '        address _pendingOwner,\n', '        address _whiteListingAdmin,\n', '        address _rateAdmin,\n', '        address _vested,\n', '        uint256 _vestedAmount,\n', '        FFUELCoinToken _token\n', '    )\n', '    FinalizableCrowdsale()\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet) public\n', '    {\n', '        require(_pendingOwner != address(0));\n', '        require(_minimumAmount >= 0);\n', '        require(_maxTokenSupply > 0);\n', '\n', '        pendingOwner = _pendingOwner;\n', '        minimumAmount = _minimumAmount;\n', '        maxTokenSupply = _maxTokenSupply;\n', '\n', '        // whitelisting admin\n', '        setAdmin(_whiteListingAdmin, true);\n', '        setAdmin(_rateAdmin, false);\n', '\n', '        vested = _vested;\n', '        vestedAmount = _vestedAmount;\n', '\n', '        token=_token;\n', '    }\n', '\n', '\n', '    /**\n', '   * @dev Calculates the amount of  coins the buyer gets\n', '   * @param weiAmount uint the amount of wei send to the contract\n', '   * @return uint the amount of tokens the buyer gets\n', '   */\n', '    function computeTokenWithBonus(uint256 weiAmount) public view returns (uint256) {\n', '        uint256 tokens_ = 0;\n', '\n', '        if (weiAmount >= 100000 ether) {\n', '\n', '            tokens_ = weiAmount.mul(50).div(100);\n', '\n', '        } else if (weiAmount < 100000 ether && weiAmount >= 50000 ether) {\n', '\n', '            tokens_ = weiAmount.mul(35).div(100);\n', '\n', '        } else if (weiAmount < 50000 ether && weiAmount >= 10000 ether) {\n', '\n', '            tokens_ = weiAmount.mul(25).div(100);\n', '\n', '        } else if (weiAmount < 10000 ether && weiAmount >= 2500 ether) {\n', '\n', '            tokens_ = weiAmount.mul(15).div(100);\n', '        }\n', '\n', '\n', '        return tokens_;\n', '    }\n', '\n', '    /**\n', '    *\n', '    * Create the token on the fly, owner is the contract, not the contract owner yet\n', '    *\n', '    **/\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return token;\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0), "not for 0x0");\n', '        //\n', '        require(validPurchase(), "Crowd sale not started or ended, or min amount too low");\n', '        // buying can only begins as soon as the ownership has been transferred\n', '        require(owner == pendingOwner, "ownership transfer not done");\n', '\n', '        require(tokenRateGwei != 0, "rate invalid");\n', '\n', '        // validate KYC here\n', '        // if not part of kyc then throw\n', '        bool cleared;\n', '        uint16 contributor_get;\n', '        address ref;\n', '        uint16 affiliate_get;\n', '\n', '        (cleared, contributor_get, ref, affiliate_get) = getContributor(beneficiary);\n', '\n', '        // Transaction do not happen if the contributor is not KYC cleared\n', '        require(cleared, "not whitelisted");\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // make sure we accept only the minimum contribution\n', '        require(weiAmount > 0);\n', '\n', '        // Compute the number of tokens per Gwei\n', '        uint256 tokens = weiAmount.div(1000000000).mul(tokenRateGwei);\n', '\n', '        // compute the amount of bonus, from the contribution amount\n', '        uint256 bonus = computeTokenWithBonus(tokens);\n', '\n', '        // compute the amount of token bonus for the contributor thank to his referral\n', '        uint256 contributorGet = tokens.mul(contributor_get).div(10000);\n', '\n', '        // Sum it all\n', '        tokens = tokens.add(bonus);\n', '        tokens = tokens.add(contributorGet);\n', '\n', '        token.mint(beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        // update\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        numberOfPurchasers = numberOfPurchasers + 1;\n', '\n', '        forwardFunds();\n', '\n', '        // ------------------------------------------------------------------\n', '        // compute the amount of token bonus that the referral get :\n', '        // only if KYC cleared, only if enough tokens still available\n', '        // ------------------------------------------------------------------\n', '        bool refCleared;\n', '        (refCleared) = getClearance(ref);\n', '        if (refCleared && ref != beneficiary)\n', '        {\n', '            // recompute the tokens amount using only the rate\n', '            tokens = weiAmount.div(1000000000).mul(tokenRateGwei);\n', '\n', '            // compute the amount of token for the affiliate\n', '            uint256 affiliateGet = tokens.mul(affiliate_get).div(10000);\n', '\n', '            // capped to a maxTokenSupply\n', '            // make sure we can not mint more token than expected\n', '            // we do not throw here as if this edge case happens it can be dealt with of chain\n', '            if (token.totalSupply() + affiliateGet <= maxTokenSupply)\n', '            {\n', '                // Mint the token\n', '                token.mint(ref, affiliateGet);\n', '                emit TokenPurchase(ref, ref, 0, affiliateGet);\n', '            }\n', '        }\n', '    }\n', '\n', '    // overriding Crowdsale#validPurchase to add extra cap logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal view returns (bool) {\n', '\n', '        // make sure we accept only the minimum contribution\n', '        bool minAmount = (msg.value >= minimumAmount);\n', '\n', '        // cap crowdsaled to a maxTokenSupply\n', '        // make sure we can not mint more token than expected\n', '        bool lessThanMaxSupply = (token.totalSupply() + msg.value.div(1000000000).mul(tokenRateGwei)) <= maxTokenSupply;\n', '\n', '        //bool withinCap = weiRaised.add(msg.value) <= cap;\n', '        return super.validPurchase() && minAmount && lessThanMaxSupply;\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        bool capReached = token.totalSupply() >= maxTokenSupply;\n', '        return super.hasEnded() || capReached;\n', '    }\n', '\n', '\n', '    /**\n', '      *\n', '      * Called when the admin function finalize is called :\n', '      *\n', '      * it mint the remaining amount to have the supply exactly as planned\n', '      * it transfer the ownership of the token to the owner of the smart contract\n', '      *\n', '      */\n', '    function finalization() internal {\n', '        //\n', '        // send back to the owner the remaining tokens before finishing minting\n', '        // it ensure that there is only a exact maxTokenSupply token minted ever\n', '        //\n', '        uint256 remainingTokens = maxTokenSupply - token.totalSupply();\n', '\n', '        // mint the remaining amount and assign them to the owner\n', '        token.mint(owner, remainingTokens);\n', '        emit TokenPurchase(owner, owner, 0, remainingTokens);\n', '\n', '        // finalize the refundable inherited contract\n', '        super.finalization();\n', '\n', '        // no more minting allowed - immutable\n', '        token.finishMinting();\n', '\n', '        // transfer the token owner ship from the contract address to the real owner\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '\n', '    /**\n', '      *\n', '      * Admin functions only called by owner:\n', '      * Can change events dates\n', '      *\n', '      */\n', '    function changeDates(uint256 _startTime, uint256 _endTime) public onlyOwner {\n', '        require(_endTime >= _startTime, "End time need to be in the > _startTime");\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '    }\n', '\n', '    /**\n', '      *\n', '      * Admin functions only called by owner:\n', '      * Change the owner\n', '      *\n', '      */\n', '    function transferOwnerShipToPendingOwner() public {\n', '\n', '        // only the pending owner can change the ownership\n', '        require(msg.sender == pendingOwner, "only the pending owner can change the ownership");\n', '\n', '        // can only be changed one time\n', '        require(owner != pendingOwner, "Only one time allowed");\n', '\n', '        // raise the event\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '\n', '        // change the ownership\n', '        owner = pendingOwner;\n', '\n', '        // pre mint the coins\n', '        preMint(vested, vestedAmount);\n', '    }\n', '\n', '    /**\n', '    *\n', '    * Return the amount of token minted during that crowd sale, removing the token pre minted\n', '    *\n', '    */\n', '    function minted() public view returns (uint256)\n', '    {\n', '        return token.totalSupply().sub(initialTokenAmount);\n', '    }\n', '\n', '    // hard code the pre minting\n', '    function preMint(address vestedAddress, uint256 _amount) public onlyOwner {\n', '        runPreMint(vestedAddress, _amount);\n', '        //\n', '        runPreMint(0x6B36b48Cb69472193444658b0b181C8049d371e1, 50000000000000000000000000);\n', '        // reserved\n', '        runPreMint(0xa484Ebcb519a6E50e4540d48F40f5ee466dEB7A7, 5000000000000000000000000);\n', '        // bounty\n', '        runPreMint(0x999f7f15Cf00E4495872D55221256Da7BCec2214, 5000000000000000000000000);\n', '        // team\n', '        runPreMint(0xB2233A3c93937E02a579422b6Ffc12DA5fc917E7, 5000000000000000000000000);\n', '        // advisors\n', '\n', '        // only one time\n', '        preSaleMode = false;\n', '    }\n', '\n', '    // run the pre minting\n', '    // can be done only one time\n', '    function runPreMint(address _target, uint256 _amount) public onlyOwner {\n', '        if (preSaleMode)\n', '        {\n', '            token.mint(_target, _amount);\n', '            emit TokenPurchase(owner, _target, 0, _amount);\n', '\n', '            initialTokenAmount = token.totalSupply();\n', '        }\n', '    }\n', '\n', '    /**\n', '      *\n', '      * Allow exceptional transfer\n', '      *\n', '      */\n', '\n', '    function modifyTransferableHash(address _spender, bool value) public onlyOwner\n', '    {\n', '        token.modifyTransferableHash(_spender, value);\n', '    }\n', '\n', '    // add a way to change the whitelistadmin user\n', '    function setAdmin(address _adminAddress, bool whiteListAdmin) public onlyOwner\n', '    {\n', '        if (whiteListAdmin)\n', '        {\n', '            whiteListingAdmin = _adminAddress;\n', '        } else {\n', '            rateAdmin = _adminAddress;\n', '        }\n', '    }\n', '    /**\n', '     *\n', '     * Admin functions only executed by rateAdmin\n', '     * Can change the rate for the token sold\n', '     * to increase the trust we could imagine to setup a range to avoid modification that are too far outside of the\n', '     * acceptable range :\n', '     *\n', '     */\n', '    function setTokenRateInGwei(uint256 _tokenRateGwei) public {\n', '        require(msg.sender == rateAdmin, "invalid admin");\n', '        tokenRateGwei = _tokenRateGwei;\n', '        // update the integer rate accordingly, even if not used to not confuse users\n', '        rate = _tokenRateGwei.div(1000000000);\n', '    }\n', '\n', '    //\n', '    // Whitelist with affiliated structure\n', '    //\n', '    struct Contributor {\n', '\n', '        bool cleared;\n', '\n', '        // % more for the contributor bring on board\n', '        uint16 contributor_get;\n', '\n', '        // eth address of the referer if any - the contributor address is the key of the hash\n', '        address ref;\n', '\n', '        // % more for the referrer\n', '        uint16 affiliate_get;\n', '    }\n', '\n', '\n', '    mapping(address => Contributor) public whitelist;\n', '    address[] public whitelistArray;\n', '\n', '    /**\n', '    *    @dev Populate the whitelist, only executed by whiteListingAdmin\n', '    *\n', '    */\n', '\n', '    function setContributor(address _address, bool cleared, uint16 contributor_get, uint16 affiliate_get, address ref) public {\n', '\n', '        // not possible to give an exorbitant bonus to be more than 100% (100x100 = 10000)\n', '        require(contributor_get < 10000, "c too high");\n', '        require(affiliate_get < 10000, "a too high");\n', '        require(msg.sender == whiteListingAdmin, "invalid admin");\n', '\n', '        Contributor storage contributor = whitelist[_address];\n', '\n', '        contributor.cleared = cleared;\n', '        contributor.contributor_get = contributor_get;\n', '\n', '        contributor.ref = ref;\n', '        contributor.affiliate_get = affiliate_get;\n', '    }\n', '\n', '    function getContributor(address _address) public view returns (bool, uint16, address, uint16) {\n', '        return (whitelist[_address].cleared, whitelist[_address].contributor_get, whitelist[_address].ref, whitelist[_address].affiliate_get);\n', '    }\n', '\n', '    function getClearance(address _address) public view returns (bool) {\n', '        return whitelist[_address].cleared;\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/FFUELCoinToken.sol\n', '\n', 'contract FFUELCoinToken is MintableToken {\n', '    string public constant name = "FIFO FUEL";\n', '    string public constant symbol = "FFUEL";\n', '    uint8 public decimals = 18;\n', '    bool public tradingStarted = false;\n', '\n', '    // version cache buster\n', '    string public constant version = "v2";\n', '\n', '    // allow exceptional transfer for sender address - this mapping  can be modified only before the starting rounds\n', '    mapping (address => bool) public transferable;\n', '\n', '    /**\n', '     * @dev modifier that throws if spender address is not allowed to transfer\n', '     * and the trading is not enabled\n', '     */\n', '    modifier allowTransfer(address _spender) {\n', '\n', '        require(tradingStarted || transferable[_spender]);\n', '        _;\n', '    }\n', '    /**\n', '    *\n', '    * Only the owner of the token smart contract can add allow token to be transfer before the trading has started\n', '    *\n', '    */\n', '\n', '    function modifyTransferableHash(address _spender, bool value) onlyOwner public {\n', '        transferable[_spender] = value;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to enable the trading.\n', '     */\n', '    function startTrading() onlyOwner public {\n', '        tradingStarted = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows anyone to transfer the tokens once trading has started\n', '     * @param _to the recipient address of the tokens.\n', '     * @param _value number of tokens to be transfered.\n', '     */\n', '    function transfer(address _to, uint _value) allowTransfer(msg.sender) public returns (bool){\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows anyone to transfer the  tokens once trading has started or if the spender is part of the mapping\n', '\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) allowTransfer(_from) public returns (bool){\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender when not paused.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approve(address _spender, uint256 _value) public allowTransfer(_spender) returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * Adding whenNotPaused\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public allowTransfer(_spender) returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '     * Adding whenNotPaused\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public allowTransfer(_spender) returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '// File: contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  // override to create custom buy\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // overrided to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '// File: contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal{\n', '  }\n', '}\n', '\n', '// File: contracts/FFUELCoinTokenCrowdSale.sol\n', '\n', 'contract FFUELCoinTokenCrowdSale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    uint256 public numberOfPurchasers = 0;\n', '\n', '    // maximum tokens that can be minted in this crowd sale\n', '    uint256 public maxTokenSupply = 0;\n', '\n', '    // amounts of tokens already minted at the begining of this crowd sale - initialised later by the constructor\n', '    uint256 public initialTokenAmount = 0;\n', '\n', '    // version cache buster\n', '    string public constant version = "v2";\n', '\n', '    // pending contract owner\n', '    address public pendingOwner;\n', '\n', '    // minimum amount to participate\n', '    uint256 public minimumAmount = 0;\n', '\n', '    //\n', '    FFUELCoinToken public token;\n', '\n', '    // white listing admin - initialised later by the constructor\n', '    address public whiteListingAdmin;\n', '    address public rateAdmin;\n', '\n', '\n', '    bool public preSaleMode = true;\n', '    uint256 public tokenRateGwei;\n', '    address vested;\n', '    uint256 vestedAmount;\n', '\n', '    function FFUELCoinTokenCrowdSale(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        uint256 _minimumAmount,\n', '        uint256 _maxTokenSupply,\n', '        address _wallet,\n', '        address _pendingOwner,\n', '        address _whiteListingAdmin,\n', '        address _rateAdmin,\n', '        address _vested,\n', '        uint256 _vestedAmount,\n', '        FFUELCoinToken _token\n', '    )\n', '    FinalizableCrowdsale()\n', '    Crowdsale(_startTime, _endTime, _rate, _wallet) public\n', '    {\n', '        require(_pendingOwner != address(0));\n', '        require(_minimumAmount >= 0);\n', '        require(_maxTokenSupply > 0);\n', '\n', '        pendingOwner = _pendingOwner;\n', '        minimumAmount = _minimumAmount;\n', '        maxTokenSupply = _maxTokenSupply;\n', '\n', '        // whitelisting admin\n', '        setAdmin(_whiteListingAdmin, true);\n', '        setAdmin(_rateAdmin, false);\n', '\n', '        vested = _vested;\n', '        vestedAmount = _vestedAmount;\n', '\n', '        token=_token;\n', '    }\n', '\n', '\n', '    /**\n', '   * @dev Calculates the amount of  coins the buyer gets\n', '   * @param weiAmount uint the amount of wei send to the contract\n', '   * @return uint the amount of tokens the buyer gets\n', '   */\n', '    function computeTokenWithBonus(uint256 weiAmount) public view returns (uint256) {\n', '        uint256 tokens_ = 0;\n', '\n', '        if (weiAmount >= 100000 ether) {\n', '\n', '            tokens_ = weiAmount.mul(50).div(100);\n', '\n', '        } else if (weiAmount < 100000 ether && weiAmount >= 50000 ether) {\n', '\n', '            tokens_ = weiAmount.mul(35).div(100);\n', '\n', '        } else if (weiAmount < 50000 ether && weiAmount >= 10000 ether) {\n', '\n', '            tokens_ = weiAmount.mul(25).div(100);\n', '\n', '        } else if (weiAmount < 10000 ether && weiAmount >= 2500 ether) {\n', '\n', '            tokens_ = weiAmount.mul(15).div(100);\n', '        }\n', '\n', '\n', '        return tokens_;\n', '    }\n', '\n', '    /**\n', '    *\n', '    * Create the token on the fly, owner is the contract, not the contract owner yet\n', '    *\n', '    **/\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return token;\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0), "not for 0x0");\n', '        //\n', '        require(validPurchase(), "Crowd sale not started or ended, or min amount too low");\n', '        // buying can only begins as soon as the ownership has been transferred\n', '        require(owner == pendingOwner, "ownership transfer not done");\n', '\n', '        require(tokenRateGwei != 0, "rate invalid");\n', '\n', '        // validate KYC here\n', '        // if not part of kyc then throw\n', '        bool cleared;\n', '        uint16 contributor_get;\n', '        address ref;\n', '        uint16 affiliate_get;\n', '\n', '        (cleared, contributor_get, ref, affiliate_get) = getContributor(beneficiary);\n', '\n', '        // Transaction do not happen if the contributor is not KYC cleared\n', '        require(cleared, "not whitelisted");\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // make sure we accept only the minimum contribution\n', '        require(weiAmount > 0);\n', '\n', '        // Compute the number of tokens per Gwei\n', '        uint256 tokens = weiAmount.div(1000000000).mul(tokenRateGwei);\n', '\n', '        // compute the amount of bonus, from the contribution amount\n', '        uint256 bonus = computeTokenWithBonus(tokens);\n', '\n', '        // compute the amount of token bonus for the contributor thank to his referral\n', '        uint256 contributorGet = tokens.mul(contributor_get).div(10000);\n', '\n', '        // Sum it all\n', '        tokens = tokens.add(bonus);\n', '        tokens = tokens.add(contributorGet);\n', '\n', '        token.mint(beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        // update\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        numberOfPurchasers = numberOfPurchasers + 1;\n', '\n', '        forwardFunds();\n', '\n', '        // ------------------------------------------------------------------\n', '        // compute the amount of token bonus that the referral get :\n', '        // only if KYC cleared, only if enough tokens still available\n', '        // ------------------------------------------------------------------\n', '        bool refCleared;\n', '        (refCleared) = getClearance(ref);\n', '        if (refCleared && ref != beneficiary)\n', '        {\n', '            // recompute the tokens amount using only the rate\n', '            tokens = weiAmount.div(1000000000).mul(tokenRateGwei);\n', '\n', '            // compute the amount of token for the affiliate\n', '            uint256 affiliateGet = tokens.mul(affiliate_get).div(10000);\n', '\n', '            // capped to a maxTokenSupply\n', '            // make sure we can not mint more token than expected\n', '            // we do not throw here as if this edge case happens it can be dealt with of chain\n', '            if (token.totalSupply() + affiliateGet <= maxTokenSupply)\n', '            {\n', '                // Mint the token\n', '                token.mint(ref, affiliateGet);\n', '                emit TokenPurchase(ref, ref, 0, affiliateGet);\n', '            }\n', '        }\n', '    }\n', '\n', '    // overriding Crowdsale#validPurchase to add extra cap logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal view returns (bool) {\n', '\n', '        // make sure we accept only the minimum contribution\n', '        bool minAmount = (msg.value >= minimumAmount);\n', '\n', '        // cap crowdsaled to a maxTokenSupply\n', '        // make sure we can not mint more token than expected\n', '        bool lessThanMaxSupply = (token.totalSupply() + msg.value.div(1000000000).mul(tokenRateGwei)) <= maxTokenSupply;\n', '\n', '        //bool withinCap = weiRaised.add(msg.value) <= cap;\n', '        return super.validPurchase() && minAmount && lessThanMaxSupply;\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        bool capReached = token.totalSupply() >= maxTokenSupply;\n', '        return super.hasEnded() || capReached;\n', '    }\n', '\n', '\n', '    /**\n', '      *\n', '      * Called when the admin function finalize is called :\n', '      *\n', '      * it mint the remaining amount to have the supply exactly as planned\n', '      * it transfer the ownership of the token to the owner of the smart contract\n', '      *\n', '      */\n', '    function finalization() internal {\n', '        //\n', '        // send back to the owner the remaining tokens before finishing minting\n', '        // it ensure that there is only a exact maxTokenSupply token minted ever\n', '        //\n', '        uint256 remainingTokens = maxTokenSupply - token.totalSupply();\n', '\n', '        // mint the remaining amount and assign them to the owner\n', '        token.mint(owner, remainingTokens);\n', '        emit TokenPurchase(owner, owner, 0, remainingTokens);\n', '\n', '        // finalize the refundable inherited contract\n', '        super.finalization();\n', '\n', '        // no more minting allowed - immutable\n', '        token.finishMinting();\n', '\n', '        // transfer the token owner ship from the contract address to the real owner\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '\n', '    /**\n', '      *\n', '      * Admin functions only called by owner:\n', '      * Can change events dates\n', '      *\n', '      */\n', '    function changeDates(uint256 _startTime, uint256 _endTime) public onlyOwner {\n', '        require(_endTime >= _startTime, "End time need to be in the > _startTime");\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '    }\n', '\n', '    /**\n', '      *\n', '      * Admin functions only called by owner:\n', '      * Change the owner\n', '      *\n', '      */\n', '    function transferOwnerShipToPendingOwner() public {\n', '\n', '        // only the pending owner can change the ownership\n', '        require(msg.sender == pendingOwner, "only the pending owner can change the ownership");\n', '\n', '        // can only be changed one time\n', '        require(owner != pendingOwner, "Only one time allowed");\n', '\n', '        // raise the event\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '\n', '        // change the ownership\n', '        owner = pendingOwner;\n', '\n', '        // pre mint the coins\n', '        preMint(vested, vestedAmount);\n', '    }\n', '\n', '    /**\n', '    *\n', '    * Return the amount of token minted during that crowd sale, removing the token pre minted\n', '    *\n', '    */\n', '    function minted() public view returns (uint256)\n', '    {\n', '        return token.totalSupply().sub(initialTokenAmount);\n', '    }\n', '\n', '    // hard code the pre minting\n', '    function preMint(address vestedAddress, uint256 _amount) public onlyOwner {\n', '        runPreMint(vestedAddress, _amount);\n', '        //\n', '        runPreMint(0x6B36b48Cb69472193444658b0b181C8049d371e1, 50000000000000000000000000);\n', '        // reserved\n', '        runPreMint(0xa484Ebcb519a6E50e4540d48F40f5ee466dEB7A7, 5000000000000000000000000);\n', '        // bounty\n', '        runPreMint(0x999f7f15Cf00E4495872D55221256Da7BCec2214, 5000000000000000000000000);\n', '        // team\n', '        runPreMint(0xB2233A3c93937E02a579422b6Ffc12DA5fc917E7, 5000000000000000000000000);\n', '        // advisors\n', '\n', '        // only one time\n', '        preSaleMode = false;\n', '    }\n', '\n', '    // run the pre minting\n', '    // can be done only one time\n', '    function runPreMint(address _target, uint256 _amount) public onlyOwner {\n', '        if (preSaleMode)\n', '        {\n', '            token.mint(_target, _amount);\n', '            emit TokenPurchase(owner, _target, 0, _amount);\n', '\n', '            initialTokenAmount = token.totalSupply();\n', '        }\n', '    }\n', '\n', '    /**\n', '      *\n', '      * Allow exceptional transfer\n', '      *\n', '      */\n', '\n', '    function modifyTransferableHash(address _spender, bool value) public onlyOwner\n', '    {\n', '        token.modifyTransferableHash(_spender, value);\n', '    }\n', '\n', '    // add a way to change the whitelistadmin user\n', '    function setAdmin(address _adminAddress, bool whiteListAdmin) public onlyOwner\n', '    {\n', '        if (whiteListAdmin)\n', '        {\n', '            whiteListingAdmin = _adminAddress;\n', '        } else {\n', '            rateAdmin = _adminAddress;\n', '        }\n', '    }\n', '    /**\n', '     *\n', '     * Admin functions only executed by rateAdmin\n', '     * Can change the rate for the token sold\n', '     * to increase the trust we could imagine to setup a range to avoid modification that are too far outside of the\n', '     * acceptable range :\n', '     *\n', '     */\n', '    function setTokenRateInGwei(uint256 _tokenRateGwei) public {\n', '        require(msg.sender == rateAdmin, "invalid admin");\n', '        tokenRateGwei = _tokenRateGwei;\n', '        // update the integer rate accordingly, even if not used to not confuse users\n', '        rate = _tokenRateGwei.div(1000000000);\n', '    }\n', '\n', '    //\n', '    // Whitelist with affiliated structure\n', '    //\n', '    struct Contributor {\n', '\n', '        bool cleared;\n', '\n', '        // % more for the contributor bring on board\n', '        uint16 contributor_get;\n', '\n', '        // eth address of the referer if any - the contributor address is the key of the hash\n', '        address ref;\n', '\n', '        // % more for the referrer\n', '        uint16 affiliate_get;\n', '    }\n', '\n', '\n', '    mapping(address => Contributor) public whitelist;\n', '    address[] public whitelistArray;\n', '\n', '    /**\n', '    *    @dev Populate the whitelist, only executed by whiteListingAdmin\n', '    *\n', '    */\n', '\n', '    function setContributor(address _address, bool cleared, uint16 contributor_get, uint16 affiliate_get, address ref) public {\n', '\n', '        // not possible to give an exorbitant bonus to be more than 100% (100x100 = 10000)\n', '        require(contributor_get < 10000, "c too high");\n', '        require(affiliate_get < 10000, "a too high");\n', '        require(msg.sender == whiteListingAdmin, "invalid admin");\n', '\n', '        Contributor storage contributor = whitelist[_address];\n', '\n', '        contributor.cleared = cleared;\n', '        contributor.contributor_get = contributor_get;\n', '\n', '        contributor.ref = ref;\n', '        contributor.affiliate_get = affiliate_get;\n', '    }\n', '\n', '    function getContributor(address _address) public view returns (bool, uint16, address, uint16) {\n', '        return (whitelist[_address].cleared, whitelist[_address].contributor_get, whitelist[_address].ref, whitelist[_address].affiliate_get);\n', '    }\n', '\n', '    function getClearance(address _address) public view returns (bool) {\n', '        return whitelist[_address].cleared;\n', '    }\n', '\n', '\n', '}']
