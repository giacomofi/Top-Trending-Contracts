['pragma solidity ^0.4.21;\n', '\n', 'contract ERC20Template {\n', '    \n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ERC20 is ERC20Template {\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    \n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '\n', '    function ERC20(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\n', '        balances[msg.sender] = _initialAmount;               \n', '        totalSupply = _initialAmount;                        \n', '        name = _tokenName;                                   \n', '        decimals = _decimalUnits;                            \n', '        symbol = _tokenSymbol;                               \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value); \n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value); \n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); \n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', 'contract UbiatarPlay is ERC20 {\n', '    \n', '    /* ERC20 */\n', '    string public name = &#39;UbiatarPlay&#39;;\n', '    string public symbol = &#39;UAC&#39;;\n', '    uint8 public decimals = 8;\n', '    \n', '    /* UACToken */\n', '    address owner; \n', '    address public crowdsale;\n', '    string public version = &#39;v0.8&#39;;\n', '    uint256 public totalSupply = 1000000000 * 10**uint(decimals);\n', '\n', '    modifier onlyBy(address _account) {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '    \n', '    constructor() ERC20 (totalSupply, name, decimals, symbol) public {\n', '        owner = msg.sender;\n', '        crowdsale = address(0);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Transfer(msg.sender, address(0), _value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract ERC20Template {\n', '    \n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ERC20 is ERC20Template {\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    \n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '\n', '    function ERC20(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\n', '        balances[msg.sender] = _initialAmount;               \n', '        totalSupply = _initialAmount;                        \n', '        name = _tokenName;                                   \n', '        decimals = _decimalUnits;                            \n', '        symbol = _tokenSymbol;                               \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value); \n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value); \n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); \n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', 'contract UbiatarPlay is ERC20 {\n', '    \n', '    /* ERC20 */\n', "    string public name = 'UbiatarPlay';\n", "    string public symbol = 'UAC';\n", '    uint8 public decimals = 8;\n', '    \n', '    /* UACToken */\n', '    address owner; \n', '    address public crowdsale;\n', "    string public version = 'v0.8';\n", '    uint256 public totalSupply = 1000000000 * 10**uint(decimals);\n', '\n', '    modifier onlyBy(address _account) {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '    \n', '    constructor() ERC20 (totalSupply, name, decimals, symbol) public {\n', '        owner = msg.sender;\n', '        crowdsale = address(0);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Transfer(msg.sender, address(0), _value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '}']
