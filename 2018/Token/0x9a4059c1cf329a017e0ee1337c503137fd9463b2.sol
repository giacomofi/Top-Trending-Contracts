['pragma solidity ^0.4.20;\n', '\n', '\n', 'pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title Safe math operations that throw error on overflow.\n', ' *\n', ' * Credit: Taking ideas from FirstBlood token\n', ' */\n', 'library SafeMath {\n', '\n', '    /** \n', '     * @dev Safely add two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x+y.\n', '     */\n', '    function add(uint256 x, uint256 y)\n', '    internal constant\n', '    returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    /** \n', '     * @dev Safely substract two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x-y.\n', '     */\n', '    function sub(uint256 x, uint256 y)\n', '    internal constant\n', '    returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    /** \n', '     * @dev Safely multiply two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x*y.\n', '     */\n', '    function mul(uint256 x, uint256 y)\n', '    internal constant\n', '    returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0) || (z/x == y));\n', '        return z;\n', '    }\n', '\n', '    /**\n', '    * @dev Parse a floating point number from String to uint, e.g. "250.56" to "25056"\n', '     */\n', '    function parse(string s) \n', '    internal constant \n', '    returns (uint256) \n', '    {\n', '    bytes memory b = bytes(s);\n', '    uint result = 0;\n', '    for (uint i = 0; i < b.length; i++) {\n', '        if (b[i] >= 48 && b[i] <= 57) {\n', '            result = result * 10 + (uint(b[i]) - 48); \n', '        }\n', '    }\n', '    return result; \n', '}\n', '}\n', '\n', '\n', '/**\n', ' * @title The abstract ERC-20 Token Standard definition.\n', ' *\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'contract Token {\n', '    /// @dev Returns the total token supply.\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    /// @dev MUST trigger when tokens are transferred, including zero value transfers.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    /// @dev MUST trigger on any successful call to approve(address _spender, uint256 _value).\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Default implementation of the ERC-20 Token Standard.\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    modifier onlyPayloadSize(uint numwords) {\n', '        assert(msg.data.length == numwords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. \n', '     * @dev The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n', '     *\n', '     * @dev A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     *\n', '     * @param _to The receiver of the tokens.\n', '     * @param _value The amount of tokens to send.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transfer(address _to, uint256 _value)\n', '    public\n', '    returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '            balances[_to] = SafeMath.add(balances[_to], _value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n', '     *\n', '     * @dev The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. \n', '     * @dev This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in \n', '     * @dev sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized the sender of \n', '     * @dev the message via some mechanism.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     *\n', '     * @param _from The sender of the tokens.\n', '     * @param _to The receiver of the tokens.\n', '     * @param _value The amount of tokens to send.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] = SafeMath.add(balances[_to], _value);\n', '            balances[_from] = SafeMath.sub(balances[_from], _value);\n', '            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the account balance of another account with address _owner.\n', '     *\n', '     * @param _owner The address of the account to check.\n', '     * @return The account balance.\n', '     */\n', '    function balanceOf(address _owner)\n', '    public constant\n', '    returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Allows _spender to withdraw from your account multiple times, up to the _value amount. \n', '     * @dev If this function is called again it overwrites the current allowance with _value.\n', '     *\n', '     * @dev NOTE: To prevent attack vectors like the one described in [1] and discussed in [2], clients \n', '     * @dev SHOULD make sure to create user interfaces in such a way that they set the allowance first \n', '     * @dev to 0 before setting it to another value for the same spender. THOUGH The contract itself \n', '     * @dev shouldn&#39;t enforce it, to allow backwards compatilibilty with contracts deployed before.\n', '     * @dev [1] https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\n', '     * @dev [2] https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '    public\n', '    onlyPayloadSize(2)\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\n', '     *\n', '     * @param _owner The address of the sender.\n', '     * @param _spender The address of the receiver.\n', '     * @return The allowed withdrawal amount.\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '    public constant\n', '    onlyPayloadSize(2)\n', '    returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title The LCDToken Token contract.\n', ' *\n', ' * Credit: Taking ideas from BAT token and NET token\n', ' */\n', ' /*is StandardToken */\n', 'contract LCDToken is StandardToken {\n', '\n', '    // Token metadata\n', '    string public constant name = "Lucyd";\n', '    string public constant symbol = "LCD";\n', '    uint256 public constant decimals = 18;\n', '\n', '    uint256 public constant TOKEN_COMPANY_OWNED = 10 * (10**6) * 10**decimals; // 10 million LCDs\n', '    uint256 public constant TOKEN_MINTING = 30 * (10**6) * 10**decimals;       // 30 million LCDs\n', '    uint256 public constant TOKEN_BUSINESS = 10 * (10**6) * 10**decimals;       // 10 million LCDs\n', '\n', '    // wallet that is allowed to distribute tokens on behalf of the app store\n', '    address public APP_STORE;\n', '\n', '    // Administrator for multi-sig mechanism\n', '    address public admin1;\n', '    address public admin2;\n', '\n', '    // Accounts that are allowed to deliver tokens\n', '    address public tokenVendor1;\n', '    address public tokenVendor2;\n', '\n', '    // Keep track of holders and icoBuyers\n', '    mapping (address => bool) public isHolder; // track if a user is a known token holder to the smart contract - important for payouts later\n', '    address[] public holders;                  // array of all known holders - important for payouts later\n', '\n', '    // store the hashes of admins&#39; msg.data\n', '    mapping (address => bytes32) private multiSigHashes;\n', '\n', '    // to track if management already got their tokens\n', '    bool public managementTokensDelivered;\n', '\n', '    // current amount of disbursed tokens\n', '    uint256 public tokensSold;\n', '\n', '    // Events used for logging\n', '    event LogLCDTokensDelivered(address indexed _to, uint256 _value);\n', '    event LogManagementTokensDelivered(address indexed distributor, uint256 _value);\n', '    event Auth(string indexed authString, address indexed user);\n', '\n', '    modifier onlyOwner() {\n', '        // check if transaction sender is admin.\n', '        require (msg.sender == admin1 || msg.sender == admin2);\n', '        // if yes, store his msg.data. \n', '        multiSigHashes[msg.sender] = keccak256(msg.data);\n', '        // check if his stored msg.data hash equals to the one of the other admin\n', '        if ((multiSigHashes[admin1]) == (multiSigHashes[admin2])) {\n', '            // if yes, both admins agreed - continue.\n', '            _;\n', '\n', '            // Reset hashes after successful execution\n', '            multiSigHashes[admin1] = 0x0;\n', '            multiSigHashes[admin2] = 0x0;\n', '        } else {\n', '            // if not (yet), return.\n', '            return;\n', '        }\n', '    }\n', '\n', '    modifier onlyVendor() {\n', '        require((msg.sender == tokenVendor1) || (msg.sender == tokenVendor2));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Create a new LCDToken contract.\n', '     *\n', '     *  _admin1 The first admin account that owns this contract.\n', '     *  _admin2 The second admin account that owns this contract.\n', '     *  _tokenVendor1 The first token vendor\n', '     *  _tokenVendor2 The second token vendor\n', '     */\n', '    function LCDToken(\n', '        address _admin1,\n', '        address _admin2,\n', '        address _tokenVendor1,\n', '        address _tokenVendor2,\n', '        address _appStore,\n', '        address _business_development)\n', '    public\n', '    {\n', '        // admin1 and admin2 address must be set and must be different\n', '        require (_admin1 != 0x0);\n', '        require (_admin2 != 0x0);\n', '        require (_admin1 != _admin2);\n', '\n', '        // tokenVendor1 and tokenVendor2 must be set and must be different\n', '        require (_tokenVendor1 != 0x0);\n', '        require (_tokenVendor2 != 0x0);\n', '        require (_tokenVendor1 != _tokenVendor2);\n', '\n', '        // tokenVendors must be different from admins\n', '        require (_tokenVendor1 != _admin1);\n', '        require (_tokenVendor1 != _admin2);\n', '        require (_tokenVendor2 != _admin1);\n', '        require (_tokenVendor2 != _admin2);\n', '        require (_appStore != 0x0);\n', '\n', '        admin1 = _admin1;\n', '        admin2 = _admin2;\n', '        tokenVendor1 = _tokenVendor1;\n', '        tokenVendor2 = _tokenVendor2;\n', '\n', '        // Init app store balance\n', '        APP_STORE = _appStore;\n', '        balances[_appStore] = TOKEN_MINTING;\n', '        trackHolder(_appStore);\n', '\n', '        // Init business development balance to admin1 \n', '        balances[_admin1] = TOKEN_BUSINESS;\n', '        trackHolder(_business_development);\n', '\n', '        totalSupply = SafeMath.add(TOKEN_MINTING, TOKEN_BUSINESS);\n', '    }\n', '\n', '    // Allows to figure out the amount of known token holders\n', '    function getHolderCount()\n', '    public\n', '    constant\n', '    returns (uint256 _holderCount)\n', '    {\n', '        return holders.length;\n', '    }\n', '\n', '    // Allows for easier retrieval of holder by array index\n', '    function getHolder(uint256 _index)\n', '    public\n', '    constant\n', '    returns (address _holder)\n', '    {\n', '        return holders[_index];\n', '    }\n', '\n', '    function trackHolder(address _to)\n', '    private\n', '    returns (bool success)\n', '    {\n', '        // Check if the recipient is a known token holder\n', '        if (isHolder[_to] == false) {\n', '            // if not, add him to the holders array and mark him as a known holder\n', '            holders.push(_to);\n', '            isHolder[_to] = true;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev Transfer LCD tokens\n', '    function deliverTokens(address _buyer, uint256 _amount) // amount input will  be in cents\n', '    external\n', '    onlyVendor\n', '    returns(bool success)\n', '    {\n', '        // check if the function is called before May 1, 2018\n', '        require(block.timestamp <= 1525125600);\n', '\n', '        // Calculate the number of tokens from the given amount in cents\n', '        uint256 tokens = SafeMath.mul(_amount, 10**decimals / 100);\n', '\n', '        // update state\n', '        uint256 oldBalance = balances[_buyer];\n', '        balances[_buyer] = SafeMath.add(oldBalance, tokens);\n', '        tokensSold = SafeMath.add(tokensSold, tokens);\n', '        totalSupply = SafeMath.add(totalSupply, tokens);\n', '        trackHolder(_buyer);\n', '\n', '        // Log the transfer of these tokens\n', '        Transfer(msg.sender, _buyer, tokens);\n', '        LogLCDTokensDelivered(_buyer, tokens);\n', '        return true;\n', '    }\n', '\n', '    // @dev Transfer tokens to management wallet\n', '    function deliverManagementTokens(address _managementWallet)\n', '    external\n', '    onlyOwner\n', '    returns (bool success)\n', '    {\n', '        // check if management tokens are already unlocked, if the function is called after March 31., 2019\n', '        require(block.timestamp >= 1553990400);\n', '\n', '        // Deliver management tokens only once\n', '        require(managementTokensDelivered == false);\n', '\n', '        // update state\n', '        balances[_managementWallet] = TOKEN_COMPANY_OWNED;\n', '        totalSupply = SafeMath.add(totalSupply, TOKEN_COMPANY_OWNED);\n', '        managementTokensDelivered = true;\n', '        trackHolder(_managementWallet);\n', '\n', '        // Log the transfer of these tokens\n', '        Transfer(address(this), _managementWallet, TOKEN_COMPANY_OWNED);\n', '        LogManagementTokensDelivered(_managementWallet, TOKEN_COMPANY_OWNED);\n', '        return true;\n', '    }\n', '\n', '    // Using this for creating a reference between ETH wallets and accounts in the Lucyd backend\n', '    function auth(string _authString)\n', '    external\n', '    {\n', '        Auth(_authString, msg.sender);\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '\n', 'pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title Safe math operations that throw error on overflow.\n', ' *\n', ' * Credit: Taking ideas from FirstBlood token\n', ' */\n', 'library SafeMath {\n', '\n', '    /** \n', '     * @dev Safely add two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x+y.\n', '     */\n', '    function add(uint256 x, uint256 y)\n', '    internal constant\n', '    returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    /** \n', '     * @dev Safely substract two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x-y.\n', '     */\n', '    function sub(uint256 x, uint256 y)\n', '    internal constant\n', '    returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    /** \n', '     * @dev Safely multiply two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x*y.\n', '     */\n', '    function mul(uint256 x, uint256 y)\n', '    internal constant\n', '    returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0) || (z/x == y));\n', '        return z;\n', '    }\n', '\n', '    /**\n', '    * @dev Parse a floating point number from String to uint, e.g. "250.56" to "25056"\n', '     */\n', '    function parse(string s) \n', '    internal constant \n', '    returns (uint256) \n', '    {\n', '    bytes memory b = bytes(s);\n', '    uint result = 0;\n', '    for (uint i = 0; i < b.length; i++) {\n', '        if (b[i] >= 48 && b[i] <= 57) {\n', '            result = result * 10 + (uint(b[i]) - 48); \n', '        }\n', '    }\n', '    return result; \n', '}\n', '}\n', '\n', '\n', '/**\n', ' * @title The abstract ERC-20 Token Standard definition.\n', ' *\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'contract Token {\n', '    /// @dev Returns the total token supply.\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    /// @dev MUST trigger when tokens are transferred, including zero value transfers.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    /// @dev MUST trigger on any successful call to approve(address _spender, uint256 _value).\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Default implementation of the ERC-20 Token Standard.\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    modifier onlyPayloadSize(uint numwords) {\n', '        assert(msg.data.length == numwords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. \n', '     * @dev The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n', '     *\n', '     * @dev A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     *\n', '     * @param _to The receiver of the tokens.\n', '     * @param _value The amount of tokens to send.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transfer(address _to, uint256 _value)\n', '    public\n', '    returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '            balances[_to] = SafeMath.add(balances[_to], _value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n', '     *\n', '     * @dev The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. \n', '     * @dev This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in \n', '     * @dev sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized the sender of \n', '     * @dev the message via some mechanism.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     *\n', '     * @param _from The sender of the tokens.\n', '     * @param _to The receiver of the tokens.\n', '     * @param _value The amount of tokens to send.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] = SafeMath.add(balances[_to], _value);\n', '            balances[_from] = SafeMath.sub(balances[_from], _value);\n', '            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the account balance of another account with address _owner.\n', '     *\n', '     * @param _owner The address of the account to check.\n', '     * @return The account balance.\n', '     */\n', '    function balanceOf(address _owner)\n', '    public constant\n', '    returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Allows _spender to withdraw from your account multiple times, up to the _value amount. \n', '     * @dev If this function is called again it overwrites the current allowance with _value.\n', '     *\n', '     * @dev NOTE: To prevent attack vectors like the one described in [1] and discussed in [2], clients \n', '     * @dev SHOULD make sure to create user interfaces in such a way that they set the allowance first \n', '     * @dev to 0 before setting it to another value for the same spender. THOUGH The contract itself \n', "     * @dev shouldn't enforce it, to allow backwards compatilibilty with contracts deployed before.\n", '     * @dev [1] https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\n', '     * @dev [2] https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '    public\n', '    onlyPayloadSize(2)\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\n', '     *\n', '     * @param _owner The address of the sender.\n', '     * @param _spender The address of the receiver.\n', '     * @return The allowed withdrawal amount.\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '    public constant\n', '    onlyPayloadSize(2)\n', '    returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title The LCDToken Token contract.\n', ' *\n', ' * Credit: Taking ideas from BAT token and NET token\n', ' */\n', ' /*is StandardToken */\n', 'contract LCDToken is StandardToken {\n', '\n', '    // Token metadata\n', '    string public constant name = "Lucyd";\n', '    string public constant symbol = "LCD";\n', '    uint256 public constant decimals = 18;\n', '\n', '    uint256 public constant TOKEN_COMPANY_OWNED = 10 * (10**6) * 10**decimals; // 10 million LCDs\n', '    uint256 public constant TOKEN_MINTING = 30 * (10**6) * 10**decimals;       // 30 million LCDs\n', '    uint256 public constant TOKEN_BUSINESS = 10 * (10**6) * 10**decimals;       // 10 million LCDs\n', '\n', '    // wallet that is allowed to distribute tokens on behalf of the app store\n', '    address public APP_STORE;\n', '\n', '    // Administrator for multi-sig mechanism\n', '    address public admin1;\n', '    address public admin2;\n', '\n', '    // Accounts that are allowed to deliver tokens\n', '    address public tokenVendor1;\n', '    address public tokenVendor2;\n', '\n', '    // Keep track of holders and icoBuyers\n', '    mapping (address => bool) public isHolder; // track if a user is a known token holder to the smart contract - important for payouts later\n', '    address[] public holders;                  // array of all known holders - important for payouts later\n', '\n', "    // store the hashes of admins' msg.data\n", '    mapping (address => bytes32) private multiSigHashes;\n', '\n', '    // to track if management already got their tokens\n', '    bool public managementTokensDelivered;\n', '\n', '    // current amount of disbursed tokens\n', '    uint256 public tokensSold;\n', '\n', '    // Events used for logging\n', '    event LogLCDTokensDelivered(address indexed _to, uint256 _value);\n', '    event LogManagementTokensDelivered(address indexed distributor, uint256 _value);\n', '    event Auth(string indexed authString, address indexed user);\n', '\n', '    modifier onlyOwner() {\n', '        // check if transaction sender is admin.\n', '        require (msg.sender == admin1 || msg.sender == admin2);\n', '        // if yes, store his msg.data. \n', '        multiSigHashes[msg.sender] = keccak256(msg.data);\n', '        // check if his stored msg.data hash equals to the one of the other admin\n', '        if ((multiSigHashes[admin1]) == (multiSigHashes[admin2])) {\n', '            // if yes, both admins agreed - continue.\n', '            _;\n', '\n', '            // Reset hashes after successful execution\n', '            multiSigHashes[admin1] = 0x0;\n', '            multiSigHashes[admin2] = 0x0;\n', '        } else {\n', '            // if not (yet), return.\n', '            return;\n', '        }\n', '    }\n', '\n', '    modifier onlyVendor() {\n', '        require((msg.sender == tokenVendor1) || (msg.sender == tokenVendor2));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Create a new LCDToken contract.\n', '     *\n', '     *  _admin1 The first admin account that owns this contract.\n', '     *  _admin2 The second admin account that owns this contract.\n', '     *  _tokenVendor1 The first token vendor\n', '     *  _tokenVendor2 The second token vendor\n', '     */\n', '    function LCDToken(\n', '        address _admin1,\n', '        address _admin2,\n', '        address _tokenVendor1,\n', '        address _tokenVendor2,\n', '        address _appStore,\n', '        address _business_development)\n', '    public\n', '    {\n', '        // admin1 and admin2 address must be set and must be different\n', '        require (_admin1 != 0x0);\n', '        require (_admin2 != 0x0);\n', '        require (_admin1 != _admin2);\n', '\n', '        // tokenVendor1 and tokenVendor2 must be set and must be different\n', '        require (_tokenVendor1 != 0x0);\n', '        require (_tokenVendor2 != 0x0);\n', '        require (_tokenVendor1 != _tokenVendor2);\n', '\n', '        // tokenVendors must be different from admins\n', '        require (_tokenVendor1 != _admin1);\n', '        require (_tokenVendor1 != _admin2);\n', '        require (_tokenVendor2 != _admin1);\n', '        require (_tokenVendor2 != _admin2);\n', '        require (_appStore != 0x0);\n', '\n', '        admin1 = _admin1;\n', '        admin2 = _admin2;\n', '        tokenVendor1 = _tokenVendor1;\n', '        tokenVendor2 = _tokenVendor2;\n', '\n', '        // Init app store balance\n', '        APP_STORE = _appStore;\n', '        balances[_appStore] = TOKEN_MINTING;\n', '        trackHolder(_appStore);\n', '\n', '        // Init business development balance to admin1 \n', '        balances[_admin1] = TOKEN_BUSINESS;\n', '        trackHolder(_business_development);\n', '\n', '        totalSupply = SafeMath.add(TOKEN_MINTING, TOKEN_BUSINESS);\n', '    }\n', '\n', '    // Allows to figure out the amount of known token holders\n', '    function getHolderCount()\n', '    public\n', '    constant\n', '    returns (uint256 _holderCount)\n', '    {\n', '        return holders.length;\n', '    }\n', '\n', '    // Allows for easier retrieval of holder by array index\n', '    function getHolder(uint256 _index)\n', '    public\n', '    constant\n', '    returns (address _holder)\n', '    {\n', '        return holders[_index];\n', '    }\n', '\n', '    function trackHolder(address _to)\n', '    private\n', '    returns (bool success)\n', '    {\n', '        // Check if the recipient is a known token holder\n', '        if (isHolder[_to] == false) {\n', '            // if not, add him to the holders array and mark him as a known holder\n', '            holders.push(_to);\n', '            isHolder[_to] = true;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev Transfer LCD tokens\n', '    function deliverTokens(address _buyer, uint256 _amount) // amount input will  be in cents\n', '    external\n', '    onlyVendor\n', '    returns(bool success)\n', '    {\n', '        // check if the function is called before May 1, 2018\n', '        require(block.timestamp <= 1525125600);\n', '\n', '        // Calculate the number of tokens from the given amount in cents\n', '        uint256 tokens = SafeMath.mul(_amount, 10**decimals / 100);\n', '\n', '        // update state\n', '        uint256 oldBalance = balances[_buyer];\n', '        balances[_buyer] = SafeMath.add(oldBalance, tokens);\n', '        tokensSold = SafeMath.add(tokensSold, tokens);\n', '        totalSupply = SafeMath.add(totalSupply, tokens);\n', '        trackHolder(_buyer);\n', '\n', '        // Log the transfer of these tokens\n', '        Transfer(msg.sender, _buyer, tokens);\n', '        LogLCDTokensDelivered(_buyer, tokens);\n', '        return true;\n', '    }\n', '\n', '    // @dev Transfer tokens to management wallet\n', '    function deliverManagementTokens(address _managementWallet)\n', '    external\n', '    onlyOwner\n', '    returns (bool success)\n', '    {\n', '        // check if management tokens are already unlocked, if the function is called after March 31., 2019\n', '        require(block.timestamp >= 1553990400);\n', '\n', '        // Deliver management tokens only once\n', '        require(managementTokensDelivered == false);\n', '\n', '        // update state\n', '        balances[_managementWallet] = TOKEN_COMPANY_OWNED;\n', '        totalSupply = SafeMath.add(totalSupply, TOKEN_COMPANY_OWNED);\n', '        managementTokensDelivered = true;\n', '        trackHolder(_managementWallet);\n', '\n', '        // Log the transfer of these tokens\n', '        Transfer(address(this), _managementWallet, TOKEN_COMPANY_OWNED);\n', '        LogManagementTokensDelivered(_managementWallet, TOKEN_COMPANY_OWNED);\n', '        return true;\n', '    }\n', '\n', '    // Using this for creating a reference between ETH wallets and accounts in the Lucyd backend\n', '    function auth(string _authString)\n', '    external\n', '    {\n', '        Auth(_authString, msg.sender);\n', '    }\n', '}']
