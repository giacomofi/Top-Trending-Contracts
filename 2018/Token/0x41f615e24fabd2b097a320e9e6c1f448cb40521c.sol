['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', ' \n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', ' \n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '   constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Interface {\n', '     function totalSupply() public constant returns (uint);\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) public returns (bool success);\n', '     function approve(address spender, uint tokens) public returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract Buyers{\n', '   \n', '    struct Buyer{\n', '        \n', '        string   name;  \n', '        string   country;\n', '        string   city; \n', '        string   b_address;\n', '        string   mobile;  \n', '    }\n', '    mapping(address=>Buyer) public registerbuyer;\n', '    event BuyerAdded(address  from, string name,string country,string city,string b_address,string mobile);\n', '    \n', '    \n', '      \n', '    function registerBuyer(string _name,string _country,string _city,string _address,string _mobile) public returns(bool){\n', '      \n', '         require(bytes(_name).length!=0 &&\n', '             bytes(_country).length!=0 &&\n', '             bytes(_city).length!=0 &&\n', '             bytes(_address).length!=0 &&\n', '             bytes(_mobile).length!=0  \n', '             \n', '        );\n', '        registerbuyer[msg.sender]=Buyer(_name,_country,_city,_address,_mobile);\n', '        emit BuyerAdded(msg.sender,_name,_country,_city,_address,_mobile);\n', '        return true;\n', '        \n', '    }\n', '   \n', '    function getBuyer() public constant returns(string name,string country, string city,string _address,string mobile ){\n', '        return (registerbuyer[msg.sender].name,registerbuyer[msg.sender].country,registerbuyer[msg.sender].city,registerbuyer[msg.sender].b_address,registerbuyer[msg.sender].mobile);\n', '    }\n', '    \n', '    function getBuyerbyaddress(address _useraddress) public constant returns(string name,string country, string city,string _address,string mobile ){\n', '        return (registerbuyer[_useraddress].name,registerbuyer[_useraddress].country,registerbuyer[_useraddress].city,registerbuyer[_useraddress].b_address,registerbuyer[_useraddress].mobile);\n', '    }\n', '    \n', '}\n', '\n', 'contract ProductsInterface {\n', '     \n', '    struct Product { // Struct\n', '        uint256  id;\n', '        string   name;  \n', '        string   image;\n', '        uint256  price;\n', '        string   detail;\n', '        address  _seller;\n', '         \n', '    }\n', '    event ProductAdded(uint256 indexed id,address seller, string  name,string  image, uint256  price,string  detail );\n', '   \n', '   \n', '    function addproduct(string _name,string _image,uint256 _price,string _detail)   public   returns (bool success);\n', '    function updateprice(uint _index, uint _price) public returns (bool success);\n', '  \n', '   function getproduuct(uint _index) public constant returns(uint256 id,string name,string image,uint256  price,string detail, address _seller);\n', '   function getproductprices() public constant returns(uint256[]);\n', '   \n', '}\n', '\n', 'contract OrderInterface{\n', '    struct Order { // Struct\n', '        uint256  id;\n', '        uint256   quantity;  \n', '        uint256   product_index;  \n', '        uint256  price;\n', '       \n', '        address  buyer;\n', '        address  seller;\n', '        uint256 status;\n', '         \n', '    }\n', '    uint256 public order_counter;\n', '    mapping (uint => Order) public orders;\n', '     \n', '    function placeorder(  uint256   quantity,uint256   product_index)  public returns(uint256);\n', '    event OrderPlace(uint256 indexed id, uint256   quantity,uint256   product_index,string   name,address  buyer, address  seller );\n', '   \n', '}\n', '\n', 'contract FeedToken is  ProductsInterface,OrderInterface, ERC20Interface,Ownable,Buyers {\n', '\n', '\n', '\n', '   using SafeMath for uint256;\n', '   //------------------------------------------------------------------------\n', '    uint256 public counter=0;\n', '    mapping (uint => Product) public seller_products;\n', '    mapping (uint => uint) public products_price;\n', '    mapping (address=> uint) public seller_total_products;\n', '   //------------------------------------------------------------------------\n', '   string public name;\n', '   string public symbol;\n', '   uint256 public decimals;\n', '\n', '   uint256 public _totalSupply;\n', '   uint256 order_counter=0;\n', '   mapping(address => uint256) tokenBalances;\n', '   address ownerWallet;\n', '   // Owner of account approves the transfer of an amount to another account\n', '   mapping (address => mapping (address => uint256)) allowed;\n', '   \n', '   mapping (address=>uint) privateSaleBuyerTokens;\n', '   address[] privateSaleBuyers;\n', '   \n', '   mapping (address=>uint) preSaleBuyerTokens;\n', '   address[] preSaleBuyers;\n', '   \n', '   mapping(address=>uint) teamMembers;\n', '   \n', '   uint privateSaleEndDate;\n', '   uint preSaleEndDate;\n', '   uint icoEndDate;\n', '   /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens.\n', '   */\n', '    constructor(address wallet) public {\n', '        owner = wallet;\n', '        name  = "Feed";\n', '        symbol = "FEED";\n', '        decimals = 18;\n', '        _totalSupply = 1000000000 * 10 ** uint(decimals);\n', '        tokenBalances[ msg.sender] = _totalSupply;   //Since we divided the token into 10^18 parts\n', '    }\n', '    \n', '     // Get the token balance for account `tokenOwner`\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '         return tokenBalances[tokenOwner];\n', '     }\n', '  \n', '     // Transfer the balance from owner&#39;s account to another account\n', '     function transfer(address to, uint tokens) public returns (bool success) {\n', '         require(to != address(0));\n', '         require(tokens <= tokenBalances[msg.sender]);\n', '         checkTokenVesting(msg.sender, tokens);\n', '         tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\n', '         tokenBalances[to] = tokenBalances[to].add(tokens);\n', '         emit Transfer(msg.sender, to, tokens);\n', '         return true;\n', '     }\n', '     function checkUser() public constant returns(string ){\n', '         require(bytes(registerbuyer[msg.sender].name).length!=0);\n', '          \n', '             return "Register User";\n', '     }\n', '     \n', '     function checkTokenVesting(address sender, uint tokens) internal {\n', '         uint lockupTime;\n', '         uint daysPassedSinceEndDate;\n', '         uint lockedTokens;\n', '         if (preSaleBuyerTokens[sender] > 0 || privateSaleBuyerTokens[sender]>0 || teamMembers[sender]>0)\n', '         {\n', '             if (teamMembers[sender]>0)\n', '             {\n', '                lockupTime = uint(24).mul(uint(30)).mul(1 days);\n', '                if (now<icoEndDate.add(lockupTime))\n', '                {\n', '                    lockedTokens = teamMembers[sender];\n', '                    if (lockedTokens.add(tokens)>tokenBalances[sender])\n', '                        revert();\n', '                }   \n', '             }\n', '             else if (privateSaleBuyerTokens[sender]>0)\n', '             {\n', '                lockupTime = uint(12).mul(uint(30)).mul(1 days);\n', '                uint daysPassedSincePrivateSaleEnd = now.sub(privateSaleEndDate);\n', '                daysPassedSincePrivateSaleEnd = daysPassedSincePrivateSaleEnd.div(1 days);\n', '                uint monthsPassedSinceICOEnd = daysPassedSincePrivateSaleEnd.div(30);\n', '                uint unlockedTokens = privateSaleBuyerTokens[sender].div(12).mul(monthsPassedSinceICOEnd);\n', '                lockedTokens = privateSaleBuyerTokens[sender].sub(unlockedTokens);\n', '                if (lockedTokens.add(tokens)>tokenBalances[sender])\n', '                    revert();\n', '                \n', '             }\n', '             else if (preSaleBuyerTokens[sender]>0)\n', '             {\n', '               lockupTime = uint(3).mul(uint(30)).mul(1 days);\n', '               if (now<preSaleEndDate.add(lockupTime))\n', '                {\n', '                    lockedTokens = preSaleBuyerTokens[sender];\n', '                    if (lockedTokens.add(tokens)>tokenBalances[sender])\n', '                        revert();\n', '                }   \n', '             }\n', '         }\n', '     }\n', '     /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '   \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= tokenBalances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    checkTokenVesting(_from,_value);\n', '    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n', '    tokenBalances[_to] = tokenBalances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '     /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '     // ------------------------------------------------------------------------\n', '     // Total supply\n', '     // ------------------------------------------------------------------------\n', '     function totalSupply() public constant returns (uint) {\n', '         return _totalSupply  - tokenBalances[address(0)];\n', '     }\n', '     \n', '    \n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Returns the amount of tokens approved by the owner that can be\n', '     // transferred to the spender&#39;s account\n', '     // ------------------------------------------------------------------------\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '         return allowed[tokenOwner][spender];\n', '     }\n', '     \n', '     /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Don&#39;t accept ETH\n', '     // ------------------------------------------------------------------------\n', '     function () public payable {\n', '         revert();\n', '     }\n', ' \n', ' \n', '     // ------------------------------------------------------------------------\n', '     // Owner can transfer out any accidentally sent ERC20 tokens\n', '     // ------------------------------------------------------------------------\n', '     function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '         return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '     }\n', '     \n', '    \n', '     function placeorder( uint256   quantity,uint256   product_index)  public  returns(uint256) {\n', '         \n', '        require(counter>=product_index && product_index>0);\n', '        require(bytes(registerbuyer[msg.sender].name).length!=0);//to place order you first register yourself\n', '         \n', '        transfer(seller_products[product_index]._seller,seller_products[product_index].price*quantity);\n', '        orders[order_counter] = Order(order_counter,quantity,product_index,seller_products[product_index].price, msg.sender,seller_products[product_index]._seller,0);\n', '        \n', '        emit OrderPlace(order_counter,quantity, product_index,  seller_products[product_index].name, msg.sender, seller_products[product_index]._seller );\n', '        order_counter++;\n', '        return counter;\n', '    }\n', '    \n', '    //------------------------------------------------------------------------\n', '    // product methods\n', '    //------------------------------------------------------------------------\n', '   \n', '   \n', '    function addproduct(string _name,string _image,uint256 _price,string _detail)   public   returns (bool success){\n', '          require(bytes(_name).length!=0 &&\n', '             bytes(_image).length!=0 &&\n', '             bytes(_detail).length!=0 \n', '            \n', '             \n', '        );\n', '        counter++;\n', '        seller_products[counter] = Product(counter,_name,_image, _price,_detail,msg.sender);\n', '        products_price[counter]=_price;\n', '        emit ProductAdded(counter,msg.sender,_name,_image,_price,_detail);\n', '        return true;\n', '   }\n', '  \n', '   function updateprice(uint _index, uint _price) public returns (bool success){\n', '      require(seller_products[_index]._seller==msg.sender);\n', '       \n', '     \n', '      seller_products[_index].price=_price;\n', '      products_price[_index]=_price;\n', '      return true;\n', '  }\n', '  \n', '   function getproduuct(uint _index) public constant returns(uint256 ,string ,string ,uint256  ,string , address )\n', '   {\n', '       return(seller_products[_index].id,seller_products[_index].name,seller_products[_index].image,products_price[_index],seller_products[_index].detail,seller_products[_index]._seller);\n', '   }\n', '   function getproductprices() public constant returns(uint256[])\n', '   {\n', '       uint256[] memory price = new uint256[](counter);\n', '        \n', '        for (uint i = 0; i <counter; i++) {\n', '           \n', '            price[i]=products_price[i+1];\n', '             \n', '        }\n', '      return price;\n', '   }\n', '    \n', '    //------------------------------------------------------------------------\n', '    //end Products\n', '    //------------------------------------------------------------------------\n', '    \n', '    function addPrivateSaleEndDate(uint256 endDate) public onlyOwner {\n', '        privateSaleEndDate = endDate;\n', '    }\n', '    \n', '    function addPreSaleEndDate(uint256 endDate) public onlyOwner {\n', '        preSaleEndDate = endDate;\n', '    }\n', '    \n', '    function addICOEndDate(uint256 endDate) public onlyOwner {\n', '        icoEndDate = endDate;\n', '    }\n', '    \n', '    function addTeamAndAdvisoryMembers(address[] members) public onlyOwner \n', '    {\n', '        uint totalTeamShare = uint(100000000).mul(10**uint(decimals));\n', '        uint oneTeamMemberShare = totalTeamShare.div(members.length);\n', '        for (uint i=0;i<members.length;i++)\n', '        {\n', '            teamMembers[members[i]] = oneTeamMemberShare;\n', '            tokenBalances[owner] = tokenBalances[owner].sub(oneTeamMemberShare);\n', '            tokenBalances[members[i]] = tokenBalances[members[i]].add(oneTeamMemberShare);\n', '            emit Transfer(owner,members[i],oneTeamMemberShare);\n', '        }    \n', '    }\n', '    function addPrivateSaleBuyer(address buyer,uint value) public onlyOwner \n', '    {\n', '        privateSaleBuyerTokens[buyer] = value;        \n', '    }\n', '    function addPreSaleBuyer(address buyer,uint value) public onlyOwner \n', '    {\n', '        preSaleBuyerTokens[buyer] = value;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', ' \n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', ' \n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '   constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Interface {\n', '     function totalSupply() public constant returns (uint);\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) public returns (bool success);\n', '     function approve(address spender, uint tokens) public returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract Buyers{\n', '   \n', '    struct Buyer{\n', '        \n', '        string   name;  \n', '        string   country;\n', '        string   city; \n', '        string   b_address;\n', '        string   mobile;  \n', '    }\n', '    mapping(address=>Buyer) public registerbuyer;\n', '    event BuyerAdded(address  from, string name,string country,string city,string b_address,string mobile);\n', '    \n', '    \n', '      \n', '    function registerBuyer(string _name,string _country,string _city,string _address,string _mobile) public returns(bool){\n', '      \n', '         require(bytes(_name).length!=0 &&\n', '             bytes(_country).length!=0 &&\n', '             bytes(_city).length!=0 &&\n', '             bytes(_address).length!=0 &&\n', '             bytes(_mobile).length!=0  \n', '             \n', '        );\n', '        registerbuyer[msg.sender]=Buyer(_name,_country,_city,_address,_mobile);\n', '        emit BuyerAdded(msg.sender,_name,_country,_city,_address,_mobile);\n', '        return true;\n', '        \n', '    }\n', '   \n', '    function getBuyer() public constant returns(string name,string country, string city,string _address,string mobile ){\n', '        return (registerbuyer[msg.sender].name,registerbuyer[msg.sender].country,registerbuyer[msg.sender].city,registerbuyer[msg.sender].b_address,registerbuyer[msg.sender].mobile);\n', '    }\n', '    \n', '    function getBuyerbyaddress(address _useraddress) public constant returns(string name,string country, string city,string _address,string mobile ){\n', '        return (registerbuyer[_useraddress].name,registerbuyer[_useraddress].country,registerbuyer[_useraddress].city,registerbuyer[_useraddress].b_address,registerbuyer[_useraddress].mobile);\n', '    }\n', '    \n', '}\n', '\n', 'contract ProductsInterface {\n', '     \n', '    struct Product { // Struct\n', '        uint256  id;\n', '        string   name;  \n', '        string   image;\n', '        uint256  price;\n', '        string   detail;\n', '        address  _seller;\n', '         \n', '    }\n', '    event ProductAdded(uint256 indexed id,address seller, string  name,string  image, uint256  price,string  detail );\n', '   \n', '   \n', '    function addproduct(string _name,string _image,uint256 _price,string _detail)   public   returns (bool success);\n', '    function updateprice(uint _index, uint _price) public returns (bool success);\n', '  \n', '   function getproduuct(uint _index) public constant returns(uint256 id,string name,string image,uint256  price,string detail, address _seller);\n', '   function getproductprices() public constant returns(uint256[]);\n', '   \n', '}\n', '\n', 'contract OrderInterface{\n', '    struct Order { // Struct\n', '        uint256  id;\n', '        uint256   quantity;  \n', '        uint256   product_index;  \n', '        uint256  price;\n', '       \n', '        address  buyer;\n', '        address  seller;\n', '        uint256 status;\n', '         \n', '    }\n', '    uint256 public order_counter;\n', '    mapping (uint => Order) public orders;\n', '     \n', '    function placeorder(  uint256   quantity,uint256   product_index)  public returns(uint256);\n', '    event OrderPlace(uint256 indexed id, uint256   quantity,uint256   product_index,string   name,address  buyer, address  seller );\n', '   \n', '}\n', '\n', 'contract FeedToken is  ProductsInterface,OrderInterface, ERC20Interface,Ownable,Buyers {\n', '\n', '\n', '\n', '   using SafeMath for uint256;\n', '   //------------------------------------------------------------------------\n', '    uint256 public counter=0;\n', '    mapping (uint => Product) public seller_products;\n', '    mapping (uint => uint) public products_price;\n', '    mapping (address=> uint) public seller_total_products;\n', '   //------------------------------------------------------------------------\n', '   string public name;\n', '   string public symbol;\n', '   uint256 public decimals;\n', '\n', '   uint256 public _totalSupply;\n', '   uint256 order_counter=0;\n', '   mapping(address => uint256) tokenBalances;\n', '   address ownerWallet;\n', '   // Owner of account approves the transfer of an amount to another account\n', '   mapping (address => mapping (address => uint256)) allowed;\n', '   \n', '   mapping (address=>uint) privateSaleBuyerTokens;\n', '   address[] privateSaleBuyers;\n', '   \n', '   mapping (address=>uint) preSaleBuyerTokens;\n', '   address[] preSaleBuyers;\n', '   \n', '   mapping(address=>uint) teamMembers;\n', '   \n', '   uint privateSaleEndDate;\n', '   uint preSaleEndDate;\n', '   uint icoEndDate;\n', '   /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens.\n', '   */\n', '    constructor(address wallet) public {\n', '        owner = wallet;\n', '        name  = "Feed";\n', '        symbol = "FEED";\n', '        decimals = 18;\n', '        _totalSupply = 1000000000 * 10 ** uint(decimals);\n', '        tokenBalances[ msg.sender] = _totalSupply;   //Since we divided the token into 10^18 parts\n', '    }\n', '    \n', '     // Get the token balance for account `tokenOwner`\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '         return tokenBalances[tokenOwner];\n', '     }\n', '  \n', "     // Transfer the balance from owner's account to another account\n", '     function transfer(address to, uint tokens) public returns (bool success) {\n', '         require(to != address(0));\n', '         require(tokens <= tokenBalances[msg.sender]);\n', '         checkTokenVesting(msg.sender, tokens);\n', '         tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\n', '         tokenBalances[to] = tokenBalances[to].add(tokens);\n', '         emit Transfer(msg.sender, to, tokens);\n', '         return true;\n', '     }\n', '     function checkUser() public constant returns(string ){\n', '         require(bytes(registerbuyer[msg.sender].name).length!=0);\n', '          \n', '             return "Register User";\n', '     }\n', '     \n', '     function checkTokenVesting(address sender, uint tokens) internal {\n', '         uint lockupTime;\n', '         uint daysPassedSinceEndDate;\n', '         uint lockedTokens;\n', '         if (preSaleBuyerTokens[sender] > 0 || privateSaleBuyerTokens[sender]>0 || teamMembers[sender]>0)\n', '         {\n', '             if (teamMembers[sender]>0)\n', '             {\n', '                lockupTime = uint(24).mul(uint(30)).mul(1 days);\n', '                if (now<icoEndDate.add(lockupTime))\n', '                {\n', '                    lockedTokens = teamMembers[sender];\n', '                    if (lockedTokens.add(tokens)>tokenBalances[sender])\n', '                        revert();\n', '                }   \n', '             }\n', '             else if (privateSaleBuyerTokens[sender]>0)\n', '             {\n', '                lockupTime = uint(12).mul(uint(30)).mul(1 days);\n', '                uint daysPassedSincePrivateSaleEnd = now.sub(privateSaleEndDate);\n', '                daysPassedSincePrivateSaleEnd = daysPassedSincePrivateSaleEnd.div(1 days);\n', '                uint monthsPassedSinceICOEnd = daysPassedSincePrivateSaleEnd.div(30);\n', '                uint unlockedTokens = privateSaleBuyerTokens[sender].div(12).mul(monthsPassedSinceICOEnd);\n', '                lockedTokens = privateSaleBuyerTokens[sender].sub(unlockedTokens);\n', '                if (lockedTokens.add(tokens)>tokenBalances[sender])\n', '                    revert();\n', '                \n', '             }\n', '             else if (preSaleBuyerTokens[sender]>0)\n', '             {\n', '               lockupTime = uint(3).mul(uint(30)).mul(1 days);\n', '               if (now<preSaleEndDate.add(lockupTime))\n', '                {\n', '                    lockedTokens = preSaleBuyerTokens[sender];\n', '                    if (lockedTokens.add(tokens)>tokenBalances[sender])\n', '                        revert();\n', '                }   \n', '             }\n', '         }\n', '     }\n', '     /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '   \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= tokenBalances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    checkTokenVesting(_from,_value);\n', '    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n', '    tokenBalances[_to] = tokenBalances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '     /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '     // ------------------------------------------------------------------------\n', '     // Total supply\n', '     // ------------------------------------------------------------------------\n', '     function totalSupply() public constant returns (uint) {\n', '         return _totalSupply  - tokenBalances[address(0)];\n', '     }\n', '     \n', '    \n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Returns the amount of tokens approved by the owner that can be\n', "     // transferred to the spender's account\n", '     // ------------------------------------------------------------------------\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '         return allowed[tokenOwner][spender];\n', '     }\n', '     \n', '     /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '     \n', '     // ------------------------------------------------------------------------\n', "     // Don't accept ETH\n", '     // ------------------------------------------------------------------------\n', '     function () public payable {\n', '         revert();\n', '     }\n', ' \n', ' \n', '     // ------------------------------------------------------------------------\n', '     // Owner can transfer out any accidentally sent ERC20 tokens\n', '     // ------------------------------------------------------------------------\n', '     function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '         return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '     }\n', '     \n', '    \n', '     function placeorder( uint256   quantity,uint256   product_index)  public  returns(uint256) {\n', '         \n', '        require(counter>=product_index && product_index>0);\n', '        require(bytes(registerbuyer[msg.sender].name).length!=0);//to place order you first register yourself\n', '         \n', '        transfer(seller_products[product_index]._seller,seller_products[product_index].price*quantity);\n', '        orders[order_counter] = Order(order_counter,quantity,product_index,seller_products[product_index].price, msg.sender,seller_products[product_index]._seller,0);\n', '        \n', '        emit OrderPlace(order_counter,quantity, product_index,  seller_products[product_index].name, msg.sender, seller_products[product_index]._seller );\n', '        order_counter++;\n', '        return counter;\n', '    }\n', '    \n', '    //------------------------------------------------------------------------\n', '    // product methods\n', '    //------------------------------------------------------------------------\n', '   \n', '   \n', '    function addproduct(string _name,string _image,uint256 _price,string _detail)   public   returns (bool success){\n', '          require(bytes(_name).length!=0 &&\n', '             bytes(_image).length!=0 &&\n', '             bytes(_detail).length!=0 \n', '            \n', '             \n', '        );\n', '        counter++;\n', '        seller_products[counter] = Product(counter,_name,_image, _price,_detail,msg.sender);\n', '        products_price[counter]=_price;\n', '        emit ProductAdded(counter,msg.sender,_name,_image,_price,_detail);\n', '        return true;\n', '   }\n', '  \n', '   function updateprice(uint _index, uint _price) public returns (bool success){\n', '      require(seller_products[_index]._seller==msg.sender);\n', '       \n', '     \n', '      seller_products[_index].price=_price;\n', '      products_price[_index]=_price;\n', '      return true;\n', '  }\n', '  \n', '   function getproduuct(uint _index) public constant returns(uint256 ,string ,string ,uint256  ,string , address )\n', '   {\n', '       return(seller_products[_index].id,seller_products[_index].name,seller_products[_index].image,products_price[_index],seller_products[_index].detail,seller_products[_index]._seller);\n', '   }\n', '   function getproductprices() public constant returns(uint256[])\n', '   {\n', '       uint256[] memory price = new uint256[](counter);\n', '        \n', '        for (uint i = 0; i <counter; i++) {\n', '           \n', '            price[i]=products_price[i+1];\n', '             \n', '        }\n', '      return price;\n', '   }\n', '    \n', '    //------------------------------------------------------------------------\n', '    //end Products\n', '    //------------------------------------------------------------------------\n', '    \n', '    function addPrivateSaleEndDate(uint256 endDate) public onlyOwner {\n', '        privateSaleEndDate = endDate;\n', '    }\n', '    \n', '    function addPreSaleEndDate(uint256 endDate) public onlyOwner {\n', '        preSaleEndDate = endDate;\n', '    }\n', '    \n', '    function addICOEndDate(uint256 endDate) public onlyOwner {\n', '        icoEndDate = endDate;\n', '    }\n', '    \n', '    function addTeamAndAdvisoryMembers(address[] members) public onlyOwner \n', '    {\n', '        uint totalTeamShare = uint(100000000).mul(10**uint(decimals));\n', '        uint oneTeamMemberShare = totalTeamShare.div(members.length);\n', '        for (uint i=0;i<members.length;i++)\n', '        {\n', '            teamMembers[members[i]] = oneTeamMemberShare;\n', '            tokenBalances[owner] = tokenBalances[owner].sub(oneTeamMemberShare);\n', '            tokenBalances[members[i]] = tokenBalances[members[i]].add(oneTeamMemberShare);\n', '            emit Transfer(owner,members[i],oneTeamMemberShare);\n', '        }    \n', '    }\n', '    function addPrivateSaleBuyer(address buyer,uint value) public onlyOwner \n', '    {\n', '        privateSaleBuyerTokens[buyer] = value;        \n', '    }\n', '    function addPreSaleBuyer(address buyer,uint value) public onlyOwner \n', '    {\n', '        preSaleBuyerTokens[buyer] = value;\n', '    }\n', '}']
