['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * source: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/* "Interfaces" */\n', '\n', '//  this is expected from another contracts\n', '//  if it wants to spend tokens of behalf of the token owner in our contract\n', '//  this can be used in many situations, for example to convert pre-ICO tokens to ICO tokens\n', '//  see &#39;approveAndCall&#39; function\n', 'contract allowanceRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _inContract, bytes _extraData) public returns (bool);\n', '}\n', '\n', '\n', '// see:\n', '// https://github.com/ethereum/EIPs/issues/677\n', 'contract tokenRecipient {\n', '    function tokenFallback(address _from, uint256 _value, bytes _extraData) public returns (bool);\n', '}\n', '\n', '/**\n', ' * The ACCP contract\n', ' * ver. 1.0\n', ' */\n', 'contract ACCP {\n', '\n', '    // see: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol\n', '    using SafeMath for uint256;\n', '\n', '    address public owner;\n', '\n', '    /* --- ERC-20 variables */\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#name\n', '    // function name() constant returns (string name)\n', '    string public name = "ACCP";\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#symbol\n', '    // function symbol() constant returns (string symbol)\n', '    string public symbol = "ACCP";\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#decimals\n', '    // function decimals() constant returns (uint8 decimals)\n', '    uint8 public decimals = 0;\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#totalsupply\n', '    // function totalSupply() constant returns (uint256 totalSupply)\n', '    // we start with zero and will create tokens as SC receives ETH\n', '    uint256 public totalSupply = 10 * 1000000000; // 10B\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#balanceof\n', '    // function balanceOf(address _owner) constant returns (uint256 balance)\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#allowance\n', '    // function allowance(address _owner, address _spender) constant returns (uint256 remaining)\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    /* --- ERC-20 events */\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#events\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transfer-1\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#approval\n', '    event Approval(address indexed _owner, address indexed spender, uint256 value);\n', '\n', '    /* --- Interaction with other contracts events  */\n', '    event DataSentToAnotherContract(address indexed _from, address indexed _toContract, bytes _extraData);\n', '\n', '    /* --- Other variables */\n', '    bool public transfersBlocked = false;\n', '    mapping(address => bool) public whiteListed;\n', '\n', '    /* ---------- Constructor */\n', '    // do not forget about:\n', '    // https://medium.com/@codetractio/a-look-into-paritys-multisig-wallet-bug-affecting-100-million-in-ether-and-tokens-356f5ba6e90a\n', '    constructor() public {\n', '        // owner = msg.sender;\n', '        owner = 0x55515db2570D6A502d5d6176aF2A118ce0c68007;\n', '        // (!!!) all tokens initially belong to smart contract itself\n', '        balanceOf[this] = totalSupply;\n', '    }\n', '\n', '    event TransfersBlocked(address indexed by);//\n', '    function blockTransfers() public {// only owner!\n', '        //\n', '        require(msg.sender == owner);\n', '        //\n', '        require(!transfersBlocked);\n', '        transfersBlocked = true;\n', '        emit TransfersBlocked(msg.sender);\n', '    }\n', '\n', '    event TransfersAllowed(address indexed by);//\n', '    function allowTransfers() public {// only owner!\n', '        //\n', '        require(msg.sender == owner);\n', '        //\n', '        require(transfersBlocked);\n', '        transfersBlocked = false;\n', '        emit TransfersAllowed(msg.sender);\n', '    }\n', '\n', '    event AddedToWhiteList(address indexed by, address indexed added);//\n', '    function addToWhiteList(address acc) public {// only owner!\n', '        //\n', '        require(msg.sender == owner);\n', '        // require(!whiteListed[acc]);\n', '        whiteListed[acc] = true;\n', '        emit AddedToWhiteList(msg.sender, acc);\n', '    }\n', '\n', '    event RemovedFromWhiteList(address indexed by, address indexed removed);//\n', '    function removeFromWhiteList(address acc) public {// only owner!\n', '        //\n', '        require(msg.sender == owner);\n', '        //\n', '        require(acc != owner);\n', '        // require(!whiteListed[acc]);\n', '        whiteListed[acc] = false;\n', '        emit RemovedFromWhiteList(msg.sender, acc);\n', '    }\n', '\n', '    event tokensBurnt(address indexed by, uint256 value); //\n', '    function burnTokens() public {// only owner!\n', '        //\n', '        require(msg.sender == owner);\n', '        //\n', '        require(balanceOf[this] > 0);\n', '        emit tokensBurnt(msg.sender, balanceOf[this]);\n', '        balanceOf[this] = 0;\n', '    }\n', '\n', '    /* --- ERC-20 Functions */\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#methods\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transfer\n', '    function transfer(address _to, uint256 _value) public returns (bool){\n', '        return transferFrom(msg.sender, _to, _value);\n', '    }\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#transferfrom\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n', '\n', '        // Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event (ERC-20)\n', '        require(_value >= 0);\n', '\n', '        // The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism\n', '        require(msg.sender == _from || _value <= allowance[_from][msg.sender] || (_from == address(this) && msg.sender == owner));\n', '\n', '        // TODO:\n', '        require(!transfersBlocked || (whiteListed[_from] && whiteListed[msg.sender]));\n', '\n', '        // check if _from account have required amount\n', '        require(_value <= balanceOf[_from]);\n', '\n', '        // Subtract from the sender\n', '        // balanceOf[_from] = balanceOf[_from] - _value;\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        //\n', '        // Add the same to the recipient\n', '        // balanceOf[_to] = balanceOf[_to] + _value;\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '\n', '        // If allowance used, change allowances correspondingly\n', '        if (_from != msg.sender && (!(_from == address(this) && msg.sender == owner))) {\n', '            // allowance[_from][msg.sender] = allowance[_from][msg.sender] - _value;\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        }\n', '\n', '        // event\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    } // end of transferFrom\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md#approve\n', '    // there is and attack, see:\n', '    // https://github.com/CORIONplatform/solidity/issues/6,\n', '    // https://drive.google.com/file/d/0ByMtMw2hul0EN3NCaVFHSFdxRzA/view\n', '    // but this function is required by ERC-20\n', '    function approve(address _spender, uint256 _value) public returns (bool){\n', '        require(_value >= 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        // event\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*  ---------- Interaction with other contracts  */\n', '\n', '    /* User can allow another smart contract to spend some shares in his behalf\n', '    *  (this function should be called by user itself)\n', '    *  @param _spender another contract&#39;s address\n', '    *  @param _value number of tokens\n', '    *  @param _extraData Data that can be sent from user to another contract to be processed\n', '    *  bytes - dynamically-sized byte array,\n', '    *  see http://solidity.readthedocs.io/en/v0.4.15/types.html#dynamically-sized-byte-array\n', '    *  see possible attack information in comments to function &#39;approve&#39;\n', '    *  > this may be used to convert pre-ICO tokens to ICO tokens\n', '    */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool) {\n', '\n', '        approve(_spender, _value);\n', '\n', '        // &#39;spender&#39; is another contract that implements code as prescribed in &#39;allowanceRecipient&#39; above\n', '        allowanceRecipient spender = allowanceRecipient(_spender);\n', '\n', '        // our contract calls &#39;receiveApproval&#39; function of another contract (&#39;allowanceRecipient&#39;) to send information about\n', '        // allowance and data sent by user\n', '        // &#39;this&#39; is this (our) contract address\n', '        if (spender.receiveApproval(msg.sender, _value, this, _extraData)) {\n', '            emit DataSentToAnotherContract(msg.sender, _spender, _extraData);\n', '            return true;\n', '        }\n', '        return false;\n', '    } // end of approveAndCall\n', '\n', '    // for convenience:\n', '    function approveAllAndCall(address _spender, bytes _extraData) public returns (bool success) {\n', '        return approveAndCall(_spender, balanceOf[msg.sender], _extraData);\n', '    }\n', '\n', '    /* https://github.com/ethereum/EIPs/issues/677\n', '    * transfer tokens with additional info to another smart contract, and calls its correspondent function\n', '    * @param address _to - another smart contract address\n', '    * @param uint256 _value - number of tokens\n', '    * @param bytes _extraData - data to send to another contract\n', '    * > this may be used to convert pre-ICO tokens to ICO tokens\n', '    */\n', '    function transferAndCall(address _to, uint256 _value, bytes _extraData) public returns (bool success){\n', '\n', '        transferFrom(msg.sender, _to, _value);\n', '\n', '        tokenRecipient receiver = tokenRecipient(_to);\n', '\n', '        if (receiver.tokenFallback(msg.sender, _value, _extraData)) {\n', '            emit DataSentToAnotherContract(msg.sender, _to, _extraData);\n', '            return true;\n', '        }\n', '        return false;\n', '    } // end of transferAndCall\n', '\n', '    // for example for converting ALL tokens of user account to another tokens\n', '    function transferAllAndCall(address _to, bytes _extraData) public returns (bool success){\n', '        return transferAndCall(_to, balanceOf[msg.sender], _extraData);\n', '    }\n', '\n', '}']