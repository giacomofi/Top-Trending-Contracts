['pragma solidity 0.4.24;\n', '\n', '//*************** SafeMath ***************\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b > 0);\n', '      uint256 c = a / b;\n', '      return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '  }\n', '}\n', '\n', '//*************** Ownable *************** \n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  constructor() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner)public onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '  }\n', '\n', '}\n', '\n', '//************* ERC20 *************** \n', '\n', 'contract ERC20 {\n', '  \n', '  function balanceOf(address who)public constant returns (uint256);\n', '  function transfer(address to, uint256 value)public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value)public returns (bool);\n', '  function allowance(address owner, address spender)public constant returns (uint256);\n', '  function approve(address spender, uint256 value)public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//************* Utrade Token *************\n', '\n', 'contract UtradeToken is ERC20,Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // Token Info.\n', '  string public name;\n', '  string public symbol;\n', '  uint256 public totalSupply;\n', '  uint256 public constant decimals = 18;\n', '  mapping (address => uint256) public balanceOf;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  \n', '  constructor() public  {   \n', '    name="uTrade Trading Platform";\n', '    symbol="UTP";\n', '    totalSupply = 1000000000*(10**decimals);\n', '    balanceOf[msg.sender] = totalSupply; \n', ' }\n', '\n', '  function balanceOf(address _who)public constant returns (uint256 balance) {\n', '      require(_who != 0x0);\n', '      return balanceOf[_who];\n', '  }\n', '\n', '  function _transferFrom(address _from, address _to, uint256 _value)  internal returns (bool)  {\n', '      require(_from != 0x0);\n', '      require(_to != 0x0);\n', '      require(balanceOf[_from] >= _value);\n', '      require(balanceOf[_to].add(_value) >= balanceOf[_to]);\n', '      uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '      balanceOf[_from] = balanceOf[_from].sub(_value);\n', '      balanceOf[_to] = balanceOf[_to].add(_value);\n', '      assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '      emit Transfer(_from, _to, _value);\n', '      return true;\n', '       \n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool){     \n', '      return _transferFrom(msg.sender,_to,_value);\n', '  }\n', '  \n', '  function ()public {\n', '  }\n', '\n', '  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '      require(_owner != 0x0);\n', '      require(_spender != 0x0);\n', '      return allowed[_owner][_spender];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value)public returns (bool) {\n', '      require(_spender != 0x0);\n', '      require(balanceOf[msg.sender] >= _value);\n', '      allowed[msg.sender][_spender] = _value;\n', '      emit Approval(msg.sender, _spender, _value);\n', '      return true;\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n', '      require(_from != 0x0);\n', '      require(_to != 0x0);\n', '      require(_value > 0);\n', '      require(allowed[_from][msg.sender] >= _value);\n', '      require(balanceOf[_from] >= _value);\n', '      require(balanceOf[_to].add(_value) >= balanceOf[_to]);\n', '      \n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \n', '      balanceOf[_from] = balanceOf[_from].sub(_value);\n', '      balanceOf[_to] = balanceOf[_to].add(_value);\n', '            \n', '      emit Transfer(_from, _to, _value);\n', '      return true;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '//*************** SafeMath ***************\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b > 0);\n', '      uint256 c = a / b;\n', '      return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '  }\n', '}\n', '\n', '//*************** Ownable *************** \n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  constructor() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner)public onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '  }\n', '\n', '}\n', '\n', '//************* ERC20 *************** \n', '\n', 'contract ERC20 {\n', '  \n', '  function balanceOf(address who)public constant returns (uint256);\n', '  function transfer(address to, uint256 value)public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value)public returns (bool);\n', '  function allowance(address owner, address spender)public constant returns (uint256);\n', '  function approve(address spender, uint256 value)public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//************* Utrade Token *************\n', '\n', 'contract UtradeToken is ERC20,Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // Token Info.\n', '  string public name;\n', '  string public symbol;\n', '  uint256 public totalSupply;\n', '  uint256 public constant decimals = 18;\n', '  mapping (address => uint256) public balanceOf;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  \n', '  constructor() public  {   \n', '    name="uTrade Trading Platform";\n', '    symbol="UTP";\n', '    totalSupply = 1000000000*(10**decimals);\n', '    balanceOf[msg.sender] = totalSupply; \n', ' }\n', '\n', '  function balanceOf(address _who)public constant returns (uint256 balance) {\n', '      require(_who != 0x0);\n', '      return balanceOf[_who];\n', '  }\n', '\n', '  function _transferFrom(address _from, address _to, uint256 _value)  internal returns (bool)  {\n', '      require(_from != 0x0);\n', '      require(_to != 0x0);\n', '      require(balanceOf[_from] >= _value);\n', '      require(balanceOf[_to].add(_value) >= balanceOf[_to]);\n', '      uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '      balanceOf[_from] = balanceOf[_from].sub(_value);\n', '      balanceOf[_to] = balanceOf[_to].add(_value);\n', '      assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '      emit Transfer(_from, _to, _value);\n', '      return true;\n', '       \n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool){     \n', '      return _transferFrom(msg.sender,_to,_value);\n', '  }\n', '  \n', '  function ()public {\n', '  }\n', '\n', '  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '      require(_owner != 0x0);\n', '      require(_spender != 0x0);\n', '      return allowed[_owner][_spender];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value)public returns (bool) {\n', '      require(_spender != 0x0);\n', '      require(balanceOf[msg.sender] >= _value);\n', '      allowed[msg.sender][_spender] = _value;\n', '      emit Approval(msg.sender, _spender, _value);\n', '      return true;\n', '  }\n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n', '      require(_from != 0x0);\n', '      require(_to != 0x0);\n', '      require(_value > 0);\n', '      require(allowed[_from][msg.sender] >= _value);\n', '      require(balanceOf[_from] >= _value);\n', '      require(balanceOf[_to].add(_value) >= balanceOf[_to]);\n', '      \n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \n', '      balanceOf[_from] = balanceOf[_from].sub(_value);\n', '      balanceOf[_to] = balanceOf[_to].add(_value);\n', '            \n', '      emit Transfer(_from, _to, _value);\n', '      return true;\n', '    }\n', '}']
