['pragma solidity ^ 0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns(uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '    function approve(address spender, uint256 value) public returns(bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '        mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    function balanceOf(address _owner) public view returns(uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function batchTransfer(address[] _tos, uint256[] _count)  public returns(bool) {\n', '        require(_tos.length > 0);\n', '        for (uint32 i = 0; i < _tos.length; i++) {\n', '            transfer(_tos[i], _count[i]);\n', '        }\n', '        return true;\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        uint _allowance = allowed[_from][msg.sender];\n', '        require(_to != address(0));\n', '        require(_value <= _allowance);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public view returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', 'contract BUTOKEN is StandardToken {\n', '    string public constant name = "BUToken";\n', '    string public constant symbol = "BUTO";\n', '    uint8 public constant decimals = 6;\n', '    constructor()  public {\n', '        totalSupply = 21000000000000;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '}']