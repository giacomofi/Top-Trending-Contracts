['pragma solidity ^0.4.11;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address internal owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title BenebitICO\n', ' * @author Hamza Yasin || Junaid Mushtaq\n', ' * @dev BenibitCrowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them BNE tokens based\n', ' * on a BNE token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    //totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(msg.sender, _to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  function burnTokens(uint256 _unsoldTokens) onlyOwner public returns (bool) {\n', '    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Benebit Crowdsale\n', ' * @author Junaid Mushtaq || Hamza Yasin\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  // The token being sold\n', '  MintableToken private token;\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public preStartTime;\n', '  uint256 public preEndTime;\n', '  uint256 public ICOstartTime;\n', '  uint256 public ICOEndTime;\n', '  \n', '  // Bonuses will be calculated here of ICO and Pre-ICO (both inclusive)\n', '  uint256 private preICOBonus;\n', '  uint256 private firstWeekBonus;\n', '  uint256 private secondWeekBonus;\n', '  uint256 private thirdWeekBonus;\n', '  uint256 private forthWeekBonus;\n', '  \n', '  \n', '  // wallet address where funds will be saved\n', '  address internal wallet;\n', '  \n', '  // base-rate of a particular Benebit token\n', '  uint256 public rate;\n', '  // amount of raised money in wei\n', '  uint256 internal weiRaised;\n', '  // Weeks in UTC\n', '  uint256 weekOne;\n', '  uint256 weekTwo;\n', '  uint256 weekThree;\n', '  uint256 weekForth;\n', '  \n', '  // total supply of token \n', '  uint256 private totalSupply = 300000000 * (10**18);\n', '  // public supply of token \n', '  uint256 private publicSupply = SafeMath.mul(SafeMath.div(totalSupply,100),75);\n', '  // rewards supply of token \n', '  uint256 private rewardsSupply = SafeMath.mul(SafeMath.div(totalSupply,100),15);\n', '  // team supply of token \n', '  uint256 private teamSupply = SafeMath.mul(SafeMath.div(totalSupply,100),5);\n', '  // advisor supply of token \n', '  uint256 private advisorSupply = SafeMath.mul(SafeMath.div(totalSupply,100),3);\n', '  // bounty supply of token \n', '  uint256 private bountySupply = SafeMath.mul(SafeMath.div(totalSupply,100),2);\n', '  // preICO supply of token \n', '  uint256 private preicoSupply = SafeMath.mul(SafeMath.div(publicSupply,100),15);\n', '  // ICO supply of token \n', '  uint256 private icoSupply = SafeMath.mul(SafeMath.div(publicSupply,100),85);\n', '  // Remaining Public Supply of token \n', '  uint256 private remainingPublicSupply = publicSupply;\n', '  // Remaining Reward Supply of token \n', '  uint256 private remainingRewardsSupply = rewardsSupply;\n', '  // Remaining Bounty Supply of token \n', '  uint256 private remainingBountySupply = bountySupply;\n', '  // Remaining Advisor Supply of token \n', '  uint256 private remainingAdvisorSupply = advisorSupply;\n', '  // Remaining Team Supply of token \n', '  uint256 private remainingTeamSupply = teamSupply;\n', '  // Time lock or vested period of token for team allocated token\n', '  uint256 private teamTimeLock;\n', '  // Time lock or vested period of token for Advisor allocated token\n', '  uint256 private advisorTimeLock;\n', '  /**\n', '   *  @bool checkBurnTokens\n', '   *  @bool upgradeICOSupply\n', '   *  @bool grantTeamSupply\n', '   *  @bool grantAdvisorSupply     \n', '  */\n', '  bool private checkBurnTokens;\n', '  bool private upgradeICOSupply;\n', '  bool private grantTeamSupply;\n', '  bool private grantAdvisorSupply;\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  // Benebit Crowdsale constructor\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '    // Benebit token creation \n', '    token = createTokenContract();\n', '    // Pre-ICO start Time\n', '    preStartTime = _startTime;\n', '    \n', '    // Pre-ICO end time\n', '     preEndTime = 1519045200;\n', '    // // ICO start Time\n', '     ICOstartTime = 1519304400;\n', '    // ICO end Time\n', '    ICOEndTime = _endTime;\n', '    // Base Rate of BNE Token\n', '    rate = _rate;\n', '    // Multi-sig wallet where funds will be saved\n', '    wallet = _wallet;\n', '    /** Calculations of Bonuses in ICO or Pre-ICO */\n', '    preICOBonus = SafeMath.div(SafeMath.mul(rate,30),100);\n', '    firstWeekBonus = SafeMath.div(SafeMath.mul(rate,20),100);\n', '    secondWeekBonus = SafeMath.div(SafeMath.mul(rate,15),100);\n', '    thirdWeekBonus = SafeMath.div(SafeMath.mul(rate,10),100);\n', '    forthWeekBonus = SafeMath.div(SafeMath.mul(rate,5),100);\n', '    /** ICO bonuses week calculations */\n', '    weekOne = SafeMath.add(ICOstartTime, 604800);\n', '    weekTwo = SafeMath.add(weekOne, 604800);\n', '    weekThree = SafeMath.add(weekTwo, 604800);\n', '    weekForth = SafeMath.add(weekThree, 604800);\n', '    /** Vested Period calculations for team and advisors*/\n', '    teamTimeLock = SafeMath.add(ICOEndTime, 31536000);\n', '    advisorTimeLock = SafeMath.add(ICOEndTime, 5356800);\n', '    \n', '    checkBurnTokens = false;\n', '    upgradeICOSupply = false;\n', '    grantAdvisorSupply = false;\n', '    grantTeamSupply = false;\n', '  }\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '  \n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '    \n', '  }\n', '  // High level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '    uint256 weiAmount = msg.value;\n', '    // minimum investment should be 0.05 ETH\n', '    require(weiAmount >= (0.05 * 1 ether));\n', '    \n', '    uint256 accessTime = now;\n', '    uint256 tokens = 0;\n', '  // calculating the ICO and Pre-ICO bonuses on the basis of timing\n', '    if ((accessTime >= preStartTime) && (accessTime < preEndTime)) {\n', '        require(preicoSupply > 0);\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(preICOBonus));\n', '        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '        \n', '        require(preicoSupply >= tokens);\n', '        \n', '        preicoSupply = preicoSupply.sub(tokens);        \n', '        remainingPublicSupply = remainingPublicSupply.sub(tokens);\n', '    } else if ((accessTime >= ICOstartTime) && (accessTime <= ICOEndTime)) {\n', '        if (!upgradeICOSupply) {\n', '          icoSupply = SafeMath.add(icoSupply,preicoSupply);\n', '          upgradeICOSupply = true;\n', '        }\n', '        if ( accessTime <= weekOne ) {\n', '          tokens = SafeMath.add(tokens, weiAmount.mul(firstWeekBonus));\n', '        } else if (accessTime <= weekTwo) {\n', '          tokens = SafeMath.add(tokens, weiAmount.mul(secondWeekBonus));\n', '        } else if ( accessTime < weekThree ) {\n', '          tokens = SafeMath.add(tokens, weiAmount.mul(thirdWeekBonus));\n', '        } else if ( accessTime < weekForth ) {\n', '          tokens = SafeMath.add(tokens, weiAmount.mul(forthWeekBonus));\n', '        }\n', '        \n', '        tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '        icoSupply = icoSupply.sub(tokens);        \n', '        remainingPublicSupply = remainingPublicSupply.sub(tokens);\n', '    } else if ((accessTime > preEndTime) && (accessTime < ICOstartTime)){\n', '      revert();\n', '    } else {\n', '      revert();\n', '    }\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    // tokens are minting here\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    // funds are forwarding\n', '    forwardFunds();\n', '  }\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= preStartTime && now <= ICOEndTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '      return now > ICOEndTime;\n', '  }\n', '  // @return true if burnToken function has ended\n', '  function burnToken() onlyOwner public returns (bool) {\n', '    require(hasEnded());\n', '    require(!checkBurnTokens);\n', '    checkBurnTokens = true;\n', '    token.burnTokens(remainingPublicSupply);\n', '    totalSupply = SafeMath.sub(totalSupply, remainingPublicSupply);\n', '    remainingPublicSupply = 0;\n', '    return true;\n', '  }\n', '  /** \n', '     * @return true if bountyFunds function has ended\n', '     * @param beneficiary address where owner wants to transfer tokens\n', '     * @param valueToken value of token\n', '  */\n', '  function bountyFunds(address beneficiary, uint256 valueToken) onlyOwner public { \n', '    valueToken = SafeMath.mul(valueToken, 1 ether);\n', '    require(remainingBountySupply >= valueToken);\n', '    remainingBountySupply = SafeMath.sub(remainingBountySupply,valueToken);\n', '    token.mint(beneficiary, valueToken);\n', '  }\n', '  /** \n', '     * @return true if rewardsFunds function has ended\n', '     * @param beneficiary address where owner wants to transfer tokens\n', '     * @param valueToken value of token\n', '  */\n', '  function rewardsFunds(address beneficiary, uint256 valueToken) onlyOwner public { \n', '    valueToken = SafeMath.mul(valueToken, 1 ether);\n', '    require(remainingRewardsSupply >= valueToken);\n', '    remainingRewardsSupply = SafeMath.sub(remainingRewardsSupply,valueToken);\n', '    token.mint(beneficiary, valueToken);\n', '  } \n', '  /**\n', '      @return true if grantAdvisorToken function has ended  \n', '  */\n', '  function grantAdvisorToken() onlyOwner public {\n', '    require(!grantAdvisorSupply);\n', '    require(now > advisorTimeLock);\n', '    uint256 valueToken = SafeMath.div(remainingAdvisorSupply,3);\n', '    require(remainingAdvisorSupply >= valueToken);\n', '    grantAdvisorSupply = true;\n', '    token.mint(0xAA855f6D87d5D443eDa49aA034fA99D9EeeA0337, valueToken);\n', '    token.mint(0x4B2e3E1BBEb117b781e71A10376A969860FBcEB3, valueToken);\n', '    token.mint(0xbb3b3799D1b31189b491C26B1D7c17307fb87F5d, valueToken);\n', '    remainingAdvisorSupply = 0;\n', '  }\n', '  /**\n', '      @return true if grantTeamToken function has ended  \n', '  */\n', '    function grantTeamToken() onlyOwner public {\n', '    require(!grantTeamSupply);\n', '    require(now > teamTimeLock);\n', '    uint256 valueToken = SafeMath.div(remainingTeamSupply, 5);\n', '    require(remainingTeamSupply >= valueToken);\n', '    grantTeamSupply = true;\n', '    token.mint(0xBEB9e4057f953AaBdF14Dc4018056888C67E40b0, valueToken);\n', '    token.mint(0x70fcd07629eB9b406223168AEB8De06E2564F558, valueToken);\n', '    token.mint(0x0e562f12239C660627bE186de6535c05983579E9, valueToken);\n', '    token.mint(0x42e045f4D119212AC1CF5820488E69AA9164DC70, valueToken);\n', '    token.mint(0x2f53678a33C0fEE8f30fc5cfaC4E5E140397b40D, valueToken);\n', '    remainingTeamSupply = 0;\n', '    \n', '  }\n', '/** \n', '   * Function transferToken works to transfer tokens to the specified address on the\n', '     call of owner within the crowdsale timestamp.\n', '   * @param beneficiary address where owner wants to transfer tokens\n', '   * @param tokens value of token\n', ' */\n', '  function transferToken(address beneficiary, uint256 tokens) onlyOwner public {\n', '   \n', '    require ((now >= preStartTime) && (now <= ICOEndTime));\n', '    tokens = SafeMath.mul(tokens,1 ether);\n', '    require(remainingPublicSupply >= tokens);\n', '    remainingPublicSupply = SafeMath.sub(remainingPublicSupply, tokens);\n', '    token.mint(beneficiary, tokens);\n', '  }\n', '  function getTokenAddress() onlyOwner public returns (address) {\n', '    return token;\n', '  }\n', '  function getPublicSupply() onlyOwner public returns (uint256) {\n', '    return remainingPublicSupply;\n', '  }\n', '}\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '  uint256 public cap;\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '}\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '  bool isFinalized = false;\n', '  event Finalized();\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '    finalization();\n', '    Finalized();\n', '    isFinalized = true;\n', '  }\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '  enum State { Active, Refunding, Closed }\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  function RefundVault(address _wallet) {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', " * Uses a RefundVault as the crowdsale's vault.\n", ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '  bool private _goalReached = false;\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault private vault;\n', '  function RefundableCrowdsale(uint256 _goal) {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', "  // We're overriding the fund forwarding from Crowdsale.\n", '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '    vault.refund(msg.sender);\n', '  }\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '    super.finalization();\n', '  }\n', '  function goalReached() public constant returns (bool) {\n', '    if (weiRaised >= goal) {\n', '      _goalReached = true;\n', '      return true;\n', '    } else if (_goalReached) {\n', '      return true;\n', '    } \n', '    else {\n', '      return false;\n', '    }\n', '  }\n', '  function updateGoalCheck() onlyOwner public {\n', '    _goalReached = true;\n', '  }\n', '  function getVaultAddress() onlyOwner public returns (address) {\n', '    return vault;\n', '  }\n', '}\n', '/**\n', ' * @title BenebitToken\n', ' * @author Hamza Yasin || Junaid Mushtaq\n', ' */\n', 'contract BenebitToken is MintableToken {\n', '  string public constant name = "BenebitToken";\n', '  string public constant symbol = "BNE";\n', '  uint256 public constant decimals = 18;\n', '  uint256 public constant _totalSupply = 300000000 * 1 ether;\n', '  \n', '/** Constructor BenebitToken */\n', '  function BenebitToken() {\n', '    totalSupply = _totalSupply;\n', '  }\n', '}\n', 'contract BenebitICO is Crowdsale, CappedCrowdsale, RefundableCrowdsale {\n', '    uint256 _startTime = 1516626000;\n', '    uint256 _endTime = 1523365200; \n', '    uint256 _rate = 5800;\n', '    uint256 _goal = 5000 * 1 ether;\n', '    uint256 _cap = 22500 * 1 ether;\n', '    address _wallet  = 0x88BfBd2B464C15b245A9f7a563D207bd8A161054;   \n', '    /** Constructor BenebitICO */\n', '    function BenebitICO() \n', '    CappedCrowdsale(_cap)\n', '    FinalizableCrowdsale()\n', '    RefundableCrowdsale(_goal)\n', '    Crowdsale(_startTime,_endTime,_rate,_wallet) \n', '    {\n', '        \n', '    }\n', '    /** BenebitToken Contract is generating from here */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new BenebitToken();\n', '    }\n', '}']