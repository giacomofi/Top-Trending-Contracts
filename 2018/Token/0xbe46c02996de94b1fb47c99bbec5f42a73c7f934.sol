['pragma solidity ^0.4.23;\n', '\n', 'contract ERC20Basic {\n', '  // events\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  // public functions\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address addr) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  // public variables\n', '  address public owner;\n', '\n', '  // internal variables\n', '\n', '  // events\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  // public functions\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  // internal functions\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock is Ownable {\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  uint8 public decimals = 8;\n', '\n', '  address public beneficiary;\n', '  \n', '  uint256 public releaseTime1 = 1543593600; // 2018.12.1\n', '  uint256 public releaseTime2 = 1559318400; // 2019.6.1\n', '  uint256 public releaseTime3 = 1575129600; // 2019.12.1\n', '  uint256 public releaseTime4 = 1590940800; // 2020.6.1\n', '  \n', '  uint256 public releaseValue1 = 1500000000 * (10 ** uint256(decimals)); \n', '  uint256 public releaseValue2 = 1500000000 * (10 ** uint256(decimals)); \n', '  uint256 public releaseValue3 = 1500000000 * (10 ** uint256(decimals)); \n', '  uint256 public releaseValue4 = 1500000000 * (10 ** uint256(decimals)); \n', '\n', '  bool public releaseState1 = false;\n', '  bool public releaseState2 = false;\n', '  bool public releaseState3 = false;\n', '  bool public releaseState4 = false;\n', '\n', '  constructor(\n', '    ERC20Basic _token,\n', '    address _beneficiary\n', '\n', '  )\n', '    public\n', '  {\n', '    require(block.timestamp < releaseTime1);\n', '    require(block.timestamp < releaseTime2);\n', '    require(block.timestamp < releaseTime3);\n', '    require(block.timestamp < releaseTime4);\n', '    \n', '    require(_beneficiary != address(0));\n', '    require(_token != address(0));\n', '\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '\n', '\n', '  }\n', '    // fallback function\n', '    function() public payable {\n', '        revert();\n', '    }\n', '  function checkCanRelease(bool rState, uint256 rTime, uint256 rAmount) private \n', '  {\n', '    require(block.timestamp >= rTime);\n', '    require(false == rState);\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '    require(amount >= rAmount);\n', '  }\n', '  function releaseImpl(uint256 rAmount) private \n', '  {\n', '    require( token.transfer(beneficiary, rAmount) );\n', '  }\n', '\n', '  function release_1() onlyOwner public \n', '  {\n', '    checkCanRelease(releaseState1, releaseTime1, releaseValue1);\n', '    \n', '    releaseState1 = true;\n', '    releaseImpl(releaseValue1);\n', '  }\n', '\n', '  function release_2() onlyOwner public \n', '  {\n', '    checkCanRelease(releaseState2, releaseTime2, releaseValue2);\n', '\n', '    releaseState2 = true;\n', '    releaseImpl(releaseValue2);\n', '  }\n', '\n', '  function release_3() onlyOwner public \n', '  {\n', '    checkCanRelease(releaseState3, releaseTime3, releaseValue3);\n', '    releaseState3 = true;\n', '    releaseImpl(releaseValue3);   \n', '  }\n', '\n', '  function release_4() onlyOwner public \n', '  {\n', '    checkCanRelease(releaseState4, releaseTime4, releaseValue4);\n', '    releaseState4 = true;\n', '    releaseImpl(releaseValue4);\n', '  }\n', '  \n', '  function release_remain() onlyOwner public \n', '  {\n', '    require(true == releaseState1);\n', '    require(true == releaseState2);\n', '    require(true == releaseState3);\n', '    require(true == releaseState4);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    releaseImpl(amount);\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract ERC20Basic {\n', '  // events\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  // public functions\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address addr) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  // public variables\n', '  address public owner;\n', '\n', '  // internal variables\n', '\n', '  // events\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  // public functions\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  // internal functions\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock is Ownable {\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  uint8 public decimals = 8;\n', '\n', '  address public beneficiary;\n', '  \n', '  uint256 public releaseTime1 = 1543593600; // 2018.12.1\n', '  uint256 public releaseTime2 = 1559318400; // 2019.6.1\n', '  uint256 public releaseTime3 = 1575129600; // 2019.12.1\n', '  uint256 public releaseTime4 = 1590940800; // 2020.6.1\n', '  \n', '  uint256 public releaseValue1 = 1500000000 * (10 ** uint256(decimals)); \n', '  uint256 public releaseValue2 = 1500000000 * (10 ** uint256(decimals)); \n', '  uint256 public releaseValue3 = 1500000000 * (10 ** uint256(decimals)); \n', '  uint256 public releaseValue4 = 1500000000 * (10 ** uint256(decimals)); \n', '\n', '  bool public releaseState1 = false;\n', '  bool public releaseState2 = false;\n', '  bool public releaseState3 = false;\n', '  bool public releaseState4 = false;\n', '\n', '  constructor(\n', '    ERC20Basic _token,\n', '    address _beneficiary\n', '\n', '  )\n', '    public\n', '  {\n', '    require(block.timestamp < releaseTime1);\n', '    require(block.timestamp < releaseTime2);\n', '    require(block.timestamp < releaseTime3);\n', '    require(block.timestamp < releaseTime4);\n', '    \n', '    require(_beneficiary != address(0));\n', '    require(_token != address(0));\n', '\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '\n', '\n', '  }\n', '    // fallback function\n', '    function() public payable {\n', '        revert();\n', '    }\n', '  function checkCanRelease(bool rState, uint256 rTime, uint256 rAmount) private \n', '  {\n', '    require(block.timestamp >= rTime);\n', '    require(false == rState);\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '    require(amount >= rAmount);\n', '  }\n', '  function releaseImpl(uint256 rAmount) private \n', '  {\n', '    require( token.transfer(beneficiary, rAmount) );\n', '  }\n', '\n', '  function release_1() onlyOwner public \n', '  {\n', '    checkCanRelease(releaseState1, releaseTime1, releaseValue1);\n', '    \n', '    releaseState1 = true;\n', '    releaseImpl(releaseValue1);\n', '  }\n', '\n', '  function release_2() onlyOwner public \n', '  {\n', '    checkCanRelease(releaseState2, releaseTime2, releaseValue2);\n', '\n', '    releaseState2 = true;\n', '    releaseImpl(releaseValue2);\n', '  }\n', '\n', '  function release_3() onlyOwner public \n', '  {\n', '    checkCanRelease(releaseState3, releaseTime3, releaseValue3);\n', '    releaseState3 = true;\n', '    releaseImpl(releaseValue3);   \n', '  }\n', '\n', '  function release_4() onlyOwner public \n', '  {\n', '    checkCanRelease(releaseState4, releaseTime4, releaseValue4);\n', '    releaseState4 = true;\n', '    releaseImpl(releaseValue4);\n', '  }\n', '  \n', '  function release_remain() onlyOwner public \n', '  {\n', '    require(true == releaseState1);\n', '    require(true == releaseState2);\n', '    require(true == releaseState3);\n', '    require(true == releaseState4);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    releaseImpl(amount);\n', '  }\n', '}']
