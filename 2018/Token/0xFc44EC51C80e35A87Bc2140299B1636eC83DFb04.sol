['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;   \n', '    }\n', '}\n', '\n', 'contract BasicToken {\n', '    string private token_name;\n', '    string private token_symbol;\n', '    uint256 private token_decimals;\n', '\n', '    uint256 private total_supply;\n', '    uint256 private remaining_supply;\n', '\n', '    mapping (address => uint256) private balance_of;\n', '    mapping (address => mapping(address => uint256)) private allowance_of;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approve(address indexed target, address indexed spender, uint256 value);\n', '\n', '    function BasicToken (\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint256 tokenDecimals,\n', '        uint256 tokenSupply\n', '    ) public {\n', '        token_name = tokenName;\n', '        token_symbol = tokenSymbol;\n', '        token_decimals = tokenDecimals;\n', '        total_supply = tokenSupply * (10 ** uint256(token_decimals));\n', '        remaining_supply = total_supply;\n', '    }\n', '\n', '    function name() public view returns (string) {\n', '        return token_name;\n', '    }\n', '\n', '    function symbol() public view returns (string) {\n', '        return token_symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint256) {\n', '        return token_decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return total_supply;\n', '    }\n', '\n', '    function remainingSupply() internal view returns (uint256) {\n', '        return remaining_supply;\n', '    }\n', '\n', '    function balanceOf(\n', '        address client_address\n', '    ) public view returns (uint256) {\n', '        return balance_of[client_address];\n', '    }\n', '\n', '    function setBalance(\n', '        address client_address,\n', '        uint256 value\n', '    ) internal returns (bool) {\n', '        require(client_address != address(0));\n', '        balance_of[client_address] = value;\n', '    }\n', '\n', '    function allowance(\n', '        address target_address,\n', '        address spender_address\n', '    ) public view returns (uint256) {\n', '        return allowance_of[target_address][spender_address];\n', '    }\n', '\n', '    function approve(\n', '        address spender_address,\n', '        uint256 value\n', '    ) public returns (bool) {\n', '        require(value >= 0);\n', '        require(msg.sender != address(0));\n', '        require(spender_address != address(0));\n', '\n', '        setApprove(msg.sender, spender_address, value);\n', '        Approve(msg.sender, spender_address, value);\n', '        return true;\n', '    }\n', '    \n', '    function setApprove(\n', '        address target_address,\n', '        address spender_address,\n', '        uint256 value\n', '    ) internal returns (bool) {\n', '        require(value >= 0);\n', '        require(msg.sender != address(0));\n', '        require(spender_address != address(0));\n', '\n', '        allowance_of[target_address][spender_address] = value;\n', '        return true;\n', '    }\n', '\n', '    function changeTokenName(\n', '        string newTokenName\n', '    ) internal returns (bool) {\n', '        token_name = newTokenName;\n', '        return true;\n', '    }\n', '\n', '    function changeTokenSymbol(\n', '        string newTokenSymbol\n', '    ) internal returns (bool) {\n', '        token_symbol = newTokenSymbol;\n', '        return true;\n', '    }\n', '\n', '    function changeTokenDecimals(\n', '        uint256 newTokenDecimals\n', '    ) internal returns (bool) {\n', '        token_decimals = newTokenDecimals;\n', '        return true;\n', '    }\n', '\n', '    function changeTotalSupply(\n', '        uint256 newTotalSupply\n', '    ) internal returns (bool) {\n', '        total_supply = newTotalSupply;\n', '        return true;\n', '    }\n', '\n', '    function changeRemainingSupply(\n', '        uint256 newRemainingSupply\n', '    ) internal returns (bool) {\n', '        remaining_supply = newRemainingSupply;\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract VoltOwned {\n', '    mapping (address => uint) private voltOwners;\n', '    address[] private ownerList;\n', '\n', '    mapping (address => uint256) private voltFreeze;\n', '\n', '    modifier onlyOwner {\n', '        require(voltOwners[msg.sender] == 99);\n', '        _;\n', '    }\n', '\n', '    modifier noFreeze {\n', '        require(now >= voltFreeze[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function VoltOwned(address firstOwner) public {\n', '        voltOwners[firstOwner] = 99;\n', '        ownerList.push(firstOwner);\n', '    }\n', '\n', '    function isOwner(address who) internal view returns (bool) {\n', '        if (voltOwners[who] == 99) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function addOwner(address newVoltOwnerAddress) public onlyOwner noFreeze {\n', '        require(newVoltOwnerAddress != address(0));\n', '        voltOwners[newVoltOwnerAddress] = 99;\n', '        ownerList.push(newVoltOwnerAddress);\n', '    }\n', '\n', '    function removeOwner(address removeVoltOwnerAddress) public onlyOwner noFreeze {\n', '        require(removeVoltOwnerAddress != address(0));\n', '        require(ownerList.length > 1);\n', '\n', '        voltOwners[removeVoltOwnerAddress] = 0;\n', '        for (uint256 i = 0; i != ownerList.length; i++) {\n', '            if (removeVoltOwnerAddress == ownerList[i]) {\n', '                delete ownerList[i];\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getOwners() public onlyOwner noFreeze returns (address[]) {\n', '        return ownerList;\n', '    }\n', '\n', '    function isFreeze(address who) internal view returns (bool) {\n', '        if (now >= voltFreeze[who]) {\n', '            return false;\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function setFreeze(\n', '        address freezeAddress,\n', '        uint256 timestamp\n', '    ) public onlyOwner noFreeze returns (bool) {\n', '        require(freezeAddress != address(0));\n', '        voltFreeze[freezeAddress] = timestamp;\n', '    }\n', '\n', '    function getFreezeTimestamp(\n', '        address who\n', '    ) public onlyOwner noFreeze returns (uint256) {\n', '        return voltFreeze[who];\n', '    }\n', '}\n', '\n', 'contract VoltToken is BasicToken, VoltOwned {\n', '    using SafeMath for uint256;\n', '\n', '    bool private mintStatus;\n', '\n', '    event Deposit(address indexed from, address indexed to, uint256 value);\n', '    event Mint(address indexed to, uint256 value);\n', '    event Burn(address indexed target, uint256 value);\n', '\n', '    function VoltToken () public BasicToken (\n', '        "VOLT", "ACDC", 18, 4000000000\n', '    ) VoltOwned(\n', '        msg.sender\n', '    ) {\n', '        mintStatus = true;\n', '    }\n', '\n', '    modifier canMint {\n', '        require(mintStatus == true);\n', '        _;\n', '    }\n', '\n', '    function mint(\n', '        address to,\n', '        uint256 value,\n', '        uint256 freezeTimestamp\n', '    ) public onlyOwner noFreeze canMint {\n', '        uint256 ts = totalSupply();\n', '        uint256 rs = remainingSupply();\n', '        require(ts >= rs);\n', '\n', '        superMint(to, value);\n', '        setFreeze(to, freezeTimestamp);\n', '    }\n', '\n', '    function superMint(address to, uint256 value) public onlyOwner noFreeze {\n', '        uint256 rs = remainingSupply();\n', '        require(rs >= value);\n', '\n', '        uint256 currentBalance = balanceOf(to);\n', '        setBalance(to, currentBalance.add(value));\n', '        setRemainingSupply(rs.sub(value));\n', '        Transfer(0x0, to, value);\n', '        Mint(to, value);\n', '    }\n', '\n', '    function mintOpen() public onlyOwner noFreeze returns (bool) {\n', '        require(mintStatus == false);\n', '        mintStatus = true;\n', '        return true;\n', '    }\n', '\n', '    function mintClose() public onlyOwner noFreeze returns (bool) {\n', '        require(mintStatus == true);\n', '        mintStatus = false;\n', '        return true;\n', '    }\n', '\n', '    function transfer(\n', '        address to,\n', '        uint256 value\n', '    ) public noFreeze returns (bool) {\n', '        require(value > 0);\n', '        require(msg.sender != address(0));\n', '        require(to != address(0));\n', '\n', '        require(balanceOf(msg.sender) >= value);\n', '        require(balanceOf(to).add(value) >= balanceOf(to));\n', '\n', '        voltTransfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) public noFreeze returns(bool) {\n', '        require(value > 0);\n', '        require(msg.sender != address(0));\n', '        require(from != address(0));\n', '        require(to != address(0));\n', '\n', '        require(isFreeze(from) == false);\n', '        require(allowance(from, msg.sender) >= value);\n', '        require(balanceOf(from) >= value);\n', '        require(balanceOf(to).add(value) >= balanceOf(to));\n', '\n', '        voltTransfer(from, to, value);\n', '\n', '        uint256 remaining = allowance(from, msg.sender).sub(value);\n', '        setApprove(from, msg.sender, remaining);\n', '        return true;\n', '    }\n', '\n', '    function voltTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) private noFreeze returns (bool) {\n', '        uint256 preBalance = balanceOf(from);\n', '        setBalance(from, balanceOf(from).sub(value));\n', '        setBalance(to, balanceOf(to).add(value));\n', '        Transfer(from, to, value);\n', '        assert(balanceOf(from).add(value) == preBalance);\n', '        return true;\n', '    }\n', '\n', '    function setTokenName(\n', '        string newTokenName\n', '    ) public onlyOwner noFreeze returns (bool) {\n', '        return changeTokenName(newTokenName);\n', '    }\n', '\n', '    function setTokenSymbol(\n', '        string newTokenSymbol\n', '    ) public onlyOwner noFreeze returns (bool) {\n', '        return changeTokenSymbol(newTokenSymbol);\n', '    }\n', '\n', '    function setTotalSupply(\n', '        uint256 newTotalSupply\n', '    ) public onlyOwner noFreeze returns (bool) {\n', '        return changeTotalSupply(newTotalSupply);\n', '    }\n', '\n', '    function setRemainingSupply(\n', '        uint256 newRemainingSupply\n', '    ) public onlyOwner noFreeze returns (bool) {\n', '        return changeRemainingSupply(newRemainingSupply);\n', '    }\n', '\n', '    function getRemainingSupply() public onlyOwner noFreeze returns (uint256) {\n', '        return remainingSupply();\n', '    }\n', '}']