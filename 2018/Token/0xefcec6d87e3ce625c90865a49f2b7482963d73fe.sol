['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner public returns (bool _success) {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '        OwnershipTransferred(owner, _newOwner);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function isPaused() public view returns (bool _is_paused) {\n', '        return paused;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public returns (bool _success) {\n', '        paused = true;\n', '        Pause();\n', '        return true;\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public returns (bool _success) {\n', '        paused = false;\n', '        Unpause();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ERC223 {\n', '    uint public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns (uint _balance);\n', '    function totalSupply() public view returns (uint256 _totalSupply);\n', '    function transfer(address to, uint value) public returns (bool _success);\n', '    function transfer(address to, uint value, bytes data) public returns (bool _success);\n', '    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool _success);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function decimals() public view returns (uint8 _decimals);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success);\n', '    function approve(address _spender, uint256 _value) public returns (bool _success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 _remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '\n', 'contract ContractReceiver {\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        tkn.sig = bytes4(u);\n', '    }\n', '}\n', '\n', 'contract FETCOIN is ERC223, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Offering {\n', '        uint256 amount;\n', '        uint256 locktime;\n', '    }\n', '\n', '    string public name = "fetish coin";\n', '    string public symbol = "FET";\n', '    uint8 public decimals = 6;\n', '    uint256 public totalSupply = 10e10 * 1e6;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    mapping(address => bool) public frozenAccount;\n', '\n', '    mapping(address => mapping(address => Offering)) public offering;\n', '\n', '    event Freeze(address indexed target, uint256 value);\n', '    event Unfreeze(address indexed target, uint256 value);\n', '    event Burn(address indexed from, uint256 amount);\n', '    event Rain(address indexed from, uint256 amount);\n', '\n', '    function FETCOIN() public {\n', '        owner = msg.sender;\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) whenNotPaused public returns (bool _success) {\n', '        require(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false);\n', '\n', '        if (isContract(_to)) {\n', '            require(balanceOf[msg.sender] >= _value);\n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '            Transfer(msg.sender, _to, _value, _data);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) whenNotPaused public returns (bool _success) {\n', '        require(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false);\n', '\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _value) whenNotPaused public returns (bool _success) {\n', '        require(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false);\n', '\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function name() public view returns (string _name) {\n', '        return name;\n', '    }\n', '\n', '    function symbol() public view returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool _success) {\n', '        require(_to != address(0)\n', '            && _value > 0\n', '            && balanceOf[_from] >= _value\n', '            && allowance[_from][msg.sender] >= _value\n', '            && frozenAccount[_from] == false && frozenAccount[_to] == false);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) whenNotPaused public returns (bool _success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 _remaining) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    function freezeAccounts(address[] _targets) onlyOwner whenNotPaused public returns (bool _success) {\n', '        require(_targets.length > 0);\n', '\n', '        for (uint j = 0; j < _targets.length; j++) {\n', '            require(_targets[j] != 0x0);\n', '            frozenAccount[_targets[j]] = true;\n', '            Freeze(_targets[j], balanceOf[_targets[j]]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function unfreezeAccounts(address[] _targets) onlyOwner whenNotPaused public returns (bool _success) {\n', '        require(_targets.length > 0);\n', '\n', '        for (uint j = 0; j < _targets.length; j++) {\n', '            require(_targets[j] != 0x0);\n', '            frozenAccount[_targets[j]] = false;\n', '            Unfreeze(_targets[j], balanceOf[_targets[j]]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function isFrozenAccount(address _target) public view returns (bool _is_frozen){\n', '        return frozenAccount[_target] == true;\n', '    }\n', '\n', '    function isContract(address _target) private view returns (bool _is_contract) {\n', '        uint length;\n', '        assembly {\n', '            length := extcodesize(_target)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool _success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool _success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(address _from, uint256 _amount) onlyOwner whenNotPaused public returns (bool _success) {\n', '        require(_amount > 0 && balanceOf[_from] >= _amount);\n', '        _amount = _amount.mul(1e6);\n', '        balanceOf[_from] = balanceOf[_from].sub(_amount);\n', '        totalSupply = totalSupply.sub(_amount);\n', '        Burn(_from, _amount);\n', '        return true;\n', '    }\n', '\n', '    function rain(address[] _addresses, uint256 _amount) onlyOwner whenNotPaused public returns (bool _success) {\n', '        require(_amount > 0 && _addresses.length > 0 && frozenAccount[msg.sender] == false);\n', '\n', '        _amount = _amount.mul(1e6);\n', '        uint256 totalAmount = _amount.mul(_addresses.length);\n', '        require(balanceOf[msg.sender] >= totalAmount);\n', '\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n', '\n', '        for (uint j = 0; j < _addresses.length; j++) {\n', '            require(_addresses[j] != 0x0 && frozenAccount[_addresses[j]] == false);\n', '\n', '            balanceOf[_addresses[j]] = balanceOf[_addresses[j]].add(_amount);\n', '            Transfer(msg.sender, _addresses[j], _amount);\n', '        }\n', '        Rain(msg.sender, totalAmount);\n', '        return true;\n', '    }\n', '\n', '    function collectTokens(address[] _addresses, uint[] _amounts) onlyOwner whenNotPaused public returns (bool _success) {\n', '        require(_addresses.length > 0 && _addresses.length == _amounts.length);\n', '\n', '        uint256 totalAmount = 0;\n', '\n', '        for (uint j = 0; j < _addresses.length; j++) {\n', '            require(_amounts[j] > 0 && _addresses[j] != 0x0 && frozenAccount[_addresses[j]] == false);\n', '            _amounts[j] = _amounts[j].mul(1e6);\n', '            require(balanceOf[_addresses[j]] >= _amounts[j]);\n', '            balanceOf[_addresses[j]] = balanceOf[_addresses[j]].sub(_amounts[j]);\n', '            totalAmount = totalAmount.add(_amounts[j]);\n', '            Transfer(_addresses[j], msg.sender, _amounts[j]);\n', '        }\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(totalAmount);\n', '        return true;\n', '    }\n', '\n', '    function() payable public {}\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner public returns (bool _success) {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '        OwnershipTransferred(owner, _newOwner);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function isPaused() public view returns (bool _is_paused) {\n', '        return paused;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public returns (bool _success) {\n', '        paused = true;\n', '        Pause();\n', '        return true;\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public returns (bool _success) {\n', '        paused = false;\n', '        Unpause();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ERC223 {\n', '    uint public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns (uint _balance);\n', '    function totalSupply() public view returns (uint256 _totalSupply);\n', '    function transfer(address to, uint value) public returns (bool _success);\n', '    function transfer(address to, uint value, bytes data) public returns (bool _success);\n', '    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool _success);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function decimals() public view returns (uint8 _decimals);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success);\n', '    function approve(address _spender, uint256 _value) public returns (bool _success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 _remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '\n', 'contract ContractReceiver {\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        tkn.sig = bytes4(u);\n', '    }\n', '}\n', '\n', 'contract FETCOIN is ERC223, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    struct Offering {\n', '        uint256 amount;\n', '        uint256 locktime;\n', '    }\n', '\n', '    string public name = "fetish coin";\n', '    string public symbol = "FET";\n', '    uint8 public decimals = 6;\n', '    uint256 public totalSupply = 10e10 * 1e6;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    mapping(address => bool) public frozenAccount;\n', '\n', '    mapping(address => mapping(address => Offering)) public offering;\n', '\n', '    event Freeze(address indexed target, uint256 value);\n', '    event Unfreeze(address indexed target, uint256 value);\n', '    event Burn(address indexed from, uint256 amount);\n', '    event Rain(address indexed from, uint256 amount);\n', '\n', '    function FETCOIN() public {\n', '        owner = msg.sender;\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) whenNotPaused public returns (bool _success) {\n', '        require(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false);\n', '\n', '        if (isContract(_to)) {\n', '            require(balanceOf[msg.sender] >= _value);\n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '            Transfer(msg.sender, _to, _value, _data);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) whenNotPaused public returns (bool _success) {\n', '        require(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false);\n', '\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _value) whenNotPaused public returns (bool _success) {\n', '        require(_value > 0 && frozenAccount[msg.sender] == false && frozenAccount[_to] == false);\n', '\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function name() public view returns (string _name) {\n', '        return name;\n', '    }\n', '\n', '    function symbol() public view returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool _success) {\n', '        require(_to != address(0)\n', '            && _value > 0\n', '            && balanceOf[_from] >= _value\n', '            && allowance[_from][msg.sender] >= _value\n', '            && frozenAccount[_from] == false && frozenAccount[_to] == false);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) whenNotPaused public returns (bool _success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 _remaining) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    function freezeAccounts(address[] _targets) onlyOwner whenNotPaused public returns (bool _success) {\n', '        require(_targets.length > 0);\n', '\n', '        for (uint j = 0; j < _targets.length; j++) {\n', '            require(_targets[j] != 0x0);\n', '            frozenAccount[_targets[j]] = true;\n', '            Freeze(_targets[j], balanceOf[_targets[j]]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function unfreezeAccounts(address[] _targets) onlyOwner whenNotPaused public returns (bool _success) {\n', '        require(_targets.length > 0);\n', '\n', '        for (uint j = 0; j < _targets.length; j++) {\n', '            require(_targets[j] != 0x0);\n', '            frozenAccount[_targets[j]] = false;\n', '            Unfreeze(_targets[j], balanceOf[_targets[j]]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function isFrozenAccount(address _target) public view returns (bool _is_frozen){\n', '        return frozenAccount[_target] == true;\n', '    }\n', '\n', '    function isContract(address _target) private view returns (bool _is_contract) {\n', '        uint length;\n', '        assembly {\n', '            length := extcodesize(_target)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool _success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool _success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(address _from, uint256 _amount) onlyOwner whenNotPaused public returns (bool _success) {\n', '        require(_amount > 0 && balanceOf[_from] >= _amount);\n', '        _amount = _amount.mul(1e6);\n', '        balanceOf[_from] = balanceOf[_from].sub(_amount);\n', '        totalSupply = totalSupply.sub(_amount);\n', '        Burn(_from, _amount);\n', '        return true;\n', '    }\n', '\n', '    function rain(address[] _addresses, uint256 _amount) onlyOwner whenNotPaused public returns (bool _success) {\n', '        require(_amount > 0 && _addresses.length > 0 && frozenAccount[msg.sender] == false);\n', '\n', '        _amount = _amount.mul(1e6);\n', '        uint256 totalAmount = _amount.mul(_addresses.length);\n', '        require(balanceOf[msg.sender] >= totalAmount);\n', '\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(totalAmount);\n', '\n', '        for (uint j = 0; j < _addresses.length; j++) {\n', '            require(_addresses[j] != 0x0 && frozenAccount[_addresses[j]] == false);\n', '\n', '            balanceOf[_addresses[j]] = balanceOf[_addresses[j]].add(_amount);\n', '            Transfer(msg.sender, _addresses[j], _amount);\n', '        }\n', '        Rain(msg.sender, totalAmount);\n', '        return true;\n', '    }\n', '\n', '    function collectTokens(address[] _addresses, uint[] _amounts) onlyOwner whenNotPaused public returns (bool _success) {\n', '        require(_addresses.length > 0 && _addresses.length == _amounts.length);\n', '\n', '        uint256 totalAmount = 0;\n', '\n', '        for (uint j = 0; j < _addresses.length; j++) {\n', '            require(_amounts[j] > 0 && _addresses[j] != 0x0 && frozenAccount[_addresses[j]] == false);\n', '            _amounts[j] = _amounts[j].mul(1e6);\n', '            require(balanceOf[_addresses[j]] >= _amounts[j]);\n', '            balanceOf[_addresses[j]] = balanceOf[_addresses[j]].sub(_amounts[j]);\n', '            totalAmount = totalAmount.add(_amounts[j]);\n', '            Transfer(_addresses[j], msg.sender, _amounts[j]);\n', '        }\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].add(totalAmount);\n', '        return true;\n', '    }\n', '\n', '    function() payable public {}\n', '}']
