['pragma solidity ^0.4.11;\n', '\n', '\n', 'interface IERC20 {\n', '  function totalSupply() constant returns (uint256 totalSupply);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '  function approve(address _spender, uint256 _value) returns (bool success);\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal  returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal  returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal  returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal  returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract CMBToken is IERC20 {\n', '\n', 'using SafeMath for uint256;\n', 'uint public constant _totalSupply = 6500000000000000;\n', '\n', 'string public constant symbol = "CMBT";\n', 'string public constant name = "CMB Token";\n', 'uint8 public constant decimals = 8;\n', '\n', '\n', 'mapping (address => uint256) balances;\n', 'mapping(address =>  mapping(address => uint256)) allowed;\n', '\n', ' function CMBToken() {\n', '\tbalances[msg.sender] = _totalSupply;\n', '\n', '}\n', '\n', 'function totalSupply() constant returns (uint256 totalSupply) {\n', '\treturn _totalSupply;\n', '}\n', '\n', 'function balanceOf(address _owner) constant returns (uint256 balance) {\n', '\treturn balances[_owner];\n', '}\n', '\n', 'function transfer(address _to, uint256 _value) returns (bool success) {\n', '\trequire(\n', '\t\tbalances[msg.sender] >= _value\n', '\t\t&& _value > 0\n', '\t);\n', '\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\tbalances [_to] = balances[_to].add(_value);\n', '\tTransfer(msg.sender, _to, _value);\n', '\treturn true;\n', '\n', '}\n', '\n', 'function transferFrom(address _from, address _to, uint256 _value) returns (bool success) { \n', '\trequire(\n', '\tallowed[_from][msg.sender] >= _value\n', '\t&& balances[_from] >= _value\n', '\t&& _value > 0\n', '\t);\n', '\tbalances[_from] = balances[msg.sender].sub(_value);\n', '\tbalances[_to] = balances[_to].add(_value);\n', '\tallowed[_from][msg.sender] = balances[msg.sender].sub(_value);\n', '\tTransfer(_from, _to, _value);\n', '\treturn true;\n', '\n', '}\n', '\n', 'function approve(address _spender, uint256 _value) returns (bool success) {\n', '\tallowed[msg.sender][_spender] = _value;\n', '\tApproval(msg.sender, _spender, _value);\n', '\treturn true;\t\n', '}\n', '\n', 'function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '\treturn allowed[_owner][_spender];\n', '\n', '}\n', '\n', 'event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', 'event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}']