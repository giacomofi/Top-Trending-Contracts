['pragma solidity ^0.4.20;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract PLATPriceOracle {\n', '\n', '  mapping (address => bool) admins;\n', '\n', '  // How much PLAT you get for 1 ETH, multiplied by 10^18\n', '  uint256 public ETHPrice = 60000000000000000000000;\n', '\n', '  event PriceChanged(uint256 newPrice);\n', '\n', '  constructor() public {\n', '    admins[msg.sender] = true;\n', '  }\n', '\n', '  function updatePrice(uint256 _newPrice) public {\n', '    require(_newPrice > 0);\n', '    require(admins[msg.sender] == true);\n', '    ETHPrice = _newPrice;\n', '    emit PriceChanged(_newPrice);\n', '  }\n', '\n', '  function setAdmin(address _newAdmin, bool _value) public {\n', '    require(admins[msg.sender] == true);\n', '    admins[_newAdmin] = _value;\n', '  }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract BitGuildToken {\n', '    // Public variables of the token\n', '    string public name = "BitGuild PLAT";\n', '    string public symbol = "PLAT";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 10000000000 * 10 ** uint256(decimals); // 10 billion tokens;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function BitGuildToken() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract BitGuildTopUp {\n', '  using SafeMath for uint256;\n', '\n', '  // Token contract\n', '  BitGuildToken public token;\n', '\n', '  // Oracle contract\n', '  PLATPriceOracle public oracle;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '  constructor(address _token, address _oracle, address _wallet) public {\n', '    require(_token != address(0));\n', '    require(_oracle != address(0));\n', '    require(_wallet != address(0));\n', '\n', '    token = BitGuildToken(_token);\n', '    oracle = PLATPriceOracle(_oracle);\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens() public payable {\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(msg.value, oracle.ETHPrice());\n', '\n', '    // Send tokens\n', '    token.transfer(msg.sender, tokens);\n', '    emit TokenPurchase(msg.sender, msg.value, tokens);\n', '\n', '    // Send funds\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // Returns you how much tokens do you get for the wei passed\n', '  function getTokenAmount(uint256 weiAmount, uint256 price) internal pure returns (uint256) {\n', '    uint256 tokens = weiAmount.mul(price).div(1 ether);\n', '    return tokens;\n', '  }\n', '\n', '  // Fallback function\n', '  function () external payable {\n', '    buyTokens();\n', '  }\n', '\n', '  // Retrieve locked tokens (for when this contract is not needed anymore)\n', '  function retrieveTokens() public {\n', '    require(msg.sender == wallet);\n', '    uint256 tokensLeft = token.balanceOf(this);\n', '    token.transfer(wallet, tokensLeft);\n', '  }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract PLATPriceOracle {\n', '\n', '  mapping (address => bool) admins;\n', '\n', '  // How much PLAT you get for 1 ETH, multiplied by 10^18\n', '  uint256 public ETHPrice = 60000000000000000000000;\n', '\n', '  event PriceChanged(uint256 newPrice);\n', '\n', '  constructor() public {\n', '    admins[msg.sender] = true;\n', '  }\n', '\n', '  function updatePrice(uint256 _newPrice) public {\n', '    require(_newPrice > 0);\n', '    require(admins[msg.sender] == true);\n', '    ETHPrice = _newPrice;\n', '    emit PriceChanged(_newPrice);\n', '  }\n', '\n', '  function setAdmin(address _newAdmin, bool _value) public {\n', '    require(admins[msg.sender] == true);\n', '    admins[_newAdmin] = _value;\n', '  }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract BitGuildToken {\n', '    // Public variables of the token\n', '    string public name = "BitGuild PLAT";\n', '    string public symbol = "PLAT";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 10000000000 * 10 ** uint256(decimals); // 10 billion tokens;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function BitGuildToken() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract BitGuildTopUp {\n', '  using SafeMath for uint256;\n', '\n', '  // Token contract\n', '  BitGuildToken public token;\n', '\n', '  // Oracle contract\n', '  PLATPriceOracle public oracle;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '  constructor(address _token, address _oracle, address _wallet) public {\n', '    require(_token != address(0));\n', '    require(_oracle != address(0));\n', '    require(_wallet != address(0));\n', '\n', '    token = BitGuildToken(_token);\n', '    oracle = PLATPriceOracle(_oracle);\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens() public payable {\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(msg.value, oracle.ETHPrice());\n', '\n', '    // Send tokens\n', '    token.transfer(msg.sender, tokens);\n', '    emit TokenPurchase(msg.sender, msg.value, tokens);\n', '\n', '    // Send funds\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // Returns you how much tokens do you get for the wei passed\n', '  function getTokenAmount(uint256 weiAmount, uint256 price) internal pure returns (uint256) {\n', '    uint256 tokens = weiAmount.mul(price).div(1 ether);\n', '    return tokens;\n', '  }\n', '\n', '  // Fallback function\n', '  function () external payable {\n', '    buyTokens();\n', '  }\n', '\n', '  // Retrieve locked tokens (for when this contract is not needed anymore)\n', '  function retrieveTokens() public {\n', '    require(msg.sender == wallet);\n', '    uint256 tokensLeft = token.balanceOf(this);\n', '    token.transfer(wallet, tokensLeft);\n', '  }\n', '}']
