['pragma solidity ^0.4.18;\n', '\n', 'contract PPNAirdrop {\n', '    /**\n', '    * @dev Air drop Public Variables\n', '    */\n', '    address                         public admin;\n', '    PolicyPalNetworkToken           public token;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    * @dev   Token Contract Modifier\n', '    * Check if only admin\n', '    *\n', '    */\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev   Token Contract Modifier\n', '    * Check if valid address\n', '    *\n', '    * @param _addr - The address to check\n', '    *\n', '    */\n', '    modifier validAddress(address _addr) {\n', '        require(_addr != address(0x0));\n', '        require(_addr != address(this));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev   Token Contract Modifier\n', '    * Check if the batch transfer amount is\n', '    * equal or more than balance\n', '    * (For single batch amount)\n', '    *\n', '    * @param _recipients - The recipients to send\n', '    * @param _amount - The amount to send\n', '    *\n', '    */\n', '    modifier validBalance(address[] _recipients, uint256 _amount) {\n', '        // Assert balance\n', '        uint256 balance = token.balanceOf(this);\n', '        require(balance > 0);\n', '        require(balance >= _recipients.length.mul(_amount));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev   Token Contract Modifier\n', '    * Check if the batch transfer amount is\n', '    * equal or more than balance\n', '    * (For multiple batch amounts)\n', '    *\n', '    * @param _recipients - The recipients to send\n', '    * @param _amounts - The amounts to send\n', '    *\n', '    */\n', '    modifier validBalanceMultiple(address[] _recipients, uint256[] _amounts) {\n', '        // Assert balance\n', '        uint256 balance = token.balanceOf(this);\n', '        require(balance > 0);\n', '\n', '        uint256 totalAmount;\n', '        for (uint256 i = 0 ; i < _recipients.length ; i++) {\n', '            totalAmount = totalAmount.add(_amounts[i]);\n', '        }\n', '        require(balance >= totalAmount);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Airdrop Contract Constructor\n', '    * @param _token - PPN Token address\n', '    * @param _adminAddr - Address of the Admin\n', '    */\n', '    function PPNAirdrop(\n', '        PolicyPalNetworkToken _token, \n', '        address _adminAddr\n', '    )\n', '        public\n', '        validAddress(_adminAddr)\n', '        validAddress(_token)\n', '    {\n', '        // Assign addresses\n', '        admin = _adminAddr;\n', '        token = _token;\n', '    }\n', '    \n', '    /**\n', '     * @dev TokenDrop Event\n', '     */\n', '    event TokenDrop(address _receiver, uint _amount);\n', '\n', '    /**\n', '     * @dev batch Air Drop by single amount\n', '     * @param _recipients - Address of the recipient\n', '     * @param _amount - Amount to transfer used in this batch\n', '     */\n', '    function batchSingleAmount(address[] _recipients, uint256 _amount) external\n', '        onlyAdmin\n', '        validBalance(_recipients, _amount)\n', '    {\n', '        // Loop through all recipients\n', '        for (uint256 i = 0 ; i < _recipients.length ; i++) {\n', '            address recipient = _recipients[i];\n', '\n', '            // Transfer amount\n', '            assert(token.transfer(recipient, _amount));\n', '\n', '            // TokenDrop event\n', '            TokenDrop(recipient, _amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev batch Air Drop by multiple amount\n', '     * @param _recipients - Address of the recipient\n', '     * @param _amounts - Amount to transfer used in this batch\n', '     */\n', '    function batchMultipleAmount(address[] _recipients, uint256[] _amounts) external\n', '        onlyAdmin\n', '        validBalanceMultiple(_recipients, _amounts)\n', '    {\n', '        // Loop through all recipients\n', '        for (uint256 i = 0 ; i < _recipients.length ; i++) {\n', '            address recipient = _recipients[i];\n', '            uint256 amount = _amounts[i];\n', '\n', '            // Transfer amount\n', '            assert(token.transfer(recipient, amount));\n', '\n', '            // TokenDrop event\n', '            TokenDrop(recipient, amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Air drop single amount\n', '     * @param _recipient - Address of the recipient\n', '     * @param _amount - Amount to drain\n', '     */\n', '    function airdropSingleAmount(address _recipient, uint256 _amount) external\n', '      onlyAdmin\n', '    {\n', '        assert(_amount <= token.balanceOf(this));\n', '        assert(token.transfer(_recipient, _amount));\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PolicyPalNetworkToken is StandardToken, BurnableToken, Ownable {\n', '    /**\n', '    * @dev Token Contract Constants\n', '    */\n', '    string    public constant name     = "PolicyPal Network Token";\n', '    string    public constant symbol   = "PAL";\n', '    uint8     public constant decimals = 18;\n', '\n', '    /**\n', '    * @dev Token Contract Public Variables\n', '    */\n', '    address public  tokenSaleContract;\n', '    bool    public  isTokenTransferable = false;\n', '\n', '\n', '    /**\n', '    * @dev   Token Contract Modifier\n', '    *\n', '    * Check if a transfer is allowed\n', '    * Transfers are restricted to token creator & owner(admin) during token sale duration\n', '    * Transfers after token sale is limited by `isTokenTransferable` toggle\n', '    *\n', '    */\n', '    modifier onlyWhenTransferAllowed() {\n', '        require(isTokenTransferable || msg.sender == owner || msg.sender == tokenSaleContract);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Token Contract Modifier\n', '     * @param _to - Address to check if valid\n', '     *\n', '     *  Check if an address is valid\n', '     *  A valid address is as follows,\n', '     *    1. Not zero address\n', '     *    2. Not token address\n', '     *\n', '     */\n', '    modifier isValidDestination(address _to) {\n', '        require(_to != address(0x0));\n', '        require(_to != address(this));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Enable Transfers (Only Owner)\n', '     */\n', '    function toggleTransferable(bool _toggle) external\n', '        onlyOwner\n', '    {\n', '        isTokenTransferable = _toggle;\n', '    }\n', '    \n', '\n', '    /**\n', '    * @dev Token Contract Constructor\n', '    * @param _adminAddr - Address of the Admin\n', '    */\n', '    function PolicyPalNetworkToken(\n', '        uint _tokenTotalAmount,\n', '        address _adminAddr\n', '    ) \n', '        public\n', '        isValidDestination(_adminAddr)\n', '    {\n', '        require(_tokenTotalAmount > 0);\n', '\n', '        totalSupply_ = _tokenTotalAmount;\n', '\n', '        // Mint all token\n', '        balances[msg.sender] = _tokenTotalAmount;\n', '        Transfer(address(0x0), msg.sender, _tokenTotalAmount);\n', '\n', '        // Assign token sale contract to creator\n', '        tokenSaleContract = msg.sender;\n', '\n', '        // Transfer contract ownership to admin\n', '        transferOwnership(_adminAddr);\n', '    }\n', '\n', '    /**\n', '    * @dev Token Contract transfer\n', '    * @param _to - Address to transfer to\n', '    * @param _value - Value to transfer\n', '    * @return bool - Result of transfer\n', '    * "Overloaded" Function of ERC20Basic\'s transfer\n', '    *\n', '    */\n', '    function transfer(address _to, uint256 _value) public\n', '        onlyWhenTransferAllowed\n', '        isValidDestination(_to)\n', '        returns (bool)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Token Contract transferFrom\n', '    * @param _from - Address to transfer from\n', '    * @param _to - Address to transfer to\n', '    * @param _value - Value to transfer\n', '    * @return bool - Result of transferFrom\n', '    *\n', '    * "Overloaded" Function of ERC20\'s transferFrom\n', '    * Added with modifiers,\n', '    *    1. onlyWhenTransferAllowed\n', '    *    2. isValidDestination\n', '    *\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '        onlyWhenTransferAllowed\n', '        isValidDestination(_to)\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Token Contract burn\n', '    * @param _value - Value to burn\n', '    * "Overloaded" Function of BurnableToken\'s burn\n', '    */\n', '    function burn(uint256 _value)\n', '        public\n', '    {\n', '        super.burn(_value);\n', '        Transfer(msg.sender, address(0x0), _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Token Contract Emergency Drain\n', '    * @param _token - Token to drain\n', '    * @param _amount - Amount to drain\n', '    */\n', '    function emergencyERC20Drain(ERC20 _token, uint256 _amount) public\n', '        onlyOwner\n', '    {\n', '        _token.transfer(owner, _amount);\n', '    }\n', '}']