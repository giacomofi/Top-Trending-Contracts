['pragma solidity ^0.4.16;\n', 'contract Token{\n', '  uint256 public totalSupply;\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns\n', '  (bool success);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '  function allowance(address _owner, address _spender) public constant returns\n', '  (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256\n', '  _value);\n', '  event Burn(address indexed from, uint256 value);\n', '  event Inflat(address indexed from, uint256 value);\n', '\n', '}\n', '\n', 'contract FeibeiContract is Token {\n', '\n', '\n', '  uint8 constant public decimals = 18;\n', '  string constant public name = "FeibeiContract";\n', '  string constant public symbol = "FB";\n', '  uint public totalSupply = 1000000000 * 10 ** uint256(decimals);\n', '  address contract_creator;\n', '\n', '\n', '  function FeibeiContract() public {\n', '\n', '    balances[msg.sender] = totalSupply; \n', '    contract_creator=msg.sender;\n', '    \n', '  }\n', '  \n', '  function inflat(uint256 _value) public returns(bool success){\n', '    require(msg.sender == contract_creator);\n', '    require(_value > 0);\n', '    totalSupply += _value;\n', '    balances[contract_creator] +=_value;\n', '    Inflat(contract_creator, _value);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '  \n', '    require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '    require(_to != 0x0);\n', '    balances[msg.sender] -= _value;\n', '    balances[_to] += _value;\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns\n', '  (bool success) {\n', '    require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '    balances[_to] += _value;\n', '    balances[_from] -= _value; \n', '    allowed[_from][msg.sender] -= _value;\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success)\n', '  {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  function burn(uint256 _value) public {\n', '    require(_value > 0);\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] -= _value;\n', '    totalSupply -=_value;\n', '    Burn(burner, _value);\n', '  }\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '}']
['pragma solidity ^0.4.16;\n', 'contract Token{\n', '  uint256 public totalSupply;\n', '\n', '  function balanceOf(address _owner) public constant returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns\n', '  (bool success);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '  function allowance(address _owner, address _spender) public constant returns\n', '  (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256\n', '  _value);\n', '  event Burn(address indexed from, uint256 value);\n', '  event Inflat(address indexed from, uint256 value);\n', '\n', '}\n', '\n', 'contract FeibeiContract is Token {\n', '\n', '\n', '  uint8 constant public decimals = 18;\n', '  string constant public name = "FeibeiContract";\n', '  string constant public symbol = "FB";\n', '  uint public totalSupply = 1000000000 * 10 ** uint256(decimals);\n', '  address contract_creator;\n', '\n', '\n', '  function FeibeiContract() public {\n', '\n', '    balances[msg.sender] = totalSupply; \n', '    contract_creator=msg.sender;\n', '    \n', '  }\n', '  \n', '  function inflat(uint256 _value) public returns(bool success){\n', '    require(msg.sender == contract_creator);\n', '    require(_value > 0);\n', '    totalSupply += _value;\n', '    balances[contract_creator] +=_value;\n', '    Inflat(contract_creator, _value);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '  \n', '    require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '    require(_to != 0x0);\n', '    balances[msg.sender] -= _value;\n', '    balances[_to] += _value;\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns\n', '  (bool success) {\n', '    require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '    balances[_to] += _value;\n', '    balances[_from] -= _value; \n', '    allowed[_from][msg.sender] -= _value;\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success)\n', '  {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  function burn(uint256 _value) public {\n', '    require(_value > 0);\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] -= _value;\n', '    totalSupply -=_value;\n', '    Burn(burner, _value);\n', '  }\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '}']
