['pragma solidity ^0.4.15;\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'contract IERC20Token {\n', "    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n", '    function name() public constant returns (string) {}\n', '    function symbol() public constant returns (string) {}\n', '    function decimals() public constant returns (uint8) {}\n', '    function totalSupply() public constant returns (uint) {}\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is IERC20Token {\n', '  using SafeMath for uint;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  mapping (address => uint) balances;\n', '  uint256 totalSupply_;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable\n', ' *\n', ' * @dev Standard ERC20 token\n', ' */\n', 'contract Burnable is StandardToken {\n', '  using SafeMath for uint;\n', '\n', '  /* This notifies clients about the amount burnt */\n', '  event Burn(address indexed from, uint value);\n', '\n', '  function burn(uint _value) public returns (bool success) {\n', '    require(_value > 0 && balances[msg.sender] >= _value);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(msg.sender, _value);\n', '    return true;\n', '  }\n', '\n', '  function burnFrom(address _from, uint _value) public returns (bool success) {\n', '    require(_from != 0x0 && _value > 0 && balances[_from] >= _value);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Burn(_from, _value);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '    require(_to != 0x0); //use burn\n', '\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '    require(_to != 0x0); //use burn\n', '\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', '/*\n', '    Utilities & Common Modifiers\n', '*/\n', 'contract Utils {\n', '    /**\n', '        constructor\n', '    */\n', '    function Utils() public {\n', '    }\n', '\n', '    // verifies that an amount is greater than zero\n', '    modifier greaterThanZero(uint _amount) {\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', "    // validates an address - currently only checks that it isn't null\n", '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '\n', '    function _validAddress(address _address) internal pure returns (bool) {\n', '      return  _address != 0x0;\n', '    }\n', '\n', '    // Overflow protected math functions\n', '\n', '    /**\n', '        @dev returns the sum of _x and _y, asserts if the calculation overflows\n', '\n', '        @param _x   value 1\n', '        @param _y   value 2\n', '\n', '        @return sum\n', '    */\n', '    function safeAdd(uint _x, uint _y) internal pure returns (uint) {\n', '        uint z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '\n', '    /**\n', '        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n', '\n', '        @param _x   minuend\n', '        @param _y   subtrahend\n', '\n', '        @return difference\n', '    */\n', '    function safeSub(uint _x, uint _y) internal pure returns (uint) {\n', '        assert(_x >= _y);\n', '        return _x - _y;\n', '    }\n', '\n', '    /**\n', '        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n', '\n', '        @param _x   factor 1\n', '        @param _y   factor 2\n', '\n', '        @return product\n', '    */\n', '    function safeMul(uint _x, uint _y) internal pure returns (uint) {\n', '        uint z = _x * _y;\n', '        assert(_x == 0 || z / _x == _y);\n', '        return z;\n', '    }\n', '}\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'contract IOwned {\n', "    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n", '    function owner() public constant returns (address) {}\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '}\n', '\n', '/*\n', '    Token Holder interface\n', '*/\n', 'contract ITokenHolder is IOwned {\n', '    function withdrawTokens(IERC20Token _token, address _to, uint _amount) public;\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/*\n', "    We consider every contract to be a 'token holder' since it's currently not possible\n", '    for a contract to deny receiving tokens.\n', '\n', "    The TokenHolder's contract sole purpose is to provide a safety mechanism that allows\n", '    the owner to send tokens that were sent to the contract by mistake back to their sender.\n', '*/\n', 'contract TokenHolder is ITokenHolder, Ownable, Utils {\n', '\n', '    // @dev constructor\n', '    function TokenHolder() public {\n', '    }\n', '\n', '\n', '    //  @dev withdraws tokens held by the contract and sends them to an account\n', '    //  can only be called by the owner\n', '    // @param _token   ERC20 token contract address\n', '    // @param _to      account to receive the new amount\n', '    // @param _amount  amount to withdraw\n', '    function withdrawTokens(IERC20Token _token, address _to, uint _amount) public\n', '    onlyOwner\n', '    validAddress(_to)\n', '    {\n', '        require(_to != address(this));\n', '        assert(_token.transfer(_to, _amount));\n', '    }\n', '}\n', '\n', '/*\n', '    Smart Token interface\n', '*/\n', 'contract ISmartToken is IOwned, IERC20Token {\n', '    function disableTransfers(bool _disable) public;\n', '    function issue(address _to, uint _amount) public;\n', '    function destroy(address _from, uint _amount) public;\n', '}\n', '\n', 'contract SmartToken is ISmartToken, Burnable, TokenHolder {\n', "    string public version = '0.3';\n", '\n', '    bool public transfersEnabled = true;    // true if transfer/transferFrom are enabled, false if not\n', '\n', '    // triggered when a smart token is deployed - the _token address is defined for forward compatibility, in case we want to trigger the event from a factory\n', '    event NewSmartToken(address _token);\n', '    // triggered when the total supply is increased\n', '    event Issuance(uint _amount);\n', '    // triggered when the total supply is decreased\n', '    event Destruction(uint _amount);\n', '\n', "    // allows execution only when transfers aren't disabled\n", '    modifier transfersAllowed {\n', '        assert(transfersEnabled);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev disables/enables transfers\n', '        can only be called by the contract owner\n', '\n', '        @param _disable    true to disable transfers, false to enable them\n', '    */\n', '    function disableTransfers(bool _disable) public onlyOwner {\n', '        transfersEnabled = !_disable;\n', '    }\n', '\n', '    /**\n', '        @dev increases the token supply and sends the new tokens to an account\n', '        can only be called by the contract owner\n', '\n', '        @param _to         account to receive the new amount\n', '        @param _amount     amount to increase the supply by\n', '    */\n', '    function issue(address _to, uint _amount)\n', '        public\n', '        onlyOwner\n', '        validAddress(_to)\n', '        notThis(_to)\n', '    {\n', '        totalSupply_ = safeAdd(totalSupply_, _amount);\n', '        balances[_to] = safeAdd(balances[_to], _amount);\n', '\n', '        Issuance(_amount);\n', '        Transfer(this, _to, _amount);\n', '    }\n', '\n', '    /**\n', '        @dev removes tokens from an account and decreases the token supply\n', '        can be called by the contract owner to destroy tokens from any account or by any holder to destroy tokens from his/her own account\n', '\n', '        @param _from       account to remove the amount from\n', '        @param _amount     amount to decrease the supply by\n', '    */\n', '    function destroy(address _from, uint _amount) public {\n', '        require(msg.sender == _from || msg.sender == owner); // validate input\n', '\n', '        balances[_from] = safeSub(balances[_from], _amount);\n', '        totalSupply_ = safeSub(totalSupply_, _amount);\n', '\n', '        Transfer(_from, this, _amount);\n', '        Destruction(_amount);\n', '    }\n', '\n', '    // ERC20 standard method overrides with some extra functionality\n', '\n', '    /**\n', '        @dev send coins\n', '        throws on any error rather then return a false flag to minimize user errors\n', '        in addition to the standard checks, the function throws if transfers are disabled\n', '\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', "        @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transfer(address _to, uint _value) public transfersAllowed returns (bool success) {\n', '        assert(super.transfer(_to, _value));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev an account/contract attempts to get the coins\n', '        throws on any error rather then return a false flag to minimize user errors\n', '        in addition to the standard checks, the function throws if transfers are disabled\n', '\n', '        @param _from    source address\n', '        @param _to      target address\n', '        @param _value   transfer amount\n', '\n', "        @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transferFrom(address _from, address _to, uint _value) public transfersAllowed returns (bool success) {\n', '        assert(super.transferFrom(_from, _to, _value));\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ContractReceiver {\n', '   function tokenFallback(address _from, uint _value, bytes _data) external;\n', '}\n', '\n', '/**\n', ' * @title FinTabToken\n', ' *\n', ' * @dev Burnable Ownable ERC223(and ERC20-compilant) token with support of\n', ' * Bancor SmartToken protocol\n', ' */\n', 'contract FinTabToken is SmartToken {\n', '\n', '  uint public constant INITIAL_SUPPLY = 3079387 * (10 ** 8);\n', '\n', '  uint public releaseTokensBlock; //Approximatly will be at 01.07.2018\n', '\n', '  mapping (address => bool) public teamAddresses;\n', '  mapping (address => bool) public tokenBurners;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\n', '\n', '  // Limit token transfer for  the team\n', '  modifier canTransfer(address _sender) {\n', '    require(block.number >= releaseTokensBlock || !teamAddresses[_sender]);\n', '    _;\n', '  }\n', '\n', '  modifier canBurnTokens(address _sender) {\n', '    require(tokenBurners[_sender] == true || owner == _sender);\n', '    _;\n', '  }\n', '\n', '  // Token construcor\n', '  function FinTabToken(uint _releaseBlock) public {\n', '    releaseTokensBlock = _releaseBlock;\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    NewSmartToken(this);\n', '  }\n', '\n', '  function name() public constant returns (string) { return "FinTab"; }\n', '  function symbol() public constant returns (string) { return "FNTB" ;}\n', '  function decimals() public constant returns (uint8) { return 8; }\n', '\n', '  function totalSupply() public constant returns (uint) {\n', '    return totalSupply_;\n', '  }\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    require(_owner != 0x0);\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  // Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '  function setTeamAddress(address addr, bool state) onlyOwner public {\n', '    require(addr != 0x0);\n', '    teamAddresses[addr] = state;\n', '  }\n', '\n', '  function setBurner(address addr, bool state) onlyOwner public {\n', '    require(addr != 0x0);\n', '    tokenBurners[addr] = state;\n', '  }\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) transfersAllowed canTransfer(msg.sender) public returns (bool success) {\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) transfersAllowed canTransfer(msg.sender) public returns (bool success) {\n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '  }\n', '\n', '  // Transfer on _from behalf\n', '  function transferFrom(address _from, address _to, uint _value) transfersAllowed canTransfer(_from) public returns (bool success) {\n', '    // Call Burnable.transferForm()\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  // Burn tokens\n', '  function burn(uint _value) canBurnTokens(msg.sender) public returns (bool success) {\n', '    return super.burn(_value);\n', '  }\n', '\n', '  // Burn tokens on _from behalf\n', '  function burnFrom(address _from, uint _value) onlyOwner  canBurnTokens(msg.sender) public returns (bool success) {\n', '    return super.burnFrom(_from, _value);\n', '  }\n', '\n', '\n', '  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '      }\n', '      return (length>0);\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private canTransfer(msg.sender) returns (bool success) {\n', '    require(balanceOf(msg.sender) >= _value);\n', '    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '    balances[_to] = safeAdd(balanceOf(_to), _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private canTransfer(msg.sender) returns (bool success) {\n', '    require(balanceOf(msg.sender) >= _value);\n', '    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '    balances[_to] = safeAdd(balanceOf(_to), _value);\n', '    ContractReceiver receiver = ContractReceiver(_to);\n', '    receiver.tokenFallback(msg.sender, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '}']