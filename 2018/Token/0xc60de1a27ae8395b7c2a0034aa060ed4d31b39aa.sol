['pragma solidity >=0.4.23;\n', '\n', '/**\n', ' * @author Dan Emmons at Loci.io\n', ' */  \n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable {\n', '\n', '  string public contactInformation;\n', '\n', '  /**\n', '    * @dev Allows the owner to set a string with their contact information.\n', '    * @param info The contact information to attach to the contract.\n', '    */\n', '  function setContactInformation(string info) onlyOwner public {\n', '    contactInformation = info;\n', '  }\n', '}\n', '\n', 'contract LOCIcredits is Ownable, Contactable {    \n', '    using SafeMath for uint256;    \n', '\n', '    StandardToken token; // LOCIcoin deployed contract\n', '    mapping (address => bool) internal allowedOverrideAddresses;\n', '\n', '    mapping (string => LOCIuser) users;    \n', '    string[] userKeys;\n', '    uint256 userCount;        \n', '\n', '    // convenience for accounting\n', '    event UserAdded( string id, uint256 time );\n', '\n', '    // core usage: increaseCredits, reduceCredits, buyCreditsAndSpend, buyCreditsAndSpendAndRecover\n', '    event CreditsAdjusted( string id, uint8 adjustment, uint256 value, uint8 reason, address register );    \n', '\n', '    // special usage: transferCreditsInternally (only required in the event of a user that created multiple accounts)\n', '    event CreditsTransferred( string id, uint256 value, uint8 reason, string beneficiary );\n', '\n', '    modifier onlyOwnerOrOverride() {\n', '        // owner or any addresses listed in the overrides\n', '        // can perform token transfers while inactive\n', '        require(msg.sender == owner || allowedOverrideAddresses[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    struct LOCIuser {        \n', '        uint256 credits;\n', '        bool registered;\n', '        address wallet;\n', '    }\n', '    \n', '    constructor( address _token, string _contactInformation ) public {\n', '        owner = msg.sender;\n', '        token = StandardToken(_token); // LOCIcoin address\n', '        contactInformation = _contactInformation;        \n', '    }    \n', '    \n', '    function increaseCredits( string _id, uint256 _value, uint8 _reason, address _register ) public onlyOwnerOrOverride returns(uint256) {\n', '                \n', '        LOCIuser storage user = users[_id];\n', '\n', '        if( !user.registered ) {\n', '            user.registered = true;\n', '            userKeys.push(_id);\n', '            userCount = userCount.add(1);\n', '            emit UserAdded(_id,now);\n', '        }\n', '\n', '        user.credits = user.credits.add(_value);        \n', '        require( token.transferFrom( _register, address(this), _value ) );\n', '        emit CreditsAdjusted(_id, 1, _value, _reason, _register);\n', '        return user.credits;\n', '    }\n', '\n', '    function reduceCredits( string _id, uint256 _value, uint8 _reason, address _register ) public onlyOwnerOrOverride returns(uint256) {\n', '             \n', '        LOCIuser storage user = users[_id];     \n', '        require( user.registered );\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        user.credits = user.credits.sub(_value);        \n', '        require( user.credits >= 0 );        \n', '        require( token.transfer( _register, _value ) );           \n', '        emit CreditsAdjusted(_id, 2, _value, _reason, _register);        \n', '        \n', '        return user.credits;\n', '    }        \n', '\n', '    function buyCreditsAndSpend( string _id, uint256 _value, uint8 _reason, address _register, uint256 _spend ) public onlyOwnerOrOverride returns(uint256) {\n', '        increaseCredits(_id, _value, _reason, _register);\n', '        return reduceCredits(_id, _spend, _reason, _register );        \n', '    }        \n', '\n', '    function buyCreditsAndSpendAndRecover(string _id, uint256 _value, uint8 _reason, address _register, uint256 _spend, address _recover ) public onlyOwnerOrOverride returns(uint256) {\n', '        buyCreditsAndSpend(_id, _value, _reason, _register, _spend);\n', '        return reduceCredits(_id, getCreditsFor(_id), _reason, _recover);\n', '    }    \n', '\n', '    function transferCreditsInternally( string _id, uint256 _value, uint8 _reason, string _beneficiary ) public onlyOwnerOrOverride returns(uint256) {        \n', '\n', '        LOCIuser storage user = users[_id];   \n', '        require( user.registered );\n', '\n', '        LOCIuser storage beneficiary = users[_beneficiary];\n', '        if( !beneficiary.registered ) {\n', '            beneficiary.registered = true;\n', '            userKeys.push(_beneficiary);\n', '            userCount = userCount.add(1);\n', '            emit UserAdded(_beneficiary,now);\n', '        }\n', '\n', '        require(_value <= user.credits);        \n', '        user.credits = user.credits.sub(_value);\n', '        require( user.credits >= 0 );\n', '        \n', '        beneficiary.credits = beneficiary.credits.add(_value);\n', '        require( beneficiary.credits >= _value );\n', '\n', '        emit CreditsAdjusted(_id, 2, _value, _reason, 0x0);\n', '        emit CreditsAdjusted(_beneficiary, 1, _value, _reason, 0x0);\n', '        emit CreditsTransferred(_id, _value, _reason, _beneficiary );\n', '        \n', '        return user.credits;\n', '    }   \n', '\n', '    function assignUserWallet( string _id, address _wallet ) public onlyOwnerOrOverride returns(uint256) {\n', '        LOCIuser storage user = users[_id];   \n', '        require( user.registered );\n', '        user.wallet = _wallet;\n', '        return user.credits;\n', '    }\n', '\n', '    function withdrawUserSpecifiedFunds( string _id, uint256 _value, uint8 _reason ) public returns(uint256) {\n', '        LOCIuser storage user = users[_id];           \n', '        require( user.registered, "user is not registered" );    \n', '        require( user.wallet == msg.sender, "user.wallet is not msg.sender" );\n', '        \n', '        user.credits = user.credits.sub(_value);\n', '        require( user.credits >= 0 );               \n', '        require( token.transfer( user.wallet, _value ), "transfer failed" );                   \n', '        emit CreditsAdjusted(_id, 2, _value, _reason, user.wallet );        \n', '        \n', '        return user.credits;\n', '    }\n', '\n', '    function getUserWallet( string _id ) public constant returns(address) {\n', '        return users[_id].wallet;\n', '    }\n', '\n', '    function getTotalSupply() public constant returns(uint256) {        \n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function getCreditsFor( string _id ) public constant returns(uint256) {\n', '        return users[_id].credits;\n', '    }\n', '\n', '    function getUserCount() public constant returns(uint256) {\n', '        return userCount;\n', '    }    \n', '\n', '    function getUserKey(uint256 _index) public constant returns(string) {\n', '        require(_index <= userKeys.length-1);\n', '        return userKeys[_index];\n', '    }\n', '\n', '    function getCreditsAtIndex(uint256 _index) public constant returns(uint256) {\n', '        return getCreditsFor(getUserKey(_index));\n', '    }\n', '\n', '    // non-core functionality \n', '    function ownerSetOverride(address _address, bool enable) external onlyOwner {\n', '        allowedOverrideAddresses[_address] = enable;\n', '    }\n', '\n', '    function isAllowedOverrideAddress(address _addr) external constant returns (bool) {\n', '        return allowedOverrideAddresses[_addr];\n', '    }\n', '\n', '    // enable recovery of ether sent to this contract\n', '    function ownerTransferWei(address _beneficiary, uint256 _value) external onlyOwner {\n', '        require(_beneficiary != 0x0);\n', '        require(_beneficiary != address(token));        \n', '\n', '        // if zero requested, send the entire amount, otherwise the amount requested\n', '        uint256 _amount = _value > 0 ? _value : address(this).balance;\n', '\n', '        _beneficiary.transfer(_amount);\n', '    }\n', '\n', '    // enable recovery of LOCIcoin sent to this contract\n', '    function ownerRecoverTokens(address _beneficiary) external onlyOwner {\n', '        require(_beneficiary != 0x0);            \n', '        require(_beneficiary != address(token));        \n', '\n', '        uint256 _tokensRemaining = token.balanceOf(address(this));\n', '        if (_tokensRemaining > 0) {\n', '            token.transfer(_beneficiary, _tokensRemaining);\n', '        }\n', '    }\n', '\n', '    // enable recovery of any other StandardToken sent to this contract\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return StandardToken(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['pragma solidity >=0.4.23;\n', '\n', '/**\n', ' * @author Dan Emmons at Loci.io\n', ' */  \n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable {\n', '\n', '  string public contactInformation;\n', '\n', '  /**\n', '    * @dev Allows the owner to set a string with their contact information.\n', '    * @param info The contact information to attach to the contract.\n', '    */\n', '  function setContactInformation(string info) onlyOwner public {\n', '    contactInformation = info;\n', '  }\n', '}\n', '\n', 'contract LOCIcredits is Ownable, Contactable {    \n', '    using SafeMath for uint256;    \n', '\n', '    StandardToken token; // LOCIcoin deployed contract\n', '    mapping (address => bool) internal allowedOverrideAddresses;\n', '\n', '    mapping (string => LOCIuser) users;    \n', '    string[] userKeys;\n', '    uint256 userCount;        \n', '\n', '    // convenience for accounting\n', '    event UserAdded( string id, uint256 time );\n', '\n', '    // core usage: increaseCredits, reduceCredits, buyCreditsAndSpend, buyCreditsAndSpendAndRecover\n', '    event CreditsAdjusted( string id, uint8 adjustment, uint256 value, uint8 reason, address register );    \n', '\n', '    // special usage: transferCreditsInternally (only required in the event of a user that created multiple accounts)\n', '    event CreditsTransferred( string id, uint256 value, uint8 reason, string beneficiary );\n', '\n', '    modifier onlyOwnerOrOverride() {\n', '        // owner or any addresses listed in the overrides\n', '        // can perform token transfers while inactive\n', '        require(msg.sender == owner || allowedOverrideAddresses[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    struct LOCIuser {        \n', '        uint256 credits;\n', '        bool registered;\n', '        address wallet;\n', '    }\n', '    \n', '    constructor( address _token, string _contactInformation ) public {\n', '        owner = msg.sender;\n', '        token = StandardToken(_token); // LOCIcoin address\n', '        contactInformation = _contactInformation;        \n', '    }    \n', '    \n', '    function increaseCredits( string _id, uint256 _value, uint8 _reason, address _register ) public onlyOwnerOrOverride returns(uint256) {\n', '                \n', '        LOCIuser storage user = users[_id];\n', '\n', '        if( !user.registered ) {\n', '            user.registered = true;\n', '            userKeys.push(_id);\n', '            userCount = userCount.add(1);\n', '            emit UserAdded(_id,now);\n', '        }\n', '\n', '        user.credits = user.credits.add(_value);        \n', '        require( token.transferFrom( _register, address(this), _value ) );\n', '        emit CreditsAdjusted(_id, 1, _value, _reason, _register);\n', '        return user.credits;\n', '    }\n', '\n', '    function reduceCredits( string _id, uint256 _value, uint8 _reason, address _register ) public onlyOwnerOrOverride returns(uint256) {\n', '             \n', '        LOCIuser storage user = users[_id];     \n', '        require( user.registered );\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        user.credits = user.credits.sub(_value);        \n', '        require( user.credits >= 0 );        \n', '        require( token.transfer( _register, _value ) );           \n', '        emit CreditsAdjusted(_id, 2, _value, _reason, _register);        \n', '        \n', '        return user.credits;\n', '    }        \n', '\n', '    function buyCreditsAndSpend( string _id, uint256 _value, uint8 _reason, address _register, uint256 _spend ) public onlyOwnerOrOverride returns(uint256) {\n', '        increaseCredits(_id, _value, _reason, _register);\n', '        return reduceCredits(_id, _spend, _reason, _register );        \n', '    }        \n', '\n', '    function buyCreditsAndSpendAndRecover(string _id, uint256 _value, uint8 _reason, address _register, uint256 _spend, address _recover ) public onlyOwnerOrOverride returns(uint256) {\n', '        buyCreditsAndSpend(_id, _value, _reason, _register, _spend);\n', '        return reduceCredits(_id, getCreditsFor(_id), _reason, _recover);\n', '    }    \n', '\n', '    function transferCreditsInternally( string _id, uint256 _value, uint8 _reason, string _beneficiary ) public onlyOwnerOrOverride returns(uint256) {        \n', '\n', '        LOCIuser storage user = users[_id];   \n', '        require( user.registered );\n', '\n', '        LOCIuser storage beneficiary = users[_beneficiary];\n', '        if( !beneficiary.registered ) {\n', '            beneficiary.registered = true;\n', '            userKeys.push(_beneficiary);\n', '            userCount = userCount.add(1);\n', '            emit UserAdded(_beneficiary,now);\n', '        }\n', '\n', '        require(_value <= user.credits);        \n', '        user.credits = user.credits.sub(_value);\n', '        require( user.credits >= 0 );\n', '        \n', '        beneficiary.credits = beneficiary.credits.add(_value);\n', '        require( beneficiary.credits >= _value );\n', '\n', '        emit CreditsAdjusted(_id, 2, _value, _reason, 0x0);\n', '        emit CreditsAdjusted(_beneficiary, 1, _value, _reason, 0x0);\n', '        emit CreditsTransferred(_id, _value, _reason, _beneficiary );\n', '        \n', '        return user.credits;\n', '    }   \n', '\n', '    function assignUserWallet( string _id, address _wallet ) public onlyOwnerOrOverride returns(uint256) {\n', '        LOCIuser storage user = users[_id];   \n', '        require( user.registered );\n', '        user.wallet = _wallet;\n', '        return user.credits;\n', '    }\n', '\n', '    function withdrawUserSpecifiedFunds( string _id, uint256 _value, uint8 _reason ) public returns(uint256) {\n', '        LOCIuser storage user = users[_id];           \n', '        require( user.registered, "user is not registered" );    \n', '        require( user.wallet == msg.sender, "user.wallet is not msg.sender" );\n', '        \n', '        user.credits = user.credits.sub(_value);\n', '        require( user.credits >= 0 );               \n', '        require( token.transfer( user.wallet, _value ), "transfer failed" );                   \n', '        emit CreditsAdjusted(_id, 2, _value, _reason, user.wallet );        \n', '        \n', '        return user.credits;\n', '    }\n', '\n', '    function getUserWallet( string _id ) public constant returns(address) {\n', '        return users[_id].wallet;\n', '    }\n', '\n', '    function getTotalSupply() public constant returns(uint256) {        \n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function getCreditsFor( string _id ) public constant returns(uint256) {\n', '        return users[_id].credits;\n', '    }\n', '\n', '    function getUserCount() public constant returns(uint256) {\n', '        return userCount;\n', '    }    \n', '\n', '    function getUserKey(uint256 _index) public constant returns(string) {\n', '        require(_index <= userKeys.length-1);\n', '        return userKeys[_index];\n', '    }\n', '\n', '    function getCreditsAtIndex(uint256 _index) public constant returns(uint256) {\n', '        return getCreditsFor(getUserKey(_index));\n', '    }\n', '\n', '    // non-core functionality \n', '    function ownerSetOverride(address _address, bool enable) external onlyOwner {\n', '        allowedOverrideAddresses[_address] = enable;\n', '    }\n', '\n', '    function isAllowedOverrideAddress(address _addr) external constant returns (bool) {\n', '        return allowedOverrideAddresses[_addr];\n', '    }\n', '\n', '    // enable recovery of ether sent to this contract\n', '    function ownerTransferWei(address _beneficiary, uint256 _value) external onlyOwner {\n', '        require(_beneficiary != 0x0);\n', '        require(_beneficiary != address(token));        \n', '\n', '        // if zero requested, send the entire amount, otherwise the amount requested\n', '        uint256 _amount = _value > 0 ? _value : address(this).balance;\n', '\n', '        _beneficiary.transfer(_amount);\n', '    }\n', '\n', '    // enable recovery of LOCIcoin sent to this contract\n', '    function ownerRecoverTokens(address _beneficiary) external onlyOwner {\n', '        require(_beneficiary != 0x0);            \n', '        require(_beneficiary != address(token));        \n', '\n', '        uint256 _tokensRemaining = token.balanceOf(address(this));\n', '        if (_tokensRemaining > 0) {\n', '            token.transfer(_beneficiary, _tokensRemaining);\n', '        }\n', '    }\n', '\n', '    // enable recovery of any other StandardToken sent to this contract\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return StandardToken(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
