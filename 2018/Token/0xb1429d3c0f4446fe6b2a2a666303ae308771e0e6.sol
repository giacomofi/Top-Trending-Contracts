['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BETTCoin {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    address public owner = msg.sender;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    string public constant name = "BETT";\n', '    string public constant symbol = "BETT";\n', '    uint public constant decimals = 8;\n', '    uint256 public totalSupply = 210000000e8;\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner,"only owner allow");\n', '        _;\n', '    }\n', '\n', '    // mitigates the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '\t    return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _amount) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '\n', '        require(_to != address(0),"to address error");\n', '        require(_amount <= balances[msg.sender],"from token not enough");\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _amount) public onlyPayloadSize(3 * 32) returns (bool success) {\n', '\n', '        require(_to != address(0),"to address error");\n', '        require(_amount <= balances[_from],"from token not enough");\n', '        require(_amount <= allowed[_from][msg.sender],"insufficient credit");\n', '        \n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function burn(uint256 _value) public onlyOwner {\n', '        require(_value <= balances[msg.sender],"token not enough");\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) public onlyOwner {\n', '        balances[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(address(0), owner, mintedAmount);\n', '        emit Transfer(owner, target, mintedAmount);\n', '    }\n', '}']