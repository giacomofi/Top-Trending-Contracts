['pragma solidity 0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// TokenVesting for &#39;Digitize Coin&#39; project based on:\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20/TokenVesting.sol\n', '//\n', '// Radek Ostrowski / http://startonchain.com / https://digitizecoin.com\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0);\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CutdownToken\n', ' * @dev Some ERC20 interface methods used in this contract\n', ' */\n', 'contract CutdownToken {\n', '  \tfunction balanceOf(address _who) public view returns (uint256);\n', '  \tfunction transfer(address _to, uint256 _value) public returns (bool);\n', '  \tfunction allowance(address _owner, address _spender) public view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period.\n', ' */\n', 'contract TokenVesting {\n', '  using SafeMath for uint256;\n', '\n', '  event Released(uint256 amount);\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  mapping (address => uint256) public released;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliffInDays duration in days of the cliff in which tokens will begin to vest\n', '   * @param _durationInDays duration in days of the period in which the tokens will vest\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliffInDays, uint256 _durationInDays) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliffInDays <= _durationInDays);\n', '\n', '    beneficiary = _beneficiary;\n', '    duration = _durationInDays * 1 days;\n', '    cliff = _start.add(_cliffInDays * 1 days);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function release(CutdownToken _token) public {\n', '    uint256 unreleased = releasableAmount(_token);\n', '    require(unreleased > 0);\n', '    released[_token] = released[_token].add(unreleased);\n', '    _token.transfer(beneficiary, unreleased);\n', '    emit Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(CutdownToken _token) public view returns (uint256) {\n', '    return vestedAmount(_token).sub(released[_token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param _token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(CutdownToken _token) public view returns (uint256) {\n', '    uint256 currentBalance = _token.balanceOf(address(this));\n', '    uint256 totalBalance = currentBalance.add(released[_token]);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration)) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}']