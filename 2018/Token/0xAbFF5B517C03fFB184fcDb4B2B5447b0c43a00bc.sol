['pragma solidity ^0.4.20;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '\trequire(a>=0);\n', '\trequire(b>=0);\t\t\n', '        c = a + b;\n', '\trequire(c >= a);\n', '\n', '    }\n', '    function safeSub(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '\trequire(a>=0);\n', '\trequire(b>=0);\t\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '   \n', '}\n', '\n', '\n', 'contract Buetcoin is SafeMath {\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals=18;\n', '    uint256 public totalSupply;\n', '    \n', '    event Transfer( address indexed from, address indexed to, uint256 value);\n', '\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol,\n', '\tuint8 decimal) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimal);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;      \n', '    }\n', '\n', '    /* Send coins */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '\trequire(_to!=0x0);\n', '\trequire(_value>0);\n', '        require(balanceOf[msg.sender] >= _value); \n', '        require(balanceOf[_to] + _value >= balanceOf[_to]); \n', '        uint256 previousBalances=balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[msg.sender] =safeSub(balanceOf[msg.sender], _value); \n', '        balanceOf[_to] =safeAdd(balanceOf[_to], _value); \n', '\temit Transfer(_from, _to, _value);\n', '\tassert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '        \n', '    }\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success){\n', '\n', '\t_transfer(msg.sender, _to, _value);\n', '\treturn true;\n', '\t}\n', '\n', '}']