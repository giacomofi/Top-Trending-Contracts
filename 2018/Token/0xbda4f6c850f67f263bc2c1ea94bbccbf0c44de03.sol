['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// &#39;Deciser&#39; token contract\n', '//\n', '// Deployed to : 0xBDa4f6C850F67F263BC2c1Ea94bbCCbF0C44De03\n', '// Symbol      : DEC\n', '// Name        : Deciser Token\n', '// Total supply: 10&#39;000&#39;000&#39;000 (total DEC coins, no decimals)\n', '// Decimals    : 6\n', '//\n', '// Enjoy.\n', '//\n', '// (c) Alin Vana with some inspiration from (c) Moritz Neto with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence. and (c) http://zeltsinger.com/2017/04/22/ico-simple-simple/\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address _tokenOwner) public constant returns (uint balance);\n', '    function allowance(address _tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed _tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract DeciserToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function DeciserToken() public {\n', '        symbol = "DEC";\n', '        name = "Deciser Token";\n', '        decimals = 6;\n', '        totalSupply = 10000000000000000;\n', '        if (msg.sender == owner) {\n', '          balances[owner] = totalSupply;\n', '          Transfer(address(0), owner, totalSupply);\n', '        }\n', '\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupply - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account _tokenOwner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _tokenOwner) public constant returns (uint balance) {\n', '        return balances[_tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to to account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', ' \n', '    function transfer(address _to, uint _tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _tokens);\n', '        balances[_to] = safeAdd(balances[_to], _tokens);\n', '        Transfer(msg.sender, _to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    function MintToOwner(uint _tokens) public onlyOwner returns (bool success) {\n', '        balances[owner] = safeAdd(balances[owner], _tokens);\n', '        Transfer (address (0), owner, _tokens);\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address _spender, uint _tokens) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _tokens;\n', '        Approval(msg.sender, _spender, _tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to to account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function ApproveAndtransfer(address _to, uint _tokens) public returns (bool success) {\n', '        allowed[msg.sender][_to] = _tokens;\n', '        Approval(msg.sender, _to, _tokens);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _tokens);\n', '        balances[_to] = safeAdd(balances[_to], _tokens);\n', '        Transfer(msg.sender, _to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address _tokenOwner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_tokenOwner][_spender];\n', '    }\n', '\n', '// ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint _tokens) public returns (bool success) {\n', '        balances[_from] = safeSub(balances[_from], _tokens);\n', '        allowed[_from][_to] = safeSub(allowed[_from][_to], _tokens);\n', '        balances[_to] = safeAdd(balances[_to], _tokens);\n', '        Transfer(_from, _to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Handle ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        if (msg.value !=0 ) {\n', '\n', '            if(!owner.send(msg.value)) {\n', '\n', '            revert();\n', '        }\n', '            \n', '        }\n', '        }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner token recall\n', '    // ------------------------------------------------------------------------\n', '    function OwnerRecall(address _FromRecall, uint _tokens) public onlyOwner returns (bool success) {\n', '        allowed[_FromRecall][owner] = _tokens;\n', '        Approval(_FromRecall, owner, _tokens);\n', '        balances[_FromRecall] = safeSub(balances[_FromRecall], _tokens);\n', '        balances[owner] = safeAdd(balances[owner], _tokens);\n', '        Transfer(_FromRecall, owner, _tokens);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'Deciser' token contract\n", '//\n', '// Deployed to : 0xBDa4f6C850F67F263BC2c1Ea94bbCCbF0C44De03\n', '// Symbol      : DEC\n', '// Name        : Deciser Token\n', "// Total supply: 10'000'000'000 (total DEC coins, no decimals)\n", '// Decimals    : 6\n', '//\n', '// Enjoy.\n', '//\n', '// (c) Alin Vana with some inspiration from (c) Moritz Neto with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence. and (c) http://zeltsinger.com/2017/04/22/ico-simple-simple/\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address _tokenOwner) public constant returns (uint balance);\n', '    function allowance(address _tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed _tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract DeciserToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function DeciserToken() public {\n', '        symbol = "DEC";\n', '        name = "Deciser Token";\n', '        decimals = 6;\n', '        totalSupply = 10000000000000000;\n', '        if (msg.sender == owner) {\n', '          balances[owner] = totalSupply;\n', '          Transfer(address(0), owner, totalSupply);\n', '        }\n', '\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupply - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account _tokenOwner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _tokenOwner) public constant returns (uint balance) {\n', '        return balances[_tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to to account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', ' \n', '    function transfer(address _to, uint _tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _tokens);\n', '        balances[_to] = safeAdd(balances[_to], _tokens);\n', '        Transfer(msg.sender, _to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    function MintToOwner(uint _tokens) public onlyOwner returns (bool success) {\n', '        balances[owner] = safeAdd(balances[owner], _tokens);\n', '        Transfer (address (0), owner, _tokens);\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address _spender, uint _tokens) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _tokens;\n', '        Approval(msg.sender, _spender, _tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to to account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function ApproveAndtransfer(address _to, uint _tokens) public returns (bool success) {\n', '        allowed[msg.sender][_to] = _tokens;\n', '        Approval(msg.sender, _to, _tokens);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _tokens);\n', '        balances[_to] = safeAdd(balances[_to], _tokens);\n', '        Transfer(msg.sender, _to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address _tokenOwner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_tokenOwner][_spender];\n', '    }\n', '\n', '// ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint _tokens) public returns (bool success) {\n', '        balances[_from] = safeSub(balances[_from], _tokens);\n', '        allowed[_from][_to] = safeSub(allowed[_from][_to], _tokens);\n', '        balances[_to] = safeAdd(balances[_to], _tokens);\n', '        Transfer(_from, _to, _tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Handle ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        if (msg.value !=0 ) {\n', '\n', '            if(!owner.send(msg.value)) {\n', '\n', '            revert();\n', '        }\n', '            \n', '        }\n', '        }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner token recall\n', '    // ------------------------------------------------------------------------\n', '    function OwnerRecall(address _FromRecall, uint _tokens) public onlyOwner returns (bool success) {\n', '        allowed[_FromRecall][owner] = _tokens;\n', '        Approval(_FromRecall, owner, _tokens);\n', '        balances[_FromRecall] = safeSub(balances[_FromRecall], _tokens);\n', '        balances[owner] = safeAdd(balances[owner], _tokens);\n', '        Transfer(_FromRecall, owner, _tokens);\n', '        return true;\n', '    }\n', '}']
