['pragma solidity ^0.4.21;\n', '\n', 'contract EIP20Interface {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract EIP20 is EIP20Interface {\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    \n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '\n', '    function EIP20(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', 'contract RGEToken is EIP20 {\n', '    \n', '    /* ERC20 */\n', '    string public name = &#39;Rouge&#39;;\n', '    string public symbol = &#39;RGE&#39;;\n', '    uint8 public decimals = 8;\n', '    \n', '    /* RGEToken */\n', '    address owner; \n', '    address public crowdsale;\n', '    uint public endTGE;\n', '    string public version = &#39;v0.2&#39;;\n', '    uint256 public totalSupply = 1000000000 * 10**uint(decimals);\n', '    uint256 public   reserveY1 =  300000000 * 10**uint(decimals);\n', '    uint256 public   reserveY2 =  200000000 * 10**uint(decimals);\n', '\n', '    modifier onlyBy(address _account) {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '    \n', '    constructor() EIP20 (totalSupply, name, decimals, symbol) public {\n', '        owner = msg.sender;\n', '        crowdsale = address(0);\n', '    }\n', '    \n', '    function startCrowdsaleY0(address _crowdsale) onlyBy(owner) public {\n', '        require(_crowdsale != address(0));\n', '        require(crowdsale == address(0));\n', '        crowdsale = _crowdsale;\n', '        balances[crowdsale] = totalSupply - reserveY1 - reserveY2;\n', '        emit Transfer(address(0), crowdsale, balances[crowdsale]);\n', '    }\n', '\n', '    function startCrowdsaleY1(address _crowdsale) onlyBy(owner) public {\n', '        require(_crowdsale != address(0));\n', '        require(crowdsale == address(0));\n', '        require(reserveY1 > 0);\n', '        crowdsale = _crowdsale;\n', '        balances[crowdsale] = reserveY1;\n', '        emit Transfer(address(0), crowdsale, reserveY1);\n', '        reserveY1 = 0;\n', '    }\n', '\n', '    function startCrowdsaleY2(address _crowdsale) onlyBy(owner) public {\n', '        require(_crowdsale != address(0));\n', '        require(crowdsale == address(0));\n', '        require(reserveY2 > 0);\n', '        crowdsale = _crowdsale;\n', '        balances[crowdsale] = reserveY2;\n', '        emit Transfer(address(0), crowdsale, reserveY2);\n', '        reserveY2 = 0;\n', '    }\n', '\n', '    // in practice later than end of TGE to let people withdraw\n', '    function endCrowdsale() onlyBy(owner) public {\n', '        require(crowdsale != address(0));\n', '        require(now > endTGE);\n', '        reserveY2 += balances[crowdsale];\n', '        emit Transfer(crowdsale, address(0), balances[crowdsale]);\n', '        balances[crowdsale] = 0;\n', '        crowdsale = address(0);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Transfer(msg.sender, address(0), _value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract EIP20Interface {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract EIP20 is EIP20Interface {\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    \n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '\n', '    function EIP20(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', 'contract RGEToken is EIP20 {\n', '    \n', '    /* ERC20 */\n', "    string public name = 'Rouge';\n", "    string public symbol = 'RGE';\n", '    uint8 public decimals = 8;\n', '    \n', '    /* RGEToken */\n', '    address owner; \n', '    address public crowdsale;\n', '    uint public endTGE;\n', "    string public version = 'v0.2';\n", '    uint256 public totalSupply = 1000000000 * 10**uint(decimals);\n', '    uint256 public   reserveY1 =  300000000 * 10**uint(decimals);\n', '    uint256 public   reserveY2 =  200000000 * 10**uint(decimals);\n', '\n', '    modifier onlyBy(address _account) {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '    \n', '    constructor() EIP20 (totalSupply, name, decimals, symbol) public {\n', '        owner = msg.sender;\n', '        crowdsale = address(0);\n', '    }\n', '    \n', '    function startCrowdsaleY0(address _crowdsale) onlyBy(owner) public {\n', '        require(_crowdsale != address(0));\n', '        require(crowdsale == address(0));\n', '        crowdsale = _crowdsale;\n', '        balances[crowdsale] = totalSupply - reserveY1 - reserveY2;\n', '        emit Transfer(address(0), crowdsale, balances[crowdsale]);\n', '    }\n', '\n', '    function startCrowdsaleY1(address _crowdsale) onlyBy(owner) public {\n', '        require(_crowdsale != address(0));\n', '        require(crowdsale == address(0));\n', '        require(reserveY1 > 0);\n', '        crowdsale = _crowdsale;\n', '        balances[crowdsale] = reserveY1;\n', '        emit Transfer(address(0), crowdsale, reserveY1);\n', '        reserveY1 = 0;\n', '    }\n', '\n', '    function startCrowdsaleY2(address _crowdsale) onlyBy(owner) public {\n', '        require(_crowdsale != address(0));\n', '        require(crowdsale == address(0));\n', '        require(reserveY2 > 0);\n', '        crowdsale = _crowdsale;\n', '        balances[crowdsale] = reserveY2;\n', '        emit Transfer(address(0), crowdsale, reserveY2);\n', '        reserveY2 = 0;\n', '    }\n', '\n', '    // in practice later than end of TGE to let people withdraw\n', '    function endCrowdsale() onlyBy(owner) public {\n', '        require(crowdsale != address(0));\n', '        require(now > endTGE);\n', '        reserveY2 += balances[crowdsale];\n', '        emit Transfer(crowdsale, address(0), balances[crowdsale]);\n', '        balances[crowdsale] = 0;\n', '        crowdsale = address(0);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Transfer(msg.sender, address(0), _value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '}']
