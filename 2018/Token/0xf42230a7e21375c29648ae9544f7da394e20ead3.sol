['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '//   event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  \n', '  // KYBER-NOTE! code changed to comply with ERC20 standard\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '  //event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  \n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    // KYBER-NOTE! code changed to comply with ERC20 standard\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    //balances[_from] = balances[_from].sub(_value); // this was removed\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract TCGC is StandardToken {\n', '    string public constant name = "TRILLION CLOUD GOLD";\n', '    string public constant symbol = "TCGC";\n', '    uint public constant decimals = 18;\n', '    uint public freezeTime = now + 1 years;\n', '    address public owner;\n', '    mapping(address=>bool) public freezeList;\n', '    \n', '    uint public freezeSupply;\n', '    uint public distributeSupply;\n', '    uint public distributed;\n', '    \n', '    uint public exchangeSupply;\n', '    uint public exchanged;\n', '    \n', '    uint public price ;\n', '    uint public mintTimes;\n', '    \n', '    event DoMint(uint256 n,uint256 number);\n', '    event Burn(address from, uint256 value);\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function TCGC(address _owner){\n', '        owner = _owner;\n', '        price =700; \n', '        totalSupply=17*(10**7)*10**decimals; \n', '        freezeSupply = totalSupply/2;\n', '        distributeSupply = totalSupply*2/5;\n', '        exchangeSupply = totalSupply/10;\n', '        balances[owner] = totalSupply; \n', '        Transfer(address(0x0), owner, totalSupply);\n', '    }\n', '    \n', '    modifier validUser(address addr){\n', '        require(!freezeList[addr]);\n', '        _;\n', '    }\n', '    \n', '    function addFreeze(address addr) onlyOwner returns(bool){\n', '        require(!freezeList[addr]);\n', '        freezeList[addr] =true;\n', '        return true;\n', '    }\n', '    \n', '    function unFreeze(address addr) onlyOwner returns(bool){\n', '        require(freezeList[addr]);\n', '        delete freezeList[addr];\n', '        return true;\n', '    }\n', '    \n', '    //setPrice\n', '    function setPrice(uint _price) onlyOwner{\n', '        require( _price > 0);\n', '        price= _price;\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) validUser(msg.sender) returns (bool){\n', '        if(msg.sender == owner && now < freezeTime){\n', '            require(balances[owner] >_value && balances[owner] - _value >= freezeSupply);\n', '            require (distributed + _value <= distributeSupply);\n', '            distributed = distributed.add(_value);\n', '            super.transfer(_to,_value);\n', '        }else{\n', '            super.transfer(_to,_value);\n', '        }\n', '    }\n', '    \n', '    //add num tokens which means that totalSupply will be added by num*decimals\n', '    function mint(uint256 num) onlyOwner{\n', '        balances[owner] = balances[owner].add(num);\n', '        totalSupply = totalSupply.add(num);\n', '        //add distributeSupply\n', '        distributeSupply = distributeSupply.add(num);\n', '        Transfer( address(0x0),msg.sender, num);\n', '        DoMint(mintTimes++,num);\n', '    }\n', '    \n', '    //burn tokens at will\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value); \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Transfer(msg.sender, address(0x0), _value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    //send eth to get tokens\n', '    function() payable {\n', '        uint tokens = price.mul(msg.value);\n', '        require(tokens  <= balances[owner] && exchanged+tokens <= exchangeSupply);\n', '        balances[owner] = balances[owner].sub(tokens);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        exchanged =  exchanged.add(tokens);\n', '        owner.transfer(msg.value);\n', '        Transfer(owner, msg.sender, tokens);\n', '    }\n', '}']