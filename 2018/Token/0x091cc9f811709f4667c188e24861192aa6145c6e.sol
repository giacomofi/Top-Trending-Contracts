['pragma solidity ^0.4.0;\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  \n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', 'contract MNY {\n', '    function mine(address token, uint amount) public;\n', '}\n', '\n', 'contract mnyminer {\n', '    \n', '    address mny = 0xD2354AcF1a2f06D69D8BC2e2048AaBD404445DF6;\n', '    address futx = 0x8b7d07b6ffB9364e97B89cEA8b84F94249bE459F;\n', '    address futr = 0xc83355eF25A104938275B46cffD94bF9917D0691;\n', '\n', '    function futrMiner() public payable {\n', '        require(futr.call.value(msg.value)());\n', '        uint256 mined = ERC20(futr).balanceOf(address(this));\n', '        ERC20(futr).approve(mny, mined);\n', '        MNY(mny).mine(futr, mined);\n', '        uint256 amount = ERC20(mny).balanceOf(address(this));\n', '        ERC20(mny).transfer(msg.sender, amount);\n', '    }\n', '    \n', '    \n', '    function futxMiner() public payable {\n', '        require(futx.call.value(msg.value)());\n', '        uint256 mined = ERC20(futx).balanceOf(address(this));\n', '        ERC20(futx).approve(mny, mined);\n', '        MNY(mny).mine(futx, mined);\n', '        uint256 amount = ERC20(mny).balanceOf(address(this));\n', '        ERC20(mny).transfer(msg.sender, amount);\n', '    }\n', '}']
['pragma solidity ^0.4.0;\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  \n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', 'contract MNY {\n', '    function mine(address token, uint amount) public;\n', '}\n', '\n', 'contract mnyminer {\n', '    \n', '    address mny = 0xD2354AcF1a2f06D69D8BC2e2048AaBD404445DF6;\n', '    address futx = 0x8b7d07b6ffB9364e97B89cEA8b84F94249bE459F;\n', '    address futr = 0xc83355eF25A104938275B46cffD94bF9917D0691;\n', '\n', '    function futrMiner() public payable {\n', '        require(futr.call.value(msg.value)());\n', '        uint256 mined = ERC20(futr).balanceOf(address(this));\n', '        ERC20(futr).approve(mny, mined);\n', '        MNY(mny).mine(futr, mined);\n', '        uint256 amount = ERC20(mny).balanceOf(address(this));\n', '        ERC20(mny).transfer(msg.sender, amount);\n', '    }\n', '    \n', '    \n', '    function futxMiner() public payable {\n', '        require(futx.call.value(msg.value)());\n', '        uint256 mined = ERC20(futx).balanceOf(address(this));\n', '        ERC20(futx).approve(mny, mined);\n', '        MNY(mny).mine(futx, mined);\n', '        uint256 amount = ERC20(mny).balanceOf(address(this));\n', '        ERC20(mny).transfer(msg.sender, amount);\n', '    }\n', '}']
