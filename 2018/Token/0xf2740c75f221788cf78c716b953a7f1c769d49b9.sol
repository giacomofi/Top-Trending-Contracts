['pragma solidity ^0.4.24;\n', '\n', '//Slightly modified SafeMath library - includes a min function\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function min(uint a, uint b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', '*This is the basic wrapped Ether contract. \n', '*All money deposited is transformed into ERC20 tokens at the rate of 1 wei = 1 token\n', '*/\n', 'contract Wrapped_Ether {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /*Variables*/\n', '\n', '    //ERC20 fields\n', '    string public name = "Wrapped Ether";\n', '    uint public total_supply;\n', '    mapping(address => uint) internal balances;\n', '    mapping(address => mapping (address => uint)) internal allowed;\n', '\n', '    /*Events*/\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event StateChanged(bool _success, string _message);\n', '\n', '    /*Functions*/\n', '    /**\n', '    *@dev This function creates tokens equal in value to the amount sent to the contract\n', '    */\n', '    function createToken() public payable {\n', '        require(msg.value > 0);\n', '        balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '        total_supply = total_supply.add(msg.value);\n', '    }\n', '\n', '    /**\n', '    *@dev This function &#39;unwraps&#39; an _amount of Ether in the sender&#39;s balance by transferring \n', '    *Ether to them\n', '    *@param _value The amount of the token to unwrap\n', '    */\n', '    function withdraw(uint _value) public {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        total_supply = total_supply.sub(_value);\n', '        msg.sender.transfer(_value);\n', '    }\n', '\n', '    /**\n', '    *@param _owner is the owner address used to look up the balance\n', '    *@return Returns the balance associated with the passed in _owner\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint bal) { \n', '        return balances[_owner]; \n', '    }\n', '\n', '    /**\n', '    *@dev Allows for a transfer of tokens to _to\n', '    *@param _to The address to send tokens to\n', '    *@param _amount The amount of tokens to send\n', '    */\n', '    function transfer(address _to, uint _amount) public returns (bool) {\n', '        if (balances[msg.sender] >= _amount\n', '        && _amount > 0\n', '        && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender] - _amount;\n', '            balances[_to] = balances[_to] + _amount;\n', '            emit Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '    *@dev Allows an address with sufficient spending allowance to send tokens on the behalf of _from\n', '    *@param _from The address to send tokens from\n', '    *@param _to The address to send tokens to\n', '    *@param _amount The amount of tokens to send\n', '    */\n', '    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n', '        if (balances[_from] >= _amount\n', '        && allowed[_from][msg.sender] >= _amount\n', '        && _amount > 0\n', '        && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] = balances[_from] - _amount;\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender] - _amount;\n', '            balances[_to] = balances[_to] + _amount;\n', '            emit Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '    *@dev This function approves a _spender an _amount of tokens to use\n', '    *@param _spender address\n', '    *@param _amount amount the spender is being approved for\n', '    *@return true if spender appproved successfully\n', '    */\n', '    function approve(address _spender, uint _amount) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *@param _owner address\n', '    *@param _spender address\n', '    *@return Returns the remaining allowance of tokens granted to the _spender from the _owner\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint) {\n', '       return allowed[_owner][_spender]; }\n', '\n', '    /**\n', '    *@dev Getter for the total_supply of wrapped ether\n', '    *@return total supply\n', '    */\n', '    function totalSupply() public constant returns (uint) {\n', '       return total_supply;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '//Slightly modified SafeMath library - includes a min function\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function min(uint a, uint b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', '*This is the basic wrapped Ether contract. \n', '*All money deposited is transformed into ERC20 tokens at the rate of 1 wei = 1 token\n', '*/\n', 'contract Wrapped_Ether {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /*Variables*/\n', '\n', '    //ERC20 fields\n', '    string public name = "Wrapped Ether";\n', '    uint public total_supply;\n', '    mapping(address => uint) internal balances;\n', '    mapping(address => mapping (address => uint)) internal allowed;\n', '\n', '    /*Events*/\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event StateChanged(bool _success, string _message);\n', '\n', '    /*Functions*/\n', '    /**\n', '    *@dev This function creates tokens equal in value to the amount sent to the contract\n', '    */\n', '    function createToken() public payable {\n', '        require(msg.value > 0);\n', '        balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '        total_supply = total_supply.add(msg.value);\n', '    }\n', '\n', '    /**\n', "    *@dev This function 'unwraps' an _amount of Ether in the sender's balance by transferring \n", '    *Ether to them\n', '    *@param _value The amount of the token to unwrap\n', '    */\n', '    function withdraw(uint _value) public {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        total_supply = total_supply.sub(_value);\n', '        msg.sender.transfer(_value);\n', '    }\n', '\n', '    /**\n', '    *@param _owner is the owner address used to look up the balance\n', '    *@return Returns the balance associated with the passed in _owner\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint bal) { \n', '        return balances[_owner]; \n', '    }\n', '\n', '    /**\n', '    *@dev Allows for a transfer of tokens to _to\n', '    *@param _to The address to send tokens to\n', '    *@param _amount The amount of tokens to send\n', '    */\n', '    function transfer(address _to, uint _amount) public returns (bool) {\n', '        if (balances[msg.sender] >= _amount\n', '        && _amount > 0\n', '        && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender] - _amount;\n', '            balances[_to] = balances[_to] + _amount;\n', '            emit Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '    *@dev Allows an address with sufficient spending allowance to send tokens on the behalf of _from\n', '    *@param _from The address to send tokens from\n', '    *@param _to The address to send tokens to\n', '    *@param _amount The amount of tokens to send\n', '    */\n', '    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n', '        if (balances[_from] >= _amount\n', '        && allowed[_from][msg.sender] >= _amount\n', '        && _amount > 0\n', '        && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] = balances[_from] - _amount;\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender] - _amount;\n', '            balances[_to] = balances[_to] + _amount;\n', '            emit Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '    *@dev This function approves a _spender an _amount of tokens to use\n', '    *@param _spender address\n', '    *@param _amount amount the spender is being approved for\n', '    *@return true if spender appproved successfully\n', '    */\n', '    function approve(address _spender, uint _amount) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *@param _owner address\n', '    *@param _spender address\n', '    *@return Returns the remaining allowance of tokens granted to the _spender from the _owner\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint) {\n', '       return allowed[_owner][_spender]; }\n', '\n', '    /**\n', '    *@dev Getter for the total_supply of wrapped ether\n', '    *@return total supply\n', '    */\n', '    function totalSupply() public constant returns (uint) {\n', '       return total_supply;\n', '    }\n', '}']
