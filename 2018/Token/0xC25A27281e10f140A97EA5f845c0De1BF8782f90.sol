['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    Revoked();\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '\n', 'contract SimplePreTGE is Ownable {\n', '\n', '  bool public allocationsLocked;\n', '\n', '  struct Contribution {\n', '    bool hasVested;\n', '    uint256 weiContributed;\n', '  }\n', '  mapping (address => Contribution)  public contributions;\n', '\n', '  function disableAllocationModificationsForEver() external onlyOwner returns(bool) {\n', '    allocationsLocked = true;\n', '  }\n', '\n', '  function bulkReserveTokensForAddresses(address[] addrs, uint256[] weiContributions, bool[] _vestingDecisions) onlyOwner external returns(bool) {\n', '    require(!allocationsLocked);\n', '    require((addrs.length == weiContributions.length) && (addrs.length == _vestingDecisions.length));\n', '    for (uint i=0; i<addrs.length; i++) {\n', '      contributions[addrs[i]].weiContributed = weiContributions[i];\n', '      contributions[addrs[i]].hasVested = _vestingDecisions[i];\n', '    }\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract SimpleTGE is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // start and end timestamps (both inclusive) when sale is open\n', '  uint256 public publicTGEStartBlockTimeStamp;\n', '\n', '  uint256 public publicTGEEndBlockTimeStamp;\n', '\n', '  // address where funds are collected\n', '  address public fundsWallet;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // sale cap in wei\n', '  uint256 public totalCapInWei;\n', '\n', '  // individual cap in wei\n', '  uint256 public individualCapInWei;\n', '\n', '  // how long the TRS subscription is open after the TGE.\n', '  uint256 public TRSOffset = 5 days;\n', '\n', '  mapping (address => bool) public whitelist;\n', '\n', '  address[] public contributors;\n', '  struct Contribution {\n', '    bool hasVested;\n', '    uint256 weiContributed;\n', '  }\n', '\n', '  mapping (address => Contribution)  public contributions;\n', '\n', '  modifier whilePublicTGEIsActive() {\n', '    require(block.timestamp >= publicTGEStartBlockTimeStamp && block.timestamp <= publicTGEEndBlockTimeStamp);\n', '    _;\n', '  }\n', '\n', '  modifier isWhitelisted() {\n', '    require(whitelist[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function blacklistAddresses(address[] addrs) external onlyOwner returns(bool) {\n', '    require(addrs.length <= 100);\n', '    for (uint i = 0; i < addrs.length; i++) {\n', '      require(addrs[i] != address(0));\n', '      whitelist[addrs[i]] = false;\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function whitelistAddresses(address[] addrs) external onlyOwner returns(bool) {\n', '    require(addrs.length <= 100);\n', '    for (uint i = 0; i < addrs.length; i++) {\n', '      require(addrs[i] != address(0));\n', '      whitelist[addrs[i]] = true;\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the address specified by owner.\n', '   */\n', '  function reclaimEther(address _beneficiary) external onlyOwner {\n', '    _beneficiary.transfer(this.balance);\n', '  }\n', '\n', '  function SimpleTGE (\n', '    address _fundsWallet,\n', '    uint256 _publicTGEStartBlockTimeStamp,\n', '    uint256 _publicTGEEndBlockTimeStamp,\n', '    uint256 _individualCapInWei,\n', '    uint256 _totalCapInWei\n', '  ) public\n', '  {\n', '    require(_publicTGEStartBlockTimeStamp >= block.timestamp);\n', '    require(_publicTGEEndBlockTimeStamp > _publicTGEStartBlockTimeStamp);\n', '    require(_fundsWallet != address(0));\n', '    require(_individualCapInWei > 0);\n', '    require(_individualCapInWei <= _totalCapInWei);\n', '    require(_totalCapInWei > 0);\n', '\n', '    fundsWallet = _fundsWallet;\n', '    publicTGEStartBlockTimeStamp = _publicTGEStartBlockTimeStamp;\n', '    publicTGEEndBlockTimeStamp = _publicTGEEndBlockTimeStamp;\n', '    individualCapInWei = _individualCapInWei;\n', '    totalCapInWei = _totalCapInWei;\n', '  }\n', '\n', '  // allows changing the individual cap.\n', '  function changeIndividualCapInWei(uint256 _individualCapInWei) onlyOwner external returns(bool) {\n', '      require(_individualCapInWei > 0);\n', '      require(_individualCapInWei < totalCapInWei);\n', '      individualCapInWei = _individualCapInWei;\n', '      return true;\n', '  }\n', '\n', '  // low level token purchase function\n', '  function contribute(bool _vestingDecision) internal {\n', '    // validations\n', '    require(msg.sender != address(0));\n', '    require(msg.value != 0);\n', '    require(weiRaised.add(msg.value) <= totalCapInWei);\n', '    require(contributions[msg.sender].weiContributed.add(msg.value) <= individualCapInWei);\n', '    // if we have not received any WEI from this address until now, then we add this address to contributors list.\n', '    if (contributions[msg.sender].weiContributed == 0) {\n', '      contributors.push(msg.sender);\n', '    }\n', '    contributions[msg.sender].weiContributed = contributions[msg.sender].weiContributed.add(msg.value);\n', '    weiRaised = weiRaised.add(msg.value);\n', '    contributions[msg.sender].hasVested = _vestingDecision;\n', '    fundsWallet.transfer(msg.value);\n', '  }\n', '\n', '  function contributeAndVest() external whilePublicTGEIsActive isWhitelisted payable {\n', '    contribute(true);\n', '  }\n', '\n', '  function contributeWithoutVesting() public whilePublicTGEIsActive isWhitelisted payable {\n', '    contribute(false);\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    contributeWithoutVesting();\n', '  }\n', '\n', '  // Vesting logic\n', '  // The following cases are checked for _beneficiary&#39;s actions:\n', '  function vest(bool _vestingDecision) external isWhitelisted returns(bool) {\n', '    bool existingDecision = contributions[msg.sender].hasVested;\n', '    require(existingDecision != _vestingDecision);\n', '    require(block.timestamp >= publicTGEStartBlockTimeStamp);\n', '    require(contributions[msg.sender].weiContributed > 0);\n', '    // Ensure vesting cannot be done once TRS starts\n', '    if (block.timestamp > publicTGEEndBlockTimeStamp) {\n', '      require(block.timestamp.sub(publicTGEEndBlockTimeStamp) <= TRSOffset);\n', '    }\n', '    contributions[msg.sender].hasVested = _vestingDecision;\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract LendroidSupportToken is MintableToken, PausableToken {\n', '\n', '  string public constant name = "Lendroid Support Token";\n', '  string public constant symbol = "LST";\n', '  uint256 public constant decimals = 18;\n', '  uint256 public constant MAX_SUPPLY = 12000000000 * (10 ** uint256(decimals));// 12 billion tokens, 18 decimal places\n', '\n', '  /**\n', '   * @dev Constructor that pauses tradability of tokens.\n', '   */\n', '  function LendroidSupportToken() public {\n', '    paused = true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev totalSupply is set via the minting process\n', '   */\n', '\n', '  function mint(address to, uint256 amount) onlyOwner public returns (bool) {\n', '    require(totalSupply_ + amount <= MAX_SUPPLY);\n', '    return super.mint(to, amount);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SimpleLSTDistribution\n', ' * @dev SimpleLSTDistribution contract provides interface for the contributor to withdraw their allocations / initiate the vesting contract\n', ' */\n', 'contract SimpleLSTDistribution is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  SimplePreTGE public SimplePreTGEContract;\n', '  SimpleTGE public SimpleTGEContract;\n', '  LendroidSupportToken public token;\n', '  uint256 public LSTRatePerWEI = 48000;\n', '  //vesting related params\n', '  // bonus multiplied to every vesting contributor&#39;s allocation\n', '  uint256 public vestingBonusMultiplier;\n', '  uint256 public vestingBonusMultiplierPrecision = 1000000;\n', '  uint256 public vestingDuration;\n', '  uint256 public vestingStartTime;\n', '\n', '  struct allocation {\n', '    bool shouldVest;\n', '    uint256 weiContributed;\n', '    uint256 LSTAllocated;\n', '    bool hasWithdrawn;\n', '  }\n', '  // maps all allocations claimed by contributors\n', '  mapping (address => allocation)  public allocations;\n', '\n', '  // map of address to token vesting contract\n', '  mapping (address => TokenVesting) public vesting;\n', '\n', '  /**\n', '   * event for token transfer logging\n', '   * @param beneficiary who is receiving the tokens\n', '   * @param tokens amount of tokens given to the beneficiary\n', '   */\n', '  event LogLSTsWithdrawn(address beneficiary, uint256 tokens);\n', '\n', '  /**\n', '   * event for time vested token transfer logging\n', '   * @param beneficiary who is receiving the time vested tokens\n', '   * @param tokens amount of tokens that will be vested to the beneficiary\n', '   * @param start unix timestamp at which the tokens will start vesting\n', '   * @param cliff duration in seconds after start time at which vesting will start\n', '   * @param duration total duration in seconds in which the tokens will be vested\n', '   */\n', '  event LogTimeVestingLSTsWithdrawn(address beneficiary, uint256 tokens, uint256 start, uint256 cliff, uint256 duration);\n', '\n', '  function SimpleLSTDistribution(\n', '      address _SimplePreTGEAddress,\n', '      address _SimpleTGEAddress,\n', '      uint256 _vestingBonusMultiplier,\n', '      uint256 _vestingDuration,\n', '      uint256 _vestingStartTime,\n', '      address _LSTAddress\n', '    ) public {\n', '\n', '    require(_SimplePreTGEAddress != address(0));\n', '    require(_SimpleTGEAddress != address(0));\n', '    require(_vestingBonusMultiplier >= 1000000);\n', '    require(_vestingBonusMultiplier <= 10000000);\n', '    require(_vestingDuration > 0);\n', '    require(_vestingStartTime > block.timestamp);\n', '\n', '    token = LendroidSupportToken(_LSTAddress);\n', '    // token = new LendroidSupportToken();\n', '\n', '    SimplePreTGEContract = SimplePreTGE(_SimplePreTGEAddress);\n', '    SimpleTGEContract = SimpleTGE(_SimpleTGEAddress);\n', '    vestingBonusMultiplier = _vestingBonusMultiplier;\n', '    vestingDuration = _vestingDuration;\n', '    vestingStartTime = _vestingStartTime;\n', '  }\n', '\n', '  // member function to mint tokens to a beneficiary\n', '  function mintTokens(address beneficiary, uint256 tokens) public onlyOwner {\n', '    require(beneficiary != 0x0);\n', '    require(tokens > 0);\n', '    require(token.mint(beneficiary, tokens));\n', '    LogLSTsWithdrawn(beneficiary, tokens);\n', '  }\n', '\n', '  function withdraw() external {\n', '    require(!allocations[msg.sender].hasWithdrawn);\n', '    // make sure simpleTGE is over and the TRS subscription has ended\n', '    require(block.timestamp > SimpleTGEContract.publicTGEEndBlockTimeStamp().add(SimpleTGEContract.TRSOffset()));\n', '    // allocations should be locked in the pre-TGE\n', '    require(SimplePreTGEContract.allocationsLocked());\n', '    // should have participated in the TGE or the pre-TGE\n', '    bool _preTGEHasVested;\n', '    uint256 _preTGEWeiContributed;\n', '    bool _publicTGEHasVested;\n', '    uint256 _publicTGEWeiContributed;\n', '    (_publicTGEHasVested, _publicTGEWeiContributed) = SimpleTGEContract.contributions(msg.sender);\n', '    (_preTGEHasVested, _preTGEWeiContributed) = SimplePreTGEContract.contributions(msg.sender);\n', '    uint256 _totalWeiContribution = _preTGEWeiContributed.add(_publicTGEWeiContributed);\n', '    require(_totalWeiContribution > 0);\n', '    // the same contributor could have contributed in the pre-tge and the tge, so we add the contributions.\n', '    bool _shouldVest = _preTGEHasVested || _publicTGEHasVested;\n', '    allocations[msg.sender].hasWithdrawn = true;\n', '    allocations[msg.sender].shouldVest = _shouldVest;\n', '    allocations[msg.sender].weiContributed = _totalWeiContribution;\n', '    uint256 _lstAllocated;\n', '    if (!_shouldVest) {\n', '      _lstAllocated = LSTRatePerWEI.mul(_totalWeiContribution);\n', '      allocations[msg.sender].LSTAllocated = _lstAllocated;\n', '      require(token.mint(msg.sender, _lstAllocated));\n', '      LogLSTsWithdrawn(msg.sender, _lstAllocated);\n', '    }\n', '    else {\n', '      _lstAllocated = LSTRatePerWEI.mul(_totalWeiContribution).mul(vestingBonusMultiplier).div(vestingBonusMultiplierPrecision);\n', '      allocations[msg.sender].LSTAllocated = _lstAllocated;\n', '      uint256 _withdrawNow = _lstAllocated.div(10);\n', '      uint256 _vestedPortion = _lstAllocated.sub(_withdrawNow);\n', '      vesting[msg.sender] = new TokenVesting(msg.sender, vestingStartTime, 0, vestingDuration, false);\n', '      require(token.mint(msg.sender, _withdrawNow));\n', '      LogLSTsWithdrawn(msg.sender, _withdrawNow);\n', '      require(token.mint(address(vesting[msg.sender]), _vestedPortion));\n', '      LogTimeVestingLSTsWithdrawn(address(vesting[msg.sender]), _vestedPortion, vestingStartTime, 0, vestingDuration);\n', '    }\n', '  }\n', '\n', '  // member function that can be called to release vested tokens periodically\n', '  function releaseVestedTokens(address beneficiary) public {\n', '    require(beneficiary != 0x0);\n', '\n', '    TokenVesting tokenVesting = vesting[beneficiary];\n', '    tokenVesting.release(token);\n', '  }\n', '\n', '  // unpauseToken token for transfers\n', '  function unpauseToken() public onlyOwner {\n', '    token.unpause();\n', '  }\n', '\n', '}']