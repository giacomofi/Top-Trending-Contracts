['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', 'contract owned {\n', '\n', '\n', '\t    address public owner;\n', '\n', '\n', '\t    function owned() payable public {\n', '\t        owner = msg.sender;\n', '\t    }\n', '\t    \n', '\t    modifier onlyOwner {\n', '\t        require(owner == msg.sender);\n', '\t        _;\n', '\t    }\n', '\n', '\n', '\t    function changeOwner(address _owner) onlyOwner public {\n', '\t        owner = _owner;\n', '\t    }\n', '\t}\n', 'contract Crowdsale is owned {\n', '\t    \n', '\t    uint256 public totalSupply;\n', '\t    mapping (address => uint256) public balanceOf;\n', '\n', '\n', '\t    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '\t    function Crowdsale() payable owned() public {\n', '\t        totalSupply = 10000000000;\n', '\t        balanceOf[this] = 1000000000;\n', '\t        balanceOf[owner] = totalSupply - balanceOf[this];\n', '\t        Transfer(this, owner, balanceOf[owner]);\n', '\t    }\n', '\n', '\n', '\n', '\n', '\t    function () payable public {\n', '\t        require(balanceOf[this] > 0);\n', '\t        uint256 tokensPerOneEther = 10000;\n', '\t        uint256 tokens = tokensPerOneEther * msg.value / 1000000000000000000;\n', '\t        if (tokens > balanceOf[this]) {\n', '\t            tokens = balanceOf[this];\n', '\t            uint valueWei = tokens * 1000000000000000000 / tokensPerOneEther;\n', '\t            msg.sender.transfer(msg.value - valueWei);\n', '\t        }\n', '\t        require(tokens > 0);\n', '\t        balanceOf[msg.sender] += tokens;\n', '\t        balanceOf[this] -= tokens;\n', '\t        Transfer(this, msg.sender, tokens);\n', '\t    }\n', '\t}\n', 'contract MyToken is Crowdsale {\n', '\t    \n', '\t    string  public standard    = &#39;Token 0.1&#39;;\n', '\t    string  public name        = &#39;MARIO Fans Token&#39;;\n', '\t    string  public symbol      = "MARIO";\n', '\t    uint8   public decimals    = 0;\n', '\n', '\n', '\t    function MyToken() payable Crowdsale() public {}\n', '\n', '\n', '\t    function transfer(address _to, uint256 _value) public {\n', '\t        require(balanceOf[msg.sender] >= _value);\n', '\t        balanceOf[msg.sender] -= _value;\n', '\t        balanceOf[_to] += _value;\n', '\t        Transfer(msg.sender, _to, _value);\n', '\t    }\n', '\t}\n', 'contract MyCrowdsale is MyToken {\n', '\n', '\n', '\t    function MyCrowdsale() payable MyToken() public {}\n', '\t    \n', '\t    function withdraw() public onlyOwner {\n', '\t        owner.transfer(this.balance);\n', '\t    }\n', '\t    \n', '\t    function killMe() public onlyOwner {\n', '\t        selfdestruct(owner);\n', '\t    }\n', '\t}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', 'contract owned {\n', '\n', '\n', '\t    address public owner;\n', '\n', '\n', '\t    function owned() payable public {\n', '\t        owner = msg.sender;\n', '\t    }\n', '\t    \n', '\t    modifier onlyOwner {\n', '\t        require(owner == msg.sender);\n', '\t        _;\n', '\t    }\n', '\n', '\n', '\t    function changeOwner(address _owner) onlyOwner public {\n', '\t        owner = _owner;\n', '\t    }\n', '\t}\n', 'contract Crowdsale is owned {\n', '\t    \n', '\t    uint256 public totalSupply;\n', '\t    mapping (address => uint256) public balanceOf;\n', '\n', '\n', '\t    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '\t    function Crowdsale() payable owned() public {\n', '\t        totalSupply = 10000000000;\n', '\t        balanceOf[this] = 1000000000;\n', '\t        balanceOf[owner] = totalSupply - balanceOf[this];\n', '\t        Transfer(this, owner, balanceOf[owner]);\n', '\t    }\n', '\n', '\n', '\n', '\n', '\t    function () payable public {\n', '\t        require(balanceOf[this] > 0);\n', '\t        uint256 tokensPerOneEther = 10000;\n', '\t        uint256 tokens = tokensPerOneEther * msg.value / 1000000000000000000;\n', '\t        if (tokens > balanceOf[this]) {\n', '\t            tokens = balanceOf[this];\n', '\t            uint valueWei = tokens * 1000000000000000000 / tokensPerOneEther;\n', '\t            msg.sender.transfer(msg.value - valueWei);\n', '\t        }\n', '\t        require(tokens > 0);\n', '\t        balanceOf[msg.sender] += tokens;\n', '\t        balanceOf[this] -= tokens;\n', '\t        Transfer(this, msg.sender, tokens);\n', '\t    }\n', '\t}\n', 'contract MyToken is Crowdsale {\n', '\t    \n', "\t    string  public standard    = 'Token 0.1';\n", "\t    string  public name        = 'MARIO Fans Token';\n", '\t    string  public symbol      = "MARIO";\n', '\t    uint8   public decimals    = 0;\n', '\n', '\n', '\t    function MyToken() payable Crowdsale() public {}\n', '\n', '\n', '\t    function transfer(address _to, uint256 _value) public {\n', '\t        require(balanceOf[msg.sender] >= _value);\n', '\t        balanceOf[msg.sender] -= _value;\n', '\t        balanceOf[_to] += _value;\n', '\t        Transfer(msg.sender, _to, _value);\n', '\t    }\n', '\t}\n', 'contract MyCrowdsale is MyToken {\n', '\n', '\n', '\t    function MyCrowdsale() payable MyToken() public {}\n', '\t    \n', '\t    function withdraw() public onlyOwner {\n', '\t        owner.transfer(this.balance);\n', '\t    }\n', '\t    \n', '\t    function killMe() public onlyOwner {\n', '\t        selfdestruct(owner);\n', '\t    }\n', '\t}']
