['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public isOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function totalSupply() public constant returns (uint256 supply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] = balances[_to].add(_value);\n', '            balances[_from] = balances[_from].sub(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\t/**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n', '        balances[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowed[_from][msg.sender]);    // Check allowance\n', '        balances[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowed[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Token is StandardToken, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', "    string public version = '1.0';\n", '    uint256 public totalCoin;\n', '    uint8 public decimals;\n', '    uint256 public min;\n', '    uint256 public exchangeRate;\n', '    \n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event TokenNameChanged(string indexed previousName, string indexed newName);\n', '    event TokenSymbolChanged(string indexed previousSymbol, string indexed newSymbol);\n', '    event ExhangeRateChanged(uint256 indexed previousRate, uint8 indexed newRate);\n', '\tevent FrozenFunds(address target, bool frozen);\n', '\n', '    function ERC20Token() public {\n', '        decimals        = 18;\n', '        totalCoin       = 20000000000;                       // Total Supply of Coin\n', '        totalSupply     = totalCoin * 10**uint(decimals); // Total Supply of Coin\n', "        balances[owner] = totalSupply;                    // Total Supply sent to Owner's Address\n", '        exchangeRate    = 12500000;                            // 100 Coins per ETH   (changable)\n', '        min        = 10000000000000000;\n', '        symbol          = "ICS";                       // Your Ticker Symbol  (changable)\n', '        name            = "iConsort Token";             // Your Coin Name      (changable)\n', '    }\n', '\n', '    function changeTokenName(string newName) public isOwner returns (bool success) {\n', '        TokenNameChanged(name, newName);\n', '        name = newName;\n', '        return true;\n', '    }\n', '\n', '    function changeTokenSymbol(string newSymbol) public isOwner returns (bool success) {\n', '        TokenSymbolChanged(symbol, newSymbol);\n', '        symbol = newSymbol;\n', '        return true;\n', '    }\n', '\n', '    function changeExhangeRate(uint8 newRate) public isOwner returns (bool success) {\n', '        ExhangeRateChanged(exchangeRate, newRate);\n', '        exchangeRate = newRate;\n', '        return true;\n', '    }\n', '\tfunction freezeAccount(address target, bool freeze) isOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function () public payable {\n', '        fundTokens();\n', '    }\n', '\n', '    function fundTokens() public payable {\n', '        require(msg.value >= min);\n', '\t\trequire(!frozenAccount[msg.sender]);                     // Check if sender is frozen\n', '        uint256 tokens = msg.value.mul(exchangeRate);\n', '        require(balances[owner].sub(tokens) > 0);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        balances[owner] = balances[owner].sub(tokens);\n', '        Transfer(msg.sender, owner, msg.value);\n', '        forwardFunds();\n', '    }\n', '\n', '    function forwardFunds() internal {\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function approveAndCall(\n', '        address _spender,\n', '        uint256 _value,\n', '        bytes _extraData\n', '    ) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        if(!_spender.call(\n', '            bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))),\n', '            msg.sender,\n', '            _value,\n', '            this,\n', '            _extraData\n', '        )) { revert(); }\n', '        return true;\n', '    }\n', '\n', '}']