['pragma solidity ^0.4.21;\n', '\n', '\n', '/*\n', '\n', 'BASIC ERC20 Crowdsale ICO ERC20 Token\n', '\n', 'Create this Token contract AFTER you already have the Sale contract created.\n', '\n', '   Token(address sale_address)   // creates token and links the Sale contract\n', '\n', '@author Hunter Long, Jun Kawasaki\n', '@repo https://github.com/hunterlong/ethereum-ico-contract\n', '\n', 'Thank you.\n', '\n', '*/\n', '\n', '\n', 'contract TelomereCoin {\n', '    uint256 public totalSupply;\n', '    bool public allowTransfer;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is TelomereCoin {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require(allowTransfer);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', 'contract Token is StandardToken {\n', '\n', '    string public name = "Telomere Coin";\n', '    uint8 public decimals = 0;\n', '    string public symbol = "TXY";\n', '    string public version = &#39;TXY 1.0&#39;;\n', '    address public mintableAddress;\n', '\n', '    function Token(address sale_address) {\n', '        balances[msg.sender] = 0;\n', '        totalSupply = 0;\n', '        name = name;\n', '        decimals = decimals;\n', '        symbol = symbol;\n', '        mintableAddress = sale_address;\n', '        allowTransfer = true;\n', '        createTokens();\n', '    }\n', '\n', '    // creates all tokens 5 million\n', '    // this address will hold all tokens\n', '    // all community contrubutions coins will be taken from this address\n', '    function createTokens() internal {\n', '        uint256 total = 116000000;\n', '        balances[this] = total;\n', '        totalSupply = total;\n', '    }\n', '\n', '    function changeTransfer(bool allowed) external {\n', '        require(msg.sender == mintableAddress);\n', '        allowTransfer = allowed;\n', '    }\n', '\n', '    function mintToken(address to, uint256 amount) external returns (bool success) {\n', '        require(msg.sender == mintableAddress);\n', '        require(balances[this] >= amount);\n', '        balances[this] -= amount;\n', '        balances[to] += amount;\n', '        Transfer(this, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/*\n', '\n', 'BASIC ERC20 Crowdsale ICO ERC20 Token\n', '\n', 'Create this Token contract AFTER you already have the Sale contract created.\n', '\n', '   Token(address sale_address)   // creates token and links the Sale contract\n', '\n', '@author Hunter Long, Jun Kawasaki\n', '@repo https://github.com/hunterlong/ethereum-ico-contract\n', '\n', 'Thank you.\n', '\n', '*/\n', '\n', '\n', 'contract TelomereCoin {\n', '    uint256 public totalSupply;\n', '    bool public allowTransfer;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is TelomereCoin {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require(allowTransfer);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', 'contract Token is StandardToken {\n', '\n', '    string public name = "Telomere Coin";\n', '    uint8 public decimals = 0;\n', '    string public symbol = "TXY";\n', "    string public version = 'TXY 1.0';\n", '    address public mintableAddress;\n', '\n', '    function Token(address sale_address) {\n', '        balances[msg.sender] = 0;\n', '        totalSupply = 0;\n', '        name = name;\n', '        decimals = decimals;\n', '        symbol = symbol;\n', '        mintableAddress = sale_address;\n', '        allowTransfer = true;\n', '        createTokens();\n', '    }\n', '\n', '    // creates all tokens 5 million\n', '    // this address will hold all tokens\n', '    // all community contrubutions coins will be taken from this address\n', '    function createTokens() internal {\n', '        uint256 total = 116000000;\n', '        balances[this] = total;\n', '        totalSupply = total;\n', '    }\n', '\n', '    function changeTransfer(bool allowed) external {\n', '        require(msg.sender == mintableAddress);\n', '        allowTransfer = allowed;\n', '    }\n', '\n', '    function mintToken(address to, uint256 amount) external returns (bool success) {\n', '        require(msg.sender == mintableAddress);\n', '        require(balances[this] >= amount);\n', '        balances[this] -= amount;\n', '        balances[to] += amount;\n', '        Transfer(this, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '}']
