['pragma solidity 0.4.24;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public returns (bool success) {\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Stopped is Owned {\n', '\n', '    bool public stopped = true;\n', '\n', '    modifier noStopped {\n', '        require(!stopped);\n', '        _;\n', '    }\n', '\n', '    function start() onlyOwner public {\n', '      stopped = false;\n', '    }\n', '\n', '    function stop() onlyOwner public {\n', '      stopped = true;\n', '    }\n', '\n', '}\n', '\n', 'contract MathTCT {\n', '\n', '    function add(uint256 x, uint256 y) pure internal returns(uint256 z) {\n', '      assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) pure internal returns(uint256 z) {\n', '      assert((z = x - y) <= x);\n', '    }\n', '}\n', '\n', 'contract TokenERC20 {\n', '\n', '    function totalSupply() view public returns (uint256 supply);\n', '    function balanceOf(address who) view public returns (uint256 value);\n', '    function allowance(address owner, address spender) view public returns (uint256 _allowance);\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', 'contract TCT is Owned, Stopped, MathTCT, TokenERC20 {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event FrozenFunds(address indexed target, bool frozen);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor(string _name, string _symbol) public {\n', '        totalSupply = 200000000 * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function totalSupply() view public returns (uint256 supply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address who) view public returns (uint256 value) {\n', '        return balanceOf[who];\n', '    }\n', '\n', '    function allowance(address owner, address spender) view public returns (uint256 _allowance) {\n', '        return allowance[owner][spender];\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require (_to != 0x0);\n', '        require (balanceOf[_from] >= _value);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        balanceOf[_from] = sub(balanceOf[_from], _value);\n', '        balanceOf[_to] = add(balanceOf[_to], _value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) noStopped public returns(bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) noStopped public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] = sub(allowance[_from][msg.sender], _value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) noStopped public returns (bool success) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!frozenAccount[_spender]);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint256 _addedValue) noStopped public returns (bool success) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!frozenAccount[_spender]);\n', '        allowance[msg.sender][_spender] = add(allowance[msg.sender][_spender], _addedValue);\n', '        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) noStopped public returns (bool success) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!frozenAccount[_spender]);\n', '        uint256 oldValue = allowance[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowance[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowance[msg.sender][_spender] = sub(oldValue, _subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) noStopped onlyOwner public returns (bool success) {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) noStopped onlyOwner public returns (bool success) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = sub(balanceOf[msg.sender], _value);\n', '        totalSupply = sub(totalSupply, _value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public returns (bool success) {\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Stopped is Owned {\n', '\n', '    bool public stopped = true;\n', '\n', '    modifier noStopped {\n', '        require(!stopped);\n', '        _;\n', '    }\n', '\n', '    function start() onlyOwner public {\n', '      stopped = false;\n', '    }\n', '\n', '    function stop() onlyOwner public {\n', '      stopped = true;\n', '    }\n', '\n', '}\n', '\n', 'contract MathTCT {\n', '\n', '    function add(uint256 x, uint256 y) pure internal returns(uint256 z) {\n', '      assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) pure internal returns(uint256 z) {\n', '      assert((z = x - y) <= x);\n', '    }\n', '}\n', '\n', 'contract TokenERC20 {\n', '\n', '    function totalSupply() view public returns (uint256 supply);\n', '    function balanceOf(address who) view public returns (uint256 value);\n', '    function allowance(address owner, address spender) view public returns (uint256 _allowance);\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', 'contract TCT is Owned, Stopped, MathTCT, TokenERC20 {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event FrozenFunds(address indexed target, bool frozen);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    constructor(string _name, string _symbol) public {\n', '        totalSupply = 200000000 * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function totalSupply() view public returns (uint256 supply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address who) view public returns (uint256 value) {\n', '        return balanceOf[who];\n', '    }\n', '\n', '    function allowance(address owner, address spender) view public returns (uint256 _allowance) {\n', '        return allowance[owner][spender];\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require (_to != 0x0);\n', '        require (balanceOf[_from] >= _value);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        balanceOf[_from] = sub(balanceOf[_from], _value);\n', '        balanceOf[_to] = add(balanceOf[_to], _value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) noStopped public returns(bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) noStopped public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] = sub(allowance[_from][msg.sender], _value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) noStopped public returns (bool success) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!frozenAccount[_spender]);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint256 _addedValue) noStopped public returns (bool success) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!frozenAccount[_spender]);\n', '        allowance[msg.sender][_spender] = add(allowance[msg.sender][_spender], _addedValue);\n', '        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) noStopped public returns (bool success) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!frozenAccount[_spender]);\n', '        uint256 oldValue = allowance[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowance[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowance[msg.sender][_spender] = sub(oldValue, _subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) noStopped onlyOwner public returns (bool success) {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) noStopped onlyOwner public returns (bool success) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] = sub(balanceOf[msg.sender], _value);\n', '        totalSupply = sub(totalSupply, _value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '}']
