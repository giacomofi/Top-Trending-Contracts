['pragma solidity 0.4.13;\n', '\n', 'contract ERC20Interface {\n', '\n', '    function totalSupply() public constant returns (uint);\n', '\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '}\n', '\n', 'contract ERC20Lookup {\n', '    address public owner;\n', '\n', '    function ERC20Lookup() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function lookup(address[] addressesToCheck, address owner, address spender, bool includeAccountBalance, bool includeAllowance) \n', '        public\n', '        constant\n', '        returns(uint[], uint[], uint accountBalance)\n', '    {\n', '\n', '        uint[] memory balances = new uint[](addressesToCheck.length);\n', '        uint[] memory allowances;\n', '\n', '        // maybe less gas\n', '        if (includeAllowance) {\n', '            allowances = new uint[](addressesToCheck.length);\n', '        }\n', '        \n', '        for (uint i = 0; i < addressesToCheck.length; i++) {\n', '            ERC20Interface erc20 = ERC20Interface(addressesToCheck[i]);\n', '\n', '            balances[i] = erc20.balanceOf(owner);\n', '            \n', '            // cache this in app; save gas, do more in one call\n', '            if (includeAllowance) {\n', '                allowances[i] = erc20.allowance(owner, spender);\n', '            }\n', '        }\n', '\n', '        if (includeAccountBalance) {\n', '            accountBalance = owner.balance;\n', '        }\n', '\n', '        return (balances, allowances, accountBalance);\n', '    }\n', '\n', '    function suicide() {\n', '        require(msg.sender == owner);\n', '\n', '        selfdestruct(msg.sender);\n', '    }\n', '}']