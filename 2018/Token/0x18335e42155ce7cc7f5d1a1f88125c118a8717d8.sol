['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/interfaces/ContractManagerInterface.sol\n', '\n', '/**\n', ' * @title Contract Manager Interface\n', ' * @author Bram Hoven\n', ' * @notice Interface for communicating with the contract manager\n', ' */\n', 'interface ContractManagerInterface {\n', '  /**\n', '   * @notice Triggered when contract is added\n', '   * @param _address Address of the new contract\n', '   * @param _contractName Name of the new contract\n', '   */\n', '  event ContractAdded(address indexed _address, string _contractName);\n', '\n', '  /**\n', '   * @notice Triggered when contract is removed\n', '   * @param _contractName Name of the contract that is removed\n', '   */\n', '  event ContractRemoved(string _contractName);\n', '\n', '  /**\n', '   * @notice Triggered when contract is updated\n', '   * @param _oldAddress Address where the contract used to be\n', '   * @param _newAddress Address where the new contract is deployed\n', '   * @param _contractName Name of the contract that has been updated\n', '   */\n', '  event ContractUpdated(address indexed _oldAddress, address indexed _newAddress, string _contractName);\n', '\n', '  /**\n', '   * @notice Triggered when authorization status changed\n', '   * @param _address Address who will gain or lose authorization to _contractName\n', '   * @param _authorized Boolean whether or not the address is authorized\n', '   * @param _contractName Name of the contract\n', '   */\n', '  event AuthorizationChanged(address indexed _address, bool _authorized, string _contractName);\n', '\n', '  /**\n', '   * @notice Check whether the accessor is authorized to access that contract\n', '   * @param _contractName Name of the contract that is being accessed\n', '   * @param _accessor Address who wants to access that contract\n', '   */\n', '  function authorize(string _contractName, address _accessor) external view returns (bool);\n', '\n', '  /**\n', '   * @notice Add a new contract to the manager\n', '   * @param _contractName Name of the new contract\n', '   * @param _address Address of the new contract\n', '   */\n', '  function addContract(string _contractName, address _address) external;\n', '\n', '  /**\n', '   * @notice Get a contract by its name\n', '   * @param _contractName Name of the contract\n', '   */\n', '  function getContract(string _contractName) external view returns (address _contractAddress);\n', '\n', '  /**\n', '   * @notice Remove an existing contract\n', '   * @param _contractName Name of the contract that will be removed\n', '   */\n', '  function removeContract(string _contractName) external;\n', '\n', '  /**\n', '   * @notice Update an existing contract (changing the address)\n', '   * @param _contractName Name of the existing contract\n', '   * @param _newAddress Address where the new contract is deployed\n', '   */\n', '  function updateContract(string _contractName, address _newAddress) external;\n', '\n', '  /**\n', '   * @notice Change whether an address is authorized to use a specific contract or not\n', '   * @param _contractName Name of the contract to which the accessor will gain authorization or not\n', '   * @param _authorizedAddress Address which will have its authorisation status changed\n', '   * @param _authorized Boolean whether the address will have access or not\n', '   */\n', '  function setAuthorizedContract(string _contractName, address _authorizedAddress, bool _authorized) external;\n', '}\n', '\n', '// File: contracts/interfaces/MemberManagerInterface.sol\n', '\n', '/**\n', ' * @title Member Manager Interface\n', ' * @author Bram Hoven\n', ' */\n', 'interface MemberManagerInterface {\n', '  /**\n', '   * @notice Triggered when member is added\n', '   * @param member Address of newly added member\n', '   */\n', '  event MemberAdded(address indexed member);\n', '\n', '  /**\n', '   * @notice Triggered when member is removed\n', '   * @param member Address of removed member\n', '   */\n', '  event MemberRemoved(address indexed member);\n', '\n', '  /**\n', '   * @notice Triggered when member has bought tokens\n', '   * @param member Address of member\n', '   * @param tokensBought Amount of tokens bought\n', '   * @param tokens Amount of total tokens bought by member\n', '   */\n', '  event TokensBought(address indexed member, uint256 tokensBought, uint256 tokens);\n', '\n', '  /**\n', '   * @notice Remove a member from this contract\n', '   * @param _member Address of member that will be removed\n', '   */\n', '  function removeMember(address _member) external;\n', '\n', '  /**\n', '   * @notice Add to the amount this member has bought\n', '   * @param _member Address of the corresponding member\n', '   * @param _amountBought Amount of tokens this member has bought\n', '   */\n', '  function addAmountBoughtAsMember(address _member, uint256 _amountBought) external;\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/MemberManager.sol\n', '\n', '/**\n', ' * @title Member Manager\n', ' * @author Bram Hoven\n', ' * @notice Stores a list of member which can be used for something like authorization\n', ' */\n', 'contract MemberManager is MemberManagerInterface {\n', '  using SafeMath for uint256;\n', '  \n', '  // Map containing every member\n', '  mapping(address => bool) public members;\n', '  // Map containing amount of tokens bought\n', '  mapping(address => uint256) public bought;\n', '  // List containing all members\n', '  address[] public memberKeys;\n', '\n', '  // Name of this contract\n', '  string public contractName;\n', '  // Contract Manager\n', '  ContractManagerInterface internal contractManager;\n', '\n', '  /**\n', '   * @notice Triggered when member is added\n', '   * @param member Address of newly added member\n', '   */\n', '  event MemberAdded(address indexed member);\n', '\n', '  /**\n', '   * @notice Triggered when member is removed\n', '   * @param member Address of removed member\n', '   */\n', '  event MemberRemoved(address indexed member);\n', '\n', '  /**\n', '   * @notice Triggered when member has bought tokens\n', '   * @param member Address of member\n', '   * @param tokensBought Amount of tokens bought\n', '   * @param tokens Amount of total tokens bought by member\n', '   */\n', '  event TokensBought(address indexed member, uint256 tokensBought, uint256 tokens);\n', '\n', '  /**\n', '   * @notice Constructor for creating member manager\n', '   * @param _contractName Name of this contract for lookup in contract manager\n', '   * @param _contractManager Address where the contract manager is located\n', '   */\n', '  constructor(string _contractName, address _contractManager) public {\n', '    contractName = _contractName;\n', '    contractManager = ContractManagerInterface(_contractManager);\n', '  }\n', '\n', '  /**\n', '   * @notice Add a member to this contract\n', '   * @param _member Address of the new member\n', '   */\n', '  function _addMember(address _member) internal {\n', '    require(contractManager.authorize(contractName, msg.sender));\n', '\n', '    members[_member] = true;\n', '    memberKeys.push(_member);\n', '\n', '    emit MemberAdded(_member);\n', '  }\n', '\n', '  /**\n', '   * @notice Remove a member from this contract\n', '   * @param _member Address of member that will be removed\n', '   */\n', '  function removeMember(address _member) external {\n', '    require(contractManager.authorize(contractName, msg.sender));\n', '    require(members[_member] == true);\n', '\n', '    delete members[_member];\n', '\n', '    for (uint256 i = 0; i < memberKeys.length; i++) {\n', '      if (memberKeys[i] == _member) {\n', '        delete memberKeys[i];\n', '        break;\n', '      }\n', '    }\n', '\n', '    emit MemberRemoved(_member);\n', '  }\n', '\n', '  /**\n', '   * @notice Add to the amount this member has bought\n', '   * @param _member Address of the corresponding member\n', '   * @param _amountBought Amount of tokens this member has bought\n', '   */\n', '  function addAmountBoughtAsMember(address _member, uint256 _amountBought) external {\n', '    require(contractManager.authorize(contractName, msg.sender));\n', '    require(_amountBought != 0);\n', '\n', '    if(!members[_member]) {\n', '      _addMember(_member);\n', '    }\n', '\n', '    bought[_member] = bought[_member].add(_amountBought);\n', '\n', '    emit TokensBought(_member, _amountBought, bought[_member]);\n', '  }\n', '}']