['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title BitImageToken\n', ' * @dev ERC20 burnable token based on OpenZeppelin&#39;s implementation.\n', ' */\n', 'contract BitImageToken is StandardToken, BurnableToken, Ownable {\n', '\n', '    /**\n', '     * @dev Event for tokens timelock logging.\n', '     * @param _holder {address} the holder of tokens after they are released.\n', '     * @param _releaseTime {uint256} the UNIX timestamp when token release is enabled.\n', '     */\n', '    event Timelock(address indexed _holder, uint256 _releaseTime);\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    bool public released;\n', '    address public saleAgent;\n', '\n', '    mapping (address => uint256) public timelock;\n', '\n', '    modifier onlySaleAgent() {\n', '        require(msg.sender == saleAgent);\n', '        _;\n', '    }\n', '\n', '    modifier whenReleased() {\n', '        if (timelock[msg.sender] != 0) {\n', '            require(released && now > timelock[msg.sender]);\n', '        } else {\n', '            require(released || msg.sender == saleAgent);\n', '        }\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Constructor instantiates token supply and allocates balanace to the owner.\n', '     */\n', '    function BitImageToken() public {\n', '        name = "Bitimage Token";\n', '        symbol = "BIM";\n', '        decimals = 18;\n', '        released = false;\n', '        totalSupply = 10000000000 ether;\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * @dev Associates this token with a specified sale agent. The sale agent will be able\n', '     * to call transferFrom() function to transfer tokens during crowdsale.\n', '     * @param _saleAgent {address} the address of a sale agent that will sell this token.\n', '     */\n', '    function setSaleAgent(address _saleAgent) public onlyOwner {\n', '        require(_saleAgent != address(0));\n', '        require(saleAgent == address(0));\n', '        saleAgent = _saleAgent;\n', '        super.approve(saleAgent, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the released flag to true which enables to transfer tokens after crowdsale is end.\n', '     * Once released, it is not possible to disable transfers.\n', '     */\n', '    function release() public onlySaleAgent {\n', '        released = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets time when token release is enabled for specified holder.\n', '     * @param _holder {address} the holder of tokens after they are released.\n', '     * @param _releaseTime {uint256} the UNIX timestamp when token release is enabled.\n', '     */\n', '    function lock(address _holder, uint256 _releaseTime) public onlySaleAgent {\n', '        require(_holder != address(0));\n', '        require(_releaseTime > now);\n', '        timelock[_holder] = _releaseTime;\n', '        Timelock(_holder, _releaseTime);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers tokens to specified address.\n', '     * Overrides the transfer() function with modifier that prevents the ability to transfer\n', '     * tokens by holders unitl release time. Only sale agent can transfer tokens unitl release time.\n', '     * @param _to {address} the address to transfer to.\n', '     * @param _value {uint256} the amount of tokens to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public whenReleased returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers tokens from one address to another.\n', '     * Overrides the transferFrom() function with modifier that prevents the ability to transfer\n', '     * tokens by holders unitl release time. Only sale agent can transfer tokens unitl release time.\n', '     * @param _from {address} the address to send from.\n', '     * @param _to {address} the address to transfer to.\n', '     * @param _value {uint256} the amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenReleased returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Overrides the approve() function with  modifier that prevents the ability to approve the passed\n', '     * address to spend the specified amount of tokens until release time.\n', '     * @param _spender {address} the address which will spend the funds.\n', '     * @param _value {uint256} the amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public whenReleased returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Increment allowed value.\n', '     * Overrides the increaseApproval() function with modifier that prevents the ability to increment\n', '     * allowed value until release time.\n', '     * @param _spender {address} the address which will spend the funds.\n', '     * @param _addedValue {uint} the amount of tokens to be added.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public whenReleased returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Dicrement allowed value.\n', '     * Overrides the decreaseApproval() function with modifier that prevents the ability to dicrement\n', '     * allowed value until release time.\n', '     * @param _spender {address} the address which will spend the funds.\n', '     * @param _subtractedValue {uint} the amount of tokens to be subtracted.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenReleased returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specified amount of tokens.\n', '     * Overrides the burn() function with modifier that prevents the ability to burn tokens\n', '     * by holders excluding the sale agent.\n', '     * @param _value {uint256} the amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public onlySaleAgent {\n', '        super.burn(_value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specified amount of tokens from specified address.\n', '     * @param _from {address} the address to burn from.\n', '     * @param _value {uint256} the amount of token to be burned.\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public onlySaleAgent {\n', '        require(_value > 0);\n', '        require(_value <= balances[_from]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(_from, _value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title BitImageCrowdsale\n', ' * @dev The BitImageCrowdsale contract is used for selling BitImageToken tokens (BIM).\n', ' */\n', 'contract BitImageTokenSale is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Event for token purchase logging.\n', '     * @param _investor {address} the address of investor.\n', '     * @param _weiAmount {uint256} the amount of contributed Ether.\n', '     * @param _tokenAmount {uint256} the amount of tokens purchased.\n', '     */\n', '    event TokenPurchase(address indexed _investor, uint256 _weiAmount, uint256 _tokenAmount);\n', '\n', '    /**\n', '     * @dev Event for Ether Refunding logging.\n', '     * @param _investor {address} the address of investor.\n', '     * @param _weiAmount {uint256} the amount of Ether to be refunded.\n', '     */\n', '    event Refunded(address indexed _investor, uint256 _weiAmount);\n', '\n', '    BitImageToken public token;\n', '\n', '    address public walletEtherPresale;\n', '    address public walletEhterCrowdsale;\n', '\n', '    address public walletTokenTeam;\n', '    address[] public walletTokenAdvisors;\n', '    address public walletTokenBounty;\n', '    address public walletTokenReservation;\n', '\n', '    uint256 public startTime;\n', '    uint256 public period;\n', '    uint256 public periodPresale;\n', '    uint256 public periodCrowdsale;\n', '    uint256 public periodWeek;\n', '\n', '    uint256 public weiMinInvestment;\n', '    uint256 public weiMaxInvestment;\n', '\n', '    uint256 public rate;\n', '\n', '    uint256 public softCap;\n', '    uint256 public goal;\n', '    uint256 public goalIncrement;\n', '    uint256 public hardCap;\n', '\n', '    uint256 public tokenIcoAllocated;\n', '    uint256 public tokenTeamAllocated;\n', '    uint256 public tokenAdvisorsAllocated;\n', '    uint256 public tokenBountyAllocated;\n', '    uint256 public tokenReservationAllocated;\n', '\n', '    uint256 public weiTotalReceived;\n', '\n', '    uint256 public tokenTotalSold;\n', '\n', '    uint256 public weiTotalRefunded;\n', '\n', '    uint256 public bonus;\n', '    uint256 public bonusDicrement;\n', '    uint256 public bonusAfterPresale;\n', '\n', '    struct Investor {\n', '        uint256 weiContributed;\n', '        uint256 tokenBuyed;\n', '        bool refunded;\n', '    }\n', '\n', '    mapping (address => Investor) private investors;\n', '    address[] private investorsIndex;\n', '\n', '    enum State { NEW, PRESALE, CROWDSALE, CLOSED }\n', '    State public state;\n', '\n', '\n', '    /**\n', '     * @dev Constructor for a crowdsale of BitImageToken tokens.\n', '     */\n', '    function BitImageTokenSale() public {\n', '        walletEtherPresale = 0xE19f0ccc003a36396FE9dA4F344157B2c60A4B8E;\n', '        walletEhterCrowdsale = 0x10e5f0e94A43FA7C9f7F88F42a6a861312aD1d31;\n', '        walletTokenTeam = 0x35425E32fE41f167990DBEa1010132E9669Fa500;\n', '        walletTokenBounty = 0x91325c4a25893d80e26b4dC14b964Cf5a27fECD8;\n', '        walletTokenReservation = 0x4795eC1E7C24B80001eb1F43206F6e075fCAb4fc;\n', '        walletTokenAdvisors = [\n', '            0x2E308F904C831e41329215a4807d9f1a82B67eE2,\n', '            0x331274f61b3C976899D6FeB6f18A966A50E98C8d,\n', '            0x6098b02d10A1f27E39bCA219CeB56355126EC74f,\n', '            0xC14C105430C13e6cBdC8DdB41E88fD88b9325927\n', '        ];\n', '        periodPresale = 4 weeks;\n', '        periodCrowdsale = 6 weeks;\n', '        periodWeek = 1 weeks;\n', '        weiMinInvestment = 0.1 ether;\n', '        weiMaxInvestment = 500 ether;\n', '        rate = 130000;\n', '        softCap = 2000 ether;\n', '        goal = 6000 ether;\n', '        goalIncrement = goal;\n', '        hardCap = 42000 ether;\n', '        bonus = 30;\n', '        bonusDicrement = 5;\n', '        state = State.NEW;\n', '        pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function is called whenever Ether is sent to the contract.\n', '     */\n', '    function() external payable {\n', '        purchase(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Initilizes the token with given address and allocates tokens.\n', '     * @param _token {address} the address of token contract.\n', '     */\n', '    function setToken(address _token) external onlyOwner whenPaused {\n', '        require(state == State.NEW);\n', '        require(_token != address(0));\n', '        require(token == address(0));\n', '        token = BitImageToken(_token);\n', '        tokenIcoAllocated = token.totalSupply().mul(62).div(100);\n', '        tokenTeamAllocated = token.totalSupply().mul(18).div(100);\n', '        tokenAdvisorsAllocated = token.totalSupply().mul(4).div(100);\n', '        tokenBountyAllocated = token.totalSupply().mul(6).div(100);\n', '        tokenReservationAllocated = token.totalSupply().mul(10).div(100);\n', '        require(token.totalSupply() == tokenIcoAllocated.add(tokenTeamAllocated).add(tokenAdvisorsAllocated).add(tokenBountyAllocated).add(tokenReservationAllocated));\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the start time.\n', '     * @param _startTime {uint256} the UNIX timestamp when to start the sale.\n', '     */\n', '    function start(uint256 _startTime) external onlyOwner whenPaused {\n', '        require(_startTime >= now);\n', '        require(token != address(0));\n', '        if (state == State.NEW) {\n', '            state = State.PRESALE;\n', '            period = periodPresale;\n', '        } else if (state == State.PRESALE && weiTotalReceived >= softCap) {\n', '            state = State.CROWDSALE;\n', '            period = periodCrowdsale;\n', '            bonusAfterPresale = bonus.sub(bonusDicrement);\n', '            bonus = bonusAfterPresale;\n', '        } else {\n', '            revert();\n', '        }\n', '        startTime = _startTime;\n', '        unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev Finalizes the sale.\n', '     */\n', '    function finalize() external onlyOwner {\n', '        require(weiTotalReceived >= softCap);\n', '        require(now > startTime.add(period) || weiTotalReceived >= hardCap);\n', '\n', '        if (state == State.PRESALE) {\n', '            require(this.balance > 0);\n', '            walletEtherPresale.transfer(this.balance);\n', '            pause();\n', '        } else if (state == State.CROWDSALE) {\n', '            uint256 tokenTotalUnsold = tokenIcoAllocated.sub(tokenTotalSold);\n', '            tokenReservationAllocated = tokenReservationAllocated.add(tokenTotalUnsold);\n', '\n', '            require(token.transferFrom(token.owner(), walletTokenBounty, tokenBountyAllocated));\n', '            require(token.transferFrom(token.owner(), walletTokenReservation, tokenReservationAllocated));\n', '            require(token.transferFrom(token.owner(), walletTokenTeam, tokenTeamAllocated));\n', '            token.lock(walletTokenReservation, now + 0.5 years);\n', '            token.lock(walletTokenTeam, now + 1 years);\n', '            uint256 tokenAdvisor = tokenAdvisorsAllocated.div(walletTokenAdvisors.length);\n', '            for (uint256 i = 0; i < walletTokenAdvisors.length; i++) {\n', '                require(token.transferFrom(token.owner(), walletTokenAdvisors[i], tokenAdvisor));\n', '                token.lock(walletTokenAdvisors[i], now + 0.5 years);\n', '            }\n', '\n', '            token.release();\n', '            state = State.CLOSED;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Allows investors to get refund in case when ico is failed.\n', '     */\n', '    function refund() external whenNotPaused {\n', '        require(state == State.PRESALE);\n', '        require(now > startTime.add(period));\n', '        require(weiTotalReceived < softCap);\n', '\n', '        require(this.balance > 0);\n', '\n', '        Investor storage investor = investors[msg.sender];\n', '\n', '        require(investor.weiContributed > 0);\n', '        require(!investor.refunded);\n', '\n', '        msg.sender.transfer(investor.weiContributed);\n', '        token.burnFrom(msg.sender, investor.tokenBuyed);\n', '        investor.refunded = true;\n', '        weiTotalRefunded = weiTotalRefunded.add(investor.weiContributed);\n', '\n', '        Refunded(msg.sender, investor.weiContributed);\n', '    }\n', '\n', '    function purchase(address _investor) private whenNotPaused {\n', '        require(state == State.PRESALE || state == State.CROWDSALE);\n', '        require(now >= startTime && now <= startTime.add(period));\n', '\n', '        if (state == State.CROWDSALE) {\n', '            uint256 timeFromStart = now.sub(startTime);\n', '            if (timeFromStart > periodWeek) {\n', '                uint256 currentWeek = timeFromStart.div(1 weeks);\n', '                uint256 bonusWeek = bonusAfterPresale.sub(bonusDicrement.mul(currentWeek));\n', '                if (bonus > bonusWeek) {\n', '                    bonus = bonusWeek;\n', '                }\n', '                currentWeek++;\n', '                periodWeek = currentWeek.mul(1 weeks);\n', '            }\n', '        }\n', '\n', '        uint256 weiAmount = msg.value;\n', '        require(weiAmount >= weiMinInvestment && weiAmount <= weiMaxInvestment);\n', '\n', '        uint256 tokenAmount = weiAmount.mul(rate);\n', '        uint256 tokenBonusAmount = tokenAmount.mul(bonus).div(100);\n', '        tokenAmount = tokenAmount.add(tokenBonusAmount);\n', '\n', '        weiTotalReceived = weiTotalReceived.add(weiAmount);\n', '        tokenTotalSold = tokenTotalSold.add(tokenAmount);\n', '        require(tokenTotalSold <= tokenIcoAllocated);\n', '\n', '        require(token.transferFrom(token.owner(), _investor, tokenAmount));\n', '\n', '        Investor storage investor = investors[_investor];\n', '        if (investor.weiContributed == 0) {\n', '            investorsIndex.push(_investor);\n', '        }\n', '        investor.tokenBuyed = investor.tokenBuyed.add(tokenAmount);\n', '        investor.weiContributed = investor.weiContributed.add(weiAmount);\n', '\n', '        if (state == State.CROWDSALE) {\n', '            walletEhterCrowdsale.transfer(weiAmount);\n', '        }\n', '        TokenPurchase(_investor, weiAmount, tokenAmount);\n', '\n', '        if (weiTotalReceived >= goal) {\n', '            if (state == State.PRESALE) {\n', '                startTime = now;\n', '                period = 1 weeks;\n', '            }\n', '            uint256 delta = weiTotalReceived.sub(goal);\n', '            goal = goal.add(goalIncrement).add(delta);\n', '            bonus = bonus.sub(bonusDicrement);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title BitImageToken\n', " * @dev ERC20 burnable token based on OpenZeppelin's implementation.\n", ' */\n', 'contract BitImageToken is StandardToken, BurnableToken, Ownable {\n', '\n', '    /**\n', '     * @dev Event for tokens timelock logging.\n', '     * @param _holder {address} the holder of tokens after they are released.\n', '     * @param _releaseTime {uint256} the UNIX timestamp when token release is enabled.\n', '     */\n', '    event Timelock(address indexed _holder, uint256 _releaseTime);\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    bool public released;\n', '    address public saleAgent;\n', '\n', '    mapping (address => uint256) public timelock;\n', '\n', '    modifier onlySaleAgent() {\n', '        require(msg.sender == saleAgent);\n', '        _;\n', '    }\n', '\n', '    modifier whenReleased() {\n', '        if (timelock[msg.sender] != 0) {\n', '            require(released && now > timelock[msg.sender]);\n', '        } else {\n', '            require(released || msg.sender == saleAgent);\n', '        }\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Constructor instantiates token supply and allocates balanace to the owner.\n', '     */\n', '    function BitImageToken() public {\n', '        name = "Bitimage Token";\n', '        symbol = "BIM";\n', '        decimals = 18;\n', '        released = false;\n', '        totalSupply = 10000000000 ether;\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * @dev Associates this token with a specified sale agent. The sale agent will be able\n', '     * to call transferFrom() function to transfer tokens during crowdsale.\n', '     * @param _saleAgent {address} the address of a sale agent that will sell this token.\n', '     */\n', '    function setSaleAgent(address _saleAgent) public onlyOwner {\n', '        require(_saleAgent != address(0));\n', '        require(saleAgent == address(0));\n', '        saleAgent = _saleAgent;\n', '        super.approve(saleAgent, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the released flag to true which enables to transfer tokens after crowdsale is end.\n', '     * Once released, it is not possible to disable transfers.\n', '     */\n', '    function release() public onlySaleAgent {\n', '        released = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets time when token release is enabled for specified holder.\n', '     * @param _holder {address} the holder of tokens after they are released.\n', '     * @param _releaseTime {uint256} the UNIX timestamp when token release is enabled.\n', '     */\n', '    function lock(address _holder, uint256 _releaseTime) public onlySaleAgent {\n', '        require(_holder != address(0));\n', '        require(_releaseTime > now);\n', '        timelock[_holder] = _releaseTime;\n', '        Timelock(_holder, _releaseTime);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers tokens to specified address.\n', '     * Overrides the transfer() function with modifier that prevents the ability to transfer\n', '     * tokens by holders unitl release time. Only sale agent can transfer tokens unitl release time.\n', '     * @param _to {address} the address to transfer to.\n', '     * @param _value {uint256} the amount of tokens to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public whenReleased returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers tokens from one address to another.\n', '     * Overrides the transferFrom() function with modifier that prevents the ability to transfer\n', '     * tokens by holders unitl release time. Only sale agent can transfer tokens unitl release time.\n', '     * @param _from {address} the address to send from.\n', '     * @param _to {address} the address to transfer to.\n', '     * @param _value {uint256} the amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenReleased returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Overrides the approve() function with  modifier that prevents the ability to approve the passed\n', '     * address to spend the specified amount of tokens until release time.\n', '     * @param _spender {address} the address which will spend the funds.\n', '     * @param _value {uint256} the amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public whenReleased returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Increment allowed value.\n', '     * Overrides the increaseApproval() function with modifier that prevents the ability to increment\n', '     * allowed value until release time.\n', '     * @param _spender {address} the address which will spend the funds.\n', '     * @param _addedValue {uint} the amount of tokens to be added.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public whenReleased returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Dicrement allowed value.\n', '     * Overrides the decreaseApproval() function with modifier that prevents the ability to dicrement\n', '     * allowed value until release time.\n', '     * @param _spender {address} the address which will spend the funds.\n', '     * @param _subtractedValue {uint} the amount of tokens to be subtracted.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenReleased returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specified amount of tokens.\n', '     * Overrides the burn() function with modifier that prevents the ability to burn tokens\n', '     * by holders excluding the sale agent.\n', '     * @param _value {uint256} the amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public onlySaleAgent {\n', '        super.burn(_value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specified amount of tokens from specified address.\n', '     * @param _from {address} the address to burn from.\n', '     * @param _value {uint256} the amount of token to be burned.\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public onlySaleAgent {\n', '        require(_value > 0);\n', '        require(_value <= balances[_from]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(_from, _value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title BitImageCrowdsale\n', ' * @dev The BitImageCrowdsale contract is used for selling BitImageToken tokens (BIM).\n', ' */\n', 'contract BitImageTokenSale is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Event for token purchase logging.\n', '     * @param _investor {address} the address of investor.\n', '     * @param _weiAmount {uint256} the amount of contributed Ether.\n', '     * @param _tokenAmount {uint256} the amount of tokens purchased.\n', '     */\n', '    event TokenPurchase(address indexed _investor, uint256 _weiAmount, uint256 _tokenAmount);\n', '\n', '    /**\n', '     * @dev Event for Ether Refunding logging.\n', '     * @param _investor {address} the address of investor.\n', '     * @param _weiAmount {uint256} the amount of Ether to be refunded.\n', '     */\n', '    event Refunded(address indexed _investor, uint256 _weiAmount);\n', '\n', '    BitImageToken public token;\n', '\n', '    address public walletEtherPresale;\n', '    address public walletEhterCrowdsale;\n', '\n', '    address public walletTokenTeam;\n', '    address[] public walletTokenAdvisors;\n', '    address public walletTokenBounty;\n', '    address public walletTokenReservation;\n', '\n', '    uint256 public startTime;\n', '    uint256 public period;\n', '    uint256 public periodPresale;\n', '    uint256 public periodCrowdsale;\n', '    uint256 public periodWeek;\n', '\n', '    uint256 public weiMinInvestment;\n', '    uint256 public weiMaxInvestment;\n', '\n', '    uint256 public rate;\n', '\n', '    uint256 public softCap;\n', '    uint256 public goal;\n', '    uint256 public goalIncrement;\n', '    uint256 public hardCap;\n', '\n', '    uint256 public tokenIcoAllocated;\n', '    uint256 public tokenTeamAllocated;\n', '    uint256 public tokenAdvisorsAllocated;\n', '    uint256 public tokenBountyAllocated;\n', '    uint256 public tokenReservationAllocated;\n', '\n', '    uint256 public weiTotalReceived;\n', '\n', '    uint256 public tokenTotalSold;\n', '\n', '    uint256 public weiTotalRefunded;\n', '\n', '    uint256 public bonus;\n', '    uint256 public bonusDicrement;\n', '    uint256 public bonusAfterPresale;\n', '\n', '    struct Investor {\n', '        uint256 weiContributed;\n', '        uint256 tokenBuyed;\n', '        bool refunded;\n', '    }\n', '\n', '    mapping (address => Investor) private investors;\n', '    address[] private investorsIndex;\n', '\n', '    enum State { NEW, PRESALE, CROWDSALE, CLOSED }\n', '    State public state;\n', '\n', '\n', '    /**\n', '     * @dev Constructor for a crowdsale of BitImageToken tokens.\n', '     */\n', '    function BitImageTokenSale() public {\n', '        walletEtherPresale = 0xE19f0ccc003a36396FE9dA4F344157B2c60A4B8E;\n', '        walletEhterCrowdsale = 0x10e5f0e94A43FA7C9f7F88F42a6a861312aD1d31;\n', '        walletTokenTeam = 0x35425E32fE41f167990DBEa1010132E9669Fa500;\n', '        walletTokenBounty = 0x91325c4a25893d80e26b4dC14b964Cf5a27fECD8;\n', '        walletTokenReservation = 0x4795eC1E7C24B80001eb1F43206F6e075fCAb4fc;\n', '        walletTokenAdvisors = [\n', '            0x2E308F904C831e41329215a4807d9f1a82B67eE2,\n', '            0x331274f61b3C976899D6FeB6f18A966A50E98C8d,\n', '            0x6098b02d10A1f27E39bCA219CeB56355126EC74f,\n', '            0xC14C105430C13e6cBdC8DdB41E88fD88b9325927\n', '        ];\n', '        periodPresale = 4 weeks;\n', '        periodCrowdsale = 6 weeks;\n', '        periodWeek = 1 weeks;\n', '        weiMinInvestment = 0.1 ether;\n', '        weiMaxInvestment = 500 ether;\n', '        rate = 130000;\n', '        softCap = 2000 ether;\n', '        goal = 6000 ether;\n', '        goalIncrement = goal;\n', '        hardCap = 42000 ether;\n', '        bonus = 30;\n', '        bonusDicrement = 5;\n', '        state = State.NEW;\n', '        pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function is called whenever Ether is sent to the contract.\n', '     */\n', '    function() external payable {\n', '        purchase(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Initilizes the token with given address and allocates tokens.\n', '     * @param _token {address} the address of token contract.\n', '     */\n', '    function setToken(address _token) external onlyOwner whenPaused {\n', '        require(state == State.NEW);\n', '        require(_token != address(0));\n', '        require(token == address(0));\n', '        token = BitImageToken(_token);\n', '        tokenIcoAllocated = token.totalSupply().mul(62).div(100);\n', '        tokenTeamAllocated = token.totalSupply().mul(18).div(100);\n', '        tokenAdvisorsAllocated = token.totalSupply().mul(4).div(100);\n', '        tokenBountyAllocated = token.totalSupply().mul(6).div(100);\n', '        tokenReservationAllocated = token.totalSupply().mul(10).div(100);\n', '        require(token.totalSupply() == tokenIcoAllocated.add(tokenTeamAllocated).add(tokenAdvisorsAllocated).add(tokenBountyAllocated).add(tokenReservationAllocated));\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the start time.\n', '     * @param _startTime {uint256} the UNIX timestamp when to start the sale.\n', '     */\n', '    function start(uint256 _startTime) external onlyOwner whenPaused {\n', '        require(_startTime >= now);\n', '        require(token != address(0));\n', '        if (state == State.NEW) {\n', '            state = State.PRESALE;\n', '            period = periodPresale;\n', '        } else if (state == State.PRESALE && weiTotalReceived >= softCap) {\n', '            state = State.CROWDSALE;\n', '            period = periodCrowdsale;\n', '            bonusAfterPresale = bonus.sub(bonusDicrement);\n', '            bonus = bonusAfterPresale;\n', '        } else {\n', '            revert();\n', '        }\n', '        startTime = _startTime;\n', '        unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev Finalizes the sale.\n', '     */\n', '    function finalize() external onlyOwner {\n', '        require(weiTotalReceived >= softCap);\n', '        require(now > startTime.add(period) || weiTotalReceived >= hardCap);\n', '\n', '        if (state == State.PRESALE) {\n', '            require(this.balance > 0);\n', '            walletEtherPresale.transfer(this.balance);\n', '            pause();\n', '        } else if (state == State.CROWDSALE) {\n', '            uint256 tokenTotalUnsold = tokenIcoAllocated.sub(tokenTotalSold);\n', '            tokenReservationAllocated = tokenReservationAllocated.add(tokenTotalUnsold);\n', '\n', '            require(token.transferFrom(token.owner(), walletTokenBounty, tokenBountyAllocated));\n', '            require(token.transferFrom(token.owner(), walletTokenReservation, tokenReservationAllocated));\n', '            require(token.transferFrom(token.owner(), walletTokenTeam, tokenTeamAllocated));\n', '            token.lock(walletTokenReservation, now + 0.5 years);\n', '            token.lock(walletTokenTeam, now + 1 years);\n', '            uint256 tokenAdvisor = tokenAdvisorsAllocated.div(walletTokenAdvisors.length);\n', '            for (uint256 i = 0; i < walletTokenAdvisors.length; i++) {\n', '                require(token.transferFrom(token.owner(), walletTokenAdvisors[i], tokenAdvisor));\n', '                token.lock(walletTokenAdvisors[i], now + 0.5 years);\n', '            }\n', '\n', '            token.release();\n', '            state = State.CLOSED;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Allows investors to get refund in case when ico is failed.\n', '     */\n', '    function refund() external whenNotPaused {\n', '        require(state == State.PRESALE);\n', '        require(now > startTime.add(period));\n', '        require(weiTotalReceived < softCap);\n', '\n', '        require(this.balance > 0);\n', '\n', '        Investor storage investor = investors[msg.sender];\n', '\n', '        require(investor.weiContributed > 0);\n', '        require(!investor.refunded);\n', '\n', '        msg.sender.transfer(investor.weiContributed);\n', '        token.burnFrom(msg.sender, investor.tokenBuyed);\n', '        investor.refunded = true;\n', '        weiTotalRefunded = weiTotalRefunded.add(investor.weiContributed);\n', '\n', '        Refunded(msg.sender, investor.weiContributed);\n', '    }\n', '\n', '    function purchase(address _investor) private whenNotPaused {\n', '        require(state == State.PRESALE || state == State.CROWDSALE);\n', '        require(now >= startTime && now <= startTime.add(period));\n', '\n', '        if (state == State.CROWDSALE) {\n', '            uint256 timeFromStart = now.sub(startTime);\n', '            if (timeFromStart > periodWeek) {\n', '                uint256 currentWeek = timeFromStart.div(1 weeks);\n', '                uint256 bonusWeek = bonusAfterPresale.sub(bonusDicrement.mul(currentWeek));\n', '                if (bonus > bonusWeek) {\n', '                    bonus = bonusWeek;\n', '                }\n', '                currentWeek++;\n', '                periodWeek = currentWeek.mul(1 weeks);\n', '            }\n', '        }\n', '\n', '        uint256 weiAmount = msg.value;\n', '        require(weiAmount >= weiMinInvestment && weiAmount <= weiMaxInvestment);\n', '\n', '        uint256 tokenAmount = weiAmount.mul(rate);\n', '        uint256 tokenBonusAmount = tokenAmount.mul(bonus).div(100);\n', '        tokenAmount = tokenAmount.add(tokenBonusAmount);\n', '\n', '        weiTotalReceived = weiTotalReceived.add(weiAmount);\n', '        tokenTotalSold = tokenTotalSold.add(tokenAmount);\n', '        require(tokenTotalSold <= tokenIcoAllocated);\n', '\n', '        require(token.transferFrom(token.owner(), _investor, tokenAmount));\n', '\n', '        Investor storage investor = investors[_investor];\n', '        if (investor.weiContributed == 0) {\n', '            investorsIndex.push(_investor);\n', '        }\n', '        investor.tokenBuyed = investor.tokenBuyed.add(tokenAmount);\n', '        investor.weiContributed = investor.weiContributed.add(weiAmount);\n', '\n', '        if (state == State.CROWDSALE) {\n', '            walletEhterCrowdsale.transfer(weiAmount);\n', '        }\n', '        TokenPurchase(_investor, weiAmount, tokenAmount);\n', '\n', '        if (weiTotalReceived >= goal) {\n', '            if (state == State.PRESALE) {\n', '                startTime = now;\n', '                period = 1 weeks;\n', '            }\n', '            uint256 delta = weiTotalReceived.sub(goal);\n', '            goal = goal.add(goalIncrement).add(delta);\n', '            bonus = bonus.sub(bonusDicrement);\n', '        }\n', '    }\n', '}']
