['pragma solidity ^0.4.19;\n', '\n', '/* \n', '    http://thegoliathcorp.com/\n', '    https://twitter.com/goliathcoin\n', '\n', '    GoliathCoin; the first trustless, decentralized, pre-mined, smart contracting blockchain in the history of cryptocoins. Or something.\n', '\n', '    “This thing is basically the new Mt Gox.” \n', '*/\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract GoliathCoin is Owned {\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => uint256) public balanceOf;\n', '    uint256 public totalSupply;\n', '\n', '    string public name = "Goliath";\n', '    string public symbol = "GOL";\n', '    uint8 public decimals = 18;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    event Mint(address indexed _to, uint256 value);\n', '    event Burn(address indexed _from, uint256 value);\n', '\n', '    function Token () public {\n', '        totalSupply = 0;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(value <= allowance[from][to]);\n', '\n', '        allowance[from][to] -= value;\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(0 == allowance[msg.sender][spender]);\n', '        allowance[msg.sender][spender] = value;\n', '        Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function mint(address to, uint256 value) public onlyOwner {\n', '        require(balanceOf[to] + value >= balanceOf[to]);\n', '\n', '        balanceOf[to] += value;\n', '        totalSupply += value;\n', '        Mint(to, value);\n', '    }\n', '\n', '    function burn(address from, uint256 value) public onlyOwner {\n', '        require(balanceOf[from] >= value);\n', '\n', '        balanceOf[from] -= value;\n', '        totalSupply -= value;\n', '        Burn(from, value);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        // Checks for validity\n', '        require(to != address(0));\n', '        require(balanceOf[from] >= value);\n', '        require(balanceOf[to] + value >= balanceOf[to]);\n', '\n', '        // Actually do the transfer\n', '        balanceOf[from] -= value;\n', '        balanceOf[to] += value;\n', '        Transfer(from, to, value);\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/* \n', '    http://thegoliathcorp.com/\n', '    https://twitter.com/goliathcoin\n', '\n', '    GoliathCoin; the first trustless, decentralized, pre-mined, smart contracting blockchain in the history of cryptocoins. Or something.\n', '\n', '    “This thing is basically the new Mt Gox.” \n', '*/\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract GoliathCoin is Owned {\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => uint256) public balanceOf;\n', '    uint256 public totalSupply;\n', '\n', '    string public name = "Goliath";\n', '    string public symbol = "GOL";\n', '    uint8 public decimals = 18;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    event Mint(address indexed _to, uint256 value);\n', '    event Burn(address indexed _from, uint256 value);\n', '\n', '    function Token () public {\n', '        totalSupply = 0;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(value <= allowance[from][to]);\n', '\n', '        allowance[from][to] -= value;\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(0 == allowance[msg.sender][spender]);\n', '        allowance[msg.sender][spender] = value;\n', '        Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function mint(address to, uint256 value) public onlyOwner {\n', '        require(balanceOf[to] + value >= balanceOf[to]);\n', '\n', '        balanceOf[to] += value;\n', '        totalSupply += value;\n', '        Mint(to, value);\n', '    }\n', '\n', '    function burn(address from, uint256 value) public onlyOwner {\n', '        require(balanceOf[from] >= value);\n', '\n', '        balanceOf[from] -= value;\n', '        totalSupply -= value;\n', '        Burn(from, value);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        // Checks for validity\n', '        require(to != address(0));\n', '        require(balanceOf[from] >= value);\n', '        require(balanceOf[to] + value >= balanceOf[to]);\n', '\n', '        // Actually do the transfer\n', '        balanceOf[from] -= value;\n', '        balanceOf[to] += value;\n', '        Transfer(from, to, value);\n', '    }\n', '}']
