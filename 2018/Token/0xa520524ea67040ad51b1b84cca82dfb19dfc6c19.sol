['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', ' /**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', '\n', 'contract ERC223ReceivingContract {\n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', 'contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    address[] supportedTokens;\n', '\n', '    mapping (address => bool) public tokenIsSupported;\n', '    mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '\n', '    event Deposit(address token, address user, uint amount, uint balance);\n', '    event Distribution(address token, address host, address hunter, uint256 amount, uint64 timestamp);\n', '\n', '\n', '    constructor() public {\n', '        address Bounty0xToken = 0xd2d6158683aeE4Cc838067727209a0aAF4359de3;\n', '        supportedTokens.push(Bounty0xToken);\n', '        tokenIsSupported[Bounty0xToken] = true;\n', '    }\n', '\n', '\n', '    function addSupportedToken(address _token) public onlyOwner {\n', '        require(!tokenIsSupported[_token]);\n', '\n', '        supportedTokens.push(_token);\n', '        tokenIsSupported[_token] = true;\n', '    }\n', '\n', '    function removeSupportedToken(address _token) public onlyOwner {\n', '        require(tokenIsSupported[_token]);\n', '\n', '        for (uint i = 0; i < supportedTokens.length; i++) {\n', '            if (supportedTokens[i] == _token) {\n', '                uint256 indexOfLastToken = supportedTokens.length - 1;\n', '                supportedTokens[i] = supportedTokens[indexOfLastToken];\n', '                supportedTokens.length--;\n', '                tokenIsSupported[_token] = false;\n', '                return;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getListOfSupportedTokens() view public returns(address[]) {\n', '        return supportedTokens;\n', '    }\n', '\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public whenNotPaused {\n', '        address _token = msg.sender;\n', '        require(tokenIsSupported[_token]);\n', '\n', '        tokens[_token][_from] = SafeMath.add(tokens[_token][_from], _value);\n', '        emit Deposit(_token, _from, _value, tokens[_token][_from]);\n', '    }\n', '\n', '\n', '    function depositToken(address _token, uint _amount) public whenNotPaused {\n', '        //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n', '        require(_token != address(0));\n', '        require(tokenIsSupported[_token]);\n', '\n', '        require(ERC20(_token).transferFrom(msg.sender, this, _amount));\n', '        tokens[_token][msg.sender] = SafeMath.add(tokens[_token][msg.sender], _amount);\n', '\n', '        emit Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n', '    }\n', '\n', '\n', '    function distributeTokenToAddress(address _token, address _host, address _hunter, uint256 _amount) external onlyOwner {\n', '        require(_token != address(0));\n', '        require(_hunter != address(0));\n', '        require(tokenIsSupported[_token]);\n', '        require(tokens[_token][_host] >= _amount);\n', '\n', '        tokens[_token][_host] = SafeMath.sub(tokens[_token][_host], _amount);\n', '        require(ERC20(_token).transfer(_hunter, _amount));\n', '\n', '        emit Distribution(_token, _host, _hunter, _amount, uint64(now));\n', '    }\n', '\n', '    function distributeTokenToAddressesAndAmounts(address _token, address _host, address[] _hunters, uint256[] _amounts) external onlyOwner {\n', '        require(_token != address(0));\n', '        require(_host != address(0));\n', '        require(_hunters.length == _amounts.length);\n', '        require(tokenIsSupported[_token]);\n', '\n', '        uint256 totalAmount = 0;\n', '        for (uint j = 0; j < _amounts.length; j++) {\n', '            totalAmount = SafeMath.add(totalAmount, _amounts[j]);\n', '        }\n', '        require(tokens[_token][_host] >= totalAmount);\n', '        tokens[_token][_host] = SafeMath.sub(tokens[_token][_host], totalAmount);\n', '\n', '        for (uint i = 0; i < _hunters.length; i++) {\n', '            require(ERC20(_token).transfer(_hunters[i], _amounts[i]));\n', '\n', '            emit Distribution(_token, _host, _hunters[i], _amounts[i], uint64(now));\n', '        }\n', '    }\n', '\n', '    function distributeTokenToAddressesAndAmountsWithoutHost(address _token, address[] _hunters, uint256[] _amounts) external onlyOwner {\n', '        require(_token != address(0));\n', '        require(_hunters.length == _amounts.length);\n', '        require(tokenIsSupported[_token]);\n', '\n', '        uint256 totalAmount = 0;\n', '        for (uint j = 0; j < _amounts.length; j++) {\n', '            totalAmount = SafeMath.add(totalAmount, _amounts[j]);\n', '        }\n', '        require(ERC20(_token).balanceOf(this) >= totalAmount);\n', '\n', '        for (uint i = 0; i < _hunters.length; i++) {\n', '            require(ERC20(_token).transfer(_hunters[i], _amounts[i]));\n', '\n', '            emit Distribution(_token, this, _hunters[i], _amounts[i], uint64(now));\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', ' /**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', '\n', 'contract ERC223ReceivingContract {\n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', 'contract Bounty0xEscrow is Ownable, ERC223ReceivingContract, Pausable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    address[] supportedTokens;\n', '\n', '    mapping (address => bool) public tokenIsSupported;\n', '    mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '\n', '    event Deposit(address token, address user, uint amount, uint balance);\n', '    event Distribution(address token, address host, address hunter, uint256 amount, uint64 timestamp);\n', '\n', '\n', '    constructor() public {\n', '        address Bounty0xToken = 0xd2d6158683aeE4Cc838067727209a0aAF4359de3;\n', '        supportedTokens.push(Bounty0xToken);\n', '        tokenIsSupported[Bounty0xToken] = true;\n', '    }\n', '\n', '\n', '    function addSupportedToken(address _token) public onlyOwner {\n', '        require(!tokenIsSupported[_token]);\n', '\n', '        supportedTokens.push(_token);\n', '        tokenIsSupported[_token] = true;\n', '    }\n', '\n', '    function removeSupportedToken(address _token) public onlyOwner {\n', '        require(tokenIsSupported[_token]);\n', '\n', '        for (uint i = 0; i < supportedTokens.length; i++) {\n', '            if (supportedTokens[i] == _token) {\n', '                uint256 indexOfLastToken = supportedTokens.length - 1;\n', '                supportedTokens[i] = supportedTokens[indexOfLastToken];\n', '                supportedTokens.length--;\n', '                tokenIsSupported[_token] = false;\n', '                return;\n', '            }\n', '        }\n', '    }\n', '\n', '    function getListOfSupportedTokens() view public returns(address[]) {\n', '        return supportedTokens;\n', '    }\n', '\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public whenNotPaused {\n', '        address _token = msg.sender;\n', '        require(tokenIsSupported[_token]);\n', '\n', '        tokens[_token][_from] = SafeMath.add(tokens[_token][_from], _value);\n', '        emit Deposit(_token, _from, _value, tokens[_token][_from]);\n', '    }\n', '\n', '\n', '    function depositToken(address _token, uint _amount) public whenNotPaused {\n', '        //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n', '        require(_token != address(0));\n', '        require(tokenIsSupported[_token]);\n', '\n', '        require(ERC20(_token).transferFrom(msg.sender, this, _amount));\n', '        tokens[_token][msg.sender] = SafeMath.add(tokens[_token][msg.sender], _amount);\n', '\n', '        emit Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n', '    }\n', '\n', '\n', '    function distributeTokenToAddress(address _token, address _host, address _hunter, uint256 _amount) external onlyOwner {\n', '        require(_token != address(0));\n', '        require(_hunter != address(0));\n', '        require(tokenIsSupported[_token]);\n', '        require(tokens[_token][_host] >= _amount);\n', '\n', '        tokens[_token][_host] = SafeMath.sub(tokens[_token][_host], _amount);\n', '        require(ERC20(_token).transfer(_hunter, _amount));\n', '\n', '        emit Distribution(_token, _host, _hunter, _amount, uint64(now));\n', '    }\n', '\n', '    function distributeTokenToAddressesAndAmounts(address _token, address _host, address[] _hunters, uint256[] _amounts) external onlyOwner {\n', '        require(_token != address(0));\n', '        require(_host != address(0));\n', '        require(_hunters.length == _amounts.length);\n', '        require(tokenIsSupported[_token]);\n', '\n', '        uint256 totalAmount = 0;\n', '        for (uint j = 0; j < _amounts.length; j++) {\n', '            totalAmount = SafeMath.add(totalAmount, _amounts[j]);\n', '        }\n', '        require(tokens[_token][_host] >= totalAmount);\n', '        tokens[_token][_host] = SafeMath.sub(tokens[_token][_host], totalAmount);\n', '\n', '        for (uint i = 0; i < _hunters.length; i++) {\n', '            require(ERC20(_token).transfer(_hunters[i], _amounts[i]));\n', '\n', '            emit Distribution(_token, _host, _hunters[i], _amounts[i], uint64(now));\n', '        }\n', '    }\n', '\n', '    function distributeTokenToAddressesAndAmountsWithoutHost(address _token, address[] _hunters, uint256[] _amounts) external onlyOwner {\n', '        require(_token != address(0));\n', '        require(_hunters.length == _amounts.length);\n', '        require(tokenIsSupported[_token]);\n', '\n', '        uint256 totalAmount = 0;\n', '        for (uint j = 0; j < _amounts.length; j++) {\n', '            totalAmount = SafeMath.add(totalAmount, _amounts[j]);\n', '        }\n', '        require(ERC20(_token).balanceOf(this) >= totalAmount);\n', '\n', '        for (uint i = 0; i < _hunters.length; i++) {\n', '            require(ERC20(_token).transfer(_hunters[i], _amounts[i]));\n', '\n', '            emit Distribution(_token, this, _hunters[i], _amounts[i], uint64(now));\n', '        }\n', '    }\n', '\n', '}']
