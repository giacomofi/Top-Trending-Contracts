['pragma solidity 0.4.24;\n', '\n', 'library SafeMath {\n', ' function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '        return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '    }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', ' function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', 'contract DVPlock is Ownable{\n', '  using SafeERC20 for ERC20;\n', '  using SafeMath for uint256;\n', '\n', '  ERC20 public token;\n', '  address public sponsor;\n', '  mapping (address => uint256) public balances;\n', '  mapping (address => uint256) public withdrawAmounts;\n', '  uint256 public tokenTotal;\n', '  uint256 public releaseTime;\n', '\n', '  constructor() public{\n', '    releaseTime = 0;\n', '    tokenTotal = 0;\n', '    sponsor = msg.sender;    \n', '  }\n', '\n', '  function setToken(ERC20 _token) onlyOwner public{\n', '    //Only allowed once\n', '    if(token!=address(0)){\n', '      revert();\n', '    }\n', '    token = _token;\n', '  }\n', '\n', '\n', '  function setReleaseTime(uint256 _releaseTime) onlyOwner public{\n', '      require(releaseTime==0);\n', '      releaseTime = _releaseTime;\n', '      require(addSponsor(sponsor));\n', '  }\n', '\n', '\n', '  // for sponsor 20% tokens\n', '  function addSponsor(address _sponsor) internal returns(bool result){\n', '      uint256 _amount =token.totalSupply()/5;\n', '      return addInvestor(_sponsor,_amount);\n', '  }\n', '\n', '  function addInvestor(address investor,uint256 amount) onlyOwner public returns(bool result){\n', '      if(releaseTime!=0){\n', '          require(block.timestamp < releaseTime);\n', '      }\n', '      require(tokenTotal == token.balanceOf(this));\n', '      balances[investor] = balances[investor].add(amount);\n', '      tokenTotal = tokenTotal.add(amount);\n', '\n', '      if(tokenTotal>token.balanceOf(this)){\n', '          token.safeTransferFrom(msg.sender,this,amount);\n', '      }\n', '      return true;\n', '  }\n', '\n', '  \n', '  \n', '  function release() public {\n', '    require(releaseTime!=0);\n', '    require(block.timestamp >= releaseTime);\n', '    require(balances[msg.sender] > 0);\n', '\n', '    //60*60*24*30*3 second = 1 quarter,If the time difference is more than 1 quarters, it means that it has been released 1 times.\n', '    uint256 released_times = (block.timestamp-releaseTime).div(60*60*24*30*3); \n', '    uint256 _amount = 0;\n', '    uint256 lock_quarter = 0;\n', '    \n', '    if(msg.sender!=sponsor){\n', '        //The white paper stipulates that investors&#39; balance needs to be locked up for 1.5 years and released on a quarterly average.So 1.5 years =18 months =6 quarter\n', '        lock_quarter = 6 ;\n', '    }else{\n', '         //The white paper stipulates that sponsor&#39; balance needs to be locked up for 3 years and released on a quarterly average.So 3 years =36 months =12 quarter\n', '        lock_quarter = 12;\n', '    }\n', '    \n', '    if(withdrawAmounts[msg.sender]==0){\n', '        withdrawAmounts[msg.sender]= balances[msg.sender].div(lock_quarter);\n', '    }\n', '    \n', '    if(released_times>=lock_quarter){\n', '        _amount = balances[msg.sender];\n', '    }else{\n', '        _amount = balances[msg.sender].sub(withdrawAmounts[msg.sender].mul(lock_quarter.sub(released_times+1)));\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    tokenTotal = tokenTotal.sub(_amount);\n', '    token.safeTransfer(msg.sender, _amount);\n', '  }\n', '}']