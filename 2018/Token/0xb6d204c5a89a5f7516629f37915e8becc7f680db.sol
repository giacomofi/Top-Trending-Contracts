['pragma solidity 0.4.24;\n', '\n', 'contract AbcdEfg {\n', '\n', '  mapping (address => uint256) private balances;\n', '  mapping (address => uint256) private marked;\n', '  uint256 private totalSupply_ = 1000;\n', '  uint256 private markId = 0;\n', '\n', '  mapping (uint256 => bytes) public marks;\n', '  string public constant name = "abcdEfg";\n', '  string public constant symbol = "a2g";\n', '  uint8 public constant decimals = 0;\n', '  string public constant memo = "Fit in the words here!Fit in the words here!Fit in the words here!Fit in the words here!";\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '  \n', '  constructor() public {\n', '    balances[msg.sender] = totalSupply_;\n', '  } \n', '  \n', '  function () public {\n', '      mark();\n', '  }\n', '\n', '  function mark() internal {\n', '    markId ++;\n', '    marked[msg.sender] ++;\n', '    marks[markId] = abi.encodePacked(msg.sender, msg.data);\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value + marked[msg.sender] <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender] - _value;\n', '    balances[_to] = balances[_to] + _value;\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '}']