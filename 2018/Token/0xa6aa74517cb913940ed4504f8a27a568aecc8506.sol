['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Enlist {\n', '  struct Record {\n', '    address investor;\n', '    bytes32 _type;\n', '  }\n', '\n', '  Record[] records;\n', '\n', '  function setRecord (\n', '    address _investor,\n', '    bytes32 _type\n', '  ) internal {\n', '    records.push(Record(_investor, _type));\n', '  }\n', '\n', '  function getRecordCount () constant\n', '  public\n', '  returns (uint) {\n', '    return records.length;\n', '  }\n', '\n', '  function getRecord (uint index) view\n', '  public\n', '  returns (address, bytes32) {\n', '    return (\n', '      records[index].investor,\n', '      records[index]._type\n', '    );\n', '  }\n', '}\n', '\n', '\n', '/* CONSTANTS:\n', ' *    20\n', ' */\n', 'contract JinVestingRule {\n', '  struct Rule {\n', '    bytes32 name;\n', '    bytes32 cliffStr;\n', '    uint256 cliff;\n', '    uint256 baseRatio; /* 第一個月解鎖 */\n', '    uint256 incrRatio; /* 第二個月開始每月解鎖 */\n', '  }\n', '\n', '  uint public period;\n', '  uint public ruleCount;\n', '  Rule[20+1] public rules;\n', '  mapping(bytes32 => uint) ruleNumbering;\n', '\n', '  constructor () public {\n', '    uint j = 0;\n', '    /* skip index j==0 */\n', "    rules[++j] = Rule('PRESALE1' , '2018-12-01', 1543622400,  20, 10); /* 私人配售 */\n", "    rules[++j] = Rule('PRESALE2' , '2019-02-01', 1548979200,  20, 10);\n", "    rules[++j] = Rule('PRESALE3' , '2019-04-01', 1554076800,  20, 10);\n", "    rules[++j] = Rule('PRESALE4' , '2019-06-01', 1559347200,  20, 10);\n", "    rules[++j] = Rule('PRESALE5' , '2019-08-01', 1564617600,  20, 10);\n", "    rules[++j] = Rule('CROWDSALE', '2019-09-01', 1567296000, 100,  0); /* 公開預售 */\n", "    rules[++j] = Rule('STARTUP'  , '2020-01-01', 1577836800,  10, 10); /* 創始團隊 */\n", "    rules[++j] = Rule('TECHTEAM' , '2019-09-01', 1567296000,  10, 10); /* 技術平台 */\n", '    ruleCount = j;\n', '    for (uint i = 1; i <= ruleCount; i++) {\n', '      ruleNumbering[rules[i].name] = i;\n', '    }\n', '    period = 30 days;\n', '\n', '\n', '\n', '\n', '  }\n', '\n', ' modifier validateRuleName(bytes32 key) {\n', '   require(ruleNumbering[key] != 0);\n', '   _;\n', ' }\n', '\n', ' modifier validateRuleIndex(uint i) {\n', '   require(1 <= i && i <= ruleCount);\n', '   _;\n', ' }\n', '\n', '  function getRule (bytes32 key)\n', '  public view\n', '  validateRuleName(key)\n', '  returns (\n', '    string str_name,\n', '    string str_cliffStr,\n', '    uint256 cliff,\n', '    uint256 baseRatio,\n', '    uint256 incrRatio\n', '  ) {\n', '    return (\n', '      bytes32ToString(rules[ruleNumbering[key]].name),\n', '      bytes32ToString(rules[ruleNumbering[key]].cliffStr),\n', '      rules[ruleNumbering[key]].cliff,\n', '      rules[ruleNumbering[key]].baseRatio,\n', '      rules[ruleNumbering[key]].incrRatio\n', '    );\n', '  }\n', '\n', '  function getRuleIndexByName (bytes32 key)\n', '  public view\n', '  validateRuleName(key)\n', '  returns (uint) {\n', '    return ruleNumbering[key];\n', '  }\n', '\n', '  /* ref\n', '   * https://ethereum.stackexchange.com/questions/29295/how-to-convert-a-bytes-to-string-in-solidity?rq=1\n', '   */\n', '  function bytes32ToString(bytes32 x)\n', '  public pure\n', '  returns (string) {\n', '    bytes memory bytesString = new bytes(32);\n', '    uint charCount = 0;\n', '    for (uint j = 0; j < 32; j++) {\n', '      byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '      if (char != 0) {\n', '        bytesString[charCount] = char;\n', '        charCount++;\n', '      }\n', '    }\n', '    bytes memory bytesStringTrimmed = new bytes(charCount);\n', '    for (j = 0; j < charCount; j++) {\n', '      bytesStringTrimmed[j] = bytesString[j];\n', '    }\n', '    return string(bytesStringTrimmed);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '    return _a >= _b ? _a : _b;\n', '  }\n', '\n', '  function min64(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '    return _a < _b ? _a : _b;\n', '  }\n', '\n', '  function max256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a >= _b ? _a : _b;\n', '  }\n', '\n', '  function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a < _b ? _a : _b;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract JinToken is\n', '  StandardToken,\n', '  DetailedERC20,\n', '  Ownable,\n', '  JinVestingRule,\n', '  Enlist {\n', '  using SafeMath for uint;\n', '  using Math for uint;\n', '\n', '  uint public INITIAL_SUPPLY;\n', '\n', '  mapping (address => mapping (bytes32 => uint)) private lockedAmount;\n', '  mapping (address => mapping (bytes32 => uint)) private alreadyClaim;\n', '\n', '  // How many token units a buyer gets per microether.\n', '  // The rate is the conversion between\n', '  //    microeather and\n', '  //    the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with 5 decimals called KIM\n', '  // 1 microether will give you 1 unit, or 0.00001 KIM.\n', '  uint public rate;  // Crowdsale\n', '\n', '  constructor (\n', '    string _name,     // "jinyitong"\n', '    string _symbol,   // "JIN", "KIN", "BGC"\n', '    uint8 _decimals,  // 5\n', '    address _startup,\n', '    address _angelfund,\n', '    address _techteam\n', '  )\n', '  DetailedERC20(\n', '    _name,\n', '    _symbol,\n', '    _decimals\n', '  )\n', '  JinVestingRule()\n', '  public {\n', '    rate = 30;\n', '    INITIAL_SUPPLY = 3.14e8;                 // 三億一千四百萬 (314000000)\n', '    totalSupply_ = INITIAL_SUPPLY.mul(10 ** uint(decimals)); // BasicToken\n', '    balances[msg.sender] = totalSupply_;                     // BasicToken\n', '\n', '    /* initial transferToLock */\n', '    uint jins = 0;\n', '\n', '    jins = totalSupply_.div(100).mul(20);\n', "    _transferToLock(_startup, jins, 'STARTUP');\n", '\n', '    jins = totalSupply_.div(100).mul(15);\n', "    transfer(_angelfund, jins); // _transferToLock(_angelfund, jins, 'ANGELFUND');\n", '\n', '    jins = totalSupply_.div(100).mul(5);\n', "    _transferToLock(_techteam, jins, 'TECHTEAM');\n", '  }\n', '\n', '  event TransferToLock (\n', '    address indexed to,\n', '    uint value,\n', '    string lockingType,\n', '    uint totalLocked\n', '  );\n', '\n', '  event DoubleClaim (\n', '    address indexed user,\n', '    bytes32 _type,\n', '    address sender\n', '  );\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner); // Ownable\n', '    _;\n', '  }\n', '\n', '  /* Crowdsale */\n', '  function ()\n', '  external\n', '  payable {\n', '\n', '    address user = msg.sender;\n', '    uint jins = _getTokenAmount(msg.value);\n', '\n', '    require(jins >= 0);\n', '\n', "    _transferToLock(user, jins, 'CROWDSALE');\n", '  }\n', '\n', '  function _getTokenAmount(uint weiAmount) internal view returns (uint) {\n', '    uint _microAmount = weiAmount.div(10 ** 12);\n', '    return _microAmount.mul(rate);\n', '  }\n', '\n', '  function setCrowdsaleRate(uint _rate) public onlyOwner() returns (bool) {\n', '    rate = _rate;\n', '    return true;\n', '  }\n', '\n', '  function transferToLock (\n', '    address user,\n', '    uint amount,\n', '    bytes32 _type\n', '  ) public\n', '  onlyOwner()\n', '  validateRuleName(_type)\n', '  returns (bool) {\n', '    _transferToLock(user, amount, _type);\n', '    return true;\n', '  }\n', '\n', '  function _transferToLock (\n', '    address _to,\n', '    uint _value,\n', '    bytes32 _type\n', '  ) internal\n', '  returns (bool) {\n', '    address _from = owner;\n', '\n', '    require(_value > 0);\n', '    require(_value <= balances[_from]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    lockedAmount[_to][_type] = lockedAmount[_to][_type].add(_value);\n', '\n', '    emit TransferToLock(_to, _value, bytes32ToString(_type), lockedAmount[_to][_type]);\n', '\n', '    setRecord(_to, _type);\n', '\n', '    return true;\n', '  }\n', '\n', '  function claimToken (\n', '    address user,\n', '    bytes32 _type\n', '  ) public\n', '  validateRuleName(_type)\n', '  returns (bool) {\n', '    require(lockedAmount[user][_type] > 0);\n', '    uint approved = approvedRatio(_type);\n', '    uint availableToClaim =\n', '      lockedAmount[user][_type].mul(approved).div(100);\n', '    uint amountToClaim = availableToClaim.sub(alreadyClaim[user][_type]);\n', '\n', '    if (amountToClaim > 0) {\n', '      balances[user] = balances[user].add(amountToClaim);\n', '      alreadyClaim[user][_type] = availableToClaim;\n', '    } else if (amountToClaim == 0) {\n', '      emit DoubleClaim(\n', '        user,\n', '        _type,\n', '        msg.sender\n', '      );\n', '    } else {\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function approvedRatio (\n', '    bytes32 _type\n', '  ) internal view returns (uint) {\n', '      uint _now = getTime();\n', '      uint cliff = rules[ruleNumbering[_type]].cliff;\n', '\n', '      require(_now >= cliff);\n', '\n', '      uint baseRatio = rules[ruleNumbering[_type]].baseRatio;\n', '      uint incrRatio = rules[ruleNumbering[_type]].incrRatio;\n', '\n', '      return Math.min256(\n', '        100,\n', '        _now\n', '        .sub( cliff )\n', '        .div( period ) // a month\n', '        .mul( incrRatio )\n', '        .add( baseRatio )\n', '      );\n', '  }\n', '\n', '  function getLockedAvailable (\n', '    address user,\n', '    bytes32 _type\n', '  ) public view\n', '  validateRuleName(_type)\n', '  returns (uint) {\n', '    uint record;\n', '\n', '    record = lockedAmount[user][_type].sub(alreadyClaim[user][_type]);\n', '\n', '    return record;\n', '  }\n', '\n', '  function getTime () public view returns (uint) {\n', '    return block.timestamp; // now\n', '  }\n', '}']