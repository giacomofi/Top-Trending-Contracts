['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error.\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization\n', ' *      control functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    // Public variable with address of owner\n', '    address public owner;\n', '\n', '    /**\n', '     * Log ownership transference\n', '     */\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the\n', '     *      contract to the sender account.\n', '     */\n', '    function Ownable() public {\n', '        // Set the contract creator as the owner\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        // Check that sender is owner\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        // Check for a non-null owner\n', '        require(newOwner != address(0));\n', '        // Log ownership transference\n', '        OwnershipTransferred(owner, newOwner);\n', '        // Set new owner\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Qwasder Token contract.\n', ' * @dev Custom ERC20 Token.\n', ' */\n', 'contract QwasderToken is ERC20Basic, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * BasicToken data.\n', '     */\n', '    uint256 public totalSupply_ = 0;\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '     * StandardToken data.\n', '     */\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * MintableToken data.\n', '     */\n', '    bool public mintingFinished = false;\n', '\n', '    /**\n', '     * GrantableToken modifiers.\n', '     */\n', '    uint256 public grantsUnlock = 1523318400; // Tue, 10 Apr 2018 00:00:00 +0000 (GMT)\n', '    uint256 public reservedSupply = 20000000000000000000000000;\n', '    // -------------------------------------^\n', '\n', '    /**\n', '     * CappedToken data.\n', '     */\n', '    uint256 public cap = 180000000000000000000000000;\n', '    // ---------------------------^\n', '\n', '    /**\n', '     * DetailedERC20 data.\n', '     */\n', '    string public name     = "Qwasder";\n', '    string public symbol   = "QWS";\n', '    uint8  public decimals = 18;\n', '\n', '    /**\n', '     * QwasderToken data.\n', '     */\n', '    mapping (address => bool) partners;\n', '    mapping (address => bool) blacklisted;\n', '    mapping (address => bool) freezed;\n', '    uint256 public publicRelease   = 1525046400; // Mon, 30 Apr 2018 00:00:00 +0000 (GMT)\n', '    uint256 public partnersRelease = 1539129600; // Wed, 10 Oct 2018 00:00:00 +0000 (GMT)\n', '    uint256 public hardcap = 200000000000000000000000000;\n', '    // -------------------------------^\n', '\n', '    /**\n', '     * ERC20Basic events.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * ERC20 events.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /**\n', '     * MintableToken events.\n', '     */\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    /**\n', '     * GrantableToken events.\n', '     */\n', '    event Grant(address indexed to, uint256 amount);\n', '\n', '    /**\n', '     * BurnableToken events.\n', '     */\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * QwasderToken events.\n', '     */\n', '    event UpdatedPublicReleaseDate(uint256 date);\n', '    event UpdatedPartnersReleaseDate(uint256 date);\n', '    event UpdatedGrantsLockDate(uint256 date);\n', '    event Blacklisted(address indexed account);\n', '    event Freezed(address indexed investor);\n', '    event PartnerAdded(address indexed investor);\n', '    event PartnerRemoved(address indexed investor);\n', '    event Unfreezed(address indexed investor);\n', '\n', '    /**\n', '     * Initializes contract.\n', '     */\n', '    function QwasderToken() public {\n', '        assert(reservedSupply < cap && reservedSupply.add(cap) == hardcap);\n', '        assert(publicRelease <= partnersRelease);\n', '        assert(grantsUnlock < partnersRelease);\n', '    }\n', '\n', '    /**\n', '     * MintableToken modifiers.\n', '     */\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * GrantableToken modifiers.\n', '     */\n', '\n', '    modifier canGrant() {\n', '        require(now >= grantsUnlock && reservedSupply > 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * ERC20Basic interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Gets the total raised token supply.\n', '     */\n', '    function totalSupply() public view returns (uint256 total) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param investor The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address investor) public view returns (uint256 balance) {\n', '        return balances[investor];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to a specified address.\n', '     * @param to The address which you want to transfer to.\n', '     * @param amount The amount of tokens to be transferred.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function transfer(address to, uint256 amount) public returns (bool success) {\n', '        require(!freezed[msg.sender] && !blacklisted[msg.sender]);\n', '        require(to != address(0) && !freezed[to] && !blacklisted[to]);\n', '        require((!partners[msg.sender] && now >= publicRelease) || now >= partnersRelease);\n', '        require(0 < amount && amount <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * ERC20 interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param holder The address which owns the funds.\n', '     * @param spender The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address holder, address spender) public view returns (uint256 remaining) {\n', '        return allowed[holder][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *      Beware that changing an allowance with this method brings the risk that someone may use both\n', '     *      the old and the new allowance by unfortunate transaction ordering. One possible solution to\n', '     *      mitigate this race condition is to first reduce the spender&#39;s allowance to 0 and set the\n', '     *      desired value afterwards.\n', '     * @param spender The address which will spend the funds.\n', '     * @param amount The amount of tokens to be spent.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool success) {\n', '        allowed[msg.sender][spender] = amount;\n', '        Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * @param from The address which you want to send tokens from.\n', '     * @param to The address which you want to transfer to.\n', '     * @param amount The amount of tokens to be transferred.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function transferFrom(address from, address to, uint256 amount) public returns (bool success) {\n', '        require(!blacklisted[msg.sender]);\n', '        require(to != address(0) && !freezed[to] && !blacklisted[to]);\n', '        require(from != address(0) && !freezed[from] && !blacklisted[from]);\n', '        require((!partners[from] && now >= publicRelease) || now >= partnersRelease);\n', '        require(0 < amount && amount <= balances[from]);\n', '        require(amount <= allowed[from][msg.sender]);\n', '        balances[from] = balances[from].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\n', '        Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * StandardToken interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * @param spender The address which will spend the funds.\n', '     * @param amount The amount of token to be decreased, in fraction units.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function decreaseApproval(address spender, uint256 amount) public returns (bool success) {\n', '        uint256 oldValue = allowed[msg.sender][spender];\n', '        if (amount > oldValue) {\n', '            allowed[msg.sender][spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][spender] = oldValue.sub(amount);\n', '        }\n', '        Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *      approve should be called when allowance(owner, spender) == 0. To\n', '     *      increment allowed value is better to use this function to avoid 2\n', '     *      calls (and wait until the first transaction is mined).\n', '     * @param spender The address which will spend the funds.\n', '     * @param amount The amount of token to be increased, in fraction units.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function increaseApproval(address spender, uint amount) public returns (bool success) {\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(amount);\n', '        Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * MintableToken interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Function to mint tokens to investors.\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param amount The amount of tokens to mint, in fraction units.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 amount) onlyOwner canMint public returns (bool success) {\n', '        require(!freezed[to] && !blacklisted[to] && !partners[to]);\n', '        uint256 total = totalSupply_.add(amount);\n', '        require(total <= cap);\n', '        totalSupply_ = total;\n', '        balances[to] = balances[to].add(amount);\n', '        Mint(to, amount);\n', '        Transfer(address(0), to, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner public returns (bool success) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * GrantableToken interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Function to mint tokens to partners (grants), including up to reserved tokens.\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param amount The amount of tokens to mint, in fraction units.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function grant(address to, uint256 amount) onlyOwner canGrant public returns (bool success) {\n', '        require(!freezed[to] && !blacklisted[to] && partners[to]);\n', '        require(amount <= reservedSupply);\n', '        totalSupply_ = totalSupply_.add(amount);\n', '        reservedSupply = reservedSupply.sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        Grant(to, amount);\n', '        Transfer(address(0), to, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * BurnableToken interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param amount The amount of token to be burned, in fraction units.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function burn(uint256 amount) public returns (bool success) {\n', '        require(!freezed[msg.sender]);\n', '        require((!partners[msg.sender] && now >= publicRelease) || now >= partnersRelease);\n', '        require(amount > 0 && amount <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        totalSupply_ = totalSupply_.sub(amount);\n', '        Burn(msg.sender, amount);\n', '        Transfer(msg.sender, address(0), amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * QwasderToken interface.\n', '     */\n', '\n', '    /**\n', '     * Add a new partner.\n', '     */\n', '    function addPartner(address investor) onlyOwner public returns (bool) {\n', '        require(investor != address(0));\n', '        require(!partners[investor] && !blacklisted[investor] && balances[investor] == 0);\n', '        partners[investor] = true;\n', '        PartnerAdded(investor);\n', '        return partners[investor];\n', '    }\n', '\n', '    /**\n', '     * Remove a partner.\n', '     */\n', '    function removePartner(address investor) onlyOwner public returns (bool) {\n', '        require(partners[investor] && balances[investor] == 0);\n', '        partners[investor] = false;\n', '        PartnerRemoved(investor);\n', '        return !partners[investor];\n', '    }\n', '\n', '    /**\n', '     * Freeze permanently an investor.\n', '     * WARNING: This will burn out any token sold to the blacklisted account.\n', '     */\n', '    function blacklist(address account) onlyOwner public returns (bool) {\n', '        require(account != address(0));\n', '        require(!blacklisted[account]);\n', '        blacklisted[account] = true;\n', '        totalSupply_ = totalSupply_.sub(balances[account]);\n', '        uint256 amount = balances[account];\n', '        balances[account] = 0;\n', '        Blacklisted(account);\n', '        Burn(account, amount);\n', '        return blacklisted[account];\n', '    }\n', '\n', '    /**\n', '     * Freeze (temporarily) an investor.\n', '     */\n', '    function freeze(address investor) onlyOwner public returns (bool) {\n', '        require(investor != address(0));\n', '        require(!freezed[investor]);\n', '        freezed[investor] = true;\n', '        Freezed(investor);\n', '        return freezed[investor];\n', '    }\n', '\n', '    /**\n', '     * Unfreeze an investor.\n', '     */\n', '    function unfreeze(address investor) onlyOwner public returns (bool) {\n', '        require(freezed[investor]);\n', '        freezed[investor] = false;\n', '        Unfreezed(investor);\n', '        return !freezed[investor];\n', '    }\n', '\n', '    /**\n', '     * @dev Set a new release date for investor&#39;s transfers.\n', '     *      Must be executed before the current release date, and the new\n', '     *      date must be a later one. Up to one more week for security reasons.\n', '     * @param date UNIX timestamp of the new release date for investor&#39;s transfers.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function setPublicRelease(uint256 date) onlyOwner public returns (bool success) {\n', '        require(now < publicRelease && date > publicRelease);\n', '        require(date.sub(publicRelease) <= 604800);\n', '        publicRelease = date;\n', '        assert(publicRelease <= partnersRelease);\n', '        UpdatedPublicReleaseDate(date);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Set a new release date for partners&#39; transfers.\n', '     *      Must be executed before the current release date, and the new\n', '     *      date must be a later one. Up to one more week for security reasons.\n', '     * @param date UNIX timestamp of the new release date for partners&#39; transfers.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function setPartnersRelease(uint256 date) onlyOwner public returns (bool success) {\n', '        require(now < partnersRelease && date > partnersRelease);\n', '        require(date.sub(partnersRelease) <= 604800);\n', '        partnersRelease = date;\n', '        assert(grantsUnlock < partnersRelease);\n', '        UpdatedPartnersReleaseDate(date);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to set a new unlock date for partners&#39; minting grants.\n', '     *      Must be executed before the current unlock date, and the new\n', '     *      date must be a later one. Up to one more week for security reasons.\n', '     * @param date UNIX timestamp of the new unlock date for partners&#39; grants.\n', '     * @param extendLocking boolean value, true to extend the locking periods,\n', '     *        false to leave the current dates.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function setGrantsUnlock(uint256 date, bool extendLocking) onlyOwner public returns (bool success) {\n', '        require(now < grantsUnlock && date > grantsUnlock);\n', '        if (extendLocking) {\n', '          uint256 delay = date.sub(grantsUnlock);\n', '          require(delay <= 604800);\n', '          grantsUnlock = date;\n', '          publicRelease = publicRelease.add(delay);\n', '          partnersRelease = partnersRelease.add(delay);\n', '          assert(publicRelease <= partnersRelease);\n', '          assert(grantsUnlock < partnersRelease);\n', '          UpdatedPublicReleaseDate(publicRelease);\n', '          UpdatedPartnersReleaseDate(partnersRelease);\n', '        }\n', '        else {\n', '          // Can set a date more than one week later, provided it is before the release date.\n', '          grantsUnlock = date;\n', '          assert(grantsUnlock < partnersRelease);\n', '        }\n', '        UpdatedGrantsLockDate(date);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to extend the transfer locking periods up to one more\n', '     *      week. Must be executed before the current public release date.\n', '     * @param delay The amount of hours to extend the locking period.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function extendLockPeriods(uint delay, bool extendGrantLock) onlyOwner public returns (bool success) {\n', '        require(now < publicRelease && 0 < delay && delay <= 168);\n', '        delay = delay * 3600;\n', '        publicRelease = publicRelease.add(delay);\n', '        partnersRelease = partnersRelease.add(delay);\n', '        assert(publicRelease <= partnersRelease);\n', '        UpdatedPublicReleaseDate(publicRelease);\n', '        UpdatedPartnersReleaseDate(partnersRelease);\n', '        if (extendGrantLock) {\n', '            grantsUnlock = grantsUnlock.add(delay);\n', '            assert(grantsUnlock < partnersRelease);\n', '            UpdatedGrantsLockDate(grantsUnlock);\n', '        }\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error.\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization\n', ' *      control functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    // Public variable with address of owner\n', '    address public owner;\n', '\n', '    /**\n', '     * Log ownership transference\n', '     */\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the\n', '     *      contract to the sender account.\n', '     */\n', '    function Ownable() public {\n', '        // Set the contract creator as the owner\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        // Check that sender is owner\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        // Check for a non-null owner\n', '        require(newOwner != address(0));\n', '        // Log ownership transference\n', '        OwnershipTransferred(owner, newOwner);\n', '        // Set new owner\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Qwasder Token contract.\n', ' * @dev Custom ERC20 Token.\n', ' */\n', 'contract QwasderToken is ERC20Basic, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * BasicToken data.\n', '     */\n', '    uint256 public totalSupply_ = 0;\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '     * StandardToken data.\n', '     */\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * MintableToken data.\n', '     */\n', '    bool public mintingFinished = false;\n', '\n', '    /**\n', '     * GrantableToken modifiers.\n', '     */\n', '    uint256 public grantsUnlock = 1523318400; // Tue, 10 Apr 2018 00:00:00 +0000 (GMT)\n', '    uint256 public reservedSupply = 20000000000000000000000000;\n', '    // -------------------------------------^\n', '\n', '    /**\n', '     * CappedToken data.\n', '     */\n', '    uint256 public cap = 180000000000000000000000000;\n', '    // ---------------------------^\n', '\n', '    /**\n', '     * DetailedERC20 data.\n', '     */\n', '    string public name     = "Qwasder";\n', '    string public symbol   = "QWS";\n', '    uint8  public decimals = 18;\n', '\n', '    /**\n', '     * QwasderToken data.\n', '     */\n', '    mapping (address => bool) partners;\n', '    mapping (address => bool) blacklisted;\n', '    mapping (address => bool) freezed;\n', '    uint256 public publicRelease   = 1525046400; // Mon, 30 Apr 2018 00:00:00 +0000 (GMT)\n', '    uint256 public partnersRelease = 1539129600; // Wed, 10 Oct 2018 00:00:00 +0000 (GMT)\n', '    uint256 public hardcap = 200000000000000000000000000;\n', '    // -------------------------------^\n', '\n', '    /**\n', '     * ERC20Basic events.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * ERC20 events.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /**\n', '     * MintableToken events.\n', '     */\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    /**\n', '     * GrantableToken events.\n', '     */\n', '    event Grant(address indexed to, uint256 amount);\n', '\n', '    /**\n', '     * BurnableToken events.\n', '     */\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * QwasderToken events.\n', '     */\n', '    event UpdatedPublicReleaseDate(uint256 date);\n', '    event UpdatedPartnersReleaseDate(uint256 date);\n', '    event UpdatedGrantsLockDate(uint256 date);\n', '    event Blacklisted(address indexed account);\n', '    event Freezed(address indexed investor);\n', '    event PartnerAdded(address indexed investor);\n', '    event PartnerRemoved(address indexed investor);\n', '    event Unfreezed(address indexed investor);\n', '\n', '    /**\n', '     * Initializes contract.\n', '     */\n', '    function QwasderToken() public {\n', '        assert(reservedSupply < cap && reservedSupply.add(cap) == hardcap);\n', '        assert(publicRelease <= partnersRelease);\n', '        assert(grantsUnlock < partnersRelease);\n', '    }\n', '\n', '    /**\n', '     * MintableToken modifiers.\n', '     */\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * GrantableToken modifiers.\n', '     */\n', '\n', '    modifier canGrant() {\n', '        require(now >= grantsUnlock && reservedSupply > 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * ERC20Basic interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Gets the total raised token supply.\n', '     */\n', '    function totalSupply() public view returns (uint256 total) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param investor The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address investor) public view returns (uint256 balance) {\n', '        return balances[investor];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to a specified address.\n', '     * @param to The address which you want to transfer to.\n', '     * @param amount The amount of tokens to be transferred.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function transfer(address to, uint256 amount) public returns (bool success) {\n', '        require(!freezed[msg.sender] && !blacklisted[msg.sender]);\n', '        require(to != address(0) && !freezed[to] && !blacklisted[to]);\n', '        require((!partners[msg.sender] && now >= publicRelease) || now >= partnersRelease);\n', '        require(0 < amount && amount <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * ERC20 interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param holder The address which owns the funds.\n', '     * @param spender The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address holder, address spender) public view returns (uint256 remaining) {\n', '        return allowed[holder][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *      Beware that changing an allowance with this method brings the risk that someone may use both\n', '     *      the old and the new allowance by unfortunate transaction ordering. One possible solution to\n', "     *      mitigate this race condition is to first reduce the spender's allowance to 0 and set the\n", '     *      desired value afterwards.\n', '     * @param spender The address which will spend the funds.\n', '     * @param amount The amount of tokens to be spent.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool success) {\n', '        allowed[msg.sender][spender] = amount;\n', '        Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * @param from The address which you want to send tokens from.\n', '     * @param to The address which you want to transfer to.\n', '     * @param amount The amount of tokens to be transferred.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function transferFrom(address from, address to, uint256 amount) public returns (bool success) {\n', '        require(!blacklisted[msg.sender]);\n', '        require(to != address(0) && !freezed[to] && !blacklisted[to]);\n', '        require(from != address(0) && !freezed[from] && !blacklisted[from]);\n', '        require((!partners[from] && now >= publicRelease) || now >= partnersRelease);\n', '        require(0 < amount && amount <= balances[from]);\n', '        require(amount <= allowed[from][msg.sender]);\n', '        balances[from] = balances[from].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\n', '        Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * StandardToken interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * @param spender The address which will spend the funds.\n', '     * @param amount The amount of token to be decreased, in fraction units.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function decreaseApproval(address spender, uint256 amount) public returns (bool success) {\n', '        uint256 oldValue = allowed[msg.sender][spender];\n', '        if (amount > oldValue) {\n', '            allowed[msg.sender][spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][spender] = oldValue.sub(amount);\n', '        }\n', '        Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *      approve should be called when allowance(owner, spender) == 0. To\n', '     *      increment allowed value is better to use this function to avoid 2\n', '     *      calls (and wait until the first transaction is mined).\n', '     * @param spender The address which will spend the funds.\n', '     * @param amount The amount of token to be increased, in fraction units.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function increaseApproval(address spender, uint amount) public returns (bool success) {\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(amount);\n', '        Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * MintableToken interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Function to mint tokens to investors.\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param amount The amount of tokens to mint, in fraction units.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 amount) onlyOwner canMint public returns (bool success) {\n', '        require(!freezed[to] && !blacklisted[to] && !partners[to]);\n', '        uint256 total = totalSupply_.add(amount);\n', '        require(total <= cap);\n', '        totalSupply_ = total;\n', '        balances[to] = balances[to].add(amount);\n', '        Mint(to, amount);\n', '        Transfer(address(0), to, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner public returns (bool success) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * GrantableToken interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Function to mint tokens to partners (grants), including up to reserved tokens.\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param amount The amount of tokens to mint, in fraction units.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function grant(address to, uint256 amount) onlyOwner canGrant public returns (bool success) {\n', '        require(!freezed[to] && !blacklisted[to] && partners[to]);\n', '        require(amount <= reservedSupply);\n', '        totalSupply_ = totalSupply_.add(amount);\n', '        reservedSupply = reservedSupply.sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        Grant(to, amount);\n', '        Transfer(address(0), to, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * BurnableToken interface.\n', '     */\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param amount The amount of token to be burned, in fraction units.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function burn(uint256 amount) public returns (bool success) {\n', '        require(!freezed[msg.sender]);\n', '        require((!partners[msg.sender] && now >= publicRelease) || now >= partnersRelease);\n', '        require(amount > 0 && amount <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        totalSupply_ = totalSupply_.sub(amount);\n', '        Burn(msg.sender, amount);\n', '        Transfer(msg.sender, address(0), amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * QwasderToken interface.\n', '     */\n', '\n', '    /**\n', '     * Add a new partner.\n', '     */\n', '    function addPartner(address investor) onlyOwner public returns (bool) {\n', '        require(investor != address(0));\n', '        require(!partners[investor] && !blacklisted[investor] && balances[investor] == 0);\n', '        partners[investor] = true;\n', '        PartnerAdded(investor);\n', '        return partners[investor];\n', '    }\n', '\n', '    /**\n', '     * Remove a partner.\n', '     */\n', '    function removePartner(address investor) onlyOwner public returns (bool) {\n', '        require(partners[investor] && balances[investor] == 0);\n', '        partners[investor] = false;\n', '        PartnerRemoved(investor);\n', '        return !partners[investor];\n', '    }\n', '\n', '    /**\n', '     * Freeze permanently an investor.\n', '     * WARNING: This will burn out any token sold to the blacklisted account.\n', '     */\n', '    function blacklist(address account) onlyOwner public returns (bool) {\n', '        require(account != address(0));\n', '        require(!blacklisted[account]);\n', '        blacklisted[account] = true;\n', '        totalSupply_ = totalSupply_.sub(balances[account]);\n', '        uint256 amount = balances[account];\n', '        balances[account] = 0;\n', '        Blacklisted(account);\n', '        Burn(account, amount);\n', '        return blacklisted[account];\n', '    }\n', '\n', '    /**\n', '     * Freeze (temporarily) an investor.\n', '     */\n', '    function freeze(address investor) onlyOwner public returns (bool) {\n', '        require(investor != address(0));\n', '        require(!freezed[investor]);\n', '        freezed[investor] = true;\n', '        Freezed(investor);\n', '        return freezed[investor];\n', '    }\n', '\n', '    /**\n', '     * Unfreeze an investor.\n', '     */\n', '    function unfreeze(address investor) onlyOwner public returns (bool) {\n', '        require(freezed[investor]);\n', '        freezed[investor] = false;\n', '        Unfreezed(investor);\n', '        return !freezed[investor];\n', '    }\n', '\n', '    /**\n', "     * @dev Set a new release date for investor's transfers.\n", '     *      Must be executed before the current release date, and the new\n', '     *      date must be a later one. Up to one more week for security reasons.\n', "     * @param date UNIX timestamp of the new release date for investor's transfers.\n", '     * @return True if the operation was successful.\n', '     */\n', '    function setPublicRelease(uint256 date) onlyOwner public returns (bool success) {\n', '        require(now < publicRelease && date > publicRelease);\n', '        require(date.sub(publicRelease) <= 604800);\n', '        publicRelease = date;\n', '        assert(publicRelease <= partnersRelease);\n', '        UpdatedPublicReleaseDate(date);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * @dev Set a new release date for partners' transfers.\n", '     *      Must be executed before the current release date, and the new\n', '     *      date must be a later one. Up to one more week for security reasons.\n', "     * @param date UNIX timestamp of the new release date for partners' transfers.\n", '     * @return True if the operation was successful.\n', '     */\n', '    function setPartnersRelease(uint256 date) onlyOwner public returns (bool success) {\n', '        require(now < partnersRelease && date > partnersRelease);\n', '        require(date.sub(partnersRelease) <= 604800);\n', '        partnersRelease = date;\n', '        assert(grantsUnlock < partnersRelease);\n', '        UpdatedPartnersReleaseDate(date);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * @dev Function to set a new unlock date for partners' minting grants.\n", '     *      Must be executed before the current unlock date, and the new\n', '     *      date must be a later one. Up to one more week for security reasons.\n', "     * @param date UNIX timestamp of the new unlock date for partners' grants.\n", '     * @param extendLocking boolean value, true to extend the locking periods,\n', '     *        false to leave the current dates.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function setGrantsUnlock(uint256 date, bool extendLocking) onlyOwner public returns (bool success) {\n', '        require(now < grantsUnlock && date > grantsUnlock);\n', '        if (extendLocking) {\n', '          uint256 delay = date.sub(grantsUnlock);\n', '          require(delay <= 604800);\n', '          grantsUnlock = date;\n', '          publicRelease = publicRelease.add(delay);\n', '          partnersRelease = partnersRelease.add(delay);\n', '          assert(publicRelease <= partnersRelease);\n', '          assert(grantsUnlock < partnersRelease);\n', '          UpdatedPublicReleaseDate(publicRelease);\n', '          UpdatedPartnersReleaseDate(partnersRelease);\n', '        }\n', '        else {\n', '          // Can set a date more than one week later, provided it is before the release date.\n', '          grantsUnlock = date;\n', '          assert(grantsUnlock < partnersRelease);\n', '        }\n', '        UpdatedGrantsLockDate(date);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to extend the transfer locking periods up to one more\n', '     *      week. Must be executed before the current public release date.\n', '     * @param delay The amount of hours to extend the locking period.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function extendLockPeriods(uint delay, bool extendGrantLock) onlyOwner public returns (bool success) {\n', '        require(now < publicRelease && 0 < delay && delay <= 168);\n', '        delay = delay * 3600;\n', '        publicRelease = publicRelease.add(delay);\n', '        partnersRelease = partnersRelease.add(delay);\n', '        assert(publicRelease <= partnersRelease);\n', '        UpdatedPublicReleaseDate(publicRelease);\n', '        UpdatedPartnersReleaseDate(partnersRelease);\n', '        if (extendGrantLock) {\n', '            grantsUnlock = grantsUnlock.add(delay);\n', '            assert(grantsUnlock < partnersRelease);\n', '            UpdatedGrantsLockDate(grantsUnlock);\n', '        }\n', '        return true;\n', '    }\n', '\n', '}']
