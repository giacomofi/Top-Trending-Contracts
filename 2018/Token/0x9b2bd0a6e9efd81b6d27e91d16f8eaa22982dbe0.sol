['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0);\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '    function balanceOf(address _owner) public view returns (uint);\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Burn(address indexed _from, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(address => uint) balances;\n', '\n', '    function balanceOf(address _owner) public view returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value > balances[_to]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        require(_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0x0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint _value, address _token, bytes _data) public;\n', '}\n', '\n', 'contract BurnCoinToken is StandardToken, Ownable {\n', '    string public constant name = &#39;Burn Coin&#39;;\n', '    string public constant symbol = &#39;BRN&#39;;\n', '    uint public constant decimals = 8;\n', '    uint public totalSupply = 500000000 * 10 ** uint(decimals); //500,000,000\n', '    mapping (address => bool) public frozenAccounts;\n', '\n', '    event FrozenFunds(address _target, bool frozen);\n', '\n', '    function BurnCoinToken () public {\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0x0), msg.sender, totalSupply);\n', '    }\n', '\n', '    modifier validateDestination(address _to) {\n', '        require(_to != address(0x0));\n', '        require(_to != address(this));\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) validateDestination(_to) public returns (bool) {\n', '        require(!frozenAccounts[msg.sender]);\n', '        require(!frozenAccounts[_to]);\n', '        uint previousBalances = balances[msg.sender] + balances[_to];\n', '        bool transferResult = super.transfer(_to, _value);\n', '        assert(balances[msg.sender] + balances[_to] == previousBalances);\n', '        return transferResult;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        require(!frozenAccounts[_from]);\n', '        require(!frozenAccounts[_to]);\n', '        bool transferResult = super.transferFrom(_from, _to, _value);\n', '\n', '    }\n', '\n', '    function burn(uint _value) public returns (bool) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint _value) public returns (bool) {\n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0);\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '    function balanceOf(address _owner) public view returns (uint);\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Burn(address indexed _from, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(address => uint) balances;\n', '\n', '    function balanceOf(address _owner) public view returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value > balances[_to]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        require(_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0x0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint _value, address _token, bytes _data) public;\n', '}\n', '\n', 'contract BurnCoinToken is StandardToken, Ownable {\n', "    string public constant name = 'Burn Coin';\n", "    string public constant symbol = 'BRN';\n", '    uint public constant decimals = 8;\n', '    uint public totalSupply = 500000000 * 10 ** uint(decimals); //500,000,000\n', '    mapping (address => bool) public frozenAccounts;\n', '\n', '    event FrozenFunds(address _target, bool frozen);\n', '\n', '    function BurnCoinToken () public {\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0x0), msg.sender, totalSupply);\n', '    }\n', '\n', '    modifier validateDestination(address _to) {\n', '        require(_to != address(0x0));\n', '        require(_to != address(this));\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) validateDestination(_to) public returns (bool) {\n', '        require(!frozenAccounts[msg.sender]);\n', '        require(!frozenAccounts[_to]);\n', '        uint previousBalances = balances[msg.sender] + balances[_to];\n', '        bool transferResult = super.transfer(_to, _value);\n', '        assert(balances[msg.sender] + balances[_to] == previousBalances);\n', '        return transferResult;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        require(!frozenAccounts[_from]);\n', '        require(!frozenAccounts[_to]);\n', '        bool transferResult = super.transferFrom(_from, _to, _value);\n', '\n', '    }\n', '\n', '    function burn(uint _value) public returns (bool) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint _value) public returns (bool) {\n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
