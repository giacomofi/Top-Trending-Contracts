['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179 */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20 */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure. */\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        ERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        require(token.approve(spender, value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the owner.*/\n', 'contract TokenVesting is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    event Released(uint256 amount);\n', '    event Revoked();\n', '\n', '    address public beneficiary;\n', '\n', '    uint256 public cliff;\n', '    uint256 public start;\n', '    uint256 public duration;\n', '\n', '    bool public revocable;\n', '\n', '    mapping (address => uint256) public released;\n', '    mapping (address => bool) public revoked;\n', '\n', '    constructor(\n', '        address _beneficiary,\n', '        uint256 _start,\n', '        uint256 _cliff,\n', '        uint256 _duration,\n', '        bool _revocable\n', '    )\n', '    public {\n', '        require(_beneficiary != address(0));\n', '        require(_cliff <= _duration);\n', '        beneficiary = _beneficiary;\n', '        revocable = _revocable;\n', '        duration = _duration;\n', '        cliff = _start.add(_cliff);\n', '        start = _start;\n', '    }\n', '\n', '    function release(ERC20Basic token) public {\n', '        uint256 unreleased = releasableAmount(token);\n', '\n', '        require(unreleased > 0);\n', '\n', '        released[token] = released[token].add(unreleased);\n', '\n', '        token.safeTransfer(beneficiary, unreleased);\n', '\n', '        emit Released(unreleased);\n', '    }\n', '\n', '    function revoke(ERC20Basic token) public onlyOwner {\n', '        require(revocable);\n', '        require(!revoked[token]);\n', '\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        uint256 unreleased = releasableAmount(token);\n', '        uint256 refund = balance.sub(unreleased);\n', '\n', '        revoked[token] = true;\n', '\n', '        token.safeTransfer(owner, refund);\n', '\n', '        emit Revoked();\n', '    }\n', '\n', '    function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '        return vestedAmount(token).sub(released[token]);\n', '    }\n', '\n', '    function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '        uint256 currentBalance = token.balanceOf(this);\n', '        uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '        if (block.timestamp < cliff) {\n', '            return 0;\n', '        } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n', '            return totalBalance;\n', '        } else {\n', '            return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '        }\n', '    }\n', '}']