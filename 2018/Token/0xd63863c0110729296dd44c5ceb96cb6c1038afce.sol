['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SimpleToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract LibraToken is StandardToken {\n', '\n', '    string public constant name = "LibraToken"; // solium-disable-line uppercase\n', '    string public constant symbol = "LBA"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    uint256 public constant INITIAL_SUPPLY = (10 ** 9) * (10 ** uint256(decimals));\n', '\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function LibraToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract LibraTokenVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    //Wallet Addresses for allocation\n', '    address public teamReserveWallet = 0x373c69fDedE072A3F5ab1843a0e5fE0102Cc6793;\n', '    address public firstReserveWallet = 0x99C83f62DBE1a488f9C9d370DA8e86EC55224eB4;\n', '    address public secondReserveWallet = 0x90DfF11810dA6227d348C86C59257C1C0033D307;\n', '\n', '    //Token Allocations\n', '    uint256 public teamReserveAllocation = 2 * (10 ** 8) * (10 ** 18);\n', '    uint256 public firstReserveAllocation = 15 * (10 ** 7) * (10 ** 18);\n', '    uint256 public secondReserveAllocation = 15 * (10 ** 7) * (10 ** 18);\n', '\n', '    //Total Token Allocations\n', '    uint256 public totalAllocation = 5 * (10 ** 8) * (10 ** 18);\n', '\n', '    uint256 public teamTimeLock = 2 * 365 days;\n', '    uint256 public teamVestingStages = 8;\n', '    uint256 public firstReserveTimeLock = 2 * 365 days;\n', '    uint256 public secondReserveTimeLock = 3 * 365 days;\n', '\n', '    /** Reserve allocations */\n', '    mapping(address => uint256) public allocations;\n', '\n', '    /** When timeLocks are over (UNIX Timestamp)  */  \n', '    mapping(address => uint256) public timeLocks;\n', '\n', '    /** How many tokens each reserve wallet has claimed */\n', '    mapping(address => uint256) public claimed;\n', '\n', '    /** When this vault was locked (UNIX Timestamp)*/\n', '    uint256 public lockedAt = 0;\n', '\n', '    LibraToken public token;\n', '\n', '    /** Allocated reserve tokens */\n', '    event Allocated(address wallet, uint256 value);\n', '\n', '    /** Distributed reserved tokens */\n', '    event Distributed(address wallet, uint256 value);\n', '\n', '    /** Tokens have been locked */\n', '    event Locked(uint256 lockTime);\n', '\n', '    //Any of the three reserve wallets\n', '    modifier onlyReserveWallets {\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only Libra team reserve wallet\n', '    modifier onlyTeamReserve {\n', '        require(msg.sender == teamReserveWallet);\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only first and second token reserve wallets\n', '    modifier onlyTokenReserve {\n', '        require(msg.sender == firstReserveWallet || msg.sender == secondReserveWallet);\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Has not been locked yet\n', '    modifier notLocked {\n', '        require(lockedAt == 0);\n', '        _;\n', '    }\n', '\n', '    modifier locked {\n', '        require(lockedAt > 0);\n', '        _;\n', '    }\n', '\n', '    //Token allocations have not been set\n', '    modifier notAllocated {\n', '        require(allocations[teamReserveWallet] == 0);\n', '        require(allocations[firstReserveWallet] == 0);\n', '        require(allocations[secondReserveWallet] == 0);\n', '        _;\n', '    }\n', '\n', '    function LibraTokenVault(ERC20 _token) public {\n', '\n', '        owner = msg.sender;\n', '        token = LibraToken(_token);\n', '        \n', '    }\n', '\n', '    function allocate() public notLocked notAllocated onlyOwner {\n', '\n', '        //Makes sure Token Contract has the exact number of tokens\n', '        require(token.balanceOf(address(this)) == totalAllocation);\n', '        \n', '        allocations[teamReserveWallet] = teamReserveAllocation;\n', '        allocations[firstReserveWallet] = firstReserveAllocation;\n', '        allocations[secondReserveWallet] = secondReserveAllocation;\n', '\n', '        Allocated(teamReserveWallet, teamReserveAllocation);\n', '        Allocated(firstReserveWallet, firstReserveAllocation);\n', '        Allocated(secondReserveWallet, secondReserveAllocation);\n', '\n', '        lock();\n', '    }\n', '\n', '    //Lock the vault for the three wallets\n', '    function lock() internal notLocked onlyOwner {\n', '\n', '        lockedAt = block.timestamp;\n', '\n', '        timeLocks[teamReserveWallet] = lockedAt.add(teamTimeLock);\n', '        timeLocks[firstReserveWallet] = lockedAt.add(firstReserveTimeLock);\n', '        timeLocks[secondReserveWallet] = lockedAt.add(secondReserveTimeLock);\n', '\n', '        Locked(lockedAt);\n', '    }\n', '\n', '    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\n', '    //Recover Tokens in case incorrect amount was sent to contract.\n', '    function recoverFailedLock() external notLocked notAllocated onlyOwner {\n', '\n', '        // Transfer all tokens on this contract back to the owner\n', '        require(token.transfer(owner, token.balanceOf(address(this))));\n', '    }\n', '\n', '    // Total number of tokens currently in the vault\n', '    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\n', '\n', '        return token.balanceOf(address(this));\n', '\n', '    }\n', '\n', '    // Number of tokens that are still locked\n', '    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\n', '\n', '        return allocations[msg.sender].sub(claimed[msg.sender]);\n', '\n', '    }\n', '\n', '    //Claim tokens for first/second reserve wallets\n', '    function claimTokenReserve() onlyTokenReserve locked public {\n', '\n', '        address reserveWallet = msg.sender;\n', '\n', '        // Can&#39;t claim before Lock ends\n', '        require(block.timestamp > timeLocks[reserveWallet]);\n', '\n', '        // Must Only claim once\n', '        require(claimed[reserveWallet] == 0);\n', '\n', '        uint256 amount = allocations[reserveWallet];\n', '\n', '        claimed[reserveWallet] = amount;\n', '\n', '        require(token.transfer(reserveWallet, amount));\n', '\n', '        Distributed(reserveWallet, amount);\n', '    }\n', '\n', '    //Claim tokens for Libra team reserve wallet\n', '    function claimTeamReserve() onlyTeamReserve locked public {\n', '\n', '        uint256 vestingStage = teamVestingStage();\n', '\n', '        //Amount of tokens the team should have at this vesting stage\n', '        uint256 totalUnlocked = vestingStage.mul(allocations[teamReserveWallet]).div(teamVestingStages);\n', '\n', '        require(totalUnlocked <= allocations[teamReserveWallet]);\n', '\n', '        //Previously claimed tokens must be less than what is unlocked\n', '        require(claimed[teamReserveWallet] < totalUnlocked);\n', '\n', '        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\n', '\n', '        claimed[teamReserveWallet] = totalUnlocked;\n', '\n', '        require(token.transfer(teamReserveWallet, payment));\n', '\n', '        Distributed(teamReserveWallet, payment);\n', '    }\n', '\n', '    //Current Vesting stage for Libra team \n', '    function teamVestingStage() public view onlyTeamReserve returns(uint256){\n', '        \n', '        // Every 3 months\n', '        uint256 vestingMonths = teamTimeLock.div(teamVestingStages); \n', '\n', '        uint256 stage = (block.timestamp.sub(lockedAt)).div(vestingMonths);\n', '\n', '        //Ensures team vesting stage doesn&#39;t go past teamVestingStages\n', '        if(stage > teamVestingStages){\n', '            stage = teamVestingStages;\n', '        }\n', '\n', '        return stage;\n', '\n', '    }\n', '\n', '    // Checks if msg.sender can collect tokens\n', '    function canCollect() public view onlyReserveWallets returns(bool) {\n', '\n', '        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\n', '\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SimpleToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract LibraToken is StandardToken {\n', '\n', '    string public constant name = "LibraToken"; // solium-disable-line uppercase\n', '    string public constant symbol = "LBA"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    uint256 public constant INITIAL_SUPPLY = (10 ** 9) * (10 ** uint256(decimals));\n', '\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function LibraToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract LibraTokenVault is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    //Wallet Addresses for allocation\n', '    address public teamReserveWallet = 0x373c69fDedE072A3F5ab1843a0e5fE0102Cc6793;\n', '    address public firstReserveWallet = 0x99C83f62DBE1a488f9C9d370DA8e86EC55224eB4;\n', '    address public secondReserveWallet = 0x90DfF11810dA6227d348C86C59257C1C0033D307;\n', '\n', '    //Token Allocations\n', '    uint256 public teamReserveAllocation = 2 * (10 ** 8) * (10 ** 18);\n', '    uint256 public firstReserveAllocation = 15 * (10 ** 7) * (10 ** 18);\n', '    uint256 public secondReserveAllocation = 15 * (10 ** 7) * (10 ** 18);\n', '\n', '    //Total Token Allocations\n', '    uint256 public totalAllocation = 5 * (10 ** 8) * (10 ** 18);\n', '\n', '    uint256 public teamTimeLock = 2 * 365 days;\n', '    uint256 public teamVestingStages = 8;\n', '    uint256 public firstReserveTimeLock = 2 * 365 days;\n', '    uint256 public secondReserveTimeLock = 3 * 365 days;\n', '\n', '    /** Reserve allocations */\n', '    mapping(address => uint256) public allocations;\n', '\n', '    /** When timeLocks are over (UNIX Timestamp)  */  \n', '    mapping(address => uint256) public timeLocks;\n', '\n', '    /** How many tokens each reserve wallet has claimed */\n', '    mapping(address => uint256) public claimed;\n', '\n', '    /** When this vault was locked (UNIX Timestamp)*/\n', '    uint256 public lockedAt = 0;\n', '\n', '    LibraToken public token;\n', '\n', '    /** Allocated reserve tokens */\n', '    event Allocated(address wallet, uint256 value);\n', '\n', '    /** Distributed reserved tokens */\n', '    event Distributed(address wallet, uint256 value);\n', '\n', '    /** Tokens have been locked */\n', '    event Locked(uint256 lockTime);\n', '\n', '    //Any of the three reserve wallets\n', '    modifier onlyReserveWallets {\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only Libra team reserve wallet\n', '    modifier onlyTeamReserve {\n', '        require(msg.sender == teamReserveWallet);\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Only first and second token reserve wallets\n', '    modifier onlyTokenReserve {\n', '        require(msg.sender == firstReserveWallet || msg.sender == secondReserveWallet);\n', '        require(allocations[msg.sender] > 0);\n', '        _;\n', '    }\n', '\n', '    //Has not been locked yet\n', '    modifier notLocked {\n', '        require(lockedAt == 0);\n', '        _;\n', '    }\n', '\n', '    modifier locked {\n', '        require(lockedAt > 0);\n', '        _;\n', '    }\n', '\n', '    //Token allocations have not been set\n', '    modifier notAllocated {\n', '        require(allocations[teamReserveWallet] == 0);\n', '        require(allocations[firstReserveWallet] == 0);\n', '        require(allocations[secondReserveWallet] == 0);\n', '        _;\n', '    }\n', '\n', '    function LibraTokenVault(ERC20 _token) public {\n', '\n', '        owner = msg.sender;\n', '        token = LibraToken(_token);\n', '        \n', '    }\n', '\n', '    function allocate() public notLocked notAllocated onlyOwner {\n', '\n', '        //Makes sure Token Contract has the exact number of tokens\n', '        require(token.balanceOf(address(this)) == totalAllocation);\n', '        \n', '        allocations[teamReserveWallet] = teamReserveAllocation;\n', '        allocations[firstReserveWallet] = firstReserveAllocation;\n', '        allocations[secondReserveWallet] = secondReserveAllocation;\n', '\n', '        Allocated(teamReserveWallet, teamReserveAllocation);\n', '        Allocated(firstReserveWallet, firstReserveAllocation);\n', '        Allocated(secondReserveWallet, secondReserveAllocation);\n', '\n', '        lock();\n', '    }\n', '\n', '    //Lock the vault for the three wallets\n', '    function lock() internal notLocked onlyOwner {\n', '\n', '        lockedAt = block.timestamp;\n', '\n', '        timeLocks[teamReserveWallet] = lockedAt.add(teamTimeLock);\n', '        timeLocks[firstReserveWallet] = lockedAt.add(firstReserveTimeLock);\n', '        timeLocks[secondReserveWallet] = lockedAt.add(secondReserveTimeLock);\n', '\n', '        Locked(lockedAt);\n', '    }\n', '\n', '    //In the case locking failed, then allow the owner to reclaim the tokens on the contract.\n', '    //Recover Tokens in case incorrect amount was sent to contract.\n', '    function recoverFailedLock() external notLocked notAllocated onlyOwner {\n', '\n', '        // Transfer all tokens on this contract back to the owner\n', '        require(token.transfer(owner, token.balanceOf(address(this))));\n', '    }\n', '\n', '    // Total number of tokens currently in the vault\n', '    function getTotalBalance() public view returns (uint256 tokensCurrentlyInVault) {\n', '\n', '        return token.balanceOf(address(this));\n', '\n', '    }\n', '\n', '    // Number of tokens that are still locked\n', '    function getLockedBalance() public view onlyReserveWallets returns (uint256 tokensLocked) {\n', '\n', '        return allocations[msg.sender].sub(claimed[msg.sender]);\n', '\n', '    }\n', '\n', '    //Claim tokens for first/second reserve wallets\n', '    function claimTokenReserve() onlyTokenReserve locked public {\n', '\n', '        address reserveWallet = msg.sender;\n', '\n', "        // Can't claim before Lock ends\n", '        require(block.timestamp > timeLocks[reserveWallet]);\n', '\n', '        // Must Only claim once\n', '        require(claimed[reserveWallet] == 0);\n', '\n', '        uint256 amount = allocations[reserveWallet];\n', '\n', '        claimed[reserveWallet] = amount;\n', '\n', '        require(token.transfer(reserveWallet, amount));\n', '\n', '        Distributed(reserveWallet, amount);\n', '    }\n', '\n', '    //Claim tokens for Libra team reserve wallet\n', '    function claimTeamReserve() onlyTeamReserve locked public {\n', '\n', '        uint256 vestingStage = teamVestingStage();\n', '\n', '        //Amount of tokens the team should have at this vesting stage\n', '        uint256 totalUnlocked = vestingStage.mul(allocations[teamReserveWallet]).div(teamVestingStages);\n', '\n', '        require(totalUnlocked <= allocations[teamReserveWallet]);\n', '\n', '        //Previously claimed tokens must be less than what is unlocked\n', '        require(claimed[teamReserveWallet] < totalUnlocked);\n', '\n', '        uint256 payment = totalUnlocked.sub(claimed[teamReserveWallet]);\n', '\n', '        claimed[teamReserveWallet] = totalUnlocked;\n', '\n', '        require(token.transfer(teamReserveWallet, payment));\n', '\n', '        Distributed(teamReserveWallet, payment);\n', '    }\n', '\n', '    //Current Vesting stage for Libra team \n', '    function teamVestingStage() public view onlyTeamReserve returns(uint256){\n', '        \n', '        // Every 3 months\n', '        uint256 vestingMonths = teamTimeLock.div(teamVestingStages); \n', '\n', '        uint256 stage = (block.timestamp.sub(lockedAt)).div(vestingMonths);\n', '\n', "        //Ensures team vesting stage doesn't go past teamVestingStages\n", '        if(stage > teamVestingStages){\n', '            stage = teamVestingStages;\n', '        }\n', '\n', '        return stage;\n', '\n', '    }\n', '\n', '    // Checks if msg.sender can collect tokens\n', '    function canCollect() public view onlyReserveWallets returns(bool) {\n', '\n', '        return block.timestamp > timeLocks[msg.sender] && claimed[msg.sender] == 0;\n', '\n', '    }\n', '\n', '}']
