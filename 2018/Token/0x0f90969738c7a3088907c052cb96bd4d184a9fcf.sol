['/**\n', '* @title ERC20Basic\n', '* @dev Simpler version of ERC20 interface\n', '* @dev see https://github.com/ethereum/EIPs/issues/179\n', '*/\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', '* @title ERC20 interface\n', '* @dev see https://github.com/ethereum/EIPs/issues/20\n', '*/\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', '* @title Basic token\n', '* @dev Basic version of StandardToken, with no allowances.\n', '*/\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '/**\n', '* @title Standard ERC20 token\n', '*\n', '* @dev Implementation of the basic standard token.\n', '* @dev https://github.com/ethereum/EIPs/issues/20\n', '* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '*/\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        }\n', '        else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Ownable\n', '* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Pausable\n', '* @dev Base contract which allows children to implement an emergency stop mechanism.\n', '*/\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public\n', '    {paused = true;\n', '        Pause();\n', '    }\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '/**\n', '* @title Pausable token\n', '* @dev StandardToken modified with pausable transfers.\n', '**/\n', 'contract PausableToken is StandardToken, Pausable {\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool){\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success)\n', '    {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '/**\n', '* @title Mintable token\n', '* @dev Simple ERC20 Token example, with mintable token creation\n', '* @dev Issue:\n', '* https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', '* Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', '*/\n', 'contract MintableToken is StandardToken, Ownable {event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '    modifier canMint() {require(!mintingFinished);\n', '        _;\n', '    }\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {mintingFinished = true;\n', '        MintFinished();\n', '        return true;}\n', '}\n', '\n', '\n', '\n', '/**\n', '* @title SafeERC20\n', '* @dev Wrappers around ERC20 operations that throw on failure.\n', '* To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', '* which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', '*/\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        // assert(b > 0);\n', '        // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b);\n', '        // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '/**\n', '* @title SimpleToken\n', '* @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', '* Note they can later distribute these tokens as they wish using `transfer` and other\n', '* `StandardToken` functions.\n', '*/\n', 'contract SimpleToken is StandardToken {\n', '    string public constant name = "SimpleToken";\n', '    // solium-disable-line uppercase\n', '    string public constant symbol = "SIM";\n', '    // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18;\n', '    // solium-disable-line uppercase\n', '    uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** uint256(decimals));\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function SimpleToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '}\n', '\n', '/**\n', '* @title BiometricLock\n', '* @dev BiometricLock in which only unlocked users can execute methods\n', '*/\n', 'contract BiometricLockable is Ownable {\n', '    event BiometricLocked(address beneficiary, bytes32 sha);\n', '    event BiometricUnlocked(address beneficiary);\n', '\n', '    address BOPS;\n', '    mapping(address => bool) biometricLock;\n', '    mapping(bytes32 => bool) biometricCompleted;\n', '    mapping(bytes32 => uint256) biometricNow;\n', '    /**\n', '    * @dev Locks msg.sender address\n', '    */\n', '    function bioLock() external {\n', '        uint rightNow = now;\n', '        bytes32 sha = keccak256("bioLock", msg.sender, rightNow);\n', '        biometricLock[msg.sender] = true;\n', '        biometricNow[sha] = rightNow;\n', '        BiometricLocked(msg.sender, sha);\n', '    }\n', '    /**\n', '    * @dev Unlocks msg.sender single address.  v,r,s is the sign(sha) by BOPS\n', '    */\n', '    function bioUnlock(bytes32 sha, uint8 v, bytes32 r, bytes32 s) external {\n', '        require(biometricLock[msg.sender]);\n', '        require(!biometricCompleted[sha]);\n', '        bytes32 bioLockSha = keccak256("bioLock", msg.sender, biometricNow[sha]);\n', '        require(sha == bioLockSha);\n', '        require(verify(sha, v, r, s) == true);\n', '        biometricLock[msg.sender] = false;\n', '        BiometricUnlocked(msg.sender);\n', '        biometricCompleted[sha] = true;\n', '    }\n', '\n', '    function isSenderBiometricLocked() external view returns (bool) {\n', '        return biometricLock[msg.sender];\n', '    }\n', '\n', '    function isBiometricLocked(address _beneficiary) internal view returns (bool){\n', '        return biometricLock[_beneficiary];\n', '    }\n', '\n', '    function isBiometricLockedOnlyOwner(address _beneficiary) external onlyOwner view returns (bool){\n', '        return biometricLock[_beneficiary];\n', '    }\n', '    /**\n', '    * @dev BOPS Address setter.  BOPS signs biometric authentications to ensure user&#39;s identity\n', '    *\n', '    */\n', '    function setBOPSAddress(address _BOPS) external onlyOwner {\n', '        require(_BOPS != address(0));\n', '        BOPS = _BOPS;\n', '    }\n', '\n', '    function verify(bytes32 sha, uint8 v, bytes32 r, bytes32 s) internal view returns (bool) {\n', '        require(BOPS != address(0));\n', '        return ecrecover(sha, v, r, s) == BOPS;\n', '    }\n', '\n', '    function isBiometricCompleted(bytes32 sha) external view returns (bool) {\n', '        return biometricCompleted[sha];\n', '    }\n', '}\n', '\n', '/**\n', '* @title BiometricToken\n', '* @dev BiometricToken is a token contract that can enable Biometric features for ERC20 functions\n', '*/\n', 'contract BiometricToken is Ownable, MintableToken, BiometricLockable {\n', '    event BiometricTransferRequest(address from, address to, uint256 amount, bytes32 sha);\n', '    event BiometricApprovalRequest(address indexed owner, address indexed spender, uint256 value, bytes32 sha);\n', '    // Transfer related methods variables\n', '    mapping(bytes32 => address) biometricFrom;\n', '    mapping(bytes32 => address) biometricAllowee;\n', '    mapping(bytes32 => address) biometricTo;\n', '    mapping(bytes32 => uint256) biometricAmount;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (isBiometricLocked(msg.sender)) {\n', '            require(_value <= balances[msg.sender]);\n', '            require(_to != address(0));\n', '            require(_value > 0);\n', '            uint rightNow = now;\n', '            bytes32 sha = keccak256("transfer", msg.sender, _to, _value, rightNow);\n', '            biometricFrom[sha] = msg.sender;\n', '            biometricTo[sha] = _to;\n', '            biometricAmount[sha] = _value;\n', '            biometricNow[sha] = rightNow;\n', '            BiometricTransferRequest(msg.sender, _to, _value, sha);\n', '            return true;\n', '        }\n', '        else {\n', '            return super.transfer(_to, _value);\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (isBiometricLocked(_from)) {\n', '            require(_value <= balances[_from]);\n', '            require(_value <= allowed[_from][msg.sender]);\n', '            require(_to != address(0));\n', '            require(_from != address(0));\n', '            require(_value > 0);\n', '            uint rightNow = now;\n', '            bytes32 sha = keccak256("transferFrom", _from, _to, _value, rightNow);\n', '            biometricAllowee[sha] = msg.sender;\n', '            biometricFrom[sha] = _from;\n', '            biometricTo[sha] = _to;\n', '            biometricAmount[sha] = _value;\n', '            biometricNow[sha] = rightNow;\n', '            BiometricTransferRequest(_from, _to, _value, sha);\n', '            return true;\n', '        }\n', '        else {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        if (isBiometricLocked(msg.sender)) {\n', '            uint rightNow = now;\n', '            bytes32 sha = keccak256("approve", msg.sender, _spender, _value, rightNow);\n', '            biometricFrom[sha] = msg.sender;\n', '            biometricTo[sha] = _spender;\n', '            biometricAmount[sha] = _value;\n', '            biometricNow[sha] = rightNow;\n', '            BiometricApprovalRequest(msg.sender, _spender, _value, sha);\n', '            return true;\n', '        }\n', '        else {\n', '            return super.approve(_spender, _value);\n', '        }\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        if (isBiometricLocked(msg.sender)) {\n', '            uint newValue = allowed[msg.sender][_spender].add(_addedValue);\n', '            uint rightNow = now;\n', '            bytes32 sha = keccak256("increaseApproval", msg.sender, _spender, newValue, rightNow);\n', '            biometricFrom[sha] = msg.sender;\n', '            biometricTo[sha] = _spender;\n', '            biometricAmount[sha] = newValue;\n', '            biometricNow[sha] = rightNow;\n', '            BiometricApprovalRequest(msg.sender, _spender, newValue, sha);\n', '            return true;\n', '        }\n', '        else {\n', '            return super.increaseApproval(_spender, _addedValue);\n', '        }\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        if (isBiometricLocked(msg.sender)) {\n', '            uint oldValue = allowed[msg.sender][_spender];\n', '            uint newValue;\n', '            if (_subtractedValue > oldValue) {\n', '                newValue = 0;\n', '            }\n', '            else {\n', '                newValue = oldValue.sub(_subtractedValue);\n', '            }\n', '            uint rightNow = now;\n', '            bytes32 sha = keccak256("decreaseApproval", msg.sender, _spender, newValue, rightNow);\n', '            biometricFrom[sha] = msg.sender;\n', '            biometricTo[sha] = _spender;\n', '            biometricAmount[sha] = newValue;\n', '            biometricNow[sha] = rightNow;\n', '            BiometricApprovalRequest(msg.sender, _spender, newValue, sha);\n', '            return true;\n', '        }\n', '        else {\n', '            return super.decreaseApproval(_spender, _subtractedValue);\n', '        }\n', '    }\n', '    /**\n', '    * @notice Complete pending transfer, can only be called by msg.sender if it is the originator of Transfer\n', '    */\n', '    function releaseTransfer(bytes32 sha, uint8 v, bytes32 r, bytes32 s) public returns (bool){\n', '        require(msg.sender == biometricFrom[sha]);\n', '        require(!biometricCompleted[sha]);\n', '        bytes32 transferFromSha = keccak256("transferFrom", biometricFrom[sha], biometricTo[sha], biometricAmount[sha], biometricNow[sha]);\n', '        bytes32 transferSha = keccak256("transfer", biometricFrom[sha], biometricTo[sha], biometricAmount[sha], biometricNow[sha]);\n', '        require(sha == transferSha || sha == transferFromSha);\n', '        require(verify(sha, v, r, s) == true);\n', '        if (transferFromSha == sha) {\n', '            address _spender = biometricAllowee[sha];\n', '            address _from = biometricFrom[sha];\n', '            address _to = biometricTo[sha];\n', '            uint256 _value = biometricAmount[sha];\n', '            require(_to != address(0));\n', '            require(_value <= balances[_from]);\n', '            require(_value <= allowed[_from][_spender]);\n', '            balances[_from] = balances[_from].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_value);\n', '            Transfer(_from, _to, _value);\n', '        }\n', '        if (transferSha == sha) {\n', '            super.transfer(biometricTo[sha], biometricAmount[sha]);\n', '        }\n', '        biometricCompleted[sha] = true;\n', '        return true;\n', '    }\n', '    /**\n', '    * @notice Cancel pending transfer, can only be called by msg.sender == biometricFrom[sha]\n', '    */\n', '    function cancelTransfer(bytes32 sha) public returns (bool){\n', '        require(msg.sender == biometricFrom[sha]);\n', '        require(!biometricCompleted[sha]);\n', '        biometricCompleted[sha] = true;\n', '        return true;\n', '    }\n', '    /**\n', '    * @notice Complete pending Approval, can only be called by msg.sender if it is the originator of Approval\n', '    */\n', '    function releaseApprove(bytes32 sha, uint8 v, bytes32 r, bytes32 s) public returns (bool){\n', '        require(msg.sender == biometricFrom[sha]);\n', '        require(!biometricCompleted[sha]);\n', '        bytes32 approveSha = keccak256("approve", biometricFrom[sha], biometricTo[sha], biometricAmount[sha], biometricNow[sha]);\n', '        bytes32 increaseApprovalSha = keccak256("increaseApproval", biometricFrom[sha], biometricTo[sha], biometricAmount[sha], biometricNow[sha]);\n', '        bytes32 decreaseApprovalSha = keccak256("decreaseApproval", biometricFrom[sha], biometricTo[sha], biometricAmount[sha], biometricNow[sha]);\n', '        require(approveSha == sha || increaseApprovalSha == sha || decreaseApprovalSha == sha);\n', '        require(verify(sha, v, r, s) == true);\n', '        super.approve(biometricTo[sha], biometricAmount[sha]);\n', '        biometricCompleted[sha] = true;\n', '        return true;\n', '    }\n', '    /**\n', '    * @notice Cancel pending Approval, can only be called by msg.sender == biometricFrom[sha]\n', '    */\n', '    function cancelApprove(bytes32 sha) public returns (bool){\n', '        require(msg.sender == biometricFrom[sha]);\n', '        require(!biometricCompleted[sha]);\n', '        biometricCompleted[sha] = true;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CompliantToken is BiometricToken {\n', '    //list of praticipants that have purchased during the presale period\n', '    mapping(address => bool) presaleHolder;\n', '    //list of presale participants and date when their tokens are unlocked\n', '    mapping(address => uint256) presaleHolderUnlockDate;\n', '    //list of participants from the United States\n', '    mapping(address => bool) utilityHolder;\n', '    //list of Hoyos Integrity Corp addresses that accept RSN as payment for service\n', '    mapping(address => bool) allowedHICAddress;\n', '    //list of addresses that can add to presale address list (i.e. crowdsale contract)\n', '    mapping(address => bool) privilegeAddress;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (presaleHolder[msg.sender]) {\n', '            if (now >= presaleHolderUnlockDate[msg.sender]) {\n', '                return super.transfer(_to, _value);\n', '            }\n', '            else {\n', '                require(allowedHICAddress[_to]);\n', '                return super.transfer(_to, _value);\n', '            }\n', '        }\n', '        if (utilityHolder[msg.sender]) {\n', '            require(allowedHICAddress[_to]);\n', '            return super.transfer(_to, _value);\n', '        }\n', '        else {\n', '            return super.transfer(_to, _value);\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (presaleHolder[_from]) {\n', '            if (now >= presaleHolderUnlockDate[_from]) {\n', '                return super.transferFrom(_from, _to, _value);\n', '            }\n', '            else {\n', '                require(allowedHICAddress[_to]);\n', '                return super.transferFrom(_from, _to, _value);\n', '            }\n', '        }\n', '        if (utilityHolder[_from]) {\n', '            require(allowedHICAddress[_to]);\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '        else {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '    }\n', '    // Allowed HIC addresses to methods: set, remove, is\n', '    function addAllowedHICAddress(address _beneficiary) onlyOwner public {\n', '        allowedHICAddress[_beneficiary] = true;\n', '    }\n', '\n', '    function removeAllowedHICAddress(address _beneficiary) onlyOwner public {\n', '        allowedHICAddress[_beneficiary] = false;\n', '    }\n', '\n', '    function isAllowedHICAddress(address _beneficiary) onlyOwner public view returns (bool){\n', '        return allowedHICAddress[_beneficiary];\n', '    }\n', '    // Utility Holders methods: set, remove, is\n', '    function addUtilityHolder(address _beneficiary) public {\n', '        require(privilegeAddress[msg.sender]);\n', '        utilityHolder[_beneficiary] = true;}\n', '\n', '    function removeUtilityHolder(address _beneficiary) onlyOwner public {\n', '        utilityHolder[_beneficiary] = false;\n', '    }\n', '\n', '    function isUtilityHolder(address _beneficiary) onlyOwner public view returns (bool){\n', '        return utilityHolder[_beneficiary];\n', '    }\n', '    // Presale Holders methods: set, remove, is\n', '    function addPresaleHolder(address _beneficiary) public {\n', '        require(privilegeAddress[msg.sender]);\n', '        presaleHolder[_beneficiary] = true;\n', '        presaleHolderUnlockDate[_beneficiary] = now + 1 years;\n', '    }\n', '\n', '    function removePresaleHolder(address _beneficiary) onlyOwner public {\n', '        presaleHolder[_beneficiary] = false;\n', '        presaleHolderUnlockDate[_beneficiary] = now;\n', '    }\n', '\n', '    function isPresaleHolder(address _beneficiary) onlyOwner public view returns (bool){\n', '        return presaleHolder[_beneficiary];\n', '    }\n', '    // Presale Priviledge Addresses methods: set, remove, is\n', '    function addPrivilegeAddress(address _beneficiary) onlyOwner public {\n', '        privilegeAddress[_beneficiary] = true;\n', '    }\n', '\n', '    function removePrivilegeAddress(address _beneficiary) onlyOwner public {\n', '        privilegeAddress[_beneficiary] = false;\n', '    }\n', '\n', '    function isPrivilegeAddress(address _beneficiary) onlyOwner public view returns (bool){\n', '        return privilegeAddress[_beneficiary];\n', '    }\n', '}\n', '\n', 'contract RISENCoin is CompliantToken, PausableToken {\n', '    string public name = "RISEN";\n', '    string public symbol = "RSN";\n', '    uint8 public decimals = 18;\n', '}']
['/**\n', '* @title ERC20Basic\n', '* @dev Simpler version of ERC20 interface\n', '* @dev see https://github.com/ethereum/EIPs/issues/179\n', '*/\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', '* @title ERC20 interface\n', '* @dev see https://github.com/ethereum/EIPs/issues/20\n', '*/\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', '* @title Basic token\n', '* @dev Basic version of StandardToken, with no allowances.\n', '*/\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '/**\n', '* @title Standard ERC20 token\n', '*\n', '* @dev Implementation of the basic standard token.\n', '* @dev https://github.com/ethereum/EIPs/issues/20\n', '* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '*/\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        }\n', '        else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Ownable\n', '* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', '* @title Pausable\n', '* @dev Base contract which allows children to implement an emergency stop mechanism.\n', '*/\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public\n', '    {paused = true;\n', '        Pause();\n', '    }\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '/**\n', '* @title Pausable token\n', '* @dev StandardToken modified with pausable transfers.\n', '**/\n', 'contract PausableToken is StandardToken, Pausable {\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool){\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success)\n', '    {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '/**\n', '* @title Mintable token\n', '* @dev Simple ERC20 Token example, with mintable token creation\n', '* @dev Issue:\n', '* https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', '* Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', '*/\n', 'contract MintableToken is StandardToken, Ownable {event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '    modifier canMint() {require(!mintingFinished);\n', '        _;\n', '    }\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {mintingFinished = true;\n', '        MintFinished();\n', '        return true;}\n', '}\n', '\n', '\n', '\n', '/**\n', '* @title SafeERC20\n', '* @dev Wrappers around ERC20 operations that throw on failure.\n', '* To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', '* which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', '*/\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256)\n', '    {\n', '        // assert(b > 0);\n', '        // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b);\n', "        // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '/**\n', '* @title SimpleToken\n', '* @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', '* Note they can later distribute these tokens as they wish using `transfer` and other\n', '* `StandardToken` functions.\n', '*/\n', 'contract SimpleToken is StandardToken {\n', '    string public constant name = "SimpleToken";\n', '    // solium-disable-line uppercase\n', '    string public constant symbol = "SIM";\n', '    // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18;\n', '    // solium-disable-line uppercase\n', '    uint256 public constant INITIAL_SUPPLY = 10000 * (10 ** uint256(decimals));\n', '    /**\n', '    * @dev Constructor that gives msg.sender all of existing tokens.\n', '    */\n', '    function SimpleToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '}\n', '\n', '/**\n', '* @title BiometricLock\n', '* @dev BiometricLock in which only unlocked users can execute methods\n', '*/\n', 'contract BiometricLockable is Ownable {\n', '    event BiometricLocked(address beneficiary, bytes32 sha);\n', '    event BiometricUnlocked(address beneficiary);\n', '\n', '    address BOPS;\n', '    mapping(address => bool) biometricLock;\n', '    mapping(bytes32 => bool) biometricCompleted;\n', '    mapping(bytes32 => uint256) biometricNow;\n', '    /**\n', '    * @dev Locks msg.sender address\n', '    */\n', '    function bioLock() external {\n', '        uint rightNow = now;\n', '        bytes32 sha = keccak256("bioLock", msg.sender, rightNow);\n', '        biometricLock[msg.sender] = true;\n', '        biometricNow[sha] = rightNow;\n', '        BiometricLocked(msg.sender, sha);\n', '    }\n', '    /**\n', '    * @dev Unlocks msg.sender single address.  v,r,s is the sign(sha) by BOPS\n', '    */\n', '    function bioUnlock(bytes32 sha, uint8 v, bytes32 r, bytes32 s) external {\n', '        require(biometricLock[msg.sender]);\n', '        require(!biometricCompleted[sha]);\n', '        bytes32 bioLockSha = keccak256("bioLock", msg.sender, biometricNow[sha]);\n', '        require(sha == bioLockSha);\n', '        require(verify(sha, v, r, s) == true);\n', '        biometricLock[msg.sender] = false;\n', '        BiometricUnlocked(msg.sender);\n', '        biometricCompleted[sha] = true;\n', '    }\n', '\n', '    function isSenderBiometricLocked() external view returns (bool) {\n', '        return biometricLock[msg.sender];\n', '    }\n', '\n', '    function isBiometricLocked(address _beneficiary) internal view returns (bool){\n', '        return biometricLock[_beneficiary];\n', '    }\n', '\n', '    function isBiometricLockedOnlyOwner(address _beneficiary) external onlyOwner view returns (bool){\n', '        return biometricLock[_beneficiary];\n', '    }\n', '    /**\n', "    * @dev BOPS Address setter.  BOPS signs biometric authentications to ensure user's identity\n", '    *\n', '    */\n', '    function setBOPSAddress(address _BOPS) external onlyOwner {\n', '        require(_BOPS != address(0));\n', '        BOPS = _BOPS;\n', '    }\n', '\n', '    function verify(bytes32 sha, uint8 v, bytes32 r, bytes32 s) internal view returns (bool) {\n', '        require(BOPS != address(0));\n', '        return ecrecover(sha, v, r, s) == BOPS;\n', '    }\n', '\n', '    function isBiometricCompleted(bytes32 sha) external view returns (bool) {\n', '        return biometricCompleted[sha];\n', '    }\n', '}\n', '\n', '/**\n', '* @title BiometricToken\n', '* @dev BiometricToken is a token contract that can enable Biometric features for ERC20 functions\n', '*/\n', 'contract BiometricToken is Ownable, MintableToken, BiometricLockable {\n', '    event BiometricTransferRequest(address from, address to, uint256 amount, bytes32 sha);\n', '    event BiometricApprovalRequest(address indexed owner, address indexed spender, uint256 value, bytes32 sha);\n', '    // Transfer related methods variables\n', '    mapping(bytes32 => address) biometricFrom;\n', '    mapping(bytes32 => address) biometricAllowee;\n', '    mapping(bytes32 => address) biometricTo;\n', '    mapping(bytes32 => uint256) biometricAmount;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (isBiometricLocked(msg.sender)) {\n', '            require(_value <= balances[msg.sender]);\n', '            require(_to != address(0));\n', '            require(_value > 0);\n', '            uint rightNow = now;\n', '            bytes32 sha = keccak256("transfer", msg.sender, _to, _value, rightNow);\n', '            biometricFrom[sha] = msg.sender;\n', '            biometricTo[sha] = _to;\n', '            biometricAmount[sha] = _value;\n', '            biometricNow[sha] = rightNow;\n', '            BiometricTransferRequest(msg.sender, _to, _value, sha);\n', '            return true;\n', '        }\n', '        else {\n', '            return super.transfer(_to, _value);\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (isBiometricLocked(_from)) {\n', '            require(_value <= balances[_from]);\n', '            require(_value <= allowed[_from][msg.sender]);\n', '            require(_to != address(0));\n', '            require(_from != address(0));\n', '            require(_value > 0);\n', '            uint rightNow = now;\n', '            bytes32 sha = keccak256("transferFrom", _from, _to, _value, rightNow);\n', '            biometricAllowee[sha] = msg.sender;\n', '            biometricFrom[sha] = _from;\n', '            biometricTo[sha] = _to;\n', '            biometricAmount[sha] = _value;\n', '            biometricNow[sha] = rightNow;\n', '            BiometricTransferRequest(_from, _to, _value, sha);\n', '            return true;\n', '        }\n', '        else {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        if (isBiometricLocked(msg.sender)) {\n', '            uint rightNow = now;\n', '            bytes32 sha = keccak256("approve", msg.sender, _spender, _value, rightNow);\n', '            biometricFrom[sha] = msg.sender;\n', '            biometricTo[sha] = _spender;\n', '            biometricAmount[sha] = _value;\n', '            biometricNow[sha] = rightNow;\n', '            BiometricApprovalRequest(msg.sender, _spender, _value, sha);\n', '            return true;\n', '        }\n', '        else {\n', '            return super.approve(_spender, _value);\n', '        }\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        if (isBiometricLocked(msg.sender)) {\n', '            uint newValue = allowed[msg.sender][_spender].add(_addedValue);\n', '            uint rightNow = now;\n', '            bytes32 sha = keccak256("increaseApproval", msg.sender, _spender, newValue, rightNow);\n', '            biometricFrom[sha] = msg.sender;\n', '            biometricTo[sha] = _spender;\n', '            biometricAmount[sha] = newValue;\n', '            biometricNow[sha] = rightNow;\n', '            BiometricApprovalRequest(msg.sender, _spender, newValue, sha);\n', '            return true;\n', '        }\n', '        else {\n', '            return super.increaseApproval(_spender, _addedValue);\n', '        }\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        if (isBiometricLocked(msg.sender)) {\n', '            uint oldValue = allowed[msg.sender][_spender];\n', '            uint newValue;\n', '            if (_subtractedValue > oldValue) {\n', '                newValue = 0;\n', '            }\n', '            else {\n', '                newValue = oldValue.sub(_subtractedValue);\n', '            }\n', '            uint rightNow = now;\n', '            bytes32 sha = keccak256("decreaseApproval", msg.sender, _spender, newValue, rightNow);\n', '            biometricFrom[sha] = msg.sender;\n', '            biometricTo[sha] = _spender;\n', '            biometricAmount[sha] = newValue;\n', '            biometricNow[sha] = rightNow;\n', '            BiometricApprovalRequest(msg.sender, _spender, newValue, sha);\n', '            return true;\n', '        }\n', '        else {\n', '            return super.decreaseApproval(_spender, _subtractedValue);\n', '        }\n', '    }\n', '    /**\n', '    * @notice Complete pending transfer, can only be called by msg.sender if it is the originator of Transfer\n', '    */\n', '    function releaseTransfer(bytes32 sha, uint8 v, bytes32 r, bytes32 s) public returns (bool){\n', '        require(msg.sender == biometricFrom[sha]);\n', '        require(!biometricCompleted[sha]);\n', '        bytes32 transferFromSha = keccak256("transferFrom", biometricFrom[sha], biometricTo[sha], biometricAmount[sha], biometricNow[sha]);\n', '        bytes32 transferSha = keccak256("transfer", biometricFrom[sha], biometricTo[sha], biometricAmount[sha], biometricNow[sha]);\n', '        require(sha == transferSha || sha == transferFromSha);\n', '        require(verify(sha, v, r, s) == true);\n', '        if (transferFromSha == sha) {\n', '            address _spender = biometricAllowee[sha];\n', '            address _from = biometricFrom[sha];\n', '            address _to = biometricTo[sha];\n', '            uint256 _value = biometricAmount[sha];\n', '            require(_to != address(0));\n', '            require(_value <= balances[_from]);\n', '            require(_value <= allowed[_from][_spender]);\n', '            balances[_from] = balances[_from].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_value);\n', '            Transfer(_from, _to, _value);\n', '        }\n', '        if (transferSha == sha) {\n', '            super.transfer(biometricTo[sha], biometricAmount[sha]);\n', '        }\n', '        biometricCompleted[sha] = true;\n', '        return true;\n', '    }\n', '    /**\n', '    * @notice Cancel pending transfer, can only be called by msg.sender == biometricFrom[sha]\n', '    */\n', '    function cancelTransfer(bytes32 sha) public returns (bool){\n', '        require(msg.sender == biometricFrom[sha]);\n', '        require(!biometricCompleted[sha]);\n', '        biometricCompleted[sha] = true;\n', '        return true;\n', '    }\n', '    /**\n', '    * @notice Complete pending Approval, can only be called by msg.sender if it is the originator of Approval\n', '    */\n', '    function releaseApprove(bytes32 sha, uint8 v, bytes32 r, bytes32 s) public returns (bool){\n', '        require(msg.sender == biometricFrom[sha]);\n', '        require(!biometricCompleted[sha]);\n', '        bytes32 approveSha = keccak256("approve", biometricFrom[sha], biometricTo[sha], biometricAmount[sha], biometricNow[sha]);\n', '        bytes32 increaseApprovalSha = keccak256("increaseApproval", biometricFrom[sha], biometricTo[sha], biometricAmount[sha], biometricNow[sha]);\n', '        bytes32 decreaseApprovalSha = keccak256("decreaseApproval", biometricFrom[sha], biometricTo[sha], biometricAmount[sha], biometricNow[sha]);\n', '        require(approveSha == sha || increaseApprovalSha == sha || decreaseApprovalSha == sha);\n', '        require(verify(sha, v, r, s) == true);\n', '        super.approve(biometricTo[sha], biometricAmount[sha]);\n', '        biometricCompleted[sha] = true;\n', '        return true;\n', '    }\n', '    /**\n', '    * @notice Cancel pending Approval, can only be called by msg.sender == biometricFrom[sha]\n', '    */\n', '    function cancelApprove(bytes32 sha) public returns (bool){\n', '        require(msg.sender == biometricFrom[sha]);\n', '        require(!biometricCompleted[sha]);\n', '        biometricCompleted[sha] = true;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CompliantToken is BiometricToken {\n', '    //list of praticipants that have purchased during the presale period\n', '    mapping(address => bool) presaleHolder;\n', '    //list of presale participants and date when their tokens are unlocked\n', '    mapping(address => uint256) presaleHolderUnlockDate;\n', '    //list of participants from the United States\n', '    mapping(address => bool) utilityHolder;\n', '    //list of Hoyos Integrity Corp addresses that accept RSN as payment for service\n', '    mapping(address => bool) allowedHICAddress;\n', '    //list of addresses that can add to presale address list (i.e. crowdsale contract)\n', '    mapping(address => bool) privilegeAddress;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (presaleHolder[msg.sender]) {\n', '            if (now >= presaleHolderUnlockDate[msg.sender]) {\n', '                return super.transfer(_to, _value);\n', '            }\n', '            else {\n', '                require(allowedHICAddress[_to]);\n', '                return super.transfer(_to, _value);\n', '            }\n', '        }\n', '        if (utilityHolder[msg.sender]) {\n', '            require(allowedHICAddress[_to]);\n', '            return super.transfer(_to, _value);\n', '        }\n', '        else {\n', '            return super.transfer(_to, _value);\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (presaleHolder[_from]) {\n', '            if (now >= presaleHolderUnlockDate[_from]) {\n', '                return super.transferFrom(_from, _to, _value);\n', '            }\n', '            else {\n', '                require(allowedHICAddress[_to]);\n', '                return super.transferFrom(_from, _to, _value);\n', '            }\n', '        }\n', '        if (utilityHolder[_from]) {\n', '            require(allowedHICAddress[_to]);\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '        else {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '    }\n', '    // Allowed HIC addresses to methods: set, remove, is\n', '    function addAllowedHICAddress(address _beneficiary) onlyOwner public {\n', '        allowedHICAddress[_beneficiary] = true;\n', '    }\n', '\n', '    function removeAllowedHICAddress(address _beneficiary) onlyOwner public {\n', '        allowedHICAddress[_beneficiary] = false;\n', '    }\n', '\n', '    function isAllowedHICAddress(address _beneficiary) onlyOwner public view returns (bool){\n', '        return allowedHICAddress[_beneficiary];\n', '    }\n', '    // Utility Holders methods: set, remove, is\n', '    function addUtilityHolder(address _beneficiary) public {\n', '        require(privilegeAddress[msg.sender]);\n', '        utilityHolder[_beneficiary] = true;}\n', '\n', '    function removeUtilityHolder(address _beneficiary) onlyOwner public {\n', '        utilityHolder[_beneficiary] = false;\n', '    }\n', '\n', '    function isUtilityHolder(address _beneficiary) onlyOwner public view returns (bool){\n', '        return utilityHolder[_beneficiary];\n', '    }\n', '    // Presale Holders methods: set, remove, is\n', '    function addPresaleHolder(address _beneficiary) public {\n', '        require(privilegeAddress[msg.sender]);\n', '        presaleHolder[_beneficiary] = true;\n', '        presaleHolderUnlockDate[_beneficiary] = now + 1 years;\n', '    }\n', '\n', '    function removePresaleHolder(address _beneficiary) onlyOwner public {\n', '        presaleHolder[_beneficiary] = false;\n', '        presaleHolderUnlockDate[_beneficiary] = now;\n', '    }\n', '\n', '    function isPresaleHolder(address _beneficiary) onlyOwner public view returns (bool){\n', '        return presaleHolder[_beneficiary];\n', '    }\n', '    // Presale Priviledge Addresses methods: set, remove, is\n', '    function addPrivilegeAddress(address _beneficiary) onlyOwner public {\n', '        privilegeAddress[_beneficiary] = true;\n', '    }\n', '\n', '    function removePrivilegeAddress(address _beneficiary) onlyOwner public {\n', '        privilegeAddress[_beneficiary] = false;\n', '    }\n', '\n', '    function isPrivilegeAddress(address _beneficiary) onlyOwner public view returns (bool){\n', '        return privilegeAddress[_beneficiary];\n', '    }\n', '}\n', '\n', 'contract RISENCoin is CompliantToken, PausableToken {\n', '    string public name = "RISEN";\n', '    string public symbol = "RSN";\n', '    uint8 public decimals = 18;\n', '}']
