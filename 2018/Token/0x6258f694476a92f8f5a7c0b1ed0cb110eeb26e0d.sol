['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    //转移所有权\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    \n', '    uint256 public totalSupply;\n', '\n', '  \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '  \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '   \n', '    event Burn(address indexed from, uint256 value);\n', '\n', ' \n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  \n', '        balanceOf[msg.sender] = totalSupply;                \n', '        name = tokenName;                                  \n', '        symbol = tokenSymbol;                              \n', '    }\n', '\n', '   //内部函数，转币\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        \n', '        require(_to != 0x0);\n', '       \n', '        require(balanceOf[_from] >= _value);\n', '        \n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        \n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        \n', '        balanceOf[_from] -= _value;\n', '        \n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //使用授权的币\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);    \n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '   //授权\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    //销毁\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);  \n', '        balanceOf[msg.sender] -= _value;            \n', '        totalSupply -= _value;                     \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '  \t//销毁授权的币\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);               \n', '        require(_value <= allowance[_from][msg.sender]);   \n', '        balanceOf[_from] -= _value;                        \n', '        allowance[_from][msg.sender] -= _value;           \n', '        totalSupply -= _value;                            \n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract MyAdvancedToken is owned, TokenERC20 {\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint) public lockedAmount;\n', '    \n', '    event FrozenFunds(address target, bool frozen);\n', '    event Award(address to,uint amount);\n', '    event Punish(address violator,address victim,uint amount);\n', '    event LockToken(address target, uint256 amount,uint lockPeriod);\n', '    event OwnerUnlock(address from,uint256 amount);\n', '    function MyAdvancedToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '\t//转币\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '   //增发\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '    //冻结解冻\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '    //设置私募价格\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '   //私募\n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;               \n', '        _transfer(this, msg.sender, amount);  \n', '        if(!owner.send(msg.value)){\n', '            revert();\n', '        }            \n', '    }\n', '\n', '    //卖给合约\n', '    function sell(uint256 amount) public {\n', '        address myAddress = this;\n', '        require(myAddress.balance >= amount * sellPrice);      \n', '        _transfer(msg.sender, this, amount);              \n', '        msg.sender.transfer(amount * sellPrice);          \n', '    }\n', '    //奖励\n', '    function award(address user,uint256 amount) onlyOwner public\n', '    {\n', '      user.transfer(amount);\n', '      emit Award(user,amount);\n', '    }\n', '    //批量转账\n', '    function transferMultiAddress(address[] _recivers, uint256[] _values) public onlyOwner {\n', '        require (_recivers.length == _values.length);\n', '        address receiver;\n', '        uint256 value;\n', '        for(uint256 i = 0; i < _recivers.length ; i++){\n', '            receiver = _recivers[i];\n', '            value = _values[i];\n', '            _transfer(msg.sender,receiver,value);\n', '             emit Transfer(msg.sender,receiver,value);\n', '        }\n', '    }\n', '\n', '    //惩罚\n', '    function punish(address violator,address victim,uint amount) public onlyOwner\n', '    {\n', '      _transfer(violator,victim,amount);\n', '      emit Punish(violator,victim,amount);\n', '    }\n', '\n', '    //锁仓\n', '     function lockToken (address target,uint256 lockAmount,uint lockPeriod) onlyOwner public returns(bool res)\n', '    {\n', '        require(lockAmount>0);\n', '        require(balanceOf[target] >= lockAmount);\n', '        balanceOf[target] -= lockAmount;\n', '        lockedAmount[target] += lockAmount;\n', '        emit LockToken(target, lockAmount,lockPeriod);\n', '        return true;\n', '    }\n', '\n', '    //解锁\n', '     function ownerUnlock (address target, uint256 amount) onlyOwner public returns(bool res) {\n', '        require(lockedAmount[target] >= amount);\n', '        balanceOf[target] += amount;\n', '        lockedAmount[target] -= amount;\n', '        emit OwnerUnlock(target,amount);\n', '        return true;\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    //转移所有权\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract TokenERC20 {\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    \n', '    uint256 public totalSupply;\n', '\n', '  \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '  \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '   \n', '    event Burn(address indexed from, uint256 value);\n', '\n', ' \n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  \n', '        balanceOf[msg.sender] = totalSupply;                \n', '        name = tokenName;                                  \n', '        symbol = tokenSymbol;                              \n', '    }\n', '\n', '   //内部函数，转币\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        \n', '        require(_to != 0x0);\n', '       \n', '        require(balanceOf[_from] >= _value);\n', '        \n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        \n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        \n', '        balanceOf[_from] -= _value;\n', '        \n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //使用授权的币\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);    \n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '   //授权\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    //销毁\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);  \n', '        balanceOf[msg.sender] -= _value;            \n', '        totalSupply -= _value;                     \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '  \t//销毁授权的币\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);               \n', '        require(_value <= allowance[_from][msg.sender]);   \n', '        balanceOf[_from] -= _value;                        \n', '        allowance[_from][msg.sender] -= _value;           \n', '        totalSupply -= _value;                            \n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract MyAdvancedToken is owned, TokenERC20 {\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint) public lockedAmount;\n', '    \n', '    event FrozenFunds(address target, bool frozen);\n', '    event Award(address to,uint amount);\n', '    event Punish(address violator,address victim,uint amount);\n', '    event LockToken(address target, uint256 amount,uint lockPeriod);\n', '    event OwnerUnlock(address from,uint256 amount);\n', '    function MyAdvancedToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n', '\n', '\t//转币\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '   //增发\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '    //冻结解冻\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '    //设置私募价格\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '   //私募\n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;               \n', '        _transfer(this, msg.sender, amount);  \n', '        if(!owner.send(msg.value)){\n', '            revert();\n', '        }            \n', '    }\n', '\n', '    //卖给合约\n', '    function sell(uint256 amount) public {\n', '        address myAddress = this;\n', '        require(myAddress.balance >= amount * sellPrice);      \n', '        _transfer(msg.sender, this, amount);              \n', '        msg.sender.transfer(amount * sellPrice);          \n', '    }\n', '    //奖励\n', '    function award(address user,uint256 amount) onlyOwner public\n', '    {\n', '      user.transfer(amount);\n', '      emit Award(user,amount);\n', '    }\n', '    //批量转账\n', '    function transferMultiAddress(address[] _recivers, uint256[] _values) public onlyOwner {\n', '        require (_recivers.length == _values.length);\n', '        address receiver;\n', '        uint256 value;\n', '        for(uint256 i = 0; i < _recivers.length ; i++){\n', '            receiver = _recivers[i];\n', '            value = _values[i];\n', '            _transfer(msg.sender,receiver,value);\n', '             emit Transfer(msg.sender,receiver,value);\n', '        }\n', '    }\n', '\n', '    //惩罚\n', '    function punish(address violator,address victim,uint amount) public onlyOwner\n', '    {\n', '      _transfer(violator,victim,amount);\n', '      emit Punish(violator,victim,amount);\n', '    }\n', '\n', '    //锁仓\n', '     function lockToken (address target,uint256 lockAmount,uint lockPeriod) onlyOwner public returns(bool res)\n', '    {\n', '        require(lockAmount>0);\n', '        require(balanceOf[target] >= lockAmount);\n', '        balanceOf[target] -= lockAmount;\n', '        lockedAmount[target] += lockAmount;\n', '        emit LockToken(target, lockAmount,lockPeriod);\n', '        return true;\n', '    }\n', '\n', '    //解锁\n', '     function ownerUnlock (address target, uint256 amount) onlyOwner public returns(bool res) {\n', '        require(lockedAmount[target] >= amount);\n', '        balanceOf[target] += amount;\n', '        lockedAmount[target] -= amount;\n', '        emit OwnerUnlock(target,amount);\n', '        return true;\n', '    }\n', '    \n', '}']
