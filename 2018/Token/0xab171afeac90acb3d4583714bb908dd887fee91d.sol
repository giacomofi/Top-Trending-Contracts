['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/IZCDistribution.sol\n', '\n', '/**\n', ' * @title IZCDistribution\n', ' * \n', ' * Interface for the ZCDistribuition contract\n', ' *\n', ' * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\n', ' */\n', 'interface IZCDistribution {\n', '\n', '    /**\n', '     * @dev Returns the Amount of tokens issued to consumers \n', '     */\n', '    function getSentAmount() external pure returns (uint256);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/ZCVesting.sol\n', '\n', '/**\n', ' * @title ZCVesting\n', ' * \n', ' * Used to hold tokens and release once configured amount has been released to consumers.\n', ' *\n', ' * 10% of initial tokens in contract can be claimed for every 15 million tokens that are distributed to consumers.\n', ' * After 150 million tokens are distributed consumer the full balanceof the vesting contract is transferable.\n', ' *\n', ' * (c) Philip Louw / Zero Carbon Project 2018. The MIT Licence.\n', ' */\n', 'contract ZCVesting {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Total amount of tokens released\n', '    uint256 public releasedAmount = 0;\n', '    // Address of the Token\n', '    ERC20Basic public token;\n', '    // Address of the Distribution Contract\n', '    IZCDistribution public dist;\n', '    // Release to Address\n', '    address public releaseAddress;\n', '\n', '    // Every amount of tokens to release funds\n', '    uint256 internal constant STEP_DIST_TOKENS = 15000000 * (10**18);\n', '    // Max amount of tokens before all is released\n', '    uint256 internal constant MAX_DIST_TOKENS = 150000000 * (10**18);\n', '\n', '    /**\n', '     * @param _tokenAddr The Address of the Token\n', '     * @param _distAddr The Address of the Distribution contract\n', '     * @param _releaseAddr The Address where to release funds to\n', '     */\n', '    constructor(ERC20Basic _tokenAddr, IZCDistribution _distAddr, address _releaseAddr) public {\n', '        token = _tokenAddr;\n', '        dist = _distAddr;\n', '        releaseAddress = _releaseAddr;\n', '    }\n', '\n', '    /**\n', '     * @dev Event when Tokens are released\n', '     * @param releaseAmount Amount of tokens released\n', '     */\n', '    event TokenReleased(uint256 releaseAmount);\n', '\n', '\n', '    /**\n', '     * @dev Releases the current allowed amount to the releaseAddress. Returns the amount released    \n', '     */\n', '    function release() public  returns (uint256) {\n', '        \n', '        uint256 distAmount = dist.getSentAmount();\n', '        if (distAmount < STEP_DIST_TOKENS) \n', '            return 0;\n', '\n', '        uint256 currBalance = token.balanceOf(address(this));\n', '\n', '        if (distAmount >= MAX_DIST_TOKENS) {\n', '            assert(token.transfer(releaseAddress, currBalance));\n', '            releasedAmount = releasedAmount.add(currBalance);\n', '            return currBalance;\n', '        }\n', '\n', '        uint256 releaseAllowed = currBalance.add(releasedAmount).div(10).mul(distAmount.div(STEP_DIST_TOKENS));\n', '\n', '        if (releaseAllowed <= releasedAmount)\n', '            return 0;\n', '\n', '        uint256 releaseAmount = releaseAllowed.sub(releasedAmount);\n', '        releasedAmount = releasedAmount.add(releaseAmount);\n', '        assert(token.transfer(releaseAddress, releaseAmount));\n', '        emit TokenReleased(releaseAmount);\n', '        return releaseAmount;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the token balance of this ZCVesting contract\n', '    */\n', '    function currentBalance() public view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '}']