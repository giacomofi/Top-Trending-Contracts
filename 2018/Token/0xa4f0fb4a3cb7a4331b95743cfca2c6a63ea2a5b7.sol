['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0);\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint256 tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        ERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        internal\n', '    {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        require(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract TokenVesting is Owned {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20;\n', '\n', '    event Released(uint256 amount);\n', '    event Revoked();\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    uint256 public cliff;\n', '    uint256 public start;\n', '    uint256 public duration;\n', '\n', '    bool public revocable;\n', '\n', '    mapping (address => uint256) public released;\n', '    mapping (address => bool) public revoked;\n', '\n', '    /**\n', '     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '     * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '     * of the balance will have vested.\n', '     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '     * @param _start the time (as Unix time) at which point vesting starts \n', '     * @param _duration duration in seconds of the period in which the tokens will vest\n', '     * @param _revocable whether the vesting is revocable or not\n', '     */\n', '    constructor(\n', '        address _beneficiary,\n', '        uint256 _start,\n', '        uint256 _cliff,\n', '        uint256 _duration,\n', '        bool _revocable\n', '    )\n', '        public\n', '    {\n', '        require(_beneficiary != address(0));\n', '        require(_cliff <= _duration);\n', '\n', '        beneficiary = _beneficiary;\n', '        revocable = _revocable;\n', '        duration = _duration;\n', '        cliff = _start.add(_cliff);\n', '        start = _start;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers vested tokens to beneficiary.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function release(ERC20 token) public {\n', '        uint256 unreleased = releasableAmount(token);\n', '\n', '        require(unreleased > 0);\n', '\n', '        released[token] = released[token].add(unreleased);\n', '\n', '        token.safeTransfer(beneficiary, unreleased);\n', '\n', '        emit Released(unreleased);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '     * remain in the contract, the rest are returned to the owner.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function revoke(ERC20 token) public onlyOwner {\n', '        require(revocable);\n', '        require(!revoked[token]);\n', '\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        uint256 unreleased = releasableAmount(token);\n', '        uint256 refund = balance.sub(unreleased);\n', '\n', '        revoked[token] = true;\n', '\n', '        token.safeTransfer(owner, refund);\n', '\n', '        emit Revoked();\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function releasableAmount(ERC20 token) public view returns (uint256) {\n', '        return vestedAmount(token).sub(released[token]);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function vestedAmount(ERC20 token) public view returns (uint256) {\n', '        uint256 currentBalance = token.balanceOf(this);\n', '        uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '        if (block.timestamp < cliff) {\n', '          return 0;\n', '        } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n', '          return totalBalance;\n', '        } else {\n', '          return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Don&#39;t accept ETH\n', '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']