['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    onlyOwner\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/GambioToken.sol\n', '\n', 'contract GambioToken is CappedToken {\n', '\n', '\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "GMB";\n', '  string public symbol = "GMB";\n', '  uint8 public decimals = 18;\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '  event BurnTransferred(address indexed previousBurner, address indexed newBurner);\n', '\n', '  address burnerRole;\n', '\n', '  modifier onlyBurner() {\n', '    require(msg.sender == burnerRole);\n', '    _;\n', '  }\n', '\n', '  constructor(address _burner, uint256 _cap) public CappedToken(_cap) {\n', '    burnerRole = _burner;\n', '  }\n', '\n', '  function transferBurnRole(address newBurner) public onlyBurner {\n', '    require(newBurner != address(0));\n', '    emit BurnTransferred(burnerRole, newBurner);\n', '    burnerRole = newBurner;\n', '  }\n', '\n', '  function burn(uint256 _value) public onlyBurner {\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(msg.sender, _value);\n', '    emit Transfer(msg.sender, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/Crowdsale.sol\n', '\n', 'contract Crowdsale {\n', '\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  GambioToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  uint256 public rate;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  event TokenPurchase(address indexed beneficiary, uint256 indexed value, uint256 indexed amount, uint256 transactionId);\n', '\n', '  constructor(\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    uint256 _initialWeiRaised,\n', '    uint256 _tokenCap) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_wallet != address(0));\n', '    require(_rate > 0);\n', '    require(_tokenCap > 0);\n', '\n', '    token = new GambioToken(_wallet, _tokenCap);\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    weiRaised = _initialWeiRaised;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/TokenVesting.sol\n', '\n', '/* solium-disable security/no-block-members */\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _start the time (as Unix time) at which point vesting starts \n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  constructor(\n', '    address _beneficiary,\n', '    uint256 _start,\n', '    uint256 _cliff,\n', '    uint256 _duration,\n', '    bool _revocable\n', '  )\n', '    public\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    emit Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    emit Revoked();\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (block.timestamp < cliff) {\n', '      return 0;\n', '    } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/GambioVesting.sol\n', '\n', 'contract GambioVesting is TokenVesting {\n', '\n', '\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public previousRelease;\n', '  uint256 period;\n', '\n', '  constructor(uint256 _period, address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable)\n', '  public\n', '  TokenVesting(_beneficiary, _start, _cliff, _duration, _revocable) {\n', '    //require(period > 0);\n', '\n', '    period = _period;\n', '    previousRelease = now;\n', '  }\n', '\n', '  //overriding release function\n', '  function release(ERC20Basic token) public {\n', '    require(now >= previousRelease.add(period));\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    previousRelease = now;\n', '\n', '    emit Released(unreleased);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/CappedCrowdsale.sol\n', '\n', 'contract CappedCrowdsale is Crowdsale, Ownable {\n', '\n', '\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public hardCap;\n', '  bool public isFinalized = false;\n', '\n', '  //vesting\n', '  uint256 public vestingTokens;\n', '  uint256 public vestingDuration;\n', '  uint256 public vestingPeriod;\n', '  address public vestingBeneficiary;\n', '  GambioVesting public vesting;\n', '\n', '  event Finalized();\n', '  event FinishMinting();\n', '\n', '  event TokensMinted(\n', '    address indexed beneficiary,\n', '    uint256 indexed amount\n', '  );\n', '\n', '  constructor(uint256 _hardCap, uint256[] _vestingData, address _beneficiary)\n', '  public {\n', '\n', '    require(_vestingData.length == 3);\n', '    require(_hardCap > 0);\n', '    require(_vestingData[0] > 0);\n', '    require(_vestingData[1] > 0);\n', '    require(_vestingData[2] > 0);\n', '    require(_beneficiary != address(0));\n', '\n', '    hardCap = _hardCap;\n', '    vestingTokens = _vestingData[0];\n', '    vestingDuration = _vestingData[1];\n', '    vestingPeriod = _vestingData[2];\n', '    vestingBeneficiary = _beneficiary;\n', '  }\n', '\n', '  /**\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', '     * work. Calls the contract&#39;s finalization function.\n', '     */\n', '  function finalize() public onlyOwner {\n', '    require(!isFinalized);\n', '\n', '    vesting = new GambioVesting(vestingPeriod, vestingBeneficiary, now, 0, vestingDuration, false);\n', '\n', '    token.mint(address(vesting), vestingTokens);\n', '\n', '    emit Finalized();\n', '    isFinalized = true;\n', '  }\n', '\n', '  function finishMinting() public onlyOwner {\n', '    require(token.mintingFinished() == false);\n', '    require(isFinalized);\n', '    token.finishMinting();\n', '\n', '    emit FinishMinting();\n', '  }\n', '\n', '  function mint(address beneficiary, uint256 amount) public onlyOwner {\n', '    require(!token.mintingFinished());\n', '    require(isFinalized);\n', '    require(amount > 0);\n', '    require(beneficiary != address(0));\n', '    token.mint(beneficiary, amount);\n', '\n', '    emit TokensMinted(beneficiary, amount);\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= hardCap;\n', '    return super.hasEnded() || capReached || isFinalized;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/OnlyWhiteListedAddresses.sol\n', '\n', 'contract OnlyWhiteListedAddresses is Ownable {\n', '\n', '\n', '  using SafeMath for uint256;\n', '  address utilityAccount;\n', '  mapping(address => bool) whitelist;\n', '  mapping(address => address) public referrals;\n', '\n', '  modifier onlyOwnerOrUtility() {\n', '    require(msg.sender == owner || msg.sender == utilityAccount);\n', '    _;\n', '  }\n', '\n', '  event WhitelistedAddresses(\n', '    address[] users\n', '  );\n', '\n', '  event ReferralsAdded(\n', '    address[] user,\n', '    address[] referral\n', '  );\n', '\n', '  constructor(address _utilityAccount) public {\n', '    utilityAccount = _utilityAccount;\n', '  }\n', '\n', '  function whitelistAddress(address[] users) public onlyOwnerOrUtility {\n', '    for (uint i = 0; i < users.length; i++) {\n', '      whitelist[users[i]] = true;\n', '    }\n', '    emit WhitelistedAddresses(users);\n', '  }\n', '\n', '  function addAddressReferrals(address[] users, address[] _referrals) public onlyOwnerOrUtility {\n', '    require(users.length == _referrals.length);\n', '    for (uint i = 0; i < users.length; i++) {\n', '      require(isWhiteListedAddress(users[i]));\n', '\n', '      referrals[users[i]] = _referrals[i];\n', '    }\n', '    emit ReferralsAdded(users, _referrals);\n', '  }\n', '\n', '  function isWhiteListedAddress(address addr) public view returns (bool) {\n', '    return whitelist[addr];\n', '  }\n', '}\n', '\n', '// File: contracts/GambioCrowdsale.sol\n', '\n', 'contract GambioCrowdsale is CappedCrowdsale, OnlyWhiteListedAddresses {\n', '  using SafeMath for uint256;\n', '\n', '  struct TokenPurchaseRecord {\n', '    uint256 timestamp;\n', '    uint256 weiAmount;\n', '    address beneficiary;\n', '  }\n', '\n', '  uint256 transactionId = 1;\n', '\n', '  mapping(uint256 => TokenPurchaseRecord) pendingTransactions;\n', '\n', '  mapping(uint256 => bool) completedTransactions;\n', '\n', '  uint256 public referralPercentage;\n', '\n', '  uint256 public individualCap;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param transactionId transaction identifier\n', '   * @param beneficiary who will get the tokens\n', '   * @param timestamp when the token purchase request was made\n', '   * @param weiAmount wei invested\n', '   */\n', '  event TokenPurchaseRequest(\n', '    uint256 indexed transactionId,\n', '    address beneficiary,\n', '    uint256 indexed timestamp,\n', '    uint256 indexed weiAmount,\n', '    uint256 tokensAmount\n', '  );\n', '\n', '  event ReferralTokensSent(\n', '    address indexed beneficiary,\n', '    uint256 indexed tokensAmount,\n', '    uint256 indexed transactionId\n', '  );\n', '\n', '  event BonusTokensSent(\n', '    address indexed beneficiary,\n', '    uint256 indexed tokensAmount,\n', '    uint256 indexed transactionId\n', '  );\n', '\n', '  constructor(\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    uint256 _icoHardCapWei,\n', '    uint256 _referralPercentage,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    uint256 _privateWeiRaised,\n', '    uint256 _individualCap,\n', '    address _utilityAccount,\n', '    uint256 _tokenCap,\n', '    uint256[] _vestingData\n', '  )\n', '  public\n', '  OnlyWhiteListedAddresses(_utilityAccount)\n', '  CappedCrowdsale(_icoHardCapWei, _vestingData, _wallet)\n', '  Crowdsale(_startTime, _endTime, _rate, _wallet, _privateWeiRaised, _tokenCap)\n', '  {\n', '    referralPercentage = _referralPercentage;\n', '    individualCap = _individualCap;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function() external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(!isFinalized);\n', '    require(beneficiary == msg.sender);\n', '    require(msg.value != 0);\n', '    require(msg.value >= individualCap);\n', '\n', '    uint256 weiAmount = msg.value;\n', '    require(isWhiteListedAddress(beneficiary));\n', '    require(validPurchase(weiAmount));\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    uint256 _transactionId = transactionId;\n', '    uint256 tokensAmount = weiAmount.mul(rate);\n', '\n', '    pendingTransactions[_transactionId] = TokenPurchaseRecord(now, weiAmount, beneficiary);\n', '    transactionId += 1;\n', '\n', '\n', '    emit TokenPurchaseRequest(_transactionId, beneficiary, now, weiAmount, tokensAmount);\n', '    forwardFunds();\n', '  }\n', '\n', '  function delayIcoEnd(uint256 newDate) public onlyOwner {\n', '    require(newDate != 0);\n', '    require(newDate > now);\n', '    require(!hasEnded());\n', '    require(newDate > endTime);\n', '\n', '    endTime = newDate;\n', '  }\n', '\n', '  function increaseWeiRaised(uint256 amount) public onlyOwner {\n', '    require(now < startTime);\n', '    require(amount > 0);\n', '    require(weiRaised.add(amount) <= hardCap);\n', '\n', '    weiRaised = weiRaised.add(amount);\n', '  }\n', '\n', '  function decreaseWeiRaised(uint256 amount) public onlyOwner {\n', '    require(now < startTime);\n', '    require(amount > 0);\n', '    require(weiRaised > 0);\n', '    require(weiRaised >= amount);\n', '\n', '    weiRaised = weiRaised.sub(amount);\n', '  }\n', '\n', '  function issueTokensMultiple(uint256[] _transactionIds, uint256[] bonusTokensAmounts) public onlyOwner {\n', '    require(isFinalized);\n', '    require(_transactionIds.length == bonusTokensAmounts.length);\n', '    for (uint i = 0; i < _transactionIds.length; i++) {\n', '      issueTokens(_transactionIds[i], bonusTokensAmounts[i]);\n', '    }\n', '  }\n', '\n', '  function issueTokens(uint256 _transactionId, uint256 bonusTokensAmount) internal {\n', '    require(completedTransactions[_transactionId] != true);\n', '    require(pendingTransactions[_transactionId].timestamp != 0);\n', '\n', '    TokenPurchaseRecord memory record = pendingTransactions[_transactionId];\n', '    uint256 tokens = record.weiAmount.mul(rate);\n', '    address referralAddress = referrals[record.beneficiary];\n', '\n', '    token.mint(record.beneficiary, tokens);\n', '    emit TokenPurchase(record.beneficiary, record.weiAmount, tokens, _transactionId);\n', '\n', '    completedTransactions[_transactionId] = true;\n', '\n', '    if (bonusTokensAmount != 0) {\n', '      require(bonusTokensAmount != 0);\n', '      token.mint(record.beneficiary, bonusTokensAmount);\n', '      emit BonusTokensSent(record.beneficiary, bonusTokensAmount, _transactionId);\n', '    }\n', '\n', '    if (referralAddress != address(0)) {\n', '      uint256 referralAmount = tokens.mul(referralPercentage).div(uint256(100));\n', '      token.mint(referralAddress, referralAmount);\n', '      emit ReferralTokensSent(referralAddress, referralAmount, _transactionId);\n', '    }\n', '  }\n', '\n', '  function validPurchase(uint256 weiAmount) internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(weiAmount) <= hardCap;\n', '    bool withinCrowdsaleInterval = now >= startTime && now <= endTime;\n', '    return withinCrowdsaleInterval && withinCap;\n', '  }\n', '\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '// File: contracts/Migrations.sol\n', '\n', 'contract Migrations {\n', '\n', '\n', '  address public owner;\n', '  uint public lastCompletedMigration;\n', '\n', '  modifier restricted() {\n', '    if (msg.sender == owner) _;\n', '  }\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function setCompleted(uint completed) public restricted {\n', '    lastCompletedMigration = completed;\n', '  }\n', '\n', '  function upgrade(address newAddress) public restricted {\n', '    Migrations upgraded = Migrations(newAddress);\n', '    upgraded.setCompleted(lastCompletedMigration);\n', '  }\n', '}']