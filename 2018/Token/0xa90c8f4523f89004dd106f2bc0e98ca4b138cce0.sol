['/**\n', ' * Investors relations: gogogadgetgetit\n', '**/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', ' \n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Standard\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Interface {\n', '     function totalSupply() public constant returns (uint);\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) public returns (bool success);\n', '     function approve(address spender, uint tokens) public returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'interface OldFACEToken {\n', '    function transfer(address receiver, uint amount) external;\n', '    function balanceOf(address _owner) external returns (uint256 balance);\n', '    function showMyTokenBalance(address addr) external;\n', '}\n', 'contract MENSA is ERC20Interface,Ownable {\n', '\n', '   using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) tokenBalances;\n', '   \n', '   string public constant name = "MENSA";\n', '   string public constant symbol = "MSA";\n', '   uint256 public constant decimals = 18;\n', '\n', '   uint256 public constant INITIAL_SUPPLY = 8761815;\n', '    address ownerWallet;\n', '   // Owner of account approves the transfer of an amount to another account\n', '   mapping (address => mapping (address => uint256)) allowed;\n', '   event Debug(string message, address addr, uint256 number);\n', '\n', '    function MENSA (address wallet) public {\n', '        owner = msg.sender;\n', '        ownerWallet=wallet;\n', '        totalSupply = INITIAL_SUPPLY * 10 ** 18;\n', '        tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18;   //Since we divided the token into 10^18 parts\n', '    }\n', ' /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(tokenBalances[msg.sender]>=_value);\n', '    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\n', '    tokenBalances[_to] = tokenBalances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  \n', '     /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= tokenBalances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n', '    tokenBalances[_to] = tokenBalances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '     /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '     // ------------------------------------------------------------------------\n', '     // Total supply\n', '     // ------------------------------------------------------------------------\n', '     function totalSupply() public constant returns (uint) {\n', '         return totalSupply  - tokenBalances[address(0)];\n', '     }\n', '     \n', '    \n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Returns the amount of tokens approved by the owner that can be\n', '     // transferred to the spender&#39;s account\n', '     // ------------------------------------------------------------------------\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '         return allowed[tokenOwner][spender];\n', '     }\n', '     \n', '     /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Don&#39;t accept ETH\n', '     // ------------------------------------------------------------------------\n', '     function () public payable {\n', '         revert();\n', '     }\n', ' \n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '    return tokenBalances[_owner];\n', '  }\n', '\n', '    function send(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\n', '        require(tokenBalances[buyer]<=tokenAmount);\n', '        tokenBalances[wallet] = tokenBalances[wallet].add(tokenAmount);\n', '        Transfer(buyer, wallet, tokenAmount);\n', '     }\n', '    function showMyTokenBalance(address addr) public view returns (uint tokenBalance) {\n', '        tokenBalance = tokenBalances[addr];\n', '    }\n', '}']
['/**\n', ' * Investors relations: gogogadgetgetit\n', '**/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', ' \n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Standard\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Interface {\n', '     function totalSupply() public constant returns (uint);\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) public returns (bool success);\n', '     function approve(address spender, uint tokens) public returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'interface OldFACEToken {\n', '    function transfer(address receiver, uint amount) external;\n', '    function balanceOf(address _owner) external returns (uint256 balance);\n', '    function showMyTokenBalance(address addr) external;\n', '}\n', 'contract MENSA is ERC20Interface,Ownable {\n', '\n', '   using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) tokenBalances;\n', '   \n', '   string public constant name = "MENSA";\n', '   string public constant symbol = "MSA";\n', '   uint256 public constant decimals = 18;\n', '\n', '   uint256 public constant INITIAL_SUPPLY = 8761815;\n', '    address ownerWallet;\n', '   // Owner of account approves the transfer of an amount to another account\n', '   mapping (address => mapping (address => uint256)) allowed;\n', '   event Debug(string message, address addr, uint256 number);\n', '\n', '    function MENSA (address wallet) public {\n', '        owner = msg.sender;\n', '        ownerWallet=wallet;\n', '        totalSupply = INITIAL_SUPPLY * 10 ** 18;\n', '        tokenBalances[wallet] = INITIAL_SUPPLY * 10 ** 18;   //Since we divided the token into 10^18 parts\n', '    }\n', ' /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(tokenBalances[msg.sender]>=_value);\n', '    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\n', '    tokenBalances[_to] = tokenBalances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  \n', '     /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= tokenBalances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n', '    tokenBalances[_to] = tokenBalances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '     /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '     // ------------------------------------------------------------------------\n', '     // Total supply\n', '     // ------------------------------------------------------------------------\n', '     function totalSupply() public constant returns (uint) {\n', '         return totalSupply  - tokenBalances[address(0)];\n', '     }\n', '     \n', '    \n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Returns the amount of tokens approved by the owner that can be\n', "     // transferred to the spender's account\n", '     // ------------------------------------------------------------------------\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '         return allowed[tokenOwner][spender];\n', '     }\n', '     \n', '     /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '     \n', '     // ------------------------------------------------------------------------\n', "     // Don't accept ETH\n", '     // ------------------------------------------------------------------------\n', '     function () public payable {\n', '         revert();\n', '     }\n', ' \n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '    return tokenBalances[_owner];\n', '  }\n', '\n', '    function send(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\n', '        require(tokenBalances[buyer]<=tokenAmount);\n', '        tokenBalances[wallet] = tokenBalances[wallet].add(tokenAmount);\n', '        Transfer(buyer, wallet, tokenAmount);\n', '     }\n', '    function showMyTokenBalance(address addr) public view returns (uint tokenBalance) {\n', '        tokenBalance = tokenBalances[addr];\n', '    }\n', '}']
