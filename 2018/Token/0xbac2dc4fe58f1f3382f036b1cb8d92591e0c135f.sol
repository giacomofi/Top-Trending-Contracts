['pragma solidity ^0.4.16;\n', '\n', '// The following is the Ethereum Mining Manager Contract, Version Two.\n', '\n', '// It assumes that each graphics card draws 80 watts (75 watts for gtx 1050 ti and 5 watts for 1/13 of the rig, an underestimate)\n', '// It also assumes that the cost of electricity is .20$/KWh\n', '// Tokens can only be tranferred by their owners.\n', '\n', '// Tokens(Graphics Cards) can be created to and destroyed from anyone if done by the Contract creator.\n', '\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    //mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        //require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        //allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       MINING CONTRACT MAIN CODE        */\n', '/******************************************/\n', '\n', 'contract MiningToken is owned, TokenERC20 {\n', '    uint256 public supplyReady;  // How many are in stock to be bought (set to zero to disable the buying of cards)\n', '    uint256 public min4payout;   // Minimum ether in contract for payout to be allowed\n', '    uint256 public centsPerMonth;// Cost to run a card\n', '    mapping(uint256 => address) public holders;    // Contract&#39;s list of people who own graphics cards\n', '    mapping(address => uint256) public indexes;\n', '    uint256 public num_holders=1;\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function MiningToken(\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(0, tokenName, tokenSymbol) public {\n', '        centsPerMonth=0;\n', '        decimals=0;\n', '        setMinimum(0);\n', '        holders[num_holders++]=(msg.sender);\n', '    }\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        if(indexes[_to]==0||holders[indexes[_to]]==0){\n', '            indexes[_to]=num_holders;\n', '            holders[num_holders++]=_to;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\t\n', '\t// Set minimum payout\n', '    function setMinimum(uint256 d) onlyOwner public{\n', '        min4payout=d*1 ether / 1000;\n', '    }\n', '\t\n', '\t// set card $/watt/month\n', '    function setCentsPerMonth(uint256 amount) onlyOwner public {\n', '        centsPerMonth=amount;\n', '    }\n', '\t\n', '\t// get mining payout and send to everyone\n', '\t// Requires price of ethereum to deduct electricity cost\n', '    function getPayout(uint etherPrice) onlyOwner public {\n', '        require(this.balance>min4payout);\n', '        uint256 perToken=this.balance/totalSupply;\n', '        for (uint i = 1; i < num_holders; i++) {\n', '            address d=holders[i];\n', '            if(d!=0){\n', '                uint bal=balanceOf[d];\n', '                if(bal==0){\n', '                    holders[i]=0;\n', '                }else{\n', '                    uint powercost=((bal*centsPerMonth)/100) *( 1 ether/etherPrice);\n', '                    holders[i].transfer((bal * perToken)-powercost);\n', '                }\n', '            }\n', '        }\n', '        owner.transfer(((totalSupply*centsPerMonth)/100) *( 1 ether/etherPrice)); // transfer elecricity cost to contract owner\n', '    }\n', '\t\n', '\t// add graphics card for owner of contract\n', '    function mint(uint256 amt) onlyOwner public {\n', '        balanceOf[owner] += amt;\n', '        totalSupply += amt;\n', '        Transfer(this, msg.sender, amt);\n', '    }\n', '\t// add graphics cards for someone else\n', '    function mintTo(uint256 amt,address to) onlyOwner public {\n', '        balanceOf[to] += amt;\n', '        totalSupply += amt;\n', '        Transfer(this, to, amt);\n', '        if(indexes[to]==0||holders[indexes[to]]==0){\n', '            indexes[to]=num_holders;\n', '            holders[num_holders++]=to;\n', '        }\n', '    }\n', '\t\n', '\t\n', '\t// cards cannot be sold unless the contract is destroyed\n', '\t\n', '    /// notice Sell `amount` tokens to contract\n', '    /// param amount amount of tokens to be sold\n', '    //function sell(uint256 amount) public {\n', '    //    require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n', '    //    burnFrom(msg.sender, amount);                     // makes the transfers\n', '    //    msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It&#39;s important to do this last to avoid recursion attacks\n', '    //}\n', '\t\n', '\t// allows contract to be paid:\n', '\t\n', '    function() payable public{\n', '        \n', '    }\n', '\t\n', '\t\n', '\t// If something goes wrong we can destroy the contract and everyone gets a refund at card price for each of their cards.\n', '\t// by setting the price of cards to zero then no refund is sent.\n', '\t\n', '\t// if a refund is executed then the contract first must have enough Ether to do the refund.\n', '\t// Send the Ethereum to the contract as necessary first.\n', '    function selfDestruct() onlyOwner payable public{\n', '        uint256 perToken=this.balance/totalSupply;\n', '        for (uint i = 1; i < num_holders; i++) {\n', '            holders[i].transfer(balanceOf[holders[i]] * perToken);\n', '        }\n', '\t\t// pay the rest to the owner\n', '        selfdestruct(owner);\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '// The following is the Ethereum Mining Manager Contract, Version Two.\n', '\n', '// It assumes that each graphics card draws 80 watts (75 watts for gtx 1050 ti and 5 watts for 1/13 of the rig, an underestimate)\n', '// It also assumes that the cost of electricity is .20$/KWh\n', '// Tokens can only be tranferred by their owners.\n', '\n', '// Tokens(Graphics Cards) can be created to and destroyed from anyone if done by the Contract creator.\n', '\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    //mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function TokenERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        //require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        //allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************/\n', '/*       MINING CONTRACT MAIN CODE        */\n', '/******************************************/\n', '\n', 'contract MiningToken is owned, TokenERC20 {\n', '    uint256 public supplyReady;  // How many are in stock to be bought (set to zero to disable the buying of cards)\n', '    uint256 public min4payout;   // Minimum ether in contract for payout to be allowed\n', '    uint256 public centsPerMonth;// Cost to run a card\n', "    mapping(uint256 => address) public holders;    // Contract's list of people who own graphics cards\n", '    mapping(address => uint256) public indexes;\n', '    uint256 public num_holders=1;\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function MiningToken(\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) TokenERC20(0, tokenName, tokenSymbol) public {\n', '        centsPerMonth=0;\n', '        decimals=0;\n', '        setMinimum(0);\n', '        holders[num_holders++]=(msg.sender);\n', '    }\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        if(indexes[_to]==0||holders[indexes[_to]]==0){\n', '            indexes[_to]=num_holders;\n', '            holders[num_holders++]=_to;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\t\n', '\t// Set minimum payout\n', '    function setMinimum(uint256 d) onlyOwner public{\n', '        min4payout=d*1 ether / 1000;\n', '    }\n', '\t\n', '\t// set card $/watt/month\n', '    function setCentsPerMonth(uint256 amount) onlyOwner public {\n', '        centsPerMonth=amount;\n', '    }\n', '\t\n', '\t// get mining payout and send to everyone\n', '\t// Requires price of ethereum to deduct electricity cost\n', '    function getPayout(uint etherPrice) onlyOwner public {\n', '        require(this.balance>min4payout);\n', '        uint256 perToken=this.balance/totalSupply;\n', '        for (uint i = 1; i < num_holders; i++) {\n', '            address d=holders[i];\n', '            if(d!=0){\n', '                uint bal=balanceOf[d];\n', '                if(bal==0){\n', '                    holders[i]=0;\n', '                }else{\n', '                    uint powercost=((bal*centsPerMonth)/100) *( 1 ether/etherPrice);\n', '                    holders[i].transfer((bal * perToken)-powercost);\n', '                }\n', '            }\n', '        }\n', '        owner.transfer(((totalSupply*centsPerMonth)/100) *( 1 ether/etherPrice)); // transfer elecricity cost to contract owner\n', '    }\n', '\t\n', '\t// add graphics card for owner of contract\n', '    function mint(uint256 amt) onlyOwner public {\n', '        balanceOf[owner] += amt;\n', '        totalSupply += amt;\n', '        Transfer(this, msg.sender, amt);\n', '    }\n', '\t// add graphics cards for someone else\n', '    function mintTo(uint256 amt,address to) onlyOwner public {\n', '        balanceOf[to] += amt;\n', '        totalSupply += amt;\n', '        Transfer(this, to, amt);\n', '        if(indexes[to]==0||holders[indexes[to]]==0){\n', '            indexes[to]=num_holders;\n', '            holders[num_holders++]=to;\n', '        }\n', '    }\n', '\t\n', '\t\n', '\t// cards cannot be sold unless the contract is destroyed\n', '\t\n', '    /// notice Sell `amount` tokens to contract\n', '    /// param amount amount of tokens to be sold\n', '    //function sell(uint256 amount) public {\n', '    //    require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n', '    //    burnFrom(msg.sender, amount);                     // makes the transfers\n', "    //    msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    //}\n', '\t\n', '\t// allows contract to be paid:\n', '\t\n', '    function() payable public{\n', '        \n', '    }\n', '\t\n', '\t\n', '\t// If something goes wrong we can destroy the contract and everyone gets a refund at card price for each of their cards.\n', '\t// by setting the price of cards to zero then no refund is sent.\n', '\t\n', '\t// if a refund is executed then the contract first must have enough Ether to do the refund.\n', '\t// Send the Ethereum to the contract as necessary first.\n', '    function selfDestruct() onlyOwner payable public{\n', '        uint256 perToken=this.balance/totalSupply;\n', '        for (uint i = 1; i < num_holders; i++) {\n', '            holders[i].transfer(balanceOf[holders[i]] * perToken);\n', '        }\n', '\t\t// pay the rest to the owner\n', '        selfdestruct(owner);\n', '    }\n', '}']
