['pragma solidity ^0.4.23;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ZooblinToken CROWDSALE token contract\n', '//\n', '// Deployed by : 0x9D926842F6D40c3AF314992f7865Bc5be17e8676\n', '// Symbol      : ZBN\n', '// Name        : ZooblinToken\n', '// Total supply: 600000000\n', '// Decimals    : 18\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function zeroSub(uint a, uint b) internal pure returns (uint c) {\n', '        if (a >= b) {\n', '            c = safeSub(a, b);\n', '        } else {\n', '            c = 0;\n', '        }\n', '    }\n', '\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract ZooblinToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    uint public startDate;\n', '\n', '    uint public preSaleAmount;\n', '    uint private preSaleFrom;\n', '    uint private preSaleUntil;\n', '\n', '    uint public roundOneAmount;\n', '    uint private roundOneFrom;\n', '    uint private roundOneUntil;\n', '\n', '    uint public roundTwoAmount;\n', '    uint private roundTwoFrom;\n', '    uint private roundTwoUntil;\n', '\n', '    uint public roundThreeAmount;\n', '    uint private roundThreeFrom;\n', '    uint private roundThreeUntil;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "ZBN";\n', '        name = "Zooblin Token";\n', '        decimals = 18;\n', '        _totalSupply = 300000000000000000000000000;\n', '\n', '        balances[0x9D926842F6D40c3AF314992f7865Bc5be17e8676] = _totalSupply;\n', '        emit Transfer(address(0), 0x9D926842F6D40c3AF314992f7865Bc5be17e8676, _totalSupply);\n', '\n', '        startDate       = 1525564800; // Sunday, May 6, 2018 12:00:00 AM\n', '\n', '        preSaleAmount   = 20000000000000000000000000;\n', '        roundOneAmount  = 150000000000000000000000000;\n', '        roundTwoAmount  = 80000000000000000000000000;\n', '        roundThreeAmount= 50000000000000000000000000;\n', '\n', '        preSaleFrom     = 1527811200; // Friday, June 1, 2018 12:00:00 AM\n', '        preSaleUntil    = 1531699199; // Sunday, July 15, 2018 11:59:59 PM\n', '\n', '        roundOneFrom    = 1533081600; // Wednesday, August 1, 2018 12:00:00 AM\n', '        roundOneUntil   = 1535759999; // Friday, August 31, 2018 11:59:59 PM\n', '\n', '        roundTwoFrom    = 1535760000; // Saturday, September 1, 2018 12:00:00 AM\n', '        roundTwoUntil   = 1538351999; // Sunday, September 30, 2018 11:59:59 PM\n', '\n', '        roundThreeFrom  = 1538352000; // Monday, October 1, 2018 12:00:00 AM\n', '        roundThreeUntil = 1541030399; // Wednesday, October 31, 2018 11:59:59 PM\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Pre-sale Period\n', '    // ------------------------------------------------------------------------\n', '    function isPreSalePeriod(uint date) public constant returns (bool) {\n', '        return date >= preSaleFrom && date <= preSaleUntil && preSaleAmount > 0;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Round One Sale Period\n', '    // ------------------------------------------------------------------------\n', '    function isRoundOneSalePeriod(uint date) public constant returns (bool) {\n', '        return date >= roundOneFrom && date <= roundOneUntil && roundOneAmount > 0;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Round Two Sale Period\n', '    // ------------------------------------------------------------------------\n', '    function isRoundTwoSalePeriod(uint date) public constant returns (bool) {\n', '        return date >= roundTwoFrom && date <= roundTwoUntil && roundTwoAmount > 0;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Round Three Sale Period\n', '    // ------------------------------------------------------------------------\n', '    function isRoundThreeSalePeriod(uint date) public constant returns (bool) {\n', '        return date >= roundThreeFrom && date <= roundThreeUntil && roundThreeAmount > 0;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 10,000 ZBN Tokens per 1 ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= startDate && msg.value >= 1000000000000000000);\n', '\n', '        uint tokens = 0;\n', '\n', '        if (isPreSalePeriod(now)) {\n', '            tokens = msg.value * 13000;\n', '            preSaleAmount = zeroSub(preSaleAmount, tokens);\n', '        }\n', '\n', '        if (isRoundOneSalePeriod(now)) {\n', '            tokens = msg.value * 11500;\n', '            roundOneAmount = zeroSub(roundOneAmount, tokens);\n', '        }\n', '\n', '        if (isRoundTwoSalePeriod(now)) {\n', '            tokens = msg.value * 11000;\n', '            roundTwoAmount = zeroSub(roundTwoAmount, tokens);\n', '        }\n', '\n', '        if (isRoundThreeSalePeriod(now)) {\n', '            tokens = msg.value * 10500;\n', '            roundThreeAmount = zeroSub(roundThreeAmount, tokens);\n', '        }\n', '\n', '        require(tokens > 0);\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        emit Transfer(address(0), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ZooblinToken CROWDSALE token contract\n', '//\n', '// Deployed by : 0x9D926842F6D40c3AF314992f7865Bc5be17e8676\n', '// Symbol      : ZBN\n', '// Name        : ZooblinToken\n', '// Total supply: 600000000\n', '// Decimals    : 18\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function zeroSub(uint a, uint b) internal pure returns (uint c) {\n', '        if (a >= b) {\n', '            c = safeSub(a, b);\n', '        } else {\n', '            c = 0;\n', '        }\n', '    }\n', '\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract ZooblinToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    uint public startDate;\n', '\n', '    uint public preSaleAmount;\n', '    uint private preSaleFrom;\n', '    uint private preSaleUntil;\n', '\n', '    uint public roundOneAmount;\n', '    uint private roundOneFrom;\n', '    uint private roundOneUntil;\n', '\n', '    uint public roundTwoAmount;\n', '    uint private roundTwoFrom;\n', '    uint private roundTwoUntil;\n', '\n', '    uint public roundThreeAmount;\n', '    uint private roundThreeFrom;\n', '    uint private roundThreeUntil;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "ZBN";\n', '        name = "Zooblin Token";\n', '        decimals = 18;\n', '        _totalSupply = 300000000000000000000000000;\n', '\n', '        balances[0x9D926842F6D40c3AF314992f7865Bc5be17e8676] = _totalSupply;\n', '        emit Transfer(address(0), 0x9D926842F6D40c3AF314992f7865Bc5be17e8676, _totalSupply);\n', '\n', '        startDate       = 1525564800; // Sunday, May 6, 2018 12:00:00 AM\n', '\n', '        preSaleAmount   = 20000000000000000000000000;\n', '        roundOneAmount  = 150000000000000000000000000;\n', '        roundTwoAmount  = 80000000000000000000000000;\n', '        roundThreeAmount= 50000000000000000000000000;\n', '\n', '        preSaleFrom     = 1527811200; // Friday, June 1, 2018 12:00:00 AM\n', '        preSaleUntil    = 1531699199; // Sunday, July 15, 2018 11:59:59 PM\n', '\n', '        roundOneFrom    = 1533081600; // Wednesday, August 1, 2018 12:00:00 AM\n', '        roundOneUntil   = 1535759999; // Friday, August 31, 2018 11:59:59 PM\n', '\n', '        roundTwoFrom    = 1535760000; // Saturday, September 1, 2018 12:00:00 AM\n', '        roundTwoUntil   = 1538351999; // Sunday, September 30, 2018 11:59:59 PM\n', '\n', '        roundThreeFrom  = 1538352000; // Monday, October 1, 2018 12:00:00 AM\n', '        roundThreeUntil = 1541030399; // Wednesday, October 31, 2018 11:59:59 PM\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Pre-sale Period\n', '    // ------------------------------------------------------------------------\n', '    function isPreSalePeriod(uint date) public constant returns (bool) {\n', '        return date >= preSaleFrom && date <= preSaleUntil && preSaleAmount > 0;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Round One Sale Period\n', '    // ------------------------------------------------------------------------\n', '    function isRoundOneSalePeriod(uint date) public constant returns (bool) {\n', '        return date >= roundOneFrom && date <= roundOneUntil && roundOneAmount > 0;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Round Two Sale Period\n', '    // ------------------------------------------------------------------------\n', '    function isRoundTwoSalePeriod(uint date) public constant returns (bool) {\n', '        return date >= roundTwoFrom && date <= roundTwoUntil && roundTwoAmount > 0;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Round Three Sale Period\n', '    // ------------------------------------------------------------------------\n', '    function isRoundThreeSalePeriod(uint date) public constant returns (bool) {\n', '        return date >= roundThreeFrom && date <= roundThreeUntil && roundThreeAmount > 0;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 10,000 ZBN Tokens per 1 ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= startDate && msg.value >= 1000000000000000000);\n', '\n', '        uint tokens = 0;\n', '\n', '        if (isPreSalePeriod(now)) {\n', '            tokens = msg.value * 13000;\n', '            preSaleAmount = zeroSub(preSaleAmount, tokens);\n', '        }\n', '\n', '        if (isRoundOneSalePeriod(now)) {\n', '            tokens = msg.value * 11500;\n', '            roundOneAmount = zeroSub(roundOneAmount, tokens);\n', '        }\n', '\n', '        if (isRoundTwoSalePeriod(now)) {\n', '            tokens = msg.value * 11000;\n', '            roundTwoAmount = zeroSub(roundTwoAmount, tokens);\n', '        }\n', '\n', '        if (isRoundThreeSalePeriod(now)) {\n', '            tokens = msg.value * 10500;\n', '            roundThreeAmount = zeroSub(roundThreeAmount, tokens);\n', '        }\n', '\n', '        require(tokens > 0);\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        _totalSupply = safeAdd(_totalSupply, tokens);\n', '        emit Transfer(address(0), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']
