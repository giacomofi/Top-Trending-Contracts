['pragma solidity ^0.4.18;\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function allowance(address owner, address spender) public constant returns (uint);\n', '  function transfer(address to, uint value)  public returns (bool ok);\n', '  function transferFrom(address from, address to, uint value)  public returns (bool ok);\n', '  function approve(address spender, uint value)  public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', 'pragma solidity ^0.4.18;\n', 'library SafeMath {\n', '  function safeMul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function safeDiv(uint a, uint b) internal pure returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function safeSub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', 'pragma solidity ^0.4.18;\n', 'contract StandardToken is ERC20 {\n', '  using SafeMath for uint256; \n', '  modifier onlyPayloadSize(uint size) {\n', '     require(msg.data.length >= size + 4);\n', '     _;\n', '  }\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowed;\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public returns (bool success){\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].safeSub(_value);\n', '    balances[_to] = balances[_to].safeAdd(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '    var _allowance = allowed[_from][msg.sender];\n', '    balances[_to] = balances[_to].safeAdd(_value);\n', '    balances[_from] = balances[_from].safeSub(_value);\n', '    allowed[_from][msg.sender] = _allowance.safeSub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '  function approve(address _spender, uint _value) public returns (bool success) {\n', '    require(_spender != address(0));\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '    require(_owner != address(0));\n', '    require(_spender != address(0));\n', '    return allowed[_owner][_spender];\n', '  }\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    require(_spender != address(0));\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].safeAdd(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\t\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    require(_spender != address(0));\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.safeSub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', 'pragma solidity ^0.4.18;\n', 'contract OdinCoin is StandardToken {\n', '    string public constant name = "ODIN TOKEN";\n', '    string public constant symbol = "ODIN";\n', '    uint8 public constant decimals = 0;\n', '    uint256 public constant totalSupply = 200000000;\n', '\n', '    function OdinCoin(address reserve) public {\n', '        balances[reserve] = totalSupply;\n', '    }\n', '}']