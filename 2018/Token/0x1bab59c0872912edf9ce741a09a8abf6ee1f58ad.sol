['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract SpoutCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 private constant APRIL_23_2018 = 1524441600;\n', '  uint256 private constant MAY_01_2018 = 1525132800;\n', '  uint256 private constant MAY_08_2018 = 1525737600;\n', '  uint256 private constant MAY_15_2018 = 1526342400;\n', '  uint256 private constant JUN_01_2018 = 1527811200;\n', '  uint256 private constant JUN_15_2018 = 1529020800;\n', '  uint256 private constant JULY_01_2018 = 1530403200;\n', '\n', '  MintableToken public token;\n', '\n', '  uint256 public presaleRate;\n', '\n', '  uint256 public icoRate;\n', '\n', '  address public wallet;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 tokenRate, uint256 bonusRate);\n', '\n', '  function SpoutCrowdsale(\n', '    address _token,\n', '    uint256 _presaleRate,\n', '    uint256 _icoRate,\n', '    address _wallet\n', '  ) {\n', '    require(_token != address(0));\n', '    require(_wallet != address(0));\n', '\n', '    token = SpoutMintableToken(_token);\n', '\n', '    presaleRate = _presaleRate;\n', '    icoRate = _icoRate;\n', '\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function () external payable {\n', '\n', '    require(msg.sender != address(0));\n', '    require(isPresalePeriod() || isICOPeriod());\n', '\n', '    uint256 tokenRate = getCurrentTokenRate();\n', '    uint256 tokens = msg.value.mul(tokenRate);\n', '    uint256 bonusRate = getCurrentBonus();\n', '    uint256 bonusTokens = bonusRate.mul(tokens.div(100));\n', '\n', '    tokens = tokens.add(bonusTokens);\n', '\n', '    TokenPurchase(msg.sender, msg.sender, msg.value, tokens, tokenRate, bonusRate);\n', '    token.mint(msg.sender, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  function getCurrentTokenRate() public view returns (uint256) {\n', '    if (now >= APRIL_23_2018 && now < MAY_15_2018) {\n', '      return presaleRate;\n', '    } else {\n', '      return icoRate;\n', '    }\n', '  }\n', '\n', '  function isPresalePeriod() public view returns (bool) {\n', '    if (now >= APRIL_23_2018 && now < MAY_15_2018) {\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function isICOPeriod() public view returns (bool) {\n', '    if (now >= MAY_15_2018 && now < JULY_01_2018) {\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function getCurrentBonus() public view returns (uint256) {\n', '    if (now >= APRIL_23_2018 && now < MAY_01_2018) {\n', '      return 15;\n', '    }\n', '    if (now >= MAY_01_2018 && now < MAY_08_2018) {\n', '      return 10;\n', '    }\n', '    if (now >= MAY_08_2018 && now < MAY_15_2018) {\n', '      return 5;\n', '    }\n', '\n', '    if (now >= MAY_15_2018 && now < JUN_01_2018) {\n', '      return 5;\n', '    }\n', '    if (now >= JUN_01_2018 && now < JUN_15_2018) {\n', '      return 3;\n', '    }\n', '    if (now >= JUN_15_2018 && now < JULY_01_2018) {\n', '      return 2;\n', '    }\n', '\n', '    return 0;\n', '  }\n', '\n', '  function mintTo(address beneficiary, uint256 _amount) onlyOwner public returns (bool) {\n', '    return token.mint(beneficiary, _amount);\n', '  }\n', '}\n', '\n', 'contract SpoutMintableToken is MintableToken {\n', '  string public constant name = "SpoutToken";\n', '  string public constant symbol = "SPT";\n', '  uint8 public constant decimals = 18;\n', '  address originalOwner;\n', '\n', '  bool public transferEnabled = false;\n', '\n', '  function SpoutMintableToken() public {\n', '    originalOwner = msg.sender;\n', '  }\n', '\n', '  function setTransferStatus(bool _enable)  public {\n', '    require(originalOwner == msg.sender);\n', '    transferEnabled = _enable;\n', '  }\n', '\n', '  function getTransferStatus() public view returns (bool){\n', '      return transferEnabled;\n', '  }\n', '\n', '  function getOriginalOwner() public view returns(address) {\n', '      return originalOwner;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(transferEnabled);\n', '\n', '    return super.transfer(_to, _value);\n', '  }\n', '}']