['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() constant public returns (uint);\n', '\n', '    function balanceOf(address who) constant public returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '// File: contracts/ERC20BatchTransfer.sol\n', '/**\n', ' * @author Davy Van Roy\n', ' */\n', 'contract ERC20BatchTransfer {\n', '\n', '    function batchTransferFixedAmount(address _tokenAddress, address[] _beneficiaries, uint256 _amount) public {\n', '        require(_amount > 0);\n', '        ERC20 tokenContract = ERC20(_tokenAddress);\n', '        for (uint b = 0; b < _beneficiaries.length; b++) {\n', '            require(tokenContract.transferFrom(msg.sender, _beneficiaries[b], _amount));\n', '        }\n', '    }\n', '\n', '    function batchTransfer(address _tokenAddress, address[] _beneficiaries, uint256[] _amounts) public {\n', '        require(_beneficiaries.length == _amounts.length);\n', '        ERC20 tokenContract = ERC20(_tokenAddress);\n', '        for (uint b = 0; b < _beneficiaries.length; b++) {\n', '            if (_amounts[b] > 0) {\n', '                require(tokenContract.transferFrom(msg.sender, _beneficiaries[b], _amounts[b]));\n', '            }\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() constant public returns (uint);\n', '\n', '    function balanceOf(address who) constant public returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '// File: contracts/ERC20BatchTransfer.sol\n', '/**\n', ' * @author Davy Van Roy\n', ' */\n', 'contract ERC20BatchTransfer {\n', '\n', '    function batchTransferFixedAmount(address _tokenAddress, address[] _beneficiaries, uint256 _amount) public {\n', '        require(_amount > 0);\n', '        ERC20 tokenContract = ERC20(_tokenAddress);\n', '        for (uint b = 0; b < _beneficiaries.length; b++) {\n', '            require(tokenContract.transferFrom(msg.sender, _beneficiaries[b], _amount));\n', '        }\n', '    }\n', '\n', '    function batchTransfer(address _tokenAddress, address[] _beneficiaries, uint256[] _amounts) public {\n', '        require(_beneficiaries.length == _amounts.length);\n', '        ERC20 tokenContract = ERC20(_tokenAddress);\n', '        for (uint b = 0; b < _beneficiaries.length; b++) {\n', '            if (_amounts[b] > 0) {\n', '                require(tokenContract.transferFrom(msg.sender, _beneficiaries[b], _amounts[b]));\n', '            }\n', '        }\n', '    }\n', '\n', '}']
