['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract SafeMath {\n', '    function add(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function subtract(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant public returns (uint supply);\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool balance);\n', '    function approve(address _spender, uint256 _value) public returns (bool balance);\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '}\n', '\n', 'contract Bible is ERC20, SafeMath {\n', '\n', '    string public name = "Bible";      //  token name\n', '    string public symbol = "GIB";           //  token symbol\n', '    uint256 public decimals = 18;            //  token digit\n', '    uint256 public totalSupply = 0;\n', '    string public version = "1.0.0";\n', '    address creator = 0x0;\n', '    /**\n', '     *  0 : init, 1 : limited, 2 : running, 3 : finishing\n', '     */\n', '    uint8 public tokenStatus = 0;\n', '      \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    function Bible() public {\n', '        creator = msg.sender;\n', '        tokenStatus = 2;\n', '        totalSupply = 11000000000 * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    modifier isCreator {\n', '        assert(creator == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        assert(tokenStatus == 2);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    function status(uint8 _status) isCreator public {\n', '        tokenStatus = _status;\n', '    }\n', '    \n', '    function getStatus() constant public returns (uint8 _status) {\n', '        return tokenStatus;\n', '    }\n', '    \n', '    function totalSupply() constant public returns (uint supply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint _value) isRunning validAddress internal {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        uint previousBalances = SafeMath.add(balanceOf[_from], balanceOf[_to]);\n', '        balanceOf[_from] = SafeMath.subtract(balanceOf[_from], _value);\n', '        balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) isRunning validAddress public returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '    \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract SafeMath {\n', '    function add(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function subtract(uint256 x, uint256 y) pure internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant public returns (uint supply);\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool balance);\n', '    function approve(address _spender, uint256 _value) public returns (bool balance);\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '}\n', '\n', 'contract Bible is ERC20, SafeMath {\n', '\n', '    string public name = "Bible";      //  token name\n', '    string public symbol = "GIB";           //  token symbol\n', '    uint256 public decimals = 18;            //  token digit\n', '    uint256 public totalSupply = 0;\n', '    string public version = "1.0.0";\n', '    address creator = 0x0;\n', '    /**\n', '     *  0 : init, 1 : limited, 2 : running, 3 : finishing\n', '     */\n', '    uint8 public tokenStatus = 0;\n', '      \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    function Bible() public {\n', '        creator = msg.sender;\n', '        tokenStatus = 2;\n', '        totalSupply = 11000000000 * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    modifier isCreator {\n', '        assert(creator == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        assert(tokenStatus == 2);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    function status(uint8 _status) isCreator public {\n', '        tokenStatus = _status;\n', '    }\n', '    \n', '    function getStatus() constant public returns (uint8 _status) {\n', '        return tokenStatus;\n', '    }\n', '    \n', '    function totalSupply() constant public returns (uint supply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint _value) isRunning validAddress internal {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        uint previousBalances = SafeMath.add(balanceOf[_from], balanceOf[_to]);\n', '        balanceOf[_from] = SafeMath.subtract(balanceOf[_from], _value);\n', '        balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) isRunning validAddress public returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '    \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
