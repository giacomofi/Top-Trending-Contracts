['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Basic \n', '{\n', '    uint256 public unitsOneEthCanBuy = 9500;\n', '    address public fundsWallet = msg.sender;\n', '    mapping(address => uint256) public balances;\n', '    uint256 public totalSupply = balances[msg.sender] = 100000000;\n', '    uint256 initialSupply = 100000000;\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function transfer(address  to, uint256 value) public returns (bool);\n', '    function customtransfer(address _to, uint _value) public returns (bool);\n', '    function allowtransferaddress(address _to) public returns (bool);\n', '    event    Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable \n', '{\n', '  address public owner;\n', '  address public customallow;\n', '   \n', '  function Ownable() public \n', '  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '   \n', '  modifier onlyOwner() \n', '  {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '    modifier onlyOwner1() \n', '    {\n', '        require(msg.sender == customallow);\n', '        _;\n', '    }\n', '\n', '  \n', '  function transferOwnership(address newOwner) public onlyOwner \n', '  {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '  \n', '}\n', '\n', 'interface tokenRecipient \n', '{ \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \n', '}\n', '\n', 'contract Pausable is Ownable \n', '{\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() \n', '  {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused \n', '  {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public returns (bool) \n', '  {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', ' \n', '  function unpause() onlyOwner whenPaused public returns (bool) \n', '  {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract ERC20 is ERC20Basic \n', '{\n', '  function allowance(address owner, address spender) constant public returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath \n', '{\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) \n', '  {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) \n', '  {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) \n', '  {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) \n', '  {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic \n', '{\n', '  using SafeMath for uint256;\n', '\n', '     function _transfer(address _from, address _to, uint _value) internal \n', '     {\n', '        require(_to != 0x0);\n', '        \n', '        require(balances[_from] >= _value);\n', '        \n', '        require(balances[_to] + _value > balances[_to]);\n', '        \n', '        uint previousBalances = balances[_from] + balances[_to];\n', '        \n', '        balances[_from] -= _value;\n', '        \n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        \n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) \n', '    {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function customtransfer(address _to, uint256 _value) returns (bool) \n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '  \n', '  function balanceOf(address _owner) constant returns (uint256 balance) \n', '  {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken \n', '{\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '   \n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) \n', '  {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) \n', '  {\n', '\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  \n', '     \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) \n', '    {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) \n', '        {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '        \n', '\n', '\n', '   \n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable \n', '{\n', '\n', '  function transfer(address _to, uint _value) whenNotPaused returns (bool) \n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '  \n', '    function allowtransferaddress(address _to) onlyOwner returns (bool) \n', '    {\n', '        customallow = _to;\n', '    }\n', '    \n', '    function customtransfer(address _to, uint _value) whenPaused onlyOwner1 returns (bool) \n', '    {\n', '        if(msg.sender == customallow)\n', '        { return super.customtransfer(_to, _value); }\n', '        else \n', '        { return false; }\n', '    }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) \n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', 'contract BurnableToken is StandardToken \n', '{\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '\n', '    function burn(uint256 _value) public \n', '    {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '    }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable \n', '{\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() \n', '  {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '   \n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) \n', '  {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  \n', '  function finishMinting() onlyOwner returns (bool) \n', '  {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract NewTokenBitCoinAir is BurnableToken, PausableToken, MintableToken \n', '{\n', '\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '    mapping (address => bool) public frozenAccount;\n', '    string  public constant symbol = "BABT";\n', '    string public constant name = "Bitcoin Air Bounty Token";\n', '    uint8 public constant decimals = 0;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public \n', '    {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public \n', '    {\n', '        frozenAccount[target] = freeze;\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint _value) internal \n', '    {\n', '        require (_to != 0x0);\n', '        require (balances[_from] >= _value);\n', '        require (balances[_to] + _value > balances[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function buy() payable public \n', '    {\n', '        uint amount = msg.value / buyPrice;\n', '        _transfer(this, msg.sender, amount);\n', '    }\n', '    \n', '    function sell(uint256 amount) public \n', '    {\n', '        require(this.balance >= amount * sellPrice);\n', '        _transfer(msg.sender, this, amount);\n', '        msg.sender.transfer(amount * sellPrice);\n', '    }\n', '    \n', '    function burn(uint256 _value) whenNotPaused public \n', '    {\n', '        super.burn(_value);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Basic \n', '{\n', '    uint256 public unitsOneEthCanBuy = 9500;\n', '    address public fundsWallet = msg.sender;\n', '    mapping(address => uint256) public balances;\n', '    uint256 public totalSupply = balances[msg.sender] = 100000000;\n', '    uint256 initialSupply = 100000000;\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function transfer(address  to, uint256 value) public returns (bool);\n', '    function customtransfer(address _to, uint _value) public returns (bool);\n', '    function allowtransferaddress(address _to) public returns (bool);\n', '    event    Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Ownable \n', '{\n', '  address public owner;\n', '  address public customallow;\n', '   \n', '  function Ownable() public \n', '  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '   \n', '  modifier onlyOwner() \n', '  {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '    modifier onlyOwner1() \n', '    {\n', '        require(msg.sender == customallow);\n', '        _;\n', '    }\n', '\n', '  \n', '  function transferOwnership(address newOwner) public onlyOwner \n', '  {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '  \n', '}\n', '\n', 'interface tokenRecipient \n', '{ \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \n', '}\n', '\n', 'contract Pausable is Ownable \n', '{\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() \n', '  {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused \n', '  {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public returns (bool) \n', '  {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', ' \n', '  function unpause() onlyOwner whenPaused public returns (bool) \n', '  {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract ERC20 is ERC20Basic \n', '{\n', '  function allowance(address owner, address spender) constant public returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath \n', '{\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) \n', '  {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) \n', '  {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) \n', '  {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) \n', '  {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic \n', '{\n', '  using SafeMath for uint256;\n', '\n', '     function _transfer(address _from, address _to, uint _value) internal \n', '     {\n', '        require(_to != 0x0);\n', '        \n', '        require(balances[_from] >= _value);\n', '        \n', '        require(balances[_to] + _value > balances[_to]);\n', '        \n', '        uint previousBalances = balances[_from] + balances[_to];\n', '        \n', '        balances[_from] -= _value;\n', '        \n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        \n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) \n', '    {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function customtransfer(address _to, uint256 _value) returns (bool) \n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '  \n', '  function balanceOf(address _owner) constant returns (uint256 balance) \n', '  {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken \n', '{\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '   \n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) \n', '  {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) \n', '  {\n', '\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  \n', '     \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) \n', '    {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) \n', '        {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '        \n', '\n', '\n', '   \n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable \n', '{\n', '\n', '  function transfer(address _to, uint _value) whenNotPaused returns (bool) \n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '  \n', '    function allowtransferaddress(address _to) onlyOwner returns (bool) \n', '    {\n', '        customallow = _to;\n', '    }\n', '    \n', '    function customtransfer(address _to, uint _value) whenPaused onlyOwner1 returns (bool) \n', '    {\n', '        if(msg.sender == customallow)\n', '        { return super.customtransfer(_to, _value); }\n', '        else \n', '        { return false; }\n', '    }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) \n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', 'contract BurnableToken is StandardToken \n', '{\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '\n', '    function burn(uint256 _value) public \n', '    {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '    }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable \n', '{\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() \n', '  {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '   \n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) \n', '  {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  \n', '  function finishMinting() onlyOwner returns (bool) \n', '  {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract NewTokenBitCoinAir is BurnableToken, PausableToken, MintableToken \n', '{\n', '\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '    mapping (address => bool) public frozenAccount;\n', '    string  public constant symbol = "BABT";\n', '    string public constant name = "Bitcoin Air Bounty Token";\n', '    uint8 public constant decimals = 0;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public \n', '    {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public \n', '    {\n', '        frozenAccount[target] = freeze;\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint _value) internal \n', '    {\n', '        require (_to != 0x0);\n', '        require (balances[_from] >= _value);\n', '        require (balances[_to] + _value > balances[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '    }\n', '    \n', '    function buy() payable public \n', '    {\n', '        uint amount = msg.value / buyPrice;\n', '        _transfer(this, msg.sender, amount);\n', '    }\n', '    \n', '    function sell(uint256 amount) public \n', '    {\n', '        require(this.balance >= amount * sellPrice);\n', '        _transfer(msg.sender, this, amount);\n', '        msg.sender.transfer(amount * sellPrice);\n', '    }\n', '    \n', '    function burn(uint256 _value) whenNotPaused public \n', '    {\n', '        super.burn(_value);\n', '    }\n', '}']
