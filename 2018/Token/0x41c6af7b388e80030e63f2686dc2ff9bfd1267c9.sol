['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '  function kill() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '}/*\n', ' * Name: Full Fill TV - XTV Network Utils Contract\n', ' * Author: Allen Sarkisyan\n', ' * Copyright: 2017 Full Fill TV, Inc.\n', ' * Version: 1.0.0\n', '*/\n', '\n', '\n', 'library XTVNetworkUtils {\n', '  function verifyXTVSignatureAddress(bytes32 hash, bytes memory sig) internal pure returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    }\n', '\n', '    bytes32 prefixedHash = keccak256(\n', '      abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)\n', '    );\n', '\n', '    // solium-disable-next-line arg-overflow\n', '    return ecrecover(prefixedHash, v, r, s);\n', '  }\n', '}/*\n', ' * Name: Full Fill TV Contract\n', ' * Author: Allen Sarkisyan\n', ' * Copyright: 2017 Full Fill TV, Inc.\n', ' * Version: 1.0.0\n', '*/\n', '\n', '\n', '\n', '\n', 'contract XTVNetworkGuard {\n', '  mapping(address => bool) xtvNetworkEndorser;\n', '\n', '  modifier validateSignature(\n', '    string memory message,\n', '    bytes32 verificationHash,\n', '    bytes memory xtvSignature\n', '  ) {\n', '    bytes32 xtvVerificationHash = keccak256(abi.encodePacked(verificationHash, message));\n', '\n', '    require(verifyXTVSignature(xtvVerificationHash, xtvSignature));\n', '    _;\n', '  }\n', '\n', '  function setXTVNetworkEndorser(address _addr, bool isEndorser) public;\n', '\n', '  function verifyXTVSignature(bytes32 hash, bytes memory sig) public view returns (bool) {\n', '    address signerAddress = XTVNetworkUtils.verifyXTVSignatureAddress(hash, sig);\n', '\n', '    return xtvNetworkEndorser[signerAddress];\n', '  }\n', '}\n', '/*\n', ' * Name: Full Fill TV - XTV Token Contract\n', ' * Author: Allen Sarkisyan\n', ' * Copyright: 2017 Full Fill TV, Inc.\n', ' * Version: 1.0.0\n', '*/\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*\n', ' * Name: Full Fill TV Contract\n', ' * Author: Allen Sarkisyan\n', ' * Copyright: 2017 Full Fill TV, Inc.\n', ' * Version: 1.0.0\n', '*/\n', '\n', '\n', '\n', '\n', '/*\n', ' * Name: Full Fill TV Contract\n', ' * Author: Allen Sarkisyan\n', ' * Copyright: 2017 Full Fill TV, Inc.\n', ' * Version: 1.0.0\n', '*/\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  bool public paused = false;\n', '  bool public mintingFinished = false;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  function allowance(address _owner, address spender) public view returns (uint256);\n', '  function increaseApproval(address spender, uint addedValue) public returns (bool);\n', '  function decreaseApproval(address spender, uint subtractedValue) public returns (bool);\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Buy(address indexed _recipient, uint _amount);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  event Pause();\n', '  event Unpause();\n', '}\n', '\n', 'contract ERC20Token is ERC20, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  /** ERC20 Interface Methods */\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) { return totalSupply_; }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) { return balances[_owner]; }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', ' \n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '    /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract XTVToken is XTVNetworkGuard, ERC20Token {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "XTV";\n', '  string public constant symbol = "XTV";\n', '  uint public constant decimals = 18;\n', '\n', '  address public fullfillTeamAddress;\n', '  address public fullfillFounder;\n', '  address public fullfillAdvisors;\n', '  address public XTVNetworkContractAddress;\n', '\n', '  bool public airdropActive;\n', '  uint public startTime;\n', '  uint public endTime;\n', '  uint public XTVAirDropped;\n', '  uint public XTVBurned;\n', '  mapping(address => bool) public claimed;\n', '  \n', '  uint256 private constant TOKEN_MULTIPLIER = 1000000;\n', '  uint256 private constant DECIMALS = 10 ** decimals;\n', '  uint256 public constant INITIAL_SUPPLY = 500 * TOKEN_MULTIPLIER * DECIMALS;\n', '  uint256 public constant EXPECTED_TOTAL_SUPPLY = 1000 * TOKEN_MULTIPLIER * DECIMALS;\n', '\n', '  // 33%\n', '  uint256 public constant ALLOC_TEAM = 330 * TOKEN_MULTIPLIER * DECIMALS;\n', '  // 7%\n', '  uint256 public constant ALLOC_ADVISORS = 70 * TOKEN_MULTIPLIER * DECIMALS;\n', '  // 10%\n', '  uint256 public constant ALLOC_FOUNDER = 100 * TOKEN_MULTIPLIER * DECIMALS;\n', '  // 50%\n', '  uint256 public constant ALLOC_AIRDROP = 500 * TOKEN_MULTIPLIER * DECIMALS;\n', '\n', '  uint256 public constant AIRDROP_CLAIM_AMMOUNT = 500 * DECIMALS;\n', '\n', '  modifier isAirdropActive() {\n', '    require(airdropActive);\n', '    _;\n', '  }\n', '\n', '  modifier canClaimTokens() {\n', '    uint256 remainingSupply = balances[address(0)];\n', '\n', '    require(!claimed[msg.sender] && remainingSupply > AIRDROP_CLAIM_AMMOUNT);\n', '    _;\n', '  }\n', '\n', '  constructor(\n', '    address _fullfillTeam,\n', '    address _fullfillFounder,\n', '    address _fullfillAdvisors\n', '  ) public {\n', '    owner = msg.sender;\n', '    fullfillTeamAddress = _fullfillTeam;\n', '    fullfillFounder = _fullfillFounder;\n', '    fullfillAdvisors = _fullfillAdvisors;\n', '\n', '    airdropActive = true;\n', '    startTime = block.timestamp;\n', '    endTime = startTime + 365 days;\n', '\n', '    balances[_fullfillTeam] = ALLOC_TEAM;\n', '    balances[_fullfillFounder] = ALLOC_FOUNDER;\n', '    balances[_fullfillAdvisors] = ALLOC_ADVISORS;\n', '\n', '    balances[address(0)] = ALLOC_AIRDROP;\n', '\n', '    totalSupply_ = EXPECTED_TOTAL_SUPPLY;\n', '\n', '    emit Transfer(address(this), address(0), ALLOC_AIRDROP);\n', '  }\n', '\n', '  function setXTVNetworkEndorser(address _addr, bool isEndorser) public onlyOwner {\n', '    xtvNetworkEndorser[_addr] = isEndorser;\n', '  }\n', '\n', '  // @dev 500 XTV Tokens per claimant\n', '  function claim(\n', '    string memory token,\n', '    bytes32 verificationHash,\n', '    bytes memory xtvSignature\n', '  ) \n', '    public\n', '    isAirdropActive\n', '    canClaimTokens\n', '    validateSignature(token, verificationHash, xtvSignature)\n', '    returns (uint256)\n', '  {\n', '    claimed[msg.sender] = true;\n', '\n', '    balances[address(0)] = balances[address(0)].sub(AIRDROP_CLAIM_AMMOUNT);\n', '    balances[msg.sender] = balances[msg.sender].add(AIRDROP_CLAIM_AMMOUNT);\n', '\n', '    XTVAirDropped = XTVAirDropped.add(AIRDROP_CLAIM_AMMOUNT);\n', '\n', '    emit Transfer(address(0), msg.sender, AIRDROP_CLAIM_AMMOUNT);\n', '\n', '    return balances[msg.sender];\n', '  }\n', '\n', '  // @dev Burns tokens at address 0x00\n', '  function burnTokens() public onlyOwner {\n', '    require(block.timestamp > endTime);\n', '\n', '    uint256 remaining = balances[address(0)];\n', '\n', '    airdropActive = false;\n', '\n', '    XTVBurned = remaining;\n', '  }\n', '\n', '  function setXTVNetworkContractAddress(address addr) public onlyOwner {\n', '    XTVNetworkContractAddress = addr;\n', '  }\n', '\n', '  function setXTVTokenAirdropStatus(bool _status) public onlyOwner {\n', '    airdropActive = _status;\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '  function kill() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '}/*\n', ' * Name: Full Fill TV - XTV Network Utils Contract\n', ' * Author: Allen Sarkisyan\n', ' * Copyright: 2017 Full Fill TV, Inc.\n', ' * Version: 1.0.0\n', '*/\n', '\n', '\n', 'library XTVNetworkUtils {\n', '  function verifyXTVSignatureAddress(bytes32 hash, bytes memory sig) internal pure returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    }\n', '\n', '    bytes32 prefixedHash = keccak256(\n', '      abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)\n', '    );\n', '\n', '    // solium-disable-next-line arg-overflow\n', '    return ecrecover(prefixedHash, v, r, s);\n', '  }\n', '}/*\n', ' * Name: Full Fill TV Contract\n', ' * Author: Allen Sarkisyan\n', ' * Copyright: 2017 Full Fill TV, Inc.\n', ' * Version: 1.0.0\n', '*/\n', '\n', '\n', '\n', '\n', 'contract XTVNetworkGuard {\n', '  mapping(address => bool) xtvNetworkEndorser;\n', '\n', '  modifier validateSignature(\n', '    string memory message,\n', '    bytes32 verificationHash,\n', '    bytes memory xtvSignature\n', '  ) {\n', '    bytes32 xtvVerificationHash = keccak256(abi.encodePacked(verificationHash, message));\n', '\n', '    require(verifyXTVSignature(xtvVerificationHash, xtvSignature));\n', '    _;\n', '  }\n', '\n', '  function setXTVNetworkEndorser(address _addr, bool isEndorser) public;\n', '\n', '  function verifyXTVSignature(bytes32 hash, bytes memory sig) public view returns (bool) {\n', '    address signerAddress = XTVNetworkUtils.verifyXTVSignatureAddress(hash, sig);\n', '\n', '    return xtvNetworkEndorser[signerAddress];\n', '  }\n', '}\n', '/*\n', ' * Name: Full Fill TV - XTV Token Contract\n', ' * Author: Allen Sarkisyan\n', ' * Copyright: 2017 Full Fill TV, Inc.\n', ' * Version: 1.0.0\n', '*/\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*\n', ' * Name: Full Fill TV Contract\n', ' * Author: Allen Sarkisyan\n', ' * Copyright: 2017 Full Fill TV, Inc.\n', ' * Version: 1.0.0\n', '*/\n', '\n', '\n', '\n', '\n', '/*\n', ' * Name: Full Fill TV Contract\n', ' * Author: Allen Sarkisyan\n', ' * Copyright: 2017 Full Fill TV, Inc.\n', ' * Version: 1.0.0\n', '*/\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  bool public paused = false;\n', '  bool public mintingFinished = false;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  function allowance(address _owner, address spender) public view returns (uint256);\n', '  function increaseApproval(address spender, uint addedValue) public returns (bool);\n', '  function decreaseApproval(address spender, uint subtractedValue) public returns (bool);\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Buy(address indexed _recipient, uint _amount);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  event Pause();\n', '  event Unpause();\n', '}\n', '\n', 'contract ERC20Token is ERC20, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  /** ERC20 Interface Methods */\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) { return totalSupply_; }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) { return balances[_owner]; }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', ' \n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '    /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract XTVToken is XTVNetworkGuard, ERC20Token {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "XTV";\n', '  string public constant symbol = "XTV";\n', '  uint public constant decimals = 18;\n', '\n', '  address public fullfillTeamAddress;\n', '  address public fullfillFounder;\n', '  address public fullfillAdvisors;\n', '  address public XTVNetworkContractAddress;\n', '\n', '  bool public airdropActive;\n', '  uint public startTime;\n', '  uint public endTime;\n', '  uint public XTVAirDropped;\n', '  uint public XTVBurned;\n', '  mapping(address => bool) public claimed;\n', '  \n', '  uint256 private constant TOKEN_MULTIPLIER = 1000000;\n', '  uint256 private constant DECIMALS = 10 ** decimals;\n', '  uint256 public constant INITIAL_SUPPLY = 500 * TOKEN_MULTIPLIER * DECIMALS;\n', '  uint256 public constant EXPECTED_TOTAL_SUPPLY = 1000 * TOKEN_MULTIPLIER * DECIMALS;\n', '\n', '  // 33%\n', '  uint256 public constant ALLOC_TEAM = 330 * TOKEN_MULTIPLIER * DECIMALS;\n', '  // 7%\n', '  uint256 public constant ALLOC_ADVISORS = 70 * TOKEN_MULTIPLIER * DECIMALS;\n', '  // 10%\n', '  uint256 public constant ALLOC_FOUNDER = 100 * TOKEN_MULTIPLIER * DECIMALS;\n', '  // 50%\n', '  uint256 public constant ALLOC_AIRDROP = 500 * TOKEN_MULTIPLIER * DECIMALS;\n', '\n', '  uint256 public constant AIRDROP_CLAIM_AMMOUNT = 500 * DECIMALS;\n', '\n', '  modifier isAirdropActive() {\n', '    require(airdropActive);\n', '    _;\n', '  }\n', '\n', '  modifier canClaimTokens() {\n', '    uint256 remainingSupply = balances[address(0)];\n', '\n', '    require(!claimed[msg.sender] && remainingSupply > AIRDROP_CLAIM_AMMOUNT);\n', '    _;\n', '  }\n', '\n', '  constructor(\n', '    address _fullfillTeam,\n', '    address _fullfillFounder,\n', '    address _fullfillAdvisors\n', '  ) public {\n', '    owner = msg.sender;\n', '    fullfillTeamAddress = _fullfillTeam;\n', '    fullfillFounder = _fullfillFounder;\n', '    fullfillAdvisors = _fullfillAdvisors;\n', '\n', '    airdropActive = true;\n', '    startTime = block.timestamp;\n', '    endTime = startTime + 365 days;\n', '\n', '    balances[_fullfillTeam] = ALLOC_TEAM;\n', '    balances[_fullfillFounder] = ALLOC_FOUNDER;\n', '    balances[_fullfillAdvisors] = ALLOC_ADVISORS;\n', '\n', '    balances[address(0)] = ALLOC_AIRDROP;\n', '\n', '    totalSupply_ = EXPECTED_TOTAL_SUPPLY;\n', '\n', '    emit Transfer(address(this), address(0), ALLOC_AIRDROP);\n', '  }\n', '\n', '  function setXTVNetworkEndorser(address _addr, bool isEndorser) public onlyOwner {\n', '    xtvNetworkEndorser[_addr] = isEndorser;\n', '  }\n', '\n', '  // @dev 500 XTV Tokens per claimant\n', '  function claim(\n', '    string memory token,\n', '    bytes32 verificationHash,\n', '    bytes memory xtvSignature\n', '  ) \n', '    public\n', '    isAirdropActive\n', '    canClaimTokens\n', '    validateSignature(token, verificationHash, xtvSignature)\n', '    returns (uint256)\n', '  {\n', '    claimed[msg.sender] = true;\n', '\n', '    balances[address(0)] = balances[address(0)].sub(AIRDROP_CLAIM_AMMOUNT);\n', '    balances[msg.sender] = balances[msg.sender].add(AIRDROP_CLAIM_AMMOUNT);\n', '\n', '    XTVAirDropped = XTVAirDropped.add(AIRDROP_CLAIM_AMMOUNT);\n', '\n', '    emit Transfer(address(0), msg.sender, AIRDROP_CLAIM_AMMOUNT);\n', '\n', '    return balances[msg.sender];\n', '  }\n', '\n', '  // @dev Burns tokens at address 0x00\n', '  function burnTokens() public onlyOwner {\n', '    require(block.timestamp > endTime);\n', '\n', '    uint256 remaining = balances[address(0)];\n', '\n', '    airdropActive = false;\n', '\n', '    XTVBurned = remaining;\n', '  }\n', '\n', '  function setXTVNetworkContractAddress(address addr) public onlyOwner {\n', '    XTVNetworkContractAddress = addr;\n', '  }\n', '\n', '  function setXTVTokenAirdropStatus(bool _status) public onlyOwner {\n', '    airdropActive = _status;\n', '  }\n', '}']
