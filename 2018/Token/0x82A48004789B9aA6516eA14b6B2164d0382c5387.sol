['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '// This is an ERC-20 token contract based on Open Zepplin&#39;s StandardToken\n', '// and MintableToken plus the ability to burn tokens.\n', '//\n', '// We had to copy over the code instead of inheriting because of changes\n', '// to the modifier lists of some functions:\n', '//   * transfer(), transferFrom() and approve() are not callable during\n', '//     the minting period, only after MintingFinished()\n', '//   * mint() can only be called by the minter who is not the owner\n', '//     but the HoloTokenSale contract.\n', '//\n', '// Token can be burned by a special &#39;destroyer&#39; role that can only\n', '// burn its tokens.\n', 'contract HoloToken is Ownable {\n', '  string public constant name = "HoloToken";\n', '  string public constant symbol = "HOT";\n', '  uint8 public constant decimals = 18;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintingFinished();\n', '  event Burn(uint256 amount);\n', '\n', '  uint256 public totalSupply;\n', '\n', '\n', '  //==================================================================================\n', '  // Zeppelin BasicToken (plus modifier to not allow transfers during minting period):\n', '  //==================================================================================\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenMintingFinished returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  //=====================================================================================\n', '  // Zeppelin StandardToken (plus modifier to not allow transfers during minting period):\n', '  //=====================================================================================\n', '  mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenMintingFinished returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public whenMintingFinished returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '\n', '  //=====================================================================================\n', '  // Minting:\n', '  //=====================================================================================\n', '\n', '  bool public mintingFinished = false;\n', '  address public destroyer;\n', '  address public minter;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier whenMintingFinished() {\n', '    require(mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(msg.sender == minter);\n', '    _;\n', '  }\n', '\n', '  function setMinter(address _minter) external onlyOwner {\n', '    minter = _minter;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) external onlyMinter canMint  returns (bool) {\n', '    require(balances[_to] + _amount > balances[_to]); // Guard against overflow\n', '    require(totalSupply + _amount > totalSupply);     // Guard against overflow  (this should never happen)\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() external onlyMinter returns (bool) {\n', '    mintingFinished = true;\n', '    MintingFinished();\n', '    return true;\n', '  }\n', '\n', '\n', '  //=====================================================================================\n', '  // Burning:\n', '  //=====================================================================================\n', '\n', '\n', '  modifier onlyDestroyer() {\n', '     require(msg.sender == destroyer);\n', '     _;\n', '  }\n', '\n', '  function setDestroyer(address _destroyer) external onlyOwner {\n', '    destroyer = _destroyer;\n', '  }\n', '\n', '  function burn(uint256 _amount) external onlyDestroyer {\n', '    require(balances[destroyer] >= _amount && _amount > 0);\n', '    balances[destroyer] = balances[destroyer].sub(_amount);\n', '    totalSupply = totalSupply.sub(_amount);\n', '    Burn(_amount);\n', '  }\n', '}\n', '\n', '\n', '// This contract holds a mapping of known funders with:\n', '// * a boolean flag for whitelist status\n', '// * number of reserved tokens for each day\n', 'contract HoloWhitelist is Ownable {\n', '  address public updater;\n', '\n', '  struct KnownFunder {\n', '    bool whitelisted;\n', '    mapping(uint => uint256) reservedTokensPerDay;\n', '  }\n', '\n', '  mapping(address => KnownFunder) public knownFunders;\n', '\n', '  event Whitelisted(address[] funders);\n', '  event ReservedTokensSet(uint day, address[] funders, uint256[] reservedTokens);\n', '\n', '  modifier onlyUpdater {\n', '    require(msg.sender == updater);\n', '    _;\n', '  }\n', '\n', '  function HoloWhitelist() public {\n', '    updater = msg.sender;\n', '  }\n', '\n', '  function setUpdater(address new_updater) external onlyOwner {\n', '    updater = new_updater;\n', '  }\n', '\n', '  // Adds funders to the whitelist in batches.\n', '  function whitelist(address[] funders) external onlyUpdater {\n', '    for (uint i = 0; i < funders.length; i++) {\n', '        knownFunders[funders[i]].whitelisted = true;\n', '    }\n', '    Whitelisted(funders);\n', '  }\n', '\n', '  // Removes funders from the whitelist in batches.\n', '  function unwhitelist(address[] funders) external onlyUpdater {\n', '    for (uint i = 0; i < funders.length; i++) {\n', '        knownFunders[funders[i]].whitelisted = false;\n', '    }\n', '  }\n', '\n', '  // Stores reserved tokens for several funders in a batch\n', '  // but all for the same day.\n', '  // * day is 0-based\n', '  function setReservedTokens(uint day, address[] funders, uint256[] reservedTokens) external onlyUpdater {\n', '    for (uint i = 0; i < funders.length; i++) {\n', '        knownFunders[funders[i]].reservedTokensPerDay[day] = reservedTokens[i];\n', '    }\n', '    ReservedTokensSet(day, funders, reservedTokens);\n', '  }\n', '\n', '  // Used in HoloSale to check if funder is allowed\n', '  function isWhitelisted(address funder) external view returns (bool) {\n', '    return knownFunders[funder].whitelisted;\n', '  }\n', '\n', '  // Used in HoloSale to get reserved tokens per funder\n', '  // and per day.\n', '  // * day is 0-based\n', '  function reservedTokens(address funder, uint day) external view returns (uint256) {\n', '    return knownFunders[funder].reservedTokensPerDay[day];\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', '// This contract is a crowdsale based on Zeppelin&#39;s Crowdsale.sol but with\n', '// several changes:\n', '//   * the token contract as well as the supply contract get injected\n', '//     with setTokenContract() and setSupplyContract()\n', '//   * we have a dynamic token supply per day which we hold in the statsByDay\n', '//   * once per day, the *updater* role runs the update function to make the\n', '//     contract read the new supply and switch to the next day\n', '//   * we have a minimum amount in ETH per transaction\n', '//   * we have a maximum amount per transaction relative to the daily supply\n', '//\n', '//\n', 'contract HoloSale is Ownable, Pausable{\n', '  using SafeMath for uint256;\n', '\n', '  // Start and end block where purchases are allowed (both inclusive)\n', '  uint256 public startBlock;\n', '  uint256 public endBlock;\n', '  // Factor between wei and full Holo tokens.\n', '  // (i.e. a rate of 10^18 means one Holo per Ether)\n', '  uint256 public rate;\n', '  // Ratio of the current supply a transaction is allowed to by\n', '  uint256 public maximumPercentageOfDaysSupply;\n', '  // Minimum amount of wei a transaction has to send\n', '  uint256 public minimumAmountWei;\n', '  // address where funds are being send to on successful buy\n', '  address public wallet;\n', '\n', '  // The token being minted on sale\n', '  HoloToken private tokenContract;\n', '  // The contract to check beneficiaries&#39; address against\n', '  // and to hold number of reserved tokens per day\n', '  HoloWhitelist private whitelistContract;\n', '\n', '  // The account that is allowed to call update()\n', '  // which will happen once per day during the sale period\n', '  address private updater;\n', '\n', '  // Will be set to true by finalize()\n', '  bool private finalized = false;\n', '\n', '  uint256 public totalSupply;\n', '\n', '  // For every day of the sale we store one instance of this struct\n', '  struct Day {\n', '    // The supply available to sell on this day\n', '    uint256 supply;\n', '    // The number of unreserved tokens sold on this day\n', '    uint256 soldFromUnreserved;\n', '    // Number of tokens reserved today\n', '    uint256 reserved;\n', '    // Number of reserved tokens sold today\n', '    uint256 soldFromReserved;\n', '    // We are storing how much fuel each user has bought per day\n', '    // to be able to apply our relative cap per user per day\n', '    // (i.e. nobody is allowed to buy more than 10% of each day&#39;s supply)\n', '    mapping(address => uint256) fuelBoughtByAddress;\n', '  }\n', '\n', '  // Growing list of days\n', '  Day[] public statsByDay;\n', '\n', '  event CreditsCreated(address beneficiary, uint256 amountWei, uint256 amountHolos);\n', '  event Update(uint256 newTotalSupply, uint256 reservedTokensNextDay);\n', '\n', '  modifier onlyUpdater {\n', '    require(msg.sender == updater);\n', '    _;\n', '  }\n', '\n', '  // Converts wei to smallest fraction of Holo tokens.\n', '  // &#39;rate&#39; is meant to give the factor between weis and full Holo tokens,\n', '  // hence the division by 10^18.\n', '  function holosForWei(uint256 amountWei) internal view returns (uint256) {\n', '    return amountWei * rate / 1000000000000000000;\n', '  }\n', '\n', '  // Contstructor takes start and end block of the sale period,\n', '  // the rate that defines how many full Holo token are being minted per wei\n', '  // (since the Holo token has 18 decimals, 1000000000000000000 would mean that\n', '  // one full Holo is minted per Ether),\n', '  // minimum and maximum limits for incoming ETH transfers\n', '  // and the wallet to which the Ethers are being transfered on updated()\n', '  function HoloSale(\n', '    uint256 _startBlock, uint256 _endBlock,\n', '    uint256 _rate,\n', '    uint256 _minimumAmountWei, uint256 _maximumPercentageOfDaysSupply,\n', '    address _wallet) public\n', '  {\n', '    require(_startBlock >= block.number);\n', '    require(_endBlock >= _startBlock);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    updater = msg.sender;\n', '    startBlock = _startBlock;\n', '    endBlock = _endBlock;\n', '    rate = _rate;\n', '    maximumPercentageOfDaysSupply = _maximumPercentageOfDaysSupply;\n', '    minimumAmountWei = _minimumAmountWei;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  //---------------------------------------------------------------------------\n', '  // Setters and Getters:\n', '  //---------------------------------------------------------------------------\n', '\n', '  function setUpdater(address _updater) external onlyOwner {\n', '    updater = _updater;\n', '  }\n', '\n', '  function setTokenContract(HoloToken _tokenContract) external onlyOwner {\n', '    tokenContract = _tokenContract;\n', '  }\n', '\n', '  function setWhitelistContract(HoloWhitelist _whitelistContract) external onlyOwner {\n', '    whitelistContract = _whitelistContract;\n', '  }\n', '\n', '  function currentDay() public view returns (uint) {\n', '    return statsByDay.length;\n', '  }\n', '\n', '  function todaysSupply() external view returns (uint) {\n', '    return statsByDay[currentDay()-1].supply;\n', '  }\n', '\n', '  function todaySold() external view returns (uint) {\n', '    return statsByDay[currentDay()-1].soldFromUnreserved + statsByDay[currentDay()-1].soldFromReserved;\n', '  }\n', '\n', '  function todayReserved() external view returns (uint) {\n', '    return statsByDay[currentDay()-1].reserved;\n', '  }\n', '\n', '  function boughtToday(address beneficiary) external view returns (uint) {\n', '    return statsByDay[currentDay()-1].fuelBoughtByAddress[beneficiary];\n', '  }\n', '\n', '  //---------------------------------------------------------------------------\n', '  // Sending money / adding asks\n', '  //---------------------------------------------------------------------------\n', '\n', '  // Fallback function can be used to buy fuel\n', '  function () public payable {\n', '    buyFuel(msg.sender);\n', '  }\n', '\n', '  // Main function that checks all conditions and then mints fuel tokens\n', '  // and transfers the ETH to our wallet\n', '  function buyFuel(address beneficiary) public payable whenNotPaused{\n', '    require(currentDay() > 0);\n', '    require(whitelistContract.isWhitelisted(beneficiary));\n', '    require(beneficiary != 0x0);\n', '    require(withinPeriod());\n', '\n', '    // Calculate how many Holos this transaction would buy\n', '    uint256 amountOfHolosAsked = holosForWei(msg.value);\n', '\n', '    // Get current day\n', '    uint dayIndex = statsByDay.length-1;\n', '    Day storage today = statsByDay[dayIndex];\n', '\n', '    // Funders who took part in the crowdfund could have reserved tokens\n', '    uint256 reservedHolos = whitelistContract.reservedTokens(beneficiary, dayIndex);\n', '    // If they do, make sure to subtract what they bought already today\n', '    uint256 alreadyBought = today.fuelBoughtByAddress[beneficiary];\n', '    if(alreadyBought >= reservedHolos) {\n', '      reservedHolos = 0;\n', '    } else {\n', '      reservedHolos = reservedHolos.sub(alreadyBought);\n', '    }\n', '\n', '    // Calculate if they asked more than they have reserved\n', '    uint256 askedMoreThanReserved;\n', '    uint256 useFromReserved;\n', '    if(amountOfHolosAsked > reservedHolos) {\n', '      askedMoreThanReserved = amountOfHolosAsked.sub(reservedHolos);\n', '      useFromReserved = reservedHolos;\n', '    } else {\n', '      askedMoreThanReserved = 0;\n', '      useFromReserved = amountOfHolosAsked;\n', '    }\n', '\n', '    if(reservedHolos == 0) {\n', '      // If this transaction is not claiming reserved tokens\n', '      // it has to be over the minimum.\n', '      // (Reserved tokens must be claimable even if it would be just few)\n', '      require(msg.value >= minimumAmountWei);\n', '    }\n', '\n', '    // The non-reserved tokens asked must not exceed the max-ratio\n', '    // nor the available supply.\n', '    require(lessThanMaxRatio(beneficiary, askedMoreThanReserved, today));\n', '    require(lessThanSupply(askedMoreThanReserved, today));\n', '\n', '    // Everything fine if we&#39;re here\n', '    // Send ETH to our wallet\n', '    wallet.transfer(msg.value);\n', '    // Mint receipts\n', '    tokenContract.mint(beneficiary, amountOfHolosAsked);\n', '    // Log this sale\n', '    today.soldFromUnreserved = today.soldFromUnreserved.add(askedMoreThanReserved);\n', '    today.soldFromReserved = today.soldFromReserved.add(useFromReserved);\n', '    today.fuelBoughtByAddress[beneficiary] = today.fuelBoughtByAddress[beneficiary].add(amountOfHolosAsked);\n', '    CreditsCreated(beneficiary, msg.value, amountOfHolosAsked);\n', '  }\n', '\n', '  // Returns true if we are in the live period of the sale\n', '  function withinPeriod() internal constant returns (bool) {\n', '    uint256 current = block.number;\n', '    return current >= startBlock && current <= endBlock;\n', '  }\n', '\n', '  // Returns true if amount + plus fuel bought today already is not above\n', '  // the maximum share one could buy today\n', '  function lessThanMaxRatio(address beneficiary, uint256 amount, Day storage today) internal view returns (bool) {\n', '    uint256 boughtTodayBefore = today.fuelBoughtByAddress[beneficiary];\n', '    return boughtTodayBefore.add(amount).mul(100).div(maximumPercentageOfDaysSupply) <= today.supply;\n', '  }\n', '\n', '  // Returns false if amount would buy more fuel than we can sell today\n', '  function lessThanSupply(uint256 amount, Day today) internal pure returns (bool) {\n', '    return today.soldFromUnreserved.add(amount) <= today.supply.sub(today.reserved);\n', '  }\n', '\n', '  //---------------------------------------------------------------------------\n', '  // Update\n', '  //---------------------------------------------------------------------------\n', '\n', '\n', '  function update(uint256 newTotalSupply, uint256 reservedTokensNextDay) external onlyUpdater {\n', '    totalSupply = newTotalSupply;\n', '    // daysSupply is the amount of tokens (*10^18) that we can sell today\n', '    uint256 daysSupply = newTotalSupply.sub(tokenContract.totalSupply());\n', '    statsByDay.push(Day(daysSupply, 0, reservedTokensNextDay, 0));\n', '    Update(newTotalSupply, reservedTokensNextDay);\n', '  }\n', '\n', '  //---------------------------------------------------------------------------\n', '  // Finalize\n', '  //---------------------------------------------------------------------------\n', '\n', '  // Returns true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return block.number > endBlock;\n', '  }\n', '\n', '  // Mints a third of all tokens minted so far for the team.\n', '  // => Team ends up with 25% of all tokens.\n', '  // Also calls finishMinting() on the token contract which makes it\n', '  // impossible to mint more.\n', '  function finalize() external onlyOwner {\n', '    require(!finalized);\n', '    require(hasEnded());\n', '    uint256 receiptsMinted = tokenContract.totalSupply();\n', '    uint256 shareForTheTeam = receiptsMinted.div(3);\n', '    tokenContract.mint(wallet, shareForTheTeam);\n', '    tokenContract.finishMinting();\n', '    finalized = true;\n', '  }\n', '}']