['pragma solidity ^0.4.18;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public returns (bool){\n', '        require(newOwner != 0x0);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(a >= b);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', '\n', 'contract ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function ERC20(\n', '        uint256 initialSupply\n', '    ) public {\n', '        totalSupply = initialSupply;\n', '        balanceOf[msg.sender] = totalSupply;\n', '        Transfer(0x0, msg.sender, totalSupply);\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal returns (bool){\n', '        require(_to != 0x0);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool){\n', '        _transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool){\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool){\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '\t        return true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract EPVToken is Owned, ERC20 {\n', '\n', '    string public name = "EPVToken";\n', '    string public symbol = "EPV";\n', '    uint8 public decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = 100000000000 * (10 ** uint256(decimals));\n', '\n', '    function EPVToken() ERC20(INITIAL_SUPPLY) public {}\n', '\n', '    function () payable public {\n', '\n', '    }\n', '\n', '    function backToken(address _to, uint256 _value) onlyOwner public returns (bool){\n', '        _transfer(this, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '    function backTransfer(address _to, uint256 _value) onlyOwner public returns (bool){\n', '        require(_to != 0x0);\n', '        require(address(this).balance >= _value);\n', '        _to.transfer(_value);\n', '\t    return true;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public returns (bool){\n', '        require(newOwner != 0x0);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(a >= b);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', '\n', 'contract ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function ERC20(\n', '        uint256 initialSupply\n', '    ) public {\n', '        totalSupply = initialSupply;\n', '        balanceOf[msg.sender] = totalSupply;\n', '        Transfer(0x0, msg.sender, totalSupply);\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal returns (bool){\n', '        require(_to != 0x0);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool){\n', '        _transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool){\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool){\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '\t        return true;\n', '        }\n', '    }\n', '}\n', '\n', 'contract EPVToken is Owned, ERC20 {\n', '\n', '    string public name = "EPVToken";\n', '    string public symbol = "EPV";\n', '    uint8 public decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = 100000000000 * (10 ** uint256(decimals));\n', '\n', '    function EPVToken() ERC20(INITIAL_SUPPLY) public {}\n', '\n', '    function () payable public {\n', '\n', '    }\n', '\n', '    function backToken(address _to, uint256 _value) onlyOwner public returns (bool){\n', '        _transfer(this, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '    function backTransfer(address _to, uint256 _value) onlyOwner public returns (bool){\n', '        require(_to != 0x0);\n', '        require(address(this).balance >= _value);\n', '        _to.transfer(_value);\n', '\t    return true;\n', '    }\n', '}']
