['// CryptoIndex token smart contract.\n', '// Developed by Phenom.Team <info@phenom.team>\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(_owner);\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' *   @title ERC20\n', ' *   @dev Standart ERC20 token interface\n', ' */\n', '\n', 'contract ERC20 {\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping (address => uint)) allowed;\n', '\n', '    function balanceOf(address _owner) public view returns (uint);\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '} \n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' *   @title CryptoIndexToken\n', ' *   @dev Ð¡ryptoIndexToken smart-contract\n', ' */\n', 'contract CryptoIndexToken is ERC20, Ownable() {\n', '    using SafeMath for uint;\n', '\n', '    string public name = "Cryptoindex 100";\n', '    string public symbol = "CIX100";\n', '    uint public decimals = 18;\n', '\n', '    uint public totalSupply = 300000000*1e18;\n', '    uint public mintedAmount;\n', '\n', '    uint public advisorsFundPercent = 3; // 3% of private sale for advisors fund \n', '    uint public teamFundPercent = 7; // 7% of private sale for team fund\n', '\n', '    uint public bonusFundValue;\n', '    uint public forgetFundValue;\n', '\n', '    bool public mintingIsStarted;\n', '    bool public mintingIsFinished;\n', '\n', '    address public teamFund;\n', '    address public advisorsFund;\n', '    address public bonusFund;\n', '    address public forgetFund;\n', '    address public reserveFund;\n', '\n', '    modifier onlyController() {\n', '        require(controllers[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    // controllers\n', '    mapping(address => bool) public controllers;\n', '\n', '    //event\n', '    event Burn(address indexed from, uint value);\n', '    event MintingStarted(uint timestamp);\n', '    event MintingFinished(uint timestamp);\n', '    \n', '\n', '   /**\n', '    *   @dev Contract constructor function sets Ico address\n', '    *   @param _teamFund       team fund address\n', '    */\n', '    constructor(address _forgetFund, address _teamFund, address _advisorsFund, address _bonusFund, address _reserveFund) public {\n', '        controllers[msg.sender] = true;\n', '        forgetFund = _forgetFund;\n', '        teamFund = _teamFund;\n', '        advisorsFund = _advisorsFund;\n', '        bonusFund = _bonusFund;\n', '        reserveFund = _reserveFund;\n', '    }\n', '\n', '   /**\n', '    *   @dev Start minting\n', '    *   @param _forgetFundValue        number of tokens for forgetFund\n', '    *   @param _bonusFundValue         number of tokens for bonusFund\n', '    */\n', '    function startMinting(uint _forgetFundValue, uint _bonusFundValue) public onlyOwner {\n', '        forgetFundValue = _forgetFundValue;\n', '        bonusFundValue = _bonusFundValue;\n', '        mintingIsStarted = true;\n', '        emit MintingStarted(now);\n', '    }\n', '\n', '   /**\n', '    *   @dev Finish minting\n', '    */\n', '    function finishMinting() public onlyOwner {\n', '        require(mint(forgetFund, forgetFundValue));\n', '        uint currentMintedAmount = mintedAmount;\n', '        require(mint(teamFund, currentMintedAmount.mul(teamFundPercent).div(100)));\n', '        require(mint(advisorsFund, currentMintedAmount.mul(advisorsFundPercent).div(100)));\n', '        require(mint(bonusFund, bonusFundValue));\n', '        require(mint(reserveFund, totalSupply.sub(mintedAmount)));\n', '        mintingIsFinished = true;\n', '        emit MintingFinished(now);\n', '    }\n', '\n', '   /**\n', '    *   @dev Get balance of tokens holder\n', "    *   @param _holder        holder's address\n", '    *   @return               balance of investor\n', '    */\n', '    function balanceOf(address _holder) public view returns (uint) {\n', '        return balances[_holder];\n', '    }\n', '\n', '   /**\n', '    *   @dev Send coins\n', '    *   throws on any error rather then return a false flag to minimize\n', '    *   user errors\n', '    *   @param _to           target address\n', '    *   @param _amount       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transfer(address _to, uint _amount) public returns (bool) {\n', '        require(mintingIsFinished);\n', '        require(_to != address(0) && _to != address(this));\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *   @dev Transfer token in batches\n', '    *   \n', "    *   @param _adresses     token holders' adresses\n", "    *   @param _values       token holders' values\n", '    */\n', '    function batchTransfer(address[] _adresses, uint[] _values) public returns (bool) {\n', '        require(_adresses.length == _values.length);\n', '        for (uint i = 0; i < _adresses.length; i++) {\n', '            require(transfer(_adresses[i], _values[i]));\n', '        }\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev An account/contract attempts to get the coins\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   @param _from         source address\n', '    *   @param _to           target address\n', '    *   @param _amount       transfer amount\n', '    *\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {\n', '        require(mintingIsFinished);\n', '\n', '        require(_to != address(0) && _to != address(this));\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *   @dev Add controller address\n', '    *   \n', "    *   @param _controller     controller's address\n", '    */\n', '    function addController(address _controller) public onlyOwner {\n', '        require(mintingIsStarted);\n', '        controllers[_controller] = true;\n', '    }\n', '    \n', '    /**\n', '    *   @dev Remove controller address\n', '    *   \n', "    *   @param _controller     controller's address\n", '    */\n', '    function removeController(address _controller) public onlyOwner {\n', '        controllers[_controller] = false;\n', '    }\n', '    \n', '    /**\n', '    *   @dev Mint token in batches\n', '    *   \n', "    *   @param _adresses     token holders' adresses\n", "    *   @param _values       token holders' values\n", '    */\n', '    function batchMint(address[] _adresses, uint[] _values) public onlyController {\n', '        require(_adresses.length == _values.length);\n', '        for (uint i = 0; i < _adresses.length; i++) {\n', '            require(mint(_adresses[i], _values[i]));\n', '            emit Transfer(address(0), _adresses[i], _values[i]);\n', '        }\n', '    }\n', '\n', '    function burn(address _from, uint _value) public {\n', '        if (msg.sender != _from) {\n', '          require(!mintingIsFinished);\n', '          // burn tokens from _from only if minting stage is not finished\n', '          // allows owner to correct initial balance before finishing minting\n', '          require(msg.sender == this.owner());\n', '          mintedAmount = mintedAmount.sub(_value);          \n', '        } else {\n', '          require(mintingIsFinished);\n', '          totalSupply = totalSupply.sub(_value);\n', '        }\n', '        balances[_from] = balances[_from].sub(_value);\n', '        emit Burn(_from, _value);\n', '    }\n', '   /**\n', '    *   @dev Allows another account/contract to spend some tokens on its behalf\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   also, to minimize the risk of the approve/transferFrom attack vector\n', '    *   approve has to be called twice in 2 separate transactions - once to\n', '    *   change the allowance to 0 and secondly to change it to the new allowance\n', '    *   value\n', '    *\n', '    *   @param _spender      approved address\n', '    *   @param _amount       allowance amount\n', '    *\n', '    *   @return true if the approval was successful\n', '    */\n', '    function approve(address _spender, uint _amount) public returns (bool) {\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '   /**\n', '    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    *   @param _owner        the address which owns the funds\n', '    *   @param _spender      the address which will spend the funds\n', '    *\n', '    *   @return              the amount of tokens still avaible for the spender\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /** \n', '    *   @dev Allows to transfer out any accidentally sent ERC20 tokens\n', '    *   @param _tokenAddress  token address\n', '    *   @param _amount        transfer amount\n', '    */\n', '    function transferAnyTokens(address _tokenAddress, uint _amount) \n', '        public\n', '        returns (bool success) {\n', '        return ERC20(_tokenAddress).transfer(this.owner(), _amount);\n', '    }\n', '\n', '    function mint(address _to, uint _value) internal returns (bool) {\n', '        // Mint tokens only if minting stage is not finished\n', '        require(mintingIsStarted);\n', '        require(!mintingIsFinished);\n', '        require(mintedAmount.add(_value) <= totalSupply);\n', '        balances[_to] = balances[_to].add(_value);\n', '        mintedAmount = mintedAmount.add(_value);\n', '        return true;\n', '    }\n', '}']