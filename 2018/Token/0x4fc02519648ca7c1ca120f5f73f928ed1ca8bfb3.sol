['//Compatible Solidity Compiler Version\n', '\n', 'pragma solidity ^0.4.15;\n', '\n', '\n', '\n', '/*\n', 'This TMX Global Token contract is based on the ERC20 token contract standard. Additional\n', 'functionality has been integrated:\n', '\n', '*/\n', '\n', '\n', 'contract TMXGlobalToken  {\n', '    //TMX Global Official Token Name\n', '    string public name;\n', '    \n', '    //TMX Global Token Official Symbol\n', '\tstring public symbol;\n', '\t\n', '\t//TMX Global Token Decimals\n', '\tuint8 public decimals; \n', '  \n', '  //database to match user Accounts and their respective balances\n', '  mapping(address => uint) _balances;\n', '  mapping(address => mapping( address => uint )) _approvals;\n', '  \n', '  //TMX Global Token Hard cap \n', '  uint public cap_tmx;\n', '  \n', '  //Number of TMX Global Tokens in existence\n', '  uint public _supply;\n', '  \n', '\n', '  event TokenMint(address newTokenHolder, uint amountOfTokens);\n', '  event TokenSwapOver();\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value );\n', '  event Approval(address indexed owner, address indexed spender, uint value );\n', '  event mintting(address indexed to, uint value );\n', '  event minterTransfered(address indexed prevCommand, address indexed nextCommand);\n', ' \n', ' //Ethereum address of Authorized Nuru Token Minter\n', 'address public dev;\n', '\n', '//check if hard cap reached before mintting new Tokens\n', 'modifier cap_reached(uint amount) {\n', '    \n', '    if((_supply + amount) > cap_tmx) revert();\n', '    _;\n', '}\n', '\n', '//check if Account is the Authorized Minter\n', 'modifier onlyMinter {\n', '    \n', '      if (msg.sender != dev) revert();\n', '      _;\n', '  }\n', '  \n', '  //initialize Nuru Token\n', '  //pass TMX Global Token Configurations to the Constructor\n', ' function TMXGlobalToken(uint cap_token, uint initial_balance, string tokenName, string tokenSymbol, uint8 decimalUnits) public {\n', '    \n', '    cap_tmx = cap_token;\n', '    _supply += initial_balance;\n', '    _balances[msg.sender] = initial_balance;\n', '    \n', '    decimals = decimalUnits;\n', '\tsymbol = tokenSymbol;\n', '\tname = tokenName;\n', '    dev = msg.sender;\n', '    \n', '  }\n', '\n', '//retrieve number of all TMX Global Tokens in existence\n', 'function totalSupply() public constant returns (uint supply) {\n', '    return _supply;\n', '  }\n', '\n', '//check TMX Global Tokens balance of an Ethereum account\n', 'function balanceOf(address who) public constant returns (uint value) {\n', '    return _balances[who];\n', '  }\n', '\n', '//check how many TMX Global Tokens a spender is allowed to spend from an owner\n', 'function allowance(address _owner, address spender) public constant returns (uint _allowance) {\n', '    return _approvals[_owner][spender];\n', '  }\n', '\n', '  // A helper to notify if overflow occurs\n', 'function safeToAdd(uint a, uint b) internal returns (bool) {\n', '    return (a + b >= a && a + b >= b);\n', '  }\n', '\n', '//transfer an amount of TMX Global Tokens to an Ethereum address\n', 'function transfer(address to, uint value) public returns (bool ok) {\n', '\n', '    if(_balances[msg.sender] < value) revert();\n', '    \n', '    if(!safeToAdd(_balances[to], value)) revert();\n', '    \n', '\n', '    _balances[msg.sender] -= value;\n', '    _balances[to] += value;\n', '    Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '//spend TMX Global Tokens from another Ethereum account that approves you as spender\n', 'function transferFrom(address from, address to, uint value) public returns (bool ok) {\n', '    // if you don&#39;t have enough balance, throw\n', '    if(_balances[from] < value) revert();\n', '\n', '    // if you don&#39;t have approval, throw\n', '    if(_approvals[from][msg.sender] < value) revert();\n', '    \n', '    if(!safeToAdd(_balances[to], value)) revert();\n', '    \n', '    // transfer and return true\n', '    _approvals[from][msg.sender] -= value;\n', '    _balances[from] -= value;\n', '    _balances[to] += value;\n', '    Transfer(from, to, value);\n', '    return true;\n', '  }\n', '  \n', '  \n', '//allow another Ethereum account to spend TMX Global Tokens from your Account\n', 'function approve(address spender, uint value)\n', '    public\n', '    returns (bool ok) {\n', '    _approvals[msg.sender][spender] = value;\n', '    Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '//mechanism for TMX Global Tokens Creation\n', '//only minter can create new TMX Global Tokens\n', '//check if TMX Global Token Hard Cap is reached before proceedig - revert if true\n', 'function mint(address recipient, uint amount) onlyMinter cap_reached(amount) public\n', '  {\n', '        \n', '   _balances[recipient] += amount;  \n', '   _supply += amount;\n', '    \n', '   \n', '    mintting(recipient, amount);\n', '  }\n', '  \n', ' //transfer the priviledge of creating new TMX Global Tokens to anothe Ethereum account\n', 'function transferMintership(address newMinter) public onlyMinter returns(bool)\n', '  {\n', '    dev = newMinter;\n', '    \n', '    minterTransfered(dev, newMinter);\n', '  }\n', '  \n', '}']
['//Compatible Solidity Compiler Version\n', '\n', 'pragma solidity ^0.4.15;\n', '\n', '\n', '\n', '/*\n', 'This TMX Global Token contract is based on the ERC20 token contract standard. Additional\n', 'functionality has been integrated:\n', '\n', '*/\n', '\n', '\n', 'contract TMXGlobalToken  {\n', '    //TMX Global Official Token Name\n', '    string public name;\n', '    \n', '    //TMX Global Token Official Symbol\n', '\tstring public symbol;\n', '\t\n', '\t//TMX Global Token Decimals\n', '\tuint8 public decimals; \n', '  \n', '  //database to match user Accounts and their respective balances\n', '  mapping(address => uint) _balances;\n', '  mapping(address => mapping( address => uint )) _approvals;\n', '  \n', '  //TMX Global Token Hard cap \n', '  uint public cap_tmx;\n', '  \n', '  //Number of TMX Global Tokens in existence\n', '  uint public _supply;\n', '  \n', '\n', '  event TokenMint(address newTokenHolder, uint amountOfTokens);\n', '  event TokenSwapOver();\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value );\n', '  event Approval(address indexed owner, address indexed spender, uint value );\n', '  event mintting(address indexed to, uint value );\n', '  event minterTransfered(address indexed prevCommand, address indexed nextCommand);\n', ' \n', ' //Ethereum address of Authorized Nuru Token Minter\n', 'address public dev;\n', '\n', '//check if hard cap reached before mintting new Tokens\n', 'modifier cap_reached(uint amount) {\n', '    \n', '    if((_supply + amount) > cap_tmx) revert();\n', '    _;\n', '}\n', '\n', '//check if Account is the Authorized Minter\n', 'modifier onlyMinter {\n', '    \n', '      if (msg.sender != dev) revert();\n', '      _;\n', '  }\n', '  \n', '  //initialize Nuru Token\n', '  //pass TMX Global Token Configurations to the Constructor\n', ' function TMXGlobalToken(uint cap_token, uint initial_balance, string tokenName, string tokenSymbol, uint8 decimalUnits) public {\n', '    \n', '    cap_tmx = cap_token;\n', '    _supply += initial_balance;\n', '    _balances[msg.sender] = initial_balance;\n', '    \n', '    decimals = decimalUnits;\n', '\tsymbol = tokenSymbol;\n', '\tname = tokenName;\n', '    dev = msg.sender;\n', '    \n', '  }\n', '\n', '//retrieve number of all TMX Global Tokens in existence\n', 'function totalSupply() public constant returns (uint supply) {\n', '    return _supply;\n', '  }\n', '\n', '//check TMX Global Tokens balance of an Ethereum account\n', 'function balanceOf(address who) public constant returns (uint value) {\n', '    return _balances[who];\n', '  }\n', '\n', '//check how many TMX Global Tokens a spender is allowed to spend from an owner\n', 'function allowance(address _owner, address spender) public constant returns (uint _allowance) {\n', '    return _approvals[_owner][spender];\n', '  }\n', '\n', '  // A helper to notify if overflow occurs\n', 'function safeToAdd(uint a, uint b) internal returns (bool) {\n', '    return (a + b >= a && a + b >= b);\n', '  }\n', '\n', '//transfer an amount of TMX Global Tokens to an Ethereum address\n', 'function transfer(address to, uint value) public returns (bool ok) {\n', '\n', '    if(_balances[msg.sender] < value) revert();\n', '    \n', '    if(!safeToAdd(_balances[to], value)) revert();\n', '    \n', '\n', '    _balances[msg.sender] -= value;\n', '    _balances[to] += value;\n', '    Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '//spend TMX Global Tokens from another Ethereum account that approves you as spender\n', 'function transferFrom(address from, address to, uint value) public returns (bool ok) {\n', "    // if you don't have enough balance, throw\n", '    if(_balances[from] < value) revert();\n', '\n', "    // if you don't have approval, throw\n", '    if(_approvals[from][msg.sender] < value) revert();\n', '    \n', '    if(!safeToAdd(_balances[to], value)) revert();\n', '    \n', '    // transfer and return true\n', '    _approvals[from][msg.sender] -= value;\n', '    _balances[from] -= value;\n', '    _balances[to] += value;\n', '    Transfer(from, to, value);\n', '    return true;\n', '  }\n', '  \n', '  \n', '//allow another Ethereum account to spend TMX Global Tokens from your Account\n', 'function approve(address spender, uint value)\n', '    public\n', '    returns (bool ok) {\n', '    _approvals[msg.sender][spender] = value;\n', '    Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '//mechanism for TMX Global Tokens Creation\n', '//only minter can create new TMX Global Tokens\n', '//check if TMX Global Token Hard Cap is reached before proceedig - revert if true\n', 'function mint(address recipient, uint amount) onlyMinter cap_reached(amount) public\n', '  {\n', '        \n', '   _balances[recipient] += amount;  \n', '   _supply += amount;\n', '    \n', '   \n', '    mintting(recipient, amount);\n', '  }\n', '  \n', ' //transfer the priviledge of creating new TMX Global Tokens to anothe Ethereum account\n', 'function transferMintership(address newMinter) public onlyMinter returns(bool)\n', '  {\n', '    dev = newMinter;\n', '    \n', '    minterTransfered(dev, newMinter);\n', '  }\n', '  \n', '}']
