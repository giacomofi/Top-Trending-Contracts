['pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '}\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address _who) public view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '    function approve(address _spender, uint256 _value)\n', '    public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', '\n', 'contract AS is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '\n', '    uint256 private totalSupply_ = 110000000 * 10**8;\n', '\n', '    string public constant name = "AmaStar";\n', '    string public constant symbol = "AS";\n', '    uint8 public constant decimals = 8;\n', '\n', '    mapping (address => uint) lockupTime;\n', '    mapping (address => uint) lockupAmount;\n', '\n', '\n', '    bool private teamGotMoney = false;\n', '\n', '    function lock(address _victim, uint _value, uint _periodSec) public onlyOwner {\n', '        lockupAmount[_victim] = 0;\n', '        lockupTime[_victim] = 0;\n', '        lockupAmount[_victim] = _value;\n', '        lockupTime[_victim] = block.timestamp.add(_periodSec);\n', '    }\n', '\n', '    function unlock(address _luckier) external onlyOwner {\n', '        lockupAmount[_luckier] = 0;\n', '        lockupTime[_luckier] = 0;\n', '    }\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = totalSupply_;\n', '    }\n', '\n', '\n', '    function transferAndLockToTeam(address _team1year, address _team6months, address _operations1year, address _operations9months, address _operations6months, address _operations3months) external onlyOwner {\n', '        require(!teamGotMoney);\n', '        teamGotMoney = true;\n', '        transfer(_team1year, 10000000 * 10**8);\n', '        transfer(_team6months, 6500000 * 10**8);\n', '        lock(_team1year, 10000000 * 10**8, 365 * 1 days);\n', '        lock(_team6months, 6500000 * 10**8, 182 * 1 days);\n', '        transfer(_operations1year, 2750000 * 10**8);\n', '        transfer(_operations9months, 2750000 * 10**8);\n', '        transfer(_operations6months, 2750000 * 10**8);\n', '        transfer(_operations3months, 2750000 * 10**8);\n', '        lock(_operations1year, 2750000 * 10**8, 365 * 1 days);\n', '        lock(_operations9months, 2750000 * 10**8, 273 * 1 days);\n', '        lock(_operations6months, 2750000 * 10**8, 182 * 1 days);\n', '        lock(_operations3months, 2750000 * 10**8, 91 * 1 days);\n', '    }\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        if (lockupAmount[msg.sender] > 0) {\n', '            if (block.timestamp <= lockupTime[msg.sender]) {\n', '                require(balances[msg.sender].sub(lockupAmount[msg.sender]) >= _value);\n', '            }\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        if (lockupAmount[_from] > 0) {\n', '            if (now <= lockupTime[_from]) {\n', '                require(balances[_from].sub(lockupAmount[_from]) >= _value);\n', '            }\n', '        }\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint256 _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint256 _subtractedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param _account The account whose tokens will be burnt.\n', '     * @param _amount The amount that will be burnt.\n', '     */\n', '    function _burn(address _account, uint256 _amount) internal {\n', '        require(_account != 0);\n', '        require(_amount <= balances[_account]);\n', '\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        balances[_account] = balances[_account].sub(_amount);\n', '        emit Transfer(_account, address(0), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal _burn function.\n', '     * @param _account The account whose tokens will be burnt.\n', '     * @param _amount The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address _account, uint256 _amount) internal {\n', '        require(_amount <= allowed[_account][msg.sender]);\n', '\n', '        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '        // this function needs to emit an event with the updated approval.\n', '        allowed[_account][msg.sender] = allowed[_account][msg.sender].sub(_amount);\n', '        _burn(_account, _amount);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    address public multisig;\n', '\n', '    AS public token;\n', '\n', '    uint rate;\n', '    uint rateInUsd;\n', '    uint priceETH;\n', '\n', '    uint indCap;\n', '\n', '    event Purchased(address _buyer, uint _amount, string _type);\n', '\n', '\n', '    function setIndCap(uint _indCapETH) public onlyOwner {\n', '        indCap = _indCapETH;\n', '    }\n', '\n', '    function getIndCapInETH() public view returns(uint) {\n', '        return indCap;\n', '    }\n', '\n', '    function setPriceETH(uint _newPriceETH) external onlyOwner {\n', '        setRate(_newPriceETH);\n', '    }\n', '\n', '    function setRate(uint _priceETH) internal {\n', '        require(_priceETH != 0);\n', '        priceETH = _priceETH;\n', '        rate = rateInUsd.mul(1 ether).div(_priceETH);\n', '    }\n', '\n', '    function getPriceETH() public view returns(uint) {\n', '        return priceETH;\n', '    }\n', '\n', '    constructor() public {\n', '    }\n', '\n', '    function() external payable {\n', '    }\n', '\n', '    function finalizeICO(address _owner) external onlyOwner {\n', '        require(_owner != address(0));\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(_owner, balance);\n', '    }\n', '\n', '    function getMyBalanceAS() external view returns(uint256) {\n', '        return token.balanceOf(msg.sender);\n', '    }\n', '}\n', '\n', 'contract whitelistICO is Crowdsale {\n', '\n', '    uint periodWhitelist;\n', '    uint startWhitelist;\n', '    uint public bonuses1;\n', '\n', '    mapping (address => bool) whitelist;\n', '\n', '    function addToWhitelist(address _newMember) external onlyOwner {\n', '        require(_newMember != address(0));\n', '        whitelist[_newMember] = true;\n', '    }\n', '\n', '    function removeFromWhitelist(address _member) external onlyOwner {\n', '        require(_member != address(0));\n', '        whitelist[_member] = false;\n', '    }\n', '\n', '    function addListToWhitelist(address[] _addresses) external onlyOwner {\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            whitelist[_addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function removeListFromWhitelist(address[] _addresses) external onlyOwner {\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            whitelist[_addresses[i]] = false;\n', '        }\n', '    }\n', '\n', '    constructor(address _AS, address _multisig, uint _priceETH, uint _startWhiteListUNIX, uint _periodWhitelistSEC, uint _indCap) public {\n', '        require(_AS != 0 && _priceETH != 0);\n', '        token = AS(_AS);\n', '        multisig = _multisig; // адрес для получения эфиров\n', '        bonuses1 = 50; // бонусный процент на этапе пресейла\n', '        startWhitelist = _startWhiteListUNIX; // время начала пресейла UNIX\n', '        periodWhitelist = _periodWhitelistSEC; // срок пресейла в секундах\n', '        rateInUsd = 10; // стоимость токена в центах\n', '        setRate(_priceETH);\n', '        setIndCap(_indCap);\n', '    }\n', '\n', '    function extendPeriod(uint _days) external onlyOwner {\n', '        periodWhitelist = periodWhitelist.add(_days.mul(1 days));\n', '    }\n', '\n', '\n', '    function() external payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function buyTokens() public payable {\n', '        require(block.timestamp > startWhitelist && block.timestamp < startWhitelist.add(periodWhitelist));\n', '\n', '\n', '        if (indCap > 0) {\n', '            require(msg.value <= indCap.mul(1 ether));\n', '        }\n', '\n', '        require(whitelist[msg.sender]);\n', '        uint256 totalAmount = msg.value.mul(1 ether).mul(10^8).div(rate).add(msg.value.mul(1 ether).mul(10**8).mul(bonuses1).div(100).div(rate));\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        if (totalAmount > balance) {\n', '            uint256 cash = balance.mul(rate).mul(100).div(100 + bonuses1).div(10**8).div(1 ether);\n', '            uint256 cashBack = msg.value.sub(cash);\n', '            multisig.transfer(cash);\n', '            msg.sender.transfer(cashBack);\n', '            token.transfer(msg.sender, balance);\n', '            emit Purchased(msg.sender, balance, "WhiteList");\n', '            return;\n', '        }\n', '\n', '        multisig.transfer(msg.value);\n', '        token.transfer(msg.sender, totalAmount);\n', '        emit Purchased(msg.sender, totalAmount, "WhiteList");\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract preICO is Crowdsale {\n', '\n', '    uint public bonuses2;\n', '    uint startPreIco;\n', '    uint periodPreIco;\n', '\n', '\n', '\n', '    constructor(address _AS, address _multisig, uint _priceETH, uint _startPreIcoUNIX, uint _periodPreIcoSEC, uint _indCap) public {\n', '        require(_AS != 0 && _priceETH != 0);\n', '        token = AS(_AS);\n', '        multisig = _multisig; // адрес для получения эфиров\n', '        bonuses2 = 20; // бонусный процент на этапе preICO\n', '        startPreIco = _startPreIcoUNIX; // время начала preICO UNIX\n', '        periodPreIco = _periodPreIcoSEC; // срок preICO в секундах\n', '        rateInUsd = 10; // стоимость токена в центах\n', '        setRate(_priceETH);\n', '        setIndCap(_indCap);\n', '    }\n', '\n', '    function extendPeriod(uint _days) external onlyOwner {\n', '        periodPreIco = periodPreIco.add(_days.mul(1 days));\n', '    }\n', '\n', '    function() external payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function buyTokens() public payable {\n', '        require(block.timestamp > startPreIco && block.timestamp < startPreIco.add(periodPreIco));\n', '\n', '\n', '        if (indCap > 0) {\n', '            require(msg.value <= indCap.mul(1 ether));\n', '        }\n', '\n', '        uint256 totalAmount = msg.value.mul(10**8).div(rate).add(msg.value.mul(10**8).mul(bonuses2).div(100).div(rate));\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        if (totalAmount > balance) {\n', '            uint256 cash = balance.mul(rate).mul(100).div(100 + bonuses2).div(10**8);\n', '            uint256 cashBack = msg.value.sub(cash);\n', '            multisig.transfer(cash);\n', '            msg.sender.transfer(cashBack);\n', '            token.transfer(msg.sender, balance);\n', '            emit Purchased(msg.sender, balance, "PreICO");\n', '            return;\n', '        }\n', '\n', '        multisig.transfer(msg.value);\n', '        token.transfer(msg.sender, totalAmount);\n', '        emit Purchased(msg.sender, totalAmount, "PreICO");\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract mainICO is Crowdsale {\n', '\n', '    uint startIco;\n', '    uint periodIco;\n', '\n', '\n', '\n', '    constructor(address _AS, address _multisig, uint _priceETH, uint _startIcoUNIX, uint _periodIcoSEC, uint _indCap) public {\n', '        require(_AS != 0 && _priceETH != 0);\n', '        token = AS(_AS);\n', '        multisig = _multisig; // адрес для получения эфиров\n', '        startIco = _startIcoUNIX; // время начала ICO UNIX\n', '        periodIco = _periodIcoSEC; // срок ICO в секундах\n', '        rateInUsd = 10; // стоимость токена в центах\n', '        setRate(_priceETH);\n', '        setIndCap(_indCap);\n', '    }\n', '\n', '    function extendPeriod(uint _days) external onlyOwner {\n', '        periodIco = periodIco.add(_days.mul(1 days));\n', '    }\n', '\n', '    function() external payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function buyTokens() public payable {\n', '        require(block.timestamp > startIco && block.timestamp < startIco.add(periodIco));\n', '\n', '        if (indCap > 0) {\n', '            require(msg.value <= indCap.mul(1 ether));\n', '        }\n', '\n', '        uint256 amount = msg.value.mul(10**8).div(rate);\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        if (amount > balance) {\n', '            uint256 cash = balance.mul(rate).div(10**8);\n', '            uint256 cashBack = msg.value.sub(cash);\n', '            multisig.transfer(cash);\n', '            msg.sender.transfer(cashBack);\n', '            token.transfer(msg.sender, balance);\n', '            emit Purchased(msg.sender, balance, "MainICO");\n', '            return;\n', '        }\n', '\n', '        multisig.transfer(msg.value);\n', '        token.transfer(msg.sender, amount);\n', '        emit Purchased(msg.sender, amount, "MainICO");\n', '    }\n', '}']