['/*! wem.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\n', '\n', 'pragma solidity 0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if(a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '        OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract Withdrawable is Ownable {\n', '    function withdrawEther(address _to, uint _value) onlyOwner public returns(bool) {\n', '        require(_to != address(0));\n', '        require(this.balance >= _value);\n', '\n', '        _to.transfer(_value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function withdrawTokens(ERC20 _token, address _to, uint _value) onlyOwner public returns(bool) {\n', '        require(_to != address(0));\n', '\n', '        return _token.call(&#39;transfer&#39;, _to, _value);\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    bool public paused = false;\n', '\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    modifier whenNotPaused() { require(!paused); _; }\n', '    modifier whenPaused() { require(paused); _; }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function balanceOf(address who) public view returns(uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '    function approve(address spender, uint256 value) public returns(bool);\n', '}\n', '\n', 'contract ERC223 is ERC20 {\n', '    function transfer(address to, uint256 value, bytes data) public returns(bool);\n', '}\n', '\n', 'contract ERC223Receiving {\n', '    function tokenFallback(address from, uint256 value, bytes data) external;\n', '}\n', '\n', 'contract StandardToken is ERC223 {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function StandardToken(string _name, string _symbol, uint8 _decimals) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns(uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function _transfer(address _to, uint256 _value, bytes _data) private returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        bool is_contract = false;\n', '        assembly {\n', '            is_contract := not(iszero(extcodesize(_to)))\n', '        }\n', '\n', '        if(is_contract) {\n', '            ERC223Receiving receiver = ERC223Receiving(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '            //receiver.call(&#39;tokenFallback&#39;, msg.sender, _value, _data);\n', '        }\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        bytes memory empty;\n', '        return _transfer(_to, _value, empty);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns(bool) {\n', '        return _transfer(_to, _value, _data);\n', '    }\n', '    \n', '    function multiTransfer(address[] _to, uint256[] _value) public returns(bool) {\n', '        require(_to.length == _value.length);\n', '\n', '        for(uint i = 0; i < _to.length; i++) {\n', '            transfer(_to[i], _value[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns(bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns(bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '\n', '        if(_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() { require(!mintingFinished); _; }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns(bool) {\n', '        mintingFinished = true;\n', '\n', '        MintFinished();\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '    uint256 public cap;\n', '\n', '    function CappedToken(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns(bool) {\n', '        require(totalSupply.add(_amount) <= cap);\n', '\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '/*\n', '    Полное название токена: Wind Energy Mining\n', '    Сокращенное: WEM \n', '    Эмиссия: 34 000 000\n', '\n', '    PreICO  нет\n', '    SetTokenRate нет\n', '    Refund нет\n', '\n', '    Цена фиксирована:\n', '    1 ETH = 1000 WEM\n', '\n', '    ICO\n', '    на продажу токенов: 30 600 000\n', '    Даты проведения: 20.03.2018 - 20.05.2018\n', '\n', '    После окончания ICO нераскупленные токены передаются бенефициару\n', '\n', '    Дополнительная информация:\n', '    Бонусы - при приобретении 1000 и более токенов WEM покупатель дополнительно получает  5% от приобретенного количества бесплатно.\n', '    Обратный выкуп токенов WEM будет производиться по фиксированной цене 0,0015 ETH за один WEM, начиная с 01.03.2019 до конца 2020 года.\n', '\n', '    ---- En -----\n', '\n', '    Token name: Wind Energy Mining\n', '    Symbol: WEM \n', '    Emission: 34,000,000\n', '\n', '    PreICO - no\n', '    SetTokenRate – no\n', '    Refund - no\n', '\n', '    Fixed price:\n', '    1 ETH = 1,000 WEM\n', '\n', '    ICO\n', '    Tokens to be sold: 30,600,000\n', '    ICO period: 20.03.2018 - 20.05.2018\n', '\n', '    After the ICO, all unsold tokens will be sent to a beneficiary. \n', '\n', '    Additional information:\n', '    Bonuses – when purchasing 1,000 and more WEM tokens, a buyer additionally receives 5% from the number of tokens purchased.\n', '    WEM buyback will take place beginning on 01.03.2019 until the end of 2020, at a fixed price of 0.0015 ETH for 1 WEM.\n', '*/\n', '\n', 'contract Token is CappedToken, BurnableToken, Withdrawable {\n', '    function Token() CappedToken(34000000 * 1 ether) StandardToken("Wind Energy Mining", "WEM", 18) public {\n', '        \n', '    }\n', '}\n', '\n', 'contract Crowdsale is Withdrawable, Pausable {\n', '    using SafeMath for uint;\n', '\n', '    Token public token;\n', '    address public beneficiary = 0x16DEfd1C28006c117845509e4daec7Bc6DC40F50;\n', '\n', '    uint public priceTokenWei = 0.001 ether;\n', '    uint public priceTokenSellWei = 0.0015 ether;\n', '    uint public tokensForSale = 30600000 * 1 ether;\n', '    \n', '    uint public purchaseStartTime = 1521147600;\n', '    uint public purchaseEndTime = 1526763600;\n', '    uint public sellStartTime = 1551387600;\n', '    uint public sellEndTime = 1609448400;\n', '\n', '    uint public tokensSold;\n', '    uint public tokensSell;\n', '    uint public collectedWei;\n', '    uint public sellWei;\n', '\n', '    bool public crowdsaleClosed = false;\n', '\n', '    event Purchase(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n', '    event Sell(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n', '    event AccrueEther(address indexed holder, uint256 etherAmount);\n', '    event CrowdsaleClose();\n', '\n', '    function Crowdsale() public {\n', '        token = new Token();\n', '    }\n', '\n', '    function() payable public {\n', '        purchase();\n', '    }\n', '\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) whenNotPaused external {\n', '        require(msg.sender == address(token));\n', '        require(now >= sellStartTime && now < sellEndTime);\n', '\n', '        uint sum = _value.mul(priceTokenSellWei).div(1 ether);\n', '\n', '        tokensSell = tokensSell.add(_value);\n', '        sellWei = sellWei.add(sum);\n', '\n', '        _from.transfer(sum);\n', '\n', '        Sell(_from, _value, sum);\n', '    }\n', '\n', '    function purchase() whenNotPaused payable public {\n', '        require(!crowdsaleClosed);\n', '        require(now >= purchaseStartTime && now < purchaseEndTime);\n', '        require(msg.value >= 0.001 ether);\n', '        require(tokensSold < tokensForSale);\n', '\n', '        uint sum = msg.value;\n', '        uint amount = sum.mul(1 ether).div(priceTokenWei);\n', '        uint retSum = 0;\n', '        \n', '        if(tokensSold.add(amount) > tokensForSale) {\n', '            uint retAmount = tokensSold.add(amount).sub(tokensForSale);\n', '            retSum = retAmount.mul(priceTokenWei).div(1 ether);\n', '\n', '            amount = amount.sub(retAmount);\n', '            sum = sum.sub(retSum);\n', '        }\n', '\n', '        if(amount >= 1000 ether) {\n', '            amount = amount.add(amount.div(100).mul(5));\n', '        }\n', '\n', '        tokensSold = tokensSold.add(amount);\n', '        collectedWei = collectedWei.add(sum);\n', '\n', '        beneficiary.transfer(sum);\n', '        token.mint(msg.sender, amount);\n', '\n', '        if(retSum > 0) {\n', '            msg.sender.transfer(retSum);\n', '        }\n', '\n', '        Purchase(msg.sender, amount, sum);\n', '    }\n', '\n', '    function accrueEther() payable public {\n', '        AccrueEther(msg.sender, msg.value);\n', '    }\n', '\n', '    function closeCrowdsale() onlyOwner public {\n', '        require(!crowdsaleClosed);\n', '        \n', '        token.mint(beneficiary, token.cap() - token.totalSupply());\n', '        token.finishMinting();\n', '        token.transferOwnership(beneficiary);\n', '\n', '        crowdsaleClosed = true;\n', '\n', '        CrowdsaleClose();\n', '    }\n', '}']