['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Copyright (C) DinarETH Cryptoken\n', ' * All rights reserved.\n', ' *  *\n', ' * Note: This code is adapted from Fixed Supply token contract \n', ' * (c) BokkyPooBah 2017. The MIT Licence.\n', ' *\n', ' */\n', ' \n', ' /**\n', ' * \t@title SafeMath\n', ' * \t@dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', ' \n', '/*\n', ' * \tStandard ERC20 interface. Adapted from https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' *\n', '*/ \n', '\tcontract ERC20Interface {\n', '      \n', '\t\tfunction totalSupply() public constant returns (uint256 totSupply);   \n', '\t    function balanceOf(address _owner) public constant returns (uint256 balance);   \n', '\t\tfunction transfer(address _to, uint256 _amount) public returns (bool success);\t  \n', '\t\tfunction transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);   \n', '\t\tfunction approve(address _spender, uint256 _value) public returns (bool success);   \n', '\t\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);             \n', '\t\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);   \n', '\t\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value); \t\n', '\t  \n', '\t}\n', '\n', '/*\n', ' * \tInterface to cater for DinarETH specific requirements\n', ' *\n', '*/\n', '\tcontract DinarETHInterface {\n', '  \n', '\t\tfunction getGoldXchgRate() public constant returns (uint rate);\n', '\t\tfunction setGoldCertVerifier(string _baseURL) public;\n', '\t\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool success);\n', '\t\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success);\n', '\t\tfunction transferOwnership(address _newOwner) public;\n', '\t}\n', '\n', '/*\n', ' * \tDinarETH Crypto contract\n', ' *\n', '*/\n', '\tcontract DinarETHCrypto is ERC20Interface, DinarETHInterface {\n', '\t\tusing SafeMath for uint256;\n', '\t\n', '\t\tstring public symbol = "DNAR";\n', '\t\tstring public name = "DinarETH";\n', '\t\tstring public goldCertVerifier = "https://dinareth.io/goldcert/"; //example https://dinareth.io/goldcert/0xdb2996EF3724Ab7205xxxxxxx\n', '\t\tuint8 public constant decimals = 8;\n', '\t\tuint256 public constant DNARtoGoldXchgRate = 10000000;\t\t\t // 1 DNAR = 0.1g Gold\n', '\t\tuint256 public constant _totalSupply = 9900000000000000;\n', '      \n', '\t\t// Owner of this contract\n', '\t\taddress public owner;\n', '   \n', '\t\t// Balances for each account\n', '\t\tmapping(address => uint256) balances;\n', '   \n', '\t\t// Owner of account approves the transfer of an amount to another account\n', '\t\tmapping(address => mapping (address => uint256)) allowed;\n', '   \n', '\t\t// Functions with this modifier can only be executed by the owner\n', '\t\tmodifier onlyOwner() {          \n', '\t\t\trequire(msg.sender == owner);\n', '\t\t\t_;\t\t  \n', '\t\t}\n', '\t  \n', '\t\t// Functions with this modifier can only be executed not to this contract. This is to avoid sending ERC20 tokens to this contract address\n', '\t\tmodifier notThisContract(address _to) {\t\t\n', '\t\t\trequire(_to != address(this));\n', '\t\t\t_;\t\t\t  \n', '\t\t}\n', '   \n', '\t\t// Constructor\n', '\t\tfunction DinarETHCrypto() public {\t  \n', '\t\t\towner = msg.sender;\n', '\t\t\tbalances[owner] = _totalSupply;\t\t  \n', '\t\t}\n', '      \n', '\t\t// This is safety mechanism to allow ETH (if any) in this contract address to be sent to the contract owner\n', '\t\tfunction () payable public {\n', '\t\t\tif(this.balance > 1000000000000000000){\n', '\t\t\t\towner.transfer(this.balance);\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\t// Returns the account balance of another account with address _owner.\n', '\t\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\n', '\t\t\treturn balances[_owner];\n', '\t\t}\n', '\t  \n', '\t\t// Returns the total token supply.\n', '\t\tfunction totalSupply() public constant returns (uint256 totSupply) {\n', '\t\t\treturn _totalSupply;\n', '\t\t}\n', '\t    \n', '\t\t// Transfer the balance from owner&#39;s account to another account\n', '\t\tfunction transfer(address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\n', '\t\t\trequire(_to != 0x0);\n', '\t\t\trequire(_amount > 0);\n', '\t\t\trequire(balances[msg.sender] >= _amount);\n', '\t\t\trequire(balances[_to] + _amount > balances[_to]);\n', '\t\t\tbalances[msg.sender] -= _amount;\n', '\t\t\tbalances[_to] += _amount;\t\t  \n', '\t\t\tTransfer(msg.sender, _to, _amount);\n', '\t\t\treturn true;\t \n', '\t\t}\n', '   \n', '\t\t// The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. \n', '\t\t// This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies. \n', '\t\t// The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism.\n', '\t\t// Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '\t\tfunction transferFrom( address _from, address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\t\n', '\t\t\n', '\t\t   require(balances[_from] >= _amount);\n', '\t\t   require(allowed[_from][msg.sender] >= _amount);\n', '\t\t   require(_amount > 0);\n', '\t\t   require(balances[_to] + _amount > balances[_to]);\n', '\t\t   \n', '\t\t   balances[_from] -= _amount;\n', '           allowed[_from][msg.sender] -= _amount;\n', '           balances[_to] += _amount;\n', '           Transfer(_from, _to, _amount);\n', '           return true;        \n', '\t\t}\n', '\t \n', '\t\t// Allows _spender to withdraw from your account multiple times, up to the _value amount. \n', '\t\t// If this function is called again it overwrites the current allowance with _value\n', '\t\t// To change the approve amount you first have to reduce the addresses`\n', '\t\t// allowance to zero by calling `approve(_spender, 0)` if it is not\n', '\t\t// already 0 to mitigate the race condition described here:\n', '\t\t// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729   \t\t\n', '\t\tfunction approve(address _spender, uint256 _amount) public returns (bool) {\t\t\n', '\t\t\n', '\t\t\trequire((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\t\t  \n', '\t\t\tallowed[msg.sender][_spender] = _amount;\n', '\t\t\tApproval(msg.sender, _spender, _amount);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t\t\n', '\t\t// Returns the amount which _spender is still allowed to withdraw from _owner\n', '\t\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '\t\t\treturn allowed[_owner][_spender];\n', '\t\t}\n', '\t\t\n', '\t\tfunction send(address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\n', '\t\t    return transfer(_to, _amount);\n', '\t\t}\n', '\t\t\n', '\t\tfunction sendFrom( address _from, address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\t\n', '\t\t    return transferFrom(_from, _to, _amount);\n', '\t\t}\n', '\t\t   \n', '\t\t// Approve should be called when allowed[_spender] == 0. To increment\n', '\t\t// allowed value is better to use this function to avoid 2 calls (and wait until \n', '\t\t// the first transaction is mined)\n', '\t\t// From MonolithDAO Token.sol\n', '\t\tfunction increaseApproval (address _spender, uint _addedValue) public \n', '\t\t\treturns (bool success) {\n', '\t\t\t\n', '\t\t\tallowed[msg.sender][_spender] += _addedValue;\n', '\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t\t// Decrease approval\n', '\t\tfunction decreaseApproval (address _spender, uint _subtractedValue) public\n', '\t\t\treturns (bool success) {\n', '\t\t\t\n', '\t\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\t\t\n', '\t\t\tif (_subtractedValue > oldValue) {\n', '\t\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t\t} else {\n', '\t\t\t\tallowed[msg.sender][_spender] -= _subtractedValue;\n', '\t\t\t}\n', '\t\t\t\n', '\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t\t\n', '\t\t// Get DNAR to Gold (in gram) exchange rate. I.e. 1 DNAR = 0.1g Gold\n', '\t\tfunction getGoldXchgRate() public constant returns (uint rate) {\t\t\t\t\t\t\n', '\t\t\treturn DNARtoGoldXchgRate;\t\t\t\n', '\t\t}\n', '\t\t\n', '\t\t// Set Gold Certificate Verifier URL\n', '\t\tfunction setGoldCertVerifier(string _baseURL) public onlyOwner {\n', '\t\t\tgoldCertVerifier = _baseURL;\n', '\t\t}\n', '\t\t\t\t\t\t\t\t\n', '\t\t// Change the name and symbol assigned to this contract\n', '\t\tfunction changeNameSymbol(string _name, string _symbol) public onlyOwner {\n', '\t\t\tname = _name;\n', '\t\t\tsymbol = _symbol;\n', '\t\t}\n', '\t\t\n', '\t\t// Transfer owner of contract to a new owner\n', '\t\tfunction transferOwnership(address _newOwner) public onlyOwner {\n', '\t\t\towner = _newOwner;\n', '\t\t}\n', '\t}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Copyright (C) DinarETH Cryptoken\n', ' * All rights reserved.\n', ' *  *\n', ' * Note: This code is adapted from Fixed Supply token contract \n', ' * (c) BokkyPooBah 2017. The MIT Licence.\n', ' *\n', ' */\n', ' \n', ' /**\n', ' * \t@title SafeMath\n', ' * \t@dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', ' \n', '/*\n', ' * \tStandard ERC20 interface. Adapted from https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' *\n', '*/ \n', '\tcontract ERC20Interface {\n', '      \n', '\t\tfunction totalSupply() public constant returns (uint256 totSupply);   \n', '\t    function balanceOf(address _owner) public constant returns (uint256 balance);   \n', '\t\tfunction transfer(address _to, uint256 _amount) public returns (bool success);\t  \n', '\t\tfunction transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);   \n', '\t\tfunction approve(address _spender, uint256 _value) public returns (bool success);   \n', '\t\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);             \n', '\t\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);   \n', '\t\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value); \t\n', '\t  \n', '\t}\n', '\n', '/*\n', ' * \tInterface to cater for DinarETH specific requirements\n', ' *\n', '*/\n', '\tcontract DinarETHInterface {\n', '  \n', '\t\tfunction getGoldXchgRate() public constant returns (uint rate);\n', '\t\tfunction setGoldCertVerifier(string _baseURL) public;\n', '\t\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool success);\n', '\t\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success);\n', '\t\tfunction transferOwnership(address _newOwner) public;\n', '\t}\n', '\n', '/*\n', ' * \tDinarETH Crypto contract\n', ' *\n', '*/\n', '\tcontract DinarETHCrypto is ERC20Interface, DinarETHInterface {\n', '\t\tusing SafeMath for uint256;\n', '\t\n', '\t\tstring public symbol = "DNAR";\n', '\t\tstring public name = "DinarETH";\n', '\t\tstring public goldCertVerifier = "https://dinareth.io/goldcert/"; //example https://dinareth.io/goldcert/0xdb2996EF3724Ab7205xxxxxxx\n', '\t\tuint8 public constant decimals = 8;\n', '\t\tuint256 public constant DNARtoGoldXchgRate = 10000000;\t\t\t // 1 DNAR = 0.1g Gold\n', '\t\tuint256 public constant _totalSupply = 9900000000000000;\n', '      \n', '\t\t// Owner of this contract\n', '\t\taddress public owner;\n', '   \n', '\t\t// Balances for each account\n', '\t\tmapping(address => uint256) balances;\n', '   \n', '\t\t// Owner of account approves the transfer of an amount to another account\n', '\t\tmapping(address => mapping (address => uint256)) allowed;\n', '   \n', '\t\t// Functions with this modifier can only be executed by the owner\n', '\t\tmodifier onlyOwner() {          \n', '\t\t\trequire(msg.sender == owner);\n', '\t\t\t_;\t\t  \n', '\t\t}\n', '\t  \n', '\t\t// Functions with this modifier can only be executed not to this contract. This is to avoid sending ERC20 tokens to this contract address\n', '\t\tmodifier notThisContract(address _to) {\t\t\n', '\t\t\trequire(_to != address(this));\n', '\t\t\t_;\t\t\t  \n', '\t\t}\n', '   \n', '\t\t// Constructor\n', '\t\tfunction DinarETHCrypto() public {\t  \n', '\t\t\towner = msg.sender;\n', '\t\t\tbalances[owner] = _totalSupply;\t\t  \n', '\t\t}\n', '      \n', '\t\t// This is safety mechanism to allow ETH (if any) in this contract address to be sent to the contract owner\n', '\t\tfunction () payable public {\n', '\t\t\tif(this.balance > 1000000000000000000){\n', '\t\t\t\towner.transfer(this.balance);\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\t// Returns the account balance of another account with address _owner.\n', '\t\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\n', '\t\t\treturn balances[_owner];\n', '\t\t}\n', '\t  \n', '\t\t// Returns the total token supply.\n', '\t\tfunction totalSupply() public constant returns (uint256 totSupply) {\n', '\t\t\treturn _totalSupply;\n', '\t\t}\n', '\t    \n', "\t\t// Transfer the balance from owner's account to another account\n", '\t\tfunction transfer(address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\n', '\t\t\trequire(_to != 0x0);\n', '\t\t\trequire(_amount > 0);\n', '\t\t\trequire(balances[msg.sender] >= _amount);\n', '\t\t\trequire(balances[_to] + _amount > balances[_to]);\n', '\t\t\tbalances[msg.sender] -= _amount;\n', '\t\t\tbalances[_to] += _amount;\t\t  \n', '\t\t\tTransfer(msg.sender, _to, _amount);\n', '\t\t\treturn true;\t \n', '\t\t}\n', '   \n', '\t\t// The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. \n', '\t\t// This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in sub-currencies. \n', '\t\t// The function SHOULD throw unless the _from account has deliberately authorized the sender of the message via some mechanism.\n', '\t\t// Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '\t\tfunction transferFrom( address _from, address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\t\n', '\t\t\n', '\t\t   require(balances[_from] >= _amount);\n', '\t\t   require(allowed[_from][msg.sender] >= _amount);\n', '\t\t   require(_amount > 0);\n', '\t\t   require(balances[_to] + _amount > balances[_to]);\n', '\t\t   \n', '\t\t   balances[_from] -= _amount;\n', '           allowed[_from][msg.sender] -= _amount;\n', '           balances[_to] += _amount;\n', '           Transfer(_from, _to, _amount);\n', '           return true;        \n', '\t\t}\n', '\t \n', '\t\t// Allows _spender to withdraw from your account multiple times, up to the _value amount. \n', '\t\t// If this function is called again it overwrites the current allowance with _value\n', '\t\t// To change the approve amount you first have to reduce the addresses`\n', '\t\t// allowance to zero by calling `approve(_spender, 0)` if it is not\n', '\t\t// already 0 to mitigate the race condition described here:\n', '\t\t// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729   \t\t\n', '\t\tfunction approve(address _spender, uint256 _amount) public returns (bool) {\t\t\n', '\t\t\n', '\t\t\trequire((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\t\t  \n', '\t\t\tallowed[msg.sender][_spender] = _amount;\n', '\t\t\tApproval(msg.sender, _spender, _amount);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t\t\n', '\t\t// Returns the amount which _spender is still allowed to withdraw from _owner\n', '\t\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '\t\t\treturn allowed[_owner][_spender];\n', '\t\t}\n', '\t\t\n', '\t\tfunction send(address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\n', '\t\t    return transfer(_to, _amount);\n', '\t\t}\n', '\t\t\n', '\t\tfunction sendFrom( address _from, address _to, uint256 _amount) public notThisContract(_to) returns (bool success) {\t\n', '\t\t    return transferFrom(_from, _to, _amount);\n', '\t\t}\n', '\t\t   \n', '\t\t// Approve should be called when allowed[_spender] == 0. To increment\n', '\t\t// allowed value is better to use this function to avoid 2 calls (and wait until \n', '\t\t// the first transaction is mined)\n', '\t\t// From MonolithDAO Token.sol\n', '\t\tfunction increaseApproval (address _spender, uint _addedValue) public \n', '\t\t\treturns (bool success) {\n', '\t\t\t\n', '\t\t\tallowed[msg.sender][_spender] += _addedValue;\n', '\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t\t// Decrease approval\n', '\t\tfunction decreaseApproval (address _spender, uint _subtractedValue) public\n', '\t\t\treturns (bool success) {\n', '\t\t\t\n', '\t\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\t\t\n', '\t\t\tif (_subtractedValue > oldValue) {\n', '\t\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t\t} else {\n', '\t\t\t\tallowed[msg.sender][_spender] -= _subtractedValue;\n', '\t\t\t}\n', '\t\t\t\n', '\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t\t\n', '\t\t// Get DNAR to Gold (in gram) exchange rate. I.e. 1 DNAR = 0.1g Gold\n', '\t\tfunction getGoldXchgRate() public constant returns (uint rate) {\t\t\t\t\t\t\n', '\t\t\treturn DNARtoGoldXchgRate;\t\t\t\n', '\t\t}\n', '\t\t\n', '\t\t// Set Gold Certificate Verifier URL\n', '\t\tfunction setGoldCertVerifier(string _baseURL) public onlyOwner {\n', '\t\t\tgoldCertVerifier = _baseURL;\n', '\t\t}\n', '\t\t\t\t\t\t\t\t\n', '\t\t// Change the name and symbol assigned to this contract\n', '\t\tfunction changeNameSymbol(string _name, string _symbol) public onlyOwner {\n', '\t\t\tname = _name;\n', '\t\t\tsymbol = _symbol;\n', '\t\t}\n', '\t\t\n', '\t\t// Transfer owner of contract to a new owner\n', '\t\tfunction transferOwnership(address _newOwner) public onlyOwner {\n', '\t\t\towner = _newOwner;\n', '\t\t}\n', '\t}']
