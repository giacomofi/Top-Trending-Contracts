['pragma solidity 0.4.19;\n', '\n', '// File: contracts\\ERC20.sol\n', '\n', '/**\n', ' * Starndard ERC20 interface: https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '    /**\t\n', '    * @dev Fix for the ERC20 short address attack.\t\n', '    * Remove short address attack checks from tokens(https://github.com/OpenZeppelin/openzeppelin-solidity/issues/261)\n', '    */\t\n', '    modifier onlyPayloadSize(uint256 size) {\t\n', '        require(msg.data.length >= size + 4);\n', '        _;\t\n', '    }\n', '    \n', '}\n', '\n', '// File: contracts\\MultiOwnable.sol\n', '\n', '/**\n', ' * FEATURE 2): MultiOwnable implementation\n', ' * Transactions approved by _multiRequires of _multiOwners&#39; addresses will be executed. \n', '\n', ' * All functions needing unit-tests cannot be INTERNAL\n', ' */\n', 'contract MultiOwnable {\n', '\n', '    address[8] m_owners;\n', '    uint m_numOwners;\n', '    uint m_multiRequires;\n', '\n', '    mapping (bytes32 => uint) internal m_pendings;\n', '\n', '    event AcceptConfirm(bytes32 operation, address indexed who, uint confirmTotal);\n', '    \n', '    // constructor is given number of sigs required to do protected "multiOwner" transactions\n', '    function MultiOwnable (address[] _multiOwners, uint _multiRequires) public {\n', '        require(0 < _multiRequires && _multiRequires <= _multiOwners.length);\n', '        m_numOwners = _multiOwners.length;\n', '        require(m_numOwners <= 8);   // Bigger then 8 co-owners, not support !\n', '        for (uint i = 0; i < _multiOwners.length; ++i) {\n', '            m_owners[i] = _multiOwners[i];\n', '            require(m_owners[i] != address(0));\n', '        }\n', '        m_multiRequires = _multiRequires;\n', '    }\n', '\n', '    // Any one of the owners, will approve the action\n', '    modifier anyOwner {\n', '        if (isOwner(msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Requiring num > m_multiRequires owners, to approve the action\n', '    modifier mostOwner(bytes32 operation) {\n', '        if (checkAndConfirm(msg.sender, operation)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function isOwner(address currentUser) public view returns (bool) {\n', '        for (uint i = 0; i < m_numOwners; ++i) {\n', '            if (m_owners[i] == currentUser) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function checkAndConfirm(address currentUser, bytes32 operation) public returns (bool) {\n', '        uint ownerIndex = m_numOwners;\n', '        uint i;\n', '        for (i = 0; i < m_numOwners; ++i) {\n', '            if (m_owners[i] == currentUser) {\n', '                ownerIndex = i;\n', '            }\n', '        }\n', '        if (ownerIndex == m_numOwners) {\n', '            return false;  // Not Owner\n', '        }\n', '        \n', '        uint newBitFinger = (m_pendings[operation] | (2 ** ownerIndex));\n', '\n', '        uint confirmTotal = 0;\n', '        for (i = 0; i < m_numOwners; ++i) {\n', '            if ((newBitFinger & (2 ** i)) > 0) {\n', '                confirmTotal ++;\n', '            }\n', '        }\n', '        \n', '        AcceptConfirm(operation, currentUser, confirmTotal);\n', '\n', '        if (confirmTotal >= m_multiRequires) {\n', '            delete m_pendings[operation];\n', '            return true;\n', '        }\n', '        else {\n', '            m_pendings[operation] = newBitFinger;\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\Pausable.sol\n', '\n', '/**\n', ' * FEATURE 3): Pausable implementation\n', ' */\n', 'contract Pausable is MultiOwnable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool paused = false;\n', '\n', '    // Modifier to make a function callable only when the contract is not paused.\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    // Modifier to make a function callable only when the contract is paused.\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    // called by the owner to pause, triggers stopped state\n', '    function pause() mostOwner(keccak256(msg.data)) whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    // called by the owner to unpause, returns to normal state\n', '    function unpause() mostOwner(keccak256(msg.data)) whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '\n', '    function isPause() view public returns(bool) {\n', '        return paused;\n', '    }\n', '}\n', '\n', '// File: contracts\\SafeMath.sol\n', '\n', '/**\n', '* Standard SafeMath Library: zeppelin-solidity/contracts/math/SafeMath.sol\n', '*/\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts\\Convertible.sol\n', '\n', '/**\n', ' * Exchange all my ParcelX token to mainchain GPX\n', ' */\n', 'contract Convertible {\n', '\n', '    function convertMainchainGPX(string destinationAccount, string extra) external returns (bool);\n', '  \n', '    // ParcelX deamon program is monitoring this event. \n', '    // Once it triggered, ParcelX will transfer corresponding GPX to destination account\n', '    event Converted(address indexed who, string destinationAccount, uint256 amount, string extra);\n', '}\n', '\n', '// File: contracts\\ParcelXGPX.sol\n', '\n', '/**\n', ' * The main body of final smart contract \n', ' */\n', 'contract ParcelXGPX is ERC20, MultiOwnable, Pausable, Convertible {\n', '\n', '    using SafeMath for uint256;\n', '  \n', '    string public constant name = "ParcelX";\n', '    string public constant symbol = "GPX";\n', '    uint8 public constant decimals = 18;\n', '\n', '    // Japan - 25000 ETH * int(1 / 0.000268) = 93275000\n', '    uint256 public constant TOTAL_SUPPLY = uint256(93275000) * (uint256(10) ** decimals);\n', '    \n', '    address internal tokenPool = address(0);      // Use a token pool holding all GPX. Avoid using sender address.\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function ParcelXGPX(address[] _multiOwners, uint _multiRequires) \n', '        MultiOwnable(_multiOwners, _multiRequires) public {\n', '        require(tokenPool == address(0));\n', '        tokenPool = this;\n', '        require(tokenPool != address(0));\n', '        balances[tokenPool] = TOTAL_SUPPLY;\n', '    }\n', '\n', '    /**\n', '     * FEATURE 1): ERC20 implementation\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return TOTAL_SUPPLY;       \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '  }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * FEATURE 4): Buyable implements\n', '     * 0.000268 eth per GPX, so the rate is 1.0 / 0.000268 = 3731.3432835820895\n', '     */\n', '    uint256 internal buyRate = uint256(3731); \n', '    \n', '    event Deposit(address indexed who, uint256 value);\n', '    event Withdraw(address indexed who, uint256 value, address indexed lastApprover, string extra);\n', '        \n', '\n', '    function getBuyRate() external view returns (uint256) {\n', '        return buyRate;\n', '    }\n', '\n', '    function setBuyRate(uint256 newBuyRate) mostOwner(keccak256(msg.data)) external {\n', '        buyRate = newBuyRate;\n', '    }\n', '\n', '    /**\n', '     * FEATURE 4): Buyable\n', '     * minimum of 0.001 ether for purchase in the public, pre-ico, and private sale\n', '     */\n', '    function buy() payable whenNotPaused public returns (uint256) {\n', '        Deposit(msg.sender, msg.value);\n', '        require(msg.value >= 0.001 ether);\n', '\n', '        // Token compute & transfer\n', '        uint256 tokens = msg.value.mul(buyRate);\n', '        require(balances[tokenPool] >= tokens);\n', '        balances[tokenPool] = balances[tokenPool].sub(tokens);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        Transfer(tokenPool, msg.sender, tokens);\n', '        \n', '        return tokens;\n', '    }\n', '\n', '    // gets called when no other function matches\n', '    function () payable public {\n', '        if (msg.value > 0) {\n', '            buy();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * FEATURE 6): Budget control\n', '     * Malloc GPX for airdrops, marketing-events, bonus, etc \n', '     */\n', '    function mallocBudget(address _admin, uint256 _value) mostOwner(keccak256(msg.data)) external returns (bool) {\n', '        require(_admin != address(0));\n', '        require(_value <= balances[tokenPool]);\n', '\n', '        balances[tokenPool] = balances[tokenPool].sub(_value);\n', '        balances[_admin] = balances[_admin].add(_value);\n', '        Transfer(tokenPool, _admin, _value);\n', '        return true;\n', '    }\n', '    \n', '    function execute(address _to, uint256 _value, string _extra) mostOwner(keccak256(msg.data)) external returns (bool){\n', '        require(_to != address(0));\n', '        _to.transfer(_value);   // Prevent using call() or send()\n', '        Withdraw(_to, _value, msg.sender, _extra);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * FEATURE 5): &#39;Convertible&#39; implements\n', '     * Below actions would be performed after token being converted into mainchain:\n', '     * - KYC / AML\n', '     * - Unsold tokens are discarded.\n', '     * - Tokens sold with bonus will be locked for a period (see Whitepaper).\n', '     * - Token distribution for team will be locked for a period (see Whitepaper).\n', '     */\n', '    function convertMainchainGPX(string destinationAccount, string extra) external returns (bool) {\n', '        require(bytes(destinationAccount).length > 10 && bytes(destinationAccount).length < 1024);\n', '        require(balances[msg.sender] > 0);\n', '        uint256 amount = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '        balances[tokenPool] = balances[tokenPool].add(amount);   // return GPX to tokenPool - the init account\n', '        Converted(msg.sender, destinationAccount, amount, extra);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity 0.4.19;\n', '\n', '// File: contracts\\ERC20.sol\n', '\n', '/**\n', ' * Starndard ERC20 interface: https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '    /**\t\n', '    * @dev Fix for the ERC20 short address attack.\t\n', '    * Remove short address attack checks from tokens(https://github.com/OpenZeppelin/openzeppelin-solidity/issues/261)\n', '    */\t\n', '    modifier onlyPayloadSize(uint256 size) {\t\n', '        require(msg.data.length >= size + 4);\n', '        _;\t\n', '    }\n', '    \n', '}\n', '\n', '// File: contracts\\MultiOwnable.sol\n', '\n', '/**\n', ' * FEATURE 2): MultiOwnable implementation\n', " * Transactions approved by _multiRequires of _multiOwners' addresses will be executed. \n", '\n', ' * All functions needing unit-tests cannot be INTERNAL\n', ' */\n', 'contract MultiOwnable {\n', '\n', '    address[8] m_owners;\n', '    uint m_numOwners;\n', '    uint m_multiRequires;\n', '\n', '    mapping (bytes32 => uint) internal m_pendings;\n', '\n', '    event AcceptConfirm(bytes32 operation, address indexed who, uint confirmTotal);\n', '    \n', '    // constructor is given number of sigs required to do protected "multiOwner" transactions\n', '    function MultiOwnable (address[] _multiOwners, uint _multiRequires) public {\n', '        require(0 < _multiRequires && _multiRequires <= _multiOwners.length);\n', '        m_numOwners = _multiOwners.length;\n', '        require(m_numOwners <= 8);   // Bigger then 8 co-owners, not support !\n', '        for (uint i = 0; i < _multiOwners.length; ++i) {\n', '            m_owners[i] = _multiOwners[i];\n', '            require(m_owners[i] != address(0));\n', '        }\n', '        m_multiRequires = _multiRequires;\n', '    }\n', '\n', '    // Any one of the owners, will approve the action\n', '    modifier anyOwner {\n', '        if (isOwner(msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Requiring num > m_multiRequires owners, to approve the action\n', '    modifier mostOwner(bytes32 operation) {\n', '        if (checkAndConfirm(msg.sender, operation)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function isOwner(address currentUser) public view returns (bool) {\n', '        for (uint i = 0; i < m_numOwners; ++i) {\n', '            if (m_owners[i] == currentUser) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function checkAndConfirm(address currentUser, bytes32 operation) public returns (bool) {\n', '        uint ownerIndex = m_numOwners;\n', '        uint i;\n', '        for (i = 0; i < m_numOwners; ++i) {\n', '            if (m_owners[i] == currentUser) {\n', '                ownerIndex = i;\n', '            }\n', '        }\n', '        if (ownerIndex == m_numOwners) {\n', '            return false;  // Not Owner\n', '        }\n', '        \n', '        uint newBitFinger = (m_pendings[operation] | (2 ** ownerIndex));\n', '\n', '        uint confirmTotal = 0;\n', '        for (i = 0; i < m_numOwners; ++i) {\n', '            if ((newBitFinger & (2 ** i)) > 0) {\n', '                confirmTotal ++;\n', '            }\n', '        }\n', '        \n', '        AcceptConfirm(operation, currentUser, confirmTotal);\n', '\n', '        if (confirmTotal >= m_multiRequires) {\n', '            delete m_pendings[operation];\n', '            return true;\n', '        }\n', '        else {\n', '            m_pendings[operation] = newBitFinger;\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\Pausable.sol\n', '\n', '/**\n', ' * FEATURE 3): Pausable implementation\n', ' */\n', 'contract Pausable is MultiOwnable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool paused = false;\n', '\n', '    // Modifier to make a function callable only when the contract is not paused.\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    // Modifier to make a function callable only when the contract is paused.\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    // called by the owner to pause, triggers stopped state\n', '    function pause() mostOwner(keccak256(msg.data)) whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    // called by the owner to unpause, returns to normal state\n', '    function unpause() mostOwner(keccak256(msg.data)) whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '\n', '    function isPause() view public returns(bool) {\n', '        return paused;\n', '    }\n', '}\n', '\n', '// File: contracts\\SafeMath.sol\n', '\n', '/**\n', '* Standard SafeMath Library: zeppelin-solidity/contracts/math/SafeMath.sol\n', '*/\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts\\Convertible.sol\n', '\n', '/**\n', ' * Exchange all my ParcelX token to mainchain GPX\n', ' */\n', 'contract Convertible {\n', '\n', '    function convertMainchainGPX(string destinationAccount, string extra) external returns (bool);\n', '  \n', '    // ParcelX deamon program is monitoring this event. \n', '    // Once it triggered, ParcelX will transfer corresponding GPX to destination account\n', '    event Converted(address indexed who, string destinationAccount, uint256 amount, string extra);\n', '}\n', '\n', '// File: contracts\\ParcelXGPX.sol\n', '\n', '/**\n', ' * The main body of final smart contract \n', ' */\n', 'contract ParcelXGPX is ERC20, MultiOwnable, Pausable, Convertible {\n', '\n', '    using SafeMath for uint256;\n', '  \n', '    string public constant name = "ParcelX";\n', '    string public constant symbol = "GPX";\n', '    uint8 public constant decimals = 18;\n', '\n', '    // Japan - 25000 ETH * int(1 / 0.000268) = 93275000\n', '    uint256 public constant TOTAL_SUPPLY = uint256(93275000) * (uint256(10) ** decimals);\n', '    \n', '    address internal tokenPool = address(0);      // Use a token pool holding all GPX. Avoid using sender address.\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function ParcelXGPX(address[] _multiOwners, uint _multiRequires) \n', '        MultiOwnable(_multiOwners, _multiRequires) public {\n', '        require(tokenPool == address(0));\n', '        tokenPool = this;\n', '        require(tokenPool != address(0));\n', '        balances[tokenPool] = TOTAL_SUPPLY;\n', '    }\n', '\n', '    /**\n', '     * FEATURE 1): ERC20 implementation\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return TOTAL_SUPPLY;       \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '  }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * FEATURE 4): Buyable implements\n', '     * 0.000268 eth per GPX, so the rate is 1.0 / 0.000268 = 3731.3432835820895\n', '     */\n', '    uint256 internal buyRate = uint256(3731); \n', '    \n', '    event Deposit(address indexed who, uint256 value);\n', '    event Withdraw(address indexed who, uint256 value, address indexed lastApprover, string extra);\n', '        \n', '\n', '    function getBuyRate() external view returns (uint256) {\n', '        return buyRate;\n', '    }\n', '\n', '    function setBuyRate(uint256 newBuyRate) mostOwner(keccak256(msg.data)) external {\n', '        buyRate = newBuyRate;\n', '    }\n', '\n', '    /**\n', '     * FEATURE 4): Buyable\n', '     * minimum of 0.001 ether for purchase in the public, pre-ico, and private sale\n', '     */\n', '    function buy() payable whenNotPaused public returns (uint256) {\n', '        Deposit(msg.sender, msg.value);\n', '        require(msg.value >= 0.001 ether);\n', '\n', '        // Token compute & transfer\n', '        uint256 tokens = msg.value.mul(buyRate);\n', '        require(balances[tokenPool] >= tokens);\n', '        balances[tokenPool] = balances[tokenPool].sub(tokens);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        Transfer(tokenPool, msg.sender, tokens);\n', '        \n', '        return tokens;\n', '    }\n', '\n', '    // gets called when no other function matches\n', '    function () payable public {\n', '        if (msg.value > 0) {\n', '            buy();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * FEATURE 6): Budget control\n', '     * Malloc GPX for airdrops, marketing-events, bonus, etc \n', '     */\n', '    function mallocBudget(address _admin, uint256 _value) mostOwner(keccak256(msg.data)) external returns (bool) {\n', '        require(_admin != address(0));\n', '        require(_value <= balances[tokenPool]);\n', '\n', '        balances[tokenPool] = balances[tokenPool].sub(_value);\n', '        balances[_admin] = balances[_admin].add(_value);\n', '        Transfer(tokenPool, _admin, _value);\n', '        return true;\n', '    }\n', '    \n', '    function execute(address _to, uint256 _value, string _extra) mostOwner(keccak256(msg.data)) external returns (bool){\n', '        require(_to != address(0));\n', '        _to.transfer(_value);   // Prevent using call() or send()\n', '        Withdraw(_to, _value, msg.sender, _extra);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * FEATURE 5): 'Convertible' implements\n", '     * Below actions would be performed after token being converted into mainchain:\n', '     * - KYC / AML\n', '     * - Unsold tokens are discarded.\n', '     * - Tokens sold with bonus will be locked for a period (see Whitepaper).\n', '     * - Token distribution for team will be locked for a period (see Whitepaper).\n', '     */\n', '    function convertMainchainGPX(string destinationAccount, string extra) external returns (bool) {\n', '        require(bytes(destinationAccount).length > 10 && bytes(destinationAccount).length < 1024);\n', '        require(balances[msg.sender] > 0);\n', '        uint256 amount = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '        balances[tokenPool] = balances[tokenPool].add(amount);   // return GPX to tokenPool - the init account\n', '        Converted(msg.sender, destinationAccount, amount, extra);\n', '        return true;\n', '    }\n', '\n', '}']
