['pragma solidity ^0.4.19;\n', '\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) internal balances;\n', '    \n', '    /**\n', '    * Returns the balance of the qeuried address\n', '    *\n', '    * @param _who The address which is being qeuried\n', '    **/\n', '    function balanceOf(address _who) public view returns(uint256) {\n', '        return balances[_who];\n', '    }\n', '    \n', '    /**\n', '    * Allows for the transfer of MSTCOIN tokens from peer to peer. \n', '    *\n', '    * @param _to The address of the receiver\n', '    * @param _value The amount of tokens to send\n', '    **/\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        require(balances[msg.sender] >= _value && _value > 0 && _to != 0x0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant public returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public  returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '    \n', '    mapping (address => mapping (address => uint256)) internal allowances;\n', '    \n', '    /**\n', '    * Returns the amount of tokens one has allowed another to spend on his or her behalf.\n', '    *\n', '    * @param _owner The address which is the owner of the tokens\n', "    * @param _spender The address which has been allowed to spend tokens on the owner's\n", '    * behalf\n', '    **/\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '    * Allows for the transfer of tokens on the behalf of the owner given that the owner has\n', '    * allowed it previously. \n', '    *\n', '    * @param _from The address of the owner\n', '    * @param _to The address of the recipient \n', '    * @param _value The amount of tokens to be sent\n', '    **/\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\n', '        require(allowances[_from][msg.sender] >= _value && _to != 0x0 && balances[_from] >= _value && _value > 0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * Allows the owner of tokens to approve another to spend tokens on his or her behalf\n', '    *\n', "    * @param _spender The address which is being allowed to spend tokens on the owner' behalf\n", '    * @param _value The amount of tokens to be sent\n', '    **/\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_spender != 0x0 && _value > 0);\n', '        if(allowances[msg.sender][_spender] > 0 ) {\n', '            allowances[msg.sender][_spender] = 0;\n', '        }\n', '        allowances[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '     * The address whcih deploys this contrcat is automatically assgined ownership.\n', '     * */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Functions with this modifier can only be executed by the owner of the contract. \n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    /**\n', '    * Transfers ownership to new Ethereum address. This function can only be called by the \n', '    * owner.\n', '    * @param _newOwner the address to be granted ownership.\n', '    **/\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract BurnableToken is StandardToken, Ownable {\n', '    \n', '    event TokensBurned(address indexed burner, uint256 value);\n', '    \n', '    function burnFrom(address _from, uint256 _tokens) public onlyOwner {\n', '        if(balances[_from] < _tokens) {\n', '            TokensBurned(_from,balances[_from]);\n', '            balances[_from] = 0;\n', '            totalSupply = totalSupply.sub(balances[_from]);\n', '        } else {\n', '            balances[_from] = balances[_from].sub(_tokens);\n', '            totalSupply = totalSupply.sub(_tokens);\n', '            TokensBurned(_from, _tokens);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Mercury is BurnableToken {\n', '    \n', '    function Mercury() public {\n', '        name = "Mercury";\n', '        symbol = "MEC";\n', '        decimals = 18;\n', '        totalSupply = 2e28;\n', '        balances[owner] = totalSupply;\n', '        Transfer(address(this), owner, totalSupply);\n', '    }\n', '}']