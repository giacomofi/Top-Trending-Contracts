['pragma solidity ^0.4.18;\n', '\n', 'library SafeOpt {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0); \n', '        uint256 c = a / b;\n', '        assert(a == b * c);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a - b;\n', '        assert(b <= a);\n', '        assert(a == c + b);\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        assert(a == c - b);\n', '        return c;\n', '    }\n', '}\n', 'contract MHCTokenIssue {\n', '    uint256 public lastYearTotalSupply = 15 * 10 ** 26; \n', '    uint8   public affectedCount = 0;\n', '    bool    public initialYear = true; \n', '\taddress public tokenContractAddress;\n', '    uint16  public preRate = 1000; \n', '    uint256 public lastBlockNumber;\n', '\n', '    function MHCTokenIssue (address _tokenContractAddress) public{\n', '        tokenContractAddress = _tokenContractAddress;\n', '        lastBlockNumber = block.number;\n', '    }\n', '\n', '    function returnRate() internal returns (uint256){\n', '        if(affectedCount == 10){\n', '            if(preRate > 100){\n', '                preRate -= 100;\n', '            }\n', '            affectedCount = 0;\n', '        }\n', '        return SafeOpt.div(preRate, 10);\n', '    }\n', '\n', '    function issue() public  {\n', '        if(initialYear){\n', '            require(SafeOpt.sub(block.number, lastBlockNumber) > 2102400);\n', '            initialYear = false;\n', '        }\n', '        require(SafeOpt.sub(block.number, lastBlockNumber) > 2102400);\n', '        MHCToken tokenContract = MHCToken(tokenContractAddress);\n', '        if(affectedCount == 10){\n', '            lastYearTotalSupply = tokenContract.totalSupply();\n', '        }\n', '        uint256 amount = SafeOpt.div(SafeOpt.mul(lastYearTotalSupply, returnRate()), 10000);\n', '        require(amount > 0);\n', '        tokenContract.issue(amount);\n', '        lastBlockNumber = block.number;\n', '        affectedCount += 1;\n', '    }\n', '}\n', '\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', '\n', 'contract MHCToken {\n', '    string public name = &#39;MagicHerb Coin&#39;;\n', '    string public symbol = &#39;MHC&#39;;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 1000 * 10 ** 26;\n', '\n', '    address public issueContractAddress;\n', '    address public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event Issue(uint256 amount);\n', '\n', '    function MHCToken() public {\n', '        owner = msg.sender;\n', '        balanceOf[owner] = totalSupply;\n', '        issueContractAddress = new MHCTokenIssue(address(this));\n', '    }\n', '\n', '    function issue(uint256 amount) public {\n', '        require(msg.sender == issueContractAddress);\n', '        balanceOf[owner] = SafeOpt.add(balanceOf[owner], amount);\n', '        totalSupply = SafeOpt.add(totalSupply, amount);\n', '        Issue(amount);\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_value <= balanceOf[msg.sender]);\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeOpt {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b > 0); \n', '        uint256 c = a / b;\n', '        assert(a == b * c);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a - b;\n', '        assert(b <= a);\n', '        assert(a == c + b);\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        assert(a == c - b);\n', '        return c;\n', '    }\n', '}\n', 'contract MHCTokenIssue {\n', '    uint256 public lastYearTotalSupply = 15 * 10 ** 26; \n', '    uint8   public affectedCount = 0;\n', '    bool    public initialYear = true; \n', '\taddress public tokenContractAddress;\n', '    uint16  public preRate = 1000; \n', '    uint256 public lastBlockNumber;\n', '\n', '    function MHCTokenIssue (address _tokenContractAddress) public{\n', '        tokenContractAddress = _tokenContractAddress;\n', '        lastBlockNumber = block.number;\n', '    }\n', '\n', '    function returnRate() internal returns (uint256){\n', '        if(affectedCount == 10){\n', '            if(preRate > 100){\n', '                preRate -= 100;\n', '            }\n', '            affectedCount = 0;\n', '        }\n', '        return SafeOpt.div(preRate, 10);\n', '    }\n', '\n', '    function issue() public  {\n', '        if(initialYear){\n', '            require(SafeOpt.sub(block.number, lastBlockNumber) > 2102400);\n', '            initialYear = false;\n', '        }\n', '        require(SafeOpt.sub(block.number, lastBlockNumber) > 2102400);\n', '        MHCToken tokenContract = MHCToken(tokenContractAddress);\n', '        if(affectedCount == 10){\n', '            lastYearTotalSupply = tokenContract.totalSupply();\n', '        }\n', '        uint256 amount = SafeOpt.div(SafeOpt.mul(lastYearTotalSupply, returnRate()), 10000);\n', '        require(amount > 0);\n', '        tokenContract.issue(amount);\n', '        lastBlockNumber = block.number;\n', '        affectedCount += 1;\n', '    }\n', '}\n', '\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', '\n', 'contract MHCToken {\n', "    string public name = 'MagicHerb Coin';\n", "    string public symbol = 'MHC';\n", '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 1000 * 10 ** 26;\n', '\n', '    address public issueContractAddress;\n', '    address public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event Issue(uint256 amount);\n', '\n', '    function MHCToken() public {\n', '        owner = msg.sender;\n', '        balanceOf[owner] = totalSupply;\n', '        issueContractAddress = new MHCTokenIssue(address(this));\n', '    }\n', '\n', '    function issue(uint256 amount) public {\n', '        require(msg.sender == issueContractAddress);\n', '        balanceOf[owner] = SafeOpt.add(balanceOf[owner], amount);\n', '        totalSupply = SafeOpt.add(totalSupply, amount);\n', '        Issue(amount);\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_value <= balanceOf[msg.sender]);\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '        return allowance[_owner][_spender];\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '}']
