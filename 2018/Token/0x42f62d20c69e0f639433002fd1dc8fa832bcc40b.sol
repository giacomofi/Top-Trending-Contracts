['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract LANCCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  address public fundDepositAddress = 0xE700569B98D4BF25E05c64C96560f77bCD44565E;\n', '\n', '  uint256 public currentPeriod = 0;\n', '  bool public isFinalized = false;\n', '  // 0 = Not Started\n', '  // 1 = PrePresale\n', '  // 2 = Presale\n', '  // 3 = Round 1\n', '  // 4 = Round 2\n', '  // 5 = Finished\n', '\n', '  mapping (uint256 => uint256) public rateMap;\n', '  mapping (address => uint256) powerDayAddressLimits;\n', '\n', '  uint256 public powerDayRate; \n', '  uint256 public powerDayEthPerPerson = 10;\n', '  uint256 public presaleStartTime;\n', '  uint256 public powerDayEndTime;\n', '\n', '  uint256 public constant capPresale =  57 * (10**5) * 10**18;\n', '  uint256 public constant capRound1 =  (288 * (10**5) * 10**18);\n', '  uint256 public constant capRound2 =  (484 * (10**5) * 10**18);\n', '\n', '  uint256 public rate = 0; // LANC per ETH\n', '\n', '  // The token being sold\n', '  LANCToken public token;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function LANCCrowdsale() public {\n', '    \n', '    // Initilize with rates.\n', '\n', '    rateMap[1] = 2100; // PrePresale rate\n', '    powerDayRate = 2000; // Powerday rate in presale.\n', '    rateMap[2] = 1900;  // Presale rate\n', '    rateMap[3] = 1650;  // Round 1 rate\n', '    rateMap[4] = 1400;  // Round 2 rate\n', '    rateMap[5] = 0; \n', '  }\n', '\n', '  function setTokenContract(address _token) public onlyOwner {\n', '        require(_token != address(0) && token == address(0));\n', '        require(LANCToken(_token).owner() == address(this));\n', '        require(LANCToken(_token).totalSupply() == 0);\n', '        require(!LANCToken(_token).mintingFinished());\n', '\n', '        token = LANCToken(_token);\n', '   }\n', '\n', '   function mint(address _to, uint256 _amount) public onlyOwner {\n', '       require(token != address(0));\n', '       require(!LANCToken(token).mintingFinished());\n', '       require(LANCToken(token).owner() == address(this));\n', '\n', '       token.mint(_to, _amount);\n', '   }\n', '\n', '   // Backup function in case of ETH price fluctuations\n', '\n', '  function updateRates(uint256 rateIdx, uint256 newRate) public onlyOwner {\n', '    require(rateIdx > 0 && rateIdx < 5);\n', '    require(newRate > 0);\n', '\n', '    rateMap[rateIdx] = newRate;\n', '\n', '    if (rateIdx == currentPeriod) {\n', '      rate = newRate;\n', '    }\n', '  }\n', '\n', '  function updatePowerDayRate(uint256 newRate) public onlyOwner {\n', '      powerDayRate = newRate;\n', '  }\n', '\n', '  function switchSaleState() public onlyOwner {\n', '    require(token != address(0));\n', '\n', '    if (currentPeriod > 4) {\n', '      revert(); // Finished, last state is 4\n', '    }\n', '\n', '    currentPeriod = currentPeriod + 1;\n', '\n', '    if (currentPeriod == 2) {\n', '      presaleStartTime = now;\n', '      powerDayEndTime = (presaleStartTime + 1 days);\n', '    }\n', '\n', '    rate = rateMap[currentPeriod];\n', '  }\n', '\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(token != address(0));\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 currentRate = rate;\n', '    uint256 tokens;\n', '    bool inPowerDay = saleInPowerDay();\n', '\n', '    // calculate token amount to be created   \n', '    \n', '    // Assign power day rate if in power day.\n', '    if (inPowerDay == true) {\n', '      tokens = weiAmount.mul(powerDayRate);      \n', '    } else {\n', '      tokens = weiAmount.mul(currentRate);      \n', '    }\n', '    \n', '    // calculate supply after potential token mint\n', '    uint256 checkedSupply = token.totalSupply().add(tokens);\n', '    require(willFitInCap(checkedSupply));\n', '    // check if new supply fits within current cap.\n', '\n', '    if (inPowerDay == true) {\n', '      uint256 newWeiAmountPerSender = powerDayAddressLimits[msg.sender].add(weiAmount);\n', '\n', '      // Check if the person has reached their power day limit.\n', '      if (newWeiAmountPerSender > powerDayPerPersonCapInWei()) {\n', '        revert();\n', '      } else {\n', '        powerDayAddressLimits[msg.sender] = newWeiAmountPerSender;\n', '      }\n', '    }\n', '\n', "    // Generate the tokens by using MintableToken's mint method.\n", '    \n', '    token.mint(beneficiary, tokens);\n', '\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  function saleInPowerDay() internal view returns (bool) {\n', '    bool inPresale = (currentPeriod == 2);\n', '    bool inPowerDayPeriod = (now >= presaleStartTime && now <= powerDayEndTime);\n', '\n', '    return inPresale && inPowerDayPeriod;\n', '  }\n', '\n', '  function powerDayPerPersonCapInWei() public view returns (uint) {\n', '    require(token != address(0));\n', '      // Calculate per-person cap in wei during power day.\n', '\n', '    return powerDayEthPerPerson * (10**token.decimals()); \n', '  }\n', '  \n', '\n', '  function willFitInCap(uint256 checkedSupply) internal view returns (bool) {\n', '    if (currentPeriod == 1 || currentPeriod == 2) {\n', '      return (checkedSupply <= capPresale);\n', '    } else if (currentPeriod == 3) {\n', '      return (checkedSupply <= capRound1);\n', '    } else if (currentPeriod == 4) {\n', '      return (checkedSupply <= capRound2);\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool tokenAssigned = (token != address(0));\n', '    bool inStartedState = (currentPeriod > 0 && currentPeriod < 5);\n', '    bool nonZeroPurchase = msg.value != 0;\n', '\n', '    return tokenAssigned && inStartedState && nonZeroPurchase && !isFinalized;\n', '  }\n', '\n', '  // Finalize the sale and calculate final token supply and distribute amounts.\n', '  function finalizeSale() public onlyOwner {\n', '    if (isFinalized == true) {\n', '      revert();\n', '    }\n', '\n', '    uint newTokens = token.totalSupply();\n', '\n', '    // Raise the remaining amounts\n', '    token.mint(fundDepositAddress, newTokens);\n', '\n', '    token.finishMinting();\n', '    token.transferOwnership(owner);\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return currentPeriod > 4;\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    fundDepositAddress.transfer(msg.value);\n', '  }\n', '\n', '  function powerDayRemainingLimitOf(address _owner) public view returns (uint256 balance) {\n', '    return powerDayAddressLimits[_owner];\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract LANCToken is MintableToken {\n', '\n', '  string public name = "LanceChain Token";\n', '  string public symbol = "LANC";\n', '  uint public decimals = 18;\n', '  \n', '}']