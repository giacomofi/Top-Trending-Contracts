['pragma solidity 0.4.23;\n', '\n', '// Implements the ERC20 standard contract\n', 'contract ERC20Standard \n', '{\n', '    // #region Fields\n', '    \n', '    // The total token supply\n', '    uint256 internal totalSupply_;\n', '    \n', '    // This creates a dictionary with all the balances\n', '    mapping (address => uint256) internal balances;\n', '    \n', '    // This creates a dictionary with allowances\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    // #endregion\n', '    \n', '    // #region Events\n', '    \n', '    // Public events on the blockchain that will notify clients\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    // #endregion\n', '    \n', '    // #region Public methods\n', '    \n', '    /// @return Total number of tokens in existence\n', '    function totalSupply() public view returns (uint256) \n', '    {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    /// @dev Gets the balance of the specified address\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance of the account with address _owner\n', '    function balanceOf(address _owner) public view returns (uint256) \n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @dev Transfers _value amount of tokens to address _to\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool) \n', '    {\n', '        require(msg.data.length >= 68);                   // Guard against short address\n', '        require(_to != 0x0);                              // Prevent transfer to 0x0 address\n', '        require(balances[msg.sender] >= _value);          // Check if the sender has enough tokens\n', '        require(balances[_to] + _value >= balances[_to]); // Check for overflows\n', '        \n', '        // Update balance\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        \n', '        // Raise the event\n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /// @dev Transfers _value amount of tokens from address _from to address _to\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n', '    {\n', '        require(msg.data.length >= 68);                   // Guard against short address\n', '        require(_to != 0x0);                              // Prevent transfer to 0x0 address\n', '        require(balances[_from] >= _value);               // Check if the sender has enough tokens\n', '        require(balances[_to] + _value >= balances[_to]); // Check for overflows\n', '        require(allowed[_from][msg.sender] >= _value);    // Check allowance\n', '        \n', '        // Update balance\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        \n', '        // Raise the event\n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /// Sets allowance for another address, i.e. allows _spender to spend _value tokens on behalf of msg.sender.\n', '    /// ERC20 standard at https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md recommends not implementing \n', '    /// checks for the approval double-spend attack, as this should be implemented in user interfaces.\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool) \n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        \n', '        // Raise the event\n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spend\n', '    function allowance(address _owner, address _spender) public view returns (uint256) \n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    // #endregion\n', '}\n', '\n', '// Token that is ERC20 compliant\n', 'contract BinvToken is ERC20Standard \n', '{\n', '    // #region Constants\n', '    \n', '    string public constant name = "BINV";              \n', '    string public constant symbol = "BINV";            \n', '    uint256 public constant initialSupply = 100000000;\n', '    uint8 public constant decimals = 18;               \n', '    \n', '    // #endregion\n', '    \n', '    // #region Getters\n', '    \n', '    address public owner;                     \n', '    address public contractAddress;            \n', '    bool public payableEnabled = false;        \n', '    uint256 public payableWeiReceived = 0;    \n', '    uint256 public payableFinneyReceived = 0;  \n', '    uint256 public payableEtherReceived = 0;       \n', '    uint256 public milliTokensPaid = 0;        \n', '    uint256 public milliTokensSent = 0;        \n', '    \n', '    uint256 public tokensPerEther = 10000;     \n', '    uint256 public hardCapInEther = 7000;      \n', '    uint256 public maxPaymentInEther = 50; \n', '    \n', '    // #endregion\n', '    \n', '    // #region Constructors\n', '    \n', '    /// @dev Constructor\n', '    constructor() public\n', '    {\n', '        totalSupply_ = initialSupply * (10 ** uint256(decimals));  \n', '        balances[msg.sender] = totalSupply_;                      \n', '        \n', '        owner = msg.sender;              \n', '        contractAddress = address(this); \n', '    }\n', '    \n', '    // #endregion\n', '    \n', '    // #region Public methods\n', '    \n', '    /// @dev payable\n', '    function() payable public\n', '    {\n', '        require(payableEnabled);\n', '        require(msg.sender != 0x0);\n', '     \n', '        require(maxPaymentInEther > uint256(msg.value / (10 ** 18)));\n', '        require(hardCapInEther > payableEtherReceived);\n', '        \n', '        uint256 actualTokensPerEther = getActualTokensPerEther();\n', '        uint256 tokensAmount = msg.value * actualTokensPerEther;\n', '        \n', '        require(balances[owner] >= tokensAmount);\n', '        \n', '        balances[owner] -= tokensAmount;\n', '        balances[msg.sender] += tokensAmount;\n', '\n', '        payableWeiReceived += msg.value;  \n', '        payableFinneyReceived = uint256(payableWeiReceived / (10 ** 15));\n', '        payableEtherReceived = uint256(payableWeiReceived / (10 ** 18));\n', '        milliTokensPaid += uint256(tokensAmount / (10 ** uint256(decimals - 3)));\n', '\n', '        emit Transfer(owner, msg.sender, tokensAmount); \n', '               \n', '        owner.transfer(msg.value); \n', '    }\n', '    \n', '    /// @dev getOwnerBalance\n', '    function getOwnerBalance() public view returns (uint256)\n', '    {\n', '        return balances[owner];\n', '    }\n', '    \n', '    /// @dev getOwnerBalanceInMilliTokens\n', '    function getOwnerBalanceInMilliTokens() public view returns (uint256)\n', '    {\n', '        return uint256(balances[owner] / (10 ** uint256(decimals - 3)));\n', '    }\n', '        \n', '    /// @dev getActualTokensPerEther\n', '    function getActualTokensPerEther() public view returns (uint256)\n', '    {\n', '       uint256 etherReceived = payableEtherReceived;\n', '       \n', '       uint256 bonusPercent = 0;\n', '       if(etherReceived < 1000)\n', '           bonusPercent = 16;\n', '       else if(etherReceived < 2200)\n', '           bonusPercent = 12; \n', '       else if(etherReceived < 3600)\n', '           bonusPercent = 8; \n', '       else if(etherReceived < 5200)\n', '           bonusPercent = 4; \n', '       \n', '       uint256 actualTokensPerEther = tokensPerEther * (100 + bonusPercent) / 100;\n', '       return actualTokensPerEther;\n', '    }\n', '    \n', '    /// @dev setTokensPerEther\n', '    function setTokensPerEther(uint256 amount) public returns (bool)\n', '    {\n', '       require(msg.sender == owner); \n', '       require(amount > 0);\n', '       tokensPerEther = amount;\n', '       \n', '       return true;\n', '    }\n', '    \n', '    /// @dev setHardCapInEther\n', '    function setHardCapInEther(uint256 amount) public returns (bool)\n', '    {\n', '       require(msg.sender == owner); \n', '       require(amount > 0);\n', '       hardCapInEther = amount;\n', '       \n', '       return true;\n', '    }\n', '    \n', '    /// @dev setMaxPaymentInEther\n', '    function setMaxPaymentInEther(uint256 amount) public returns (bool)\n', '    {\n', '       require(msg.sender == owner); \n', '       require(amount > 0);\n', '       maxPaymentInEther = amount;\n', '       \n', '       return true;\n', '    }\n', '    \n', '    /// @dev enablePayable\n', '    function enablePayable() public returns (bool)\n', '    {\n', '       require(msg.sender == owner); \n', '       payableEnabled = true;\n', '       \n', '       return true;\n', '    }\n', '    \n', '    /// @dev disablePayable\n', '    function disablePayable() public returns (bool)\n', '    {\n', '       require(msg.sender == owner); \n', '       payableEnabled = false;\n', '       \n', '       return true;\n', '    }\n', '    \n', '    /// @dev sendTokens\n', '    function sendTokens(uint256 milliTokensAmount, address destination) public returns (bool) \n', '    {\n', '        require(msg.sender == owner); \n', '        \n', '        uint256 tokensAmount = milliTokensAmount * (10 ** uint256(decimals - 3));\n', '        \n', '        require(balances[owner] >= tokensAmount);\n', '\n', '        balances[owner] -= tokensAmount;\n', '        balances[destination] += tokensAmount;\n', '        \n', '        milliTokensSent += milliTokensAmount;\n', '\n', '        emit Transfer(owner, destination, tokensAmount);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // #endregion\n', '}']
['pragma solidity 0.4.23;\n', '\n', '// Implements the ERC20 standard contract\n', 'contract ERC20Standard \n', '{\n', '    // #region Fields\n', '    \n', '    // The total token supply\n', '    uint256 internal totalSupply_;\n', '    \n', '    // This creates a dictionary with all the balances\n', '    mapping (address => uint256) internal balances;\n', '    \n', '    // This creates a dictionary with allowances\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    // #endregion\n', '    \n', '    // #region Events\n', '    \n', '    // Public events on the blockchain that will notify clients\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    // #endregion\n', '    \n', '    // #region Public methods\n', '    \n', '    /// @return Total number of tokens in existence\n', '    function totalSupply() public view returns (uint256) \n', '    {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    /// @dev Gets the balance of the specified address\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance of the account with address _owner\n', '    function balanceOf(address _owner) public view returns (uint256) \n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @dev Transfers _value amount of tokens to address _to\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool) \n', '    {\n', '        require(msg.data.length >= 68);                   // Guard against short address\n', '        require(_to != 0x0);                              // Prevent transfer to 0x0 address\n', '        require(balances[msg.sender] >= _value);          // Check if the sender has enough tokens\n', '        require(balances[_to] + _value >= balances[_to]); // Check for overflows\n', '        \n', '        // Update balance\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        \n', '        // Raise the event\n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /// @dev Transfers _value amount of tokens from address _from to address _to\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) \n', '    {\n', '        require(msg.data.length >= 68);                   // Guard against short address\n', '        require(_to != 0x0);                              // Prevent transfer to 0x0 address\n', '        require(balances[_from] >= _value);               // Check if the sender has enough tokens\n', '        require(balances[_to] + _value >= balances[_to]); // Check for overflows\n', '        require(allowed[_from][msg.sender] >= _value);    // Check allowance\n', '        \n', '        // Update balance\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        \n', '        // Raise the event\n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /// Sets allowance for another address, i.e. allows _spender to spend _value tokens on behalf of msg.sender.\n', '    /// ERC20 standard at https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md recommends not implementing \n', '    /// checks for the approval double-spend attack, as this should be implemented in user interfaces.\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool) \n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        \n', '        // Raise the event\n', '        emit Approval(msg.sender, _spender, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spend\n', '    function allowance(address _owner, address _spender) public view returns (uint256) \n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    // #endregion\n', '}\n', '\n', '// Token that is ERC20 compliant\n', 'contract BinvToken is ERC20Standard \n', '{\n', '    // #region Constants\n', '    \n', '    string public constant name = "BINV";              \n', '    string public constant symbol = "BINV";            \n', '    uint256 public constant initialSupply = 100000000;\n', '    uint8 public constant decimals = 18;               \n', '    \n', '    // #endregion\n', '    \n', '    // #region Getters\n', '    \n', '    address public owner;                     \n', '    address public contractAddress;            \n', '    bool public payableEnabled = false;        \n', '    uint256 public payableWeiReceived = 0;    \n', '    uint256 public payableFinneyReceived = 0;  \n', '    uint256 public payableEtherReceived = 0;       \n', '    uint256 public milliTokensPaid = 0;        \n', '    uint256 public milliTokensSent = 0;        \n', '    \n', '    uint256 public tokensPerEther = 10000;     \n', '    uint256 public hardCapInEther = 7000;      \n', '    uint256 public maxPaymentInEther = 50; \n', '    \n', '    // #endregion\n', '    \n', '    // #region Constructors\n', '    \n', '    /// @dev Constructor\n', '    constructor() public\n', '    {\n', '        totalSupply_ = initialSupply * (10 ** uint256(decimals));  \n', '        balances[msg.sender] = totalSupply_;                      \n', '        \n', '        owner = msg.sender;              \n', '        contractAddress = address(this); \n', '    }\n', '    \n', '    // #endregion\n', '    \n', '    // #region Public methods\n', '    \n', '    /// @dev payable\n', '    function() payable public\n', '    {\n', '        require(payableEnabled);\n', '        require(msg.sender != 0x0);\n', '     \n', '        require(maxPaymentInEther > uint256(msg.value / (10 ** 18)));\n', '        require(hardCapInEther > payableEtherReceived);\n', '        \n', '        uint256 actualTokensPerEther = getActualTokensPerEther();\n', '        uint256 tokensAmount = msg.value * actualTokensPerEther;\n', '        \n', '        require(balances[owner] >= tokensAmount);\n', '        \n', '        balances[owner] -= tokensAmount;\n', '        balances[msg.sender] += tokensAmount;\n', '\n', '        payableWeiReceived += msg.value;  \n', '        payableFinneyReceived = uint256(payableWeiReceived / (10 ** 15));\n', '        payableEtherReceived = uint256(payableWeiReceived / (10 ** 18));\n', '        milliTokensPaid += uint256(tokensAmount / (10 ** uint256(decimals - 3)));\n', '\n', '        emit Transfer(owner, msg.sender, tokensAmount); \n', '               \n', '        owner.transfer(msg.value); \n', '    }\n', '    \n', '    /// @dev getOwnerBalance\n', '    function getOwnerBalance() public view returns (uint256)\n', '    {\n', '        return balances[owner];\n', '    }\n', '    \n', '    /// @dev getOwnerBalanceInMilliTokens\n', '    function getOwnerBalanceInMilliTokens() public view returns (uint256)\n', '    {\n', '        return uint256(balances[owner] / (10 ** uint256(decimals - 3)));\n', '    }\n', '        \n', '    /// @dev getActualTokensPerEther\n', '    function getActualTokensPerEther() public view returns (uint256)\n', '    {\n', '       uint256 etherReceived = payableEtherReceived;\n', '       \n', '       uint256 bonusPercent = 0;\n', '       if(etherReceived < 1000)\n', '           bonusPercent = 16;\n', '       else if(etherReceived < 2200)\n', '           bonusPercent = 12; \n', '       else if(etherReceived < 3600)\n', '           bonusPercent = 8; \n', '       else if(etherReceived < 5200)\n', '           bonusPercent = 4; \n', '       \n', '       uint256 actualTokensPerEther = tokensPerEther * (100 + bonusPercent) / 100;\n', '       return actualTokensPerEther;\n', '    }\n', '    \n', '    /// @dev setTokensPerEther\n', '    function setTokensPerEther(uint256 amount) public returns (bool)\n', '    {\n', '       require(msg.sender == owner); \n', '       require(amount > 0);\n', '       tokensPerEther = amount;\n', '       \n', '       return true;\n', '    }\n', '    \n', '    /// @dev setHardCapInEther\n', '    function setHardCapInEther(uint256 amount) public returns (bool)\n', '    {\n', '       require(msg.sender == owner); \n', '       require(amount > 0);\n', '       hardCapInEther = amount;\n', '       \n', '       return true;\n', '    }\n', '    \n', '    /// @dev setMaxPaymentInEther\n', '    function setMaxPaymentInEther(uint256 amount) public returns (bool)\n', '    {\n', '       require(msg.sender == owner); \n', '       require(amount > 0);\n', '       maxPaymentInEther = amount;\n', '       \n', '       return true;\n', '    }\n', '    \n', '    /// @dev enablePayable\n', '    function enablePayable() public returns (bool)\n', '    {\n', '       require(msg.sender == owner); \n', '       payableEnabled = true;\n', '       \n', '       return true;\n', '    }\n', '    \n', '    /// @dev disablePayable\n', '    function disablePayable() public returns (bool)\n', '    {\n', '       require(msg.sender == owner); \n', '       payableEnabled = false;\n', '       \n', '       return true;\n', '    }\n', '    \n', '    /// @dev sendTokens\n', '    function sendTokens(uint256 milliTokensAmount, address destination) public returns (bool) \n', '    {\n', '        require(msg.sender == owner); \n', '        \n', '        uint256 tokensAmount = milliTokensAmount * (10 ** uint256(decimals - 3));\n', '        \n', '        require(balances[owner] >= tokensAmount);\n', '\n', '        balances[owner] -= tokensAmount;\n', '        balances[destination] += tokensAmount;\n', '        \n', '        milliTokensSent += milliTokensAmount;\n', '\n', '        emit Transfer(owner, destination, tokensAmount);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // #endregion\n', '}']
