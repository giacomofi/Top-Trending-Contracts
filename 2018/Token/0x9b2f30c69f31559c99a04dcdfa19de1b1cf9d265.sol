['/**\n', ' *\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2018, TOPEX Developers & OpenZeppelin Project.\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' *\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract Destructible is Ownable {\n', '\n', '  constructor() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /*\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract TPXToken is MintableToken, Destructible {\n', '\n', '  string  public name = &#39;TOPEX Token&#39;;\n', '  string  public symbol = &#39;TPX&#39;;\n', '  uint8   public decimals = 18;\n', '  uint256 public maxSupply = 200000000 ether;    // max allowable minting.\n', '  bool    public transferDisabled = true;         // disable transfer init.\n', '\n', '  event Confiscate(address indexed offender, uint256 value);\n', '\n', '  // empty constructor\n', '  constructor() public {}\n', '\n', '  /*\n', '   * the real reason for quarantined addresses are for those who are\n', '   * mistakenly sent the TPX tokens to the wrong address. We can disable\n', '   * the usage of the TPX tokens here.\n', '   */\n', '  mapping(address => bool) quarantined;           // quarantined addresses\n', '  mapping(address => bool) gratuity;              // locked addresses for owners\n', '\n', '  modifier canTransfer() {\n', '    if (msg.sender == owner) {\n', '      _;\n', '    } else {\n', '      require(!transferDisabled);\n', '      require(quarantined[msg.sender] == false);  // default bool is false\n', '      require(gratuity[msg.sender] == false);     // default bool is false\n', '      _;\n', '    }\n', '  }\n', '\n', '  /*\n', '   * Allow the transfer of tokens to happen once ICO finished\n', '   */\n', '  function allowTransfers() onlyOwner public returns (bool) {\n', '    transferDisabled = false;\n', '    return true;\n', '  }\n', '\n', '  function disallowTransfers() onlyOwner public returns (bool) {\n', '    transferDisabled = true;\n', '    return true;\n', '  }\n', '\n', '  function quarantineAddress(address _addr) onlyOwner public returns (bool) {\n', '    quarantined[_addr] = true;\n', '    return true;\n', '  }\n', '\n', '  function unQuarantineAddress(address _addr) onlyOwner public returns (bool) {\n', '    quarantined[_addr] = false;\n', '    return true;\n', '  }\n', '\n', '  function lockAddress(address _addr) onlyOwner public returns (bool) {\n', '    gratuity[_addr] = true;\n', '    return true;\n', '  }\n', '\n', '  function unlockAddress(address _addr) onlyOwner public returns (bool) {\n', '    gratuity[_addr] = false;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * This is confiscate the money that is sent to the wrong address accidentally.\n', '   * the confiscated value can then be transferred to the righful owner. This is\n', '   * especially important during ICO where some are *still* using Exchanger wallet\n', '   * address, instead of their personal address.\n', '   */\n', '  function confiscate(address _offender) onlyOwner public returns (bool) {\n', '    uint256 all = balances[_offender];\n', '    require(all > 0);\n', '    \n', '    balances[_offender] = balances[_offender].sub(all);\n', '    balances[msg.sender] = balances[msg.sender].add(all);\n', '    emit Confiscate(_offender, all);\n', '    return true;\n', '  }\n', '\n', '  /*\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply <= maxSupply);\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) canTransfer public returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) canTransfer public returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * The TPXCrowdsale contract.\n', ' * The token is based on ERC20 Standard token, with ERC23 functionality to reclaim\n', ' * other tokens accidentally sent to this contract, as well as to destroy\n', ' * this contract once the ICO has ended.\n', ' */\n', 'contract TPXCrowdsale is CanReclaimToken, Destructible {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold \n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime = 0;\n', '  uint256 public endTime = 0;\n', '\n', '  // address where funds are collected\n', '  address public wallet = address(0);\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised = 0;\n', '\n', '  // cap for crowdsale\n', '  uint256 public cap = 20000 ether;\n', '\n', '  // whitelist backers\n', '  mapping(address => bool) whiteList;\n', '\n', '  // addmin list\n', '  mapping(address => bool) adminList;\n', '\n', '  // mappig of our days, and rates.\n', '  mapping(uint8 => uint256) daysRates;\n', '\n', '  modifier onlyAdmin() { \n', '    require(adminList[msg.sender] == true || msg.sender == owner);\n', '    _; \n', '  }\n', '  \n', '  /**\n', '   * eurchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, \n', '                      uint256 value, uint256 amount);\n', '\n', '  constructor(MintableToken _token) public {\n', '\n', '    // Token contract address to enter \n', '    token = _token;\n', '    startTime = 1532952000; \n', '    endTime = startTime + 79 days;\n', '    // TPX Owner wallet address\n', '    wallet = 0x44f43463C5663C515cD1c3e53B226C335e41D970;\n', '\n', '    // set the days lapsed, and rates(tokens per ETH) for the period since startTime.\n', '    daysRates[51] = 7000;\n', '    // 40% bonus 45 days - private sale for whitelisted only!\n', '    daysRates[58] = 6500;\n', '    // 30% bonus first week of ICO -  public crowdsale\n', '    daysRates[65] = 6000;\n', '    // 20% bonus second week of ICO -  public crowdsale\n', '    daysRates[72] = 5500;\n', '    // 10% bonus third week of ICO -  public crowdsale\n', '    daysRates[79] = 5000;\n', '    // 0% bonus fourth week of ICO -  public crowdsale\n', '  }\n', '\n', '  function setTokenOwner (address _newOwner) public onlyOwner {\n', '    token.transferOwnership(_newOwner);\n', '  }\n', '\n', '  function addWhiteList (address _backer) public onlyAdmin returns (bool res) {\n', '    whiteList[_backer] = true;\n', '    return true;\n', '  }\n', '  \n', '  function addAdmin (address _admin) onlyAdmin public returns (bool res) {\n', '    adminList[_admin] = true;\n', '    return true;\n', '  }\n', '\n', '  function isWhiteListed (address _backer) public view returns (bool res) {\n', '    return whiteList[_backer];\n', '  }\n', '\n', '  function isAdmin (address _admin) public view returns (bool res) {\n', '    return adminList[_admin];\n', '  }\n', '  \n', '  function totalRaised() public view returns (uint256) {\n', '    return weiRaised;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(getRate());\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    if (tokens > 0) {\n', '      token.mint(beneficiary, tokens);\n', '      emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);      \n', '    }\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    // 73 days of sale.\n', '    bool withinPeriod = (now >= startTime && now <= endTime) || msg.sender == owner;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return withinPeriod && nonZeroPurchase && withinCap;\n', '  }\n', '\n', '  function getRate() internal view returns (uint256 rate) {\n', '    uint256 diff = (now - startTime);\n', '\n', '    if (diff <= 51 days) {\n', '      require(whiteList[msg.sender] == true);\n', '      return daysRates[51];\n', '    } else if (diff > 51 && diff <= 58 days) {\n', '      return daysRates[58];\n', '    } else if (diff > 58 && diff <= 65 days) {\n', '      return daysRates[65];\n', '    } else if (diff > 65 && diff <= 72 days) {\n', '      return daysRates[72];\n', '    } else if (diff <= 79 days) {\n', '      return daysRates[79];\n', '    } \n', '    return 0;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return now > endTime || capReached;\n', '  }\n', '}']
['/**\n', ' *\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2018, TOPEX Developers & OpenZeppelin Project.\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' *\n', ' */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract Destructible is Ownable {\n', '\n', '  constructor() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /*\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract TPXToken is MintableToken, Destructible {\n', '\n', "  string  public name = 'TOPEX Token';\n", "  string  public symbol = 'TPX';\n", '  uint8   public decimals = 18;\n', '  uint256 public maxSupply = 200000000 ether;    // max allowable minting.\n', '  bool    public transferDisabled = true;         // disable transfer init.\n', '\n', '  event Confiscate(address indexed offender, uint256 value);\n', '\n', '  // empty constructor\n', '  constructor() public {}\n', '\n', '  /*\n', '   * the real reason for quarantined addresses are for those who are\n', '   * mistakenly sent the TPX tokens to the wrong address. We can disable\n', '   * the usage of the TPX tokens here.\n', '   */\n', '  mapping(address => bool) quarantined;           // quarantined addresses\n', '  mapping(address => bool) gratuity;              // locked addresses for owners\n', '\n', '  modifier canTransfer() {\n', '    if (msg.sender == owner) {\n', '      _;\n', '    } else {\n', '      require(!transferDisabled);\n', '      require(quarantined[msg.sender] == false);  // default bool is false\n', '      require(gratuity[msg.sender] == false);     // default bool is false\n', '      _;\n', '    }\n', '  }\n', '\n', '  /*\n', '   * Allow the transfer of tokens to happen once ICO finished\n', '   */\n', '  function allowTransfers() onlyOwner public returns (bool) {\n', '    transferDisabled = false;\n', '    return true;\n', '  }\n', '\n', '  function disallowTransfers() onlyOwner public returns (bool) {\n', '    transferDisabled = true;\n', '    return true;\n', '  }\n', '\n', '  function quarantineAddress(address _addr) onlyOwner public returns (bool) {\n', '    quarantined[_addr] = true;\n', '    return true;\n', '  }\n', '\n', '  function unQuarantineAddress(address _addr) onlyOwner public returns (bool) {\n', '    quarantined[_addr] = false;\n', '    return true;\n', '  }\n', '\n', '  function lockAddress(address _addr) onlyOwner public returns (bool) {\n', '    gratuity[_addr] = true;\n', '    return true;\n', '  }\n', '\n', '  function unlockAddress(address _addr) onlyOwner public returns (bool) {\n', '    gratuity[_addr] = false;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * This is confiscate the money that is sent to the wrong address accidentally.\n', '   * the confiscated value can then be transferred to the righful owner. This is\n', '   * especially important during ICO where some are *still* using Exchanger wallet\n', '   * address, instead of their personal address.\n', '   */\n', '  function confiscate(address _offender) onlyOwner public returns (bool) {\n', '    uint256 all = balances[_offender];\n', '    require(all > 0);\n', '    \n', '    balances[_offender] = balances[_offender].sub(all);\n', '    balances[msg.sender] = balances[msg.sender].add(all);\n', '    emit Confiscate(_offender, all);\n', '    return true;\n', '  }\n', '\n', '  /*\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply <= maxSupply);\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) canTransfer public returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) canTransfer public returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * The TPXCrowdsale contract.\n', ' * The token is based on ERC20 Standard token, with ERC23 functionality to reclaim\n', ' * other tokens accidentally sent to this contract, as well as to destroy\n', ' * this contract once the ICO has ended.\n', ' */\n', 'contract TPXCrowdsale is CanReclaimToken, Destructible {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold \n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime = 0;\n', '  uint256 public endTime = 0;\n', '\n', '  // address where funds are collected\n', '  address public wallet = address(0);\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised = 0;\n', '\n', '  // cap for crowdsale\n', '  uint256 public cap = 20000 ether;\n', '\n', '  // whitelist backers\n', '  mapping(address => bool) whiteList;\n', '\n', '  // addmin list\n', '  mapping(address => bool) adminList;\n', '\n', '  // mappig of our days, and rates.\n', '  mapping(uint8 => uint256) daysRates;\n', '\n', '  modifier onlyAdmin() { \n', '    require(adminList[msg.sender] == true || msg.sender == owner);\n', '    _; \n', '  }\n', '  \n', '  /**\n', '   * eurchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, \n', '                      uint256 value, uint256 amount);\n', '\n', '  constructor(MintableToken _token) public {\n', '\n', '    // Token contract address to enter \n', '    token = _token;\n', '    startTime = 1532952000; \n', '    endTime = startTime + 79 days;\n', '    // TPX Owner wallet address\n', '    wallet = 0x44f43463C5663C515cD1c3e53B226C335e41D970;\n', '\n', '    // set the days lapsed, and rates(tokens per ETH) for the period since startTime.\n', '    daysRates[51] = 7000;\n', '    // 40% bonus 45 days - private sale for whitelisted only!\n', '    daysRates[58] = 6500;\n', '    // 30% bonus first week of ICO -  public crowdsale\n', '    daysRates[65] = 6000;\n', '    // 20% bonus second week of ICO -  public crowdsale\n', '    daysRates[72] = 5500;\n', '    // 10% bonus third week of ICO -  public crowdsale\n', '    daysRates[79] = 5000;\n', '    // 0% bonus fourth week of ICO -  public crowdsale\n', '  }\n', '\n', '  function setTokenOwner (address _newOwner) public onlyOwner {\n', '    token.transferOwnership(_newOwner);\n', '  }\n', '\n', '  function addWhiteList (address _backer) public onlyAdmin returns (bool res) {\n', '    whiteList[_backer] = true;\n', '    return true;\n', '  }\n', '  \n', '  function addAdmin (address _admin) onlyAdmin public returns (bool res) {\n', '    adminList[_admin] = true;\n', '    return true;\n', '  }\n', '\n', '  function isWhiteListed (address _backer) public view returns (bool res) {\n', '    return whiteList[_backer];\n', '  }\n', '\n', '  function isAdmin (address _admin) public view returns (bool res) {\n', '    return adminList[_admin];\n', '  }\n', '  \n', '  function totalRaised() public view returns (uint256) {\n', '    return weiRaised;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(getRate());\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    if (tokens > 0) {\n', '      token.mint(beneficiary, tokens);\n', '      emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);      \n', '    }\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    // 73 days of sale.\n', '    bool withinPeriod = (now >= startTime && now <= endTime) || msg.sender == owner;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return withinPeriod && nonZeroPurchase && withinCap;\n', '  }\n', '\n', '  function getRate() internal view returns (uint256 rate) {\n', '    uint256 diff = (now - startTime);\n', '\n', '    if (diff <= 51 days) {\n', '      require(whiteList[msg.sender] == true);\n', '      return daysRates[51];\n', '    } else if (diff > 51 && diff <= 58 days) {\n', '      return daysRates[58];\n', '    } else if (diff > 58 && diff <= 65 days) {\n', '      return daysRates[65];\n', '    } else if (diff > 65 && diff <= 72 days) {\n', '      return daysRates[72];\n', '    } else if (diff <= 79 days) {\n', '      return daysRates[79];\n', '    } \n', '    return 0;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return now > endTime || capReached;\n', '  }\n', '}']
