['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function transfer(address to, uint value) public;\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint);\n', '  function transferFrom(address from, address to, uint value) public;\n', '  function approve(address spender, uint value) public;\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract Airdrop {\n', '  /**\n', '   * @dev daAirdrop to address\n', '   * @param _tokenAddr address the erc20 token address\n', '   * @param dests address[] addresses to airdrop\n', '   * @param values uint256[] value(in ether) to airdrop\n', '   */\n', '  function doAirdrop(address _tokenAddr, address[] dests, uint256[] values) public\n', '    returns (uint256) {\n', '    uint256 i = 0;\n', '    while (i < dests.length) {\n', '      ERC20(_tokenAddr).transferFrom(msg.sender,dests[i], values[i]);\n', '      i += 1;\n', '    }\n', '    return(i);\n', '  }\n', '}']