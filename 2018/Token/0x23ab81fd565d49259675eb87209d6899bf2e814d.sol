['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '\t/**\n', '\t* @dev Multiplies two numbers, throws on overflow.\n', '\t*/\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tc = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Integer division of two numbers, truncating the quotient.\n', '\t*/\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\t// uint256 c = a / b;\n', '\t\t// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\t\treturn a / b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\t*/\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds two numbers, throws on overflow.\n', '\t*/\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tc = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\tuint256 totalSupply_;\n', '\n', '\t/**\n', '\t* @dev total number of tokens in existence\n', '\t*/\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\t/**\n', '\t * @dev Transfer tokens from one address to another\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _to address The address which you want to transfer to\n', '\t * @param _value uint256 the amount of tokens to be transferred\n', '\t */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t *\n', '\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '\t * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _value The amount of tokens to be spent.\n', '\t */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t * @param _owner address The address which owns the funds.\n', '\t * @param _spender address The address which will spend the funds.\n', '\t * @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t */\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To increment\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _addedValue The amount of tokens to increase the allowance by.\n', '\t */\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To decrement\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t */\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', 'contract NomToken is StandardToken {\n', '\tevent Mint(address indexed to, uint256 amount);\n', '\n', '\taddress public owner;\n', '\t\n', '\tstring public constant name = "NOM Token"; \n', '\tstring public constant symbol = "NOM";\n', '\tuint8 public constant decimals = 18;\t\n', '\t\n', '\tuint256 public constant totalTokens = 5650000000 * (10 ** uint256(decimals));\n', '\t\n', '\tuint256 public initialIssueMinting = totalTokens.mul(60).div(100);\t//60% of tokens\n', '\tuint public constant initialIssueMintingDate = 1524873600;\t\t\t//28.04.2018 UTC\n', '\tbool public initialIssueMinted = false;\n', '\t\t\n', '\tuint256 public firstStageMinting = totalTokens.mul(10).div(100);\t//10% of tokens\n', '\tuint public constant firstStageMintingDate = 1532736000;\t\t\t//28.07.2018 UTC\n', '\tbool public firstStageMinted = false;\n', '\t\t\n', '\tuint256 public secondStageMinting = totalTokens.mul(10).div(100);\t//10% of tokens\n', '\tuint public constant secondStageMintingDate = 1540684800;\t\t\t//28.10.2018 UTC\n', '\tbool public secondStageMinted = false;\n', '\t\n', '\tuint256 public thirdStageMinting = totalTokens.mul(10).div(100);\t//10% of tokens\n', '\tuint public constant thirdStageMintingDate = 1548633600;\t\t\t//28.01.2019 UTC\n', '\tbool public thirdStageMinted = false;\n', '\t\n', '\tuint256 public fourthStageMinting = totalTokens.mul(10).div(100);\t//10% of tokens\n', '\tuint public constant fourthStageMintingDate = 1556409600;\t\t\t//28.04.2019 UTC\n', '\tbool public fourthStageMinted = false;\n', '\t\t\n', '\tfunction NomToken() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\t\n', '\t /**\n', '\t * @dev Function to mint tokens\n', '\t * @return A boolean that indicates if the operation was successful.\n', '\t */\n', '\tfunction mint() public returns (bool) {\n', '\t\trequire(msg.sender == owner);\n', '\t\t\n', '\t\tuint256 tokensToMint = 0;\n', '\t\tif (now > initialIssueMintingDate && !initialIssueMinted) {\n', '\t\t\t\ttokensToMint = tokensToMint.add(initialIssueMinting);\n', '\t\t\t\tinitialIssueMinted = true;\n', '\t\t}\n', '\t\tif (now > firstStageMintingDate && !firstStageMinted) {\n', '\t\t\t\ttokensToMint = tokensToMint.add(firstStageMinting);\n', '\t\t\t\tfirstStageMinted = true;\n', '\t\t}\n', '\t\tif (now > secondStageMintingDate && !secondStageMinted) {\n', '\t\t\t\ttokensToMint = tokensToMint.add(secondStageMinting);\n', '\t\t\t\tsecondStageMinted = true;\n', '\t\t}\n', '\t\tif (now > thirdStageMintingDate && !thirdStageMinted) {\n', '\t\t\t\ttokensToMint = tokensToMint.add(thirdStageMinting);\n', '\t\t\t\tthirdStageMinted = true;\n', '\t\t}\n', '\t\tif (now > fourthStageMintingDate && !fourthStageMinted) {\n', '\t\t\t\ttokensToMint = tokensToMint.add(fourthStageMinting);\n', '\t\t\t\tfourthStageMinted = true;\n', '\t\t}\n', '\t\trequire(tokensToMint > 0);\n', '\t\tuint256 newTotalSupply = totalSupply_.add(tokensToMint);\n', '\t\trequire(newTotalSupply <= totalTokens);\n', '\t\t\n', '\t\ttotalSupply_ = totalSupply_.add(tokensToMint);\n', '\t\tbalances[owner] = balances[owner].add(tokensToMint);\n', '\t\temit Mint(owner, tokensToMint);\n', '\t\temit Transfer(0x0, owner, tokensToMint);\n', '\t\treturn true;\n', '\t}\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '\t/**\n', '\t* @dev Multiplies two numbers, throws on overflow.\n', '\t*/\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tc = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Integer division of two numbers, truncating the quotient.\n', '\t*/\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\t// uint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\t\treturn a / b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\t*/\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds two numbers, throws on overflow.\n', '\t*/\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tc = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\tuint256 totalSupply_;\n', '\n', '\t/**\n', '\t* @dev total number of tokens in existence\n', '\t*/\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\t/**\n', '\t * @dev Transfer tokens from one address to another\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _to address The address which you want to transfer to\n', '\t * @param _value uint256 the amount of tokens to be transferred\n', '\t */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\temit Transfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t *\n', '\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _value The amount of tokens to be spent.\n', '\t */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t * @param _owner address The address which owns the funds.\n', '\t * @param _spender address The address which will spend the funds.\n', '\t * @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t */\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To increment\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _addedValue The amount of tokens to increase the allowance by.\n', '\t */\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To decrement\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t */\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\temit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', 'contract NomToken is StandardToken {\n', '\tevent Mint(address indexed to, uint256 amount);\n', '\n', '\taddress public owner;\n', '\t\n', '\tstring public constant name = "NOM Token"; \n', '\tstring public constant symbol = "NOM";\n', '\tuint8 public constant decimals = 18;\t\n', '\t\n', '\tuint256 public constant totalTokens = 5650000000 * (10 ** uint256(decimals));\n', '\t\n', '\tuint256 public initialIssueMinting = totalTokens.mul(60).div(100);\t//60% of tokens\n', '\tuint public constant initialIssueMintingDate = 1524873600;\t\t\t//28.04.2018 UTC\n', '\tbool public initialIssueMinted = false;\n', '\t\t\n', '\tuint256 public firstStageMinting = totalTokens.mul(10).div(100);\t//10% of tokens\n', '\tuint public constant firstStageMintingDate = 1532736000;\t\t\t//28.07.2018 UTC\n', '\tbool public firstStageMinted = false;\n', '\t\t\n', '\tuint256 public secondStageMinting = totalTokens.mul(10).div(100);\t//10% of tokens\n', '\tuint public constant secondStageMintingDate = 1540684800;\t\t\t//28.10.2018 UTC\n', '\tbool public secondStageMinted = false;\n', '\t\n', '\tuint256 public thirdStageMinting = totalTokens.mul(10).div(100);\t//10% of tokens\n', '\tuint public constant thirdStageMintingDate = 1548633600;\t\t\t//28.01.2019 UTC\n', '\tbool public thirdStageMinted = false;\n', '\t\n', '\tuint256 public fourthStageMinting = totalTokens.mul(10).div(100);\t//10% of tokens\n', '\tuint public constant fourthStageMintingDate = 1556409600;\t\t\t//28.04.2019 UTC\n', '\tbool public fourthStageMinted = false;\n', '\t\t\n', '\tfunction NomToken() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\t\n', '\t /**\n', '\t * @dev Function to mint tokens\n', '\t * @return A boolean that indicates if the operation was successful.\n', '\t */\n', '\tfunction mint() public returns (bool) {\n', '\t\trequire(msg.sender == owner);\n', '\t\t\n', '\t\tuint256 tokensToMint = 0;\n', '\t\tif (now > initialIssueMintingDate && !initialIssueMinted) {\n', '\t\t\t\ttokensToMint = tokensToMint.add(initialIssueMinting);\n', '\t\t\t\tinitialIssueMinted = true;\n', '\t\t}\n', '\t\tif (now > firstStageMintingDate && !firstStageMinted) {\n', '\t\t\t\ttokensToMint = tokensToMint.add(firstStageMinting);\n', '\t\t\t\tfirstStageMinted = true;\n', '\t\t}\n', '\t\tif (now > secondStageMintingDate && !secondStageMinted) {\n', '\t\t\t\ttokensToMint = tokensToMint.add(secondStageMinting);\n', '\t\t\t\tsecondStageMinted = true;\n', '\t\t}\n', '\t\tif (now > thirdStageMintingDate && !thirdStageMinted) {\n', '\t\t\t\ttokensToMint = tokensToMint.add(thirdStageMinting);\n', '\t\t\t\tthirdStageMinted = true;\n', '\t\t}\n', '\t\tif (now > fourthStageMintingDate && !fourthStageMinted) {\n', '\t\t\t\ttokensToMint = tokensToMint.add(fourthStageMinting);\n', '\t\t\t\tfourthStageMinted = true;\n', '\t\t}\n', '\t\trequire(tokensToMint > 0);\n', '\t\tuint256 newTotalSupply = totalSupply_.add(tokensToMint);\n', '\t\trequire(newTotalSupply <= totalTokens);\n', '\t\t\n', '\t\ttotalSupply_ = totalSupply_.add(tokensToMint);\n', '\t\tbalances[owner] = balances[owner].add(tokensToMint);\n', '\t\temit Mint(owner, tokensToMint);\n', '\t\temit Transfer(0x0, owner, tokensToMint);\n', '\t\treturn true;\n', '\t}\n', '}']
