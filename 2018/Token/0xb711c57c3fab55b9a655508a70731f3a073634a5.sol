['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/Ownerable.sol\n', '\n', 'contract Ownerable {\n', '    /// @notice The address of the owner is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyOwner { require(msg.sender == owner); _; }\n', '\n', '    address public owner;\n', '\n', '    constructor() public { owner = msg.sender;}\n', '\n', '    /// @notice Changes the owner of the contract\n', '    /// @param _newOwner The new owner of the contract\n', '    function setOwner(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/RegXAddr.sol\n', '\n', 'contract RegXAddr is Ownerable {\n', '\n', '  bool public registable;\n', '  ERC20Basic private atxToken;\n', '\n', '  address[] public ethAddrs;\n', '  mapping (address => address) public eth2xbc;\n', '\n', '  constructor () public {\n', '    atxToken = ERC20Basic(0x1A0F2aB46EC630F9FD638029027b552aFA64b94c);\n', '  }\n', '\n', '  function setRegistable(bool _registable) public onlyOwner {\n', '    registable = _registable;\n', '  }\n', '\n', '  function registeredCount() public view returns (uint256) {\n', '    return ethAddrs.length;\n', '  }\n', '  \n', '  function xbc2eth(address _xaddr) public view returns (address) {\n', '    require(_xaddr != 0x0);\n', '      \n', '    for(uint i=0; i<ethAddrs.length; i++) {\n', '      if(eth2xbc[ethAddrs[i]] == _xaddr) {\n', '\treturn ethAddrs[i];\n', '      }\n', '    }\n', '    return 0x0;\n', '  }\n', '\n', '  function registerXAddress (address _xaddr) public returns (bool){\n', '    require(registable);\n', '    require(_xaddr != 0x0);\n', '    require(msg.sender != 0x0);\n', '\n', '    uint256 atxBalance = atxToken.balanceOf(msg.sender);\n', '    require(atxBalance > 0);\n', '      \n', '    if(eth2xbc[msg.sender] == 0x0) {\n', '      ethAddrs.push(msg.sender);\n', '    }\n', '    eth2xbc[msg.sender] = _xaddr;\n', '\n', '    emit RegisterXAddress(msg.sender, _xaddr, atxBalance);\n', '    return true;\n', '  }\n', '\n', '  function reset() public onlyOwner {\n', '    for(uint i=0; i<ethAddrs.length; i++) {\n', '      delete eth2xbc[ ethAddrs[i] ];\n', '    }\n', '    delete ethAddrs;\n', '  }\n', '\n', '\n', '  event RegisterXAddress (address indexed ethaddr, address indexed xbcaddr, uint256 balance);\n', '}']