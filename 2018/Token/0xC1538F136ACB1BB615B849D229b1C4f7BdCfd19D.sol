['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract Developed {\n', '    using SafeMath for uint256;\n', '    \n', '    struct Developer {\n', '        address account;\n', '        uint256 comission;\n', '        bool isCollab;\n', '    }\n', '    \n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 0;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint64 public totalSupply;\n', '\n', '\n', '    // State variables for the payout\n', '    uint public payoutBalance = 0;\n', '    uint public payoutIndex = 0;\n', '    bool public paused = false;\n', '    uint public lastPayout;\n', '\n', '\n', '    constructor() public payable {        \n', '        Developer memory dev = Developer(msg.sender, 1 szabo, true);\n', '        developers[msg.sender] = dev;\n', '        developerAccounts.push(msg.sender);\n', '        name = "MyHealthData Divident Token";\n', '        symbol = "MHDDEV";\n', '        totalSupply = 1 szabo;\n', '    }\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    \n', '    mapping(address => Developer) internal developers;\n', '    address[] public developerAccounts;\n', '    \n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    \n', '    modifier comissionLimit (uint256 value) {\n', '        require(value < 1 szabo, "Invalid value");\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused () {\n', '        require(paused == false, "Transfers paused, to re-enable transfers finish the payout round.");\n', '        _;\n', '    }\n', '\n', '    function () external payable {}\n', '\n', '    function newDeveloper(address _devAccount, uint64 _comission, bool _isCollab) public comissionLimit(_comission) returns(address) {\n', '        require(_devAccount != address(0), "Invalid developer account");\n', '        \n', '        bool isCollab = _isCollab;\n', '        Developer storage devRequester = developers[msg.sender];\n', '        //"Developer have to be a collaborator in order to invite others to be a Developer\n', '        if (!devRequester.isCollab) {\n', '            isCollab = false;\n', '        }\n', '        \n', '        require(devRequester.comission>=_comission, "The developer requester must have comission balance in order to sell her commission");\n', '        devRequester.comission = devRequester.comission.sub(_comission);\n', '        \n', '        Developer memory dev = Developer(_devAccount, _comission, isCollab);\n', '        developers[_devAccount] = dev;\n', '\n', '        developerAccounts.push(_devAccount);\n', '        return _devAccount;\n', '    }\n', '\n', '    function totalDevelopers() public view returns (uint256) {\n', '        return developerAccounts.length;\n', '    }\n', '\n', '    function getSingleDeveloper(address _devID) public view returns (address devAccount, uint256 comission, bool isCollaborator) {\n', '        require(_devID != address(0), "Dev ID must be greater than zero");\n', '        //require(devID <= numDevelopers, "Dev ID must be valid. It is greather than total developers available");\n', '        Developer memory dev = developers[_devID];\n', '        devAccount = dev.account;\n', '        comission = dev.comission;\n', '        isCollaborator = dev.isCollab;\n', '        return;\n', '    }\n', '    \n', '    function payComission() public returns (bool success) {\n', '        require (lastPayout < now - 14 days, "Only one payout every two weeks allowed");\n', '        paused = true;\n', '        if (payoutIndex == 0)\n', '            payoutBalance = address(this).balance;\n', '        for (uint i = payoutIndex; i < developerAccounts.length; i++) {\n', '            Developer memory dev = developers[developerAccounts[i]];\n', '            if (dev.comission > 0) {\n', '                uint valueToSendToDev = (payoutBalance.mul(dev.comission)).div(1 szabo);\n', '\n', '                // Developers should ensure these TXs will not revert\n', '                // otherwise they&#39;ll lose the payout (payout remains in \n', '                // balance and will split with everyone in the next round)\n', '                dev.account.send(valueToSendToDev);\n', '\n', '                if (gasleft() < 100000) {\n', '                    payoutIndex = i + 1;\n', '                    return;\n', '                }\n', '            }            \n', '        }\n', '        success = true;\n', '        payoutIndex = 0;\n', '        payoutBalance = 0;\n', '        paused = false;\n', '        lastPayout = now;\n', '        return;\n', '    }   \n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint64 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        Developer memory dev = developers[owner];\n', '        return dev.comission;\n', '    }\n', '    \n', '    \n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param from address The address which you want to send tokens from\n', '    * @param to address The address which you want to transfer to\n', '    * @param value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address from, address to, uint64 value) public comissionLimit(value) whenNotPaused returns (bool)    {\n', '                \n', '        Developer storage devRequester = developers[from];\n', '        require(devRequester.comission > 0, "The developer receiver must exist");\n', '        \n', '        require(value <= balanceOf(from), "There is no enough balance to perform this operation");\n', '        require(value <= _allowed[from][msg.sender], "Trader is not allowed to transact to this limit");\n', '\n', '        Developer storage devReciever = developers[to];\n', '        if (devReciever.account == address(0)) {\n', '            Developer memory dev = Developer(to, 0, false);\n', '            developers[to] = dev;\n', '            developerAccounts.push(to);\n', '        }\n', '        \n', '        devRequester.comission = devRequester.comission.sub(value);\n', '        devReciever.comission = devReciever.comission.add(value);\n', '\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        \n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint64 value) public comissionLimit(value) whenNotPaused returns (bool) {\n', '        require(value <= balanceOf(msg.sender), "Spender does not have enough balance");\n', '        require(to != address(0), "Invalid new owner address");\n', '             \n', '        Developer storage devRequester = developers[msg.sender];\n', '        \n', '        require(devRequester.comission >= value, "The developer requester must have comission balance in order to sell her commission");\n', '        \n', '        Developer storage devReciever = developers[to];\n', '        if (devReciever.account == address(0)) {\n', '            Developer memory dev = Developer(to, 0, false);\n', '            developers[to] = dev;\n', '            developerAccounts.push(to);\n', '        }\n', '        \n', '        devRequester.comission = devRequester.comission.sub(value);\n', '        devReciever.comission = devReciever.comission.add(value);\n', '        \n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param spender The address which will spend the funds.\n', '    * @param value The amount of tokens to be spent.\n', '    */\n', '    function approve(address spender, uint64 value) public comissionLimit(value) returns (bool) {\n', '        require(spender != address(0), "Invalid spender");\n', '    \n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param owner address The address which owns the funds.\n', '    * @param spender address The address which will spend the funds.\n', '    * @return A uint64 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address owner, address spender) public view returns (uint256)    {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed_[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * @param spender The address which will spend the funds.\n', '    * @param addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseAllowance(address spender, uint64 addedValue) public comissionLimit(addedValue) returns (bool)    {\n', '        require(spender != address(0), "Invalid spender");\n', '        \n', '        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '    \n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    * approve should be called when allowed_[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * @param spender The address which will spend the funds.\n', '    * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public comissionLimit(subtractedValue) returns (bool)    {\n', '        require(spender != address(0), "Invalid spender");\n', '        \n', '        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '}']