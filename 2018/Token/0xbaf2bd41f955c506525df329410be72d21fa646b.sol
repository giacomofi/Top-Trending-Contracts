['pragma solidity ^0.4.24;\n', '\n', 'contract IERC20Token {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value)  public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n', '    function approve(address _spender, uint256 _value)  public returns (bool success);\n', '    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    constructor(address _owner) public {\n', '        owner = _owner == address(0) ? msg.sender : _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function confirmOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '}\n', '\n', '\n', 'contract AbyssBatchTransfer is Ownable {\n', '    IERC20Token public token;\n', '\n', '    constructor(address tokenAddress, address ownerAddress) public Ownable(ownerAddress) {\n', '        token = IERC20Token(tokenAddress);\n', '    }\n', '\n', '    function batchTransfer(address[] recipients, uint256[] amounts) public onlyOwner {\n', '        require(recipients.length == amounts.length);\n', '\n', '        for(uint i = 0; i < recipients.length; i++) {\n', '            require(token.transfer(recipients[i], amounts[i]));\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract IERC20Token {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value)  public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n', '    function approve(address _spender, uint256 _value)  public returns (bool success);\n', '    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    constructor(address _owner) public {\n', '        owner = _owner == address(0) ? msg.sender : _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function confirmOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '}\n', '\n', '\n', 'contract AbyssBatchTransfer is Ownable {\n', '    IERC20Token public token;\n', '\n', '    constructor(address tokenAddress, address ownerAddress) public Ownable(ownerAddress) {\n', '        token = IERC20Token(tokenAddress);\n', '    }\n', '\n', '    function batchTransfer(address[] recipients, uint256[] amounts) public onlyOwner {\n', '        require(recipients.length == amounts.length);\n', '\n', '        for(uint i = 0; i < recipients.length; i++) {\n', '            require(token.transfer(recipients[i], amounts[i]));\n', '        }\n', '    }\n', '}']
