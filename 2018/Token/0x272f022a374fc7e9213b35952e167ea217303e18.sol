['pragma solidity ^0.4.19;\n', '\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        OwnershipTransferred(owner, _newOwner);\n', '    }\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract VotingToken is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC 20 fields\n', '    // ------------------------------------------------------------------------\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Fields required for the referendum\n', '    // ------------------------------------------------------------------------\n', '    Description public description;\n', '    Props public props;\n', '    Reward public reward;\n', '    bool public open;\n', '    \n', '    struct Description {\n', '        string question;\n', '        string firstProp;\n', '        string secondProp;\n', '    }\n', '\n', '    struct Props {\n', '        address firstPropAddress;\n', '        address secondPropAddress;\n', '        address blankVoteAddress;\n', '    }\n', '\n', '    struct Reward {\n', '        address tokenAddress;\n', '        address refundWalletAddress; \n', '    }\n', '\n', '    event VoteRewarded(address indexed to, uint amount);\n', '    event Finish(string question, \n', '        string firstProp, uint firstPropCount, \n', '        string secondProp, uint secondPropCount, uint blankVoteCount);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function VotingToken(\n', '        string _symbol, string _name, uint _totalSupply, \n', '        string _question, string _firstProp, string _secondProp,\n', '        address _firstPropAddress, address _secondPropAddress, address _blankVoteAddress,\n', '        address _tokenAddress) public {\n', '\n', '        symbol = _symbol;\n', '        name = _name;\n', '        decimals = 8;\n', '        totalSupply = _totalSupply;\n', '        balances[owner] = _totalSupply;\n', '        Transfer(address(0), owner, totalSupply);\n', '\n', '        description = Description(_question, _firstProp, _secondProp);\n', '        props = Props(_firstPropAddress, _secondPropAddress, _blankVoteAddress);\n', '        reward = Reward(_tokenAddress, owner);\n', '        open = true;\n', '    }\n', '\n', '    function close() public onlyOwner returns (bool success) {\n', '        require(open);\n', '        open = false;\n', '        Finish(description.question, \n', '            description.firstProp, balanceOf(props.firstPropAddress), \n', '            description.firstProp, balanceOf(props.secondPropAddress), \n', '            balanceOf(props.blankVoteAddress));\n', '\n', '        ERC20Interface rewardToken = ERC20Interface(reward.tokenAddress);\n', '        uint leftBalance = rewardToken.balanceOf(address(this));\n', '        rewardToken.transfer(reward.refundWalletAddress, leftBalance);\n', '\n', '        return true;\n', '    }\n', '\n', '    function updateRefundWalletAddress(address _wallet) public onlyOwner returns (bool success) {\n', '        reward.refundWalletAddress = _wallet;\n', '        return true;\n', '    }\n', '\n', '    function getResults() public view returns (uint firstPropCount, uint secondPropCount, uint blankVoteCount) {\n', '        return (\n', '            balanceOf(props.firstPropAddress), \n', '            balanceOf(props.secondPropAddress), \n', '            balanceOf(props.blankVoteAddress));\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupply - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address _tokenOwner) public constant returns (uint balance) {\n', '        return balances[_tokenOwner];\n', '    }\n', '\n', '    function rewardVote(address _from, address _to, uint _tokens) private {\n', '        if(_to == props.firstPropAddress || \n', '           _to == props.secondPropAddress || \n', '           _to == props.blankVoteAddress) {\n', '            ERC20Interface rewardToken = ERC20Interface(reward.tokenAddress);\n', '            uint rewardTokens = _tokens.div(100);\n', '            rewardToken.transfer(_from, rewardTokens);\n', '            VoteRewarded(_from, _tokens);\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        return transferFrom(msg.sender, to, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(open);\n', '        balances[from] = balances[from].sub(tokens);\n', '        if(from != msg.sender) {\n', '            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        }\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        rewardVote(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        require(open);\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        OwnershipTransferred(owner, _newOwner);\n', '    }\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract VotingToken is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // ERC 20 fields\n', '    // ------------------------------------------------------------------------\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Fields required for the referendum\n', '    // ------------------------------------------------------------------------\n', '    Description public description;\n', '    Props public props;\n', '    Reward public reward;\n', '    bool public open;\n', '    \n', '    struct Description {\n', '        string question;\n', '        string firstProp;\n', '        string secondProp;\n', '    }\n', '\n', '    struct Props {\n', '        address firstPropAddress;\n', '        address secondPropAddress;\n', '        address blankVoteAddress;\n', '    }\n', '\n', '    struct Reward {\n', '        address tokenAddress;\n', '        address refundWalletAddress; \n', '    }\n', '\n', '    event VoteRewarded(address indexed to, uint amount);\n', '    event Finish(string question, \n', '        string firstProp, uint firstPropCount, \n', '        string secondProp, uint secondPropCount, uint blankVoteCount);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function VotingToken(\n', '        string _symbol, string _name, uint _totalSupply, \n', '        string _question, string _firstProp, string _secondProp,\n', '        address _firstPropAddress, address _secondPropAddress, address _blankVoteAddress,\n', '        address _tokenAddress) public {\n', '\n', '        symbol = _symbol;\n', '        name = _name;\n', '        decimals = 8;\n', '        totalSupply = _totalSupply;\n', '        balances[owner] = _totalSupply;\n', '        Transfer(address(0), owner, totalSupply);\n', '\n', '        description = Description(_question, _firstProp, _secondProp);\n', '        props = Props(_firstPropAddress, _secondPropAddress, _blankVoteAddress);\n', '        reward = Reward(_tokenAddress, owner);\n', '        open = true;\n', '    }\n', '\n', '    function close() public onlyOwner returns (bool success) {\n', '        require(open);\n', '        open = false;\n', '        Finish(description.question, \n', '            description.firstProp, balanceOf(props.firstPropAddress), \n', '            description.firstProp, balanceOf(props.secondPropAddress), \n', '            balanceOf(props.blankVoteAddress));\n', '\n', '        ERC20Interface rewardToken = ERC20Interface(reward.tokenAddress);\n', '        uint leftBalance = rewardToken.balanceOf(address(this));\n', '        rewardToken.transfer(reward.refundWalletAddress, leftBalance);\n', '\n', '        return true;\n', '    }\n', '\n', '    function updateRefundWalletAddress(address _wallet) public onlyOwner returns (bool success) {\n', '        reward.refundWalletAddress = _wallet;\n', '        return true;\n', '    }\n', '\n', '    function getResults() public view returns (uint firstPropCount, uint secondPropCount, uint blankVoteCount) {\n', '        return (\n', '            balanceOf(props.firstPropAddress), \n', '            balanceOf(props.secondPropAddress), \n', '            balanceOf(props.blankVoteAddress));\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupply - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address _tokenOwner) public constant returns (uint balance) {\n', '        return balances[_tokenOwner];\n', '    }\n', '\n', '    function rewardVote(address _from, address _to, uint _tokens) private {\n', '        if(_to == props.firstPropAddress || \n', '           _to == props.secondPropAddress || \n', '           _to == props.blankVoteAddress) {\n', '            ERC20Interface rewardToken = ERC20Interface(reward.tokenAddress);\n', '            uint rewardTokens = _tokens.div(100);\n', '            rewardToken.transfer(_from, rewardTokens);\n', '            VoteRewarded(_from, _tokens);\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        return transferFrom(msg.sender, to, tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(open);\n', '        balances[from] = balances[from].sub(tokens);\n', '        if(from != msg.sender) {\n', '            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        }\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        rewardVote(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        require(open);\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
