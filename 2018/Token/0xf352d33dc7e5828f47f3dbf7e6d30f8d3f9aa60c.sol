['pragma solidity ^0.4.18;\n', '\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address owner;\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function changeOwner(address _newOwner) public onlyOwner{\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '// Safe maths, borrowed from OpenZeppelin\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', 'contract tokenRecipient {\n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract limitedFactor {\n', '    uint256 public startTime;\n', '    uint256 public stopTime;\n', '    address public walletAddress;\n', '    address public teamAddress;\n', '    address public contributorsAddress;\n', '    bool public tokenFrozen = true;\n', '    modifier teamAccountNeedFreezeOneYear(address _address) {\n', '        if(_address == teamAddress) {\n', '            require(now > startTime + 1 years);\n', '        }\n', '        _;\n', '    }\n', '    \n', '    modifier TokenUnFreeze() {\n', '        require(!tokenFrozen);\n', '        _;\n', '    } \n', '}\n', 'contract standardToken is ERC20Token, limitedFactor {\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* Transfers tokens from your address to other */\n', '    function transfer(address _to, uint256 _value) public TokenUnFreeze teamAccountNeedFreezeOneYear(msg.sender) returns (bool success) {\n', '        require (balances[msg.sender] > _value);           // Throw if sender has insufficient balance\n', '        require (balances[_to] + _value > balances[_to]);  // Throw if owerflow detected\n', '        balances[msg.sender] -= _value;                     // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recivers blaance\n', '        Transfer(msg.sender, _to, _value);                  // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    /* Approve other address to spend tokens on your account */\n', '    function approve(address _spender, uint256 _value) public TokenUnFreeze returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;          // Set allowance\n', '        Approval(msg.sender, _spender, _value);             // Raise Approval event\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public TokenUnFreeze returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract\n', '        approve(_spender, _value);                                      // Set approval to contract for _value\n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) public TokenUnFreeze returns (bool success) {\n', '        require (balances[_from] > _value);                // Throw if sender does not have enough balance\n', '        require (balances[_to] + _value > balances[_to]);  // Throw if overflow detected\n', '        require (_value <= allowances[_from][msg.sender]);  // Throw if you do not have allowance\n', '        balances[_from] -= _value;                          // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recipient blaance\n', '        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address\n', '        Transfer(_from, _to, _value);                       // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    /* Get the amount of allowed tokens to spend */\n', '    function allowance(address _owner, address _spender) constant public TokenUnFreeze returns (uint256 remaining) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract FansChainToken is standardToken,Owned {\n', '    using SafeMath for uint;\n', '\n', '    string constant public name="FansChain";\n', '    string constant public symbol="FANSC";\n', '    uint256 constant public decimals=18;\n', '    \n', '    uint256 public totalSupply = 0;\n', '    uint256 constant public topTotalSupply = 24*10**7*10**decimals;\n', '    uint256 public teamSupply = percent(25);\n', '    uint256 public privateFundSupply = percent(25);\n', '    uint256 public privateFundingSupply = 0;\n', '    uint256 public ICOtotalSupply = percent(20);\n', '    uint256 public ICOSupply = 0;\n', '    uint256 public ContributorsSupply = percent(30);\n', '    uint256 public exchangeRate;\n', '    bool    public ICOStart;\n', '    \n', '    \n', '    /// @dev Fallback to calling deposit when ether is sent directly to contract.\n', '    function() public payable {\n', '        require (ICOStart);\n', '        depositToken(msg.value);\n', '    }\n', '    \n', '    \n', '    function FansChainToken() public {\n', '        owner=msg.sender;\n', '    }\n', '    \n', '    /// @dev Buys tokens with Ether.\n', '    function depositToken(uint256 _value) internal {\n', '        uint256 tokenAlloc = buyPriceAt(getTime()) * _value;\n', '        ICOSupply = ICOSupply.add(tokenAlloc);\n', '        require (ICOSupply < ICOtotalSupply);\n', '        mintTokens (msg.sender, tokenAlloc);\n', '        forwardFunds();\n', '    }\n', '    \n', '    function forwardFunds() internal {\n', '        require(walletAddress != address(0));\n', '        walletAddress.transfer(msg.value);\n', '    }\n', '    \n', '    /// @dev Issue new tokens\n', '    function mintTokens(address _to, uint256 _amount) internal {\n', '        require (balances[_to] + _amount > balances[_to]);      // Check for overflows\n', '        balances[_to] = balances[_to].add(_amount);             // Set minted coins to target\n', '        totalSupply = totalSupply.add(_amount);\n', '        Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\n', '    }\n', '    \n', '    /// @dev Calculate exchange\n', '    function buyPriceAt(uint256 _time) internal constant returns(uint256) {\n', '        if (_time >= startTime && _time <= stopTime) {\n', '            return exchangeRate;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    /// @dev Get time\n', '    function getTime() internal constant returns(uint256) {\n', '        return now;\n', '    }\n', '    \n', '    /// @dev set initial message\n', '    function setInitialVaribles(\n', '        uint256 _icoStopTime,\n', '        uint256 _exchangeRate,\n', '        address _walletAddress,\n', '        address _teamAddress,\n', '        address _contributorsAddress\n', '        )\n', '        public\n', '        onlyOwner {\n', '            stopTime = _icoStopTime;\n', '            exchangeRate=_exchangeRate;\n', '            walletAddress = _walletAddress;\n', '            teamAddress = _teamAddress;\n', '            contributorsAddress = _contributorsAddress;\n', '        }\n', '    \n', '    /// @dev set ICO start or stop\n', '    function setICOStart(bool _start) public onlyOwner {\n', '        ICOStart = _start;\n', '        startTime = now;\n', '    }\n', '    \n', '    /// @dev withDraw Ether to a Safe Wallet\n', '    function withDraw() public payable onlyOwner {\n', '        require (msg.sender != address(0));\n', '        require (getTime() > stopTime);\n', '        walletAddress.transfer(this.balance);\n', '    }\n', '    \n', '    /// @dev unfreeze if ICO succeed\n', '    function unfreezeTokenTransfer(bool _freeze) public onlyOwner {\n', '        tokenFrozen = !_freeze;\n', '    }\n', '    \n', '    /// @dev allocate Token\n', '    function allocateTokens(address[] _owners, uint256[] _values) public onlyOwner {\n', '        require (_owners.length == _values.length);\n', '        for(uint256 i = 0; i < _owners.length ; i++){\n', '            address owner = _owners[i];\n', '            uint256 value = _values[i];\n', '            ICOSupply = ICOSupply.add(value);\n', '            require(totalSupply < ICOtotalSupply);\n', '            mintTokens(owner, value);\n', '        }\n', '    }\n', '    \n', '    /// @dev calcute the tokens\n', '    function percent(uint256 percentage) internal  pure returns (uint256) {\n', '        return percentage.mul(topTotalSupply).div(100);\n', '    }\n', '     \n', '     /// @dev allocate token for Team Address\n', '    function allocateTeamToken() public onlyOwner {\n', '        mintTokens(teamAddress, teamSupply);\n', '    }\n', '    \n', '    /// @dev allocate token for Private Address\n', '    function allocatePrivateToken(address[] _privateFundingAddress, uint256[] _amount) public onlyOwner {\n', '        require (_privateFundingAddress.length == _amount.length);\n', '        for(uint256 i = 0; i < _privateFundingAddress.length ; i++){\n', '            address owner = _privateFundingAddress[i];\n', '            uint256 value = _amount[i];\n', '            privateFundingSupply = privateFundingSupply.add(value);\n', '            require(privateFundingSupply <= privateFundSupply);\n', '            mintTokens(owner, value);\n', '        }\n', '    }\n', '    \n', '    /// @dev allocate token for contributors Address\n', '    function allocateContributorsToken() public onlyOwner {\n', '        mintTokens(contributorsAddress, ContributorsSupply);\n', '    }\n', '}']