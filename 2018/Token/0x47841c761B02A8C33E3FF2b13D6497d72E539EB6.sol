['pragma solidity ^0.4.21;\n', 'contract ERC20Token  {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '   emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '   emit Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Pausable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract PTMCrowdFund is Destructible {\n', '    event PurchaseToken (address indexed from,uint256 weiAmount,uint256 _tokens);\n', '     uint public priceOfToken=250000000000000;//1 eth = 4000 PTM\n', '    ERC20Token erc20Token;\n', '    using SafeMath for uint256;\n', '    uint256 etherRaised;\n', '    uint public constant decimals = 18;\n', '    function PTMCrowdFund () public {\n', '        owner = msg.sender;\n', '        erc20Token = ERC20Token(0x7c32DB0645A259FaE61353c1f891151A2e7f8c1e);\n', '    }\n', '    function updatePriceOfToken(uint256 priceInWei) external onlyOwner {\n', '        priceOfToken = priceInWei;\n', '    }\n', '    \n', '    function updateTokenAddress ( address _tokenAddress) external onlyOwner {\n', '        erc20Token = ERC20Token(_tokenAddress);\n', '    }\n', '    \n', '      function()  public whenNotPaused payable {\n', '          require(msg.value>0);\n', '          uint256 tokens = (msg.value * (10 ** decimals)) / priceOfToken;\n', '          erc20Token.transfer(msg.sender,tokens);\n', '          etherRaised += msg.value;\n', '          \n', '      }\n', '      \n', '        /**\n', '    * Transfer entire balance to any account (by owner and admin only)\n', '    **/\n', '    function transferFundToAccount(address _accountByOwner) public onlyOwner {\n', '        require(etherRaised > 0);\n', '        _accountByOwner.transfer(etherRaised);\n', '        etherRaised = 0;\n', '    }\n', '\n', '    \n', '    /**\n', '    * Transfer part of balance to any account (by owner and admin only)\n', '    **/\n', '    function transferLimitedFundToAccount(address _accountByOwner, uint256 balanceToTransfer) public onlyOwner   {\n', '        require(etherRaised > balanceToTransfer);\n', '        _accountByOwner.transfer(balanceToTransfer);\n', '        etherRaised = etherRaised.sub(balanceToTransfer);\n', '    }\n', '    \n', '}']