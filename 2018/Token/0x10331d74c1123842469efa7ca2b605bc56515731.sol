['/*\n', ' *  The Yomi Token contract complies with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\n', ' *  All tokens not being sold during the crowdsale but the reserved token for tournaments future financing are burned.\n', ' *  Author: Plan B.\n', ' */\n', 'pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public ownerAddr;\n', '    event TransferOwnership(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    constructor() public {\n', '        ownerAddr = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == ownerAddr);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) onlyOwner public {\n', '        require(_newOwner != 0x0);\n', '        ownerAddr = _newOwner;\n', '        emit TransferOwnership(ownerAddr, _newOwner);\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    // Base function\n', '    function totalSupply() public view returns (uint256 _totalSupply);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    \n', '    // Public event on the blockchain that will notify clients\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract YomiToken is Owned, ERC20{\n', '    using SafeMath for uint256;\n', '    \n', '    // Public variables of the token\n', '    string constant public name = "YOMI Token";\n', '    string constant public symbol = "YOMI";\n', '    uint8 constant public decimals = 18;\n', '    uint256 total_supply = 1000000000e18; // Total supply of 1 billion Yomi Tokens\n', '    uint256 constant public teamReserve = 100000000e18; //10%\n', '    uint256 constant public foundationReserve = 200000000e18; //20%\n', '    uint256 constant public startTime = 1533110400; // Good time:2018-08-01 08:00:00  GMT\n', '    uint256 public lockReleaseDate6Month; // 6 month = 182 days\n', '    uint256 public lockReleaseDate1Year; // 1 year = 365 days\n', '    address public teamAddr;\n', '    address public foundationAddr;\n', '    \n', '    // Array\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public frozenAccounts;\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event FrozenFunds(address _target, bool _freeze);\n', '    \n', '    /**\n', '     * Constrctor function\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(address _teamAddr, address _foundationAddr) public {\n', '        teamAddr = _teamAddr;\n', '        foundationAddr = _foundationAddr;\n', '        lockReleaseDate6Month = startTime + 182 days;\n', '        lockReleaseDate1Year = startTime + 365 days;\n', '        balances[ownerAddr] = total_supply; // Give the creator all initial tokens\n', '    }\n', '    \n', '    /**\n', '     * `freeze? Prevent | Allow` `_target` from sending & receiving tokens\n', '     * @param _freeze either to freeze it or not\n', '     */\n', '    function freezeAccount(address _target, bool _freeze) onlyOwner public {\n', '        frozenAccounts[_target] = _freeze;\n', '        emit FrozenFunds(_target, _freeze);\n', '    }\n', '    \n', '    /**\n', '     * Get the total supply\n', '     */\n', '    function totalSupply() public view returns (uint256 _totalSupply) {\n', '        _totalSupply = total_supply;\n', '    }\n', '    \n', '    /**\n', '     * What is the balance of a particular account?\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    /**\n', '     * Returns the amount which _spender is still allowed to withdraw from _owner\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '     * Internal transfer,only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != 0x0);\n', '        \n', '        // Lock tokens of team\n', '        if (_from == teamAddr && now < lockReleaseDate6Month) {\n', '            require(balances[_from].sub(_value) >= teamReserve);\n', '        }\n', '        // Lock tokens of foundation        \n', '        if (_from == foundationAddr && now < lockReleaseDate1Year) {\n', '            require(balances[_from].sub(_value) >= foundationReserve);\n', '        }\n', '        \n', '        // Check if the sender has enough\n', '        require(balances[_from] >= _value); \n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]); \n', '        //Check if account is frozen\n', '        require(!frozenAccounts[_from]);\n', '        require(!frozenAccounts[_to]);\n', '        \n', '        // Save this for an assertion in the future\n', '        uint256 previousBalances = balances[_from].add(balances[_to]);\n', '        // Subtract from the sender\n', '        balances[_from] = balances[_from].sub(_value);\n', '        // Add the same to the recipient\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '    }\n', '    \n', '    /**\n', '     * Transfer tokens\n', '     * Send `_value` tokens to `_to` from your account.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Transfer tokens from other address\n', '     * Send `_value` tokens to `_to` on behalf of `_from`.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        // Check allowance\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Set allowance for other address\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_spender != 0x0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}']
['/*\n', ' *  The Yomi Token contract complies with the ERC20 standard (see https://github.com/ethereum/EIPs/issues/20).\n', ' *  All tokens not being sold during the crowdsale but the reserved token for tournaments future financing are burned.\n', ' *  Author: Plan B.\n', ' */\n', 'pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public ownerAddr;\n', '    event TransferOwnership(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    constructor() public {\n', '        ownerAddr = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == ownerAddr);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) onlyOwner public {\n', '        require(_newOwner != 0x0);\n', '        ownerAddr = _newOwner;\n', '        emit TransferOwnership(ownerAddr, _newOwner);\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    // Base function\n', '    function totalSupply() public view returns (uint256 _totalSupply);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    \n', '    // Public event on the blockchain that will notify clients\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract YomiToken is Owned, ERC20{\n', '    using SafeMath for uint256;\n', '    \n', '    // Public variables of the token\n', '    string constant public name = "YOMI Token";\n', '    string constant public symbol = "YOMI";\n', '    uint8 constant public decimals = 18;\n', '    uint256 total_supply = 1000000000e18; // Total supply of 1 billion Yomi Tokens\n', '    uint256 constant public teamReserve = 100000000e18; //10%\n', '    uint256 constant public foundationReserve = 200000000e18; //20%\n', '    uint256 constant public startTime = 1533110400; // Good time:2018-08-01 08:00:00  GMT\n', '    uint256 public lockReleaseDate6Month; // 6 month = 182 days\n', '    uint256 public lockReleaseDate1Year; // 1 year = 365 days\n', '    address public teamAddr;\n', '    address public foundationAddr;\n', '    \n', '    // Array\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public frozenAccounts;\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event FrozenFunds(address _target, bool _freeze);\n', '    \n', '    /**\n', '     * Constrctor function\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(address _teamAddr, address _foundationAddr) public {\n', '        teamAddr = _teamAddr;\n', '        foundationAddr = _foundationAddr;\n', '        lockReleaseDate6Month = startTime + 182 days;\n', '        lockReleaseDate1Year = startTime + 365 days;\n', '        balances[ownerAddr] = total_supply; // Give the creator all initial tokens\n', '    }\n', '    \n', '    /**\n', '     * `freeze? Prevent | Allow` `_target` from sending & receiving tokens\n', '     * @param _freeze either to freeze it or not\n', '     */\n', '    function freezeAccount(address _target, bool _freeze) onlyOwner public {\n', '        frozenAccounts[_target] = _freeze;\n', '        emit FrozenFunds(_target, _freeze);\n', '    }\n', '    \n', '    /**\n', '     * Get the total supply\n', '     */\n', '    function totalSupply() public view returns (uint256 _totalSupply) {\n', '        _totalSupply = total_supply;\n', '    }\n', '    \n', '    /**\n', '     * What is the balance of a particular account?\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    /**\n', '     * Returns the amount which _spender is still allowed to withdraw from _owner\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '     * Internal transfer,only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != 0x0);\n', '        \n', '        // Lock tokens of team\n', '        if (_from == teamAddr && now < lockReleaseDate6Month) {\n', '            require(balances[_from].sub(_value) >= teamReserve);\n', '        }\n', '        // Lock tokens of foundation        \n', '        if (_from == foundationAddr && now < lockReleaseDate1Year) {\n', '            require(balances[_from].sub(_value) >= foundationReserve);\n', '        }\n', '        \n', '        // Check if the sender has enough\n', '        require(balances[_from] >= _value); \n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]); \n', '        //Check if account is frozen\n', '        require(!frozenAccounts[_from]);\n', '        require(!frozenAccounts[_to]);\n', '        \n', '        // Save this for an assertion in the future\n', '        uint256 previousBalances = balances[_from].add(balances[_to]);\n', '        // Subtract from the sender\n', '        balances[_from] = balances[_from].sub(_value);\n', '        // Add the same to the recipient\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '    }\n', '    \n', '    /**\n', '     * Transfer tokens\n', '     * Send `_value` tokens to `_to` from your account.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Transfer tokens from other address\n', '     * Send `_value` tokens to `_to` on behalf of `_from`.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        // Check allowance\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Set allowance for other address\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_spender != 0x0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '}']
