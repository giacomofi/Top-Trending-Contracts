['pragma solidity ^0.4.19;\n', '\n', 'contract HCToken {\n', '    address public owner;\n', '    string public constant name = "Hash Credit Token";\n', '    string public constant symbol = "HCT";\n', '    uint256 public constant decimals = 6;\n', '    uint256 public constant totalSupply = 15 * 100 * 1000 * 1000 * 10 ** decimals;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        if (msg.data.length != size + 4) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function HCToken() {\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) returns (bool success) {\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '  \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) returns (bool success) {\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract HCToken {\n', '    address public owner;\n', '    string public constant name = "Hash Credit Token";\n', '    string public constant symbol = "HCT";\n', '    uint256 public constant decimals = 6;\n', '    uint256 public constant totalSupply = 15 * 100 * 1000 * 1000 * 10 ** decimals;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        if (msg.data.length != size + 4) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function HCToken() {\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) returns (bool success) {\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '  \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) returns (bool success) {\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}']
