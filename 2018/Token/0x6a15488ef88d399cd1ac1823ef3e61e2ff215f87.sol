['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TokenSender {\n', '\n', '    event TransferFail(uint256 index, address receiver, uint256 amount);\n', '\n', '    function bulkTransfer(address[] receivers, uint256[] amounts, address token) external {\n', '        address sender = msg.sender;\n', '        uint256 length = receivers.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            if (!ERC20(token).transferFrom(sender, receivers[i], amounts[i])) {\n', '                emit TransferFail(i, receivers[i], amounts[i]);\n', '                return;\n', '            }\n', '        }\n', '    }\n', '\n', '    function bulkTransferEther(address[] receivers, uint256[] amounts) external payable {\n', '        uint256 length = receivers.length;\n', '        uint256 totalSend = 0;\n', '        for (uint256 i = 0; i < length; i++){\n', '            if (!receivers[i].send(amounts[i])) {\n', '                emit TransferFail(i, receivers[i], amounts[i]);\n', '                return;\n', '            }\n', '            totalSend += amounts[i];\n', '        }\n', '        uint256 balances = msg.value - totalSend;\n', '        if (balances > 0) {\n', '            msg.sender.transfer(balances);\n', '        }\n', '        require(this.balance == 0);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TokenSender {\n', '\n', '    event TransferFail(uint256 index, address receiver, uint256 amount);\n', '\n', '    function bulkTransfer(address[] receivers, uint256[] amounts, address token) external {\n', '        address sender = msg.sender;\n', '        uint256 length = receivers.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            if (!ERC20(token).transferFrom(sender, receivers[i], amounts[i])) {\n', '                emit TransferFail(i, receivers[i], amounts[i]);\n', '                return;\n', '            }\n', '        }\n', '    }\n', '\n', '    function bulkTransferEther(address[] receivers, uint256[] amounts) external payable {\n', '        uint256 length = receivers.length;\n', '        uint256 totalSend = 0;\n', '        for (uint256 i = 0; i < length; i++){\n', '            if (!receivers[i].send(amounts[i])) {\n', '                emit TransferFail(i, receivers[i], amounts[i]);\n', '                return;\n', '            }\n', '            totalSend += amounts[i];\n', '        }\n', '        uint256 balances = msg.value - totalSend;\n', '        if (balances > 0) {\n', '            msg.sender.transfer(balances);\n', '        }\n', '        require(this.balance == 0);\n', '    }\n', '}']
