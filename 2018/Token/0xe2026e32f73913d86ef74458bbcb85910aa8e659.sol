['pragma solidity ^0.4.25;\n', '\n', '// File: contracts/util/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20.sol\n', '\n', '/**\n', ' *   @title ERC20\n', ' *   @dev Standart ERC20 token interface\n', ' */\n', 'contract ERC20 {\n', '    uint256 public totalSupply = 0;\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '// File: contracts/token/ChessCoin.sol\n', '\n', 'contract ChessCoin is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "ChessCoin";\n', '    string public constant symbol = "CHC";\n', '    uint8 public constant decimals = 18;\n', '\n', '    // Ico contract address\n', '    address public ico;\n', '    address public admin;\n', '    event Mint(address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    // Disables/enables token transfers, for migration to platform mainnet\n', '    bool public tokensAreFrozen = true;\n', '\n', '    // Allows execution by the ico only\n', '    modifier icoOnly {\n', '        require(msg.sender == ico || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier tokenUnfrozen {\n', '        require(msg.sender == ico || msg.sender == admin || !tokensAreFrozen);\n', '        _;\n', '    }\n', '\n', '    constructor (address _ico, address _admin) public {\n', '        ico = _ico;\n', '        admin = _admin;\n', '    }\n', '\n', '    function mintTokens(address _beneficiary, uint256 _value) external icoOnly {\n', '        require(_beneficiary != address(0));\n', '        require(_value > 0);\n', '\n', '        uint256 tempValue = _value *  (10 ** uint256(decimals));\n', '\n', '        balances[_beneficiary] = balances[_beneficiary].add(tempValue);\n', '        totalSupply = totalSupply.add(tempValue);\n', '        emit Mint(_beneficiary, tempValue);\n', '        emit Transfer(0x0, _beneficiary, tempValue);\n', '    }\n', '\n', '    function defrostTokens() external icoOnly {\n', '        tokensAreFrozen = false;\n', '    }\n', '\n', '    function frostTokens() external icoOnly {\n', '        tokensAreFrozen = true;\n', '    }\n', '\n', '    function burnTokens(address _investor, uint256 _value) external icoOnly {\n', '        require(_value > 0);\n', '        require(balances[_investor] >= _value);\n', '\n', '        uint256 tempValue = _value *  (10 ** uint256(decimals));\n', '\n', '        totalSupply = totalSupply.sub(tempValue);\n', '        balances[_investor] = balances[_investor].sub(tempValue);\n', '        emit Burn(_investor, tempValue);\n', '    }\n', '\n', '    function balanceOf(address _who) public view returns(uint256) {\n', '        return balances[_who];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) public tokenUnfrozen returns(bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(_amount > 0);\n', '        require(_amount <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount) public tokenUnfrozen returns(bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) public returns(bool) {\n', "        // reduce spender's allowance to 0 then set desired value after to avoid race condition\n", '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']