['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' * See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address&#39; access to this role\n', '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * Supports unlimited numbers of roles and addresses.\n', ' * See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' * for you to write your own implementation of this interface using Enums or similar.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address indexed operator, string role);\n', '  event RoleRemoved(address indexed operator, string role);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address _operator, string _role)\n', '    view\n', '    public\n', '  {\n', '    roles[_role].check(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address _operator, string _role)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[_role].has(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function addRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].add(_operator);\n', '    emit RoleAdded(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function removeRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].remove(_operator);\n', '    emit RoleRemoved(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string _role)\n', '  {\n', '    checkRole(msg.sender, _role);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param _roles the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] _roles) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < _roles.length; i++) {\n', '  //         if (hasRole(msg.sender, _roles[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(_spender != address(0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(0));\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(0));\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract IdaToken is Ownable, RBAC, StandardToken {\n', '    using AddressUtils for address;\n', '    using SafeMath for uint256;\n', '\n', '    string public name    = "IDA";\n', '    string public symbol  = "IDA";\n', '    uint8 public decimals = 18;\n', '\n', '    // 初始发行量 100 亿\n', '    uint256 public constant INITIAL_SUPPLY          = 10000000000;\n', '    // 基石轮额度 3.96 亿\n', '    uint256 public constant FOOTSTONE_ROUND_AMOUNT  = 396000000;\n', '    // 私募额度 12 亿\n', '    uint256 public constant PRIVATE_SALE_AMOUNT     = 1200000000;\n', '    // 2019/05/01 之前的 Owner 锁仓额度 50 亿\n', '    uint256 public constant OWNER_LOCKED_IN_COMMON     = 5000000000;\n', '    // 通用额度 72.04 亿 （IDA 基金会、研发、生态建设、社区建设、运营）\n', '    uint256 public constant COMMON_PURPOSE_AMOUNT   = 7204000000;\n', '    // 团队预留额度1 1.2 亿\n', '    uint256 public constant TEAM_RESERVED_AMOUNT1   = 120000000;\n', '    // 团队预留额度2 3.6 亿\n', '    uint256 public constant TEAM_RESERVED_AMOUNT2   = 360000000;\n', '    // 团队预留额度3 3.6 亿\n', '    uint256 public constant TEAM_RESERVED_AMOUNT3   = 360000000;\n', '    // 团队预留额度4 3.6 亿\n', '    uint256 public constant TEAM_RESERVED_AMOUNT4   = 360000000;\n', '\n', '    // 私募中的 Ether 兑换比率，1 Ether = 10000 IDA\n', '    uint256 public constant EXCHANGE_RATE_IN_PRIVATE_SALE = 10000;\n', '\n', '    // 2018/10/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20181001000001 = 1538352001;\n', '    // 2018/10/02 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20181002000001 = 1538438401;\n', '    // 2018/11/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20181101000001 = 1541030401;\n', '    // 2019/02/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20190201000001 = 1548979201;\n', '    // 2019/05/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20190501000001 = 1556668801;\n', '    // 2019/08/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20190801000001 = 1564617601;\n', '    // 2019/11/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20191101000001 = 1572566401;\n', '    // 2020/11/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20201101000001 = 1604188801;\n', '    // 2021/11/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20211101000001 = 1635724801;\n', '\n', '    // Role constant of Partner Whitelist\n', '    string public constant ROLE_PARTNERWHITELIST = "partnerWhitelist";\n', '    // Role constant of Privatesale Whitelist\n', '    string public constant ROLE_PRIVATESALEWHITELIST = "privateSaleWhitelist";\n', '\n', '    // 由 Owner 分发的总数额\n', '    uint256 public totalOwnerReleased;\n', '    // 所有 partner 的已分发额总数\n', '    uint256 public totalPartnersReleased;\n', '    // 所有私募代理人的已分发数额总数\n', '    uint256 public totalPrivateSalesReleased;\n', '    // 通用额度的已分发数额总数\n', '    uint256 public totalCommonReleased;\n', '    // 团队保留额度的已分发数额总数1\n', '    uint256 public totalTeamReleased1;\n', '    // 团队保留额度的已分发数额总数2\n', '    uint256 public totalTeamReleased2;\n', '    // 团队保留额度的已分发数额总数3\n', '    uint256 public totalTeamReleased3;\n', '    // 团队保留额度的已分发数额总数4\n', '    uint256 public totalTeamReleased4;\n', '\n', '    // Partner 地址数组\n', '    address[] private partners;\n', '    // Partner 地址在数组中索引\n', '    mapping (address => uint256) private partnersIndex;\n', '    // 私募代理人地址数组\n', '    address[] private privateSaleAgents;\n', '    // 私募代理人地址在数组中的索引\n', '    mapping (address => uint256) private privateSaleAgentsIndex;\n', '\n', '    // Partner 限额映射\n', '    mapping (address => uint256) private partnersAmountLimit;\n', '    // Partner 实际已转账额度映射\n', '    mapping (address => uint256) private partnersWithdrawed;\n', '    // 私募代理人实际转出（售出）的 token 数量映射\n', '    mapping (address => uint256) private privateSalesReleased;\n', '\n', '    // Owner 的钱包地址\n', '    address ownerWallet;\n', '\n', '    // Log 特定的转账函数操作\n', '    event TransferLog(address from, address to, bytes32 functionName, uint256 value);\n', '\n', '    /**\n', '     * @dev 构造函数时需传入 Owner 指定的钱包地址\n', '     * @param _ownerWallet Owner 的钱包地址\n', '     */\n', '    constructor(address _ownerWallet) public {\n', '        ownerWallet = _ownerWallet;\n', '        totalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals));\n', '        balances[msg.sender] = totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev 变更 Owner 的钱包地址\n', '     * @param _ownerWallet Owner 的钱包地址\n', '     */\n', '    function changeOwnerWallet(address _ownerWallet) public onlyOwner {\n', '        ownerWallet = _ownerWallet;\n', '    }\n', '\n', '    /**\n', '     * @dev 添加 partner 地址到白名单并设置其限额\n', '     * @param _addr Partner 地址\n', '     * @param _amount Partner 的持有限额\n', '     */\n', '    function addAddressToPartnerWhiteList(address _addr, uint256 _amount)\n', '        public onlyOwner\n', '    {\n', '        // 仅允许在 2018/11/01 00:00:01 之前调用\n', '        require(block.timestamp < TIMESTAMP_OF_20181101000001);\n', '        // 如 _addr 不在白名单内，则执行添加处理\n', '        if (!hasRole(_addr, ROLE_PARTNERWHITELIST)) {\n', '            addRole(_addr, ROLE_PARTNERWHITELIST);\n', '            // 把给定地址加入 partner 数组\n', '            partnersIndex[_addr] = partners.length;\n', '            partners.push(_addr);\n', '        }\n', '        // Owner 可以多次调用此函数以达到修改 partner 授权上限的效果\n', '        partnersAmountLimit[_addr] = _amount;\n', '    }\n', '\n', '    /**\n', '     * @dev 将 partner 地址从白名单移除\n', '     * @param _addr Partner 地址\n', '     */\n', '    function removeAddressFromPartnerWhiteList(address _addr)\n', '        public onlyOwner\n', '    {\n', '        // 仅允许在 2018/11/01 00:00:01 之前调用\n', '        require(block.timestamp < TIMESTAMP_OF_20181101000001);\n', '        // 仅允许 _addr 已在白名单内时使用\n', '        require(hasRole(_addr, ROLE_PARTNERWHITELIST));\n', '\n', '        removeRole(_addr, ROLE_PARTNERWHITELIST);\n', '        partnersAmountLimit[_addr] = 0;\n', '        // 把给定地址从 partner 数组中删除\n', '        uint256 partnerIndex = partnersIndex[_addr];\n', '        uint256 lastPartnerIndex = partners.length.sub(1);\n', '        address lastPartner = partners[lastPartnerIndex];\n', '        partners[partnerIndex] = lastPartner;\n', '        delete partners[lastPartnerIndex];\n', '        partners.length--;\n', '        partnersIndex[_addr] = 0;\n', '        partnersIndex[lastPartner] = partnerIndex;\n', '    }\n', '\n', '    /**\n', '     * @dev 添加私募代理人地址到白名单并设置其限额\n', '     * @param _addr 私募代理人地址\n', '     * @param _amount 私募代理人的转账限额\n', '     */\n', '    function addAddressToPrivateWhiteList(address _addr, uint256 _amount)\n', '        public onlyOwner\n', '    {\n', '        // 仅允许在 2018/10/02 00:00:01 之前调用\n', '        require(block.timestamp < TIMESTAMP_OF_20181002000001);\n', '        // 检查 _addr 是否已在白名单内以保证 approve 函数仅会被调用一次；\n', '        // 后续如还需要更改授权额度，\n', '        // 请直接使用安全的 increaseApproval 和 decreaseApproval 函数\n', '        require(!hasRole(_addr, ROLE_PRIVATESALEWHITELIST));\n', '\n', '        addRole(_addr, ROLE_PRIVATESALEWHITELIST);\n', '        approve(_addr, _amount);\n', '        // 把给定地址加入私募代理人数组\n', '        privateSaleAgentsIndex[_addr] = privateSaleAgents.length;\n', '        privateSaleAgents.push(_addr);\n', '    }\n', '\n', '    /**\n', '     * @dev 将私募代理人地址从白名单移除\n', '     * @param _addr 私募代理人地址\n', '     */\n', '    function removeAddressFromPrivateWhiteList(address _addr)\n', '        public onlyOwner\n', '    {\n', '        // 仅允许在 2018/10/02 00:00:01 之前调用\n', '        require(block.timestamp < TIMESTAMP_OF_20181002000001);\n', '        // 仅允许 _addr 已在白名单内时使用\n', '        require(hasRole(_addr, ROLE_PRIVATESALEWHITELIST));\n', '\n', '        removeRole(_addr, ROLE_PRIVATESALEWHITELIST);\n', '        approve(_addr, 0);\n', '        // 把给定地址从私募代理人数组中删除\n', '        uint256 agentIndex = privateSaleAgentsIndex[_addr];\n', '        uint256 lastAgentIndex = privateSaleAgents.length.sub(1);\n', '        address lastAgent = privateSaleAgents[lastAgentIndex];\n', '        privateSaleAgents[agentIndex] = lastAgent;\n', '        delete privateSaleAgents[lastAgentIndex];\n', '        privateSaleAgents.length--;\n', '        privateSaleAgentsIndex[_addr] = 0;\n', '        privateSaleAgentsIndex[lastAgent] = agentIndex;\n', '    }\n', '\n', '    /**\n', '     * @dev 允许接受转账的 fallback 函数\n', '     */\n', '    function() external payable {\n', '        privateSale(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev 私募处理\n', '     * @param _beneficiary 收取 token 地址\n', '     */\n', '    function privateSale(address _beneficiary)\n', '        public payable onlyRole(ROLE_PRIVATESALEWHITELIST)\n', '    {\n', '        // 仅允许 EOA 购买\n', '        require(msg.sender == tx.origin);\n', '        require(!msg.sender.isContract());\n', '        // 仅允许在 2018/10/02 00:00:01 之前购买\n', '        require(block.timestamp < TIMESTAMP_OF_20181002000001);\n', '\n', '        uint256 purchaseValue = msg.value.mul(EXCHANGE_RATE_IN_PRIVATE_SALE);\n', '        transferFrom(owner, _beneficiary, purchaseValue);\n', '    }\n', '\n', '    /**\n', '     * @dev 人工私募处理\n', '     * @param _addr 收取 token 地址\n', '     * @param _amount 转账 token 数量\n', '     */\n', '    function withdrawPrivateCoinByMan(address _addr, uint256 _amount)\n', '        public onlyRole(ROLE_PRIVATESALEWHITELIST)\n', '    {\n', '        // 仅允许在 2018/10/02 00:00:01 之前购买\n', '        require(block.timestamp < TIMESTAMP_OF_20181002000001);\n', '        // 仅允许 EOA 获得转账\n', '        require(!_addr.isContract());\n', '\n', '        transferFrom(owner, _addr, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 私募余额提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawRemainPrivateCoin(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2018/10/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20181001000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawRemainPrivateCoin"), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 私募转账处理(从 Owner 持有的余额中转出)\n', '     * @param _to 转入地址\n', '     * @param _amount 转账数量\n', '     */\n', '    function _privateSaleTransferFromOwner(address _to, uint256 _amount)\n', '        private returns (bool)\n', '    {\n', '        uint256 newTotalPrivateSaleAmount = totalPrivateSalesReleased.add(_amount);\n', '        // 检查私募转账总额是否超限\n', '        require(newTotalPrivateSaleAmount <= PRIVATE_SALE_AMOUNT.mul(10 ** uint256(decimals)));\n', '\n', '        bool result = super.transferFrom(owner, _to, _amount);\n', '        privateSalesReleased[msg.sender] = privateSalesReleased[msg.sender].add(_amount);\n', '        totalPrivateSalesReleased = newTotalPrivateSaleAmount;\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev 合约余额提取\n', '     */\n', '    function withdrawFunds() public onlyOwner {\n', '        ownerWallet.transfer(address(this).balance);\n', '    }\n', '\n', '    /**\n', '     * @dev 获取所有 Partner 地址\n', '     * @return 所有 Partner 地址\n', '     */\n', '    function getPartnerAddresses() public onlyOwner view returns (address[]) {\n', '        return partners;\n', '    }\n', '\n', '    /**\n', '     * @dev 获取所有私募代理人地址\n', '     * @return 所有私募代理人地址\n', '     */\n', '    function getPrivateSaleAgentAddresses() public onlyOwner view returns (address[]) {\n', '        return privateSaleAgents;\n', '    }\n', '\n', '    /**\n', '     * @dev 获得私募代理人地址已转出（售出）的 token 数量\n', '     * @param _addr 私募代理人地址\n', '     * @return 私募代理人地址的已转出的 token 数量\n', '     */\n', '    function privateSaleReleased(address _addr) public view returns (uint256) {\n', '        return privateSalesReleased[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev 获得 Partner 地址的提取限额\n', '     * @param _addr Partner 的地址\n', '     * @return Partner 地址的提取限额\n', '     */\n', '    function partnerAmountLimit(address _addr) public view returns (uint256) {\n', '        return partnersAmountLimit[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev 获得 Partner 地址的已提取 token 数量\n', '     * @param _addr Partner 的地址\n', '     * @return Partner 地址的已提取 token 数量\n', '     */\n', '    function partnerWithdrawed(address _addr) public view returns (uint256) {\n', '        return partnersWithdrawed[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev 给 Partner 地址分发 token\n', '     * @param _addr Partner 的地址\n', '     * @param _amount 分发的 token 数量\n', '     */\n', '    function withdrawToPartner(address _addr, uint256 _amount)\n', '        public onlyOwner\n', '    {\n', '        require(hasRole(_addr, ROLE_PARTNERWHITELIST));\n', '        // 仅允许在 2018/11/01 00:00:01 之前分发\n', '        require(block.timestamp < TIMESTAMP_OF_20181101000001);\n', '\n', '        uint256 newTotalReleased = totalPartnersReleased.add(_amount);\n', '        require(newTotalReleased <= FOOTSTONE_ROUND_AMOUNT.mul(10 ** uint256(decimals)));\n', '\n', '        uint256 newPartnerAmount = balanceOf(_addr).add(_amount);\n', '        require(newPartnerAmount <= partnersAmountLimit[_addr]);\n', '\n', '        totalPartnersReleased = newTotalReleased;\n', '        transfer(_addr, _amount);\n', '        emit TransferLog(owner, _addr, bytes32("withdrawToPartner"), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 计算 Partner 地址的可提取 token 数量，返回其与 _value 之间较小的那个值\n', '     * @param _addr Partner 的地址\n', '     * @param _value 想要提取的 token 数量\n', '     * @return Partner 地址当前可提取的 token 数量，\n', '     *         如果 _value 较小，则返回 _value 的数值\n', '     */\n', '    function _permittedPartnerTranferValue(address _addr, uint256 _value)\n', '        private view returns (uint256)\n', '    {\n', '        uint256 limit = balanceOf(_addr);\n', '        uint256 withdrawed = partnersWithdrawed[_addr];\n', '        uint256 total = withdrawed.add(limit);\n', '        uint256 time = block.timestamp;\n', '\n', '        require(limit > 0);\n', '\n', '        if (time >= TIMESTAMP_OF_20191101000001) {\n', '            // 2019/11/01 00:00:01 之后可提取 100%\n', '            limit = total;\n', '        } else if (time >= TIMESTAMP_OF_20190801000001) {\n', '            // 2019/08/01 00:00:01 之后最多提取 75%\n', '            limit = total.mul(75).div(100);\n', '        } else if (time >= TIMESTAMP_OF_20190501000001) {\n', '            // 2019/05/01 00:00:01 之后最多提取 50%\n', '            limit = total.div(2);\n', '        } else if (time >= TIMESTAMP_OF_20190201000001) {\n', '            // 2019/02/01 00:00:01 之后最多提取 25%\n', '            limit = total.mul(25).div(100);\n', '        } else {\n', '            // 2019/02/01 00:00:01 之前不可提取\n', '            limit = 0;\n', '        }\n', '        if (withdrawed >= limit) {\n', '            limit = 0;\n', '        } else {\n', '            limit = limit.sub(withdrawed);\n', '        }\n', '        if (_value < limit) {\n', '            limit = _value;\n', '        }\n', '        return limit;\n', '    }\n', '\n', '    /**\n', '     * @dev 重写基础合约的 transferFrom 函数\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        bool result;\n', '        address sender = msg.sender;\n', '\n', '        if (_from == owner) {\n', '            if (hasRole(sender, ROLE_PRIVATESALEWHITELIST)) {\n', '                // 仅允许在 2018/10/02 00:00:01 之前购买\n', '                require(block.timestamp < TIMESTAMP_OF_20181002000001);\n', '\n', '                result = _privateSaleTransferFromOwner(_to, _value);\n', '            } else {\n', '                revert();\n', '            }\n', '        } else {\n', '            result = super.transferFrom(_from, _to, _value);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev 通用额度提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawCommonCoin(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2018/11/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20181101000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawCommonCoin"), _amount);\n', '        totalCommonReleased = totalCommonReleased.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 团队预留额度1提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawToTeamStep1(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2019/02/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20190201000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawToTeamStep1"), _amount);\n', '        totalTeamReleased1 = totalTeamReleased1.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 团队预留额度2提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawToTeamStep2(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2019/11/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20191101000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawToTeamStep2"), _amount);\n', '        totalTeamReleased2 = totalTeamReleased2.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 团队预留额度3提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawToTeamStep3(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2020/11/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20201101000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawToTeamStep3"), _amount);\n', '        totalTeamReleased3 = totalTeamReleased3.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 团队预留额度4提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawToTeamStep4(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2021/11/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20211101000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawToTeamStep4"), _amount);\n', '        totalTeamReleased4 = totalTeamReleased4.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 重写基础合约的 transfer 函数\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        bool result;\n', '        uint256 limit;\n', '\n', '        if (msg.sender == owner) {\n', '            limit = _ownerReleaseLimit();\n', '            uint256 newTotalOwnerReleased = totalOwnerReleased.add(_value);\n', '            require(newTotalOwnerReleased <= limit);\n', '            result = super.transfer(_to, _value);\n', '            totalOwnerReleased = newTotalOwnerReleased;\n', '        } else if (hasRole(msg.sender, ROLE_PARTNERWHITELIST)) {\n', '            limit = _permittedPartnerTranferValue(msg.sender, _value);\n', '            if (limit > 0) {\n', '                result = super.transfer(_to, limit);\n', '                partnersWithdrawed[msg.sender] = partnersWithdrawed[msg.sender].add(limit);\n', '            } else {\n', '                revert();\n', '            }\n', '        } else {\n', '            result = super.transfer(_to, _value);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev 计算 Owner 的转账额度\n', '     * @return Owner 的当前转账额度\n', '     */\n', '   function _ownerReleaseLimit() private view returns (uint256) {\n', '        uint256 time = block.timestamp;\n', '        uint256 limit;\n', '        uint256 amount;\n', '\n', '        // 基石轮额度作为默认限额\n', '        limit = FOOTSTONE_ROUND_AMOUNT.mul(10 ** uint256(decimals));\n', '        if (time >= TIMESTAMP_OF_20181001000001) {\n', '            // 2018/10/1 之后，最大限额需要增加私募剩余额度\n', '            amount = PRIVATE_SALE_AMOUNT.mul(10 ** uint256(decimals));\n', '            if (totalPrivateSalesReleased < amount) {\n', '                limit = limit.add(amount).sub(totalPrivateSalesReleased);\n', '            }\n', '        }\n', '        if (time >= TIMESTAMP_OF_20181101000001) {\n', '            // 2018/11/1 之后，最大限额需要增加通用提取额度中减去锁仓额度以外的额度\n', '            limit = limit.add(COMMON_PURPOSE_AMOUNT.sub(OWNER_LOCKED_IN_COMMON).mul(10 ** uint256(decimals)));\n', '        }\n', '        if (time >= TIMESTAMP_OF_20190201000001) {\n', '            // 2019/2/1 之后，最大限额需要增加团队预留额度1\n', '            limit = limit.add(TEAM_RESERVED_AMOUNT1.mul(10 ** uint256(decimals)));\n', '        }\n', '        if (time >= TIMESTAMP_OF_20190501000001) {\n', '            // 2019/5/1 之后，最大限额需要增加通用额度中的锁仓额度\n', '            limit = limit.add(OWNER_LOCKED_IN_COMMON.mul(10 ** uint256(decimals)));\n', '        }\n', '        if (time >= TIMESTAMP_OF_20191101000001) {\n', '            // 2019/11/1 之后，最大限额需要增加团队预留额度2\n', '            limit = limit.add(TEAM_RESERVED_AMOUNT2.mul(10 ** uint256(decimals)));\n', '        }\n', '        if (time >= TIMESTAMP_OF_20201101000001) {\n', '            // 2020/11/1 之后，最大限额需要增加团队预留额度3\n', '            limit = limit.add(TEAM_RESERVED_AMOUNT3.mul(10 ** uint256(decimals)));\n', '        }\n', '        if (time >= TIMESTAMP_OF_20211101000001) {\n', '            // 2021/11/1 之后，最大限额需要增加团队预留额度4\n', '            limit = limit.add(TEAM_RESERVED_AMOUNT4.mul(10 ** uint256(decimals)));\n', '        }\n', '        return limit;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' * See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an address' access to this role\n", '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * Supports unlimited numbers of roles and addresses.\n', ' * See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' * for you to write your own implementation of this interface using Enums or similar.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address indexed operator, string role);\n', '  event RoleRemoved(address indexed operator, string role);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address _operator, string _role)\n', '    view\n', '    public\n', '  {\n', '    roles[_role].check(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address _operator, string _role)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[_role].has(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function addRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].add(_operator);\n', '    emit RoleAdded(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function removeRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].remove(_operator);\n', '    emit RoleRemoved(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string _role)\n', '  {\n', '    checkRole(msg.sender, _role);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param _roles the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] _roles) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < _roles.length; i++) {\n', '  //         if (hasRole(msg.sender, _roles[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(_spender != address(0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(0));\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(0));\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract IdaToken is Ownable, RBAC, StandardToken {\n', '    using AddressUtils for address;\n', '    using SafeMath for uint256;\n', '\n', '    string public name    = "IDA";\n', '    string public symbol  = "IDA";\n', '    uint8 public decimals = 18;\n', '\n', '    // 初始发行量 100 亿\n', '    uint256 public constant INITIAL_SUPPLY          = 10000000000;\n', '    // 基石轮额度 3.96 亿\n', '    uint256 public constant FOOTSTONE_ROUND_AMOUNT  = 396000000;\n', '    // 私募额度 12 亿\n', '    uint256 public constant PRIVATE_SALE_AMOUNT     = 1200000000;\n', '    // 2019/05/01 之前的 Owner 锁仓额度 50 亿\n', '    uint256 public constant OWNER_LOCKED_IN_COMMON     = 5000000000;\n', '    // 通用额度 72.04 亿 （IDA 基金会、研发、生态建设、社区建设、运营）\n', '    uint256 public constant COMMON_PURPOSE_AMOUNT   = 7204000000;\n', '    // 团队预留额度1 1.2 亿\n', '    uint256 public constant TEAM_RESERVED_AMOUNT1   = 120000000;\n', '    // 团队预留额度2 3.6 亿\n', '    uint256 public constant TEAM_RESERVED_AMOUNT2   = 360000000;\n', '    // 团队预留额度3 3.6 亿\n', '    uint256 public constant TEAM_RESERVED_AMOUNT3   = 360000000;\n', '    // 团队预留额度4 3.6 亿\n', '    uint256 public constant TEAM_RESERVED_AMOUNT4   = 360000000;\n', '\n', '    // 私募中的 Ether 兑换比率，1 Ether = 10000 IDA\n', '    uint256 public constant EXCHANGE_RATE_IN_PRIVATE_SALE = 10000;\n', '\n', '    // 2018/10/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20181001000001 = 1538352001;\n', '    // 2018/10/02 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20181002000001 = 1538438401;\n', '    // 2018/11/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20181101000001 = 1541030401;\n', '    // 2019/02/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20190201000001 = 1548979201;\n', '    // 2019/05/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20190501000001 = 1556668801;\n', '    // 2019/08/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20190801000001 = 1564617601;\n', '    // 2019/11/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20191101000001 = 1572566401;\n', '    // 2020/11/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20201101000001 = 1604188801;\n', '    // 2021/11/01 00:00:01 的时间戳常数\n', '    uint256 public constant TIMESTAMP_OF_20211101000001 = 1635724801;\n', '\n', '    // Role constant of Partner Whitelist\n', '    string public constant ROLE_PARTNERWHITELIST = "partnerWhitelist";\n', '    // Role constant of Privatesale Whitelist\n', '    string public constant ROLE_PRIVATESALEWHITELIST = "privateSaleWhitelist";\n', '\n', '    // 由 Owner 分发的总数额\n', '    uint256 public totalOwnerReleased;\n', '    // 所有 partner 的已分发额总数\n', '    uint256 public totalPartnersReleased;\n', '    // 所有私募代理人的已分发数额总数\n', '    uint256 public totalPrivateSalesReleased;\n', '    // 通用额度的已分发数额总数\n', '    uint256 public totalCommonReleased;\n', '    // 团队保留额度的已分发数额总数1\n', '    uint256 public totalTeamReleased1;\n', '    // 团队保留额度的已分发数额总数2\n', '    uint256 public totalTeamReleased2;\n', '    // 团队保留额度的已分发数额总数3\n', '    uint256 public totalTeamReleased3;\n', '    // 团队保留额度的已分发数额总数4\n', '    uint256 public totalTeamReleased4;\n', '\n', '    // Partner 地址数组\n', '    address[] private partners;\n', '    // Partner 地址在数组中索引\n', '    mapping (address => uint256) private partnersIndex;\n', '    // 私募代理人地址数组\n', '    address[] private privateSaleAgents;\n', '    // 私募代理人地址在数组中的索引\n', '    mapping (address => uint256) private privateSaleAgentsIndex;\n', '\n', '    // Partner 限额映射\n', '    mapping (address => uint256) private partnersAmountLimit;\n', '    // Partner 实际已转账额度映射\n', '    mapping (address => uint256) private partnersWithdrawed;\n', '    // 私募代理人实际转出（售出）的 token 数量映射\n', '    mapping (address => uint256) private privateSalesReleased;\n', '\n', '    // Owner 的钱包地址\n', '    address ownerWallet;\n', '\n', '    // Log 特定的转账函数操作\n', '    event TransferLog(address from, address to, bytes32 functionName, uint256 value);\n', '\n', '    /**\n', '     * @dev 构造函数时需传入 Owner 指定的钱包地址\n', '     * @param _ownerWallet Owner 的钱包地址\n', '     */\n', '    constructor(address _ownerWallet) public {\n', '        ownerWallet = _ownerWallet;\n', '        totalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals));\n', '        balances[msg.sender] = totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev 变更 Owner 的钱包地址\n', '     * @param _ownerWallet Owner 的钱包地址\n', '     */\n', '    function changeOwnerWallet(address _ownerWallet) public onlyOwner {\n', '        ownerWallet = _ownerWallet;\n', '    }\n', '\n', '    /**\n', '     * @dev 添加 partner 地址到白名单并设置其限额\n', '     * @param _addr Partner 地址\n', '     * @param _amount Partner 的持有限额\n', '     */\n', '    function addAddressToPartnerWhiteList(address _addr, uint256 _amount)\n', '        public onlyOwner\n', '    {\n', '        // 仅允许在 2018/11/01 00:00:01 之前调用\n', '        require(block.timestamp < TIMESTAMP_OF_20181101000001);\n', '        // 如 _addr 不在白名单内，则执行添加处理\n', '        if (!hasRole(_addr, ROLE_PARTNERWHITELIST)) {\n', '            addRole(_addr, ROLE_PARTNERWHITELIST);\n', '            // 把给定地址加入 partner 数组\n', '            partnersIndex[_addr] = partners.length;\n', '            partners.push(_addr);\n', '        }\n', '        // Owner 可以多次调用此函数以达到修改 partner 授权上限的效果\n', '        partnersAmountLimit[_addr] = _amount;\n', '    }\n', '\n', '    /**\n', '     * @dev 将 partner 地址从白名单移除\n', '     * @param _addr Partner 地址\n', '     */\n', '    function removeAddressFromPartnerWhiteList(address _addr)\n', '        public onlyOwner\n', '    {\n', '        // 仅允许在 2018/11/01 00:00:01 之前调用\n', '        require(block.timestamp < TIMESTAMP_OF_20181101000001);\n', '        // 仅允许 _addr 已在白名单内时使用\n', '        require(hasRole(_addr, ROLE_PARTNERWHITELIST));\n', '\n', '        removeRole(_addr, ROLE_PARTNERWHITELIST);\n', '        partnersAmountLimit[_addr] = 0;\n', '        // 把给定地址从 partner 数组中删除\n', '        uint256 partnerIndex = partnersIndex[_addr];\n', '        uint256 lastPartnerIndex = partners.length.sub(1);\n', '        address lastPartner = partners[lastPartnerIndex];\n', '        partners[partnerIndex] = lastPartner;\n', '        delete partners[lastPartnerIndex];\n', '        partners.length--;\n', '        partnersIndex[_addr] = 0;\n', '        partnersIndex[lastPartner] = partnerIndex;\n', '    }\n', '\n', '    /**\n', '     * @dev 添加私募代理人地址到白名单并设置其限额\n', '     * @param _addr 私募代理人地址\n', '     * @param _amount 私募代理人的转账限额\n', '     */\n', '    function addAddressToPrivateWhiteList(address _addr, uint256 _amount)\n', '        public onlyOwner\n', '    {\n', '        // 仅允许在 2018/10/02 00:00:01 之前调用\n', '        require(block.timestamp < TIMESTAMP_OF_20181002000001);\n', '        // 检查 _addr 是否已在白名单内以保证 approve 函数仅会被调用一次；\n', '        // 后续如还需要更改授权额度，\n', '        // 请直接使用安全的 increaseApproval 和 decreaseApproval 函数\n', '        require(!hasRole(_addr, ROLE_PRIVATESALEWHITELIST));\n', '\n', '        addRole(_addr, ROLE_PRIVATESALEWHITELIST);\n', '        approve(_addr, _amount);\n', '        // 把给定地址加入私募代理人数组\n', '        privateSaleAgentsIndex[_addr] = privateSaleAgents.length;\n', '        privateSaleAgents.push(_addr);\n', '    }\n', '\n', '    /**\n', '     * @dev 将私募代理人地址从白名单移除\n', '     * @param _addr 私募代理人地址\n', '     */\n', '    function removeAddressFromPrivateWhiteList(address _addr)\n', '        public onlyOwner\n', '    {\n', '        // 仅允许在 2018/10/02 00:00:01 之前调用\n', '        require(block.timestamp < TIMESTAMP_OF_20181002000001);\n', '        // 仅允许 _addr 已在白名单内时使用\n', '        require(hasRole(_addr, ROLE_PRIVATESALEWHITELIST));\n', '\n', '        removeRole(_addr, ROLE_PRIVATESALEWHITELIST);\n', '        approve(_addr, 0);\n', '        // 把给定地址从私募代理人数组中删除\n', '        uint256 agentIndex = privateSaleAgentsIndex[_addr];\n', '        uint256 lastAgentIndex = privateSaleAgents.length.sub(1);\n', '        address lastAgent = privateSaleAgents[lastAgentIndex];\n', '        privateSaleAgents[agentIndex] = lastAgent;\n', '        delete privateSaleAgents[lastAgentIndex];\n', '        privateSaleAgents.length--;\n', '        privateSaleAgentsIndex[_addr] = 0;\n', '        privateSaleAgentsIndex[lastAgent] = agentIndex;\n', '    }\n', '\n', '    /**\n', '     * @dev 允许接受转账的 fallback 函数\n', '     */\n', '    function() external payable {\n', '        privateSale(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev 私募处理\n', '     * @param _beneficiary 收取 token 地址\n', '     */\n', '    function privateSale(address _beneficiary)\n', '        public payable onlyRole(ROLE_PRIVATESALEWHITELIST)\n', '    {\n', '        // 仅允许 EOA 购买\n', '        require(msg.sender == tx.origin);\n', '        require(!msg.sender.isContract());\n', '        // 仅允许在 2018/10/02 00:00:01 之前购买\n', '        require(block.timestamp < TIMESTAMP_OF_20181002000001);\n', '\n', '        uint256 purchaseValue = msg.value.mul(EXCHANGE_RATE_IN_PRIVATE_SALE);\n', '        transferFrom(owner, _beneficiary, purchaseValue);\n', '    }\n', '\n', '    /**\n', '     * @dev 人工私募处理\n', '     * @param _addr 收取 token 地址\n', '     * @param _amount 转账 token 数量\n', '     */\n', '    function withdrawPrivateCoinByMan(address _addr, uint256 _amount)\n', '        public onlyRole(ROLE_PRIVATESALEWHITELIST)\n', '    {\n', '        // 仅允许在 2018/10/02 00:00:01 之前购买\n', '        require(block.timestamp < TIMESTAMP_OF_20181002000001);\n', '        // 仅允许 EOA 获得转账\n', '        require(!_addr.isContract());\n', '\n', '        transferFrom(owner, _addr, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 私募余额提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawRemainPrivateCoin(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2018/10/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20181001000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawRemainPrivateCoin"), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 私募转账处理(从 Owner 持有的余额中转出)\n', '     * @param _to 转入地址\n', '     * @param _amount 转账数量\n', '     */\n', '    function _privateSaleTransferFromOwner(address _to, uint256 _amount)\n', '        private returns (bool)\n', '    {\n', '        uint256 newTotalPrivateSaleAmount = totalPrivateSalesReleased.add(_amount);\n', '        // 检查私募转账总额是否超限\n', '        require(newTotalPrivateSaleAmount <= PRIVATE_SALE_AMOUNT.mul(10 ** uint256(decimals)));\n', '\n', '        bool result = super.transferFrom(owner, _to, _amount);\n', '        privateSalesReleased[msg.sender] = privateSalesReleased[msg.sender].add(_amount);\n', '        totalPrivateSalesReleased = newTotalPrivateSaleAmount;\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev 合约余额提取\n', '     */\n', '    function withdrawFunds() public onlyOwner {\n', '        ownerWallet.transfer(address(this).balance);\n', '    }\n', '\n', '    /**\n', '     * @dev 获取所有 Partner 地址\n', '     * @return 所有 Partner 地址\n', '     */\n', '    function getPartnerAddresses() public onlyOwner view returns (address[]) {\n', '        return partners;\n', '    }\n', '\n', '    /**\n', '     * @dev 获取所有私募代理人地址\n', '     * @return 所有私募代理人地址\n', '     */\n', '    function getPrivateSaleAgentAddresses() public onlyOwner view returns (address[]) {\n', '        return privateSaleAgents;\n', '    }\n', '\n', '    /**\n', '     * @dev 获得私募代理人地址已转出（售出）的 token 数量\n', '     * @param _addr 私募代理人地址\n', '     * @return 私募代理人地址的已转出的 token 数量\n', '     */\n', '    function privateSaleReleased(address _addr) public view returns (uint256) {\n', '        return privateSalesReleased[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev 获得 Partner 地址的提取限额\n', '     * @param _addr Partner 的地址\n', '     * @return Partner 地址的提取限额\n', '     */\n', '    function partnerAmountLimit(address _addr) public view returns (uint256) {\n', '        return partnersAmountLimit[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev 获得 Partner 地址的已提取 token 数量\n', '     * @param _addr Partner 的地址\n', '     * @return Partner 地址的已提取 token 数量\n', '     */\n', '    function partnerWithdrawed(address _addr) public view returns (uint256) {\n', '        return partnersWithdrawed[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev 给 Partner 地址分发 token\n', '     * @param _addr Partner 的地址\n', '     * @param _amount 分发的 token 数量\n', '     */\n', '    function withdrawToPartner(address _addr, uint256 _amount)\n', '        public onlyOwner\n', '    {\n', '        require(hasRole(_addr, ROLE_PARTNERWHITELIST));\n', '        // 仅允许在 2018/11/01 00:00:01 之前分发\n', '        require(block.timestamp < TIMESTAMP_OF_20181101000001);\n', '\n', '        uint256 newTotalReleased = totalPartnersReleased.add(_amount);\n', '        require(newTotalReleased <= FOOTSTONE_ROUND_AMOUNT.mul(10 ** uint256(decimals)));\n', '\n', '        uint256 newPartnerAmount = balanceOf(_addr).add(_amount);\n', '        require(newPartnerAmount <= partnersAmountLimit[_addr]);\n', '\n', '        totalPartnersReleased = newTotalReleased;\n', '        transfer(_addr, _amount);\n', '        emit TransferLog(owner, _addr, bytes32("withdrawToPartner"), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 计算 Partner 地址的可提取 token 数量，返回其与 _value 之间较小的那个值\n', '     * @param _addr Partner 的地址\n', '     * @param _value 想要提取的 token 数量\n', '     * @return Partner 地址当前可提取的 token 数量，\n', '     *         如果 _value 较小，则返回 _value 的数值\n', '     */\n', '    function _permittedPartnerTranferValue(address _addr, uint256 _value)\n', '        private view returns (uint256)\n', '    {\n', '        uint256 limit = balanceOf(_addr);\n', '        uint256 withdrawed = partnersWithdrawed[_addr];\n', '        uint256 total = withdrawed.add(limit);\n', '        uint256 time = block.timestamp;\n', '\n', '        require(limit > 0);\n', '\n', '        if (time >= TIMESTAMP_OF_20191101000001) {\n', '            // 2019/11/01 00:00:01 之后可提取 100%\n', '            limit = total;\n', '        } else if (time >= TIMESTAMP_OF_20190801000001) {\n', '            // 2019/08/01 00:00:01 之后最多提取 75%\n', '            limit = total.mul(75).div(100);\n', '        } else if (time >= TIMESTAMP_OF_20190501000001) {\n', '            // 2019/05/01 00:00:01 之后最多提取 50%\n', '            limit = total.div(2);\n', '        } else if (time >= TIMESTAMP_OF_20190201000001) {\n', '            // 2019/02/01 00:00:01 之后最多提取 25%\n', '            limit = total.mul(25).div(100);\n', '        } else {\n', '            // 2019/02/01 00:00:01 之前不可提取\n', '            limit = 0;\n', '        }\n', '        if (withdrawed >= limit) {\n', '            limit = 0;\n', '        } else {\n', '            limit = limit.sub(withdrawed);\n', '        }\n', '        if (_value < limit) {\n', '            limit = _value;\n', '        }\n', '        return limit;\n', '    }\n', '\n', '    /**\n', '     * @dev 重写基础合约的 transferFrom 函数\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        bool result;\n', '        address sender = msg.sender;\n', '\n', '        if (_from == owner) {\n', '            if (hasRole(sender, ROLE_PRIVATESALEWHITELIST)) {\n', '                // 仅允许在 2018/10/02 00:00:01 之前购买\n', '                require(block.timestamp < TIMESTAMP_OF_20181002000001);\n', '\n', '                result = _privateSaleTransferFromOwner(_to, _value);\n', '            } else {\n', '                revert();\n', '            }\n', '        } else {\n', '            result = super.transferFrom(_from, _to, _value);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev 通用额度提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawCommonCoin(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2018/11/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20181101000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawCommonCoin"), _amount);\n', '        totalCommonReleased = totalCommonReleased.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 团队预留额度1提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawToTeamStep1(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2019/02/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20190201000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawToTeamStep1"), _amount);\n', '        totalTeamReleased1 = totalTeamReleased1.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 团队预留额度2提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawToTeamStep2(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2019/11/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20191101000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawToTeamStep2"), _amount);\n', '        totalTeamReleased2 = totalTeamReleased2.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 团队预留额度3提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawToTeamStep3(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2020/11/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20201101000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawToTeamStep3"), _amount);\n', '        totalTeamReleased3 = totalTeamReleased3.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 团队预留额度4提取\n', '     * @param _amount 提取 token 数量\n', '     */\n', '    function withdrawToTeamStep4(uint256 _amount) public onlyOwner {\n', '        // 仅允许在 2021/11/01 00:00:01 之后提取\n', '        require(block.timestamp >= TIMESTAMP_OF_20211101000001);\n', '        require(transfer(ownerWallet, _amount));\n', '        emit TransferLog(owner, ownerWallet, bytes32("withdrawToTeamStep4"), _amount);\n', '        totalTeamReleased4 = totalTeamReleased4.add(_amount);\n', '    }\n', '\n', '    /**\n', '     * @dev 重写基础合约的 transfer 函数\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        bool result;\n', '        uint256 limit;\n', '\n', '        if (msg.sender == owner) {\n', '            limit = _ownerReleaseLimit();\n', '            uint256 newTotalOwnerReleased = totalOwnerReleased.add(_value);\n', '            require(newTotalOwnerReleased <= limit);\n', '            result = super.transfer(_to, _value);\n', '            totalOwnerReleased = newTotalOwnerReleased;\n', '        } else if (hasRole(msg.sender, ROLE_PARTNERWHITELIST)) {\n', '            limit = _permittedPartnerTranferValue(msg.sender, _value);\n', '            if (limit > 0) {\n', '                result = super.transfer(_to, limit);\n', '                partnersWithdrawed[msg.sender] = partnersWithdrawed[msg.sender].add(limit);\n', '            } else {\n', '                revert();\n', '            }\n', '        } else {\n', '            result = super.transfer(_to, _value);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev 计算 Owner 的转账额度\n', '     * @return Owner 的当前转账额度\n', '     */\n', '   function _ownerReleaseLimit() private view returns (uint256) {\n', '        uint256 time = block.timestamp;\n', '        uint256 limit;\n', '        uint256 amount;\n', '\n', '        // 基石轮额度作为默认限额\n', '        limit = FOOTSTONE_ROUND_AMOUNT.mul(10 ** uint256(decimals));\n', '        if (time >= TIMESTAMP_OF_20181001000001) {\n', '            // 2018/10/1 之后，最大限额需要增加私募剩余额度\n', '            amount = PRIVATE_SALE_AMOUNT.mul(10 ** uint256(decimals));\n', '            if (totalPrivateSalesReleased < amount) {\n', '                limit = limit.add(amount).sub(totalPrivateSalesReleased);\n', '            }\n', '        }\n', '        if (time >= TIMESTAMP_OF_20181101000001) {\n', '            // 2018/11/1 之后，最大限额需要增加通用提取额度中减去锁仓额度以外的额度\n', '            limit = limit.add(COMMON_PURPOSE_AMOUNT.sub(OWNER_LOCKED_IN_COMMON).mul(10 ** uint256(decimals)));\n', '        }\n', '        if (time >= TIMESTAMP_OF_20190201000001) {\n', '            // 2019/2/1 之后，最大限额需要增加团队预留额度1\n', '            limit = limit.add(TEAM_RESERVED_AMOUNT1.mul(10 ** uint256(decimals)));\n', '        }\n', '        if (time >= TIMESTAMP_OF_20190501000001) {\n', '            // 2019/5/1 之后，最大限额需要增加通用额度中的锁仓额度\n', '            limit = limit.add(OWNER_LOCKED_IN_COMMON.mul(10 ** uint256(decimals)));\n', '        }\n', '        if (time >= TIMESTAMP_OF_20191101000001) {\n', '            // 2019/11/1 之后，最大限额需要增加团队预留额度2\n', '            limit = limit.add(TEAM_RESERVED_AMOUNT2.mul(10 ** uint256(decimals)));\n', '        }\n', '        if (time >= TIMESTAMP_OF_20201101000001) {\n', '            // 2020/11/1 之后，最大限额需要增加团队预留额度3\n', '            limit = limit.add(TEAM_RESERVED_AMOUNT3.mul(10 ** uint256(decimals)));\n', '        }\n', '        if (time >= TIMESTAMP_OF_20211101000001) {\n', '            // 2021/11/1 之后，最大限额需要增加团队预留额度4\n', '            limit = limit.add(TEAM_RESERVED_AMOUNT4.mul(10 ** uint256(decimals)));\n', '        }\n', '        return limit;\n', '    }\n', '}']
