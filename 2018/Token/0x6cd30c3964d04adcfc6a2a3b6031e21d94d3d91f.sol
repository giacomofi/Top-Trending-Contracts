['// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// import &#39;ds-auth/auth.sol&#39;;\n', 'pragma solidity ^0.4.23;\n', '\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) public view returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        public\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        public\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        emit LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '}\n', '\n', '/// math.sol -- mixin for inline numerical wizardry\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function imin(int x, int y) internal pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int x, int y) internal pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', '    // It&#39;s O(log n), instead of O(n) for naive repeated multiplication.\n', '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint x, uint n) internal pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// import &#39;./IkuraStorage.sol&#39;;\n', '\n', '/**\n', ' *\n', ' * ロジックの更新に影響されない永続化データを保持するクラス\n', ' *\n', ' */\n', 'contract IkuraStorage is DSMath, DSAuth {\n', '  // オーナー（中央銀行）のアドレス\n', '  address[] ownerAddresses;\n', '\n', '  // 各アドレスのdJPYの口座残高\n', '  mapping(address => uint) coinBalances;\n', '\n', '  // 各アドレスのSHINJI tokenの口座残高\n', '  mapping(address => uint) tokenBalances;\n', '\n', '  // 各アドレスが指定したアドレスに対して許可する最大送金額\n', '  mapping(address => mapping (address => uint)) coinAllowances;\n', '\n', '  // dJPYの発行高\n', '  uint _totalSupply = 0;\n', '\n', '  // 手数料率\n', '  // 0.01pips = 1\n', '  // 例). 手数料を 0.05% とする場合は 500\n', '  uint _transferFeeRate = 500;\n', '\n', '  // 最低手数料額\n', '  // 1 = 1dJPY\n', '  // amount * 手数料率で算出した金額がここで設定した最低手数料を下回る場合は、最低手数料額を手数料とする\n', '  uint8 _transferMinimumFee = 5;\n', '\n', '  address tokenAddress;\n', '  address multiSigAddress;\n', '  address authorityAddress;\n', '\n', '  // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\n', '  //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\n', '  // 勿論テストは通らなくなるので、テストが通ったら試してね\n', '  constructor() public DSAuth() {\n', '    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\n', '    owner = controllerAddress;\n', '    LogSetOwner(controllerAddress);*/\n', '  }\n', '\n', '  function changeToken(address tokenAddress_) public auth {\n', '    tokenAddress = tokenAddress_;\n', '  }\n', '\n', '  function changeAssociation(address multiSigAddress_) public auth {\n', '    multiSigAddress = multiSigAddress_;\n', '  }\n', '\n', '  function changeAuthority(address authorityAddress_) public auth {\n', '    authorityAddress = authorityAddress_;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _totalSupply\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 総発行額を返す\n', '   *\n', '   * @return 総発行額\n', '   */\n', '  function totalSupply() public view auth returns (uint) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '   * 総発行数を増やす（mintと並行して呼ばれることを想定）\n', '   *\n', '   * @param amount 鋳造数\n', '   */\n', '  function addTotalSupply(uint amount) public auth {\n', '    _totalSupply = add(_totalSupply, amount);\n', '  }\n', '\n', '  /**\n', '   * 総発行数を減らす（burnと並行して呼ばれることを想定）\n', '   *\n', '   * @param amount 鋳造数\n', '   */\n', '  function subTotalSupply(uint amount) public auth {\n', '    _totalSupply = sub(_totalSupply, amount);\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _transferFeeRate\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 手数料率を返す\n', '   *\n', '   * @return 現在の手数料率\n', '   */\n', '  function transferFeeRate() public view auth returns (uint) {\n', '    return _transferFeeRate;\n', '  }\n', '\n', '  /**\n', '   * 手数料率を変更する\n', '   *\n', '   * @param newTransferFeeRate 新しい手数料率\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\n', '   */\n', '  function setTransferFeeRate(uint newTransferFeeRate) public auth returns (bool) {\n', '    _transferFeeRate = newTransferFeeRate;\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _transferMinimumFee\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 最低手数料返す\n', '   *\n', '   * @return 現在の最低手数料\n', '   */\n', '  function transferMinimumFee() public view auth returns (uint8) {\n', '    return _transferMinimumFee;\n', '  }\n', '\n', '  /**\n', '   * 最低手数料を変更する\n', '   *\n', '   * @param newTransferMinimumFee 新しい最低手数料\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\n', '   */\n', '  function setTransferMinimumFee(uint8 newTransferMinimumFee) public auth {\n', '    _transferMinimumFee = newTransferMinimumFee;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for ownerAddresses\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーアドレスをオーナーの一覧に追加する\n', '   *\n', '   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\n', '   * トークンの所有者 = オーナーという扱いになったので、この配列に含まれるアドレスの一覧は\n', '   * 手数料からの収益の分配をする時に利用するだけで、オーナーかどうかの判定には利用しない\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addOwnerAddress(address addr) internal returns (bool) {\n', '    ownerAddresses.push(addr);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーアドレスをオーナーの一覧から削除する\n', '   *\n', '   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\n', '   *\n', '   * @param addr オーナーに属するユーザーのアドレス\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function removeOwnerAddress(address addr) internal returns (bool) {\n', '    uint i = 0;\n', '\n', '    while (ownerAddresses[i] != addr) { i++; }\n', '\n', '    while (i < ownerAddresses.length - 1) {\n', '      ownerAddresses[i] = ownerAddresses[i + 1];\n', '      i++;\n', '    }\n', '\n', '    ownerAddresses.length--;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 最初のオーナー（contractをdeployしたユーザー）のアドレスを返す\n', '   *\n', '   * @return 最初のオーナーのアドレス\n', '   */\n', '  function primaryOwner() public view auth returns (address) {\n', '    return ownerAddresses[0];\n', '  }\n', '\n', '  /**\n', '   * 指定したアドレスがオーナーアドレスに登録されているか返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return オーナーに含まれている場合はtrue、含まれていない場合はfalse\n', '   */\n', '  function isOwnerAddress(address addr) public view auth returns (bool) {\n', '    for (uint i = 0; i < ownerAddresses.length; i++) {\n', '      if (ownerAddresses[i] == addr) return true;\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * オーナー数を返す\n', '   *\n', '   * @return オーナー数\n', '   */\n', '  function numOwnerAddress() public view auth returns (uint) {\n', '    return ownerAddresses.length;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for coinBalances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーのdJPY残高を返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return dJPY残高\n', '   */\n', '  function coinBalance(address addr) public view auth returns (uint) {\n', '    return coinBalances[addr];\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのdJPYの残高を増やす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addCoinBalance(address addr, uint amount) public auth returns (bool) {\n', '    coinBalances[addr] = add(coinBalances[addr], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのdJPYの残高を減らす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subCoinBalance(address addr, uint amount) public auth returns (bool) {\n', '    coinBalances[addr] = sub(coinBalances[addr], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for tokenBalances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return SHINJIトークン残高\n', '   */\n', '  function tokenBalance(address addr) public view auth returns (uint) {\n', '    return tokenBalances[addr];\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を増やす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addTokenBalance(address addr, uint amount) public auth returns (bool) {\n', '    tokenBalances[addr] = add(tokenBalances[addr], amount);\n', '\n', '    if (tokenBalances[addr] > 0 && !isOwnerAddress(addr)) {\n', '      addOwnerAddress(addr);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を減らす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subTokenBalance(address addr, uint amount) public auth returns (bool) {\n', '    tokenBalances[addr] = sub(tokenBalances[addr], amount);\n', '\n', '    if (tokenBalances[addr] <= 0) {\n', '      removeOwnerAddress(addr);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for coinAllowances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 送金許可金額を返す\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   *\n', '   * @return 送金許可金額\n', '   */\n', '  function coinAllowance(address owner_, address spender) public view auth returns (uint) {\n', '    return coinAllowances[owner_][spender];\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した金額だけ増やす\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 金額\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = add(coinAllowances[owner_][spender], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した金額だけ減らす\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 金額\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = sub(coinAllowances[owner_][spender], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した値に更新する\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 送金許可金額\n', '   *\n', '   * @return 指定に成功したらtrue、失敗したらfalse\n', '   */\n', '  function setCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = amount;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 権限チェック用関数のoverride\n', '   *\n', '   * @param src 実行者アドレス\n', '   * @param sig 実行関数の識別子\n', '   *\n', '   * @return 実行が許可されていればtrue、そうでなければfalse\n', '   */\n', '  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '    sig; // #HACK\n', '\n', '    return  src == address(this) ||\n', '            src == owner ||\n', '            src == tokenAddress ||\n', '            src == authorityAddress ||\n', '            src == multiSigAddress;\n', '  }\n', '}\n', '\n', '/**\n', ' *\n', ' * アクセス権限を制御するクラス\n', ' *\n', ' */\n', 'contract IkuraAuthority is DSAuthority, DSAuth {\n', '  // データの永続化ストレージ\n', '  IkuraStorage tokenStorage;\n', '\n', '  // 対称アクションが投票を必要としている場かどうかのマッピング\n', '  // #TODO 後から投票アクションを増減させたいのであれば、これもstorageクラスに持っていったほうがよい？\n', '  mapping(bytes4 => bool) actionsWithToken;\n', '\n', '  // 誰からも呼び出すことができないアクション\n', '  mapping(bytes4 => bool) actionsForbidden;\n', '\n', '  // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\n', '  //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\n', '  // 勿論テストは通らなくなるので、テストが通ったら試してね\n', '  constructor() public DSAuth() {\n', '    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\n', '    owner = controllerAddress;\n', '    LogSetOwner(controllerAddress);*/\n', '  }\n', '\n', '  /**\n', '   * ストレージを更新する\n', '   *\n', '   * @param storage_ 新しいストレージのアドレス\n', '   */\n', '  function changeStorage(address storage_) public auth {\n', '    tokenStorage = IkuraStorage(storage_);\n', '\n', '    // トークンの保有率による承認プロセスが必要なアクションを追加\n', '    actionsWithToken[stringToSig(&#39;mint(uint256)&#39;)] = true;\n', '    actionsWithToken[stringToSig(&#39;burn(uint256)&#39;)] = true;\n', '    actionsWithToken[stringToSig(&#39;confirmProposal(string, uint256)&#39;)] = true;\n', '    actionsWithToken[stringToSig(&#39;numberOfProposals(string)&#39;)] = true;\n', '\n', '    // 誰からも呼び出すことができないアクションを追加\n', '    actionsForbidden[stringToSig(&#39;forbiddenAction()&#39;)] = true;\n', '  }\n', '\n', '  /**\n', '   * 権限チェックのoverride\n', '   * オーナーのみ許可する\n', '   *\n', '   * @param src 実行者アドレス\n', '   * @param dst 実行contract\n', '   * @param sig 実行関数の識別子\n', '   *\n', '   * @return 呼び出し権限を持つ場合はtrue、そうでない場合はfalse\n', '   */\n', '  function canCall(address src, address dst, bytes4 sig) public constant returns (bool) {\n', '    // 投票が必要なアクションの場合には別ロジックでチェックを行う\n', '    if (actionsWithToken[sig]) return canCallWithAssociation(src, dst);\n', '\n', '    // 誰からも呼ぶことができないアクション\n', '    if (actionsForbidden[sig]) return canCallWithNoOne();\n', '\n', '    // デフォルトの権限チェック\n', '    return canCallDefault(src);\n', '  }\n', '\n', '  /**\n', '   * デフォルトではオーナーメンバー\u3000かどうかをチェックする\n', '   *\n', '   * @return オーナーメンバーである場合はtrue、そうでない場合はfalse\n', '   */\n', '  function canCallDefault(address src) internal view returns (bool) {\n', '    return tokenStorage.isOwnerAddress(src);\n', '  }\n', '\n', '  /**\n', '   * トークン保有者による投票が必要なアクション\n', '   *\n', '   * @param src 実行者アドレス\n', '   * @param dst 実行contract\n', '   *\n', '   * @return アクションを許可する場合はtrue、却下された場合はfalse\n', '   */\n', '  function canCallWithAssociation(address src, address dst) internal view returns (bool) {\n', '    // warning抑制\n', '    dst;\n', '\n', '    return tokenStorage.isOwnerAddress(src) &&\n', '           (tokenStorage.numOwnerAddress() == 1 || tokenStorage.tokenBalance(src) > 0);\n', '  }\n', '\n', '  /**\n', '   * 誰からも呼ぶことのできないアクション\n', '   * テスト用の関数です\n', '   *\n', '   * @return 常にfalseを返す\n', '   */\n', '  function canCallWithNoOne() internal pure returns (bool) {\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * 関数定義からfunction identifierへ変換する\n', '   *\n', '   * #see http://solidity.readthedocs.io/en/develop/units-and-global-variables.html#block-and-transaction-properties\n', '   *\n', '   * @param str 関数定義\n', '   *\n', '   * @return ハッシュ化されたキーの4バイト\n', '   */\n', '  function stringToSig(string str) internal pure returns (bytes4) {\n', '    return bytes4(keccak256(str));\n', '  }\n', '}']
['// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', "// import 'ds-auth/auth.sol';\n", 'pragma solidity ^0.4.23;\n', '\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) public view returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        public\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        public\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        emit LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '}\n', '\n', '/// math.sol -- mixin for inline numerical wizardry\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function imin(int x, int y) internal pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int x, int y) internal pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint x, uint n) internal pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', "// import './IkuraStorage.sol';\n", '\n', '/**\n', ' *\n', ' * ロジックの更新に影響されない永続化データを保持するクラス\n', ' *\n', ' */\n', 'contract IkuraStorage is DSMath, DSAuth {\n', '  // オーナー（中央銀行）のアドレス\n', '  address[] ownerAddresses;\n', '\n', '  // 各アドレスのdJPYの口座残高\n', '  mapping(address => uint) coinBalances;\n', '\n', '  // 各アドレスのSHINJI tokenの口座残高\n', '  mapping(address => uint) tokenBalances;\n', '\n', '  // 各アドレスが指定したアドレスに対して許可する最大送金額\n', '  mapping(address => mapping (address => uint)) coinAllowances;\n', '\n', '  // dJPYの発行高\n', '  uint _totalSupply = 0;\n', '\n', '  // 手数料率\n', '  // 0.01pips = 1\n', '  // 例). 手数料を 0.05% とする場合は 500\n', '  uint _transferFeeRate = 500;\n', '\n', '  // 最低手数料額\n', '  // 1 = 1dJPY\n', '  // amount * 手数料率で算出した金額がここで設定した最低手数料を下回る場合は、最低手数料額を手数料とする\n', '  uint8 _transferMinimumFee = 5;\n', '\n', '  address tokenAddress;\n', '  address multiSigAddress;\n', '  address authorityAddress;\n', '\n', '  // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\n', '  //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\n', '  // 勿論テストは通らなくなるので、テストが通ったら試してね\n', '  constructor() public DSAuth() {\n', '    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\n', '    owner = controllerAddress;\n', '    LogSetOwner(controllerAddress);*/\n', '  }\n', '\n', '  function changeToken(address tokenAddress_) public auth {\n', '    tokenAddress = tokenAddress_;\n', '  }\n', '\n', '  function changeAssociation(address multiSigAddress_) public auth {\n', '    multiSigAddress = multiSigAddress_;\n', '  }\n', '\n', '  function changeAuthority(address authorityAddress_) public auth {\n', '    authorityAddress = authorityAddress_;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _totalSupply\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 総発行額を返す\n', '   *\n', '   * @return 総発行額\n', '   */\n', '  function totalSupply() public view auth returns (uint) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '   * 総発行数を増やす（mintと並行して呼ばれることを想定）\n', '   *\n', '   * @param amount 鋳造数\n', '   */\n', '  function addTotalSupply(uint amount) public auth {\n', '    _totalSupply = add(_totalSupply, amount);\n', '  }\n', '\n', '  /**\n', '   * 総発行数を減らす（burnと並行して呼ばれることを想定）\n', '   *\n', '   * @param amount 鋳造数\n', '   */\n', '  function subTotalSupply(uint amount) public auth {\n', '    _totalSupply = sub(_totalSupply, amount);\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _transferFeeRate\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 手数料率を返す\n', '   *\n', '   * @return 現在の手数料率\n', '   */\n', '  function transferFeeRate() public view auth returns (uint) {\n', '    return _transferFeeRate;\n', '  }\n', '\n', '  /**\n', '   * 手数料率を変更する\n', '   *\n', '   * @param newTransferFeeRate 新しい手数料率\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\n', '   */\n', '  function setTransferFeeRate(uint newTransferFeeRate) public auth returns (bool) {\n', '    _transferFeeRate = newTransferFeeRate;\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _transferMinimumFee\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 最低手数料返す\n', '   *\n', '   * @return 現在の最低手数料\n', '   */\n', '  function transferMinimumFee() public view auth returns (uint8) {\n', '    return _transferMinimumFee;\n', '  }\n', '\n', '  /**\n', '   * 最低手数料を変更する\n', '   *\n', '   * @param newTransferMinimumFee 新しい最低手数料\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\n', '   */\n', '  function setTransferMinimumFee(uint8 newTransferMinimumFee) public auth {\n', '    _transferMinimumFee = newTransferMinimumFee;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for ownerAddresses\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーアドレスをオーナーの一覧に追加する\n', '   *\n', '   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\n', '   * トークンの所有者 = オーナーという扱いになったので、この配列に含まれるアドレスの一覧は\n', '   * 手数料からの収益の分配をする時に利用するだけで、オーナーかどうかの判定には利用しない\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addOwnerAddress(address addr) internal returns (bool) {\n', '    ownerAddresses.push(addr);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーアドレスをオーナーの一覧から削除する\n', '   *\n', '   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\n', '   *\n', '   * @param addr オーナーに属するユーザーのアドレス\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function removeOwnerAddress(address addr) internal returns (bool) {\n', '    uint i = 0;\n', '\n', '    while (ownerAddresses[i] != addr) { i++; }\n', '\n', '    while (i < ownerAddresses.length - 1) {\n', '      ownerAddresses[i] = ownerAddresses[i + 1];\n', '      i++;\n', '    }\n', '\n', '    ownerAddresses.length--;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 最初のオーナー（contractをdeployしたユーザー）のアドレスを返す\n', '   *\n', '   * @return 最初のオーナーのアドレス\n', '   */\n', '  function primaryOwner() public view auth returns (address) {\n', '    return ownerAddresses[0];\n', '  }\n', '\n', '  /**\n', '   * 指定したアドレスがオーナーアドレスに登録されているか返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return オーナーに含まれている場合はtrue、含まれていない場合はfalse\n', '   */\n', '  function isOwnerAddress(address addr) public view auth returns (bool) {\n', '    for (uint i = 0; i < ownerAddresses.length; i++) {\n', '      if (ownerAddresses[i] == addr) return true;\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * オーナー数を返す\n', '   *\n', '   * @return オーナー数\n', '   */\n', '  function numOwnerAddress() public view auth returns (uint) {\n', '    return ownerAddresses.length;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for coinBalances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーのdJPY残高を返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return dJPY残高\n', '   */\n', '  function coinBalance(address addr) public view auth returns (uint) {\n', '    return coinBalances[addr];\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのdJPYの残高を増やす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addCoinBalance(address addr, uint amount) public auth returns (bool) {\n', '    coinBalances[addr] = add(coinBalances[addr], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのdJPYの残高を減らす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subCoinBalance(address addr, uint amount) public auth returns (bool) {\n', '    coinBalances[addr] = sub(coinBalances[addr], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for tokenBalances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return SHINJIトークン残高\n', '   */\n', '  function tokenBalance(address addr) public view auth returns (uint) {\n', '    return tokenBalances[addr];\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を増やす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addTokenBalance(address addr, uint amount) public auth returns (bool) {\n', '    tokenBalances[addr] = add(tokenBalances[addr], amount);\n', '\n', '    if (tokenBalances[addr] > 0 && !isOwnerAddress(addr)) {\n', '      addOwnerAddress(addr);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を減らす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subTokenBalance(address addr, uint amount) public auth returns (bool) {\n', '    tokenBalances[addr] = sub(tokenBalances[addr], amount);\n', '\n', '    if (tokenBalances[addr] <= 0) {\n', '      removeOwnerAddress(addr);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for coinAllowances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 送金許可金額を返す\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   *\n', '   * @return 送金許可金額\n', '   */\n', '  function coinAllowance(address owner_, address spender) public view auth returns (uint) {\n', '    return coinAllowances[owner_][spender];\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した金額だけ増やす\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 金額\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = add(coinAllowances[owner_][spender], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した金額だけ減らす\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 金額\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = sub(coinAllowances[owner_][spender], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した値に更新する\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 送金許可金額\n', '   *\n', '   * @return 指定に成功したらtrue、失敗したらfalse\n', '   */\n', '  function setCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = amount;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 権限チェック用関数のoverride\n', '   *\n', '   * @param src 実行者アドレス\n', '   * @param sig 実行関数の識別子\n', '   *\n', '   * @return 実行が許可されていればtrue、そうでなければfalse\n', '   */\n', '  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '    sig; // #HACK\n', '\n', '    return  src == address(this) ||\n', '            src == owner ||\n', '            src == tokenAddress ||\n', '            src == authorityAddress ||\n', '            src == multiSigAddress;\n', '  }\n', '}\n', '\n', '/**\n', ' *\n', ' * アクセス権限を制御するクラス\n', ' *\n', ' */\n', 'contract IkuraAuthority is DSAuthority, DSAuth {\n', '  // データの永続化ストレージ\n', '  IkuraStorage tokenStorage;\n', '\n', '  // 対称アクションが投票を必要としている場かどうかのマッピング\n', '  // #TODO 後から投票アクションを増減させたいのであれば、これもstorageクラスに持っていったほうがよい？\n', '  mapping(bytes4 => bool) actionsWithToken;\n', '\n', '  // 誰からも呼び出すことができないアクション\n', '  mapping(bytes4 => bool) actionsForbidden;\n', '\n', '  // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\n', '  //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\n', '  // 勿論テストは通らなくなるので、テストが通ったら試してね\n', '  constructor() public DSAuth() {\n', '    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\n', '    owner = controllerAddress;\n', '    LogSetOwner(controllerAddress);*/\n', '  }\n', '\n', '  /**\n', '   * ストレージを更新する\n', '   *\n', '   * @param storage_ 新しいストレージのアドレス\n', '   */\n', '  function changeStorage(address storage_) public auth {\n', '    tokenStorage = IkuraStorage(storage_);\n', '\n', '    // トークンの保有率による承認プロセスが必要なアクションを追加\n', "    actionsWithToken[stringToSig('mint(uint256)')] = true;\n", "    actionsWithToken[stringToSig('burn(uint256)')] = true;\n", "    actionsWithToken[stringToSig('confirmProposal(string, uint256)')] = true;\n", "    actionsWithToken[stringToSig('numberOfProposals(string)')] = true;\n", '\n', '    // 誰からも呼び出すことができないアクションを追加\n', "    actionsForbidden[stringToSig('forbiddenAction()')] = true;\n", '  }\n', '\n', '  /**\n', '   * 権限チェックのoverride\n', '   * オーナーのみ許可する\n', '   *\n', '   * @param src 実行者アドレス\n', '   * @param dst 実行contract\n', '   * @param sig 実行関数の識別子\n', '   *\n', '   * @return 呼び出し権限を持つ場合はtrue、そうでない場合はfalse\n', '   */\n', '  function canCall(address src, address dst, bytes4 sig) public constant returns (bool) {\n', '    // 投票が必要なアクションの場合には別ロジックでチェックを行う\n', '    if (actionsWithToken[sig]) return canCallWithAssociation(src, dst);\n', '\n', '    // 誰からも呼ぶことができないアクション\n', '    if (actionsForbidden[sig]) return canCallWithNoOne();\n', '\n', '    // デフォルトの権限チェック\n', '    return canCallDefault(src);\n', '  }\n', '\n', '  /**\n', '   * デフォルトではオーナーメンバー\u3000かどうかをチェックする\n', '   *\n', '   * @return オーナーメンバーである場合はtrue、そうでない場合はfalse\n', '   */\n', '  function canCallDefault(address src) internal view returns (bool) {\n', '    return tokenStorage.isOwnerAddress(src);\n', '  }\n', '\n', '  /**\n', '   * トークン保有者による投票が必要なアクション\n', '   *\n', '   * @param src 実行者アドレス\n', '   * @param dst 実行contract\n', '   *\n', '   * @return アクションを許可する場合はtrue、却下された場合はfalse\n', '   */\n', '  function canCallWithAssociation(address src, address dst) internal view returns (bool) {\n', '    // warning抑制\n', '    dst;\n', '\n', '    return tokenStorage.isOwnerAddress(src) &&\n', '           (tokenStorage.numOwnerAddress() == 1 || tokenStorage.tokenBalance(src) > 0);\n', '  }\n', '\n', '  /**\n', '   * 誰からも呼ぶことのできないアクション\n', '   * テスト用の関数です\n', '   *\n', '   * @return 常にfalseを返す\n', '   */\n', '  function canCallWithNoOne() internal pure returns (bool) {\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * 関数定義からfunction identifierへ変換する\n', '   *\n', '   * #see http://solidity.readthedocs.io/en/develop/units-and-global-variables.html#block-and-transaction-properties\n', '   *\n', '   * @param str 関数定義\n', '   *\n', '   * @return ハッシュ化されたキーの4バイト\n', '   */\n', '  function stringToSig(string str) internal pure returns (bytes4) {\n', '    return bytes4(keccak256(str));\n', '  }\n', '}']
