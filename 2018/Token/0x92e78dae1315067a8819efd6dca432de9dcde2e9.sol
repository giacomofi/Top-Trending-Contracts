['pragma solidity ^0.4.20;\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    function approve(address spender, uint256 value) returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract OwnableWithDAO{\n', '\n', '    address public owner;\n', '    address public daoContract;\n', '\n', '    function OwnableWithDAO(){\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyDAO(){\n', '        require(msg.sender == daoContract);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public{\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '\n', '    function setDAOContract(address newDAO) onlyOwner public {\n', '        require(newDAO != address(0));\n', '        daoContract = newDAO;\n', '    }\n', '\n', '}\n', '\n', 'contract Stoppable is OwnableWithDAO{\n', '\n', '    bool public stopped;\n', '    mapping (address => bool) public blackList; // адреса которым запретить покупку токенов\n', '\n', '    modifier block{\n', '        require(!blackList[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function addToBlackList(address _address) onlyOwner{\n', '        blackList[_address] = true;\n', '    }\n', '\n', '    function removeFromBlackList(address _address) onlyOwner{\n', '        blackList[_address] = false;\n', '    }\n', '\n', '    modifier stoppable{\n', '        require(!stopped);\n', '        _;\n', '    }\n', '\n', '    function stop() onlyDAO{\n', '        stopped = true;\n', '    }\n', '\n', '    function start() onlyDAO{\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Stoppable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) stoppable block returns (bool) {\n', '        require(msg.sender !=_to);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract MintableToken is StandardToken {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract BurnableToken is MintableToken {\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint _value) public {\n', '        require(_value > 0);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint indexed value);\n', '\n', '}\n', '\n', 'contract DAOToken is BurnableToken{\n', '\n', '    string public name = "Veros";\n', '\n', '    string public symbol = "VRS";\n', '\n', '    uint32 public constant decimals = 6;\n', '\n', '    uint public INITIAL_SUPPLY = 100000000 * 1000000;\n', '\n', '    uint public coin = 1000000;\n', '\n', '    address public StabilizationFund;\n', '    address public MigrationFund;\n', '    address public ProjectFund;\n', '    address public Bounty;\n', '    address public Airdrop;\n', '    address public Founders;\n', '\n', '\n', '\n', '    function DAOToken() {\n', '        mint(msg.sender, INITIAL_SUPPLY);\n', '        //запретить дальнейший минтинг\n', '        finishMinting();\n', '\n', '        StabilizationFund = 0x6280A4a4Cb8E589a1F843284e7e2e63edD9E6A4f;\n', '        MigrationFund = 0x3bc441E70bb238537e43CE68763530D4e23901D6;\n', '        ProjectFund = 0xf09D6EE3149bB81556c0D78e95c9bBD12F373bE4;\n', '        Bounty = 0x551d3Cf16293196d82C6DD8f17e522B1C1B48b35;\n', '        Airdrop = 0x396A8607237a13121b67a4f8F1b87A47b1A296BA;\n', '        Founders = 0x63f80C7aF415Fdd84D5568Aeff8ae134Ef0C78c5;\n', '\n', '        // отправляем токены на указанные фонды\n', '        transfer(StabilizationFund, 15000000 * coin);\n', '        transfer(MigrationFund, 12000000 * coin);\n', '        transfer(ProjectFund, 40000000 * coin);\n', '        transfer(Bounty, 3000000 * coin);\n', '        transfer(Airdrop, 2000000 * coin);\n', '        transfer(Founders, 3000000 * coin);\n', '\n', '    }\n', '\n', '    function changeName(string _name, string _symbol) onlyOwner public{\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    function approve(address spender, uint256 value) returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract OwnableWithDAO{\n', '\n', '    address public owner;\n', '    address public daoContract;\n', '\n', '    function OwnableWithDAO(){\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner(){\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyDAO(){\n', '        require(msg.sender == daoContract);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public{\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '\n', '    function setDAOContract(address newDAO) onlyOwner public {\n', '        require(newDAO != address(0));\n', '        daoContract = newDAO;\n', '    }\n', '\n', '}\n', '\n', 'contract Stoppable is OwnableWithDAO{\n', '\n', '    bool public stopped;\n', '    mapping (address => bool) public blackList; // адреса которым запретить покупку токенов\n', '\n', '    modifier block{\n', '        require(!blackList[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function addToBlackList(address _address) onlyOwner{\n', '        blackList[_address] = true;\n', '    }\n', '\n', '    function removeFromBlackList(address _address) onlyOwner{\n', '        blackList[_address] = false;\n', '    }\n', '\n', '    modifier stoppable{\n', '        require(!stopped);\n', '        _;\n', '    }\n', '\n', '    function stop() onlyDAO{\n', '        stopped = true;\n', '    }\n', '\n', '    function start() onlyDAO{\n', '        stopped = false;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Stoppable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) stoppable block returns (bool) {\n', '        require(msg.sender !=_to);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract MintableToken is StandardToken {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract BurnableToken is MintableToken {\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint _value) public {\n', '        require(_value > 0);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint indexed value);\n', '\n', '}\n', '\n', 'contract DAOToken is BurnableToken{\n', '\n', '    string public name = "Veros";\n', '\n', '    string public symbol = "VRS";\n', '\n', '    uint32 public constant decimals = 6;\n', '\n', '    uint public INITIAL_SUPPLY = 100000000 * 1000000;\n', '\n', '    uint public coin = 1000000;\n', '\n', '    address public StabilizationFund;\n', '    address public MigrationFund;\n', '    address public ProjectFund;\n', '    address public Bounty;\n', '    address public Airdrop;\n', '    address public Founders;\n', '\n', '\n', '\n', '    function DAOToken() {\n', '        mint(msg.sender, INITIAL_SUPPLY);\n', '        //запретить дальнейший минтинг\n', '        finishMinting();\n', '\n', '        StabilizationFund = 0x6280A4a4Cb8E589a1F843284e7e2e63edD9E6A4f;\n', '        MigrationFund = 0x3bc441E70bb238537e43CE68763530D4e23901D6;\n', '        ProjectFund = 0xf09D6EE3149bB81556c0D78e95c9bBD12F373bE4;\n', '        Bounty = 0x551d3Cf16293196d82C6DD8f17e522B1C1B48b35;\n', '        Airdrop = 0x396A8607237a13121b67a4f8F1b87A47b1A296BA;\n', '        Founders = 0x63f80C7aF415Fdd84D5568Aeff8ae134Ef0C78c5;\n', '\n', '        // отправляем токены на указанные фонды\n', '        transfer(StabilizationFund, 15000000 * coin);\n', '        transfer(MigrationFund, 12000000 * coin);\n', '        transfer(ProjectFund, 40000000 * coin);\n', '        transfer(Bounty, 3000000 * coin);\n', '        transfer(Airdrop, 2000000 * coin);\n', '        transfer(Founders, 3000000 * coin);\n', '\n', '    }\n', '\n', '    function changeName(string _name, string _symbol) onlyOwner public{\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '}']
