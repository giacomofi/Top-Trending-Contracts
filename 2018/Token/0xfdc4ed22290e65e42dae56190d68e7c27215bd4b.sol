['/**\n', '    Copyright (c) 2018 Taylor OÃœ\n', '\n', '    Permission is hereby granted, free of charge, to any person obtaining a copy\n', '    of this software and associated documentation files (the "Software"), to deal\n', '    in the Software without restriction, including without limitation the rights\n', '    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '    copies of the Software, and to permit persons to whom the Software is\n', '    furnished to do so, subject to the following conditions:\n', '\n', '    The above copyright notice and this permission notice shall be included in\n', '    all copies or substantial portions of the Software.\n', '\n', '    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n', '    THE SOFTWARE.\n', '\n', '    based on the contracts of OpenZeppelin:\n', '    https://github.com/OpenZeppelin/zeppelin-solidity/tree/master/contracts\n', '\n', '**/\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', '  @title TaylorToken\n', '**/\n', 'contract TaylorToken is Ownable{\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '        EVENTS\n', '    **/\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed _owner, uint256 _amount);\n', '    /**\n', '        CONTRACT VARIABLES\n', '    **/\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    //this address can transfer even when transfer is disabled.\n', '    mapping (address => bool) public whitelistedTransfer;\n', '    mapping (address => bool) public whitelistedBurn;\n', '\n', '    string public name = "Taylor";\n', '    string public symbol = "TAY";\n', '    uint8 public decimals = 18;\n', '    uint256 constant internal DECIMAL_CASES = 10**18;\n', '    uint256 public totalSupply = 10**7 * DECIMAL_CASES;\n', '    bool public transferable = false;\n', '\n', '    /**\n', '        MODIFIERS\n', '    **/\n', '    modifier onlyWhenTransferable(){\n', '      if(!whitelistedTransfer[msg.sender]){\n', '        require(transferable);\n', '      }\n', '      _;\n', '    }\n', '\n', '    /**\n', '        CONSTRUCTOR\n', '    **/\n', '\n', '    /**\n', '      @dev Constructor function executed on contract creation\n', '    **/\n', '    function TaylorToken()\n', '      Ownable()\n', '      public\n', '    {\n', '      balances[owner] = balances[owner].add(totalSupply);\n', '      whitelistedTransfer[msg.sender] = true;\n', '      whitelistedBurn[msg.sender] = true;\n', '      Transfer(address(0),owner, totalSupply);\n', '    }\n', '\n', '    /**\n', '        OWNER ONLY FUNCTIONS\n', '    **/\n', '\n', '    /**\n', '      @dev Activates the trasfer for all users\n', '    **/\n', '    function activateTransfers()\n', '      public\n', '      onlyOwner\n', '    {\n', '      transferable = true;\n', '    }\n', '\n', '    /**\n', '      @dev Allows the owner to add addresse that can bypass the\n', '      transfer lock. Eg: ICO contract, TGE contract.\n', '      @param _address address Address to be added\n', '    **/\n', '    function addWhitelistedTransfer(address _address)\n', '      public\n', '      onlyOwner\n', '    {\n', '      whitelistedTransfer[_address] = true;\n', '    }\n', '\n', '    /**\n', '      @dev Sends all avaible TAY to the TGE contract to be properly\n', '      distribute\n', '      @param _tgeAddress address Address of the token distribution\n', '      contract\n', '    **/\n', '    function distribute(address _tgeAddress)\n', '      public\n', '      onlyOwner\n', '    {\n', '      whitelistedTransfer[_tgeAddress] = true;\n', '      transfer(_tgeAddress, balances[owner]);\n', '    }\n', '\n', '\n', '    /**\n', '      @dev Allows the owner to add addresse that can burn tokens\n', '      Eg: ICO contract, TGE contract.\n', '      @param _address address Address to be added\n', '    **/\n', '    function addWhitelistedBurn(address _address)\n', '      public\n', '      onlyOwner\n', '    {\n', '      whitelistedBurn[_address] = true;\n', '    }\n', '\n', '    /**\n', '        PUBLIC FUNCTIONS\n', '    **/\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '      public\n', '      onlyWhenTransferable\n', '      returns (bool success)\n', '    {\n', '      require(_to != address(0));\n', '      require(_value <= balances[msg.sender]);\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    }\n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '    function transferFrom\n', '      (address _from,\n', '        address _to,\n', '        uint256 _value)\n', '        public\n', '        onlyWhenTransferable\n', '        returns (bool success) {\n', '      require(_to != address(0));\n', '      require(_value <= balances[_from]);\n', '      require(_value <= allowed[_from][msg.sender]);\n', '\n', '      balances[_from] = balances[_from].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    }\n', '\n', '    /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    For security reasons, if one need to change the value from a existing allowance, it must furst sets\n', '    it to zero and then sets the new value\n', '\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approve(address _spender, uint256 _value)\n', '      public\n', '      onlyWhenTransferable\n', '      returns (bool success)\n', '    {\n', '      allowed[msg.sender][_spender] = _value;\n', '      Approval(msg.sender, _spender, _value);\n', '      return true;\n', '    }\n', '\n', '      /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue)\n', '      public\n', '      returns (bool)\n', '    {\n', '      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '      return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue)\n', '      public\n', '      returns (bool)\n', '    {\n', '      uint oldValue = allowed[msg.sender][_spender];\n', '      if (_subtractedValue > oldValue) {\n', '        allowed[msg.sender][_spender] = 0;\n', '      } else {\n', '        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '      }\n', '      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '      return true;\n', '    }\n', '\n', '    /**\n', '      @dev Allows for msg.sender to burn his on tokens\n', '      @param _amount uint256 The amount of tokens to be burned\n', '    **/\n', '    function burn(uint256 _amount)\n', '      public\n', '      returns (bool success)\n', '    {\n', '      require(whitelistedBurn[msg.sender]);\n', '      require(_amount <= balances[msg.sender]);\n', '      balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '      totalSupply =  totalSupply.sub(_amount);\n', '      Burn(msg.sender, _amount);\n', '      return true;\n', '    }\n', '\n', '\n', '    /**\n', '        CONSTANT FUNCTIONS\n', '    **/\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) view public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowance(address _owner, address _spender)\n', '      view\n', '      public\n', '      returns (uint256 remaining)\n', '    {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event Released(uint256 amount);\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  TaylorToken public token;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  uint256 public released;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _token The token to be vested\n', '   */\n', '  function TokenVesting(address _beneficiary,address _token, uint256 _start, uint256 _cliff, uint256 _duration) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    duration = _duration;\n', '    token = TaylorToken(_token);\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   */\n', '  function release() public {\n', '    uint256 unreleased = releasableAmount();\n', '    require(unreleased > 0);\n', '\n', '    released = released.add(unreleased);\n', '\n', '    token.transfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   */\n', '  function releasableAmount() public view returns (uint256) {\n', '    return vestedAmount().sub(released);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   */\n', '  function vestedAmount() public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= cliff && now < start.add(duration)) {\n', '      return totalBalance / 2;\n', '    } else {\n', '      return totalBalance;\n', '    }\n', '  }\n', '}']