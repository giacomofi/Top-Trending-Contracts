['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    //uint256 public totalSupply;\n', '    function totalSupply() view public returns (uint256 supply);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) view public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public;\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public;\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public;\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract WBC is Token, Owned {\n', '    /// wbc token, ERC20 compliant\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name    = "WEBIC Token";  //The Token&#39;s name\n', '    uint8 public constant decimals = 6;               //Number of decimals of the smallest unit\n', '    string public constant symbol  = "WEBIC";            //An identifier\n', '\n', '\n', '    uint totoals=0;\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '\n', '\n', '    // Constructor\n', '    constructor() public {\n', '    }\n', '\n', '\n', '    function totalSupply() public view returns (uint256 supply){\n', '        return totoals;\n', '    }\n', '\n', '\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint256 _amount) public {\n', '        require(_amount > 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '\n', '    }\n', '    \n', '    \n', '    // Send _value amount of tokens from address _from to address _to\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) public {\n', '\n', '        require(allowed[_from][msg.sender] >= _amount && _amount > 0);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit  Transfer(_from, _to, _amount);\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit  Approval(msg.sender, _spender, _amount);\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // Mint tokens\n', '    function mint(address _owner, uint256 _amount) public onlyOwner  {\n', '        balances[_owner] = balances[_owner].add(_amount);\n', '        totoals = totoals.add(_amount);\n', '        emit  Transfer(0, _owner, _amount);\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'contract wbcSale is Owned {\n', '  \n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant totalSupply         = (12*10 ** 8) * (10 ** 6); // 12äº¿ WBC, decimals set to 6\n', '    uint256 constant raiseSupply                =  totalSupply * 35 / 100; \n', '    uint256 constant reservedForTeam1           = totalSupply * 10 / 100;  \n', '    uint256 constant reservedForTeam2           = totalSupply * 40 / 100; \n', '    uint256 constant reservedForTeam3           = totalSupply * 15 / 100; \n', '\n', '    WBC wbc; \n', '    address raiseAccount; // \n', '    address team1Account; // \n', '    address team2Account; // \n', '    address team3Account; //\n', '    uint32 startTime=1533283200;\n', '\n', '    bool public initialized=false;\n', '    bool public finalized=false;\n', '\n', '\n', '\n', '    constructor() public {\n', '\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '    function blockTime() public view returns (uint32) {\n', '        return uint32(block.timestamp);\n', '    }\n', '\n', '\n', '\n', '\n', '    \n', '\n', '  \n', '\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '\n', '    function mintToTeamAccounts() internal onlyOwner{\n', '        require(!initialized);\n', '        wbc.mint(raiseAccount,raiseSupply);\n', '        wbc.mint(team1Account,reservedForTeam1);\n', '        wbc.mint(team2Account,reservedForTeam2);\n', '        wbc.mint(team3Account,reservedForTeam3);\n', '    }\n', '\n', '    /// @notice initialize to prepare for sale\n', '    /// @param _wbc The address wbc token contract following ERC20 standard\n', '    function initialize (\n', '        WBC _wbc,address raiseAcc,address team1Acc,address team2Acc,address team3Acc) public onlyOwner {\n', '        require(blockTime()>=startTime);\n', '        // ownership of token contract should already be this\n', '        require(_wbc.owner() == address(this));\n', '        require(raiseAcc!=0&&team1Acc != 0&&team2Acc != 0&&team3Acc != 0);\n', '        wbc = _wbc;\n', '        raiseAccount = raiseAcc;\n', '        team1Account = team1Acc;\n', '        team2Account = team2Acc;\n', '        team3Account = team3Acc;\n', '        mintToTeamAccounts();\n', '        initialized = true;\n', '        emit onInitialized();\n', '    }\n', '\n', '    /// @notice finalize\n', '    function finalize() public onlyOwner {\n', '        require(!finalized);\n', '        // only after closed stage\n', '        finalized = true;\n', '        emit onFinalized();\n', '    }\n', '\n', '    event onInitialized();\n', '    event onFinalized();\n', '}']