['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeSub(uint a, uint b) internal returns (uint) {\n', '        sAssert(b <= a);\n', '        return a - b;\n', '    }\n', '    function safeAdd(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        sAssert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '    function sAssert(bool assertion) internal {\n', '        if (!assertion) {\n', '            revert();\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) constant returns (uint);\n', '    function allowance(address owner, address spender) constant returns (uint);\n', '    function transfer(address to, uint value) returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) returns (bool ok);\n', '    function approve(address spender, uint value) returns (bool ok);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '    mapping(address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '    function approve(address _spender, uint _value) returns (bool success) {\n', '        // require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function transfer(address _to, uint _value) returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract TonCoin is Ownable, StandardToken {\n', '    string public name = "TON Coin";\n', '    string public symbol = "TON";\n', '    uint public decimals = 18;\n', '    uint public totalSupply = 3 * (10**9) * (10**18);\n', '    function TonCoin() {\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '    function () {// Don&#39;t accept ethers - no payable modifier\n', '    }\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        balances[_newOwner] = safeAdd(balances[owner], balances[_newOwner]);\n', '        balances[owner] = 0;\n', '        Ownable.transferOwnership(_newOwner);\n', '    }\n', '    function transferAnyERC20Token(address tokenAddress, uint amount) onlyOwner returns (bool success)\n', '    {\n', '        return ERC20(tokenAddress).transfer(owner, amount);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract SafeMath {\n', '    function safeSub(uint a, uint b) internal returns (uint) {\n', '        sAssert(b <= a);\n', '        return a - b;\n', '    }\n', '    function safeAdd(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        sAssert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '    function sAssert(bool assertion) internal {\n', '        if (!assertion) {\n', '            revert();\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) constant returns (uint);\n', '    function allowance(address owner, address spender) constant returns (uint);\n', '    function transfer(address to, uint value) returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) returns (bool ok);\n', '    function approve(address spender, uint value) returns (bool ok);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '    mapping(address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '    function approve(address _spender, uint _value) returns (bool success) {\n', '        // require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function transfer(address _to, uint _value) returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract TonCoin is Ownable, StandardToken {\n', '    string public name = "TON Coin";\n', '    string public symbol = "TON";\n', '    uint public decimals = 18;\n', '    uint public totalSupply = 3 * (10**9) * (10**18);\n', '    function TonCoin() {\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', "    function () {// Don't accept ethers - no payable modifier\n", '    }\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        balances[_newOwner] = safeAdd(balances[owner], balances[_newOwner]);\n', '        balances[owner] = 0;\n', '        Ownable.transferOwnership(_newOwner);\n', '    }\n', '    function transferAnyERC20Token(address tokenAddress, uint amount) onlyOwner returns (bool success)\n', '    {\n', '        return ERC20(tokenAddress).transfer(owner, amount);\n', '    }\n', '}']
