['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// Gives the owner the ability to transfer ownership of the contract to a new\n', '/// address and it requires the owner of the new address to accept the transfer.\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '\n', '/// @title Admin functionality for TRVLToken.sol contracts.\n', 'contract Admin is Claimable{\n', '    mapping(address => bool) public admins;\n', '\n', '    event AdminAdded(address added);\n', '    event AdminRemoved(address removed);\n', '\n', '    /// @dev Verifies the msg.sender is a member of the admins mapping. Owner is by default an admin.\n', '    modifier onlyAdmin() {\n', '        require(admins[msg.sender] || msg.sender == owner, "msg.sender is not an admin!");\n', '        _;\n', '    }\n', '\n', '    /// @notice Adds a list of addresses to the admins list.\n', '    /// @dev Requires that the msg.sender is the Owner. Emits an event on success.\n', '    /// @param _admins The list of addresses to add to the admins mapping.\n', '    function addAddressesToAdmins(address[] _admins) external onlyOwner {\n', '        require(_admins.length > 0, "Cannot add an empty list to admins!");\n', '        for (uint256 i = 0; i < _admins.length; ++i) {\n', '            address user = _admins[i];\n', '            require(user != address(0), "Cannot add the zero address to admins!");\n', '\n', '            if (!admins[user]) {\n', '                admins[user] = true;\n', '\n', '                emit AdminAdded(user);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Removes a list of addresses from the admins list.\n', '    /// @dev Requires that the msg.sender is an Owner. It is possible for the admins list to be empty, this is a fail safe\n', '    /// in the event the admin accounts are compromised. The owner has the ability to lockout the server access from which\n', '    /// TravelBlock is processing payments. Emits an event on success.\n', '    /// @param _admins The list of addresses to remove from the admins mapping.\n', '    function removeAddressesFromAdmins(address[] _admins) external onlyOwner {\n', '        require(_admins.length > 0, "Cannot remove an empty list to admins!");\n', '        for (uint256 i = 0; i < _admins.length; ++i) {\n', '            address user = _admins[i];\n', '\n', '            if (admins[user]) {\n', '                admins[user] = false;\n', '\n', '                emit AdminRemoved(user);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '/// @title Whitelist configurations for the TRVL Token contract.\n', 'contract Whitelist is Admin {\n', '    mapping(address => bool) public whitelist;\n', '\n', '    event WhitelistAdded(address added);\n', '    event WhitelistRemoved(address removed);\n', '\n', '    /// @dev Verifies the user is whitelisted.\n', '    modifier isWhitelisted(address _user) {\n', '        require(whitelist[_user] != false, "User is not whitelisted!");\n', '        _;\n', '    }\n', '\n', '    /// @notice Adds a list of addresses to the whitelist.\n', '    /// @dev Requires that the msg.sender is the Admin. Emits an event on success.\n', '    /// @param _users The list of addresses to add to the whitelist.\n', '    function addAddressesToWhitelist(address[] _users) external onlyAdmin {\n', '        require(_users.length > 0, "Cannot add an empty list to whitelist!");\n', '        for (uint256 i = 0; i < _users.length; ++i) {\n', '            address user = _users[i];\n', '            require(user != address(0), "Cannot add the zero address to whitelist!");\n', '\n', '            if (!whitelist[user]) {\n', '                whitelist[user] = true;\n', '\n', '                emit WhitelistAdded(user);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Removes a list of addresses from the whitelist.\n', '    /// @dev Requires that the msg.sender is an Admin. Emits an event on success.\n', '    /// @param _users The list of addresses to remove from the whitelist.\n', '    function removeAddressesFromWhitelist(address[] _users) external onlyAdmin {\n', '        require(_users.length > 0, "Cannot remove an empty list to whitelist!");\n', '        for (uint256 i = 0; i < _users.length; ++i) {\n', '            address user = _users[i];\n', '\n', '            if (whitelist[user]) {\n', '                whitelist[user] = false;\n', '\n', '                emit WhitelistRemoved(user);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// Standard ERC20 token with the ability to freeze and unfreeze token transfer.\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', '/// Blocks ERC223 tokens and allows the smart contract to transfer ownership of\n', '/// ERC20 tokens that are sent to the contract address.\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d4a6b1b9b7bb94e6">[email&#160;protected]</a>π.com>\n', ' * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC223 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/// @title Reward Token contract that contains all reward token configurations.\n', 'contract RewardToken is PausableToken, Whitelist, HasNoTokens{\n', '    /// @dev Any token balances added here must be removed from the balances map.\n', '    mapping(address => uint256) public rewardBalances;\n', '\n', '    uint256[] public rewardPercentage;\n', '    uint256 public rewardPercentageDecimals;\n', '    uint256 public rewardPercentageDivisor;\n', '\n', '    event RewardPercentage(uint256 index, uint256 percentage);\n', '\n', '    /// @dev Verifies the reward index is valid.\n', '    modifier isValidRewardIndex(uint256 _index) {\n', '        require(_index < rewardPercentage.length, "The reward percentage index does not exist!");\n', '        _;\n', '    }\n', '\n', '    /// @dev Verifies the reward percentage is valid.\n', '    modifier isValidRewardPercentage(uint256 _percentage) {\n', '        require(_percentage <= rewardPercentageDivisor, "Cannot have a reward percentage greater than 100%!");\n', '        _;\n', '    }\n', '\n', '    constructor(uint256 _rewardPercentageDecimals) public {\n', '        rewardPercentageDecimals = _rewardPercentageDecimals;\n', '        rewardPercentageDivisor = (10 ** uint256(_rewardPercentageDecimals)).mul(100);\n', '    }\n', '\n', '    /// @notice Adds a reward percentage to the list of available reward percentages, specific to 18 decimals.\n', '    /// @dev To achieve an affective 5% bonus, the sender needs to use 5 x 10^18.\n', '    /// Requires:\n', '    ///     - Msg.sender is an admin\n', '    ///     - Percentage is <= 100%\n', '    /// @param _percentage The new percentage specific to 18 decimals.\n', '    /// @return The index of the percentage added in the rewardPercentage array.\n', '    function addRewardPercentage(uint256 _percentage) public onlyAdmin isValidRewardPercentage(_percentage) returns (uint256 _index) {\n', '        _index = rewardPercentage.length;\n', '        rewardPercentage.push(_percentage);\n', '\n', '        emit RewardPercentage(_index, _percentage);\n', '    }\n', '\n', '    /// @notice Edits the contents of the percentage array, with the specified parameters.\n', '    /// @dev Allows the owner to edit percentage array contents for a given index.\n', '    /// Requires:\n', '    ///     - Msg.sender is an admin\n', '    ///     - The index must be within the bounds of the rewardPercentage array\n', '    ///     - The new percentage must be <= 100%\n', '    /// @param _index The index of the percentage to be edited.\n', '    /// @param _percentage The new percentage to be used for the given index.\n', '    function updateRewardPercentageByIndex(uint256 _index, uint256 _percentage)\n', '        public\n', '        onlyAdmin\n', '        isValidRewardIndex(_index)\n', '        isValidRewardPercentage(_percentage)\n', '    {\n', '        rewardPercentage[_index] = _percentage;\n', '\n', '        emit RewardPercentage(_index, _percentage);\n', '    }\n', '\n', '    /// @dev Calculates the reward based on the reward percentage index.\n', '    /// Requires:\n', '    ///     - The index must be within the bounds of the rewardPercentage array\n', '    /// @param _amount The amount tokens to be converted to rewards.\n', '    /// @param _rewardPercentageIndex The location of reward percentage to be applied.\n', '    /// @return The amount of tokens converted to reward tokens.\n', '    function getRewardToken(uint256 _amount, uint256 _rewardPercentageIndex)\n', '        internal\n', '        view\n', '        isValidRewardIndex(_rewardPercentageIndex)\n', '        returns(uint256 _rewardToken)\n', '    {\n', '        _rewardToken = _amount.mul(rewardPercentage[_rewardPercentageIndex]).div(rewardPercentageDivisor);\n', '    }\n', '}\n', '\n', '\n', '\n', '/// @title TRVLToken smart contract\n', 'contract TRVLToken is RewardToken {\n', '    string public constant name = "TRVL Token";\n', '    string public constant symbol = "TRVL";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant TOTAL_CAP = 600000000 * (10 ** uint256(decimals));\n', '\n', '    event TransferReward(address from, address to, uint256 value);\n', '\n', '    /// @dev Verifies the user has enough tokens to cover the payment.\n', '    modifier senderHasEnoughTokens(uint256 _regularTokens, uint256 _rewardTokens) {\n', '        require(rewardBalances[msg.sender] >= _rewardTokens, "User does not have enough reward tokens!");\n', '        require(balances[msg.sender] >= _regularTokens, "User does not have enough regular tokens!");\n', '        _;\n', '    }\n', '\n', '    /// @dev Verifies the amount is > 0.\n', '    modifier validAmount(uint256 _amount) {\n', '        require(_amount > 0, "The amount specified is 0!");\n', '        _;\n', '    }\n', '\n', '    /// @dev The TRVL Token is an ERC20 complaint token with a built in reward system that\n', '    /// gives users back a percentage of tokens spent on travel. These tokens are\n', '    /// non-transferable and can only be spent on travel through the TravelBlock website.\n', '    /// The percentages are defined in the rewardPercentage array and can be modified by\n', '    /// the TravelBlock team. The token is created with the entire balance being owned by the address that deploys.\n', '    constructor() RewardToken(decimals) public {\n', '        totalSupply_ = TOTAL_CAP;\n', '        balances[owner] = totalSupply_;\n', '        emit Transfer(0x0, owner, totalSupply_);\n', '    }\n', '\n', '    /// @notice Process a payment that prioritizes the use of regular tokens.\n', '    /// @dev Uses up all of the available regular tokens, before using rewards tokens to cover a payment. Pushes the calculated amounts\n', '    /// into their respective function calls.\n', '    /// @param _amount The total tokens to be paid.\n', '    function paymentRegularTokensPriority (uint256 _amount, uint256 _rewardPercentageIndex) public {\n', '        uint256 regularTokensAvailable = balances[msg.sender];\n', '\n', '        if (regularTokensAvailable >= _amount) {\n', '            paymentRegularTokens(_amount, _rewardPercentageIndex);\n', '\n', '        } else {\n', '            if (regularTokensAvailable > 0) {\n', '                uint256 amountOfRewardsTokens = _amount.sub(regularTokensAvailable);\n', '                paymentMixed(regularTokensAvailable, amountOfRewardsTokens, _rewardPercentageIndex);\n', '            } else {\n', '                paymentRewardTokens(_amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Process a payment that prioritizes the use of reward tokens.\n', '    /// @dev Uses up all of the available reward tokens, before using regular tokens to cover a payment. Pushes the calculated amounts\n', '    /// into their respective function calls.\n', '    /// @param _amount The total tokens to be paid.\n', '    function paymentRewardTokensPriority (uint256 _amount, uint256 _rewardPercentageIndex) public {\n', '        uint256 rewardTokensAvailable = rewardBalances[msg.sender];\n', '\n', '        if (rewardTokensAvailable >= _amount) {\n', '            paymentRewardTokens(_amount);\n', '        } else {\n', '            if (rewardTokensAvailable > 0) {\n', '                uint256 amountOfRegularTokens = _amount.sub(rewardTokensAvailable);\n', '                paymentMixed(amountOfRegularTokens, rewardTokensAvailable, _rewardPercentageIndex);\n', '            } else {\n', '                paymentRegularTokens(_amount, _rewardPercentageIndex);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Process a TRVL tokens payment with a combination of regular and rewards tokens.\n', '    /// @dev calls the regular/rewards payment methods respectively.\n', '    /// @param _regularTokenAmount The amount of regular tokens to be processed.\n', '    /// @param _rewardTokenAmount The amount of reward tokens to be processed.\n', '    function paymentMixed (uint256 _regularTokenAmount, uint256 _rewardTokenAmount, uint256 _rewardPercentageIndex) public {\n', '        paymentRewardTokens(_rewardTokenAmount);\n', '        paymentRegularTokens(_regularTokenAmount, _rewardPercentageIndex);\n', '    }\n', '\n', '    /// @notice Process a payment using only regular TRVL Tokens with a specified reward percentage.\n', '    /// @dev Adjusts the balances accordingly and applies a reward token bonus. The accounts must be whitelisted because the travel team must own the address\n', '    /// to make transfers on their behalf.\n', '    /// Requires:\n', '    ///     - The contract is not paused\n', '    ///     - The amount being processed is greater than 0\n', '    ///     - The reward index being passed is valid\n', '    ///     - The sender has enough tokens to cover the payment\n', '    ///     - The sender is a whitelisted address\n', '    /// @param _regularTokenAmount The amount of regular tokens being used for the payment.\n', '    /// @param _rewardPercentageIndex The index pointing to the percentage of reward tokens to be applied.\n', '    function paymentRegularTokens (uint256 _regularTokenAmount, uint256 _rewardPercentageIndex)\n', '        public\n', '        validAmount(_regularTokenAmount)\n', '        isValidRewardIndex(_rewardPercentageIndex)\n', '        senderHasEnoughTokens(_regularTokenAmount, 0)\n', '        isWhitelisted(msg.sender)\n', '        whenNotPaused\n', '    {\n', '        // 1. Pay the specified amount with from the balance of the user/sender.\n', '        balances[msg.sender] = balances[msg.sender].sub(_regularTokenAmount);\n', '\n', '        // 2. distribute reward tokens to the user.\n', '        uint256 rewardAmount = getRewardToken(_regularTokenAmount, _rewardPercentageIndex);\n', '        rewardBalances[msg.sender] = rewardBalances[msg.sender].add(rewardAmount);\n', '        emit TransferReward(owner, msg.sender, rewardAmount);\n', '\n', '        // 3. Update the owner balance minus the reward tokens.\n', '        balances[owner] = balances[owner].add(_regularTokenAmount.sub(rewardAmount));\n', '        emit Transfer(msg.sender, owner, _regularTokenAmount.sub(rewardAmount));\n', '    }\n', '\n', '    /// @notice Process a payment using only reward TRVL Tokens.\n', '    /// @dev Adjusts internal balances accordingly. The accounts must be whitelisted because the travel team must own the address\n', '    /// to make transfers on their behalf.\n', '    /// Requires:\n', '    ///     - The contract is not paused\n', '    ///     - The amount being processed is greater than 0\n', '    ///     - The sender has enough tokens to cover the payment\n', '    ///     - The sender is a whitelisted address\n', '    /// @param _rewardTokenAmount The amount of reward tokens being used for the payment.\n', '    function paymentRewardTokens (uint256 _rewardTokenAmount)\n', '        public\n', '        validAmount(_rewardTokenAmount)\n', '        senderHasEnoughTokens(0, _rewardTokenAmount)\n', '        isWhitelisted(msg.sender)\n', '        whenNotPaused\n', '    {\n', '        rewardBalances[msg.sender] = rewardBalances[msg.sender].sub(_rewardTokenAmount);\n', '        rewardBalances[owner] = rewardBalances[owner].add(_rewardTokenAmount);\n', '\n', '        emit TransferReward(msg.sender, owner, _rewardTokenAmount);\n', '    }\n', '\n', '    /// @notice Convert a specific amount of regular TRVL tokens from the owner, into reward tokens for a user.\n', '    /// @dev Converts the regular tokens into reward tokens at a 1-1 ratio.\n', '    /// Requires:\n', '    ///     - Owner has enough tokens to convert\n', '    ///     - The specified user is whitelisted\n', '    ///     - The amount being converted is greater than 0\n', '    /// @param _user The user receiving the converted tokens.\n', '    /// @param _amount The amount of tokens to be converted.\n', '    function convertRegularToRewardTokens(address _user, uint256 _amount)\n', '        external\n', '        onlyOwner\n', '        validAmount(_amount)\n', '        senderHasEnoughTokens(_amount, 0)\n', '        isWhitelisted(_user)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        rewardBalances[_user] = rewardBalances[_user].add(_amount);\n', '\n', '        emit TransferReward(msg.sender, _user, _amount);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// Gives the owner the ability to transfer ownership of the contract to a new\n', '/// address and it requires the owner of the new address to accept the transfer.\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '\n', '/// @title Admin functionality for TRVLToken.sol contracts.\n', 'contract Admin is Claimable{\n', '    mapping(address => bool) public admins;\n', '\n', '    event AdminAdded(address added);\n', '    event AdminRemoved(address removed);\n', '\n', '    /// @dev Verifies the msg.sender is a member of the admins mapping. Owner is by default an admin.\n', '    modifier onlyAdmin() {\n', '        require(admins[msg.sender] || msg.sender == owner, "msg.sender is not an admin!");\n', '        _;\n', '    }\n', '\n', '    /// @notice Adds a list of addresses to the admins list.\n', '    /// @dev Requires that the msg.sender is the Owner. Emits an event on success.\n', '    /// @param _admins The list of addresses to add to the admins mapping.\n', '    function addAddressesToAdmins(address[] _admins) external onlyOwner {\n', '        require(_admins.length > 0, "Cannot add an empty list to admins!");\n', '        for (uint256 i = 0; i < _admins.length; ++i) {\n', '            address user = _admins[i];\n', '            require(user != address(0), "Cannot add the zero address to admins!");\n', '\n', '            if (!admins[user]) {\n', '                admins[user] = true;\n', '\n', '                emit AdminAdded(user);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Removes a list of addresses from the admins list.\n', '    /// @dev Requires that the msg.sender is an Owner. It is possible for the admins list to be empty, this is a fail safe\n', '    /// in the event the admin accounts are compromised. The owner has the ability to lockout the server access from which\n', '    /// TravelBlock is processing payments. Emits an event on success.\n', '    /// @param _admins The list of addresses to remove from the admins mapping.\n', '    function removeAddressesFromAdmins(address[] _admins) external onlyOwner {\n', '        require(_admins.length > 0, "Cannot remove an empty list to admins!");\n', '        for (uint256 i = 0; i < _admins.length; ++i) {\n', '            address user = _admins[i];\n', '\n', '            if (admins[user]) {\n', '                admins[user] = false;\n', '\n', '                emit AdminRemoved(user);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '/// @title Whitelist configurations for the TRVL Token contract.\n', 'contract Whitelist is Admin {\n', '    mapping(address => bool) public whitelist;\n', '\n', '    event WhitelistAdded(address added);\n', '    event WhitelistRemoved(address removed);\n', '\n', '    /// @dev Verifies the user is whitelisted.\n', '    modifier isWhitelisted(address _user) {\n', '        require(whitelist[_user] != false, "User is not whitelisted!");\n', '        _;\n', '    }\n', '\n', '    /// @notice Adds a list of addresses to the whitelist.\n', '    /// @dev Requires that the msg.sender is the Admin. Emits an event on success.\n', '    /// @param _users The list of addresses to add to the whitelist.\n', '    function addAddressesToWhitelist(address[] _users) external onlyAdmin {\n', '        require(_users.length > 0, "Cannot add an empty list to whitelist!");\n', '        for (uint256 i = 0; i < _users.length; ++i) {\n', '            address user = _users[i];\n', '            require(user != address(0), "Cannot add the zero address to whitelist!");\n', '\n', '            if (!whitelist[user]) {\n', '                whitelist[user] = true;\n', '\n', '                emit WhitelistAdded(user);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Removes a list of addresses from the whitelist.\n', '    /// @dev Requires that the msg.sender is an Admin. Emits an event on success.\n', '    /// @param _users The list of addresses to remove from the whitelist.\n', '    function removeAddressesFromWhitelist(address[] _users) external onlyAdmin {\n', '        require(_users.length > 0, "Cannot remove an empty list to whitelist!");\n', '        for (uint256 i = 0; i < _users.length; ++i) {\n', '            address user = _users[i];\n', '\n', '            if (whitelist[user]) {\n', '                whitelist[user] = false;\n', '\n', '                emit WhitelistRemoved(user);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// Standard ERC20 token with the ability to freeze and unfreeze token transfer.\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', '/// Blocks ERC223 tokens and allows the smart contract to transfer ownership of\n', '/// ERC20 tokens that are sent to the contract address.\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC223 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/// @title Reward Token contract that contains all reward token configurations.\n', 'contract RewardToken is PausableToken, Whitelist, HasNoTokens{\n', '    /// @dev Any token balances added here must be removed from the balances map.\n', '    mapping(address => uint256) public rewardBalances;\n', '\n', '    uint256[] public rewardPercentage;\n', '    uint256 public rewardPercentageDecimals;\n', '    uint256 public rewardPercentageDivisor;\n', '\n', '    event RewardPercentage(uint256 index, uint256 percentage);\n', '\n', '    /// @dev Verifies the reward index is valid.\n', '    modifier isValidRewardIndex(uint256 _index) {\n', '        require(_index < rewardPercentage.length, "The reward percentage index does not exist!");\n', '        _;\n', '    }\n', '\n', '    /// @dev Verifies the reward percentage is valid.\n', '    modifier isValidRewardPercentage(uint256 _percentage) {\n', '        require(_percentage <= rewardPercentageDivisor, "Cannot have a reward percentage greater than 100%!");\n', '        _;\n', '    }\n', '\n', '    constructor(uint256 _rewardPercentageDecimals) public {\n', '        rewardPercentageDecimals = _rewardPercentageDecimals;\n', '        rewardPercentageDivisor = (10 ** uint256(_rewardPercentageDecimals)).mul(100);\n', '    }\n', '\n', '    /// @notice Adds a reward percentage to the list of available reward percentages, specific to 18 decimals.\n', '    /// @dev To achieve an affective 5% bonus, the sender needs to use 5 x 10^18.\n', '    /// Requires:\n', '    ///     - Msg.sender is an admin\n', '    ///     - Percentage is <= 100%\n', '    /// @param _percentage The new percentage specific to 18 decimals.\n', '    /// @return The index of the percentage added in the rewardPercentage array.\n', '    function addRewardPercentage(uint256 _percentage) public onlyAdmin isValidRewardPercentage(_percentage) returns (uint256 _index) {\n', '        _index = rewardPercentage.length;\n', '        rewardPercentage.push(_percentage);\n', '\n', '        emit RewardPercentage(_index, _percentage);\n', '    }\n', '\n', '    /// @notice Edits the contents of the percentage array, with the specified parameters.\n', '    /// @dev Allows the owner to edit percentage array contents for a given index.\n', '    /// Requires:\n', '    ///     - Msg.sender is an admin\n', '    ///     - The index must be within the bounds of the rewardPercentage array\n', '    ///     - The new percentage must be <= 100%\n', '    /// @param _index The index of the percentage to be edited.\n', '    /// @param _percentage The new percentage to be used for the given index.\n', '    function updateRewardPercentageByIndex(uint256 _index, uint256 _percentage)\n', '        public\n', '        onlyAdmin\n', '        isValidRewardIndex(_index)\n', '        isValidRewardPercentage(_percentage)\n', '    {\n', '        rewardPercentage[_index] = _percentage;\n', '\n', '        emit RewardPercentage(_index, _percentage);\n', '    }\n', '\n', '    /// @dev Calculates the reward based on the reward percentage index.\n', '    /// Requires:\n', '    ///     - The index must be within the bounds of the rewardPercentage array\n', '    /// @param _amount The amount tokens to be converted to rewards.\n', '    /// @param _rewardPercentageIndex The location of reward percentage to be applied.\n', '    /// @return The amount of tokens converted to reward tokens.\n', '    function getRewardToken(uint256 _amount, uint256 _rewardPercentageIndex)\n', '        internal\n', '        view\n', '        isValidRewardIndex(_rewardPercentageIndex)\n', '        returns(uint256 _rewardToken)\n', '    {\n', '        _rewardToken = _amount.mul(rewardPercentage[_rewardPercentageIndex]).div(rewardPercentageDivisor);\n', '    }\n', '}\n', '\n', '\n', '\n', '/// @title TRVLToken smart contract\n', 'contract TRVLToken is RewardToken {\n', '    string public constant name = "TRVL Token";\n', '    string public constant symbol = "TRVL";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant TOTAL_CAP = 600000000 * (10 ** uint256(decimals));\n', '\n', '    event TransferReward(address from, address to, uint256 value);\n', '\n', '    /// @dev Verifies the user has enough tokens to cover the payment.\n', '    modifier senderHasEnoughTokens(uint256 _regularTokens, uint256 _rewardTokens) {\n', '        require(rewardBalances[msg.sender] >= _rewardTokens, "User does not have enough reward tokens!");\n', '        require(balances[msg.sender] >= _regularTokens, "User does not have enough regular tokens!");\n', '        _;\n', '    }\n', '\n', '    /// @dev Verifies the amount is > 0.\n', '    modifier validAmount(uint256 _amount) {\n', '        require(_amount > 0, "The amount specified is 0!");\n', '        _;\n', '    }\n', '\n', '    /// @dev The TRVL Token is an ERC20 complaint token with a built in reward system that\n', '    /// gives users back a percentage of tokens spent on travel. These tokens are\n', '    /// non-transferable and can only be spent on travel through the TravelBlock website.\n', '    /// The percentages are defined in the rewardPercentage array and can be modified by\n', '    /// the TravelBlock team. The token is created with the entire balance being owned by the address that deploys.\n', '    constructor() RewardToken(decimals) public {\n', '        totalSupply_ = TOTAL_CAP;\n', '        balances[owner] = totalSupply_;\n', '        emit Transfer(0x0, owner, totalSupply_);\n', '    }\n', '\n', '    /// @notice Process a payment that prioritizes the use of regular tokens.\n', '    /// @dev Uses up all of the available regular tokens, before using rewards tokens to cover a payment. Pushes the calculated amounts\n', '    /// into their respective function calls.\n', '    /// @param _amount The total tokens to be paid.\n', '    function paymentRegularTokensPriority (uint256 _amount, uint256 _rewardPercentageIndex) public {\n', '        uint256 regularTokensAvailable = balances[msg.sender];\n', '\n', '        if (regularTokensAvailable >= _amount) {\n', '            paymentRegularTokens(_amount, _rewardPercentageIndex);\n', '\n', '        } else {\n', '            if (regularTokensAvailable > 0) {\n', '                uint256 amountOfRewardsTokens = _amount.sub(regularTokensAvailable);\n', '                paymentMixed(regularTokensAvailable, amountOfRewardsTokens, _rewardPercentageIndex);\n', '            } else {\n', '                paymentRewardTokens(_amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Process a payment that prioritizes the use of reward tokens.\n', '    /// @dev Uses up all of the available reward tokens, before using regular tokens to cover a payment. Pushes the calculated amounts\n', '    /// into their respective function calls.\n', '    /// @param _amount The total tokens to be paid.\n', '    function paymentRewardTokensPriority (uint256 _amount, uint256 _rewardPercentageIndex) public {\n', '        uint256 rewardTokensAvailable = rewardBalances[msg.sender];\n', '\n', '        if (rewardTokensAvailable >= _amount) {\n', '            paymentRewardTokens(_amount);\n', '        } else {\n', '            if (rewardTokensAvailable > 0) {\n', '                uint256 amountOfRegularTokens = _amount.sub(rewardTokensAvailable);\n', '                paymentMixed(amountOfRegularTokens, rewardTokensAvailable, _rewardPercentageIndex);\n', '            } else {\n', '                paymentRegularTokens(_amount, _rewardPercentageIndex);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Process a TRVL tokens payment with a combination of regular and rewards tokens.\n', '    /// @dev calls the regular/rewards payment methods respectively.\n', '    /// @param _regularTokenAmount The amount of regular tokens to be processed.\n', '    /// @param _rewardTokenAmount The amount of reward tokens to be processed.\n', '    function paymentMixed (uint256 _regularTokenAmount, uint256 _rewardTokenAmount, uint256 _rewardPercentageIndex) public {\n', '        paymentRewardTokens(_rewardTokenAmount);\n', '        paymentRegularTokens(_regularTokenAmount, _rewardPercentageIndex);\n', '    }\n', '\n', '    /// @notice Process a payment using only regular TRVL Tokens with a specified reward percentage.\n', '    /// @dev Adjusts the balances accordingly and applies a reward token bonus. The accounts must be whitelisted because the travel team must own the address\n', '    /// to make transfers on their behalf.\n', '    /// Requires:\n', '    ///     - The contract is not paused\n', '    ///     - The amount being processed is greater than 0\n', '    ///     - The reward index being passed is valid\n', '    ///     - The sender has enough tokens to cover the payment\n', '    ///     - The sender is a whitelisted address\n', '    /// @param _regularTokenAmount The amount of regular tokens being used for the payment.\n', '    /// @param _rewardPercentageIndex The index pointing to the percentage of reward tokens to be applied.\n', '    function paymentRegularTokens (uint256 _regularTokenAmount, uint256 _rewardPercentageIndex)\n', '        public\n', '        validAmount(_regularTokenAmount)\n', '        isValidRewardIndex(_rewardPercentageIndex)\n', '        senderHasEnoughTokens(_regularTokenAmount, 0)\n', '        isWhitelisted(msg.sender)\n', '        whenNotPaused\n', '    {\n', '        // 1. Pay the specified amount with from the balance of the user/sender.\n', '        balances[msg.sender] = balances[msg.sender].sub(_regularTokenAmount);\n', '\n', '        // 2. distribute reward tokens to the user.\n', '        uint256 rewardAmount = getRewardToken(_regularTokenAmount, _rewardPercentageIndex);\n', '        rewardBalances[msg.sender] = rewardBalances[msg.sender].add(rewardAmount);\n', '        emit TransferReward(owner, msg.sender, rewardAmount);\n', '\n', '        // 3. Update the owner balance minus the reward tokens.\n', '        balances[owner] = balances[owner].add(_regularTokenAmount.sub(rewardAmount));\n', '        emit Transfer(msg.sender, owner, _regularTokenAmount.sub(rewardAmount));\n', '    }\n', '\n', '    /// @notice Process a payment using only reward TRVL Tokens.\n', '    /// @dev Adjusts internal balances accordingly. The accounts must be whitelisted because the travel team must own the address\n', '    /// to make transfers on their behalf.\n', '    /// Requires:\n', '    ///     - The contract is not paused\n', '    ///     - The amount being processed is greater than 0\n', '    ///     - The sender has enough tokens to cover the payment\n', '    ///     - The sender is a whitelisted address\n', '    /// @param _rewardTokenAmount The amount of reward tokens being used for the payment.\n', '    function paymentRewardTokens (uint256 _rewardTokenAmount)\n', '        public\n', '        validAmount(_rewardTokenAmount)\n', '        senderHasEnoughTokens(0, _rewardTokenAmount)\n', '        isWhitelisted(msg.sender)\n', '        whenNotPaused\n', '    {\n', '        rewardBalances[msg.sender] = rewardBalances[msg.sender].sub(_rewardTokenAmount);\n', '        rewardBalances[owner] = rewardBalances[owner].add(_rewardTokenAmount);\n', '\n', '        emit TransferReward(msg.sender, owner, _rewardTokenAmount);\n', '    }\n', '\n', '    /// @notice Convert a specific amount of regular TRVL tokens from the owner, into reward tokens for a user.\n', '    /// @dev Converts the regular tokens into reward tokens at a 1-1 ratio.\n', '    /// Requires:\n', '    ///     - Owner has enough tokens to convert\n', '    ///     - The specified user is whitelisted\n', '    ///     - The amount being converted is greater than 0\n', '    /// @param _user The user receiving the converted tokens.\n', '    /// @param _amount The amount of tokens to be converted.\n', '    function convertRegularToRewardTokens(address _user, uint256 _amount)\n', '        external\n', '        onlyOwner\n', '        validAmount(_amount)\n', '        senderHasEnoughTokens(_amount, 0)\n', '        isWhitelisted(_user)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        rewardBalances[_user] = rewardBalances[_user].add(_amount);\n', '\n', '        emit TransferReward(msg.sender, _user, _amount);\n', '    }\n', '}']
