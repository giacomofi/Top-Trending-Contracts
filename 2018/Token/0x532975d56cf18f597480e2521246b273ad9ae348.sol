['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract XRT is MintableToken, BurnableToken {\n', '    string public constant name     = "Robonomics Alpha";\n', '    string public constant symbol   = "XRT";\n', '    uint   public constant decimals = 9;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 5 * (10 ** uint256(decimals));\n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '}\n', '\n', 'contract LightContract {\n', '    /**\n', '     * @dev Shared code smart contract \n', '     */\n', '    address lib;\n', '\n', '    constructor(address _library) public {\n', '        lib = _library;\n', '    }\n', '\n', '    function() public {\n', '        require(lib.delegatecall(msg.data));\n', '    }\n', '}\n', '\n', 'contract LighthouseAPI {\n', '    address[] public members;\n', '    mapping(address => uint256) indexOf;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    uint256 public minimalFreeze;\n', '    uint256 public timeoutBlocks;\n', '\n', '    LiabilityFactory public factory;\n', '    XRT              public xrt;\n', '\n', '    uint256 public keepaliveBlock = 0;\n', '    uint256 public marker = 0;\n', '    uint256 public quota = 0;\n', '\n', '    function quotaOf(address _member) public view returns (uint256)\n', '    { return balances[_member] / minimalFreeze; }\n', '}\n', '\n', 'contract Lighthouse is LighthouseAPI, LightContract {\n', '    constructor(\n', '        address _lib,\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks\n', '    ) \n', '        public\n', '        LightContract(_lib)\n', '    {\n', '        minimalFreeze = _minimalFreeze;\n', '        timeoutBlocks = _timeoutBlocks;\n', '        factory = LiabilityFactory(msg.sender);\n', '        xrt = factory.xrt();\n', '    }\n', '}\n', '\n', 'contract RobotLiabilityAPI {\n', '    bytes   public model;\n', '    bytes   public objective;\n', '    bytes   public result;\n', '\n', '    XRT        public xrt;\n', '    ERC20   public token;\n', '\n', '    uint256 public cost;\n', '    uint256 public lighthouseFee;\n', '    uint256 public validatorFee;\n', '\n', '    bytes32 public askHash;\n', '    bytes32 public bidHash;\n', '\n', '    address public promisor;\n', '    address public promisee;\n', '    address public validator;\n', '\n', '    bool    public isConfirmed;\n', '    bool    public isFinalized;\n', '\n', '    LiabilityFactory public factory;\n', '}\n', '\n', 'contract RobotLiability is RobotLiabilityAPI, LightContract {\n', '    constructor(address _lib) public LightContract(_lib)\n', '    { factory = LiabilityFactory(msg.sender); }\n', '}\n', '\n', 'interface ENS {\n', '\n', '    // Logged when the owner of a node assigns a new owner to a subnode.\n', '    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n', '\n', '    // Logged when the owner of a node transfers ownership to a new account.\n', '    event Transfer(bytes32 indexed node, address owner);\n', '\n', '    // Logged when the resolver for a node changes.\n', '    event NewResolver(bytes32 indexed node, address resolver);\n', '\n', '    // Logged when the TTL of a node changes\n', '    event NewTTL(bytes32 indexed node, uint64 ttl);\n', '\n', '\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\n', '    function setResolver(bytes32 node, address resolver) public;\n', '    function setOwner(bytes32 node, address owner) public;\n', '    function setTTL(bytes32 node, uint64 ttl) public;\n', '    function owner(bytes32 node) public view returns (address);\n', '    function resolver(bytes32 node) public view returns (address);\n', '    function ttl(bytes32 node) public view returns (uint64);\n', '\n', '}\n', '\n', '/**\n', ' * A simple resolver anyone can use; only allows the owner of a node to set its\n', ' * address.\n', ' */\n', 'contract PublicResolver {\n', '\n', '    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n', '    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n', '    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\n', '    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n', '    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n', '    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n', '    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n', '    bytes4 constant MULTIHASH_INTERFACE_ID = 0xe89401a1;\n', '\n', '    event AddrChanged(bytes32 indexed node, address a);\n', '    event ContentChanged(bytes32 indexed node, bytes32 hash);\n', '    event NameChanged(bytes32 indexed node, string name);\n', '    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n', '    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n', '    event TextChanged(bytes32 indexed node, string indexedKey, string key);\n', '    event MultihashChanged(bytes32 indexed node, bytes hash);\n', '\n', '    struct PublicKey {\n', '        bytes32 x;\n', '        bytes32 y;\n', '    }\n', '\n', '    struct Record {\n', '        address addr;\n', '        bytes32 content;\n', '        string name;\n', '        PublicKey pubkey;\n', '        mapping(string=>string) text;\n', '        mapping(uint256=>bytes) abis;\n', '        bytes multihash;\n', '    }\n', '\n', '    ENS ens;\n', '\n', '    mapping (bytes32 => Record) records;\n', '\n', '    modifier only_owner(bytes32 node) {\n', '        require(ens.owner(node) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructor.\n', '     * @param ensAddr The ENS registrar contract.\n', '     */\n', '    function PublicResolver(ENS ensAddr) public {\n', '        ens = ensAddr;\n', '    }\n', '\n', '    /**\n', '     * Sets the address associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param addr The address to set.\n', '     */\n', '    function setAddr(bytes32 node, address addr) public only_owner(node) {\n', '        records[node].addr = addr;\n', '        AddrChanged(node, addr);\n', '    }\n', '\n', '    /**\n', '     * Sets the content hash associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The node to update.\n', '     * @param hash The content hash to set\n', '     */\n', '    function setContent(bytes32 node, bytes32 hash) public only_owner(node) {\n', '        records[node].content = hash;\n', '        ContentChanged(node, hash);\n', '    }\n', '\n', '    /**\n', '     * Sets the multihash associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param hash The multihash to set\n', '     */\n', '    function setMultihash(bytes32 node, bytes hash) public only_owner(node) {\n', '        records[node].multihash = hash;\n', '        MultihashChanged(node, hash);\n', '    }\n', '    \n', '    /**\n', '     * Sets the name associated with an ENS node, for reverse records.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param name The name to set.\n', '     */\n', '    function setName(bytes32 node, string name) public only_owner(node) {\n', '        records[node].name = name;\n', '        NameChanged(node, name);\n', '    }\n', '\n', '    /**\n', '     * Sets the ABI associated with an ENS node.\n', '     * Nodes may have one ABI of each content type. To remove an ABI, set it to\n', '     * the empty string.\n', '     * @param node The node to update.\n', '     * @param contentType The content type of the ABI\n', '     * @param data The ABI data.\n', '     */\n', '    function setABI(bytes32 node, uint256 contentType, bytes data) public only_owner(node) {\n', '        // Content types must be powers of 2\n', '        require(((contentType - 1) & contentType) == 0);\n', '        \n', '        records[node].abis[contentType] = data;\n', '        ABIChanged(node, contentType);\n', '    }\n', '    \n', '    /**\n', '     * Sets the SECP256k1 public key associated with an ENS node.\n', '     * @param node The ENS node to query\n', '     * @param x the X coordinate of the curve point for the public key.\n', '     * @param y the Y coordinate of the curve point for the public key.\n', '     */\n', '    function setPubkey(bytes32 node, bytes32 x, bytes32 y) public only_owner(node) {\n', '        records[node].pubkey = PublicKey(x, y);\n', '        PubkeyChanged(node, x, y);\n', '    }\n', '\n', '    /**\n', '     * Sets the text data associated with an ENS node and key.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param key The key to set.\n', '     * @param value The text data value to set.\n', '     */\n', '    function setText(bytes32 node, string key, string value) public only_owner(node) {\n', '        records[node].text[key] = value;\n', '        TextChanged(node, key, key);\n', '    }\n', '\n', '    /**\n', '     * Returns the text data associated with an ENS node and key.\n', '     * @param node The ENS node to query.\n', '     * @param key The text data key to query.\n', '     * @return The associated text data.\n', '     */\n', '    function text(bytes32 node, string key) public view returns (string) {\n', '        return records[node].text[key];\n', '    }\n', '\n', '    /**\n', '     * Returns the SECP256k1 public key associated with an ENS node.\n', '     * Defined in EIP 619.\n', '     * @param node The ENS node to query\n', '     * @return x, y the X and Y coordinates of the curve point for the public key.\n', '     */\n', '    function pubkey(bytes32 node) public view returns (bytes32 x, bytes32 y) {\n', '        return (records[node].pubkey.x, records[node].pubkey.y);\n', '    }\n', '\n', '    /**\n', '     * Returns the ABI associated with an ENS node.\n', '     * Defined in EIP205.\n', '     * @param node The ENS node to query\n', '     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n', '     * @return contentType The content type of the return value\n', '     * @return data The ABI data\n', '     */\n', '    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n', '        Record storage record = records[node];\n', '        for (contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n', '            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n', '                data = record.abis[contentType];\n', '                return;\n', '            }\n', '        }\n', '        contentType = 0;\n', '    }\n', '\n', '    /**\n', '     * Returns the name associated with an ENS node, for reverse records.\n', '     * Defined in EIP181.\n', '     * @param node The ENS node to query.\n', '     * @return The associated name.\n', '     */\n', '    function name(bytes32 node) public view returns (string) {\n', '        return records[node].name;\n', '    }\n', '\n', '    /**\n', '     * Returns the content hash associated with an ENS node.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The ENS node to query.\n', '     * @return The associated content hash.\n', '     */\n', '    function content(bytes32 node) public view returns (bytes32) {\n', '        return records[node].content;\n', '    }\n', '\n', '    /**\n', '     * Returns the multihash associated with an ENS node.\n', '     * @param node The ENS node to query.\n', '     * @return The associated multihash.\n', '     */\n', '    function multihash(bytes32 node) public view returns (bytes) {\n', '        return records[node].multihash;\n', '    }\n', '\n', '    /**\n', '     * Returns the address associated with an ENS node.\n', '     * @param node The ENS node to query.\n', '     * @return The associated address.\n', '     */\n', '    function addr(bytes32 node) public view returns (address) {\n', '        return records[node].addr;\n', '    }\n', '\n', '    /**\n', '     * Returns true if the resolver implements the interface specified by the provided hash.\n', '     * @param interfaceID The ID of the interface to check for.\n', '     * @return True if the contract implements the requested interface.\n', '     */\n', '    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n', '        return interfaceID == ADDR_INTERFACE_ID ||\n', '        interfaceID == CONTENT_INTERFACE_ID ||\n', '        interfaceID == NAME_INTERFACE_ID ||\n', '        interfaceID == ABI_INTERFACE_ID ||\n', '        interfaceID == PUBKEY_INTERFACE_ID ||\n', '        interfaceID == TEXT_INTERFACE_ID ||\n', '        interfaceID == MULTIHASH_INTERFACE_ID ||\n', '        interfaceID == INTERFACE_META_ID;\n', '    }\n', '}\n', '\n', 'contract LiabilityFactory {\n', '    constructor(\n', '        address _robot_liability_lib,\n', '        address _lighthouse_lib,\n', '        XRT _xrt\n', '    ) public {\n', '        robotLiabilityLib = _robot_liability_lib;\n', '        lighthouseLib = _lighthouse_lib;\n', '        xrt = _xrt;\n', '    }\n', '\n', '    /**\n', '     * @dev New liability created \n', '     */\n', '    event NewLiability(address indexed liability);\n', '\n', '    /**\n', '     * @dev New lighthouse created\n', '     */\n', '    event NewLighthouse(address indexed lighthouse, string name);\n', '\n', '    /**\n', '     * @dev Robonomics network protocol token\n', '     */\n', '    XRT public xrt;\n', '\n', '    /**\n', '     * @dev Ethereum name system\n', '     */\n', '    ENS public ens;\n', '\n', '    /**\n', '     * @dev Robonomics ENS resolver\n', '     */\n', '    PublicResolver public resolver;\n', '\n', '    bytes32 constant lighthouseNode\n', '        // lighthouse.0.robonomics.eth\n', '        = 0x1e42a8e8e1e8cf36e83d096dcc74af801d0a194a14b897f9c8dfd403b4eebeda;\n', '\n', '    /**\n', '     *  @dev Set ENS registry contract address\n', '     */\n', '    function setENS(ENS _ens) public {\n', '      require(address(ens) == 0);\n', '      ens = _ens;\n', '      resolver = PublicResolver(ens.resolver(lighthouseNode));\n', '    }\n', '\n', '    /**\n', '     * @dev Total GAS utilized by Robonomics network\n', '     */\n', '    uint256 public totalGasUtilizing = 0;\n', '\n', '    /**\n', '     * @dev GAS utilized by liability contracts\n', '     */\n', '    mapping(address => uint256) public gasUtilizing;\n', '\n', '\n', '    /**\n', '     * @dev Used market orders accounting\n', '     */\n', '    mapping(bytes32 => bool) public usedHash;\n', '\n', '    /**\n', '     * @dev Lighthouse accounting\n', '     */\n', '    mapping(address => bool) public isLighthouse;\n', '\n', '    /**\n', '     * @dev Robot liability shared code smart contract\n', '     */\n', '    address public robotLiabilityLib;\n', '\n', '    /**\n', '     * @dev Lightouse shared code smart contract\n', '     */\n', '    address public lighthouseLib;\n', '\n', '    /**\n', '     * @dev XRT emission value for utilized gas\n', '     */\n', '    function winnerFromGas(uint256 _gas) public view returns (uint256) {\n', '        // Basic equal formula\n', '        uint256 wn = _gas;\n', '\n', '        /* Additional emission table\n', '        if (totalGasUtilizing < 347 * (10 ** 10)) {\n', '            wn *= 6;\n', '        } else if (totalGasUtilizing < 2 * 347 * (10 ** 10)) {\n', '            wn *= 4;\n', '        } else if (totalGasUtilizing < 3 * 347 * (10 ** 10)) {\n', '            wn = wn * 2667 / 1000;\n', '        } else if (totalGasUtilizing < 4 * 347 * (10 ** 10)) {\n', '            wn = wn * 1778 / 1000;\n', '        } else if (totalGasUtilizing < 5 * 347 * (10 ** 10)) {\n', '            wn = wn * 1185 / 1000;\n', '        } */\n', '\n', '        return wn ;\n', '    }\n', '\n', '    /**\n', '     * @dev Only lighthouse guard\n', '     */\n', '    modifier onlyLighthouse {\n', '        require(isLighthouse[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Parameter can be used only once\n', '     * @param _hash Single usage hash\n', '     */\n', '    function usedHashGuard(bytes32 _hash) internal {\n', '        require(!usedHash[_hash]);\n', '        usedHash[_hash] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Create robot liability smart contract\n', '     * @param _ask ABI-encoded ASK order message \n', '     * @param _bid ABI-encoded BID order message \n', '     */\n', '    function createLiability(\n', '        bytes _ask,\n', '        bytes _bid\n', '    )\n', '        external \n', '        onlyLighthouse\n', '        returns (RobotLiability liability)\n', '    {\n', '        // Store in memory available gas\n', '        uint256 gasinit = gasleft();\n', '\n', '        // Create liability\n', '        liability = new RobotLiability(robotLiabilityLib);\n', '        emit NewLiability(liability);\n', '\n', '        // Parse messages\n', '        require(liability.call(abi.encodePacked(bytes4(0x82fbaa25), _ask))); // liability.ask(...)\n', '        usedHashGuard(liability.askHash());\n', '\n', '        require(liability.call(abi.encodePacked(bytes4(0x66193359), _bid))); // liability.bid(...)\n', '        usedHashGuard(liability.bidHash());\n', '\n', '        // Transfer lighthouse fee to lighthouse worker directly\n', '        require(xrt.transferFrom(liability.promisor(),\n', '                                 tx.origin,\n', '                                 liability.lighthouseFee()));\n', '\n', '        // Transfer liability security and hold on contract\n', '        ERC20 token = liability.token();\n', '        require(token.transferFrom(liability.promisee(),\n', '                                   liability,\n', '                                   liability.cost()));\n', '\n', '        // Transfer validator fee and hold on contract\n', '        if (address(liability.validator()) != 0 && liability.validatorFee() > 0)\n', '            require(xrt.transferFrom(liability.promisee(),\n', '                                     liability,\n', '                                     liability.validatorFee()));\n', '\n', '        // Accounting gas usage of transaction\n', '        uint256 gas = gasinit - gasleft() + 110525; // Including observation error\n', '        totalGasUtilizing       += gas;\n', '        gasUtilizing[liability] += gas;\n', '     }\n', '\n', '    /**\n', '     * @dev Create lighthouse smart contract\n', '     * @param _minimalFreeze Minimal freeze value of XRT token\n', '     * @param _timeoutBlocks Max time of lighthouse silence in blocks\n', '     * @param _name Lighthouse subdomain,\n', '     *              example: for &#39;my-name&#39; will created &#39;my-name.lighthouse.0.robonomics.eth&#39; domain\n', '     */\n', '    function createLighthouse(\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks,\n', '        string  _name\n', '    )\n', '        external\n', '        returns (address lighthouse)\n', '    {\n', '        // Name reservation check\n', '        bytes32 subnode = keccak256(abi.encodePacked(lighthouseNode, keccak256(_name)));\n', '        require(ens.resolver(subnode) == 0);\n', '\n', '        // Create lighthouse\n', '        lighthouse = new Lighthouse(lighthouseLib, _minimalFreeze, _timeoutBlocks);\n', '        emit NewLighthouse(lighthouse, _name);\n', '        isLighthouse[lighthouse] = true;\n', '\n', '        // Register subnode\n', '        ens.setSubnodeOwner(lighthouseNode, keccak256(_name), this);\n', '\n', '        // Register lighthouse address\n', '        ens.setResolver(subnode, resolver);\n', '        resolver.setAddr(subnode, lighthouse);\n', '    }\n', '\n', '    /**\n', '     * @dev Is called whan after liability finalization\n', '     * @param _gas Liability finalization gas expenses\n', '     */\n', '    function liabilityFinalized(\n', '        uint256 _gas\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(gasUtilizing[msg.sender] > 0);\n', '\n', '        uint256 gas = _gas - gasleft();\n', '        totalGasUtilizing        += gas;\n', '        gasUtilizing[msg.sender] += gas;\n', '        require(xrt.mint(tx.origin, winnerFromGas(gasUtilizing[msg.sender])));\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract XRT is MintableToken, BurnableToken {\n', '    string public constant name     = "Robonomics Alpha";\n', '    string public constant symbol   = "XRT";\n', '    uint   public constant decimals = 9;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 5 * (10 ** uint256(decimals));\n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '}\n', '\n', 'contract LightContract {\n', '    /**\n', '     * @dev Shared code smart contract \n', '     */\n', '    address lib;\n', '\n', '    constructor(address _library) public {\n', '        lib = _library;\n', '    }\n', '\n', '    function() public {\n', '        require(lib.delegatecall(msg.data));\n', '    }\n', '}\n', '\n', 'contract LighthouseAPI {\n', '    address[] public members;\n', '    mapping(address => uint256) indexOf;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    uint256 public minimalFreeze;\n', '    uint256 public timeoutBlocks;\n', '\n', '    LiabilityFactory public factory;\n', '    XRT              public xrt;\n', '\n', '    uint256 public keepaliveBlock = 0;\n', '    uint256 public marker = 0;\n', '    uint256 public quota = 0;\n', '\n', '    function quotaOf(address _member) public view returns (uint256)\n', '    { return balances[_member] / minimalFreeze; }\n', '}\n', '\n', 'contract Lighthouse is LighthouseAPI, LightContract {\n', '    constructor(\n', '        address _lib,\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks\n', '    ) \n', '        public\n', '        LightContract(_lib)\n', '    {\n', '        minimalFreeze = _minimalFreeze;\n', '        timeoutBlocks = _timeoutBlocks;\n', '        factory = LiabilityFactory(msg.sender);\n', '        xrt = factory.xrt();\n', '    }\n', '}\n', '\n', 'contract RobotLiabilityAPI {\n', '    bytes   public model;\n', '    bytes   public objective;\n', '    bytes   public result;\n', '\n', '    XRT        public xrt;\n', '    ERC20   public token;\n', '\n', '    uint256 public cost;\n', '    uint256 public lighthouseFee;\n', '    uint256 public validatorFee;\n', '\n', '    bytes32 public askHash;\n', '    bytes32 public bidHash;\n', '\n', '    address public promisor;\n', '    address public promisee;\n', '    address public validator;\n', '\n', '    bool    public isConfirmed;\n', '    bool    public isFinalized;\n', '\n', '    LiabilityFactory public factory;\n', '}\n', '\n', 'contract RobotLiability is RobotLiabilityAPI, LightContract {\n', '    constructor(address _lib) public LightContract(_lib)\n', '    { factory = LiabilityFactory(msg.sender); }\n', '}\n', '\n', 'interface ENS {\n', '\n', '    // Logged when the owner of a node assigns a new owner to a subnode.\n', '    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n', '\n', '    // Logged when the owner of a node transfers ownership to a new account.\n', '    event Transfer(bytes32 indexed node, address owner);\n', '\n', '    // Logged when the resolver for a node changes.\n', '    event NewResolver(bytes32 indexed node, address resolver);\n', '\n', '    // Logged when the TTL of a node changes\n', '    event NewTTL(bytes32 indexed node, uint64 ttl);\n', '\n', '\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\n', '    function setResolver(bytes32 node, address resolver) public;\n', '    function setOwner(bytes32 node, address owner) public;\n', '    function setTTL(bytes32 node, uint64 ttl) public;\n', '    function owner(bytes32 node) public view returns (address);\n', '    function resolver(bytes32 node) public view returns (address);\n', '    function ttl(bytes32 node) public view returns (uint64);\n', '\n', '}\n', '\n', '/**\n', ' * A simple resolver anyone can use; only allows the owner of a node to set its\n', ' * address.\n', ' */\n', 'contract PublicResolver {\n', '\n', '    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n', '    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n', '    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\n', '    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n', '    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n', '    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n', '    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n', '    bytes4 constant MULTIHASH_INTERFACE_ID = 0xe89401a1;\n', '\n', '    event AddrChanged(bytes32 indexed node, address a);\n', '    event ContentChanged(bytes32 indexed node, bytes32 hash);\n', '    event NameChanged(bytes32 indexed node, string name);\n', '    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n', '    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n', '    event TextChanged(bytes32 indexed node, string indexedKey, string key);\n', '    event MultihashChanged(bytes32 indexed node, bytes hash);\n', '\n', '    struct PublicKey {\n', '        bytes32 x;\n', '        bytes32 y;\n', '    }\n', '\n', '    struct Record {\n', '        address addr;\n', '        bytes32 content;\n', '        string name;\n', '        PublicKey pubkey;\n', '        mapping(string=>string) text;\n', '        mapping(uint256=>bytes) abis;\n', '        bytes multihash;\n', '    }\n', '\n', '    ENS ens;\n', '\n', '    mapping (bytes32 => Record) records;\n', '\n', '    modifier only_owner(bytes32 node) {\n', '        require(ens.owner(node) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructor.\n', '     * @param ensAddr The ENS registrar contract.\n', '     */\n', '    function PublicResolver(ENS ensAddr) public {\n', '        ens = ensAddr;\n', '    }\n', '\n', '    /**\n', '     * Sets the address associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param addr The address to set.\n', '     */\n', '    function setAddr(bytes32 node, address addr) public only_owner(node) {\n', '        records[node].addr = addr;\n', '        AddrChanged(node, addr);\n', '    }\n', '\n', '    /**\n', '     * Sets the content hash associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The node to update.\n', '     * @param hash The content hash to set\n', '     */\n', '    function setContent(bytes32 node, bytes32 hash) public only_owner(node) {\n', '        records[node].content = hash;\n', '        ContentChanged(node, hash);\n', '    }\n', '\n', '    /**\n', '     * Sets the multihash associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param hash The multihash to set\n', '     */\n', '    function setMultihash(bytes32 node, bytes hash) public only_owner(node) {\n', '        records[node].multihash = hash;\n', '        MultihashChanged(node, hash);\n', '    }\n', '    \n', '    /**\n', '     * Sets the name associated with an ENS node, for reverse records.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param name The name to set.\n', '     */\n', '    function setName(bytes32 node, string name) public only_owner(node) {\n', '        records[node].name = name;\n', '        NameChanged(node, name);\n', '    }\n', '\n', '    /**\n', '     * Sets the ABI associated with an ENS node.\n', '     * Nodes may have one ABI of each content type. To remove an ABI, set it to\n', '     * the empty string.\n', '     * @param node The node to update.\n', '     * @param contentType The content type of the ABI\n', '     * @param data The ABI data.\n', '     */\n', '    function setABI(bytes32 node, uint256 contentType, bytes data) public only_owner(node) {\n', '        // Content types must be powers of 2\n', '        require(((contentType - 1) & contentType) == 0);\n', '        \n', '        records[node].abis[contentType] = data;\n', '        ABIChanged(node, contentType);\n', '    }\n', '    \n', '    /**\n', '     * Sets the SECP256k1 public key associated with an ENS node.\n', '     * @param node The ENS node to query\n', '     * @param x the X coordinate of the curve point for the public key.\n', '     * @param y the Y coordinate of the curve point for the public key.\n', '     */\n', '    function setPubkey(bytes32 node, bytes32 x, bytes32 y) public only_owner(node) {\n', '        records[node].pubkey = PublicKey(x, y);\n', '        PubkeyChanged(node, x, y);\n', '    }\n', '\n', '    /**\n', '     * Sets the text data associated with an ENS node and key.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param key The key to set.\n', '     * @param value The text data value to set.\n', '     */\n', '    function setText(bytes32 node, string key, string value) public only_owner(node) {\n', '        records[node].text[key] = value;\n', '        TextChanged(node, key, key);\n', '    }\n', '\n', '    /**\n', '     * Returns the text data associated with an ENS node and key.\n', '     * @param node The ENS node to query.\n', '     * @param key The text data key to query.\n', '     * @return The associated text data.\n', '     */\n', '    function text(bytes32 node, string key) public view returns (string) {\n', '        return records[node].text[key];\n', '    }\n', '\n', '    /**\n', '     * Returns the SECP256k1 public key associated with an ENS node.\n', '     * Defined in EIP 619.\n', '     * @param node The ENS node to query\n', '     * @return x, y the X and Y coordinates of the curve point for the public key.\n', '     */\n', '    function pubkey(bytes32 node) public view returns (bytes32 x, bytes32 y) {\n', '        return (records[node].pubkey.x, records[node].pubkey.y);\n', '    }\n', '\n', '    /**\n', '     * Returns the ABI associated with an ENS node.\n', '     * Defined in EIP205.\n', '     * @param node The ENS node to query\n', '     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n', '     * @return contentType The content type of the return value\n', '     * @return data The ABI data\n', '     */\n', '    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n', '        Record storage record = records[node];\n', '        for (contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n', '            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n', '                data = record.abis[contentType];\n', '                return;\n', '            }\n', '        }\n', '        contentType = 0;\n', '    }\n', '\n', '    /**\n', '     * Returns the name associated with an ENS node, for reverse records.\n', '     * Defined in EIP181.\n', '     * @param node The ENS node to query.\n', '     * @return The associated name.\n', '     */\n', '    function name(bytes32 node) public view returns (string) {\n', '        return records[node].name;\n', '    }\n', '\n', '    /**\n', '     * Returns the content hash associated with an ENS node.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The ENS node to query.\n', '     * @return The associated content hash.\n', '     */\n', '    function content(bytes32 node) public view returns (bytes32) {\n', '        return records[node].content;\n', '    }\n', '\n', '    /**\n', '     * Returns the multihash associated with an ENS node.\n', '     * @param node The ENS node to query.\n', '     * @return The associated multihash.\n', '     */\n', '    function multihash(bytes32 node) public view returns (bytes) {\n', '        return records[node].multihash;\n', '    }\n', '\n', '    /**\n', '     * Returns the address associated with an ENS node.\n', '     * @param node The ENS node to query.\n', '     * @return The associated address.\n', '     */\n', '    function addr(bytes32 node) public view returns (address) {\n', '        return records[node].addr;\n', '    }\n', '\n', '    /**\n', '     * Returns true if the resolver implements the interface specified by the provided hash.\n', '     * @param interfaceID The ID of the interface to check for.\n', '     * @return True if the contract implements the requested interface.\n', '     */\n', '    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n', '        return interfaceID == ADDR_INTERFACE_ID ||\n', '        interfaceID == CONTENT_INTERFACE_ID ||\n', '        interfaceID == NAME_INTERFACE_ID ||\n', '        interfaceID == ABI_INTERFACE_ID ||\n', '        interfaceID == PUBKEY_INTERFACE_ID ||\n', '        interfaceID == TEXT_INTERFACE_ID ||\n', '        interfaceID == MULTIHASH_INTERFACE_ID ||\n', '        interfaceID == INTERFACE_META_ID;\n', '    }\n', '}\n', '\n', 'contract LiabilityFactory {\n', '    constructor(\n', '        address _robot_liability_lib,\n', '        address _lighthouse_lib,\n', '        XRT _xrt\n', '    ) public {\n', '        robotLiabilityLib = _robot_liability_lib;\n', '        lighthouseLib = _lighthouse_lib;\n', '        xrt = _xrt;\n', '    }\n', '\n', '    /**\n', '     * @dev New liability created \n', '     */\n', '    event NewLiability(address indexed liability);\n', '\n', '    /**\n', '     * @dev New lighthouse created\n', '     */\n', '    event NewLighthouse(address indexed lighthouse, string name);\n', '\n', '    /**\n', '     * @dev Robonomics network protocol token\n', '     */\n', '    XRT public xrt;\n', '\n', '    /**\n', '     * @dev Ethereum name system\n', '     */\n', '    ENS public ens;\n', '\n', '    /**\n', '     * @dev Robonomics ENS resolver\n', '     */\n', '    PublicResolver public resolver;\n', '\n', '    bytes32 constant lighthouseNode\n', '        // lighthouse.0.robonomics.eth\n', '        = 0x1e42a8e8e1e8cf36e83d096dcc74af801d0a194a14b897f9c8dfd403b4eebeda;\n', '\n', '    /**\n', '     *  @dev Set ENS registry contract address\n', '     */\n', '    function setENS(ENS _ens) public {\n', '      require(address(ens) == 0);\n', '      ens = _ens;\n', '      resolver = PublicResolver(ens.resolver(lighthouseNode));\n', '    }\n', '\n', '    /**\n', '     * @dev Total GAS utilized by Robonomics network\n', '     */\n', '    uint256 public totalGasUtilizing = 0;\n', '\n', '    /**\n', '     * @dev GAS utilized by liability contracts\n', '     */\n', '    mapping(address => uint256) public gasUtilizing;\n', '\n', '\n', '    /**\n', '     * @dev Used market orders accounting\n', '     */\n', '    mapping(bytes32 => bool) public usedHash;\n', '\n', '    /**\n', '     * @dev Lighthouse accounting\n', '     */\n', '    mapping(address => bool) public isLighthouse;\n', '\n', '    /**\n', '     * @dev Robot liability shared code smart contract\n', '     */\n', '    address public robotLiabilityLib;\n', '\n', '    /**\n', '     * @dev Lightouse shared code smart contract\n', '     */\n', '    address public lighthouseLib;\n', '\n', '    /**\n', '     * @dev XRT emission value for utilized gas\n', '     */\n', '    function winnerFromGas(uint256 _gas) public view returns (uint256) {\n', '        // Basic equal formula\n', '        uint256 wn = _gas;\n', '\n', '        /* Additional emission table\n', '        if (totalGasUtilizing < 347 * (10 ** 10)) {\n', '            wn *= 6;\n', '        } else if (totalGasUtilizing < 2 * 347 * (10 ** 10)) {\n', '            wn *= 4;\n', '        } else if (totalGasUtilizing < 3 * 347 * (10 ** 10)) {\n', '            wn = wn * 2667 / 1000;\n', '        } else if (totalGasUtilizing < 4 * 347 * (10 ** 10)) {\n', '            wn = wn * 1778 / 1000;\n', '        } else if (totalGasUtilizing < 5 * 347 * (10 ** 10)) {\n', '            wn = wn * 1185 / 1000;\n', '        } */\n', '\n', '        return wn ;\n', '    }\n', '\n', '    /**\n', '     * @dev Only lighthouse guard\n', '     */\n', '    modifier onlyLighthouse {\n', '        require(isLighthouse[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Parameter can be used only once\n', '     * @param _hash Single usage hash\n', '     */\n', '    function usedHashGuard(bytes32 _hash) internal {\n', '        require(!usedHash[_hash]);\n', '        usedHash[_hash] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Create robot liability smart contract\n', '     * @param _ask ABI-encoded ASK order message \n', '     * @param _bid ABI-encoded BID order message \n', '     */\n', '    function createLiability(\n', '        bytes _ask,\n', '        bytes _bid\n', '    )\n', '        external \n', '        onlyLighthouse\n', '        returns (RobotLiability liability)\n', '    {\n', '        // Store in memory available gas\n', '        uint256 gasinit = gasleft();\n', '\n', '        // Create liability\n', '        liability = new RobotLiability(robotLiabilityLib);\n', '        emit NewLiability(liability);\n', '\n', '        // Parse messages\n', '        require(liability.call(abi.encodePacked(bytes4(0x82fbaa25), _ask))); // liability.ask(...)\n', '        usedHashGuard(liability.askHash());\n', '\n', '        require(liability.call(abi.encodePacked(bytes4(0x66193359), _bid))); // liability.bid(...)\n', '        usedHashGuard(liability.bidHash());\n', '\n', '        // Transfer lighthouse fee to lighthouse worker directly\n', '        require(xrt.transferFrom(liability.promisor(),\n', '                                 tx.origin,\n', '                                 liability.lighthouseFee()));\n', '\n', '        // Transfer liability security and hold on contract\n', '        ERC20 token = liability.token();\n', '        require(token.transferFrom(liability.promisee(),\n', '                                   liability,\n', '                                   liability.cost()));\n', '\n', '        // Transfer validator fee and hold on contract\n', '        if (address(liability.validator()) != 0 && liability.validatorFee() > 0)\n', '            require(xrt.transferFrom(liability.promisee(),\n', '                                     liability,\n', '                                     liability.validatorFee()));\n', '\n', '        // Accounting gas usage of transaction\n', '        uint256 gas = gasinit - gasleft() + 110525; // Including observation error\n', '        totalGasUtilizing       += gas;\n', '        gasUtilizing[liability] += gas;\n', '     }\n', '\n', '    /**\n', '     * @dev Create lighthouse smart contract\n', '     * @param _minimalFreeze Minimal freeze value of XRT token\n', '     * @param _timeoutBlocks Max time of lighthouse silence in blocks\n', '     * @param _name Lighthouse subdomain,\n', "     *              example: for 'my-name' will created 'my-name.lighthouse.0.robonomics.eth' domain\n", '     */\n', '    function createLighthouse(\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks,\n', '        string  _name\n', '    )\n', '        external\n', '        returns (address lighthouse)\n', '    {\n', '        // Name reservation check\n', '        bytes32 subnode = keccak256(abi.encodePacked(lighthouseNode, keccak256(_name)));\n', '        require(ens.resolver(subnode) == 0);\n', '\n', '        // Create lighthouse\n', '        lighthouse = new Lighthouse(lighthouseLib, _minimalFreeze, _timeoutBlocks);\n', '        emit NewLighthouse(lighthouse, _name);\n', '        isLighthouse[lighthouse] = true;\n', '\n', '        // Register subnode\n', '        ens.setSubnodeOwner(lighthouseNode, keccak256(_name), this);\n', '\n', '        // Register lighthouse address\n', '        ens.setResolver(subnode, resolver);\n', '        resolver.setAddr(subnode, lighthouse);\n', '    }\n', '\n', '    /**\n', '     * @dev Is called whan after liability finalization\n', '     * @param _gas Liability finalization gas expenses\n', '     */\n', '    function liabilityFinalized(\n', '        uint256 _gas\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(gasUtilizing[msg.sender] > 0);\n', '\n', '        uint256 gas = _gas - gasleft();\n', '        totalGasUtilizing        += gas;\n', '        gasUtilizing[msg.sender] += gas;\n', '        require(xrt.mint(tx.origin, winnerFromGas(gasUtilizing[msg.sender])));\n', '        return true;\n', '    }\n', '}']
