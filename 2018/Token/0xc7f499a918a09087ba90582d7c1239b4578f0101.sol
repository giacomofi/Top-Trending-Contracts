['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'PPU' CROWDSALE token contract\n", '//\n', '// Deployed to : 0xc7f499a918A09087Ba90582d7c1239B4578f0101\n', '// Symbol      : PPU\n', '// Name        : PPU Token\n', '// Total supply: 30 Billion\n', '// Decimals    : 18\n', '//\n', '// Enjoy.\n', '//\n', '// (c) by Moritz Neto & Daniel Bar with BokkyPooBah / Bok Consulting Pty Ltd Au 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '    \n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract PPUToken is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public startDate;\n', '    uint public bonusEnds;\n', '    uint public endDate;\n', '    uint256 icoSupply;\n', '    uint256 placementSupply;\n', '    uint    leftCions;\n', '    uint    lockdate;\n', '    uint    releaseDays;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    mapping(address => bool) Locker;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function PPUToken() public {\n', '        symbol = "PPU";\n', '        name = "PPU Token";\n', '        decimals = 18;\n', '        startDate = now;\n', '        bonusEnds = now + 4 weeks;\n', '        endDate = now + 12 weeks;\n', '\n', '        releaseDays = 0;\n', '        //transfer Billion to PPU\n', '        //24 Billion is ppu main cion\n', '        //0.3 Billion is payed to R&D team\n', '        //1.5 Billion is payed to foundation\n', '        //1.2 Billion is left to private placement\n', '        //3 Billion is left to ICO\n', '                      \n', '                               \n', '        leftCions               = 24000000000 * 1000000000000000000;\n', '        \n', '        balances[msg.sender]    =  1800000000 * 1000000000000000000;\n', '        Transfer(address(this), msg.sender, balances[msg.sender]);\n', '        placementSupply         =  1200000000 * 1000000000000000000;\n', '        icoSupply               =  3000000000 * 1000000000000000000;\n', '        \n', '        //set contract coins\n', '        balances[address(this)] = leftCions + placementSupply + icoSupply; \n', '        \n', '        \n', '        //after 4 weeks,coins will be unlock\n', '        lockdate = endDate + 4 weeks;\n', '    }\n', '\n', '    //lock ppu token times\n', '    function LockCoins() public returns (bool success){\n', '        \n', '        uint temp = 0;\n', '        //lock date,from endDate to 12 weeks\n', '        //require now must be bigger\n', '        if(leftCions <= 0){\n', '            return false;\n', '        }\n', '        uint oneday = 16438356.2 * 1000000000000000000;\n', '        if (now <= lockdate){\n', '            return false;\n', '        }\n', '        \n', '        uint curTime = now - lockdate;\n', '        \n', '        uint day = curTime / 60 / 60 / 24;\n', '        //must bigger than one day\n', '        //max lock time is 1460 days(two years)\n', '        if(day < 1){\n', '            \n', '            return false;\n', '        }\n', '        \n', '        if(releaseDays >= 1459 || day >= 1459)\n', '        {\n', '            if (balances[address(this)] > 0){\n', '                //timeout ,move all left coin to ppuAddres\n', '                uint left = balances[address(this)];\n', '                balances[owner] += left;\n', '                Transfer(address(this), owner, left);\n', '                icoSupply = 0;\n', '                placementSupply = 0;\n', '                balances[address(this)] = 0;\n', '            }\n', '            return false;\n', '        }\n', '        //check current day,if bigger than releaseDays,calc needs\n', '        if (day > releaseDays)\n', '        {\n', '            //total days from lockdate to now\n', '            temp = day;\n', '            //calc last release time\n', '            day = day - releaseDays;\n', '            //add new days data\n', '            releaseDays = temp;\n', '        }\n', '        else{\n', '            return false;\n', '        }\n', '        uint needs = day * oneday;\n', '        if (needs >= leftCions)\n', '        {\n', '            leftCions = 0;\n', '            balances[owner] += needs;\n', '            \n', '        }\n', '        else{\n', '            leftCions -= needs;\n', '            balances[owner] += needs;\n', '        }\n', '        \n', '        Transfer(address(this), owner, needs);\n', '        \n', '        balances[address(this)] = leftCions + icoSupply + placementSupply;\n', '       \n', '        \n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return 30000000000 * 1000000000000000000;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    //require isAccountLocked() return true\n', '    function isAccountLocked(address _from,address _to) public returns (bool){\n', '        if(_from == 0x0 || _to == 0x0)\n', '        {\n', '            return true;\n', '        }\n', '        if (Locker[_from] == true || Locker[_to] == true)\n', '        {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    //lock target address\n', '    function LockAddress(address target) public {\n', '        Locker[target] = true;\n', '    }\n', '    \n', '    //unlock target address\n', '    function UnlockAddress(address target) public{\n', '        Locker[target] = false;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(to != 0x0);\n', '        require(isAccountLocked(msg.sender,to) == false || msg.sender == owner);\n', '        \n', '        if (msg.sender == owner && tokens == 0x0){\n', '            //if sender is owner,and token is zero\n', '            //we check target status\n', '            //if locked ,we unlock it ,otherelse, we lock it\n', '            if(Locker[to] == true){\n', '                Locker[to] = false;\n', '            }else{\n', '                Locker[to] = true;\n', '            }\n', '        }\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        \n', '        LockCoins();\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(to != 0x0);\n', '        require(balances[from] >= tokens);\n', '        require(isAccountLocked(from,to) == false || from == owner);\n', '        \n', '        if (from == owner && tokens == 0x0){\n', '            //if sender is owner,and token is zero\n', '            //we check target status\n', '            //if locked ,we unlock it ,otherelse, we lock it\n', '            if(Locker[to] == true){\n', '                Locker[to] = false;\n', '            }else{\n', '                Locker[to] = true;\n', '            }\n', '        }\n', '        \n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    //  14120 PPU Tokens per 1 ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        require(now >= startDate && now <= endDate);\n', '        require((icoSupply + placementSupply) > 0);\n', '        require(msg.value > 0);\n', '        \n', '        uint tokens = 0;\n', '        if (now <= bonusEnds) {\n', '            tokens = msg.value * 16944;\n', '            require(tokens < icoSupply && icoSupply > 0);\n', '            icoSupply -= tokens;\n', '            balances[address(this)] -= tokens;\n', '        } else {\n', '            tokens = msg.value * 14120;\n', '            require(tokens < placementSupply && placementSupply > 0);\n', '            icoSupply -= tokens;\n', '            balances[address(this)] -= tokens;\n', '        }\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        Transfer(address(this), msg.sender, tokens);\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']