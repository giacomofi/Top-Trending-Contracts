['pragma solidity 0.4.24;\n', '\n', 'contract ERC20 {\n', ' // modifiers\n', '\n', ' // mitigate short address attack\n', ' // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\n', ' // TODO: doublecheck implication of >= compared to ==\n', '    modifier onlyPayloadSize(uint numWords) {\n', '        assert(msg.data.length >= numWords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    uint256 public totalSupply;\n', '    /*\n', '      *  Public functions\n', '      */\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    /*\n', '      *  Events\n', '      */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event SaleContractActivation(address saleContract, uint256 tokensForSale);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  // it is recommended to define functions which can neither read the state of blockchain nor write in it as pure instead of constant\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public creater;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable(address _owner) public {\n', '        creater = msg.sender;\n', '        if (_owner != 0) {\n', '            owner = _owner;\n', '\n', '        }\n', '        else {\n', '            owner = creater;\n', '        }\n', '\n', '    }\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isCreator() {\n', '        require(msg.sender == creater);\n', '        _;\n', '    }\n', '\n', '   \n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping(address => uint256) balances;\n', '\n', '  /// @dev Returns number of tokens owned by given address\n', '  /// @param _owner Address of token owner\n', '  /// @return Balance of owner\n', '\n', '  // it is recommended to define functions which can read the state of blockchain but cannot write in it as view instead of constant\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '  /// @dev Transfers sender&#39;s tokens to a given address. Returns success\n', '  /// @param _to Address of token receiver\n', '  /// @param _value Number of tokens to transfer\n', '  /// @return Was transfer successful?\n', '\n', '    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to].add(_value) > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            emit Transfer(msg.sender, _to, _value); // solhint-disable-line\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n', '    /// @param _from Address from where tokens are withdrawn\n', '    /// @param _to Address to where tokens are sent\n', '    /// @param _value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public onlyPayloadSize(2) returns (bool) {\n', '      // To change the approve amount you first have to reduce the addresses`\n', '      //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '      //  already 0 to mitigate the race condition described here:\n', '      //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '        require(_value == 0 && (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) public onlyPayloadSize(3) returns (bool success) {\n', '        require(allowed[msg.sender][_spender] == _oldValue);\n', '        allowed[msg.sender][_spender] = _newValue;\n', '        emit Approval(msg.sender, _spender, _newValue); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', ' /**\n', '  * @dev Burns a specific amount of tokens.\n', '  * @param _value The amount of token to be burned.\n', '  */\n', '    function burn(uint256 _value) public returns (bool burnSuccess) {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '}\n', 'contract TravelHelperToken is StandardToken, Ownable {\n', '\n', '\n', '//Begin: state variables\n', '    address public saleContract;\n', '    string public constant name = "TravelHelperToken";\n', '    string public constant symbol = "TRH";\n', '    uint public constant decimals = 18;\n', '    bool public fundraising = true;\n', '    uint public totalReleased = 0;\n', '    address public teamAddressOne;\n', '    address public teamAddressTwo;\n', '    address public marketingAddress;\n', '    address public advisorsAddress;\n', '    address public teamAddressThree;\n', '    uint public icoStartBlock;\n', '    uint256 public tokensUnlockPeriod = 37 days / 15; // 7 days presale + 30 days crowdsale\n', '    uint public tokensSupply = 5000000000; // 5 billion\n', '    uint public teamTokens = 1480000000 * 1 ether; // 1.48 billion\n', '    uint public teamAddressThreeTokens = 20000000 * 1 ether; // 20 million\n', '    uint public marketingTeamTokens = 500000000 * 1 ether; // 500 million\n', '    uint public advisorsTokens = 350000000 * 1 ether; // 350 million\n', '    uint public bountyTokens = 150000000 * 1 ether; //150 million\n', '     uint public tokensForSale = 2500000000 * 1 ether; // 2.5 billion\n', '    uint public releasedTeamTokens = 0;\n', '    uint public releasedAdvisorsTokens = 0;\n', '    uint public releasedMarketingTokens = 0;\n', '    bool public tokensLocked = true;\n', '    Ownable ownable;\n', '    mapping (address => bool) public frozenAccounts;\n', '   \n', ' //End: state variables\n', ' //Begin: events\n', '    event FrozenFund(address target, bool frozen);\n', '    event PriceLog(string text);\n', '//End: events\n', '\n', '//Begin: modifiers\n', '\n', '\n', '    modifier manageTransfer() {\n', '        if (msg.sender == owner) {\n', '            _;\n', '        }\n', '        else {\n', '            require(fundraising == false);\n', '            _;\n', '        }\n', '    }\n', '    \n', '    modifier tokenNotLocked() {\n', '      if (icoStartBlock > 0 && block.number.sub(icoStartBlock) > tokensUnlockPeriod) {\n', '        tokensLocked = false;\n', '        _;\n', '      } else {\n', '        revert();\n', '      }\n', '    \n', '  }\n', '\n', '//End: modifiers\n', '\n', '//Begin: constructor\n', '    function TravelHelperToken(\n', '    address _tokensOwner,\n', '    address _teamAddressOne,\n', '    address _teamAddressTwo,\n', '    address _marketingAddress,\n', '    address _advisorsAddress,\n', '    address _teamAddressThree) public Ownable(_tokensOwner) {\n', '        require(_tokensOwner != 0x0);\n', '        require(_teamAddressOne != 0x0);\n', '        require(_teamAddressTwo != 0x0);\n', '        teamAddressOne = _teamAddressOne;\n', '        teamAddressTwo = _teamAddressTwo;\n', '        advisorsAddress = _advisorsAddress;\n', '        marketingAddress = _marketingAddress;\n', '        teamAddressThree = _teamAddressThree;\n', '        totalSupply = tokensSupply * (uint256(10) ** decimals);\n', '\n', '    }\n', '\n', '   \n', '\n', '//End: constructor\n', '\n', '    \n', '\n', '//Begin: overriden methods\n', '\n', '    function transfer(address _to, uint256 _value) public manageTransfer onlyPayloadSize(2) returns (bool success) {\n', '        require(_to != address(0));\n', '        require(!frozenAccounts[msg.sender]);\n', '        super.transfer(_to,_value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        manageTransfer\n', '        onlyPayloadSize(3) returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_from != address(0));\n', '        require(!frozenAccounts[msg.sender]);\n', '        super.transferFrom(_from,_to,_value);\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '//End: overriden methods\n', '\n', '\n', '//Being: setters\n', '   \n', '    function activateSaleContract(address _saleContract) public onlyOwner {\n', '    require(tokensForSale > 0);\n', '    require(teamTokens > 0);\n', '    require(_saleContract != address(0));\n', '    require(saleContract == address(0));\n', '    saleContract = _saleContract;\n', '    uint  totalValue = teamTokens.mul(50).div(100);\n', '    balances[teamAddressOne] = balances[teamAddressOne].add(totalValue);\n', '    balances[teamAddressTwo] = balances[teamAddressTwo].add(totalValue);\n', '    balances[advisorsAddress] = balances[advisorsAddress].add(advisorsTokens);\n', '    balances[teamAddressThree] = balances[teamAddressThree].add(teamAddressThreeTokens);\n', '    balances[marketingAddress] = balances[marketingAddress].add(marketingTeamTokens);\n', '    releasedTeamTokens = releasedTeamTokens.add(teamTokens);\n', '    releasedAdvisorsTokens = releasedAdvisorsTokens.add(advisorsTokens);\n', '    releasedMarketingTokens = releasedMarketingTokens.add(marketingTeamTokens);\n', '    balances[saleContract] = balances[saleContract].add(tokensForSale);\n', '    totalReleased = totalReleased.add(tokensForSale).add(teamTokens).add(advisorsTokens).add(teamAddressThreeTokens).add(marketingTeamTokens);\n', '    tokensForSale = 0; \n', '    teamTokens = 0; \n', '    teamAddressThreeTokens = 0;\n', '    icoStartBlock = block.number;\n', '    assert(totalReleased <= totalSupply);\n', '    emit Transfer(address(this), teamAddressOne, totalValue);\n', '    emit Transfer(address(this), teamAddressTwo, totalValue);\n', '    emit Transfer(address(this),teamAddressThree,teamAddressThreeTokens);\n', '    emit Transfer(address(this), saleContract, 2500000000 * 1 ether);\n', '    emit SaleContractActivation(saleContract, 2500000000 * 1 ether);\n', '  }\n', '  \n', ' function saleTransfer(address _to, uint256 _value) public returns (bool) {\n', '    require(saleContract != address(0));\n', '    require(msg.sender == saleContract);\n', '    return super.transfer(_to, _value);\n', '  }\n', '  \n', '  \n', '  function burnTokensForSale() public returns (bool) {\n', '    require(saleContract != address(0));\n', '    require(msg.sender == saleContract);\n', '    uint256 tokens = balances[saleContract];\n', '    require(tokens > 0);\n', '    require(tokens <= totalSupply);\n', '    balances[saleContract] = 0;\n', '    totalSupply = totalSupply.sub(tokens);\n', '    emit Burn(saleContract, tokens);\n', '    return true;\n', '  }\n', '  \n', '   \n', ' \n', '    \n', '\n', '    function finalize() public {\n', '        require(fundraising != false);\n', '        require(msg.sender == saleContract);\n', '        // Switch to Operational state. This is the only place this can happen.\n', '        fundraising = false;\n', '    }\n', '\n', '   function freezeAccount (address target, bool freeze) public onlyOwner {\n', '        require(target != 0x0);\n', '        require(freeze == (true || false));\n', '        frozenAccounts[target] = freeze;\n', '        emit FrozenFund(target, freeze); // solhint-disable-line\n', '    }\n', '    \n', '    function sendBounty(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '    uint256 value = _value.mul(1 ether);\n', '    require(bountyTokens >= value);\n', '    totalReleased = totalReleased.add(value);\n', '    require(totalReleased <= totalSupply);\n', '    balances[_to] = balances[_to].add(value);\n', '    bountyTokens = bountyTokens.sub(value);\n', '    emit Transfer(address(this), _to, value);\n', '    return true;\n', '  }\n', ' /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner public  {\n', '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner); // solhint-disable-line\n', '        \n', '    }\n', '//End: setters\n', '   \n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '\n', 'contract ERC20 {\n', ' // modifiers\n', '\n', ' // mitigate short address attack\n', ' // thanks to https://github.com/numerai/contract/blob/c182465f82e50ced8dacb3977ec374a892f5fa8c/contracts/Safe.sol#L30-L34.\n', ' // TODO: doublecheck implication of >= compared to ==\n', '    modifier onlyPayloadSize(uint numWords) {\n', '        assert(msg.data.length >= numWords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    uint256 public totalSupply;\n', '    /*\n', '      *  Public functions\n', '      */\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    /*\n', '      *  Events\n', '      */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event SaleContractActivation(address saleContract, uint256 tokensForSale);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  // it is recommended to define functions which can neither read the state of blockchain nor write in it as pure instead of constant\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public creater;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable(address _owner) public {\n', '        creater = msg.sender;\n', '        if (_owner != 0) {\n', '            owner = _owner;\n', '\n', '        }\n', '        else {\n', '            owner = creater;\n', '        }\n', '\n', '    }\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isCreator() {\n', '        require(msg.sender == creater);\n', '        _;\n', '    }\n', '\n', '   \n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping(address => uint256) balances;\n', '\n', '  /// @dev Returns number of tokens owned by given address\n', '  /// @param _owner Address of token owner\n', '  /// @return Balance of owner\n', '\n', '  // it is recommended to define functions which can read the state of blockchain but cannot write in it as view instead of constant\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', "  /// @dev Transfers sender's tokens to a given address. Returns success\n", '  /// @param _to Address of token receiver\n', '  /// @param _value Number of tokens to transfer\n', '  /// @return Was transfer successful?\n', '\n', '    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to].add(_value) > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            emit Transfer(msg.sender, _to, _value); // solhint-disable-line\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n', '    /// @param _from Address from where tokens are withdrawn\n', '    /// @param _to Address to where tokens are sent\n', '    /// @param _value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public onlyPayloadSize(2) returns (bool) {\n', '      // To change the approve amount you first have to reduce the addresses`\n', '      //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '      //  already 0 to mitigate the race condition described here:\n', '      //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '        require(_value == 0 && (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) public onlyPayloadSize(3) returns (bool success) {\n', '        require(allowed[msg.sender][_spender] == _oldValue);\n', '        allowed[msg.sender][_spender] = _newValue;\n', '        emit Approval(msg.sender, _spender, _newValue); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', ' /**\n', '  * @dev Burns a specific amount of tokens.\n', '  * @param _value The amount of token to be burned.\n', '  */\n', '    function burn(uint256 _value) public returns (bool burnSuccess) {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value); // solhint-disable-line\n', '        return true;\n', '    }\n', '\n', '}\n', 'contract TravelHelperToken is StandardToken, Ownable {\n', '\n', '\n', '//Begin: state variables\n', '    address public saleContract;\n', '    string public constant name = "TravelHelperToken";\n', '    string public constant symbol = "TRH";\n', '    uint public constant decimals = 18;\n', '    bool public fundraising = true;\n', '    uint public totalReleased = 0;\n', '    address public teamAddressOne;\n', '    address public teamAddressTwo;\n', '    address public marketingAddress;\n', '    address public advisorsAddress;\n', '    address public teamAddressThree;\n', '    uint public icoStartBlock;\n', '    uint256 public tokensUnlockPeriod = 37 days / 15; // 7 days presale + 30 days crowdsale\n', '    uint public tokensSupply = 5000000000; // 5 billion\n', '    uint public teamTokens = 1480000000 * 1 ether; // 1.48 billion\n', '    uint public teamAddressThreeTokens = 20000000 * 1 ether; // 20 million\n', '    uint public marketingTeamTokens = 500000000 * 1 ether; // 500 million\n', '    uint public advisorsTokens = 350000000 * 1 ether; // 350 million\n', '    uint public bountyTokens = 150000000 * 1 ether; //150 million\n', '     uint public tokensForSale = 2500000000 * 1 ether; // 2.5 billion\n', '    uint public releasedTeamTokens = 0;\n', '    uint public releasedAdvisorsTokens = 0;\n', '    uint public releasedMarketingTokens = 0;\n', '    bool public tokensLocked = true;\n', '    Ownable ownable;\n', '    mapping (address => bool) public frozenAccounts;\n', '   \n', ' //End: state variables\n', ' //Begin: events\n', '    event FrozenFund(address target, bool frozen);\n', '    event PriceLog(string text);\n', '//End: events\n', '\n', '//Begin: modifiers\n', '\n', '\n', '    modifier manageTransfer() {\n', '        if (msg.sender == owner) {\n', '            _;\n', '        }\n', '        else {\n', '            require(fundraising == false);\n', '            _;\n', '        }\n', '    }\n', '    \n', '    modifier tokenNotLocked() {\n', '      if (icoStartBlock > 0 && block.number.sub(icoStartBlock) > tokensUnlockPeriod) {\n', '        tokensLocked = false;\n', '        _;\n', '      } else {\n', '        revert();\n', '      }\n', '    \n', '  }\n', '\n', '//End: modifiers\n', '\n', '//Begin: constructor\n', '    function TravelHelperToken(\n', '    address _tokensOwner,\n', '    address _teamAddressOne,\n', '    address _teamAddressTwo,\n', '    address _marketingAddress,\n', '    address _advisorsAddress,\n', '    address _teamAddressThree) public Ownable(_tokensOwner) {\n', '        require(_tokensOwner != 0x0);\n', '        require(_teamAddressOne != 0x0);\n', '        require(_teamAddressTwo != 0x0);\n', '        teamAddressOne = _teamAddressOne;\n', '        teamAddressTwo = _teamAddressTwo;\n', '        advisorsAddress = _advisorsAddress;\n', '        marketingAddress = _marketingAddress;\n', '        teamAddressThree = _teamAddressThree;\n', '        totalSupply = tokensSupply * (uint256(10) ** decimals);\n', '\n', '    }\n', '\n', '   \n', '\n', '//End: constructor\n', '\n', '    \n', '\n', '//Begin: overriden methods\n', '\n', '    function transfer(address _to, uint256 _value) public manageTransfer onlyPayloadSize(2) returns (bool success) {\n', '        require(_to != address(0));\n', '        require(!frozenAccounts[msg.sender]);\n', '        super.transfer(_to,_value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        manageTransfer\n', '        onlyPayloadSize(3) returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_from != address(0));\n', '        require(!frozenAccounts[msg.sender]);\n', '        super.transferFrom(_from,_to,_value);\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '//End: overriden methods\n', '\n', '\n', '//Being: setters\n', '   \n', '    function activateSaleContract(address _saleContract) public onlyOwner {\n', '    require(tokensForSale > 0);\n', '    require(teamTokens > 0);\n', '    require(_saleContract != address(0));\n', '    require(saleContract == address(0));\n', '    saleContract = _saleContract;\n', '    uint  totalValue = teamTokens.mul(50).div(100);\n', '    balances[teamAddressOne] = balances[teamAddressOne].add(totalValue);\n', '    balances[teamAddressTwo] = balances[teamAddressTwo].add(totalValue);\n', '    balances[advisorsAddress] = balances[advisorsAddress].add(advisorsTokens);\n', '    balances[teamAddressThree] = balances[teamAddressThree].add(teamAddressThreeTokens);\n', '    balances[marketingAddress] = balances[marketingAddress].add(marketingTeamTokens);\n', '    releasedTeamTokens = releasedTeamTokens.add(teamTokens);\n', '    releasedAdvisorsTokens = releasedAdvisorsTokens.add(advisorsTokens);\n', '    releasedMarketingTokens = releasedMarketingTokens.add(marketingTeamTokens);\n', '    balances[saleContract] = balances[saleContract].add(tokensForSale);\n', '    totalReleased = totalReleased.add(tokensForSale).add(teamTokens).add(advisorsTokens).add(teamAddressThreeTokens).add(marketingTeamTokens);\n', '    tokensForSale = 0; \n', '    teamTokens = 0; \n', '    teamAddressThreeTokens = 0;\n', '    icoStartBlock = block.number;\n', '    assert(totalReleased <= totalSupply);\n', '    emit Transfer(address(this), teamAddressOne, totalValue);\n', '    emit Transfer(address(this), teamAddressTwo, totalValue);\n', '    emit Transfer(address(this),teamAddressThree,teamAddressThreeTokens);\n', '    emit Transfer(address(this), saleContract, 2500000000 * 1 ether);\n', '    emit SaleContractActivation(saleContract, 2500000000 * 1 ether);\n', '  }\n', '  \n', ' function saleTransfer(address _to, uint256 _value) public returns (bool) {\n', '    require(saleContract != address(0));\n', '    require(msg.sender == saleContract);\n', '    return super.transfer(_to, _value);\n', '  }\n', '  \n', '  \n', '  function burnTokensForSale() public returns (bool) {\n', '    require(saleContract != address(0));\n', '    require(msg.sender == saleContract);\n', '    uint256 tokens = balances[saleContract];\n', '    require(tokens > 0);\n', '    require(tokens <= totalSupply);\n', '    balances[saleContract] = 0;\n', '    totalSupply = totalSupply.sub(tokens);\n', '    emit Burn(saleContract, tokens);\n', '    return true;\n', '  }\n', '  \n', '   \n', ' \n', '    \n', '\n', '    function finalize() public {\n', '        require(fundraising != false);\n', '        require(msg.sender == saleContract);\n', '        // Switch to Operational state. This is the only place this can happen.\n', '        fundraising = false;\n', '    }\n', '\n', '   function freezeAccount (address target, bool freeze) public onlyOwner {\n', '        require(target != 0x0);\n', '        require(freeze == (true || false));\n', '        frozenAccounts[target] = freeze;\n', '        emit FrozenFund(target, freeze); // solhint-disable-line\n', '    }\n', '    \n', '    function sendBounty(address _to, uint256 _value) public onlyOwner returns (bool) {\n', '    uint256 value = _value.mul(1 ether);\n', '    require(bountyTokens >= value);\n', '    totalReleased = totalReleased.add(value);\n', '    require(totalReleased <= totalSupply);\n', '    balances[_to] = balances[_to].add(value);\n', '    bountyTokens = bountyTokens.sub(value);\n', '    emit Transfer(address(this), _to, value);\n', '    return true;\n', '  }\n', ' /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner public  {\n', '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner); // solhint-disable-line\n', '        \n', '    }\n', '//End: setters\n', '   \n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '}']
