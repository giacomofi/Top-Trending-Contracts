['pragma solidity ^0.4.4;\n', '\n', '/**\n', '*\n', '* ERC20 token\n', '*\n', '* doc https://github.com/ethereum/EIPs/issues/20\n', '*\n', '*/\n', 'contract ERC20Token {\n', '\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', '*\n', '* Master Coin Token\n', '*\n', '* author luc\n', '* date 2018/6/14\n', '*\n', '*/\n', 'contract MCToken is ERC20Token {\n', '\n', '    string private _name = "Master Coin";\n', '    string private _symbol = "MC";\n', '    uint8 private _decimals = 18;\n', '\n', '    uint256 private _totalSupply = 210000000 * (10 ** uint256(_decimals));\n', '\n', '    mapping(address=>uint256) private _balances;\n', '    mapping(address=>mapping(address=>uint256)) private _allowances;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function MCToken() {\n', '        _balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function name() public view returns (string name){\n', '        name = _name;\n', '    }\n', '\n', '    function symbol() public view returns (string symbol){\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8 decimals){\n', '        decimals = _decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 totalSupply){\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance){\n', '        balance = _balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        require(_balances[msg.sender] >= _value);\n', '        _balances[msg.sender] -= _value;\n', '        _balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        success = true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n', '        require(_balances[_from] >= _value);\n', '        require(_allowances[_from][msg.sender] >= _value);\n', '\n', '        uint256 previousBalances = _balances[_from] + _balances[_to];\n', '\n', '        _balances[_from] -= _value;\n', '        _allowances[_from][msg.sender] -= _value;\n', '        _balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '\n', '        assert(_balances[_from] + _balances[_to] == previousBalances);\n', '\n', '        success = true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success){\n', '        _allowances[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        success = true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining){\n', '        remaining = _allowances[_owner][_spender];\n', '    }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', '/**\n', '*\n', '* ERC20 token\n', '*\n', '* doc https://github.com/ethereum/EIPs/issues/20\n', '*\n', '*/\n', 'contract ERC20Token {\n', '\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', '*\n', '* Master Coin Token\n', '*\n', '* author luc\n', '* date 2018/6/14\n', '*\n', '*/\n', 'contract MCToken is ERC20Token {\n', '\n', '    string private _name = "Master Coin";\n', '    string private _symbol = "MC";\n', '    uint8 private _decimals = 18;\n', '\n', '    uint256 private _totalSupply = 210000000 * (10 ** uint256(_decimals));\n', '\n', '    mapping(address=>uint256) private _balances;\n', '    mapping(address=>mapping(address=>uint256)) private _allowances;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function MCToken() {\n', '        _balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function name() public view returns (string name){\n', '        name = _name;\n', '    }\n', '\n', '    function symbol() public view returns (string symbol){\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8 decimals){\n', '        decimals = _decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 totalSupply){\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance){\n', '        balance = _balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '        require(_balances[msg.sender] >= _value);\n', '        _balances[msg.sender] -= _value;\n', '        _balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        success = true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n', '        require(_balances[_from] >= _value);\n', '        require(_allowances[_from][msg.sender] >= _value);\n', '\n', '        uint256 previousBalances = _balances[_from] + _balances[_to];\n', '\n', '        _balances[_from] -= _value;\n', '        _allowances[_from][msg.sender] -= _value;\n', '        _balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '\n', '        assert(_balances[_from] + _balances[_to] == previousBalances);\n', '\n', '        success = true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success){\n', '        _allowances[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        success = true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining){\n', '        remaining = _allowances[_owner][_spender];\n', '    }\n', '}']
