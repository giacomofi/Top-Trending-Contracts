['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract MultiSend {\n', '  function multiSend(address _token, address[] addresses, uint amount) public {\n', '    ERC20 token = ERC20(_token);\n', '    for(uint i = 0; i < addresses.length; i++) {\n', '      require(token.transferFrom(msg.sender, addresses[i], amount));\n', '    }\n', '  }\n', '  function multiSendEth(address[] addresses) public payable {\n', '    for(uint i = 0; i < addresses.length; i++) {\n', '      addresses[i].transfer(msg.value / addresses.length);\n', '    }\n', '    msg.sender.transfer(this.balance);\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract MultiSend {\n', '  function multiSend(address _token, address[] addresses, uint amount) public {\n', '    ERC20 token = ERC20(_token);\n', '    for(uint i = 0; i < addresses.length; i++) {\n', '      require(token.transferFrom(msg.sender, addresses[i], amount));\n', '    }\n', '  }\n', '  function multiSendEth(address[] addresses) public payable {\n', '    for(uint i = 0; i < addresses.length; i++) {\n', '      addresses[i].transfer(msg.value / addresses.length);\n', '    }\n', '    msg.sender.transfer(this.balance);\n', '  }\n', '}']
