['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract TklnAirdropToken is ERC20, Ownable{\n', '\n', '    string public constant name = "Visit www.tkln.me for more information";\n', '    string public constant symbol = "tkln.me";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public _totalSupply;\n', '\n', '    mapping(address => bool) public participants;\n', '    uint256 one_token;\n', '    address public admin;\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    function TklnAirdropToken() public {\n', '        uint dec = decimals;\n', '        one_token = 10 ** dec;\n', '        admin = msg.sender;\n', '    }\n', '\n', '    function setAdmin(address _admin) public onlyOwner {\n', '        admin = _admin;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256){\n', '        return _totalSupply;\n', '    }\n', '\n', '    function doAirDrop(address[] _to) public onlyAdmin {\n', '        uint256 _one_token = one_token;\n', '        _totalSupply = _totalSupply + _one_token * _to.length;\n', '        for (uint i = 0; i < _to.length; i++) {\n', '            address __to = _to[i];\n', '            if(!participants[__to]){\n', '                participants[__to] = true;\n', '            }\n', '            Transfer(address(0), __to, _one_token);\n', '        }\n', '    }\n', '\n', '    function balanceOf(address who) public view returns (uint256){\n', '        if(participants[who]){\n', '            return one_token;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool){\n', '        return false;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256){\n', '        return 0;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool){\n', '        return false;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool){\n', '        return false;\n', '    }\n', '}']