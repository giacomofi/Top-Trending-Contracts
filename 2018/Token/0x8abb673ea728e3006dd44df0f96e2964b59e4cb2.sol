['pragma solidity 0.4.21;\n', '\n', '/**\n', '\n', ' * @title ERC20Basic\n', '\n', ' * @dev Simpler version of ERC20 interface\n', '\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', '\n', ' */\n', '\n', 'contract ERC20Basic {\n', '\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', '\n', ' * @title SafeMath\n', '\n', ' * @dev Math operations with safety checks that throw on error\n', '\n', ' */\n', '\n', 'library SafeMath {\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '\n', '  */\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\n', '    if (a == 0) {\n', '\n', '      return 0;\n', '\n', '    }\n', '\n', '    c = a * b;\n', '\n', '    assert(c / a == b);\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '\n', '  */\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\n', '    // uint256 c = a / b;\n', '\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return a / b;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\n', '  */\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    assert(b <= a);\n', '\n', '    return a - b;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Adds two numbers, throws on overflow.\n', '\n', '  */\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\n', '    c = a + b;\n', '\n', '    assert(c >= a);\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', '* @title ERC223 interface\n', '* @dev see https://github.com/ethereum/eips/issues/223\n', '*/\n', 'contract ERC223 {\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\n', '    function transfer(address _to, uint _value, bytes _data, string _fallback) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', '/**\n', '* @title ERC223Token\n', '* @dev Generic implementation for the required functionality of the ERC223 standard.\n', '* @dev \n', '*/\n', 'contract SpecialDrawingRight is ERC223, ERC20Basic {\n', '  using SafeMath for uint256;\n', '  \n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '  mapping(address => uint256) public balances;\n', '\n', '  /**\n', '  * @dev Function to access name of token.\n', '  * @return _name string the name of the token.\n', '  */\n', '  function name() public view returns (string _name) {\n', '    return name;\n', '  }\n', '    \n', '  /**\n', '  * @dev Function to access symbol of token.\n', '  * @return _symbol string the symbol of the token.\n', '  */\n', '  function symbol() public view returns (string _symbol) {\n', '    return symbol;\n', '  }\n', '    \n', '  /**\n', '  * @dev Function to access decimals of token.\n', '  * @return _decimals uint8 decimal point of token fractions.\n', '  */\n', '  function decimals() public view returns (uint8 _decimals) {\n', '    return decimals;\n', '  }\n', '  \n', '  /**\n', '  * @dev Function to access total supply of tokens.\n', '  * @return _totalSupply uint256 total token supply.\n', '  */\n', '  function totalSupply() public view returns (uint256 _totalSupply) {\n', '    return totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to access the balance of a specific address.\n', '  * @param _owner address the target address to get the balance from.\n', '  * @return _balance uint256 the balance of the target address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 _balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  \n', '  function SpecialDrawingRight() public{\n', '      name = "Special Drawing Right";\n', '      symbol = "SDR";\n', '      decimals = 2;\n', '      totalSupply = 1000000000 * 10 ** uint(decimals);  \n', '      balances[msg.sender] = totalSupply;\n', '\n', '  }\n', '\n', '  /**\n', '  * @dev Function that is called when a user or another contract wants to transfer funds using custom fallback.\n', '  * @param _to address to which the tokens are transfered.\n', '  * @param _value uint256 amount of tokens to be transfered.\n', '  * @param _data bytes data along token transaction.\n', '  * @param _fallback string name of the custom fallback function to be called after transaction.\n', '  */\n', '  function transfer(address _to, uint256 _value, bytes _data, string _fallback) public returns (bool _success) {\n', '    if (isContract(_to)) {\n', '      if (balanceOf(msg.sender) < _value)\n', '      revert();\n', '      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '      balances[_to] = balanceOf(_to).add(_value);\n', '      \n', '      // Calls the custom fallback function.\n', '      // Will fail if not implemented, reverting transaction.\n', '      assert(_to.call.value(0)(bytes4(keccak256(_fallback)), msg.sender, _value, _data));\n', '      \n', '      Transfer(msg.sender, _to, _value, _data);\n', '      return true;\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Function that is called when a user or another contract wants to transfer funds using default fallback.\n', '  * @param _to address to which the tokens are transfered.\n', '  * @param _value uint256 amount of tokens to be transfered.\n', '  * @param _data bytes data along token transaction.\n', '  */\n', '  function transfer(address _to, uint256 _value, bytes _data) public returns (bool _success) {\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, _data);\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Standard function transfer similar to ERC20 transfer with no _data.\n', '  * Added due to backwards compatibility reasons.\n', '  * @param _to address to which the tokens are transfered.\n', '  * @param _value uint256 amount of tokens to be transfered.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool _success) {\n', '    // Adds empty bytes to fill _data param in functions\n', '    bytes memory empty;\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, empty);\n', '    } else {\n', '      return transferToAddress(_to, _value, empty);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Function to test whether target address is a contract.\n', '  * @param _addr address to be tested as a contract address or something else.\n', '  * @return _isContract bool true if target address is a contract false otherwise.\n', '  */\n', '  function isContract(address _addr) private view returns (bool _isContract) {\n', '    uint length;\n', '    assembly {\n', '      length := extcodesize(_addr)\n', '    }\n', '    return (length > 0);\n', '  }\n', '    \n', '  /**\n', '  * @dev Function that is called when transaction target is an address.\n', '  * @param _to address to which the tokens are transfered.\n', '  * @param _value uint256 amount of tokens to be transfered.\n', '  * @param _data bytes data along token transaction.\n', '  */\n', '  function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool _success) {\n', '    if (balanceOf(msg.sender) < _value)\n', '    revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '\n', '    Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Function that is called when transaction target is a contract.\n', '  * @param _to address to which the tokens are transfered.\n', '  * @param _value uint256 amount of tokens to be transfered.\n', '  * @param _data bytes data along token transaction.\n', '  */\n', '  function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool _success) {\n', '    if (balanceOf(msg.sender) < _value) {\n', '        revert();\n', '    }\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '\n', '    // Calls the default fallback function.\n', '    // Will fail if not implemented, reverting transaction.\n', '    ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '    receiver.tokenFallback(msg.sender, _value, _data);\n', '\n', '    Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '}']
['pragma solidity 0.4.21;\n', '\n', '/**\n', '\n', ' * @title ERC20Basic\n', '\n', ' * @dev Simpler version of ERC20 interface\n', '\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', '\n', ' */\n', '\n', 'contract ERC20Basic {\n', '\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', '\n', ' * @title SafeMath\n', '\n', ' * @dev Math operations with safety checks that throw on error\n', '\n', ' */\n', '\n', 'library SafeMath {\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '\n', '  */\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\n', '    if (a == 0) {\n', '\n', '      return 0;\n', '\n', '    }\n', '\n', '    c = a * b;\n', '\n', '    assert(c / a == b);\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '\n', '  */\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\n', '    // uint256 c = a / b;\n', '\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return a / b;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\n', '  */\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    assert(b <= a);\n', '\n', '    return a - b;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Adds two numbers, throws on overflow.\n', '\n', '  */\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\n', '    c = a + b;\n', '\n', '    assert(c >= a);\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', '* @title ERC223 interface\n', '* @dev see https://github.com/ethereum/eips/issues/223\n', '*/\n', 'contract ERC223 {\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\n', '    function transfer(address _to, uint _value, bytes _data, string _fallback) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', '/**\n', '* @title ERC223Token\n', '* @dev Generic implementation for the required functionality of the ERC223 standard.\n', '* @dev \n', '*/\n', 'contract SpecialDrawingRight is ERC223, ERC20Basic {\n', '  using SafeMath for uint256;\n', '  \n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '  mapping(address => uint256) public balances;\n', '\n', '  /**\n', '  * @dev Function to access name of token.\n', '  * @return _name string the name of the token.\n', '  */\n', '  function name() public view returns (string _name) {\n', '    return name;\n', '  }\n', '    \n', '  /**\n', '  * @dev Function to access symbol of token.\n', '  * @return _symbol string the symbol of the token.\n', '  */\n', '  function symbol() public view returns (string _symbol) {\n', '    return symbol;\n', '  }\n', '    \n', '  /**\n', '  * @dev Function to access decimals of token.\n', '  * @return _decimals uint8 decimal point of token fractions.\n', '  */\n', '  function decimals() public view returns (uint8 _decimals) {\n', '    return decimals;\n', '  }\n', '  \n', '  /**\n', '  * @dev Function to access total supply of tokens.\n', '  * @return _totalSupply uint256 total token supply.\n', '  */\n', '  function totalSupply() public view returns (uint256 _totalSupply) {\n', '    return totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to access the balance of a specific address.\n', '  * @param _owner address the target address to get the balance from.\n', '  * @return _balance uint256 the balance of the target address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 _balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  \n', '  function SpecialDrawingRight() public{\n', '      name = "Special Drawing Right";\n', '      symbol = "SDR";\n', '      decimals = 2;\n', '      totalSupply = 1000000000 * 10 ** uint(decimals);  \n', '      balances[msg.sender] = totalSupply;\n', '\n', '  }\n', '\n', '  /**\n', '  * @dev Function that is called when a user or another contract wants to transfer funds using custom fallback.\n', '  * @param _to address to which the tokens are transfered.\n', '  * @param _value uint256 amount of tokens to be transfered.\n', '  * @param _data bytes data along token transaction.\n', '  * @param _fallback string name of the custom fallback function to be called after transaction.\n', '  */\n', '  function transfer(address _to, uint256 _value, bytes _data, string _fallback) public returns (bool _success) {\n', '    if (isContract(_to)) {\n', '      if (balanceOf(msg.sender) < _value)\n', '      revert();\n', '      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '      balances[_to] = balanceOf(_to).add(_value);\n', '      \n', '      // Calls the custom fallback function.\n', '      // Will fail if not implemented, reverting transaction.\n', '      assert(_to.call.value(0)(bytes4(keccak256(_fallback)), msg.sender, _value, _data));\n', '      \n', '      Transfer(msg.sender, _to, _value, _data);\n', '      return true;\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Function that is called when a user or another contract wants to transfer funds using default fallback.\n', '  * @param _to address to which the tokens are transfered.\n', '  * @param _value uint256 amount of tokens to be transfered.\n', '  * @param _data bytes data along token transaction.\n', '  */\n', '  function transfer(address _to, uint256 _value, bytes _data) public returns (bool _success) {\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, _data);\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Standard function transfer similar to ERC20 transfer with no _data.\n', '  * Added due to backwards compatibility reasons.\n', '  * @param _to address to which the tokens are transfered.\n', '  * @param _value uint256 amount of tokens to be transfered.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool _success) {\n', '    // Adds empty bytes to fill _data param in functions\n', '    bytes memory empty;\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, empty);\n', '    } else {\n', '      return transferToAddress(_to, _value, empty);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Function to test whether target address is a contract.\n', '  * @param _addr address to be tested as a contract address or something else.\n', '  * @return _isContract bool true if target address is a contract false otherwise.\n', '  */\n', '  function isContract(address _addr) private view returns (bool _isContract) {\n', '    uint length;\n', '    assembly {\n', '      length := extcodesize(_addr)\n', '    }\n', '    return (length > 0);\n', '  }\n', '    \n', '  /**\n', '  * @dev Function that is called when transaction target is an address.\n', '  * @param _to address to which the tokens are transfered.\n', '  * @param _value uint256 amount of tokens to be transfered.\n', '  * @param _data bytes data along token transaction.\n', '  */\n', '  function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool _success) {\n', '    if (balanceOf(msg.sender) < _value)\n', '    revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '\n', '    Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Function that is called when transaction target is a contract.\n', '  * @param _to address to which the tokens are transfered.\n', '  * @param _value uint256 amount of tokens to be transfered.\n', '  * @param _data bytes data along token transaction.\n', '  */\n', '  function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool _success) {\n', '    if (balanceOf(msg.sender) < _value) {\n', '        revert();\n', '    }\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '\n', '    // Calls the default fallback function.\n', '    // Will fail if not implemented, reverting transaction.\n', '    ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '    receiver.tokenFallback(msg.sender, _value, _data);\n', '\n', '    Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '}']
