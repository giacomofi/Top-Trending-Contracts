['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ContractOwner\n', ' * @dev The ContractOwner contract serves the role of interactng with the functions of Ownable contracts,\n', ' * this simplifies the implementation of "user permissions".\n', ' */\n', 'contract HasContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Relinquish control of the owned _contract.\n', '   */\n', '  function renounceOwnedOwnership(address _contract) public onlyOwner {\n', '    Ownable(_contract).renounceOwnership();\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer control of the owned _contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnedOwnership(address _contract, address _newOwner) public onlyOwner {\n', '    Ownable(_contract).transferOwnership(_newOwner);\n', '  }\n', '}\n', '\n', 'contract IOwnable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  function renounceOwnership() public;\n', '  function transferOwnership(address _newOwner) public;\n', '}\n', '\n', 'contract ITokenDistributor is IOwnable {\n', '\n', '    address public targetToken;\n', '    address[] public stakeHolders;\n', '    uint256 public maxStakeHolders;\n', '    event InsufficientTokenBalance( address indexed _token, uint256 _time );\n', '    event TokensDistributed( address indexed _token, uint256 _total, uint256 _time );\n', '\n', '    function isDistributionDue (address _token) public view returns (bool);\n', '    function isDistributionDue () public view returns (bool);\n', '    function countStakeHolders () public view returns (uint256);\n', '    function getTokenBalance(address _token) public view returns (uint256);\n', '    function getPortion (uint256 _total) public view returns (uint256);\n', '    function setTargetToken (address _targetToken) public returns (bool);\n', '    function distribute (address _token) public returns (bool);\n', '    function distribute () public returns (bool);\n', '}\n', '\n', '/**\n', '* A secondary contract which can interact directly with tokenDistributor\n', '* and can ultimately be made Owner to acheieve full `Code is Law` state\n', '*/\n', 'contract HasDistributorHandler is Ownable {\n', '    /**\n', '    *   Allows distributing of tokens from tokenDistributor contracts\n', '    *   supports only 2 versions at present\n', '    *   Version1 : distribute()\n', '    *   version2 : distribute(address token) ( fallback() ) : for backward compatibility\n', '    *\n', '    *   version type has to be passed in to complete the release, default is version1.\n', '    *  0 => version1\n', '    *  1 => version2\n', '    *\n', '    */\n', '\n', '    enum distributorContractVersion { v1, v2 }\n', '\n', '    address public tokenDistributor;\n', '    distributorContractVersion public distributorVersion;\n', '\n', '    constructor (distributorContractVersion _distributorVersion, address _tokenDistributor) public Ownable() {\n', '        setTokenDistributor(_distributorVersion, _tokenDistributor);\n', '    }\n', '\n', '    function setTokenDistributor (distributorContractVersion _distributorVersion, address _tokenDistributor) public onlyOwner returns (bool) {\n', '      require(tokenDistributor == 0x0, &#39;Token Distributor already set&#39;);\n', '      distributorVersion = _distributorVersion;\n', '      tokenDistributor = _tokenDistributor;\n', '      return true;\n', '    }\n', '\n', '    function distribute () public returns (bool) {\n', '        require(tokenDistributor != 0x0, &#39;Token Distributor not set&#39;);\n', '\n', '        if (distributorVersion == distributorContractVersion.v2) {\n', '          /* TODO Check functionaliy and optimize  */\n', '            return tokenDistributor.call(0x0);\n', '        } else {\n', '          return ITokenDistributor(tokenDistributor).distribute();\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function () public {\n', '      distribute();\n', '    }\n', '}\n', '\n', 'pragma solidity^0.4.24;\n', '\n', 'contract IVestingContract {\n', '  function release() public;\n', '  function release(address token) public;\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract TokenHandler is Ownable {\n', '\n', '    address public targetToken;\n', '\n', '    constructor ( address _targetToken) public Ownable() {\n', '        setTargetToken(_targetToken);\n', '    }\n', '\n', '    function getTokenBalance(address _token) public view returns (uint256) {\n', '        ERC20Basic token = ERC20Basic(_token);\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function setTargetToken (address _targetToken) public onlyOwner returns (bool) {\n', '      require(targetToken == 0x0, &#39;Target token already set&#39;);\n', '      targetToken = _targetToken;\n', '      return true;\n', '    }\n', '\n', '    function _transfer (address _token, address _recipient, uint256 _value) internal {\n', '        ERC20Basic token = ERC20Basic(_token);\n', '        token.transfer(_recipient, _value);\n', '    }\n', '}\n', '\n', '/*\n', 'Supports default zeppelin vesting contract\n', 'https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/TokenVesting.sol\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract VestingHandler is TokenHandler {\n', '\n', '    /**\n', '    *   Allows releasing of tokens from vesting contracts\n', '    *   supports only 2 versions at present\n', '    *   Version1 : release()\n', '    *   version2 : release(address token)\n', '    *\n', '    *   version type has to be passed in to complete the release, default is version1.\n', '    *  0 => version1\n', '    *  1 => version2\n', '    */\n', '\n', '    enum vestingContractVersion { v1, v2 }\n', '\n', '    address public vestingContract;\n', '    vestingContractVersion public targetVersion;\n', '\n', '    constructor ( vestingContractVersion _targetVersion, address _vestingContract, address _targetToken) public\n', '    TokenHandler(_targetToken){\n', '        setVestingContract(_targetVersion, _vestingContract);\n', '    }\n', '\n', '    function setVestingContract (vestingContractVersion _version, address _vestingContract) public onlyOwner returns (bool) {\n', '        require(vestingContract == 0x0, &#39;Vesting Contract already set&#39;);\n', '        vestingContract = _vestingContract;\n', '        targetVersion = _version;\n', '        return true;\n', '    }\n', '\n', '    function _releaseVesting (vestingContractVersion _version, address _vestingContract, address _targetToken) internal returns (bool) {\n', '        require(_targetToken != 0x0, &#39;Target token not set&#39;);\n', '        if (_version == vestingContractVersion.v1) {\n', '            return _releaseVesting (_version, _vestingContract);\n', '        } else if (_version == vestingContractVersion.v2){\n', '            IVestingContract(_vestingContract).release(_targetToken);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function _releaseVesting (vestingContractVersion _version, address _vestingContract) internal returns (bool) {\n', '        if (_version != vestingContractVersion.v1) {\n', '            revert(&#39;You need to pass in the additional argument(s)&#39;);\n', '        }\n', '        IVestingContract(_vestingContract).release();\n', '        return true;\n', '    }\n', '\n', '    function releaseVesting (vestingContractVersion _version, address _vestingContract, address _targetToken) public onlyOwner returns (bool) {\n', '        return _releaseVesting(_version, _vestingContract, _targetToken);\n', '    }\n', '\n', '    function releaseVesting (vestingContractVersion _version, address _vestingContract) public onlyOwner returns (bool) {\n', '        return _releaseVesting(_version, _vestingContract);\n', '    }\n', '\n', '    function release () public returns (bool){\n', '        require(vestingContract != 0x0, &#39;Vesting Contract not set&#39;);\n', '        return _releaseVesting(targetVersion, vestingContract, targetToken);\n', '    }\n', '\n', '    function () public {\n', '      release();\n', '    }\n', '}\n', '\n', '/**\n', '* Allows using one call to both release and Distribute tokens from\n', '* Handler and distributor in cases where separate contracts\n', '* Presently does not support re-use\n', '*/\n', 'contract VestingHasDistributorHandler is VestingHandler, HasDistributorHandler {\n', '\n', '    constructor (distributorContractVersion _distributorVersion, address _tokenDistributor, vestingContractVersion _targetVersion, address _vestingContract, address _targetToken) public\n', '    VestingHandler( _targetVersion, _vestingContract, _targetToken )\n', '    HasDistributorHandler(_distributorVersion, _tokenDistributor)\n', '    {\n', '    }\n', '\n', '    function releaseAndDistribute () public {\n', '        release();\n', '        distribute();\n', '    }\n', '\n', '    function () {\n', '      releaseAndDistribute();\n', '    }\n', '}\n', '\n', 'contract VestingHasDistributorHandlerHasContracts is VestingHasDistributorHandler, HasContracts {\n', '\n', '    constructor (distributorContractVersion _distributorVersion, address _tokenDistributor, vestingContractVersion _targetVersion, address _vestingContract, address _targetToken) public\n', '    VestingHasDistributorHandler( _distributorVersion, _tokenDistributor, _targetVersion, _vestingContract, _targetToken )\n', '    HasContracts()\n', '    {\n', '    }\n', '}']