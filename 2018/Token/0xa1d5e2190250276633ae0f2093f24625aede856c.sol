['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        \n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '  \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'interface ERC223Receiver {\n', '\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external;\n', '\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '  public\n', '  returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '  )\n', '  public\n', '  view\n', '  returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '  public\n', '  returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '    allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '  public\n', '  returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * MiraToken ERC223 token contract\n', ' *\n', ' * Designed and developed by BlockSoft.biz\n', ' */\n', '\n', 'contract MiraToken is StandardToken, BurnableToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Release();\n', '    event AddressLocked(address indexed _address, uint256 _time);\n', '    event TokensReverted(address indexed _address, uint256 _amount);\n', '    event AddressLockedByKYC(address indexed _address);\n', '    event KYCVerified(address indexed _address);\n', '    event TokensRevertedByKYC(address indexed _address, uint256 _amount);\n', '    event SetTechAccount(address indexed _address);\n', '\n', '    string public constant name = "MIRA Token";\n', '\n', '    string public constant symbol = "MIRA";\n', '\n', '    string public constant standard = "ERC223";\n', '\n', '    uint256 public constant decimals = 8;\n', '\n', '    bool public released = false;\n', '\n', '    address public tokensWallet;\n', '    address public techAccount;\n', '\n', '    mapping(address => uint) public lockedAddresses;\n', '    mapping(address => bool) public verifiedKYCAddresses;\n', '\n', '    modifier isReleased() {\n', '        require(released || msg.sender == tokensWallet || msg.sender == owner || msg.sender == techAccount);\n', '        require(lockedAddresses[msg.sender] <= now);\n', '        require(verifiedKYCAddresses[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier hasAddressLockupPermission() {\n', '        require(msg.sender == owner || msg.sender == techAccount);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = 0x635c8F19795Db0330a5b7465DF0BD2eeD1A5758e;\n', '        tokensWallet = owner;\n', '        verifiedKYCAddresses[owner] = true;\n', '\n', '        techAccount = 0x41D621De050A551F5f0eBb83D1332C75339B61E4;\n', '        verifiedKYCAddresses[techAccount] = true;\n', '        emit SetTechAccount(techAccount);\n', '\n', '        totalSupply_ = 30770000 * (10 ** decimals);\n', '        balances[tokensWallet] = totalSupply_;\n', '        emit Transfer(0x0, tokensWallet, totalSupply_);\n', '    }\n', '\n', '    function lockAddress(address _address, uint256 _time) public hasAddressLockupPermission returns (bool) {\n', '        require(_address != owner && _address != tokensWallet && _address != techAccount);\n', '        require(balances[_address] == 0 && lockedAddresses[_address] == 0 && _time > now);\n', '        lockedAddresses[_address] = _time;\n', '\n', '        emit AddressLocked(_address, _time);\n', '        return true;\n', '    }\n', '\n', '    function revertTokens(address _address) public hasAddressLockupPermission returns (bool) {\n', '        require(lockedAddresses[_address] > now && balances[_address] > 0);\n', '\n', '        uint256 amount = balances[_address];\n', '        balances[tokensWallet] = balances[tokensWallet].add(amount);\n', '        balances[_address] = 0;\n', '\n', '        emit Transfer(_address, tokensWallet, amount);\n', '        emit TokensReverted(_address, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function lockAddressByKYC(address _address) public hasAddressLockupPermission returns (bool) {\n', '        require(released);\n', '        require(balances[_address] == 0 && verifiedKYCAddresses[_address]);\n', '\n', '        verifiedKYCAddresses[_address] = false;\n', '        emit AddressLockedByKYC(_address);\n', '\n', '        return true;\n', '    }\n', '\n', '    function verifyKYC(address _address) public hasAddressLockupPermission returns (bool) {\n', '        verifiedKYCAddresses[_address] = true;\n', '        emit KYCVerified(_address);\n', '\n', '        return true;\n', '    }\n', '\n', '    function revertTokensByKYC(address _address) public hasAddressLockupPermission returns (bool) {\n', '        require(!verifiedKYCAddresses[_address] && balances[_address] > 0);\n', '\n', '        uint256 amount = balances[_address];\n', '        balances[tokensWallet] = balances[tokensWallet].add(amount);\n', '        balances[_address] = 0;\n', '\n', '        emit Transfer(_address, tokensWallet, amount);\n', '        emit TokensRevertedByKYC(_address, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function release() public onlyOwner returns (bool) {\n', '        require(!released);\n', '        released = true;\n', '        emit Release();\n', '        return true;\n', '    }\n', '\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public isReleased returns (bool) {\n', '        if (released) {\n', '            verifiedKYCAddresses[_to] = true;\n', '        }\n', '\n', '        if (super.transfer(_to, _value)) {\n', '            uint codeLength;\n', '            assembly {\n', '                codeLength := extcodesize(_to)\n', '            }\n', '            if (codeLength > 0) {\n', '                ERC223Receiver receiver = ERC223Receiver(_to);\n', '                receiver.tokenFallback(msg.sender, _value, msg.data);\n', '            }\n', '\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n', '        if (released) {\n', '            verifiedKYCAddresses[_to] = true;\n', '        }\n', '\n', '        if (super.transferFrom(_from, _to, _value)) {\n', '            uint codeLength;\n', '            assembly {\n', '                codeLength := extcodesize(_to)\n', '            }\n', '            if (codeLength > 0) {\n', '                ERC223Receiver receiver = ERC223Receiver(_to);\n', '                receiver.tokenFallback(_from, _value, msg.data);\n', '            }\n', '\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public isReleased returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != owner);\n', '        require(lockedAddresses[newOwner] < now);\n', '        address oldOwner = owner;\n', '        super.transferOwnership(newOwner);\n', '\n', '        if (oldOwner != tokensWallet) {\n', '            allowed[tokensWallet][oldOwner] = 0;\n', '            emit Approval(tokensWallet, oldOwner, 0);\n', '        }\n', '\n', '        if (owner != tokensWallet) {\n', '            allowed[tokensWallet][owner] = balances[tokensWallet];\n', '            emit Approval(tokensWallet, owner, balances[tokensWallet]);\n', '        }\n', '\n', '        verifiedKYCAddresses[newOwner] = true;\n', '        emit KYCVerified(newOwner);\n', '    }\n', '\n', '    function changeTechAccountAddress(address _address) public onlyOwner {\n', '        require(_address != address(0) && _address != techAccount);\n', '        require(lockedAddresses[_address] < now);\n', '\n', '        techAccount = _address;\n', '        emit SetTechAccount(techAccount);\n', '\n', '        verifiedKYCAddresses[_address] = true;\n', '        emit KYCVerified(_address);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        \n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '  \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'interface ERC223Receiver {\n', '\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external;\n', '\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '  public\n', '  returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '  )\n', '  public\n', '  view\n', '  returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '  public\n', '  returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '    allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '  public\n', '  returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * MiraToken ERC223 token contract\n', ' *\n', ' * Designed and developed by BlockSoft.biz\n', ' */\n', '\n', 'contract MiraToken is StandardToken, BurnableToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Release();\n', '    event AddressLocked(address indexed _address, uint256 _time);\n', '    event TokensReverted(address indexed _address, uint256 _amount);\n', '    event AddressLockedByKYC(address indexed _address);\n', '    event KYCVerified(address indexed _address);\n', '    event TokensRevertedByKYC(address indexed _address, uint256 _amount);\n', '    event SetTechAccount(address indexed _address);\n', '\n', '    string public constant name = "MIRA Token";\n', '\n', '    string public constant symbol = "MIRA";\n', '\n', '    string public constant standard = "ERC223";\n', '\n', '    uint256 public constant decimals = 8;\n', '\n', '    bool public released = false;\n', '\n', '    address public tokensWallet;\n', '    address public techAccount;\n', '\n', '    mapping(address => uint) public lockedAddresses;\n', '    mapping(address => bool) public verifiedKYCAddresses;\n', '\n', '    modifier isReleased() {\n', '        require(released || msg.sender == tokensWallet || msg.sender == owner || msg.sender == techAccount);\n', '        require(lockedAddresses[msg.sender] <= now);\n', '        require(verifiedKYCAddresses[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier hasAddressLockupPermission() {\n', '        require(msg.sender == owner || msg.sender == techAccount);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = 0x635c8F19795Db0330a5b7465DF0BD2eeD1A5758e;\n', '        tokensWallet = owner;\n', '        verifiedKYCAddresses[owner] = true;\n', '\n', '        techAccount = 0x41D621De050A551F5f0eBb83D1332C75339B61E4;\n', '        verifiedKYCAddresses[techAccount] = true;\n', '        emit SetTechAccount(techAccount);\n', '\n', '        totalSupply_ = 30770000 * (10 ** decimals);\n', '        balances[tokensWallet] = totalSupply_;\n', '        emit Transfer(0x0, tokensWallet, totalSupply_);\n', '    }\n', '\n', '    function lockAddress(address _address, uint256 _time) public hasAddressLockupPermission returns (bool) {\n', '        require(_address != owner && _address != tokensWallet && _address != techAccount);\n', '        require(balances[_address] == 0 && lockedAddresses[_address] == 0 && _time > now);\n', '        lockedAddresses[_address] = _time;\n', '\n', '        emit AddressLocked(_address, _time);\n', '        return true;\n', '    }\n', '\n', '    function revertTokens(address _address) public hasAddressLockupPermission returns (bool) {\n', '        require(lockedAddresses[_address] > now && balances[_address] > 0);\n', '\n', '        uint256 amount = balances[_address];\n', '        balances[tokensWallet] = balances[tokensWallet].add(amount);\n', '        balances[_address] = 0;\n', '\n', '        emit Transfer(_address, tokensWallet, amount);\n', '        emit TokensReverted(_address, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function lockAddressByKYC(address _address) public hasAddressLockupPermission returns (bool) {\n', '        require(released);\n', '        require(balances[_address] == 0 && verifiedKYCAddresses[_address]);\n', '\n', '        verifiedKYCAddresses[_address] = false;\n', '        emit AddressLockedByKYC(_address);\n', '\n', '        return true;\n', '    }\n', '\n', '    function verifyKYC(address _address) public hasAddressLockupPermission returns (bool) {\n', '        verifiedKYCAddresses[_address] = true;\n', '        emit KYCVerified(_address);\n', '\n', '        return true;\n', '    }\n', '\n', '    function revertTokensByKYC(address _address) public hasAddressLockupPermission returns (bool) {\n', '        require(!verifiedKYCAddresses[_address] && balances[_address] > 0);\n', '\n', '        uint256 amount = balances[_address];\n', '        balances[tokensWallet] = balances[tokensWallet].add(amount);\n', '        balances[_address] = 0;\n', '\n', '        emit Transfer(_address, tokensWallet, amount);\n', '        emit TokensRevertedByKYC(_address, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function release() public onlyOwner returns (bool) {\n', '        require(!released);\n', '        released = true;\n', '        emit Release();\n', '        return true;\n', '    }\n', '\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public isReleased returns (bool) {\n', '        if (released) {\n', '            verifiedKYCAddresses[_to] = true;\n', '        }\n', '\n', '        if (super.transfer(_to, _value)) {\n', '            uint codeLength;\n', '            assembly {\n', '                codeLength := extcodesize(_to)\n', '            }\n', '            if (codeLength > 0) {\n', '                ERC223Receiver receiver = ERC223Receiver(_to);\n', '                receiver.tokenFallback(msg.sender, _value, msg.data);\n', '            }\n', '\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n', '        if (released) {\n', '            verifiedKYCAddresses[_to] = true;\n', '        }\n', '\n', '        if (super.transferFrom(_from, _to, _value)) {\n', '            uint codeLength;\n', '            assembly {\n', '                codeLength := extcodesize(_to)\n', '            }\n', '            if (codeLength > 0) {\n', '                ERC223Receiver receiver = ERC223Receiver(_to);\n', '                receiver.tokenFallback(_from, _value, msg.data);\n', '            }\n', '\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public isReleased returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != owner);\n', '        require(lockedAddresses[newOwner] < now);\n', '        address oldOwner = owner;\n', '        super.transferOwnership(newOwner);\n', '\n', '        if (oldOwner != tokensWallet) {\n', '            allowed[tokensWallet][oldOwner] = 0;\n', '            emit Approval(tokensWallet, oldOwner, 0);\n', '        }\n', '\n', '        if (owner != tokensWallet) {\n', '            allowed[tokensWallet][owner] = balances[tokensWallet];\n', '            emit Approval(tokensWallet, owner, balances[tokensWallet]);\n', '        }\n', '\n', '        verifiedKYCAddresses[newOwner] = true;\n', '        emit KYCVerified(newOwner);\n', '    }\n', '\n', '    function changeTechAccountAddress(address _address) public onlyOwner {\n', '        require(_address != address(0) && _address != techAccount);\n', '        require(lockedAddresses[_address] < now);\n', '\n', '        techAccount = _address;\n', '        emit SetTechAccount(techAccount);\n', '\n', '        verifiedKYCAddresses[_address] = true;\n', '        emit KYCVerified(_address);\n', '    }\n', '\n', '}']
