['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', '\n', 'contract Fouracoin is StandardToken {\n', '    //Verify tokenname is ERC20Token\n', '    //http://remix.ethereum.org/#optimize=false&version=soljson-v0.4.13+commit.fb4cb1a.js\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It&#39;s like comparing 1 wei to 1 ether.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    string public version = &#39;H1.0&#39;;       //human 0.1 standard. Just an arbitrary versioning scheme.\n', '    uint256 public unitsOneEthCanBuy;     // How many units of your coin can be bought by 1 ETH?\n', '    address public fundsWallet;           // Where should the raised ETH go?\n', '\n', '\n', '    function Fouracoin() {\n', '        balances[msg.sender] = 300000000000000000000000000;               // Give the creator all initial tokens (100000 for example)\n', '        totalSupply = 300000000000000000000000000;                        // Update total supply (100000 for example)\n', '        name = "4A Coin";                                   // Set the name for display purposes\n', '        decimals = 18;                            // Amount of decimals for display purposes\n', '        symbol = "4AC";\n', '        //unitsOneEthCanBuy = 6000;                                // Set the symbol for display purposes\n', '        fundsWallet = msg.sender;\n', '    }\n', '\n', '    function() payable{\n', '\n', '      uint256 ondortmayis = 1526256000;\n', '      uint256 yirmibirmay = 1526860800;\n', '      uint256 yirmisekizmay = 1527465600;\n', '      uint256 dorthaziran = 1528070400;\n', '      uint256 onbirhaziran = 1528675200;\n', '      uint256 onsekizhaziran = 1529280000;\n', '      uint256 yirmibeshaz = 1529884800;\n', '\n', '      if(ondortmayis > now) {\n', '        require(balances[fundsWallet] >= msg.value * 100);\n', '        balances[fundsWallet] = balances[fundsWallet] - msg.value * 100;\n', '        balances[msg.sender] = balances[msg.sender] + msg.value * 100;\n', '        Transfer(fundsWallet, msg.sender, msg.value * 100); // Broadcast a message to the blockchain\n', '        fundsWallet.transfer(msg.value);\n', '      } else if(ondortmayis < now && yirmibirmay > now) {\n', '        require(balances[fundsWallet] >= msg.value * 6000);\n', '        balances[fundsWallet] = balances[fundsWallet] - msg.value * 6000;\n', '        balances[msg.sender] = balances[msg.sender] + msg.value * 6000;\n', '        Transfer(fundsWallet, msg.sender, msg.value * 6000); // Broadcast a message to the blockchain\n', '        fundsWallet.transfer(msg.value);\n', '      } else if(yirmibirmay < now && yirmisekizmay > now) {\n', '        require(balances[fundsWallet] >= msg.value * 4615);\n', '        balances[fundsWallet] = balances[fundsWallet] - msg.value * 4615;\n', '        balances[msg.sender] = balances[msg.sender] + msg.value * 4615;\n', '        Transfer(fundsWallet, msg.sender, msg.value * 4615); // Broadcast a message to the blockchain\n', '        fundsWallet.transfer(msg.value);\n', '      }else if(yirmisekizmay < now && dorthaziran > now) {\n', '        require(balances[fundsWallet] >= msg.value * 3750);\n', '        balances[fundsWallet] = balances[fundsWallet] - msg.value * 3750;\n', '        balances[msg.sender] = balances[msg.sender] + msg.value * 3750;\n', '        Transfer(fundsWallet, msg.sender, msg.value * 3750); // Broadcast a message to the blockchain\n', '        fundsWallet.transfer(msg.value);\n', '      }else if(dorthaziran < now && onbirhaziran > now) {\n', '        require(balances[fundsWallet] >= msg.value * 3157);\n', '        balances[fundsWallet] = balances[fundsWallet] - msg.value * 3157;\n', '        balances[msg.sender] = balances[msg.sender] + msg.value * 3157;\n', '        Transfer(fundsWallet, msg.sender, msg.value * 3157); // Broadcast a message to the blockchain\n', '        fundsWallet.transfer(msg.value);\n', '      }else if(onbirhaziran < now && onsekizhaziran > now) {\n', '        require(balances[fundsWallet] >= msg.value * 2727);\n', '        balances[fundsWallet] = balances[fundsWallet] - msg.value * 2727;\n', '        balances[msg.sender] = balances[msg.sender] + msg.value * 2727;\n', '        Transfer(fundsWallet, msg.sender, msg.value * 2727); // Broadcast a message to the blockchain\n', '        fundsWallet.transfer(msg.value);\n', '      }else if(onsekizhaziran < now && yirmibeshaz > now) {\n', '        require(balances[fundsWallet] >= msg.value * 2400);\n', '        balances[fundsWallet] = balances[fundsWallet] - msg.value * 2400;\n', '        balances[msg.sender] = balances[msg.sender] + msg.value * 2400;\n', '        Transfer(fundsWallet, msg.sender, msg.value * 2400); // Broadcast a message to the blockchain\n', '        fundsWallet.transfer(msg.value);\n', '      }\n', '      else {\n', '        throw;\n', '      }\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']