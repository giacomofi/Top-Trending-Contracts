['pragma solidity ^0.4.4;\n', '\n', 'contract SafeMath {\n', '  //internals\n', '\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', 'contract Token is SafeMath {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    event Burned(uint amount);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (now < icoEnd + lockedPeriod && msg.sender != fundsWallet) throw;\n', '        if (msg.sender == fundsWallet && now < icoEnd + blockPeriod && ownerNegTokens < _value) throw; //prevent the owner of spending his share of tokens within the first year\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            if (msg.sender == fundsWallet && now < icoEnd + blockPeriod) {\n', '                ownerNegTokens = safeSub(ownerNegTokens, _value);\n', '            }\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (now < icoEnd + lockedPeriod && msg.sender != fundsWallet) throw;\n', '        if (msg.sender == fundsWallet && now < icoEnd + blockPeriod && ownerNegTokens < _value) throw;\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            if (msg.sender == fundsWallet && now < icoEnd + blockPeriod) {\n', '                ownerNegTokens = safeSub(ownerNegTokens, _value);\n', '            }\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function burn(){\n', '    \t//if tokens have not been burned already and the ICO ended\n', '    \tif(!burned && now> icoEnd){\n', '    \t\tuint256 difference = tokensToSell;//checked for overflow above\n', '    \t\tbalances[fundsWallet] = balances[fundsWallet] - difference;\n', '    \t\ttotalSupply = totalSupply - difference;\n', '    \t\tburned = true;\n', '    \t\tBurned(difference);\n', '    \t}\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    \n', '    uint256 public icoStart = 1520244000;\n', '    \n', '    uint256 public icoEnd = 1520244000 + 45 days;\n', '    \n', '    //ownerFreezeTokens tokens will be freezed during this period after ICO\n', '    uint256 public blockPeriod = 1 years;\n', '    \n', '    //after this period after ICO end token holders can operate with them\n', '    uint256 public lockedPeriod = 15 days;\n', '    \n', '    //owners negotiable token that he can spend in any time\n', '    uint256 public ownerNegTokens = 13500000000000000000000000;\n', '    \n', '    //owner tokens to be feezed on year\n', '    uint256 public ownerFreezeTokens = 13500000000000000000000000;\n', '    \n', '    //max number of tokens that can be sold\n', '    uint256 public tokensToSell = 63000000000000000000000000; \n', '    \n', '    bool burned = false;\n', '    \n', '    string public name;                   \n', '    uint8 public decimals = 18;                \n', '    string public symbol;                 \n', '    string public version = &#39;H1.0&#39;; \n', '    uint256 public unitsOneEthCanBuy;     \n', '    uint256 public totalEthInWei = 0;          \n', '    address public fundsWallet;\n', '}\n', '\n', 'contract EpsToken is StandardToken {\n', '\n', '    // This is a constructor function \n', '    // which means the following function name has to match the contract name declared above\n', '    function EpsToken() {\n', '        balances[msg.sender] = 90000000000000000000000000;              \n', '        totalSupply = 90000000000000000000000000;                     \n', '        name = "Epsilon";                                            \n', '        symbol = "EPS";                                             \n', '        unitsOneEthCanBuy = 28570;                                      \n', '        fundsWallet = msg.sender;                         \n', '    }\n', '\n', '    function() payable{\n', '        \n', '        if (now < icoStart || now > icoEnd || tokensToSell <= 0) {\n', '            return;\n', '        }\n', '        \n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        uint256 amount = msg.value * unitsOneEthCanBuy;\n', '        uint256 valueInWei = msg.value;\n', '        \n', '        if (tokensToSell < amount) {\n', '            amount = tokensToSell;\n', '            valueInWei = amount / unitsOneEthCanBuy;\n', '            msg.sender.transfer(msg.value - valueInWei);\n', '        }\n', '        \n', '        tokensToSell -= amount;\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '        \n', '        \n', '        Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\n', '\n', '        //Transfer ether to fundsWallet\n', '        fundsWallet.transfer(valueInWei);                               \n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'contract SafeMath {\n', '  //internals\n', '\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', 'contract Token is SafeMath {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    event Burned(uint amount);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (now < icoEnd + lockedPeriod && msg.sender != fundsWallet) throw;\n', '        if (msg.sender == fundsWallet && now < icoEnd + blockPeriod && ownerNegTokens < _value) throw; //prevent the owner of spending his share of tokens within the first year\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            if (msg.sender == fundsWallet && now < icoEnd + blockPeriod) {\n', '                ownerNegTokens = safeSub(ownerNegTokens, _value);\n', '            }\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (now < icoEnd + lockedPeriod && msg.sender != fundsWallet) throw;\n', '        if (msg.sender == fundsWallet && now < icoEnd + blockPeriod && ownerNegTokens < _value) throw;\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            if (msg.sender == fundsWallet && now < icoEnd + blockPeriod) {\n', '                ownerNegTokens = safeSub(ownerNegTokens, _value);\n', '            }\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function burn(){\n', '    \t//if tokens have not been burned already and the ICO ended\n', '    \tif(!burned && now> icoEnd){\n', '    \t\tuint256 difference = tokensToSell;//checked for overflow above\n', '    \t\tbalances[fundsWallet] = balances[fundsWallet] - difference;\n', '    \t\ttotalSupply = totalSupply - difference;\n', '    \t\tburned = true;\n', '    \t\tBurned(difference);\n', '    \t}\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    \n', '    uint256 public icoStart = 1520244000;\n', '    \n', '    uint256 public icoEnd = 1520244000 + 45 days;\n', '    \n', '    //ownerFreezeTokens tokens will be freezed during this period after ICO\n', '    uint256 public blockPeriod = 1 years;\n', '    \n', '    //after this period after ICO end token holders can operate with them\n', '    uint256 public lockedPeriod = 15 days;\n', '    \n', '    //owners negotiable token that he can spend in any time\n', '    uint256 public ownerNegTokens = 13500000000000000000000000;\n', '    \n', '    //owner tokens to be feezed on year\n', '    uint256 public ownerFreezeTokens = 13500000000000000000000000;\n', '    \n', '    //max number of tokens that can be sold\n', '    uint256 public tokensToSell = 63000000000000000000000000; \n', '    \n', '    bool burned = false;\n', '    \n', '    string public name;                   \n', '    uint8 public decimals = 18;                \n', '    string public symbol;                 \n', "    string public version = 'H1.0'; \n", '    uint256 public unitsOneEthCanBuy;     \n', '    uint256 public totalEthInWei = 0;          \n', '    address public fundsWallet;\n', '}\n', '\n', 'contract EpsToken is StandardToken {\n', '\n', '    // This is a constructor function \n', '    // which means the following function name has to match the contract name declared above\n', '    function EpsToken() {\n', '        balances[msg.sender] = 90000000000000000000000000;              \n', '        totalSupply = 90000000000000000000000000;                     \n', '        name = "Epsilon";                                            \n', '        symbol = "EPS";                                             \n', '        unitsOneEthCanBuy = 28570;                                      \n', '        fundsWallet = msg.sender;                         \n', '    }\n', '\n', '    function() payable{\n', '        \n', '        if (now < icoStart || now > icoEnd || tokensToSell <= 0) {\n', '            return;\n', '        }\n', '        \n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        uint256 amount = msg.value * unitsOneEthCanBuy;\n', '        uint256 valueInWei = msg.value;\n', '        \n', '        if (tokensToSell < amount) {\n', '            amount = tokensToSell;\n', '            valueInWei = amount / unitsOneEthCanBuy;\n', '            msg.sender.transfer(msg.value - valueInWei);\n', '        }\n', '        \n', '        tokensToSell -= amount;\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '        \n', '        \n', '        Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\n', '\n', '        //Transfer ether to fundsWallet\n', '        fundsWallet.transfer(valueInWei);                               \n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
