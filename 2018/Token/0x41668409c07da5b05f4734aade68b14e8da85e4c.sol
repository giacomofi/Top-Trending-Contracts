['pragma solidity ^0.4.19;\n', '\n', 'contract Ownable {\n', '    address public owner; \n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '    function transfer(address _to,uint _value) public returns (bool success);\n', '    function transferFrom(address _from,address _to,uint _value) public returns (bool success);\n', '    function approve(address _spender,uint _value) public returns (bool success);\n', '    function allownce(address _owner,address _spender) public constant returns (uint remaining);\n', '    event Transfer(address indexed _from,address indexed _to,uint _value);\n', '    event Approval(address indexed _owner,address indexed _spender,uint _value);\n', '    \n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '    mapping (address => uint) public balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to,uint _value) public returns (bool success) {\n', '        if(balances[msg.sender] > _value && _value > 0 && balances[_to] + _value > balances[_to]){\n', '            balances[_to] += _value;\n', '            balances[msg.sender] -= _value;\n', '            emit Transfer(msg.sender,_to,_value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function transferFrom(address _from,address _to,uint _value) public returns (bool success) {\n', '        if(balances[_from] > _value && _value > 0 && allowed[_from][msg.sender] > _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_from] -= _value;\n', '            balances[_to] += _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from,_to,_value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender,_spender,_value);\n', '        return true;\n', '    }\n', '    function allownce(address _owner,address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '}\n', '\n', 'contract CEC is StandardToken,Ownable {\n', '    string public constant name ="17CE";//name of name\n', '    string public constant symbol = "CEC";//symbol of token\n', '    uint8 public constant decimals = 18;\n', '    uint public  constant intial_supply = 100 * (10 ** 6) * (10 ** uint(decimals));//initial 1 hundred million tokens\n', '    uint public reservedteamtoken = intial_supply * 3 / 10; //reserved for team 30%\n', '    uint public contractstarttime = now;\n', '    \n', '    function CEC() public {\n', '        totalSupply = intial_supply;\n', '        balances[msg.sender] = totalSupply - reservedteamtoken * 8 / 10;\n', '    }\n', '    \n', '    //17ce lift a ban plan for yearly\n', '    function lift_ban() public onlyOwner {\n', '        if((now == contractstarttime + 1 years) || (now == contractstarttime + 2 years) || (now == contractstarttime + 3 years) || (now == contractstarttime + 4 years)) {\n', '            balances[owner] += 600 * 10 ** 4 * (10 **  uint(decimals));\n', '        }\n', '    }\n', '    \n', '}']