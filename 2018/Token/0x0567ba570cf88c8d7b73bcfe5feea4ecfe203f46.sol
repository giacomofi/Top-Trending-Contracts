['pragma solidity ^0.4.24;\n', '\n', '/// @title Abstract Token, ERC20 token interface\n', 'contract ERC20 {\n', '\n', '    function name() constant public returns (string);\n', '    function symbol() constant public returns (string);\n', '    function decimals() constant public returns (uint8);\n', '    function totalSupply() constant public returns (uint256);\n', '    function balanceOf(address owner) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/// Full complete implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', 'contract StandardToken is ERC20 {\n', '\n', '    string  internal _name;\n', '    string  internal _symbol;\n', '    uint8   internal _decimals;\n', '    uint256 internal _totalSupply;\n', '\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /// @dev Returns name of tokens.\n', '    function name() public view returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    /// @dev Returns symbol of tokens.\n', '    function symbol() public view returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    /// @dev Returns decimal of token.\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /// @dev Returns total supply of tokens.\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success.\n', '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract Mintable is StandardToken {\n', '    \n', '    // triggered when the total supply is increased\n', '    event Issuance(uint256 _amount);\n', '    \n', '    /**\n', '        @dev increases the token supply and sends the new tokens to an account\n', '        can only be called by the contract owner\n', '        @param _to         account to receive the new amount\n', '        @param _amount     amount to increase the supply by\n', '    */\n', '    function issue(address _to, uint256 _amount)\n', '        internal\n', '    {\n', '        _totalSupply = _totalSupply + _amount;\n', '        balances[_to] = balances[_to] + _amount;\n', '\n', '        emit Issuance(_amount);\n', '        emit Transfer(this, _to, _amount);\n', '    }\n', '}\n', '\n', 'contract EthereumGAS is Mintable, Ownable {\n', '    \n', '    /// @dev rewrote transfer method\n', '    function transfer(address _to, uint256 _value) \n', '        public \n', '        returns (bool) \n', '    {\n', '        super.transfer(_to, _value);\n', '        super.issue(msg.sender, gasleft());\n', '    }\n', '    \n', '    uint256 addPrice = 10 ether;\n', '    mapping (address => bool) public listContracts;\n', '    \n', '    constructor() public {\n', '        _name = "Ethereum GAS";  \n', '        _symbol = "EGAS";\n', '        _decimals = 18;\n', '        _totalSupply = 1000000000*(10**uint256(_decimals));\n', '        balances[msg.sender] = _totalSupply;\n', '    }\n', '    \n', '    // @dev minting egas\n', '    function mintEGAS() internal {\n', '        balances[msg.sender] = balances[msg.sender] + gasleft();\n', '        _totalSupply = _totalSupply + gasleft();\n', '        emit Transfer(this, msg.sender, gasleft());\n', '    }\n', '    \n', '    function setPrice(uint256 _price) public onlyOwner {\n', '        addPrice = _price;\n', '    }\n', '    \n', '    function addContract(address _contract) \n', '        public\n', '        payable\n', '        validAdd\n', '        returns (bool)\n', '    {\n', '        listContracts[_contract] = true;\n', '        address(owner).transfer(msg.value);\n', '        return true;\n', '    }\n', '    \n', '    function removeContract(address _contract) \n', '        public \n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        listContracts[_contract] = false;\n', '        return true;\n', '    }\n', '    \n', '    // @dev call any function from another contract\n', '    function callData(address contractAddress, bytes data) \n', '        public\n', '        validContract(contractAddress)\n', '    {\n', '        if(!contractAddress.call(data)) revert("request error, not valid data sent");\n', '        EthereumGAS.mintEGAS();\n', '    }\n', '    \n', '    modifier validAdd() {\n', '        require(msg.sender == owner || msg.value >= addPrice);\n', '        _;\n', '    }\n', '    \n', '    modifier validContract(address _input) {\n', '        require(listContracts[_input] != false, "contract not found");\n', '        _;\n', '    }\n', '    \n', '    function() public payable {\n', '        address(owner).transfer(msg.value);\n', '    }\n', '}']