['pragma solidity ^0.4.16;\n', 'contract owned{\n', '    address public owner;\n', '    \n', '    constructor()public{\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner{\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner)onlyOwner public{\n', '        if(newOwner != address(0)){\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Token{\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns   \n', '    (bool success);\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    \n', '    function allowance(address _owner, address _spender) public constant returns \n', '    (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 \n', '    _value);\n', '}\n', '\n', 'contract TokenDemo is Token,owned {\n', '    \n', '    string public name;                  \n', '    uint8 public decimals;              \n', '    string public symbol;            \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    constructor(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\n', '    totalSupply = _initialAmount * 10 ** uint256(_decimalUnits);        \n', '    balances[owner] = totalSupply; \n', '        \n', '        name = _tokenName;                   \n', '        decimals = _decimalUnits;          \n', '        symbol = _tokenSymbol;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(_to != 0x0);\n', '        uint previousBalances = balances[msg.sender] + balances[_to];\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        assert(balances[msg.sender] + balances[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns \n', '    (bool success) {\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value; \n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success)   \n', '    { \n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract STTC is TokenDemo{\n', '    mapping (address => bool) public frozenAccount;\n', '    \n', '    event FrozenFunds(address target, bool frozen);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    constructor(\n', '      uint256 initialSupply,\n', '      string tokenName,\n', '      uint8 decimalUnits,\n', '      string tokenSymbol\n', '    ) TokenDemo (initialSupply, tokenName, decimalUnits,tokenSymbol) public {}\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(_to != 0x0);\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!frozenAccount[_to]);\n', '        uint previousBalances = balances[msg.sender] + balances[_to];\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        assert(balances[msg.sender] + balances[_to] == previousBalances);\n', '        return true;\n', '    }\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '\n', '        balances[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '\n', '        emit Transfer(0, this, mintedAmount);\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '}']