['pragma solidity ^0.4.21;\n', '\n', '// File: @gnosis.pm/util-contracts/contracts/Proxy.sol\n', '\n', '/// @title Proxied - indicates that a contract will be proxied. Also defines storage requirements for Proxy.\n', '/// @author Alan Lu - <alan@gnosis.pm>\n', 'contract Proxied {\n', '    address public masterCopy;\n', '}\n', '\n', '/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n', '/// @author Stefan George - <stefan@gnosis.pm>\n', 'contract Proxy is Proxied {\n', '    /// @dev Constructor function sets address of master copy contract.\n', '    /// @param _masterCopy Master copy address.\n', '    function Proxy(address _masterCopy)\n', '        public\n', '    {\n', '        require(_masterCopy != 0);\n', '        masterCopy = _masterCopy;\n', '    }\n', '\n', '    /// @dev Fallback function forwards all transactions and returns all received return data.\n', '    function ()\n', '        external\n', '        payable\n', '    {\n', '        address _masterCopy = masterCopy;\n', '        assembly {\n', '            calldatacopy(0, 0, calldatasize())\n', '            let success := delegatecall(not(0), _masterCopy, 0, calldatasize(), 0, 0)\n', '            returndatacopy(0, 0, returndatasize())\n', '            switch success\n', '            case 0 { revert(0, returndatasize()) }\n', '            default { return(0, returndatasize()) }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/DutchExchangeProxy.sol\n', '\n', 'contract DutchExchangeProxy is Proxy {\n', '  function DutchExchangeProxy(address _masterCopy) Proxy (_masterCopy) {\n', '  }\n', '}']