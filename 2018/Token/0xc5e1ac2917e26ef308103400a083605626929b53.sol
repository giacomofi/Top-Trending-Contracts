['pragma solidity ^0.4.16;\n', '\n', 'contract SWTCoin {\n', '    string public name = "SWTCoin";      //  token name\n', '    string public symbol = "SWAT";           //  token symbol\n', '    string public version = "1.0";\n', '    uint256 public decimals = 8;            //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    uint256 public totalSupply = 29000000000000000;\n', '    uint256 public MaxSupply = 0;\n', '    bool public stopped = true;\n', '\n', '    //000 000 000 000 000 000\n', '    address owner = 0x48850F503412d8A6e3d63541F0e225f04b13a544;\n', '    address minter = 0x47c803871c99EC7180E50dcDA989320871FcBfEE;\n', '    \n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isMinter {\n', '        assert(minter == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        MaxSupply = 154000000000000000;\n', '        balanceOf[owner] = totalSupply;\n', '        emit Transfer(0x0, owner, totalSupply);\n', '    }\n', '\n', '    function changeOwner(address _newaddress) isOwner public {\n', '        owner = _newaddress;\n', '    }\n', '\n', '    function changeMinter(address _new_mint_address) isOwner public {\n', '        minter = _new_mint_address;\n', '    }\n', '    \n', '    function airdropMinting(address[] _to_list, uint[] _values) isMinter public {\n', '        require(_to_list.length == _values.length);\n', '        for (uint i = 0; i < _to_list.length; i++) {\n', '            mintToken(_to_list[i], _values[i]);\n', '        }\n', '    }\n', '\n', '    function setMaxSupply(uint256 maxsupply_amount) isOwner public {\n', '      MaxSupply = maxsupply_amount;\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) isMinter public {\n', '      require(MaxSupply > totalSupply);\n', '      balanceOf[target] += mintedAmount;\n', '      totalSupply += mintedAmount;\n', '      emit Transfer(0, this, mintedAmount);\n', '      emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']