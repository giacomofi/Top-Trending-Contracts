['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title GSCToken\n', ' * @dev Global Social Chain.\n', ' */\n', 'contract GSCToken is StandardToken, Ownable {\n', '\n', '  string public constant name = "Global Social Chain";\n', '  string public constant symbol = "GSC";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 private constant TOKEN_UNIT = 10 ** uint256(decimals);\n', '  uint256 private constant INITIAL_SUPPLY = (10 ** 9) * TOKEN_UNIT;\n', '\n', '  uint256 private constant PRIVATE_SUPPLY              = INITIAL_SUPPLY * 30 / 100;  // 30% for private sale\n', '  uint256 private constant RESERVED_FOR_TEAM            = INITIAL_SUPPLY * 10 / 100;  // 10% for team\n', '  uint256 private constant COMMERCIAL_PLAN             = INITIAL_SUPPLY * 20 / 100; // 20% for commercial plan\n', '  uint256 private constant RESERVED_FOR_FOUNDATION     = INITIAL_SUPPLY * 15 / 100; // 15% for foundation\n', '  uint256 private constant COMMUNITY_REWARDS\t     \t= INITIAL_SUPPLY * 25 / 100; // 25% for community rewards\n', '\n', '  uint256 private constant PRIVATE_SUPPLY_VESTING       = PRIVATE_SUPPLY * 50 / 100;  // 50% of private sale\n', '\n', '\n', '  struct VestingGrant {\n', '        address beneficiary;\n', '        uint256 start;\n', '        uint256 duration; //duration for each release\n', '        uint256 amount; //total grant amount\n', '        uint256 transfered; // transfered amount\n', '        uint8 releaseCount; // schedule release count\n', '  }\n', '\n', '\n', '  address public constant PRIVATE_SUPPLY_ADDRESS = 0xd509bE99995A24e089C9789ed69B08031F830615; //private sale vesting beneficiary address\n', '  VestingGrant privsteSupplyVestingGrant;\n', '\n', '  address public constant TEAM_ADDRESS = 0x9C99b03224122b419a84a6bD7A609f7288d65Eb9; //team vesting  beneficiary address\n', '  VestingGrant teamVestingGrant;\n', '\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '  function GSCToken() public {\n', '    uint256 senderBalance = COMMERCIAL_PLAN.add(RESERVED_FOR_FOUNDATION).add(COMMUNITY_REWARDS);\n', '    uint256 privateSupplyBalance = PRIVATE_SUPPLY.sub(PRIVATE_SUPPLY_VESTING);\n', '    totalSupply = senderBalance + privateSupplyBalance;\n', '    balances[msg.sender] = senderBalance;\n', '\t  balances[PRIVATE_SUPPLY_ADDRESS] = privateSupplyBalance;\n', '\n', '    privsteSupplyVestingGrant = makeGrant(PRIVATE_SUPPLY_ADDRESS, now, (30 days), PRIVATE_SUPPLY_VESTING, 10);\n', '    teamVestingGrant = makeGrant(TEAM_ADDRESS, now, (182 days), RESERVED_FOR_TEAM, 4);\n', '  }\n', '\n', '  function makeGrant(address _beneficiary, uint256 _start, uint256 _duration, uint256 _amount, uint8 _releaseCount)\n', '    internal pure returns  (VestingGrant) {\n', '      return VestingGrant({ beneficiary : _beneficiary, start: _start, duration:_duration, amount:_amount, transfered:0, releaseCount:_releaseCount});\n', '  }\n', '\n', '\n', '\n', '  function releasePrivateSupplyVested() public onlyOwner {\n', '      relaseVestingGrant(privsteSupplyVestingGrant);\n', '  }\n', '\n', '  function releaseTeamVested() public onlyOwner {\n', '      relaseVestingGrant(teamVestingGrant);\n', '  }\n', '\n', '  function releasableAmount(uint256 time, VestingGrant grant) internal pure returns (uint256) {\n', '      if (grant.amount == grant.transfered) {\n', '          return 0;\n', '      }\n', '      uint256 amountPerRelease = grant.amount.div(grant.releaseCount);\n', '      uint256 amount = amountPerRelease.mul((time.sub(grant.start)).div(grant.duration));\n', '      if (amount > grant.amount) {\n', '        amount = grant.amount;\n', '      }\n', '      amount = amount.sub(grant.transfered);\n', '      return amount;\n', '  }\n', '\n', '  function relaseVestingGrant(VestingGrant storage grant) internal {\n', '      uint256 amount = releasableAmount(now, grant);\n', '      require(amount > 0);\n', '\n', '      grant.transfered = grant.transfered.add(amount);\n', '      totalSupply = totalSupply.add(amount);\n', '      balances[grant.beneficiary] = balances[grant.beneficiary].add(amount);\n', '      Transfer(address(0), grant.beneficiary, amount);\n', '    }\n', '}']