['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', ' \n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', ' \n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', ' \n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '    /// @return total amount of tokens\n', '    uint public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract NPToken is ERC20 {\n', '    using SafeMath for uint;\n', '\t\n', '    uint constant private MAX_UINT256 = 2**256 - 1;\n', '\tuint8 constant public decimals = 18;\n', '    string public name;\n', '    string public symbol;\n', '\taddress public owner;\n', '\t// True if transfers are allowed\n', '\tbool public transferable = true;\n', '    /* This creates an array with all balances */\n', '\tmapping (address => uint) freezes;\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);//"Only owner can call this function."\n', '        _;\n', '    }\n', '\t\n', '\tmodifier canTransfer() {\n', '\t\trequire(transferable == true);\n', '\t\t_;\n', '\t}\n', '\t\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint value);\n', '\t/* This notifies clients about the amount frozen */\n', '    event Freeze(address indexed from, uint value);\n', '\t/* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address indexed from, uint value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function NPToken() public {\n', '\t\ttotalSupply = 1000*10**26; // Update total supply with the decimal amount\n', '\t\tname = "Nepal Token";\n', '\t\tsymbol = "NPT";\n', '\t\tbalances[msg.sender] = totalSupply; // Give the creator all initial tokens\n', '\t\towner = msg.sender;\n', '\t\temit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint _value) public canTransfer returns (bool success) {\n', '\t\trequire(_to != address(0));// Prevent transfer to 0x0 address.\n', '\t\trequire(_value > 0);\n', '        require(balances[msg.sender] >= _value); // Check if the sender has enough\n', '        require(balances[_to] + _value >= balances[_to]); // Check for overflows\n', '\t\t\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value); // Subtract from the sender\n', '        balances[_to] = balances[_to].add(_value);  // Add the same to the recipient\n', '        emit Transfer(msg.sender, _to, _value);   // Notify anyone listening that this transfer took place\n', '\t\treturn true;\n', '    }\n', '\n', '\t/* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint _value) public canTransfer returns (bool success) {\n', '        uint allowance = allowed[_from][msg.sender];\n', '\t\trequire(_to != address(0));// Prevent transfer to 0x0 address.\n', '\t\trequire(_value > 0);\n', '\t\trequire(balances[_from] >= _value); // Check if the sender has enough\n', '\t\trequire(allowance >= _value); // Check allowance\n', '        require(balances[_to] + _value >= balances[_to]); // Check for overflows     \n', '        \n', '        balances[_from] = balances[_from].sub(_value);      // Subtract from the sender\n', '        balances[_to] = balances[_to].add(_value);          // Add the same to the recipient\n', '\t\tif (allowance < MAX_UINT256) {\n', '\t\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\t}\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\t\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint _value) public canTransfer returns (bool success) {\n', '\t\trequire(_value >= 0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '\tfunction balanceOf(address _owner) public view returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\t\n', '\tfunction freezeOf(address _owner) public view returns (uint freeze) {\n', '        return freezes[_owner];\n', '    }\n', '\t\n', '    function burn(uint _value) public canTransfer returns (bool success) {\n', '\t\trequire(balances[msg.sender] >= _value); // Check if the sender has enough\n', '\t\trequire(_value > 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);  // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                    // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction freeze(uint _value) public canTransfer returns (bool success) {\n', '\t\trequire(balances[msg.sender] >= _value); // Check if the sender has enough\n', '\t\trequire(_value > 0);\n', '\t\trequire(freezes[msg.sender] + _value >= freezes[msg.sender]); // Check for overflows\n', '\t\t\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);  // Subtract from the sender\n', '        freezes[msg.sender] = freezes[msg.sender].add(_value);  \n', '        emit Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction unfreeze(uint _value) public canTransfer returns (bool success) {\n', '\t\trequire(freezes[msg.sender] >= _value);  // Check if the sender has enough          \n', '\t\trequire(_value > 0);\n', '\t\trequire(balances[msg.sender] + _value >= balances[msg.sender]); // Check for overflows\n', '\t\t\n', '        freezes[msg.sender] = freezes[msg.sender].sub(_value);  // Subtract from the sender\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(_value);\n', '        emit Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\t/**\n', '\t* @dev Transfer tokens to multiple addresses\n', '\t* @param _addresses The addresses that will receieve tokens\n', '\t* @param _amounts The quantity of tokens that will be transferred\n', '\t* @return True if the tokens are transferred correctly\n', '\t*/\n', '\tfunction transferForMultiAddresses(address[] _addresses, uint[] _amounts) public canTransfer returns (bool) {\n', '\t\tfor (uint i = 0; i < _addresses.length; i++) {\n', '\t\t  require(_addresses[i] != address(0)); // Prevent transfer to 0x0 address.\n', '\t\t  require(_amounts[i] > 0);\n', '\t\t  require(balances[msg.sender] >= _amounts[i]); // Check if the sender has enough\n', '          require(balances[_addresses[i]] + _amounts[i] >= balances[_addresses[i]]); // Check for overflows\n', '\n', '\t\t  // SafeMath.sub will throw if there is not enough balance.\n', '\t\t  balances[msg.sender] = balances[msg.sender].sub(_amounts[i]);\n', '\t\t  balances[_addresses[i]] = balances[_addresses[i]].add(_amounts[i]);\n', '\t\t  emit Transfer(msg.sender, _addresses[i], _amounts[i]);\n', '\t\t}\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction stop() public onlyOwner {\n', '        transferable = false;\n', '    }\n', '\n', '    function start() public onlyOwner {\n', '        transferable = true;\n', '    }\n', '\t\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\towner = newOwner;\n', '\t}\n', '\t\n', '\t// transfer balance to owner\n', '\tfunction withdrawEther(uint amount) public onlyOwner {\n', '\t\trequire(amount > 0);\n', '\t\towner.transfer(amount);\n', '\t}\n', '\t\n', '\t// can accept ether\n', '\tfunction() public payable {\n', '    }\t\n', '}']