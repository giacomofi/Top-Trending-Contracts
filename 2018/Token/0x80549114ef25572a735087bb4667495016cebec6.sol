['pragma solidity ^0.4.24;\n', '\n', '/*\n', '--------------------------------------------------------------------------------\n', 'TradeAds Coin Smart Contract\n', '\n', 'Credit\t: Rejean Leclerc \n', 'Mail \t: rejean.leclerc123@gmail.com\n', '\n', '--------------------------------------------------------------------------------\n', '*/\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TradeAdsCoin {\n', '           \n', '    using SafeMath for uint256;\n', '    \n', '    string public constant name = "TradeAds Coin";\n', '    string public constant symbol = "TRD";\n', '    uint8 public constant decimals = 18;\n', '    /* The initially/total supply is 100,000,000 TRD with 18 decimals */\n', '    uint256 public constant _totalSupply  = 100000000000000000000000000;\n', '    \n', '    address public owner;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping (address => uint256)) public allowed;\n', '    \n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, address indexed to, uint256 value);\n', '\t\n', '    function TradeAdsCoin() public {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '    }\n', '    \n', '   function () public payable {\n', '        tTokens();\n', '    }\n', '    \n', '\tfunction tTokens() public payable {\n', '        require(msg.value > 0);\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(msg.value);\n', '\t\tbalances[owner] = balances[owner].sub(msg.value);\n', '\t\towner.transfer(msg.value);\n', '    }\n', '\n', '    /* Transfer the balance from the sender&#39;s address to the address _to */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value\n', '            && _value > 0\n', '            && balances[_to] + _value > balances[_to]) {\n', '\t\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /* Withdraws to address _to form the address _from up to the amount _value */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[_from] >= _value\n', '            && allowed[_from][msg.sender] >= _value\n', '            && _value > 0\n', '            && balances[_to] + _value > balances[_to]) {\n', '            balances[_from] = balances[_from].sub(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /* Allows _spender to withdraw the _allowance amount form sender */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value) {\n', '            allowed[msg.sender][_spender] = _value;\n', '            Approval(msg.sender, _spender, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /* Checks how much _spender can withdraw from _owner */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '   function balanceOf(address _address) public constant returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint256 totalSupply) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/*\n', '--------------------------------------------------------------------------------\n', 'TradeAds Coin Smart Contract\n', '\n', 'Credit\t: Rejean Leclerc \n', 'Mail \t: rejean.leclerc123@gmail.com\n', '\n', '--------------------------------------------------------------------------------\n', '*/\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TradeAdsCoin {\n', '           \n', '    using SafeMath for uint256;\n', '    \n', '    string public constant name = "TradeAds Coin";\n', '    string public constant symbol = "TRD";\n', '    uint8 public constant decimals = 18;\n', '    /* The initially/total supply is 100,000,000 TRD with 18 decimals */\n', '    uint256 public constant _totalSupply  = 100000000000000000000000000;\n', '    \n', '    address public owner;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping (address => uint256)) public allowed;\n', '    \n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, address indexed to, uint256 value);\n', '\t\n', '    function TradeAdsCoin() public {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '    }\n', '    \n', '   function () public payable {\n', '        tTokens();\n', '    }\n', '    \n', '\tfunction tTokens() public payable {\n', '        require(msg.value > 0);\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(msg.value);\n', '\t\tbalances[owner] = balances[owner].sub(msg.value);\n', '\t\towner.transfer(msg.value);\n', '    }\n', '\n', "    /* Transfer the balance from the sender's address to the address _to */\n", '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value\n', '            && _value > 0\n', '            && balances[_to] + _value > balances[_to]) {\n', '\t\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /* Withdraws to address _to form the address _from up to the amount _value */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[_from] >= _value\n', '            && allowed[_from][msg.sender] >= _value\n', '            && _value > 0\n', '            && balances[_to] + _value > balances[_to]) {\n', '            balances[_from] = balances[_from].sub(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /* Allows _spender to withdraw the _allowance amount form sender */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value) {\n', '            allowed[msg.sender][_spender] = _value;\n', '            Approval(msg.sender, _spender, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /* Checks how much _spender can withdraw from _owner */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '   function balanceOf(address _address) public constant returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '    \n', '    function totalSupply() public constant returns (uint256 totalSupply) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '}']
