['pragma solidity ^0.4.11;\n', '\n', 'contract IPAYTOKEN {\n', '  uint256 public totalSupply=300000000 * (10 ** decimals);\n', '  string public name="Ipay";\n', '  uint256 public decimals=18;\n', '  string public symbol="IPAY";\n', '  address public owner;\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  struct BalanceLock{\n', '    uint256 releaseTime;\n', '    uint256 amount;\n', '  }\n', '  mapping (address => BalanceLock[]) balanceLocks;\n', '\n', '  function IPAYTOKEN() public {\n', '    owner = msg.sender;\n', '    balances[msg.sender] = totalSupply;\n', '  }\n', '\n', '  //Fix for short address attack against ERC20\n', '  modifier onlyPayloadSize(uint size) {\n', '    assert(msg.data.length == size + 4);\n', '    _;\n', '  } \n', '\n', '  function grantStock(address _to,uint256 delayTime, uint256 amount) public {\n', '    assert(amount >= 0);\n', '    require(msg.sender == owner);\n', '\n', '    balanceLocks[_to].push(BalanceLock(now+delayTime,amount));\n', '  }\n', '\n', '  function getStockTotal(address _owner) constant public returns (uint256) {\n', '    uint256 result=0;\n', '\n', '    BalanceLock[] _bs = balanceLocks[_owner];\n', '    for(uint i = 0; i < _bs.length; i++){\n', '      result += _bs[i].amount;\n', '    }\n', '    return result;\n', '  }\n', '\n', '  function getStockCount(address _owner) constant public returns (uint256) {\n', '    return balanceLocks[_owner].length;\n', '  }\n', '\n', '  function getStockAmount(address _owner,uint256 _index) constant public returns (uint256) {\n', '    return balanceLocks[_owner][_index].amount;\n', '  }\n', '\n', '  function getStockReleaseTime(address _owner,uint256 _index) constant public returns (uint256) {\n', '    return balanceLocks[_owner][_index].releaseTime;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant public returns (uint256) {\n', '    uint256 balance = balances[_owner];\n', '\n', '    BalanceLock[] _bs = balanceLocks[_owner];\n', '    for(uint i = 0; i < _bs.length; i++){\n', '      balance += _bs[i].amount;\n', '    }\n', '    return balance;\n', '  }\n', '\n', '  function transfer(address _recipient, uint256 _value) onlyPayloadSize(2*32) public {\n', '    BalanceLock[] _bs = balanceLocks[msg.sender];\n', '    for(uint i = 0; i < _bs.length; i++){\n', '      if(now >= _bs[i].releaseTime){\n', '        balances[msg.sender] += _bs[i].amount;\n', '        delete _bs[i];\n', '        for (uint j = i; j<_bs.length-1; j++) {\n', '          _bs[j] = _bs[j+1];\n', '        }\n', '        _bs.length--;\n', '        i--;\n', '      }\n', '    }\n', '\n', '    require(balances[msg.sender] >= _value && _value > 0);\n', '      balances[msg.sender] -= _value;\n', '      balances[_recipient] += _value;\n', '      emit Transfer(msg.sender, _recipient, _value);        \n', '    }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public {\n', '    BalanceLock[] _bs = balanceLocks[msg.sender];\n', '    for(uint i = 0; i < _bs.length; i++){\n', '      if(now >= _bs[i].releaseTime){\n', '        balances[msg.sender] += _bs[i].amount;\n', '        delete _bs[i];\n', '        for (uint j = i; j<_bs.length-1; j++) {\n', '          _bs[j] = _bs[j+1];\n', '        }\n', '        _bs.length--;\n', '        i--;\n', '      }\n', '    }\n', '\n', '    require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '  function approve(address _spender, uint256 _value) public {\n', '    assert(_value >= 0);\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function mint(uint256 amount) public {\n', '    assert(amount >= 0);\n', '    require(msg.sender == owner);\n', '    balances[msg.sender] += amount;\n', '    totalSupply += amount;\n', '  }\n', '\n', '  //Event which is triggered to log all transfers to this contract&#39;s event log\n', '  event Transfer(\n', '    address indexed _from,\n', '    address indexed _to,\n', '    uint256 _value\n', '    );\n', '    \n', '  //Event which is triggered whenever an owner approves a new allowance for a spender.\n', '  event Approval(\n', '    address indexed _owner,\n', '    address indexed _spender,\n', '    uint256 _value\n', '    );\n', '\n', '}']