['pragma solidity ^0.4.18;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }  // token的 接受者 这里声明接口, 将会在我们的ABI里\n', '\n', 'contract TokenERC20 {\n', '/*********Token的属性说明************/\n', '    string public name ;\n', '    string public symbol ;\n', '    uint8 public decimals = 18;  // 18 是建议的默认值\n', '    uint256 public totalSupply; // 发行量\n', '\n', '    // 建立映射 地址对应了 uint&#39; 便是他的余额\n', '    mapping (address => uint256) public balanceOf;   \n', '    // 地址对应余额\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '     // 事件，用来通知客户端Token交易发生\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '     // 事件，用来通知客户端代币被消耗(这里就不是转移, 是token用了就没了)\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    // 这里是构造函数, 实例创建时候执行\n', '    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // 这里确定了总发行量\n', '\n', '        balanceOf[msg.sender] = totalSupply;    // 这里就比较重要, 这里相当于实现了, 把token 全部给合约的Creator\n', '\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '    // token的发送函数\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);    // 不是零地址\n', '        require(balanceOf[_from] >= _value);        // 有足够的余额来发送\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);  // 这里也有意思, 不能发送负数的值(hhhh)\n', '\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];  // 这个是为了校验, 避免过程出错, 总量不变对吧?\n', '        balanceOf[_from] -= _value; //发钱 不多说\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);   // 这里触发了转账的事件 , 见上event\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);  // 判断总额是否一致, 避免过程出错\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value); \n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // 这句很重要, 地址对应的合约地址(也就是token余额)\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;   // 这里是可花费总量\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    // 正如其名, 这个是烧币的.. ,用于把创建者的 token 烧掉\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // 必须要有这么多\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    // 这个是用户销毁token.....\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);        // 一样要有这么多\n', '        require(_value <= allowance[_from][msg.sender]);    // \n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }  // token的 接受者 这里声明接口, 将会在我们的ABI里\n', '\n', 'contract TokenERC20 {\n', '/*********Token的属性说明************/\n', '    string public name ;\n', '    string public symbol ;\n', '    uint8 public decimals = 18;  // 18 是建议的默认值\n', '    uint256 public totalSupply; // 发行量\n', '\n', "    // 建立映射 地址对应了 uint' 便是他的余额\n", '    mapping (address => uint256) public balanceOf;   \n', '    // 地址对应余额\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '     // 事件，用来通知客户端Token交易发生\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '     // 事件，用来通知客户端代币被消耗(这里就不是转移, 是token用了就没了)\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    // 这里是构造函数, 实例创建时候执行\n', '    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // 这里确定了总发行量\n', '\n', '        balanceOf[msg.sender] = totalSupply;    // 这里就比较重要, 这里相当于实现了, 把token 全部给合约的Creator\n', '\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '    // token的发送函数\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);    // 不是零地址\n', '        require(balanceOf[_from] >= _value);        // 有足够的余额来发送\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);  // 这里也有意思, 不能发送负数的值(hhhh)\n', '\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];  // 这个是为了校验, 避免过程出错, 总量不变对吧?\n', '        balanceOf[_from] -= _value; //发钱 不多说\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);   // 这里触发了转账的事件 , 见上event\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);  // 判断总额是否一致, 避免过程出错\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value); \n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // 这句很重要, 地址对应的合约地址(也就是token余额)\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;   // 这里是可花费总量\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    // 正如其名, 这个是烧币的.. ,用于把创建者的 token 烧掉\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // 必须要有这么多\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    // 这个是用户销毁token.....\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);        // 一样要有这么多\n', '        require(_value <= allowance[_from][msg.sender]);    // \n', '        balanceOf[_from] -= _value;\n', '        allowance[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
