['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * Owned contract\n', ' */\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * Secured contract\n', ' * @dev Important actions such as mint or burn will be controlled by smart contract.\n', ' *      This contract will get admin privillige from owner\n', ' */\n', 'contract Secured is Owned {\n', '    address public admin;\n', '\n', '    event SetAdmin(address indexed _admin);\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _newAdmin) public onlyOwner {\n', '        admin = _newAdmin;\n', '        emit SetAdmin(admin);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev \n', ' */\n', 'contract ERC20 {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of ERC20 token.\n', ' * @dev based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * @dev Contract which inherit this token should implement transfer and transferFrom as specified in ERC20\n', ' */\n', 'contract BasicToken is ERC20 {\n', '  using SafeMath for uint256;\n', '  \n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TimeLock\n', ' * @dev Deny some action from lockstart to lockend. \n', ' *      Owner is allowd action even it is timelocked.\n', ' */\n', 'contract Timelocked is Owned {\n', '  uint256 public lockstart;\n', '  uint256 public lockend;\n', '\n', '  event SetTimelock(uint256 start, uint256 end);\n', '\n', '  /**\n', '  * @dev timelock modifier.\n', '  */\n', '  modifier notTimeLocked() {\n', '    require((msg.sender == owner) || (now < lockstart || now > lockend));\n', '    _;\n', '  }\n', '\n', '  function setTimeLock(uint256 _start, uint256 _end) public onlyOwner {\n', '    require(_end > _start);\n', '    lockstart = _start;\n', '    lockend = _end;\n', '    \n', '    emit SetTimelock(_start, _end);\n', '  }\n', '  \n', '  function releaseTimeLock() public onlyOwner {\n', '    lockstart = 0;\n', '    lockend = 0;\n', '    \n', '    emit SetTimelock(0, 0);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Admin(contract which controls AER token) can mint token.\n', ' *      Minted tokens is belong to owner, so that owner can distribute to users.\n', ' *      After distribution, all remained tokens will be reserved as burnable token.\n', ' */\n', 'contract MintableToken is BasicToken, Owned, Secured {\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    uint256 _amount\n', '  )\n', '    onlyAdmin\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[owner] = balances[owner].add(_amount);\n', '    emit Mint(owner, _amount);\n', '    emit Transfer(address(0), owner, _amount);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed) for each AERYUS transaction.\n', ' *      Tokens are burned at a rate based on the average transaction per second. \n', ' */\n', 'contract BurnableToken is BasicToken, Owned, Secured {\n', '  // coldledger address which has reserved tokens for Aeryus transactions.   \n', '  address public coldledger; \n', '\n', '  event SetColdledger(address ledger);\n', '  event BurnForTransaction(address who, uint256 nft, string txtype, uint256 value);\n', '\n', '  function setColdLedger(address ledger) public onlyOwner {\n', '      require(ledger != address(0));\n', '      coldledger = ledger;\n', '      emit SetColdledger(ledger);\n', '  }\n', '\n', '   /**\n', '   * @dev All token remained is stored to coldledger.\n', '   */\n', '  function reserveAll() public onlyOwner {\n', '    uint256 val = balances[owner];\n', '    balances[coldledger] = balances[coldledger].add(val);\n', '    emit Transfer(owner, coldledger, val);\n', '  }\n', '  \n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _nft ERC721 token(NFT) address(index).\n', '   * @param _txtype transaction type such as POS, mobile, government or \n', '   *        any other type that can be covered by the NFTA model .\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _nft, string _txtype, uint256 _value) public onlyAdmin {\n', '    require(_value <= balances[coldledger]);\n', '\n', '    balances[coldledger] = balances[coldledger].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit BurnForTransaction(coldledger, _nft, _txtype, _value);\n', '    emit Transfer(coldledger, address(0), _value);\n', '  }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// The AER Token is fungible token asset of Aeryus protocol.\n', '// As ERC-721 tokens are created to document transactions, AER tokens are burned at a rate based on\n', '// the average transaction per second.\n', '// Visit http://aeryus.ilhaus.com/ for full details. Thank you\n', '//\n', '//\n', '// AER Token Contract\n', '//\n', '// Symbol      : AER\n', '// Name        : Aeryus Token\n', '// Total supply: 4,166,666,663.000000000000000000\n', '// Decimals    : 18\n', '// Website     : http://aeryus.ilhaus.com\n', '// Company     : AERYUS\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract AerToken is Timelocked, MintableToken, BurnableToken {\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint256 public decimals;\n', '  \n', '  constructor(address coldledger) public {\n', '    name = "Aeryus Token";\n', '    symbol = "AER";\n', '    decimals = 18;\n', '    totalSupply_ = 4166666663000000000000000000;\n', '    balances[msg.sender] = totalSupply_;\n', '    setColdLedger(coldledger);\n', '    \n', '    emit Transfer(address(0), msg.sender, totalSupply_);\n', '  }\n', '  \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public notTimeLocked returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public notTimeLocked\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Do not accept ETH\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '\n', '        return BasicToken(tokenAddress).transfer(owner, tokens);\n', '\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * Owned contract\n', ' */\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * Secured contract\n', ' * @dev Important actions such as mint or burn will be controlled by smart contract.\n', ' *      This contract will get admin privillige from owner\n', ' */\n', 'contract Secured is Owned {\n', '    address public admin;\n', '\n', '    event SetAdmin(address indexed _admin);\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _newAdmin) public onlyOwner {\n', '        admin = _newAdmin;\n', '        emit SetAdmin(admin);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev \n', ' */\n', 'contract ERC20 {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of ERC20 token.\n', ' * @dev based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * @dev Contract which inherit this token should implement transfer and transferFrom as specified in ERC20\n', ' */\n', 'contract BasicToken is ERC20 {\n', '  using SafeMath for uint256;\n', '  \n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TimeLock\n', ' * @dev Deny some action from lockstart to lockend. \n', ' *      Owner is allowd action even it is timelocked.\n', ' */\n', 'contract Timelocked is Owned {\n', '  uint256 public lockstart;\n', '  uint256 public lockend;\n', '\n', '  event SetTimelock(uint256 start, uint256 end);\n', '\n', '  /**\n', '  * @dev timelock modifier.\n', '  */\n', '  modifier notTimeLocked() {\n', '    require((msg.sender == owner) || (now < lockstart || now > lockend));\n', '    _;\n', '  }\n', '\n', '  function setTimeLock(uint256 _start, uint256 _end) public onlyOwner {\n', '    require(_end > _start);\n', '    lockstart = _start;\n', '    lockend = _end;\n', '    \n', '    emit SetTimelock(_start, _end);\n', '  }\n', '  \n', '  function releaseTimeLock() public onlyOwner {\n', '    lockstart = 0;\n', '    lockend = 0;\n', '    \n', '    emit SetTimelock(0, 0);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Admin(contract which controls AER token) can mint token.\n', ' *      Minted tokens is belong to owner, so that owner can distribute to users.\n', ' *      After distribution, all remained tokens will be reserved as burnable token.\n', ' */\n', 'contract MintableToken is BasicToken, Owned, Secured {\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    uint256 _amount\n', '  )\n', '    onlyAdmin\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[owner] = balances[owner].add(_amount);\n', '    emit Mint(owner, _amount);\n', '    emit Transfer(address(0), owner, _amount);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed) for each AERYUS transaction.\n', ' *      Tokens are burned at a rate based on the average transaction per second. \n', ' */\n', 'contract BurnableToken is BasicToken, Owned, Secured {\n', '  // coldledger address which has reserved tokens for Aeryus transactions.   \n', '  address public coldledger; \n', '\n', '  event SetColdledger(address ledger);\n', '  event BurnForTransaction(address who, uint256 nft, string txtype, uint256 value);\n', '\n', '  function setColdLedger(address ledger) public onlyOwner {\n', '      require(ledger != address(0));\n', '      coldledger = ledger;\n', '      emit SetColdledger(ledger);\n', '  }\n', '\n', '   /**\n', '   * @dev All token remained is stored to coldledger.\n', '   */\n', '  function reserveAll() public onlyOwner {\n', '    uint256 val = balances[owner];\n', '    balances[coldledger] = balances[coldledger].add(val);\n', '    emit Transfer(owner, coldledger, val);\n', '  }\n', '  \n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _nft ERC721 token(NFT) address(index).\n', '   * @param _txtype transaction type such as POS, mobile, government or \n', '   *        any other type that can be covered by the NFTA model .\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _nft, string _txtype, uint256 _value) public onlyAdmin {\n', '    require(_value <= balances[coldledger]);\n', '\n', '    balances[coldledger] = balances[coldledger].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit BurnForTransaction(coldledger, _nft, _txtype, _value);\n', '    emit Transfer(coldledger, address(0), _value);\n', '  }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// The AER Token is fungible token asset of Aeryus protocol.\n', '// As ERC-721 tokens are created to document transactions, AER tokens are burned at a rate based on\n', '// the average transaction per second.\n', '// Visit http://aeryus.ilhaus.com/ for full details. Thank you\n', '//\n', '//\n', '// AER Token Contract\n', '//\n', '// Symbol      : AER\n', '// Name        : Aeryus Token\n', '// Total supply: 4,166,666,663.000000000000000000\n', '// Decimals    : 18\n', '// Website     : http://aeryus.ilhaus.com\n', '// Company     : AERYUS\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract AerToken is Timelocked, MintableToken, BurnableToken {\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint256 public decimals;\n', '  \n', '  constructor(address coldledger) public {\n', '    name = "Aeryus Token";\n', '    symbol = "AER";\n', '    decimals = 18;\n', '    totalSupply_ = 4166666663000000000000000000;\n', '    balances[msg.sender] = totalSupply_;\n', '    setColdLedger(coldledger);\n', '    \n', '    emit Transfer(address(0), msg.sender, totalSupply_);\n', '  }\n', '  \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public notTimeLocked returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public notTimeLocked\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Do not accept ETH\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '\n', '        return BasicToken(tokenAddress).transfer(owner, tokens);\n', '\n', '    }\n', '}']
