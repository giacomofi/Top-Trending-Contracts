['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/Owned.sol\n', '\n', '// ----------------------------------------------------------------------------\n', '// Ownership functionality for authorization controls and user permissions\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Standard Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// File: contracts/UncToken.sol\n', '\n', '// ----------------------------------------------------------------------------\n', '// &#39;UNC&#39; &#39;Uncloak&#39; token contract\n', '// Symbol      : UNC\n', '// Name        : Uncloak\n', '// Total supply: 4,200,000,000\n', '// Decimals    : 18\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// Receives ETH and generates tokens\n', '// ----------------------------------------------------------------------------\n', 'contract UncToken is SafeMath, Owned, ERC20 {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    // Track whether the coin can be transfered\n', '    bool private transferEnabled = false;\n', '\n', '    // track addresses that can transfer regardless of whether transfers are enables\n', '    mapping(address => bool) public transferAdmins;\n', '\n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) internal allowed;\n', '\n', '    event Burned(address indexed burner, uint256 value);\n', '\n', '    // Check if transfer is valid\n', '    modifier canTransfer(address _sender) {\n', '        require(transferEnabled || transferAdmins[_sender]);\n', '        _;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "UNC";\n', '        name = "Uncloak";\n', '        decimals = 18;\n', '        _totalSupply = 4200000000 * 10**uint(decimals);\n', '        transferAdmins[owner] = true; // Enable transfers for owner\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) canTransfer (msg.sender) public returns (bool success) {\n', '        require(to != address(this)); //make sure we&#39;re not transfering to this contract\n', '\n', '        //check edge cases\n', '        if (balances[msg.sender] >= tokens\n', '            && tokens > 0) {\n', '\n', '                //update balances\n', '                balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '                balances[to] = safeAdd(balances[to], tokens);\n', '\n', '                //log event\n', '                emit Transfer(msg.sender, to, tokens);\n', '                return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        // Ownly allow changes to or from 0. Mitigates vulnerabiilty of race description\n', '        // described here: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((tokens == 0) || (allowed[msg.sender][spender] == 0));\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) canTransfer(from) public returns (bool success) {\n', '        require(to != address(this));\n', '\n', '        //check edge cases\n', '        if (allowed[from][msg.sender] >= tokens\n', '            && balances[from] >= tokens\n', '            && tokens > 0) {\n', '\n', '            //update balances and allowances\n', '            balances[from] = safeSub(balances[from], tokens);\n', '            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '            balances[to] = safeAdd(balances[to], tokens);\n', '\n', '            //log event\n', '            emit Transfer(from, to, tokens);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // Owner can allow transfers for a particular address. Use for crowdsale contract.\n', '    function setTransferAdmin(address _addr, bool _canTransfer) onlyOwner public {\n', '        transferAdmins[_addr] = _canTransfer;\n', '    }\n', '\n', '    // Enable transfers for token holders\n', '    function enablesTransfers() public onlyOwner {\n', '        transferEnabled = true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Burns a specific number of tokens\n', '    // ------------------------------------------------------------------------\n', '    function burn(uint256 _value) public onlyOwner {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = safeSub(balances[burner], _value);\n', '        _totalSupply = safeSub(_totalSupply, _value);\n', '        emit Burned(burner, _value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Doesn&#39;t Accept Eth\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/Owned.sol\n', '\n', '// ----------------------------------------------------------------------------\n', '// Ownership functionality for authorization controls and user permissions\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Standard Interface\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// File: contracts/UncToken.sol\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'UNC' 'Uncloak' token contract\n", '// Symbol      : UNC\n', '// Name        : Uncloak\n', '// Total supply: 4,200,000,000\n', '// Decimals    : 18\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// Receives ETH and generates tokens\n', '// ----------------------------------------------------------------------------\n', 'contract UncToken is SafeMath, Owned, ERC20 {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '\n', '    // Track whether the coin can be transfered\n', '    bool private transferEnabled = false;\n', '\n', '    // track addresses that can transfer regardless of whether transfers are enables\n', '    mapping(address => bool) public transferAdmins;\n', '\n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) internal allowed;\n', '\n', '    event Burned(address indexed burner, uint256 value);\n', '\n', '    // Check if transfer is valid\n', '    modifier canTransfer(address _sender) {\n', '        require(transferEnabled || transferAdmins[_sender]);\n', '        _;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "UNC";\n', '        name = "Uncloak";\n', '        decimals = 18;\n', '        _totalSupply = 4200000000 * 10**uint(decimals);\n', '        transferAdmins[owner] = true; // Enable transfers for owner\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) canTransfer (msg.sender) public returns (bool success) {\n', "        require(to != address(this)); //make sure we're not transfering to this contract\n", '\n', '        //check edge cases\n', '        if (balances[msg.sender] >= tokens\n', '            && tokens > 0) {\n', '\n', '                //update balances\n', '                balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '                balances[to] = safeAdd(balances[to], tokens);\n', '\n', '                //log event\n', '                emit Transfer(msg.sender, to, tokens);\n', '                return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        // Ownly allow changes to or from 0. Mitigates vulnerabiilty of race description\n', '        // described here: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((tokens == 0) || (allowed[msg.sender][spender] == 0));\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) canTransfer(from) public returns (bool success) {\n', '        require(to != address(this));\n', '\n', '        //check edge cases\n', '        if (allowed[from][msg.sender] >= tokens\n', '            && balances[from] >= tokens\n', '            && tokens > 0) {\n', '\n', '            //update balances and allowances\n', '            balances[from] = safeSub(balances[from], tokens);\n', '            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '            balances[to] = safeAdd(balances[to], tokens);\n', '\n', '            //log event\n', '            emit Transfer(from, to, tokens);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // Owner can allow transfers for a particular address. Use for crowdsale contract.\n', '    function setTransferAdmin(address _addr, bool _canTransfer) onlyOwner public {\n', '        transferAdmins[_addr] = _canTransfer;\n', '    }\n', '\n', '    // Enable transfers for token holders\n', '    function enablesTransfers() public onlyOwner {\n', '        transferEnabled = true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Burns a specific number of tokens\n', '    // ------------------------------------------------------------------------\n', '    function burn(uint256 _value) public onlyOwner {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = safeSub(balances[burner], _value);\n', '        _totalSupply = safeSub(_totalSupply, _value);\n', '        emit Burned(burner, _value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Doesn't Accept Eth\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
