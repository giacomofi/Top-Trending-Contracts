['pragma solidity ^0.4.8;\n', '\n', '/* Getseeds Token (GSD) source code. */\n', '  \n', ' contract GSDToken {\n', '     \n', '    // Get the total token supply\n', '  \n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /* This notifies clients about the XBL amount burned */\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    // And we begin:\n', '    string public constant symbol = "GSD";\n', '    string public constant name = "Getseeds Token";\n', '    uint8 public constant decimals = 18;\n', '    uint256 _totalSupply = 100000000000000000000000000000;    // 100,000,000,000 tokens with 18 decimal places.\n', '    uint256 _totalBurned = 0;                            // Total burned initially starts at 0.\n', '     \n', '    /* The owner of this contract (initial address) */\n', '    address public owner;\n', '  \n', '    /* Dictionary containing balances for each account */\n', '    mapping(address => uint256) balances;\n', '  \n', '    /* Owner of account can approve (allow) the transfer of an amount to another account */\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '  \n', '     // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() \n', '     {\n', '         if (msg.sender != owner) \n', '         {\n', '             throw;\n', '         }\n', '         _;\n', '     }\n', '  \n', '     // Constructor:\n', '     function GSDToken() \n', '     {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '     }\n', '  \n', '     function totalSupply() constant returns (uint256 l_totalSupply) \n', '     {\n', '        l_totalSupply = _totalSupply;\n', '     }\n', '\n', '     function totalBurned() constant returns (uint256 l_totalBurned)\n', '     {\n', '        l_totalBurned = _totalBurned;\n', '     }\n', '  \n', '     /* What is the balance of a particular account? */\n', '     function balanceOf(address _owner) constant returns (uint256 balance) \n', '     {\n', '        return balances[_owner];\n', '     }\n', '  \n', '     /* Transfer the balance from owner&#39;s account to another account. */\n', '     function transfer(address _to, uint256 _amount) returns (bool success) \n', '     {\n', '        if (_to == 0x0) throw;      /* Prevents transferring to 0x0 addresses. Use burn() instead. */\n', '\n', '        if (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n', '        {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '         } \n', '         else \n', '         {\n', '            return false;\n', '         }\n', '     }\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '     // fees in sub-currencies; the command should fail unless the _from account has\n', '     // deliberately authorized the sender of the message via some mechanism; we propose\n', '     // these standardized APIs for approval:\n', '     function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) \n', '     {\n', '        if (_to == 0x0) throw;      /* Prevents transferring to 0x0 addresses. Use burn() instead. */\n', '\n', '        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n', '        {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '         } \n', '         else \n', '         {\n', '            return false;\n', '         }\n', '     }\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     function approve(address _spender, uint256 _amount) returns (bool success) \n', '     {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '     }\n', '  \n', '     /* Is the _spender allowed to spend on the behalf of the _owner? */ \n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) \n', '     {\n', '        return allowed[_owner][_spender];\n', '     }\n', '\n', '    function burn(uint256 _value) returns (bool success) \n', '    {\n', '        if (balances[msg.sender] < _value) throw;            // Check if the sender has enough\n', '        balances[msg.sender] -= _value;                      // Subtract from the sender\n', '        /* Updating indicator variables */\n', '        _totalSupply -= _value;          \n', '        _totalBurned += _value;                             \n', '        /* Send the event notification */\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) returns (bool success) \n', '    {\n', '        if (balances[_from] < _value) throw;                // Check if the sender has enough\n', '        if (_value > allowed[_from][msg.sender]) throw;     // Check allowance\n', '        balances[_from] -= _value;                          // Subtract from the sender\n', '        /* Updating indicator variables */\n', '        _totalSupply -= _value;                           \n', '        _totalBurned += _value;\n', '        /* Send the event notification */\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', ' }']
['pragma solidity ^0.4.8;\n', '\n', '/* Getseeds Token (GSD) source code. */\n', '  \n', ' contract GSDToken {\n', '     \n', '    // Get the total token supply\n', '  \n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /* This notifies clients about the XBL amount burned */\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    // And we begin:\n', '    string public constant symbol = "GSD";\n', '    string public constant name = "Getseeds Token";\n', '    uint8 public constant decimals = 18;\n', '    uint256 _totalSupply = 100000000000000000000000000000;    // 100,000,000,000 tokens with 18 decimal places.\n', '    uint256 _totalBurned = 0;                            // Total burned initially starts at 0.\n', '     \n', '    /* The owner of this contract (initial address) */\n', '    address public owner;\n', '  \n', '    /* Dictionary containing balances for each account */\n', '    mapping(address => uint256) balances;\n', '  \n', '    /* Owner of account can approve (allow) the transfer of an amount to another account */\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '  \n', '     // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() \n', '     {\n', '         if (msg.sender != owner) \n', '         {\n', '             throw;\n', '         }\n', '         _;\n', '     }\n', '  \n', '     // Constructor:\n', '     function GSDToken() \n', '     {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '     }\n', '  \n', '     function totalSupply() constant returns (uint256 l_totalSupply) \n', '     {\n', '        l_totalSupply = _totalSupply;\n', '     }\n', '\n', '     function totalBurned() constant returns (uint256 l_totalBurned)\n', '     {\n', '        l_totalBurned = _totalBurned;\n', '     }\n', '  \n', '     /* What is the balance of a particular account? */\n', '     function balanceOf(address _owner) constant returns (uint256 balance) \n', '     {\n', '        return balances[_owner];\n', '     }\n', '  \n', "     /* Transfer the balance from owner's account to another account. */\n", '     function transfer(address _to, uint256 _amount) returns (bool success) \n', '     {\n', '        if (_to == 0x0) throw;      /* Prevents transferring to 0x0 addresses. Use burn() instead. */\n', '\n', '        if (balances[msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n', '        {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '         } \n', '         else \n', '         {\n', '            return false;\n', '         }\n', '     }\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '     // fees in sub-currencies; the command should fail unless the _from account has\n', '     // deliberately authorized the sender of the message via some mechanism; we propose\n', '     // these standardized APIs for approval:\n', '     function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) \n', '     {\n', '        if (_to == 0x0) throw;      /* Prevents transferring to 0x0 addresses. Use burn() instead. */\n', '\n', '        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) \n', '        {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '         } \n', '         else \n', '         {\n', '            return false;\n', '         }\n', '     }\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     function approve(address _spender, uint256 _amount) returns (bool success) \n', '     {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '     }\n', '  \n', '     /* Is the _spender allowed to spend on the behalf of the _owner? */ \n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) \n', '     {\n', '        return allowed[_owner][_spender];\n', '     }\n', '\n', '    function burn(uint256 _value) returns (bool success) \n', '    {\n', '        if (balances[msg.sender] < _value) throw;            // Check if the sender has enough\n', '        balances[msg.sender] -= _value;                      // Subtract from the sender\n', '        /* Updating indicator variables */\n', '        _totalSupply -= _value;          \n', '        _totalBurned += _value;                             \n', '        /* Send the event notification */\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) returns (bool success) \n', '    {\n', '        if (balances[_from] < _value) throw;                // Check if the sender has enough\n', '        if (_value > allowed[_from][msg.sender]) throw;     // Check allowance\n', '        balances[_from] -= _value;                          // Subtract from the sender\n', '        /* Updating indicator variables */\n', '        _totalSupply -= _value;                           \n', '        _totalBurned += _value;\n', '        /* Send the event notification */\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', ' }']
