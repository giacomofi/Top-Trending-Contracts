['pragma solidity ^0.4.20;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'library AddressUtils {\n', '\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     *  as the code is not actually created until after the constructor finishes.\n', '     * @param addr address to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC721Receiver {\n', '    /**\n', '     * @dev Magic value to be returned upon successful reception of an NFT\n', '     *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '     *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '     */\n', '    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '    /**\n', '     * @notice Handle the receipt of an NFT\n', '     * @dev The ERC721 smart contract calls this function on the recipient\n', '     *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '     *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '     *  than the magic value MUST result in the transaction being reverted.\n', '     *  Note: the contract address is always the message sender.\n', '     * @param _from The sending address\n', '     * @param _tokenId The NFT identifier which is being transfered\n', '     * @param _data Additional data with no specified format\n', '     * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '     */\n', '    function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '    function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function getApproved(uint256 _tokenId) public view returns (address _operator);\n', '\n', '    function setApprovalForAll(address _operator, bool _approved) public;\n', '    function isApprovedForAll(address _owner, address _operator)\n', '    public view returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n', '\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n', '\n', '    function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {}\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '    using SafeMath for uint256;\n', '    using AddressUtils for address;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '    // Mapping from token ID to owner\n', '    mapping (uint256 => address) internal tokenOwner;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) internal tokenApprovals;\n', '\n', '    // Mapping from owner to number of owned token\n', '    mapping (address => uint256) internal ownedTokensCount;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '    /**\n', '     * @dev Guarantees msg.sender is owner of the given token\n', '     * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '     */\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require(ownerOf(_tokenId) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '     * @param _tokenId uint256 ID of the token to validate\n', '     */\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        require(isApprovedOrOwner(msg.sender, _tokenId));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address\n', '     * @param _owner address to query the balance of\n', '     * @return uint256 representing the amount owned by the passed address\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        require(_owner != address(0));\n', '        return ownedTokensCount[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the owner of the specified token ID\n', '     * @param _tokenId uint256 ID of the token to query the owner of\n', '     * @return owner address currently marked as the owner of the given token ID\n', '     */\n', '    function ownerOf(uint256 _tokenId) public view returns (address) {\n', '        address owner = tokenOwner[_tokenId];\n', '        require(owner != address(0));\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the specified token exists\n', '     * @param _tokenId uint256 ID of the token to query the existence of\n', '     * @return whether the token exists\n', '     */\n', '    function exists(uint256 _tokenId) public view returns (bool) {\n', '        address owner = tokenOwner[_tokenId];\n', '        return owner != address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Approves another address to transfer the given token ID\n', '     * @dev The zero address indicates there is no approved address.\n', '     * @dev There can only be one approved address per token at a given time.\n', '     * @dev Can only be called by the token owner or an approved operator.\n', '     * @param _to address to be approved for the given token ID\n', '     * @param _tokenId uint256 ID of the token to be approved\n', '     */\n', '    function approve(address _to, uint256 _tokenId) public {\n', '        address owner = ownerOf(_tokenId);\n', '        require(_to != owner);\n', '        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '        if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '            tokenApprovals[_tokenId] = _to;\n', '            Approval(owner, _to, _tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the approved address for a token ID, or zero if no address set\n', '     * @param _tokenId uint256 ID of the token to query the approval of\n', '     * @return address currently approved for the given token ID\n', '     */\n', '    function getApproved(uint256 _tokenId) public view returns (address) {\n', '        return tokenApprovals[_tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev Sets or unsets the approval of a given operator\n', '     * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '     * @param _to operator address to set the approval\n', '     * @param _approved representing the status of the approval to be set\n', '     */\n', '    function setApprovalForAll(address _to, bool _approved) public {\n', '        require(_to != msg.sender);\n', '        operatorApprovals[msg.sender][_to] = _approved;\n', '        ApprovalForAll(msg.sender, _to, _approved);\n', '    }\n', '\n', '    /**\n', '     * @dev Tells whether an operator is approved by a given owner\n', '     * @param _owner owner address which you want to query the approval of\n', '     * @param _operator operator address which you want to query the approval of\n', '     * @return bool whether the given operator is approved by the given owner\n', '     */\n', '    function isApprovedForAll(address _owner, address _operator) public view returns (bool)\n', '    {\n', '        return operatorApprovals[_owner][_operator];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers the ownership of a given token ID to another address\n', '     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '     * @dev Requires the msg sender to be the owner, approved, or operator\n', '     * @param _from current owner of the token\n', '     * @param _to address to receive the ownership of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId)\n', '    {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(_to, _tokenId);\n', '\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers the ownership of a given token ID to another address\n', '     * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '     *  which is called upon a safe transfer, and return the magic value\n', '     *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '     *  the transfer is reverted.\n', '     * @dev Requires the msg sender to be the owner, approved, or operator\n', '     * @param _from current owner of the token\n', '     * @param _to address to receive the ownership of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId)\n', '    {\n', '        // solium-disable-next-line arg-overflow\n', '        safeTransferFrom(_from, _to, _tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers the ownership of a given token ID to another address\n', '     * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '     *  which is called upon a safe transfer, and return the magic value\n', '     *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '     *  the transfer is reverted.\n', '     * @dev Requires the msg sender to be the owner, approved, or operator\n', '     * @param _from current owner of the token\n', '     * @param _to address to receive the ownership of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes data to send along with a safe transfer check\n', '     */\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId)\n', '    {\n', '        transferFrom(_from, _to, _tokenId);\n', '        // solium-disable-next-line arg-overflow\n', '        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the given spender can transfer a given token ID\n', '     * @param _spender address of the spender to query\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '     * @return bool whether the msg.sender is approved for the given token ID,\n', '     *  is an operator of the owner, or is the owner of the token\n', '     */\n', '    function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool)\n', '    {\n', '        address owner = ownerOf(_tokenId);\n', '        // Disable solium check because of\n', '        // https://github.com/duaraghav8/Solium/issues/175\n', '        // solium-disable-next-line operator-whitespace\n', '        return (\n', '        _spender == owner ||\n', '        getApproved(_tokenId) == _spender ||\n', '        isApprovedForAll(owner, _spender)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to mint a new token\n', '     * @dev Reverts if the given token ID already exists\n', '     * @param _to The address that will own the minted token\n', '     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '     */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        require(_to != address(0));\n', '        addTokenTo(_to, _tokenId);\n', '        Transfer(address(0), _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to burn a specific token\n', '     * @dev Reverts if the token does not exist\n', '     * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '     */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        clearApproval(_owner, _tokenId);\n', '        removeTokenFrom(_owner, _tokenId);\n', '        Transfer(_owner, address(0), _tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to clear current approval of a given token ID\n', '     * @dev Reverts if the given address is not indeed the owner of the token\n', '     * @param _owner owner of the token\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function clearApproval(address _owner, uint256 _tokenId) internal {\n', '        require(ownerOf(_tokenId) == _owner);\n', '        if (tokenApprovals[_tokenId] != address(0)) {\n', '            tokenApprovals[_tokenId] = address(0);\n', '            Approval(_owner, address(0), _tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to add a token ID to the list of a given address\n', '     * @param _to address representing the new owner of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '     */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        require(tokenOwner[_tokenId] == address(0));\n', '        tokenOwner[_tokenId] = _to;\n', '        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to remove a token ID from the list of a given address\n', '     * @param _from address representing the previous owner of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '     */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        require(ownerOf(_tokenId) == _from);\n', '        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '        tokenOwner[_tokenId] = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to invoke `onERC721Received` on a target address\n', '     * @dev The call is not executed if the target address is not a contract\n', '     * @param _from address representing the previous owner of the given token ID\n', '     * @param _to target address that will receive the tokens\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return whether the call correctly returned the expected magic value\n', '     */\n', '    function checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data) internal returns (bool)\n', '    {\n', '        if (!_to.isContract()) {\n', '            return true;\n', '        }\n', '        bytes4 retval = ERC721Receiver(_to).onERC721Received(\n', '        _from, _tokenId, _data);\n', '        return (retval == ERC721_RECEIVED);\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '    // Token name\n', '    string internal name_;\n', '\n', '    // Token symbol\n', '    string internal symbol_;\n', '\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping(address => uint256[]) internal ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '    // Array with all token ids, used for enumeration\n', '    uint256[] internal allTokens;\n', '\n', '    // Mapping from token id to position in the allTokens array\n', '    mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '    // Optional mapping for token URIs\n', '    mapping(uint256 => string) internal tokenURIs;\n', '\n', '    /**\n', '     * @dev Constructor function\n', '     */\n', '    function ERC721Token(string _name, string _symbol) public {\n', '        name_ = _name;\n', '        symbol_ = _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token name\n', '     * @return string representing the token name\n', '     */\n', '    function name() public view returns (string) {\n', '        return name_;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token symbol\n', '     * @return string representing the token symbol\n', '     */\n', '    function symbol() public view returns (string) {\n', '        return symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an URI for a given token ID\n', '     * @dev Throws if the token ID does not exist. May return an empty string.\n', '     * @param _tokenId uint256 ID of the token to query\n', '     */\n', '    function tokenURI(uint256 _tokenId) public view returns (string) {\n', '        require(exists(_tokenId));\n', '        return tokenURIs[_tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '     * @param _owner address owning the tokens list to be accessed\n', '     * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '     */\n', '    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256)\n', '    {\n', '        require(_index < balanceOf(_owner));\n', '        return ownedTokens[_owner][_index];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets list of tokens of the requested owner\n', '     * @param _owner address owning the tokens list to be accessed\n', '     * @return uint256[] token IDs\n', '     */\n', '    function tokensOfOwner(address _owner) public view returns (uint256[])\n', '    {\n', '        return ownedTokens[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the total amount of tokens stored by the contract\n', '     * @return uint256 representing the total amount of tokens\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return allTokens.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token ID at a given index of all the tokens in this contract\n', '     * @dev Reverts if the index is greater or equal to the total number of tokens\n', '     * @param _index uint256 representing the index to be accessed of the tokens list\n', '     * @return uint256 token ID at the given index of the tokens list\n', '     */\n', '    function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '        require(_index < totalSupply());\n', '        return allTokens[_index];\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to set the token URI for a given token\n', '     * @dev Reverts if the token ID does not exist\n', '     * @param _tokenId uint256 ID of the token to set its URI\n', '     * @param _uri string URI to assign\n', '     */\n', '    function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '        require(exists(_tokenId));\n', '        tokenURIs[_tokenId] = _uri;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to add a token ID to the list of a given address\n', '     * @param _to address representing the new owner of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '     */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        super.addTokenTo(_to, _tokenId);\n', '        uint256 length = ownedTokens[_to].length;\n', '        ownedTokens[_to].push(_tokenId);\n', '        ownedTokensIndex[_tokenId] = length;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to remove a token ID from the list of a given address\n', '     * @param _from address representing the previous owner of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '     */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        super.removeTokenFrom(_from, _tokenId);\n', '\n', '        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '        ownedTokens[_from][tokenIndex] = lastToken;\n', '        ownedTokens[_from][lastTokenIndex] = 0;\n', '        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '        ownedTokens[_from].length--;\n', '        ownedTokensIndex[_tokenId] = 0;\n', '        ownedTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to mint a new token\n', '     * @dev Reverts if the given token ID already exists\n', '     * @param _to address the beneficiary that will own the minted token\n', '     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '     */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        super._mint(_to, _tokenId);\n', '\n', '        allTokensIndex[_tokenId] = allTokens.length;\n', '        allTokens.push(_tokenId);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev Internal function to burn a specific token\n', '     * @dev Reverts if the token does not exist\n', '     * @param _owner owner of the token to burn\n', '     * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '     */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        super._burn(_owner, _tokenId);\n', '\n', '        // Clear metadata (if any)\n', '        if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '            delete tokenURIs[_tokenId];\n', '        }\n', '\n', '        // Reorg all tokens array\n', '        uint256 tokenIndex = allTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = allTokens.length.sub(1);\n', '        uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '        allTokens[tokenIndex] = lastToken;\n', '        allTokens[lastTokenIndex] = 0;\n', '\n', '        allTokens.length--;\n', '        allTokensIndex[_tokenId] = 0;\n', '        allTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is ERC721BasicToken {\n', '    function burn(uint256 _tokenId) public {\n', '        _burn(msg.sender, _tokenId);\n', '    }\n', '}\n', '\n', '\n', 'contract MintableToken is ERC721Token, Ownable {\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    function mint(address _to, uint256 _tokenId) public onlyOwner canMint {\n', '        _mint(_to, _tokenId);\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }    \n', '}\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '    uint256 public cap;\n', '\n', '    function CappedToken(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _tokenId id of the new token\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _tokenId) onlyOwner canMint public {\n', '        require(totalSupply().add(1) <= cap);\n', '\n', '        return super.mint(_to, _tokenId);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is ERC721BasicToken, Pausable {\n', '    function approve(address _to, uint256 _tokenId) public whenNotPaused {\n', '        return super.approve(_to, _tokenId);\n', '    }\n', '\n', '    function setApprovalForAll(address _to, bool _approved) public whenNotPaused {\n', '        return super.setApprovalForAll(_to, _approved);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused canTransfer(_tokenId) {\n', '        return super.transferFrom(_from, _to, _tokenId);\n', '    }\n', '\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused canTransfer(_tokenId) {\n', '        return super.safeTransferFrom(_from, _to, _tokenId);\n', '    }\n', '\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public whenNotPaused canTransfer(_tokenId) {\n', '        return super.safeTransferFrom(_from, _to, _tokenId, _data);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title PausableBurnable token\n', ' * @dev BurnableToken allowing to burn only when is not paused.\n', ' **/\n', 'contract BurnablePausableToken is PausableToken, BurnableToken {\n', '    function burn(uint256 _tokenId) public whenNotPaused {\n', '        super.burn(_tokenId);\n', '    }\n', '}\n', '\n', '\n', 'contract Token is ERC721Token , PausableToken {\n', '    function Token()\n', '        public\n', '        payable\n', '        ERC721Token(&#39;CryptoPussies&#39;, &#39;CP&#39;)\n', '         \n', '    { \n', '        \n', '        \n', '    }\n', '\n', '    function setTokenURI(uint256 _tokenId, string _uri) external onlyOwnerOf(_tokenId) {\n', '        super._setTokenURI(_tokenId, _uri);\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'library AddressUtils {\n', '\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     *  as the code is not actually created until after the constructor finishes.\n', '     * @param addr address to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC721Receiver {\n', '    /**\n', '     * @dev Magic value to be returned upon successful reception of an NFT\n', '     *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '     *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '     */\n', '    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '    /**\n', '     * @notice Handle the receipt of an NFT\n', '     * @dev The ERC721 smart contract calls this function on the recipient\n', '     *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '     *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '     *  than the magic value MUST result in the transaction being reverted.\n', '     *  Note: the contract address is always the message sender.\n', '     * @param _from The sending address\n', '     * @param _tokenId The NFT identifier which is being transfered\n', '     * @param _data Additional data with no specified format\n', '     * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '     */\n', '    function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '    function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function getApproved(uint256 _tokenId) public view returns (address _operator);\n', '\n', '    function setApprovalForAll(address _operator, bool _approved) public;\n', '    function isApprovedForAll(address _owner, address _operator)\n', '    public view returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n', '\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n', '\n', '    function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {}\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '    using SafeMath for uint256;\n', '    using AddressUtils for address;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '    // Mapping from token ID to owner\n', '    mapping (uint256 => address) internal tokenOwner;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) internal tokenApprovals;\n', '\n', '    // Mapping from owner to number of owned token\n', '    mapping (address => uint256) internal ownedTokensCount;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '    /**\n', '     * @dev Guarantees msg.sender is owner of the given token\n', '     * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '     */\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require(ownerOf(_tokenId) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '     * @param _tokenId uint256 ID of the token to validate\n', '     */\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        require(isApprovedOrOwner(msg.sender, _tokenId));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address\n', '     * @param _owner address to query the balance of\n', '     * @return uint256 representing the amount owned by the passed address\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        require(_owner != address(0));\n', '        return ownedTokensCount[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the owner of the specified token ID\n', '     * @param _tokenId uint256 ID of the token to query the owner of\n', '     * @return owner address currently marked as the owner of the given token ID\n', '     */\n', '    function ownerOf(uint256 _tokenId) public view returns (address) {\n', '        address owner = tokenOwner[_tokenId];\n', '        require(owner != address(0));\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the specified token exists\n', '     * @param _tokenId uint256 ID of the token to query the existence of\n', '     * @return whether the token exists\n', '     */\n', '    function exists(uint256 _tokenId) public view returns (bool) {\n', '        address owner = tokenOwner[_tokenId];\n', '        return owner != address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Approves another address to transfer the given token ID\n', '     * @dev The zero address indicates there is no approved address.\n', '     * @dev There can only be one approved address per token at a given time.\n', '     * @dev Can only be called by the token owner or an approved operator.\n', '     * @param _to address to be approved for the given token ID\n', '     * @param _tokenId uint256 ID of the token to be approved\n', '     */\n', '    function approve(address _to, uint256 _tokenId) public {\n', '        address owner = ownerOf(_tokenId);\n', '        require(_to != owner);\n', '        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '        if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '            tokenApprovals[_tokenId] = _to;\n', '            Approval(owner, _to, _tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the approved address for a token ID, or zero if no address set\n', '     * @param _tokenId uint256 ID of the token to query the approval of\n', '     * @return address currently approved for the given token ID\n', '     */\n', '    function getApproved(uint256 _tokenId) public view returns (address) {\n', '        return tokenApprovals[_tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev Sets or unsets the approval of a given operator\n', '     * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '     * @param _to operator address to set the approval\n', '     * @param _approved representing the status of the approval to be set\n', '     */\n', '    function setApprovalForAll(address _to, bool _approved) public {\n', '        require(_to != msg.sender);\n', '        operatorApprovals[msg.sender][_to] = _approved;\n', '        ApprovalForAll(msg.sender, _to, _approved);\n', '    }\n', '\n', '    /**\n', '     * @dev Tells whether an operator is approved by a given owner\n', '     * @param _owner owner address which you want to query the approval of\n', '     * @param _operator operator address which you want to query the approval of\n', '     * @return bool whether the given operator is approved by the given owner\n', '     */\n', '    function isApprovedForAll(address _owner, address _operator) public view returns (bool)\n', '    {\n', '        return operatorApprovals[_owner][_operator];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers the ownership of a given token ID to another address\n', '     * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '     * @dev Requires the msg sender to be the owner, approved, or operator\n', '     * @param _from current owner of the token\n', '     * @param _to address to receive the ownership of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId)\n', '    {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(_to, _tokenId);\n', '\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers the ownership of a given token ID to another address\n', '     * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '     *  which is called upon a safe transfer, and return the magic value\n', '     *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '     *  the transfer is reverted.\n', '     * @dev Requires the msg sender to be the owner, approved, or operator\n', '     * @param _from current owner of the token\n', '     * @param _to address to receive the ownership of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId)\n', '    {\n', '        // solium-disable-next-line arg-overflow\n', '        safeTransferFrom(_from, _to, _tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers the ownership of a given token ID to another address\n', '     * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '     *  which is called upon a safe transfer, and return the magic value\n', '     *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '     *  the transfer is reverted.\n', '     * @dev Requires the msg sender to be the owner, approved, or operator\n', '     * @param _from current owner of the token\n', '     * @param _to address to receive the ownership of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes data to send along with a safe transfer check\n', '     */\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId)\n', '    {\n', '        transferFrom(_from, _to, _tokenId);\n', '        // solium-disable-next-line arg-overflow\n', '        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the given spender can transfer a given token ID\n', '     * @param _spender address of the spender to query\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '     * @return bool whether the msg.sender is approved for the given token ID,\n', '     *  is an operator of the owner, or is the owner of the token\n', '     */\n', '    function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool)\n', '    {\n', '        address owner = ownerOf(_tokenId);\n', '        // Disable solium check because of\n', '        // https://github.com/duaraghav8/Solium/issues/175\n', '        // solium-disable-next-line operator-whitespace\n', '        return (\n', '        _spender == owner ||\n', '        getApproved(_tokenId) == _spender ||\n', '        isApprovedForAll(owner, _spender)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to mint a new token\n', '     * @dev Reverts if the given token ID already exists\n', '     * @param _to The address that will own the minted token\n', '     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '     */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        require(_to != address(0));\n', '        addTokenTo(_to, _tokenId);\n', '        Transfer(address(0), _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to burn a specific token\n', '     * @dev Reverts if the token does not exist\n', '     * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '     */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        clearApproval(_owner, _tokenId);\n', '        removeTokenFrom(_owner, _tokenId);\n', '        Transfer(_owner, address(0), _tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to clear current approval of a given token ID\n', '     * @dev Reverts if the given address is not indeed the owner of the token\n', '     * @param _owner owner of the token\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '     */\n', '    function clearApproval(address _owner, uint256 _tokenId) internal {\n', '        require(ownerOf(_tokenId) == _owner);\n', '        if (tokenApprovals[_tokenId] != address(0)) {\n', '            tokenApprovals[_tokenId] = address(0);\n', '            Approval(_owner, address(0), _tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to add a token ID to the list of a given address\n', '     * @param _to address representing the new owner of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '     */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        require(tokenOwner[_tokenId] == address(0));\n', '        tokenOwner[_tokenId] = _to;\n', '        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to remove a token ID from the list of a given address\n', '     * @param _from address representing the previous owner of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '     */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        require(ownerOf(_tokenId) == _from);\n', '        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '        tokenOwner[_tokenId] = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to invoke `onERC721Received` on a target address\n', '     * @dev The call is not executed if the target address is not a contract\n', '     * @param _from address representing the previous owner of the given token ID\n', '     * @param _to target address that will receive the tokens\n', '     * @param _tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return whether the call correctly returned the expected magic value\n', '     */\n', '    function checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data) internal returns (bool)\n', '    {\n', '        if (!_to.isContract()) {\n', '            return true;\n', '        }\n', '        bytes4 retval = ERC721Receiver(_to).onERC721Received(\n', '        _from, _tokenId, _data);\n', '        return (retval == ERC721_RECEIVED);\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '    // Token name\n', '    string internal name_;\n', '\n', '    // Token symbol\n', '    string internal symbol_;\n', '\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping(address => uint256[]) internal ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '    // Array with all token ids, used for enumeration\n', '    uint256[] internal allTokens;\n', '\n', '    // Mapping from token id to position in the allTokens array\n', '    mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '    // Optional mapping for token URIs\n', '    mapping(uint256 => string) internal tokenURIs;\n', '\n', '    /**\n', '     * @dev Constructor function\n', '     */\n', '    function ERC721Token(string _name, string _symbol) public {\n', '        name_ = _name;\n', '        symbol_ = _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token name\n', '     * @return string representing the token name\n', '     */\n', '    function name() public view returns (string) {\n', '        return name_;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token symbol\n', '     * @return string representing the token symbol\n', '     */\n', '    function symbol() public view returns (string) {\n', '        return symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an URI for a given token ID\n', '     * @dev Throws if the token ID does not exist. May return an empty string.\n', '     * @param _tokenId uint256 ID of the token to query\n', '     */\n', '    function tokenURI(uint256 _tokenId) public view returns (string) {\n', '        require(exists(_tokenId));\n', '        return tokenURIs[_tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '     * @param _owner address owning the tokens list to be accessed\n', '     * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '     */\n', '    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256)\n', '    {\n', '        require(_index < balanceOf(_owner));\n', '        return ownedTokens[_owner][_index];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets list of tokens of the requested owner\n', '     * @param _owner address owning the tokens list to be accessed\n', '     * @return uint256[] token IDs\n', '     */\n', '    function tokensOfOwner(address _owner) public view returns (uint256[])\n', '    {\n', '        return ownedTokens[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the total amount of tokens stored by the contract\n', '     * @return uint256 representing the total amount of tokens\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return allTokens.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the token ID at a given index of all the tokens in this contract\n', '     * @dev Reverts if the index is greater or equal to the total number of tokens\n', '     * @param _index uint256 representing the index to be accessed of the tokens list\n', '     * @return uint256 token ID at the given index of the tokens list\n', '     */\n', '    function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '        require(_index < totalSupply());\n', '        return allTokens[_index];\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to set the token URI for a given token\n', '     * @dev Reverts if the token ID does not exist\n', '     * @param _tokenId uint256 ID of the token to set its URI\n', '     * @param _uri string URI to assign\n', '     */\n', '    function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '        require(exists(_tokenId));\n', '        tokenURIs[_tokenId] = _uri;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to add a token ID to the list of a given address\n', '     * @param _to address representing the new owner of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '     */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        super.addTokenTo(_to, _tokenId);\n', '        uint256 length = ownedTokens[_to].length;\n', '        ownedTokens[_to].push(_tokenId);\n', '        ownedTokensIndex[_tokenId] = length;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to remove a token ID from the list of a given address\n', '     * @param _from address representing the previous owner of the given token ID\n', '     * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '     */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        super.removeTokenFrom(_from, _tokenId);\n', '\n', '        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '        ownedTokens[_from][tokenIndex] = lastToken;\n', '        ownedTokens[_from][lastTokenIndex] = 0;\n', '        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '        ownedTokens[_from].length--;\n', '        ownedTokensIndex[_tokenId] = 0;\n', '        ownedTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to mint a new token\n', '     * @dev Reverts if the given token ID already exists\n', '     * @param _to address the beneficiary that will own the minted token\n', '     * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '     */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        super._mint(_to, _tokenId);\n', '\n', '        allTokensIndex[_tokenId] = allTokens.length;\n', '        allTokens.push(_tokenId);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev Internal function to burn a specific token\n', '     * @dev Reverts if the token does not exist\n', '     * @param _owner owner of the token to burn\n', '     * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '     */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        super._burn(_owner, _tokenId);\n', '\n', '        // Clear metadata (if any)\n', '        if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '            delete tokenURIs[_tokenId];\n', '        }\n', '\n', '        // Reorg all tokens array\n', '        uint256 tokenIndex = allTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = allTokens.length.sub(1);\n', '        uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '        allTokens[tokenIndex] = lastToken;\n', '        allTokens[lastTokenIndex] = 0;\n', '\n', '        allTokens.length--;\n', '        allTokensIndex[_tokenId] = 0;\n', '        allTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is ERC721BasicToken {\n', '    function burn(uint256 _tokenId) public {\n', '        _burn(msg.sender, _tokenId);\n', '    }\n', '}\n', '\n', '\n', 'contract MintableToken is ERC721Token, Ownable {\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '    \n', '    function mint(address _to, uint256 _tokenId) public onlyOwner canMint {\n', '        _mint(_to, _tokenId);\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }    \n', '}\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '    uint256 public cap;\n', '\n', '    function CappedToken(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _tokenId id of the new token\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _tokenId) onlyOwner canMint public {\n', '        require(totalSupply().add(1) <= cap);\n', '\n', '        return super.mint(_to, _tokenId);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is ERC721BasicToken, Pausable {\n', '    function approve(address _to, uint256 _tokenId) public whenNotPaused {\n', '        return super.approve(_to, _tokenId);\n', '    }\n', '\n', '    function setApprovalForAll(address _to, bool _approved) public whenNotPaused {\n', '        return super.setApprovalForAll(_to, _approved);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused canTransfer(_tokenId) {\n', '        return super.transferFrom(_from, _to, _tokenId);\n', '    }\n', '\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused canTransfer(_tokenId) {\n', '        return super.safeTransferFrom(_from, _to, _tokenId);\n', '    }\n', '\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public whenNotPaused canTransfer(_tokenId) {\n', '        return super.safeTransferFrom(_from, _to, _tokenId, _data);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title PausableBurnable token\n', ' * @dev BurnableToken allowing to burn only when is not paused.\n', ' **/\n', 'contract BurnablePausableToken is PausableToken, BurnableToken {\n', '    function burn(uint256 _tokenId) public whenNotPaused {\n', '        super.burn(_tokenId);\n', '    }\n', '}\n', '\n', '\n', 'contract Token is ERC721Token , PausableToken {\n', '    function Token()\n', '        public\n', '        payable\n', "        ERC721Token('CryptoPussies', 'CP')\n", '         \n', '    { \n', '        \n', '        \n', '    }\n', '\n', '    function setTokenURI(uint256 _tokenId, string _uri) external onlyOwnerOf(_tokenId) {\n', '        super._setTokenURI(_tokenId, _uri);\n', '    }\n', '}']
