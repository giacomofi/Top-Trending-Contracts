['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '}\n', '\n', 'contract AccessControl {\n', '  /// @dev Emited when contract is upgraded\n', '  event ContractUpgrade(address newContract);\n', '\n', '  address public owner;\n', '\n', '  // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev The AccessControl constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function AccessControl() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '  /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /// @dev Modifier to allow actions only when the contract IS paused\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /// @dev Called by owner role to pause the contract. Used only when\n', '  ///  a bug or exploit is detected and we need to limit damage.\n', '  function pause() external onlyOwner whenNotPaused {\n', '    paused = true;\n', '  }\n', '\n', '  /// @dev Unpauses the smart contract. Can only be called owner.\n', '  /// @notice This is public rather than external so it can be called by\n', '  ///  derived contracts.\n', '  function unpause() public onlyOwner whenPaused {\n', '    // can&#39;t unpause if contract was upgraded\n', '    paused = false;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is AccessControl, ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract LockableToken is StandardToken, ReentrancyGuard {\n', '  struct LockedBalance {\n', '    address owner;\n', '    uint256 value;\n', '    uint256 releaseTime;\n', '  }\n', '\n', '  mapping (uint => LockedBalance) public lockedBalances;\n', '  uint public lockedBalanceCount;\n', '\n', '  event TransferLockedToken(address indexed from, address indexed to, uint256 value, uint256 releaseTime);\n', '  event ReleaseLockedBalance(address indexed owner, uint256 value, uint256 releaseTime);\n', '\n', '  /**\n', '  * @dev transfer and lock token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  * @param _releaseTime The time to be locked.\n', '  */\n', '  function transferLockedToken(address _to, uint256 _value, uint256 _releaseTime) public whenNotPaused nonReentrant returns (bool) {\n', '    require(_releaseTime > now);\n', '    //require(_releaseTime.sub(1 years) < now);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    lockedBalances[lockedBalanceCount] = LockedBalance({owner: _to, value: _value, releaseTime: _releaseTime});\n', '    lockedBalanceCount++;\n', '    emit TransferLockedToken(msg.sender, _to, _value, _releaseTime);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the locked balance of the specified address.\n', '  * @param _owner The address to query the the locked balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function lockedBalanceOf(address _owner) public constant returns (uint256 value) {\n', '    for (uint i = 0; i < lockedBalanceCount; i++) {\n', '      LockedBalance storage lockedBalance = lockedBalances[i];\n', '      if (_owner == lockedBalance.owner) {\n', '        value = value.add(lockedBalance.value);\n', '      }\n', '    }\n', '    return value;\n', '  }\n', '\n', '  /**\n', '  * @dev Release the locked balance if its releaseTime arrived.\n', '  * @return An uint256 representing the amount.\n', '  */\n', '  function releaseLockedBalance() public whenNotPaused returns (uint256 releaseAmount) {\n', '    uint index = 0;\n', '    while (index < lockedBalanceCount) {\n', '      if (now >= lockedBalances[index].releaseTime) {\n', '        releaseAmount += lockedBalances[index].value;\n', '        unlockBalanceByIndex(index);\n', '      } else {\n', '        index++;\n', '      }\n', '    }\n', '    return releaseAmount;\n', '  }\n', '\n', '  function unlockBalanceByIndex(uint index) internal {\n', '    LockedBalance storage lockedBalance = lockedBalances[index];\n', '    balances[lockedBalance.owner] = balances[lockedBalance.owner].add(lockedBalance.value);\n', '    emit ReleaseLockedBalance(lockedBalance.owner, lockedBalance.value, lockedBalance.releaseTime);\n', '    lockedBalances[index] = lockedBalances[lockedBalanceCount - 1];\n', '    delete lockedBalances[lockedBalanceCount - 1];\n', '    lockedBalanceCount--;\n', '  }\n', '}\n', '\n', 'contract ReleaseableToken is LockableToken {\n', '  uint256 public createTime;\n', '  uint256 public nextReleaseTime;\n', '  uint256 public nextReleaseAmount;\n', '  uint256 standardDecimals = 10000;\n', '  uint256 public totalSupply;\n', '  uint256 public releasedSupply;\n', '\n', '  function ReleaseableToken(uint256 initialSupply, uint256 initReleasedSupply, uint256 firstReleaseAmount) public {\n', '    createTime = now;\n', '    nextReleaseTime = now;\n', '    nextReleaseAmount = firstReleaseAmount;\n', '    totalSupply = standardDecimals.mul(initialSupply);\n', '    releasedSupply = standardDecimals.mul(initReleasedSupply);\n', '    balances[msg.sender] = standardDecimals.mul(initReleasedSupply);\n', '  }\n', '\n', '  /**\n', '  * @dev Release a part of the frozen token(totalSupply - releasedSupply) every 26 weeks.\n', '  * @return An uint256 representing the amount.\n', '  */\n', '  function release() public whenNotPaused returns(uint256 _releaseAmount) {\n', '    require(nextReleaseTime <= now);\n', '\n', '    uint256 releaseAmount = 0;\n', '    uint256 remainderAmount = totalSupply.sub(releasedSupply);\n', '    if (remainderAmount > 0) {\n', '      releaseAmount = standardDecimals.mul(nextReleaseAmount);\n', '      if (releaseAmount > remainderAmount)\n', '        releaseAmount = remainderAmount;\n', '      releasedSupply = releasedSupply.add(releaseAmount);\n', '      balances[owner] = balances[owner].add(releaseAmount);\n', '      emit Release(msg.sender, releaseAmount, nextReleaseTime);\n', '      nextReleaseTime = nextReleaseTime.add(26 * 1 weeks);\n', '      nextReleaseAmount = nextReleaseAmount.sub(nextReleaseAmount.div(4));\n', '    }\n', '    return releaseAmount;\n', '  }\n', '\n', '  event Release(address receiver, uint256 amount, uint256 releaseTime);\n', '}\n', '\n', 'contract N2Contract is ReleaseableToken {\n', '  string public name = &#39;N2Chain&#39;;\n', '  string public symbol = &#39;N2C&#39;;\n', '  uint8 public decimals = 4;\n', '\n', '  // Set in case the core contract is broken and an upgrade is required\n', '  address public newContractAddress;\n', '\n', '  function N2Contract() public ReleaseableToken(1000000000, 200000000, 200000000) {}\n', '\n', '  /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n', '  ///  breaking bug. This method does nothing but keep track of the new contract and\n', '  ///  emit a message indicating that the new address is set. It&#39;s up to clients of this\n', '  ///  contract to update to the new contract address in that case. (This contract will\n', '  ///  be paused indefinitely if such an upgrade takes place.)\n', '  /// @param _v2Address new address\n', '  function setNewAddress(address _v2Address) external onlyOwner whenPaused {\n', '    newContractAddress = _v2Address;\n', '    emit ContractUpgrade(_v2Address);\n', '  }\n', '\n', '  /// @dev Override unpause so it requires all external contract addresses\n', '  ///  to be set before contract can be unpaused. Also, we can&#39;t have\n', '  ///  newContractAddress set either, because then the contract was upgraded.\n', '  /// @notice This is public rather than external so we can call super.unpause\n', '  ///  without using an expensive CALL.\n', '  function unpause() public onlyOwner whenPaused {\n', '    require(newContractAddress == address(0));\n', '\n', '    // Actually unpause the contract.\n', '    super.unpause();\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '}\n', '\n', 'contract AccessControl {\n', '  /// @dev Emited when contract is upgraded\n', '  event ContractUpgrade(address newContract);\n', '\n', '  address public owner;\n', '\n', '  // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev The AccessControl constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function AccessControl() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '  /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /// @dev Modifier to allow actions only when the contract IS paused\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /// @dev Called by owner role to pause the contract. Used only when\n', '  ///  a bug or exploit is detected and we need to limit damage.\n', '  function pause() external onlyOwner whenNotPaused {\n', '    paused = true;\n', '  }\n', '\n', '  /// @dev Unpauses the smart contract. Can only be called owner.\n', '  /// @notice This is public rather than external so it can be called by\n', '  ///  derived contracts.\n', '  function unpause() public onlyOwner whenPaused {\n', "    // can't unpause if contract was upgraded\n", '    paused = false;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is AccessControl, ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract LockableToken is StandardToken, ReentrancyGuard {\n', '  struct LockedBalance {\n', '    address owner;\n', '    uint256 value;\n', '    uint256 releaseTime;\n', '  }\n', '\n', '  mapping (uint => LockedBalance) public lockedBalances;\n', '  uint public lockedBalanceCount;\n', '\n', '  event TransferLockedToken(address indexed from, address indexed to, uint256 value, uint256 releaseTime);\n', '  event ReleaseLockedBalance(address indexed owner, uint256 value, uint256 releaseTime);\n', '\n', '  /**\n', '  * @dev transfer and lock token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  * @param _releaseTime The time to be locked.\n', '  */\n', '  function transferLockedToken(address _to, uint256 _value, uint256 _releaseTime) public whenNotPaused nonReentrant returns (bool) {\n', '    require(_releaseTime > now);\n', '    //require(_releaseTime.sub(1 years) < now);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    lockedBalances[lockedBalanceCount] = LockedBalance({owner: _to, value: _value, releaseTime: _releaseTime});\n', '    lockedBalanceCount++;\n', '    emit TransferLockedToken(msg.sender, _to, _value, _releaseTime);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the locked balance of the specified address.\n', '  * @param _owner The address to query the the locked balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function lockedBalanceOf(address _owner) public constant returns (uint256 value) {\n', '    for (uint i = 0; i < lockedBalanceCount; i++) {\n', '      LockedBalance storage lockedBalance = lockedBalances[i];\n', '      if (_owner == lockedBalance.owner) {\n', '        value = value.add(lockedBalance.value);\n', '      }\n', '    }\n', '    return value;\n', '  }\n', '\n', '  /**\n', '  * @dev Release the locked balance if its releaseTime arrived.\n', '  * @return An uint256 representing the amount.\n', '  */\n', '  function releaseLockedBalance() public whenNotPaused returns (uint256 releaseAmount) {\n', '    uint index = 0;\n', '    while (index < lockedBalanceCount) {\n', '      if (now >= lockedBalances[index].releaseTime) {\n', '        releaseAmount += lockedBalances[index].value;\n', '        unlockBalanceByIndex(index);\n', '      } else {\n', '        index++;\n', '      }\n', '    }\n', '    return releaseAmount;\n', '  }\n', '\n', '  function unlockBalanceByIndex(uint index) internal {\n', '    LockedBalance storage lockedBalance = lockedBalances[index];\n', '    balances[lockedBalance.owner] = balances[lockedBalance.owner].add(lockedBalance.value);\n', '    emit ReleaseLockedBalance(lockedBalance.owner, lockedBalance.value, lockedBalance.releaseTime);\n', '    lockedBalances[index] = lockedBalances[lockedBalanceCount - 1];\n', '    delete lockedBalances[lockedBalanceCount - 1];\n', '    lockedBalanceCount--;\n', '  }\n', '}\n', '\n', 'contract ReleaseableToken is LockableToken {\n', '  uint256 public createTime;\n', '  uint256 public nextReleaseTime;\n', '  uint256 public nextReleaseAmount;\n', '  uint256 standardDecimals = 10000;\n', '  uint256 public totalSupply;\n', '  uint256 public releasedSupply;\n', '\n', '  function ReleaseableToken(uint256 initialSupply, uint256 initReleasedSupply, uint256 firstReleaseAmount) public {\n', '    createTime = now;\n', '    nextReleaseTime = now;\n', '    nextReleaseAmount = firstReleaseAmount;\n', '    totalSupply = standardDecimals.mul(initialSupply);\n', '    releasedSupply = standardDecimals.mul(initReleasedSupply);\n', '    balances[msg.sender] = standardDecimals.mul(initReleasedSupply);\n', '  }\n', '\n', '  /**\n', '  * @dev Release a part of the frozen token(totalSupply - releasedSupply) every 26 weeks.\n', '  * @return An uint256 representing the amount.\n', '  */\n', '  function release() public whenNotPaused returns(uint256 _releaseAmount) {\n', '    require(nextReleaseTime <= now);\n', '\n', '    uint256 releaseAmount = 0;\n', '    uint256 remainderAmount = totalSupply.sub(releasedSupply);\n', '    if (remainderAmount > 0) {\n', '      releaseAmount = standardDecimals.mul(nextReleaseAmount);\n', '      if (releaseAmount > remainderAmount)\n', '        releaseAmount = remainderAmount;\n', '      releasedSupply = releasedSupply.add(releaseAmount);\n', '      balances[owner] = balances[owner].add(releaseAmount);\n', '      emit Release(msg.sender, releaseAmount, nextReleaseTime);\n', '      nextReleaseTime = nextReleaseTime.add(26 * 1 weeks);\n', '      nextReleaseAmount = nextReleaseAmount.sub(nextReleaseAmount.div(4));\n', '    }\n', '    return releaseAmount;\n', '  }\n', '\n', '  event Release(address receiver, uint256 amount, uint256 releaseTime);\n', '}\n', '\n', 'contract N2Contract is ReleaseableToken {\n', "  string public name = 'N2Chain';\n", "  string public symbol = 'N2C';\n", '  uint8 public decimals = 4;\n', '\n', '  // Set in case the core contract is broken and an upgrade is required\n', '  address public newContractAddress;\n', '\n', '  function N2Contract() public ReleaseableToken(1000000000, 200000000, 200000000) {}\n', '\n', '  /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n', '  ///  breaking bug. This method does nothing but keep track of the new contract and\n', "  ///  emit a message indicating that the new address is set. It's up to clients of this\n", '  ///  contract to update to the new contract address in that case. (This contract will\n', '  ///  be paused indefinitely if such an upgrade takes place.)\n', '  /// @param _v2Address new address\n', '  function setNewAddress(address _v2Address) external onlyOwner whenPaused {\n', '    newContractAddress = _v2Address;\n', '    emit ContractUpgrade(_v2Address);\n', '  }\n', '\n', '  /// @dev Override unpause so it requires all external contract addresses\n', "  ///  to be set before contract can be unpaused. Also, we can't have\n", '  ///  newContractAddress set either, because then the contract was upgraded.\n', '  /// @notice This is public rather than external so we can call super.unpause\n', '  ///  without using an expensive CALL.\n', '  function unpause() public onlyOwner whenPaused {\n', '    require(newContractAddress == address(0));\n', '\n', '    // Actually unpause the contract.\n', '    super.unpause();\n', '  }\n', '}']
