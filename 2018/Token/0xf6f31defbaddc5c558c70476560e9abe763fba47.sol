['pragma solidity 0.4.23;\n', '/**\n', '* @notice IAD Wallet Token Contract\n', '* @dev ERC-20 Standard Compliant Token handler\n', '*/\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '\n', '    /**\n', '    * @dev Contract constructor\n', '    * define initial administrator\n', '    */\n', '    constructor() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != 0);\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '\n', '}\n', '\n', '/**\n', '* @title ERC20 interface\n', '* @dev see https://github.com/ethereum/EIPs/issues/20\n', '*/\n', 'contract ERC20 {\n', '    function name() public view returns (string);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public;\n', '    function allowance(address owner, address spender) public view;\n', '    function transferFrom(address from, address to, uint256 value) public;\n', '    function approve(address spender, uint256 value) public;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', '* @title Token wallet\n', '* @dev ERC20 Token compliant\n', '*/\n', 'contract TokenWallet is admined {\n', '\n', '    /**\n', '    * @notice token contructor.\n', '    */\n', '    constructor() public {    \n', '    }\n', '\n', '    event LogTokenAddedToDirectory(uint256 _index, string _name);\n', '    event LogTokenTransfer(address _token, address _to, uint256 _amount);\n', '    event LogTokenAllowanceApprove(address _token, address _to, uint256 _value);\n', '\n', '    ERC20[] public tokenDirectory;\n', '    string[] public tokenDirectoryName;\n', '\n', '    /***************************\n', '    * Token Directory functions*\n', '    ****************************/\n', '\n', '    function addTokenToDirectory(ERC20 _tokenContractAddress) onlyAdmin public returns (uint256){\n', '        require(_tokenContractAddress != address(0));\n', '        require(_tokenContractAddress.totalSupply() !=0 );\n', '        uint256 index = tokenDirectory.push(_tokenContractAddress) - 1;\n', '        tokenDirectoryName.push(_tokenContractAddress.name());\n', '        emit LogTokenAddedToDirectory(index,_tokenContractAddress.name());\n', '        return index;\n', '\n', '    }\n', '    \n', '    function replaceDirectoryToken(ERC20 _tokenContractAddress, uint256 _directoryIndex) onlyAdmin public returns (uint256){\n', '        require(_tokenContractAddress != address(0));\n', '        require(_tokenContractAddress.totalSupply() !=0 );\n', '        tokenDirectory[_directoryIndex] = _tokenContractAddress;\n', '        tokenDirectoryName[_directoryIndex]= _tokenContractAddress.name();\n', '        emit LogTokenAddedToDirectory(_directoryIndex,_tokenContractAddress.name());\n', '    }\n', '\n', '    function balanceOfDirectoryToken(uint256 _index) public view returns (uint256) {\n', '        ERC20 token = tokenDirectory[_index];\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function transferDirectoryToken(uint256 _index, address _to, uint256 _amount) public onlyAdmin{\n', '        ERC20 token = tokenDirectory[_index];\n', '        //require(token.transfer(_to,_amount));\n', '        token.transfer(_to,_amount);\n', '        emit LogTokenTransfer(token,_to,_amount);\n', '    }\n', '\n', '    function batchTransferDirectoryToken(uint256 _index,address[] _target,uint256[] _amount) onlyAdmin public {\n', '        require(_target.length >= _amount.length);\n', '        uint256 length = _target.length;\n', '        ERC20 token = tokenDirectory[_index];\n', '\n', '        for (uint i=0; i<length; i++) { //It moves over the array\n', '            token.transfer(_target[i],_amount[i]);\n', '            emit LogTokenTransfer(token,_target[i],_amount[i]);       \n', '        }\n', '    }\n', '\n', '    function giveDirectoryTokenAllowance(uint256 _index, address _spender, uint256 _value) onlyAdmin public{\n', '        ERC20 token = tokenDirectory[_index];\n', '        token.approve(_spender, _value);\n', '        emit LogTokenAllowanceApprove(token,_spender, _value);\n', '    }\n', '\n', '    /*************************\n', '    * General Token functions*\n', '    **************************/\n', '\n', '    function balanceOfToken (ERC20 _tokenContractAddress) public view returns (uint256) {\n', '        ERC20 token = _tokenContractAddress;\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    function transferToken(ERC20 _tokenContractAddress, address _to, uint256 _amount) public onlyAdmin{\n', '        ERC20 token = _tokenContractAddress;\n', '        //require(token.transfer(_to,_amount));\n', '        token.transfer(_to,_amount);\n', '        emit LogTokenTransfer(token,_to,_amount);\n', '    }\n', '\n', '    function batchTransferToken(ERC20 _tokenContractAddress,address[] _target,uint256[] _amount) onlyAdmin public {\n', '        require(_target.length >= _amount.length);\n', '        uint256 length = _target.length;\n', '        ERC20 token = _tokenContractAddress;\n', '\n', '        for (uint i=0; i<length; i++) { //It moves over the array\n', '            token.transfer(_target[i],_amount[i]);\n', '            emit LogTokenTransfer(token,_target[i],_amount[i]);       \n', '        }\n', '    }\n', '\n', '    function giveTokenAllowance(ERC20 _tokenContractAddress, address _spender, uint256 _value) onlyAdmin public{\n', '        ERC20 token = _tokenContractAddress;\n', '        token.approve(_spender, _value);\n', '        emit LogTokenAllowanceApprove(token,_spender, _value);\n', '    }\n', '\n', '\n', '    /**\n', '    * @notice this contract will revert on direct non-function calls, also it&#39;s not payable\n', '    * @dev Function to handle callback calls to contract\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '}']
['pragma solidity 0.4.23;\n', '/**\n', '* @notice IAD Wallet Token Contract\n', '* @dev ERC-20 Standard Compliant Token handler\n', '*/\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '\n', '    /**\n', '    * @dev Contract constructor\n', '    * define initial administrator\n', '    */\n', '    constructor() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != 0);\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '\n', '}\n', '\n', '/**\n', '* @title ERC20 interface\n', '* @dev see https://github.com/ethereum/EIPs/issues/20\n', '*/\n', 'contract ERC20 {\n', '    function name() public view returns (string);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public;\n', '    function allowance(address owner, address spender) public view;\n', '    function transferFrom(address from, address to, uint256 value) public;\n', '    function approve(address spender, uint256 value) public;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', '* @title Token wallet\n', '* @dev ERC20 Token compliant\n', '*/\n', 'contract TokenWallet is admined {\n', '\n', '    /**\n', '    * @notice token contructor.\n', '    */\n', '    constructor() public {    \n', '    }\n', '\n', '    event LogTokenAddedToDirectory(uint256 _index, string _name);\n', '    event LogTokenTransfer(address _token, address _to, uint256 _amount);\n', '    event LogTokenAllowanceApprove(address _token, address _to, uint256 _value);\n', '\n', '    ERC20[] public tokenDirectory;\n', '    string[] public tokenDirectoryName;\n', '\n', '    /***************************\n', '    * Token Directory functions*\n', '    ****************************/\n', '\n', '    function addTokenToDirectory(ERC20 _tokenContractAddress) onlyAdmin public returns (uint256){\n', '        require(_tokenContractAddress != address(0));\n', '        require(_tokenContractAddress.totalSupply() !=0 );\n', '        uint256 index = tokenDirectory.push(_tokenContractAddress) - 1;\n', '        tokenDirectoryName.push(_tokenContractAddress.name());\n', '        emit LogTokenAddedToDirectory(index,_tokenContractAddress.name());\n', '        return index;\n', '\n', '    }\n', '    \n', '    function replaceDirectoryToken(ERC20 _tokenContractAddress, uint256 _directoryIndex) onlyAdmin public returns (uint256){\n', '        require(_tokenContractAddress != address(0));\n', '        require(_tokenContractAddress.totalSupply() !=0 );\n', '        tokenDirectory[_directoryIndex] = _tokenContractAddress;\n', '        tokenDirectoryName[_directoryIndex]= _tokenContractAddress.name();\n', '        emit LogTokenAddedToDirectory(_directoryIndex,_tokenContractAddress.name());\n', '    }\n', '\n', '    function balanceOfDirectoryToken(uint256 _index) public view returns (uint256) {\n', '        ERC20 token = tokenDirectory[_index];\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function transferDirectoryToken(uint256 _index, address _to, uint256 _amount) public onlyAdmin{\n', '        ERC20 token = tokenDirectory[_index];\n', '        //require(token.transfer(_to,_amount));\n', '        token.transfer(_to,_amount);\n', '        emit LogTokenTransfer(token,_to,_amount);\n', '    }\n', '\n', '    function batchTransferDirectoryToken(uint256 _index,address[] _target,uint256[] _amount) onlyAdmin public {\n', '        require(_target.length >= _amount.length);\n', '        uint256 length = _target.length;\n', '        ERC20 token = tokenDirectory[_index];\n', '\n', '        for (uint i=0; i<length; i++) { //It moves over the array\n', '            token.transfer(_target[i],_amount[i]);\n', '            emit LogTokenTransfer(token,_target[i],_amount[i]);       \n', '        }\n', '    }\n', '\n', '    function giveDirectoryTokenAllowance(uint256 _index, address _spender, uint256 _value) onlyAdmin public{\n', '        ERC20 token = tokenDirectory[_index];\n', '        token.approve(_spender, _value);\n', '        emit LogTokenAllowanceApprove(token,_spender, _value);\n', '    }\n', '\n', '    /*************************\n', '    * General Token functions*\n', '    **************************/\n', '\n', '    function balanceOfToken (ERC20 _tokenContractAddress) public view returns (uint256) {\n', '        ERC20 token = _tokenContractAddress;\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    function transferToken(ERC20 _tokenContractAddress, address _to, uint256 _amount) public onlyAdmin{\n', '        ERC20 token = _tokenContractAddress;\n', '        //require(token.transfer(_to,_amount));\n', '        token.transfer(_to,_amount);\n', '        emit LogTokenTransfer(token,_to,_amount);\n', '    }\n', '\n', '    function batchTransferToken(ERC20 _tokenContractAddress,address[] _target,uint256[] _amount) onlyAdmin public {\n', '        require(_target.length >= _amount.length);\n', '        uint256 length = _target.length;\n', '        ERC20 token = _tokenContractAddress;\n', '\n', '        for (uint i=0; i<length; i++) { //It moves over the array\n', '            token.transfer(_target[i],_amount[i]);\n', '            emit LogTokenTransfer(token,_target[i],_amount[i]);       \n', '        }\n', '    }\n', '\n', '    function giveTokenAllowance(ERC20 _tokenContractAddress, address _spender, uint256 _value) onlyAdmin public{\n', '        ERC20 token = _tokenContractAddress;\n', '        token.approve(_spender, _value);\n', '        emit LogTokenAllowanceApprove(token,_spender, _value);\n', '    }\n', '\n', '\n', '    /**\n', "    * @notice this contract will revert on direct non-function calls, also it's not payable\n", '    * @dev Function to handle callback calls to contract\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '}']
