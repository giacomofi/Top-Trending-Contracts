['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor () public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /*************************************************/\n', '    mapping(address=>uint256) public indexes;\n', '    mapping(uint256=>address) public addresses;\n', '    uint256 public lastIndex = 0;\n', '  /*************************************************/\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    if(_value > 0){\n', '        if(balances[msg.sender] == 0){\n', '            // remove the msg.sender from list of holders if their balance is 0\n', '            addresses[indexes[msg.sender]] = addresses[lastIndex];\n', '            indexes[addresses[lastIndex]] = indexes[msg.sender];\n', '            indexes[msg.sender] = 0;\n', '            delete addresses[lastIndex];\n', '            lastIndex--;\n', '        }\n', '        if(indexes[_to]==0){\n', '            // add the receiver to the list of holders if they aren&#39;t already there\n', '            lastIndex++;\n', '            addresses[lastIndex] = _to;\n', '            indexes[_to] = lastIndex;\n', '        }\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    \n', '    // The following logic is to keep track of token holders\n', '    // No need to change *anything* in the following logic\n', '    if(_value > 0){\n', '      //if _from has no tokens left\n', '        if(balances[_from] == 0){\n', '          // remove _from from token holders list\n', '            addresses[indexes[_from]] = addresses[lastIndex];\n', '            indexes[addresses[lastIndex]] = indexes[_from];\n', '            indexes[_from] = 0;\n', '            delete addresses[lastIndex];\n', '            lastIndex--;\n', '        }\n', '        // if _to wasn&#39;t in token holders list\n', '        if(indexes[_to]==0){\n', '          // add _to to the list of token holders\n', '            lastIndex++;\n', '            addresses[lastIndex] = _to;\n', '            indexes[_to] = lastIndex;\n', '        }\n', '    }\n', '    \n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '        \n', '        // we remove the burner from the list of token \n', '        // holders if the burner now holds 0 tokens\n', '        if(balances[burner] == 0){\n', '            addresses[indexes[burner]] = addresses[lastIndex];\n', '            indexes[addresses[lastIndex]] = indexes[burner];\n', '            indexes[burner] = 0;\n', '            delete addresses[lastIndex];\n', '            lastIndex--;\n', '        }\n', '        \n', '    }\n', '}\n', '\n', 'contract BIKOIN is BurnableToken, Ownable {\n', '\n', '    string public constant name = "BIKOIN";\n', '    string public constant symbol = "BKN";\n', '    uint public constant decimals = 18;\n', '    uint256 public constant initialSupply = 1000000000 * (10 ** uint256(decimals));\n', '\n', '    uint public totalWeiToBeDistributed = 0;\n', '\n', '    // Constructor\n', '    constructor () public {\n', '        totalSupply = initialSupply;\n', '        balances[msg.sender] = initialSupply; // Send all tokens to owner\n', '        /*****************************************/\n', '        // add msg.sender to the list of token holders\n', '        addresses[1] = msg.sender;\n', '        indexes[msg.sender] = 1;\n', '        lastIndex = 1;\n', '        /*****************************************/\n', '        emit Transfer(0x0, msg.sender, initialSupply);\n', '    }\n', '\n', '    function getAddresses() public view returns (address[]){\n', '        address[] memory addrs = new address[](lastIndex);\n', '        for(uint i = 0; i < lastIndex; i++){\n', '            addrs[i] = addresses[i+1];\n', '        }\n', '        return addrs;\n', '    }\n', '\n', '    function setTotalWeiToBeDistributed(uint _totalWei) public onlyOwner {\n', '      totalWeiToBeDistributed = _totalWei;\n', '    }\n', '\n', '    function distributeEth(uint startIndex, uint endIndex) public onlyOwner {\n', '      for(uint i = startIndex; i < endIndex; ++i){\n', '        // counting starts at index 1 instead of 0,\n', '        // pls don&#39;t worry if you can&#39;t figure out why,\n', '        // just don&#39;t change it to start from 0\n', '        address holder = addresses[i+1]; \n', '        // no need for `SafeMath.div()` here\n', '        uint reward = (balances[holder].mul(totalWeiToBeDistributed))/(totalSupply);\n', '        holder.transfer(reward);\n', '      }\n', '    }\n', '\n', '    function withdrawEth() public onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function () public payable {}\n', '}']