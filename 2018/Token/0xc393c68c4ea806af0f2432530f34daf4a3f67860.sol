['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n', ' */\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Stoppable\n', ' * @dev Base contract which allows children to implement final irreversible stop mechanism.\n', ' */\n', 'contract Stoppable is Pausable {\n', '  event Stop();\n', '\n', '  bool public stopped = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not stopped.\n', '   */\n', '  modifier whenNotStopped() {\n', '    require(!stopped);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is stopped.\n', '   */\n', '  modifier whenStopped() {\n', '    require(stopped);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function stop() public onlyOwner whenNotStopped {\n', '    stopped = true;\n', '    emit Stop();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title e2pAir Escrow Contract\n', ' * @dev Contract sends tokens from airdropper&#39;s account to receiver on claim.\n', ' * \n', ' * When deploying contract, airdroper provides airdrop parametrs: token, amount \n', ' * of tokens and amount of eth should be claimed per link and  airdrop transit \n', ' * address and deposits ether needed for the airdrop.\n', ' * \n', ' * Airdrop transit address is used to verify that links are signed by airdropper. \n', ' * \n', ' * Airdropper generates claim links. Each link contains a private key \n', ' * signed by the airdrop transit private key. The link private key can be used \n', ' * once to sign receiver&#39;s address. Receiver provides signature\n', ' * to the Relayer Server, which calls smart contract to withdraw tokens. \n', ' * \n', ' * On claim smart contract verifies, that receiver provided address signed \n', ' * by a link private key. \n', ' * If everything is correct smart contract sends tokens and ether to receiver.\n', ' * \n', ' * Anytime airdropper can get back unclaimed ether using getEtherBack method.\n', ' * \n', ' */\n', 'contract e2pAirEscrow is Stoppable {\n', '  \n', '  address public TOKEN_ADDRESS; // token to distribute\n', '  uint public CLAIM_AMOUNT; // tokens claimed per link\n', '  uint public REFERRAL_AMOUNT; // referral reward\n', '\n', '  uint public CLAIM_AMOUNT_ETH; // ether claimed per link\n', '  address public AIRDROPPER; // airdropper address, which has tokens to distribute\n', '  address public AIRDROP_TRANSIT_ADDRESS; // special address, used on claim to verify \n', '                                          // that links signed by the airdropper\n', '  \n', '\n', '  // Mappings of transit address => true if link is used.                                                                                                                                \n', '  mapping (address => bool) usedTransitAddresses;\n', '  \n', '   /**\n', '   * @dev Contructor that sets airdrop params and receives ether needed for the \n', '   * airdrop. \n', '   * @param _tokenAddress address Token address to distribute\n', '   * @param _claimAmount uint tokens (in atomic values) claimed per link\n', '   * @param _claimAmountEth uint ether (in wei) claimed per link\n', '   * @param _airdropTransitAddress special address, used on claim to verify that links signed by airdropper\n', '   */\n', '  constructor(address _tokenAddress,\n', '              uint _claimAmount, \n', '              uint  _referralAmount, \n', '              uint _claimAmountEth,\n', '              address _airdropTransitAddress) public payable {\n', '    AIRDROPPER = msg.sender;\n', '    TOKEN_ADDRESS = _tokenAddress;\n', '    CLAIM_AMOUNT = _claimAmount;\n', '    REFERRAL_AMOUNT = _referralAmount;\n', '    CLAIM_AMOUNT_ETH = _claimAmountEth;\n', '    AIRDROP_TRANSIT_ADDRESS = _airdropTransitAddress;\n', '  }\n', '\n', '   /**\n', '   * @dev Verify that address is signed with needed private key.\n', '   * @param _transitAddress transit address assigned to transfer\n', '   * @param _addressSigned address Signed address.\n', '   * @param _v ECDSA signature parameter v.\n', '   * @param _r ECDSA signature parameters r.\n', '   * @param _s ECDSA signature parameters s.\n', '   * @return True if signature is correct.\n', '   */\n', '  function verifyLinkPrivateKey(\n', '\t\t\t   address _transitAddress,\n', '\t\t\t   address _addressSigned,\n', '\t\t\t   address _referralAddress,\n', '\t\t\t   uint8 _v,\n', '\t\t\t   bytes32 _r,\n', '\t\t\t   bytes32 _s)\n', '    public pure returns(bool success) {\n', '    bytes32 prefixedHash = keccak256("\\x19Ethereum Signed Message:\\n32", _addressSigned, _referralAddress);\n', '    address retAddr = ecrecover(prefixedHash, _v, _r, _s);\n', '    return retAddr == _transitAddress;\n', '  }\n', '  \n', '  \n', '   /**\n', '   * @dev Verify that address is signed with needed private key.\n', '   * @param _transitAddress transit address assigned to transfer\n', '   * @param _addressSigned address Signed address.\n', '   * @param _v ECDSA signature parameter v.\n', '   * @param _r ECDSA signature parameters r.\n', '   * @param _s ECDSA signature parameters s.\n', '   * @return True if signature is correct.\n', '   */\n', '  function verifyReceiverAddress(\n', '\t\t\t   address _transitAddress,\n', '\t\t\t   address _addressSigned,\n', '\t\t\t   uint8 _v,\n', '\t\t\t   bytes32 _r,\n', '\t\t\t   bytes32 _s)\n', '    public pure returns(bool success) {\n', '    bytes32 prefixedHash = keccak256("\\x19Ethereum Signed Message:\\n32", _addressSigned);\n', '    address retAddr = ecrecover(prefixedHash, _v, _r, _s);\n', '    return retAddr == _transitAddress;\n', '  }\n', '  \n', '/**\n', '   * @dev Verify that claim params are correct and the link key wasn&#39;t used before.  \n', '   * @param _recipient address to receive tokens.\n', '   * @param _transitAddress transit address provided by the airdropper\n', '   * @param _keyV ECDSA signature parameter v. Signed by the airdrop transit key.\n', '   * @param _keyR ECDSA signature parameters r. Signed by the airdrop transit key.\n', '   * @param _keyS ECDSA signature parameters s. Signed by the airdrop transit key.\n', '   * @param _recipientV ECDSA signature parameter v. Signed by the link key.\n', '   * @param _recipientR ECDSA signature parameters r. Signed by the link key.\n', '   * @param _recipientS ECDSA signature parameters s. Signed by the link key.\n', '   * @return True if claim params are correct. \n', '   */\n', '  function checkWithdrawal(\n', '            address _recipient, \n', '            address _referralAddress, \n', '\t\t    address _transitAddress,\n', '\t\t    uint8 _keyV, \n', '\t\t    bytes32 _keyR,\n', '\t\t\tbytes32 _keyS,\n', '\t\t\tuint8 _recipientV, \n', '\t\t    bytes32 _recipientR,\n', '\t\t\tbytes32 _recipientS) \n', '    public view returns(bool success) {\n', '    \n', '        // verify that link wasn&#39;t used before  \n', '        require(usedTransitAddresses[_transitAddress] == false);\n', '\n', '        // verifying that key is legit and signed by AIRDROP_TRANSIT_ADDRESS&#39;s key\n', '        require(verifyLinkPrivateKey(AIRDROP_TRANSIT_ADDRESS, _transitAddress, _referralAddress, _keyV, _keyR, _keyS));\n', '    \n', '        // verifying that recepients address signed correctly\n', '        require(verifyReceiverAddress(_transitAddress, _recipient, _recipientV, _recipientR, _recipientS));\n', '        \n', '        // verifying that there is enough ether to make transfer\n', '        require(address(this).balance >= CLAIM_AMOUNT_ETH);\n', '        \n', '        return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Withdraw tokens to receiver address if withdraw params are correct.\n', '   * @param _recipient address to receive tokens.\n', '   * @param _transitAddress transit address provided to receiver by the airdropper\n', '   * @param _keyV ECDSA signature parameter v. Signed by the airdrop transit key.\n', '   * @param _keyR ECDSA signature parameters r. Signed by the airdrop transit key.\n', '   * @param _keyS ECDSA signature parameters s. Signed by the airdrop transit key.\n', '   * @param _recipientV ECDSA signature parameter v. Signed by the link key.\n', '   * @param _recipientR ECDSA signature parameters r. Signed by the link key.\n', '   * @param _recipientS ECDSA signature parameters s. Signed by the link key.\n', '   * @return True if tokens (and ether) were successfully sent to receiver.\n', '   */\n', '  function withdraw(\n', '\t\t    address _recipient, \n', '\t\t    address _referralAddress, \n', '\t\t    address _transitAddress,\n', '\t\t    uint8 _keyV, \n', '\t\t    bytes32 _keyR,\n', '\t\t\tbytes32 _keyS,\n', '\t\t\tuint8 _recipientV, \n', '\t\t    bytes32 _recipientR,\n', '\t\t\tbytes32 _recipientS\n', '\t\t    )\n', '    public\n', '    whenNotPaused\n', '    whenNotStopped\n', '    returns (bool success) {\n', '    \n', '    require(checkWithdrawal(_recipient, \n', '    \t\t_referralAddress,\n', '\t\t    _transitAddress,\n', '\t\t    _keyV, \n', '\t\t    _keyR,\n', '\t\t\t_keyS,\n', '\t\t\t_recipientV, \n', '\t\t    _recipientR,\n', '\t\t\t_recipientS));\n', '        \n', '\n', '    // save to state that address was used\n', '    usedTransitAddresses[_transitAddress] = true;\n', '\n', '    // send tokens\n', '    if (CLAIM_AMOUNT > 0 && TOKEN_ADDRESS != 0x0000000000000000000000000000000000000000) {\n', '        StandardToken token = StandardToken(TOKEN_ADDRESS);\n', '        token.transferFrom(AIRDROPPER, _recipient, CLAIM_AMOUNT);\n', '    }\n', '    \n', '    // send tokens to the address who refferred the airdrop \n', '    if (REFERRAL_AMOUNT > 0 && _referralAddress != 0x0000000000000000000000000000000000000000) {\n', '        token.transferFrom(AIRDROPPER, _referralAddress, REFERRAL_AMOUNT);\n', '    }\n', '\n', '    \n', '    // send ether (if needed)\n', '    if (CLAIM_AMOUNT_ETH > 0) {\n', '        _recipient.transfer(CLAIM_AMOUNT_ETH);\n', '    }\n', '    \n', '    return true;\n', '  }\n', '\n', ' /**\n', '   * @dev Get boolean if link is already claimed. \n', '   * @param _transitAddress transit address provided to receiver by the airdropper\n', '   * @return True if the transit address was already used. \n', '   */\n', '  function isLinkClaimed(address _transitAddress) \n', '    public view returns (bool claimed) {\n', '        return usedTransitAddresses[_transitAddress];\n', '  }\n', '\n', '   /**\n', '   * @dev Withdraw ether back deposited to the smart contract.  \n', '   * @return True if ether was withdrawn. \n', '   */\n', '  function getEtherBack() public returns (bool success) { \n', '    require(msg.sender == AIRDROPPER);\n', '      \n', '    AIRDROPPER.transfer(address(this).balance);\n', '      \n', '    return true;\n', '  }\n', '}']
['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n', ' */\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Stoppable\n', ' * @dev Base contract which allows children to implement final irreversible stop mechanism.\n', ' */\n', 'contract Stoppable is Pausable {\n', '  event Stop();\n', '\n', '  bool public stopped = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not stopped.\n', '   */\n', '  modifier whenNotStopped() {\n', '    require(!stopped);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is stopped.\n', '   */\n', '  modifier whenStopped() {\n', '    require(stopped);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function stop() public onlyOwner whenNotStopped {\n', '    stopped = true;\n', '    emit Stop();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title e2pAir Escrow Contract\n', " * @dev Contract sends tokens from airdropper's account to receiver on claim.\n", ' * \n', ' * When deploying contract, airdroper provides airdrop parametrs: token, amount \n', ' * of tokens and amount of eth should be claimed per link and  airdrop transit \n', ' * address and deposits ether needed for the airdrop.\n', ' * \n', ' * Airdrop transit address is used to verify that links are signed by airdropper. \n', ' * \n', ' * Airdropper generates claim links. Each link contains a private key \n', ' * signed by the airdrop transit private key. The link private key can be used \n', " * once to sign receiver's address. Receiver provides signature\n", ' * to the Relayer Server, which calls smart contract to withdraw tokens. \n', ' * \n', ' * On claim smart contract verifies, that receiver provided address signed \n', ' * by a link private key. \n', ' * If everything is correct smart contract sends tokens and ether to receiver.\n', ' * \n', ' * Anytime airdropper can get back unclaimed ether using getEtherBack method.\n', ' * \n', ' */\n', 'contract e2pAirEscrow is Stoppable {\n', '  \n', '  address public TOKEN_ADDRESS; // token to distribute\n', '  uint public CLAIM_AMOUNT; // tokens claimed per link\n', '  uint public REFERRAL_AMOUNT; // referral reward\n', '\n', '  uint public CLAIM_AMOUNT_ETH; // ether claimed per link\n', '  address public AIRDROPPER; // airdropper address, which has tokens to distribute\n', '  address public AIRDROP_TRANSIT_ADDRESS; // special address, used on claim to verify \n', '                                          // that links signed by the airdropper\n', '  \n', '\n', '  // Mappings of transit address => true if link is used.                                                                                                                                \n', '  mapping (address => bool) usedTransitAddresses;\n', '  \n', '   /**\n', '   * @dev Contructor that sets airdrop params and receives ether needed for the \n', '   * airdrop. \n', '   * @param _tokenAddress address Token address to distribute\n', '   * @param _claimAmount uint tokens (in atomic values) claimed per link\n', '   * @param _claimAmountEth uint ether (in wei) claimed per link\n', '   * @param _airdropTransitAddress special address, used on claim to verify that links signed by airdropper\n', '   */\n', '  constructor(address _tokenAddress,\n', '              uint _claimAmount, \n', '              uint  _referralAmount, \n', '              uint _claimAmountEth,\n', '              address _airdropTransitAddress) public payable {\n', '    AIRDROPPER = msg.sender;\n', '    TOKEN_ADDRESS = _tokenAddress;\n', '    CLAIM_AMOUNT = _claimAmount;\n', '    REFERRAL_AMOUNT = _referralAmount;\n', '    CLAIM_AMOUNT_ETH = _claimAmountEth;\n', '    AIRDROP_TRANSIT_ADDRESS = _airdropTransitAddress;\n', '  }\n', '\n', '   /**\n', '   * @dev Verify that address is signed with needed private key.\n', '   * @param _transitAddress transit address assigned to transfer\n', '   * @param _addressSigned address Signed address.\n', '   * @param _v ECDSA signature parameter v.\n', '   * @param _r ECDSA signature parameters r.\n', '   * @param _s ECDSA signature parameters s.\n', '   * @return True if signature is correct.\n', '   */\n', '  function verifyLinkPrivateKey(\n', '\t\t\t   address _transitAddress,\n', '\t\t\t   address _addressSigned,\n', '\t\t\t   address _referralAddress,\n', '\t\t\t   uint8 _v,\n', '\t\t\t   bytes32 _r,\n', '\t\t\t   bytes32 _s)\n', '    public pure returns(bool success) {\n', '    bytes32 prefixedHash = keccak256("\\x19Ethereum Signed Message:\\n32", _addressSigned, _referralAddress);\n', '    address retAddr = ecrecover(prefixedHash, _v, _r, _s);\n', '    return retAddr == _transitAddress;\n', '  }\n', '  \n', '  \n', '   /**\n', '   * @dev Verify that address is signed with needed private key.\n', '   * @param _transitAddress transit address assigned to transfer\n', '   * @param _addressSigned address Signed address.\n', '   * @param _v ECDSA signature parameter v.\n', '   * @param _r ECDSA signature parameters r.\n', '   * @param _s ECDSA signature parameters s.\n', '   * @return True if signature is correct.\n', '   */\n', '  function verifyReceiverAddress(\n', '\t\t\t   address _transitAddress,\n', '\t\t\t   address _addressSigned,\n', '\t\t\t   uint8 _v,\n', '\t\t\t   bytes32 _r,\n', '\t\t\t   bytes32 _s)\n', '    public pure returns(bool success) {\n', '    bytes32 prefixedHash = keccak256("\\x19Ethereum Signed Message:\\n32", _addressSigned);\n', '    address retAddr = ecrecover(prefixedHash, _v, _r, _s);\n', '    return retAddr == _transitAddress;\n', '  }\n', '  \n', '/**\n', "   * @dev Verify that claim params are correct and the link key wasn't used before.  \n", '   * @param _recipient address to receive tokens.\n', '   * @param _transitAddress transit address provided by the airdropper\n', '   * @param _keyV ECDSA signature parameter v. Signed by the airdrop transit key.\n', '   * @param _keyR ECDSA signature parameters r. Signed by the airdrop transit key.\n', '   * @param _keyS ECDSA signature parameters s. Signed by the airdrop transit key.\n', '   * @param _recipientV ECDSA signature parameter v. Signed by the link key.\n', '   * @param _recipientR ECDSA signature parameters r. Signed by the link key.\n', '   * @param _recipientS ECDSA signature parameters s. Signed by the link key.\n', '   * @return True if claim params are correct. \n', '   */\n', '  function checkWithdrawal(\n', '            address _recipient, \n', '            address _referralAddress, \n', '\t\t    address _transitAddress,\n', '\t\t    uint8 _keyV, \n', '\t\t    bytes32 _keyR,\n', '\t\t\tbytes32 _keyS,\n', '\t\t\tuint8 _recipientV, \n', '\t\t    bytes32 _recipientR,\n', '\t\t\tbytes32 _recipientS) \n', '    public view returns(bool success) {\n', '    \n', "        // verify that link wasn't used before  \n", '        require(usedTransitAddresses[_transitAddress] == false);\n', '\n', "        // verifying that key is legit and signed by AIRDROP_TRANSIT_ADDRESS's key\n", '        require(verifyLinkPrivateKey(AIRDROP_TRANSIT_ADDRESS, _transitAddress, _referralAddress, _keyV, _keyR, _keyS));\n', '    \n', '        // verifying that recepients address signed correctly\n', '        require(verifyReceiverAddress(_transitAddress, _recipient, _recipientV, _recipientR, _recipientS));\n', '        \n', '        // verifying that there is enough ether to make transfer\n', '        require(address(this).balance >= CLAIM_AMOUNT_ETH);\n', '        \n', '        return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Withdraw tokens to receiver address if withdraw params are correct.\n', '   * @param _recipient address to receive tokens.\n', '   * @param _transitAddress transit address provided to receiver by the airdropper\n', '   * @param _keyV ECDSA signature parameter v. Signed by the airdrop transit key.\n', '   * @param _keyR ECDSA signature parameters r. Signed by the airdrop transit key.\n', '   * @param _keyS ECDSA signature parameters s. Signed by the airdrop transit key.\n', '   * @param _recipientV ECDSA signature parameter v. Signed by the link key.\n', '   * @param _recipientR ECDSA signature parameters r. Signed by the link key.\n', '   * @param _recipientS ECDSA signature parameters s. Signed by the link key.\n', '   * @return True if tokens (and ether) were successfully sent to receiver.\n', '   */\n', '  function withdraw(\n', '\t\t    address _recipient, \n', '\t\t    address _referralAddress, \n', '\t\t    address _transitAddress,\n', '\t\t    uint8 _keyV, \n', '\t\t    bytes32 _keyR,\n', '\t\t\tbytes32 _keyS,\n', '\t\t\tuint8 _recipientV, \n', '\t\t    bytes32 _recipientR,\n', '\t\t\tbytes32 _recipientS\n', '\t\t    )\n', '    public\n', '    whenNotPaused\n', '    whenNotStopped\n', '    returns (bool success) {\n', '    \n', '    require(checkWithdrawal(_recipient, \n', '    \t\t_referralAddress,\n', '\t\t    _transitAddress,\n', '\t\t    _keyV, \n', '\t\t    _keyR,\n', '\t\t\t_keyS,\n', '\t\t\t_recipientV, \n', '\t\t    _recipientR,\n', '\t\t\t_recipientS));\n', '        \n', '\n', '    // save to state that address was used\n', '    usedTransitAddresses[_transitAddress] = true;\n', '\n', '    // send tokens\n', '    if (CLAIM_AMOUNT > 0 && TOKEN_ADDRESS != 0x0000000000000000000000000000000000000000) {\n', '        StandardToken token = StandardToken(TOKEN_ADDRESS);\n', '        token.transferFrom(AIRDROPPER, _recipient, CLAIM_AMOUNT);\n', '    }\n', '    \n', '    // send tokens to the address who refferred the airdrop \n', '    if (REFERRAL_AMOUNT > 0 && _referralAddress != 0x0000000000000000000000000000000000000000) {\n', '        token.transferFrom(AIRDROPPER, _referralAddress, REFERRAL_AMOUNT);\n', '    }\n', '\n', '    \n', '    // send ether (if needed)\n', '    if (CLAIM_AMOUNT_ETH > 0) {\n', '        _recipient.transfer(CLAIM_AMOUNT_ETH);\n', '    }\n', '    \n', '    return true;\n', '  }\n', '\n', ' /**\n', '   * @dev Get boolean if link is already claimed. \n', '   * @param _transitAddress transit address provided to receiver by the airdropper\n', '   * @return True if the transit address was already used. \n', '   */\n', '  function isLinkClaimed(address _transitAddress) \n', '    public view returns (bool claimed) {\n', '        return usedTransitAddresses[_transitAddress];\n', '  }\n', '\n', '   /**\n', '   * @dev Withdraw ether back deposited to the smart contract.  \n', '   * @return True if ether was withdrawn. \n', '   */\n', '  function getEtherBack() public returns (bool success) { \n', '    require(msg.sender == AIRDROPPER);\n', '      \n', '    AIRDROPPER.transfer(address(this).balance);\n', '      \n', '    return true;\n', '  }\n', '}']
