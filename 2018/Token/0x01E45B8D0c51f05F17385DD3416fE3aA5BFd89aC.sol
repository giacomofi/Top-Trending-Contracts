['pragma solidity ^0.4.11;\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  function totalSupply() constant returns (uint256 totalSupply);\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool ok);\n', '  function approve(address spender, uint256 value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  uint256 public _totalSupply;\n', '  address public _creator;\n', '  bool bIsFreezeAll = false;\n', '\n', '  function totalSupply() constant returns (uint256 totalSupply) {\n', '\ttotalSupply = _totalSupply;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    require(bIsFreezeAll == false);\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    require(bIsFreezeAll == false);\n', '    var _allowance = allowed[_from][msg.sender];\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '\trequire(bIsFreezeAll == false);\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function freezeAll()\n', '  {\n', '\trequire(msg.sender == _creator);\n', '\tbIsFreezeAll = !bIsFreezeAll;\n', '  }\n', '}\n', '\n', 'contract COINBIG is StandardToken {\n', '\n', '  string public name = "COINBIG";\n', '  string public symbol = "CB";\n', '  uint256 public constant decimals = 18;\n', '  uint256 public constant INITIAL_SUPPLY = 10000000000 * 10 ** decimals;\t\n', '\n', '  \n', '  function COINBIG() {\n', '    _totalSupply = INITIAL_SUPPLY;\n', '\t_creator = 0xfCe1155052AF6c8CB04EDA1CeBB390132E2F0012;\n', '\tbalances[_creator] = INITIAL_SUPPLY;\n', '\tbIsFreezeAll = false;\n', '  }\n', '  \n', '  function destroy() {\n', '\trequire(msg.sender == _creator);\n', '\tsuicide(_creator);\n', '  }\n', '\n', '}']