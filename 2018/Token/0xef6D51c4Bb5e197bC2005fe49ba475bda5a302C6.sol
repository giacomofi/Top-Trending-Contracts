['pragma solidity ^0.4.6;\n', '\n', 'contract CoinPaws {\n', '\n', '  string public name = "CoinPaws";\n', '  string public symbol = "CPS";\n', '  uint public decimals = 10;\n', '  uint public INITIAL_SUPPLY = 88000000000000000000;\n', '  \n', '    mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowed;\n', '  uint256 public _totalSupply;\n', '  address public _creator;\n', '  bool bIsFreezeAll = false;\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '  \n', '  function safeSub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  \n', '  function totalSupply() public constant returns (uint256 total) {\n', '\ttotal = _totalSupply;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '    require(bIsFreezeAll == false);\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '    require(bIsFreezeAll == false);\n', '    var _allowance = allowed[_from][msg.sender];\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) public returns (bool success) {\n', '\trequire(bIsFreezeAll == false);\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function freezeAll() public \n', '  {\n', '\trequire(msg.sender == _creator);\n', '\tbIsFreezeAll = !bIsFreezeAll;\n', '  }\n', '  \n', '  function CoinPaws() public {\n', '    _totalSupply = INITIAL_SUPPLY;\n', '\t_creator = 0x370249e149b3A4eBfB3bf58A2D3eb858a88D734A;\n', '\tbalances[_creator] = INITIAL_SUPPLY;\n', '\tbIsFreezeAll = false;\n', '  }\n', '  \n', '  function destroy() public  {\n', '\trequire(msg.sender == _creator);\n', '\tselfdestruct(_creator);\n', '  }\n', '\n', '}']