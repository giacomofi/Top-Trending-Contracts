['pragma solidity ^0.4.23;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/OwnedPausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token that allows transfers by owner while paused\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract OwnedPausableToken is StandardToken, Pausable {\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused or the caller is the owner\n', '   */\n', '  modifier whenNotPausedOrIsOwner() {\n', '    require(!paused || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPausedOrIsOwner returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/interfaces/IDAVToken.sol\n', '\n', 'contract IDAVToken is ERC20 {\n', '\n', '  function name() public view returns (string) {}\n', '  function symbol() public view returns (string) {}\n', '  function decimals() public view returns (uint8) {}\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool success);\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success);\n', '\n', '  function owner() public view returns (address) {}\n', '  function transferOwnership(address newOwner) public;\n', '\n', '  function burn(uint256 _value) public;\n', '\n', '  function pauseCutoffTime() public view returns (uint256) {}\n', '  function paused() public view returns (bool) {}\n', '  function pause() public;\n', '  function unpause() public;\n', '  function setPauseCutoffTime(uint256 _pauseCutoffTime) public;\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/DAVToken.sol\n', '\n', '/**\n', ' * @title DAV Token\n', ' * @dev ERC20 token\n', ' */\n', 'contract DAVToken is IDAVToken, BurnableToken, OwnedPausableToken {\n', '\n', '  // Token constants\n', '  string public name = &#39;DAV Token&#39;;\n', '  string public symbol = &#39;DAV&#39;;\n', '  uint8 public decimals = 18;\n', '\n', '  // Time after which pause can no longer be called\n', '  uint256 public pauseCutoffTime;\n', '\n', '  /**\n', '   * @notice DAVToken constructor\n', '   * Runs once on initial contract creation. Sets initial supply and balances.\n', '   */\n', '  constructor(uint256 _initialSupply) public {\n', '    totalSupply_ = _initialSupply;\n', '    balances[msg.sender] = totalSupply_;\n', '  }\n', '\n', '  /**\n', '   * Set the cutoff time after which the token can no longer be paused\n', '   * Cannot be in the past. Can only be set once.\n', '   *\n', '   * @param _pauseCutoffTime Time for pause cutoff.\n', '   */\n', '  function setPauseCutoffTime(uint256 _pauseCutoffTime) onlyOwner public {\n', '    // Make sure time is not in the past\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_pauseCutoffTime >= block.timestamp);\n', '    // Make sure cutoff time hasn&#39;t been set already\n', '    require(pauseCutoffTime == 0);\n', '    // Set the cutoff time\n', '    pauseCutoffTime = _pauseCutoffTime;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    // Make sure pause cut off time isn&#39;t set or if it is, it&#39;s in the future\n', '    // solium-disable-next-line security/no-block-members\n', '    require(pauseCutoffTime == 0 || pauseCutoffTime >= block.timestamp);\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Identity.sol\n', '\n', '/**\n', ' * @title Identity\n', ' */\n', 'contract Identity {\n', '\n', '  struct DAVIdentity {\n', '    address wallet;\n', '  }\n', '\n', '  mapping (address => DAVIdentity) private identities;\n', '\n', '  DAVToken private token;\n', '\n', '  // Prefix to added to messages signed by web3\n', '  bytes28 private constant ETH_SIGNED_MESSAGE_PREFIX = &#39;\\x19Ethereum Signed Message:\\n32&#39;;\n', '  bytes25 private constant DAV_REGISTRATION_REQUEST = &#39;DAV Identity Registration&#39;;\n', '\n', '  /**\n', '   * @dev Constructor\n', '   *\n', '   * @param _davTokenContract address of the DAVToken contract\n', '   */\n', '  function Identity(DAVToken _davTokenContract) public {\n', '    token = _davTokenContract;\n', '  }\n', '\n', '  function register(address _id, uint8 _v, bytes32 _r, bytes32 _s) public {\n', '    // Make sure id isn&#39;t registered already\n', '    require(\n', '      identities[_id].wallet == 0x0\n', '    );\n', '    // Generate message hash\n', '    bytes32 prefixedHash = keccak256(ETH_SIGNED_MESSAGE_PREFIX, keccak256(DAV_REGISTRATION_REQUEST));\n', '    // Verify message signature\n', '    require(\n', '      ecrecover(prefixedHash, _v, _r, _s) == _id\n', '    );\n', '\n', '    // Register in identities mapping\n', '    identities[_id] = DAVIdentity({\n', '      wallet: msg.sender\n', '    });\n', '  }\n', '\n', '  function registerSimple() public {\n', '    // Make sure id isn&#39;t registered already\n', '    require(\n', '      identities[msg.sender].wallet == 0x0\n', '    );\n', '\n', '    // Register in identities mapping\n', '    identities[msg.sender] = DAVIdentity({\n', '      wallet: msg.sender\n', '    });\n', '  }\n', '\n', '  function getBalance(address _id) public view returns (uint256 balance) {\n', '    return token.balanceOf(identities[_id].wallet);\n', '  }\n', '\n', '  function verifyOwnership(address _id, address _wallet) public view returns (bool verified) {\n', '    return identities[_id].wallet == _wallet;\n', '  }\n', '\n', '  // Check identity registration status\n', '  function isRegistered(address _id) public view returns (bool) {\n', '    return identities[_id].wallet != 0x0;\n', '  }\n', '\n', '  // Get identity wallet\n', '  function getIdentityWallet(address _id) public view returns (address) {\n', '    return identities[_id].wallet;\n', '  }\n', '}\n', '\n', '// File: contracts/BasicMission.sol\n', '\n', '/**\n', ' * @title BasicMission\n', ' * @dev The most basic contract for conducting Missions.\n', ' *\n', ' * This contract represents the very basic interface of a mission contract.\n', ' * In the real world, there is very little reason to use this and not one of the\n', ' * contracts that extend it. Consider this an interface, more than an implementation.\n', ' */\n', 'contract BasicMission {\n', '\n', '  uint256 private nonce;\n', '\n', '  struct Mission {\n', '    address seller;\n', '    address buyer;\n', '    uint256 cost;\n', '    uint256 balance;\n', '    bool isSigned;\n', '    mapping (uint8 => bool) resolvers;\n', '  }\n', '\n', '  mapping (bytes32 => Mission) private missions;\n', '\n', '  event Create(\n', '    bytes32 id,\n', '    address sellerId,\n', '    address buyerId\n', '  );\n', '\n', '  event Signed(\n', '    bytes32 id\n', '  );\n', '\n', '  DAVToken private token;\n', '  Identity private identity;\n', '\n', '  /**\n', '   * @dev Constructor\n', '   *\n', '   * @param _identityContract address of the Identity contract\n', '   * @param _davTokenContract address of the DAVToken contract\n', '   */\n', '  function BasicMission(Identity _identityContract, DAVToken _davTokenContract) public {\n', '    identity = _identityContract;\n', '    token = _davTokenContract;\n', '  }\n', '\n', '  /**\n', '   * @notice Create a new mission\n', '   * @param _sellerId The DAV Identity of the person providing the service\n', '   * @param _buyerId The DAV Identity of the person ordering the service\n', '   * @param _cost The total cost of the mission to be paid by buyer\n', '   */\n', '  function create(bytes32 _missionId, address _sellerId, address _buyerId, uint256 _cost) public {\n', '    // Verify that message sender controls the buyer&#39;s wallet\n', '    require(\n', '      identity.verifyOwnership(_buyerId, msg.sender)\n', '    );\n', '\n', '    // Verify buyer&#39;s balance is sufficient\n', '    require(\n', '      identity.getBalance(_buyerId) >= _cost\n', '    );\n', '\n', '    // Make sure id isn&#39;t registered already\n', '    require(\n', '      missions[_missionId].buyer == 0x0\n', '    );\n', '\n', '    // Transfer tokens to the mission contract\n', '    token.transferFrom(msg.sender, this, _cost);\n', '\n', '    // Create mission\n', '    missions[_missionId] = Mission({\n', '      seller: _sellerId,\n', '      buyer: _buyerId,\n', '      cost: _cost,\n', '      balance: _cost,\n', '      isSigned: false\n', '    });\n', '\n', '    // Event\n', '    emit Create(_missionId, _sellerId, _buyerId);\n', '  }\n', '\n', '  /**\n', '  * @notice Fund a mission\n', '  * @param _missionId The id of the mission\n', '  * @param _buyerId The DAV Identity of the person ordering the service\n', '  */\n', '  function fulfilled(bytes32 _missionId, address _buyerId) public {\n', '    // Verify that message sender controls the seller&#39;s wallet\n', '    require(\n', '      identity.verifyOwnership(_buyerId, msg.sender)\n', '    );\n', '    \n', '    require(\n', '      missions[_missionId].isSigned == false\n', '    );\n', '\n', '    require(\n', '      missions[_missionId].balance == missions[_missionId].cost\n', '    );\n', '    \n', '    \n', '    // designate mission as signed\n', '    missions[_missionId].isSigned = true;\n', '    missions[_missionId].balance = 0;\n', '    token.approve(this, missions[_missionId].cost);\n', '    token.transferFrom(this, identity.getIdentityWallet(missions[_missionId].seller), missions[_missionId].cost);\n', '\n', '    // Event\n', '    emit Signed(_missionId);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/OwnedPausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token that allows transfers by owner while paused\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract OwnedPausableToken is StandardToken, Pausable {\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused or the caller is the owner\n', '   */\n', '  modifier whenNotPausedOrIsOwner() {\n', '    require(!paused || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPausedOrIsOwner returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/interfaces/IDAVToken.sol\n', '\n', 'contract IDAVToken is ERC20 {\n', '\n', '  function name() public view returns (string) {}\n', '  function symbol() public view returns (string) {}\n', '  function decimals() public view returns (uint8) {}\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool success);\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success);\n', '\n', '  function owner() public view returns (address) {}\n', '  function transferOwnership(address newOwner) public;\n', '\n', '  function burn(uint256 _value) public;\n', '\n', '  function pauseCutoffTime() public view returns (uint256) {}\n', '  function paused() public view returns (bool) {}\n', '  function pause() public;\n', '  function unpause() public;\n', '  function setPauseCutoffTime(uint256 _pauseCutoffTime) public;\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/DAVToken.sol\n', '\n', '/**\n', ' * @title DAV Token\n', ' * @dev ERC20 token\n', ' */\n', 'contract DAVToken is IDAVToken, BurnableToken, OwnedPausableToken {\n', '\n', '  // Token constants\n', "  string public name = 'DAV Token';\n", "  string public symbol = 'DAV';\n", '  uint8 public decimals = 18;\n', '\n', '  // Time after which pause can no longer be called\n', '  uint256 public pauseCutoffTime;\n', '\n', '  /**\n', '   * @notice DAVToken constructor\n', '   * Runs once on initial contract creation. Sets initial supply and balances.\n', '   */\n', '  constructor(uint256 _initialSupply) public {\n', '    totalSupply_ = _initialSupply;\n', '    balances[msg.sender] = totalSupply_;\n', '  }\n', '\n', '  /**\n', '   * Set the cutoff time after which the token can no longer be paused\n', '   * Cannot be in the past. Can only be set once.\n', '   *\n', '   * @param _pauseCutoffTime Time for pause cutoff.\n', '   */\n', '  function setPauseCutoffTime(uint256 _pauseCutoffTime) onlyOwner public {\n', '    // Make sure time is not in the past\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_pauseCutoffTime >= block.timestamp);\n', "    // Make sure cutoff time hasn't been set already\n", '    require(pauseCutoffTime == 0);\n', '    // Set the cutoff time\n', '    pauseCutoffTime = _pauseCutoffTime;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', "    // Make sure pause cut off time isn't set or if it is, it's in the future\n", '    // solium-disable-next-line security/no-block-members\n', '    require(pauseCutoffTime == 0 || pauseCutoffTime >= block.timestamp);\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Identity.sol\n', '\n', '/**\n', ' * @title Identity\n', ' */\n', 'contract Identity {\n', '\n', '  struct DAVIdentity {\n', '    address wallet;\n', '  }\n', '\n', '  mapping (address => DAVIdentity) private identities;\n', '\n', '  DAVToken private token;\n', '\n', '  // Prefix to added to messages signed by web3\n', "  bytes28 private constant ETH_SIGNED_MESSAGE_PREFIX = '\\x19Ethereum Signed Message:\\n32';\n", "  bytes25 private constant DAV_REGISTRATION_REQUEST = 'DAV Identity Registration';\n", '\n', '  /**\n', '   * @dev Constructor\n', '   *\n', '   * @param _davTokenContract address of the DAVToken contract\n', '   */\n', '  function Identity(DAVToken _davTokenContract) public {\n', '    token = _davTokenContract;\n', '  }\n', '\n', '  function register(address _id, uint8 _v, bytes32 _r, bytes32 _s) public {\n', "    // Make sure id isn't registered already\n", '    require(\n', '      identities[_id].wallet == 0x0\n', '    );\n', '    // Generate message hash\n', '    bytes32 prefixedHash = keccak256(ETH_SIGNED_MESSAGE_PREFIX, keccak256(DAV_REGISTRATION_REQUEST));\n', '    // Verify message signature\n', '    require(\n', '      ecrecover(prefixedHash, _v, _r, _s) == _id\n', '    );\n', '\n', '    // Register in identities mapping\n', '    identities[_id] = DAVIdentity({\n', '      wallet: msg.sender\n', '    });\n', '  }\n', '\n', '  function registerSimple() public {\n', "    // Make sure id isn't registered already\n", '    require(\n', '      identities[msg.sender].wallet == 0x0\n', '    );\n', '\n', '    // Register in identities mapping\n', '    identities[msg.sender] = DAVIdentity({\n', '      wallet: msg.sender\n', '    });\n', '  }\n', '\n', '  function getBalance(address _id) public view returns (uint256 balance) {\n', '    return token.balanceOf(identities[_id].wallet);\n', '  }\n', '\n', '  function verifyOwnership(address _id, address _wallet) public view returns (bool verified) {\n', '    return identities[_id].wallet == _wallet;\n', '  }\n', '\n', '  // Check identity registration status\n', '  function isRegistered(address _id) public view returns (bool) {\n', '    return identities[_id].wallet != 0x0;\n', '  }\n', '\n', '  // Get identity wallet\n', '  function getIdentityWallet(address _id) public view returns (address) {\n', '    return identities[_id].wallet;\n', '  }\n', '}\n', '\n', '// File: contracts/BasicMission.sol\n', '\n', '/**\n', ' * @title BasicMission\n', ' * @dev The most basic contract for conducting Missions.\n', ' *\n', ' * This contract represents the very basic interface of a mission contract.\n', ' * In the real world, there is very little reason to use this and not one of the\n', ' * contracts that extend it. Consider this an interface, more than an implementation.\n', ' */\n', 'contract BasicMission {\n', '\n', '  uint256 private nonce;\n', '\n', '  struct Mission {\n', '    address seller;\n', '    address buyer;\n', '    uint256 cost;\n', '    uint256 balance;\n', '    bool isSigned;\n', '    mapping (uint8 => bool) resolvers;\n', '  }\n', '\n', '  mapping (bytes32 => Mission) private missions;\n', '\n', '  event Create(\n', '    bytes32 id,\n', '    address sellerId,\n', '    address buyerId\n', '  );\n', '\n', '  event Signed(\n', '    bytes32 id\n', '  );\n', '\n', '  DAVToken private token;\n', '  Identity private identity;\n', '\n', '  /**\n', '   * @dev Constructor\n', '   *\n', '   * @param _identityContract address of the Identity contract\n', '   * @param _davTokenContract address of the DAVToken contract\n', '   */\n', '  function BasicMission(Identity _identityContract, DAVToken _davTokenContract) public {\n', '    identity = _identityContract;\n', '    token = _davTokenContract;\n', '  }\n', '\n', '  /**\n', '   * @notice Create a new mission\n', '   * @param _sellerId The DAV Identity of the person providing the service\n', '   * @param _buyerId The DAV Identity of the person ordering the service\n', '   * @param _cost The total cost of the mission to be paid by buyer\n', '   */\n', '  function create(bytes32 _missionId, address _sellerId, address _buyerId, uint256 _cost) public {\n', "    // Verify that message sender controls the buyer's wallet\n", '    require(\n', '      identity.verifyOwnership(_buyerId, msg.sender)\n', '    );\n', '\n', "    // Verify buyer's balance is sufficient\n", '    require(\n', '      identity.getBalance(_buyerId) >= _cost\n', '    );\n', '\n', "    // Make sure id isn't registered already\n", '    require(\n', '      missions[_missionId].buyer == 0x0\n', '    );\n', '\n', '    // Transfer tokens to the mission contract\n', '    token.transferFrom(msg.sender, this, _cost);\n', '\n', '    // Create mission\n', '    missions[_missionId] = Mission({\n', '      seller: _sellerId,\n', '      buyer: _buyerId,\n', '      cost: _cost,\n', '      balance: _cost,\n', '      isSigned: false\n', '    });\n', '\n', '    // Event\n', '    emit Create(_missionId, _sellerId, _buyerId);\n', '  }\n', '\n', '  /**\n', '  * @notice Fund a mission\n', '  * @param _missionId The id of the mission\n', '  * @param _buyerId The DAV Identity of the person ordering the service\n', '  */\n', '  function fulfilled(bytes32 _missionId, address _buyerId) public {\n', "    // Verify that message sender controls the seller's wallet\n", '    require(\n', '      identity.verifyOwnership(_buyerId, msg.sender)\n', '    );\n', '    \n', '    require(\n', '      missions[_missionId].isSigned == false\n', '    );\n', '\n', '    require(\n', '      missions[_missionId].balance == missions[_missionId].cost\n', '    );\n', '    \n', '    \n', '    // designate mission as signed\n', '    missions[_missionId].isSigned = true;\n', '    missions[_missionId].balance = 0;\n', '    token.approve(this, missions[_missionId].cost);\n', '    token.transferFrom(this, identity.getIdentityWallet(missions[_missionId].seller), missions[_missionId].cost);\n', '\n', '    // Event\n', '    emit Signed(_missionId);\n', '  }\n', '\n', '}']
