['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtilsLib {\n', '\n', '    /**\n', '    * Returns whether there is code in the target address\n', '    * @dev This function will return false if invoked during the constructor of a contract,\n', '    *  as the code is not actually created until after the constructor finishes.\n', '    * @param _addr address address to check\n', '    * @return bool whether there is code in the target address\n', '    */\n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '\n', '        return size > 0;\n', '    }\n', '    \n', '}\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMathLib {\n', '\n', '    /**\n', '    * @dev uint256乘法\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev 除法\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(0==b);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev 减法运算\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev 加法运算\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev 64bit最大数\n', '    */\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '    * @dev 64bit最小数\n', '    */\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '    * @dev uint256最大数\n', '    */\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '    * @dev uint256最小数\n', '    */\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    \n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit    OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.4.24;\n', 'contract ERC20Basic {\n', '    /**\n', '    * @dev 传输事件\n', '    */\n', '    event Transfer(address indexed _from,address indexed _to,uint256 value);\n', '\n', '    //发送总量  \n', '    uint256 public  totalSupply;\n', '\n', '    /**\n', '    *@dev 获取名称\n', '     */\n', '    function name() public view returns (string);\n', '\n', '    /**\n', '    *@dev 获取代币符号\n', '     */\n', '    function symbol() public view returns (string);\n', '\n', '    /**\n', '    *@dev 支持几位小数\n', '     */\n', '    function decimals() public view returns (uint8);\n', '\n', '    /**\n', '    *@dev 获取发行量\n', '     */\n', '    function totalSupply() public view returns (uint256){\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev 获取余额\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '\n', '    /**\n', '    * @dev 转移代币\n', '    * @param _to 转移地址\n', '    * @param _value 数量\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    /**\n', '    * @dev 授予事件\n', '    */\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '     /**\n', '    * @dev 查看_owner地址还可以调用_spender地址多少代币\n', '    * @param _owner 当前\n', '    * @param _spender 地址\n', '    * @return uint256 可调用的代币数\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '    /**\n', '    * @dev approve批准之后，当前帐号从_from账户转移_value代币\n', '    * @param _from 账户转移\n', '    * @param _to 转移地址\n', '    * @param _value 数量\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '    /**\n', '    * @dev 授权地批准_spender账户从自己的账户转移_value个代币\n', '    * @param _spender 授权地址\n', '    * @param _value 授权数量\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '}\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Basic token\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    //SafeMathLib接口\n', '    using SafeMathLib for uint256;\n', '    using AddressUtilsLib for address;\n', '    \n', '    //余额地址\n', '    mapping(address => uint256) public balances;\n', '\n', '    /**\n', '    * @dev 指定地址传输\n', '    * @param _from 传送地址\n', '    * @param _to 传送地址\n', '    * @param _value 传送数量\n', '    */\n', '    function _transfer(address _from,address _to, uint256 _value) public returns (bool){\n', '        require(!_from.isContract());\n', '        require(!_to.isContract());\n', '        require(0 < _value);\n', '        require(balances[_from] > _value);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev 指定地址传输\n', '    * @param _to 传送地址\n', '    * @param _value 传送数量\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool){\n', '        return   _transfer(msg.sender,_to,_value);\n', '    }\n', '\n', '    \n', '\n', '    /**\n', '    * @dev 查询地址余额\n', '    * @param _owner 查询地址 \n', '    * @return uint256 返回余额\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', 'contract UCBasic is ERC20,BasicToken{\n', '    //\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '    /**\n', '    * @dev approve批准之后，调用transferFrom函数来转移token\n', '    * @param _from 当前用户token\n', '    * @param _to 转移地址\n', '    * @param _value 数量\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n', '        //检测传输值是否为空\n', '        require(0 < _value);\n', '        //检测地址是否有效\n', '        require(address(0) != _from && address(0) != _to);\n', '        //检测是否有余额可以支付\n', '        require(allowed[_from][msg.sender] > _value);\n', '        //检测账户余额是否够用\n', '        require(balances[_from] > _value);\n', '        //检测地址是否有效\n', '        require(!_from.isContract());\n', '        //检测地址是否有效\n', '        require(!_to.isContract());\n', '\n', '        //余额\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev 批准另一个人address来交易指定的代币\n', '    * @dev 0 address 表示没有授权的地址\n', '    * @dev 给定的时间内，一个token只能有一个批准的地址\n', '    * @dev 只有token的持有者或者授权的操作人才可以调用\n', '    * @param _spender 指定的地址\n', '    * @param _value uint256 可用余额\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool){\n', '        require(address(0) != _spender);\n', '        require(!_spender.isContract());\n', '        require(msg.sender != _spender);\n', '        require(0 != _value);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    * @dev 查看_owner地址还可以调用_spender地址多少代币\n', '    * @param _owner 当前\n', '    * @param _spender 地址\n', '    * @return uint256 可调用的代币数\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        //检测地址是否有效\n', '        require(!_owner.isContract());\n', '        //检测地址是否有效\n', '        require(!_spender.isContract());\n', '\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', 'contract STOToken is UCBasic,Ownable{\n', '    using SafeMathLib for uint256;\n', '    //名称\n', '    string constant public tokenName = "STOCK";\n', '    //标识\n', '    string constant public tokenSymbol = "STO";\n', '    //发行量30亿\n', '    uint256 constant public totalTokens = 30*10000*10000;\n', '    //小数位\n', '    uint8 constant public  totalDecimals = 18;   \n', '    //版本号\n', '    string constant private version = "20180908";\n', '    //接收以太坊地址\n', '    address private wallet;\n', '\n', '    constructor() public {\n', '        totalSupply = totalTokens*10**uint256(totalDecimals);\n', '        balances[msg.sender] = totalSupply;\n', '        wallet = msg.sender;\n', '    }\n', '\n', '    /**\n', '    *@dev 获取名称\n', '     */\n', '    function name() public view returns (string){\n', '        return tokenName;\n', '    }\n', '\n', '    /**\n', '    *@dev 获取代币符号\n', '     */\n', '    function symbol() public view returns (string){\n', '        return tokenSymbol;\n', '    }\n', '\n', '    /**\n', '    *@dev 支持几位小数\n', '     */\n', '    function decimals() public view returns (uint8){\n', '        return totalDecimals;\n', '    }\n', '}']