['pragma solidity ^0.4.16;\n', 'contract owned {\n', '    address public owner;\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', 'contract ExpressCoin is owned {\n', '    string public constant name = "ExpressCoin";\n', '    string public constant symbol = "XPC";\n', '    uint public constant decimals = 8;\n', '    uint constant ONETOKEN = 10 ** uint(decimals);\n', '    uint constant MILLION = 1000000; \n', '    uint public totalSupply;\n', '    constructor() public {\n', '        totalSupply = 88 * MILLION * ONETOKEN;                        \n', '        balanceOf[msg.sender] = totalSupply;                            \n', '    }\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    function transfer(address _to, uint256 _value) public {\n', '        _transferXToken(msg.sender, _to, _value);\n', '    }\n', '    function _transferXToken(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '    function() payable public { }\n', '\n', '    function withdrawEther() onlyOwner public{\n', '        owner.transfer(this.balance);\n', '    }\n', '    function mint(address target, uint256 token) onlyOwner public {\n', '        balanceOf[target] += token;\n', '        totalSupply += token;\n', '        emit Transfer(0, this, token);\n', '        emit Transfer(this, target, token);\n', '    }\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   \n', '        balanceOf[msg.sender] -= _value;            \n', '        totalSupply -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', 'contract owned {\n', '    address public owner;\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', 'contract ExpressCoin is owned {\n', '    string public constant name = "ExpressCoin";\n', '    string public constant symbol = "XPC";\n', '    uint public constant decimals = 8;\n', '    uint constant ONETOKEN = 10 ** uint(decimals);\n', '    uint constant MILLION = 1000000; \n', '    uint public totalSupply;\n', '    constructor() public {\n', '        totalSupply = 88 * MILLION * ONETOKEN;                        \n', '        balanceOf[msg.sender] = totalSupply;                            \n', '    }\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    function transfer(address _to, uint256 _value) public {\n', '        _transferXToken(msg.sender, _to, _value);\n', '    }\n', '    function _transferXToken(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '    function() payable public { }\n', '\n', '    function withdrawEther() onlyOwner public{\n', '        owner.transfer(this.balance);\n', '    }\n', '    function mint(address target, uint256 token) onlyOwner public {\n', '        balanceOf[target] += token;\n', '        totalSupply += token;\n', '        emit Transfer(0, this, token);\n', '        emit Transfer(this, target, token);\n', '    }\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   \n', '        balanceOf[msg.sender] -= _value;            \n', '        totalSupply -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '}']
