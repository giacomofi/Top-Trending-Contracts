['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '}\n', '\n', 'contract BSPVesting {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '\n', '  // beneficiary after released\n', '  address public beneficiary = 0xb790f6DBd477C7125b13a8Bb3a67771027Abd402;\n', '  // BSP contract address\n', '  ERC20Basic public BSPToken = ERC20Basic(0x5d551fA77ec2C7dd1387B626c4f33235c3885199);\n', '\n', '  // lock 18 months, start at 2020/01/01 00:00:00 (UTC+8)\n', '  uint256 public start = 1577808000;\n', '  // release in 15 months\n', '  uint256 public duration = 15 * 30 days;\n', '\n', '  uint256 public released;\n', '\n', '  function release() public {\n', '\n', '    uint256 unreleased = releasableAmount();\n', '    require(unreleased > 0);\n', '\n', '    released = released.add(unreleased);\n', '    BSPToken.safeTransfer(beneficiary, unreleased);\n', '\n', '    emit Released(unreleased);\n', '  }\n', '\n', '  function releasableAmount() public view returns (uint256) {\n', '    return vestedAmount().sub(released);\n', '  }\n', '\n', '  function vestedAmount() public view returns (uint256) {\n', '    uint256 currentBalance = BSPToken.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released);\n', '\n', '    if (block.timestamp >= start.add(duration)) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '    }\n', '  }\n', '\n', '  function () public payable {\n', '    revert ();\n', '  }\n', '\n', '}']