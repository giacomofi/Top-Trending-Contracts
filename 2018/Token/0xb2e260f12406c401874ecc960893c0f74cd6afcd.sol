['pragma solidity ^0.4.18;\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', 'contract BitUPToken is ERC20, Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '/*----------------- Token Information -----------------*/\n', '\n', '    string public constant name = "BitUP Token";\n', '    string public constant symbol = "BUT";\n', '\n', '    uint8 public decimals = 18;                            // (ERC20 API) Decimal precision, factor is 1e18\n', '    \n', '    mapping (address => uint256) balances;                 // User&#39;s balances table\n', '    mapping (address => mapping (address => uint256)) allowed; // User&#39;s allowances table\n', '\n', '/*----------------- Alloc Information -----------------*/\n', '\n', '    uint256 public totalSupply;\n', '    \n', '    uint256 public presaleSupply;                          // Pre-sale supply\n', '    uint256 public angelSupply;                          // Angel supply\n', '    uint256 public marketingSupply;                           // marketing supply\n', '    uint256 public foundationSupply;                       // /Foundation supply\n', '    uint256 public teamSupply;                          //  Team supply\n', '    uint256 public communitySupply;                 //  Community supply\n', '    \n', '    uint256 public teamSupply6Months;                          //Amount of Team supply could be released after 6 months\n', '    uint256 public teamSupply12Months;                          //Amount of Team supply could be released after 12 months\n', '    uint256 public teamSupply18Months;                          //Amount of Team supply could be released after 18 months\n', '    uint256 public teamSupply24Months;                          //Amount of Team supply could be released after 24 months\n', '\n', '    uint256 public TeamLockingPeriod6Months;                  // Locking period for team&#39;s supply, release 1/4 per 6 months\n', '    uint256 public TeamLockingPeriod12Months;                  // Locking period for team&#39;s supply, release 1/4 per 6 months\n', '    uint256 public TeamLockingPeriod18Months;                  // Locking period for team&#39;s supply, release 1/4 per 6 months\n', '    uint256 public TeamLockingPeriod24Months;                  // Locking period for team&#39;s supply, release 1/4 per 6 months\n', '    \n', '    address public presaleAddress;                       // Presale address\n', '    address public angelAddress;                        // Angel address\n', '    address public marketingAddress;                       // marketing address\n', '    address public foundationAddress;                      // Foundation address\n', '    address public teamAddress;                         // Team address\n', '    address public communityAddress;                         // Community address    \n', '\n', '    function () {\n', '         //if ether is sent to this address, send it back.\n', '         //throw;\n', '         require(false);\n', '    }\n', '\n', '/*----------------- Modifiers -----------------*/\n', '\n', '    modifier nonZeroAddress(address _to) {                 // Ensures an address is provided\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAmount(uint _amount) {                 // Ensures a non-zero amount\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroValue() {                              // Ensures a non-zero value is passed\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    modifier checkTeamLockingPeriod6Months() {                 // Ensures locking period is over\n', '        assert(now >= TeamLockingPeriod6Months);\n', '        _;\n', '    }\n', '    \n', '    modifier checkTeamLockingPeriod12Months() {                 // Ensures locking period is over\n', '        assert(now >= TeamLockingPeriod12Months);\n', '        _;\n', '    }\n', '    \n', '    modifier checkTeamLockingPeriod18Months() {                 // Ensures locking period is over\n', '        assert(now >= TeamLockingPeriod18Months);\n', '        _;\n', '    }\n', '    \n', '    modifier checkTeamLockingPeriod24Months() {                 // Ensures locking period is over\n', '        assert(now >= TeamLockingPeriod24Months);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyTeam() {                             // Ensures only team can call the function\n', '        require(msg.sender == teamAddress);\n', '        _;\n', '    }\n', '    \n', '/*----------------- Burn -----------------*/\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        // balances[burner] = balances[burner].sub(_value);\n', '        decrementBalance(burner, _value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '/*----------------- Token API -----------------*/\n', '\n', '    // -------------------------------------------------\n', '    // Total supply\n', '    // -------------------------------------------------\n', '    function totalSupply() constant returns (uint256){\n', '        return totalSupply;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Transfers amount to address\n', '    // -------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        require(balanceOf(msg.sender) >= _amount);\n', '        uint previousBalances = balances[msg.sender] + balances[_to];\n', '        addToBalance(_to, _amount);\n', '        decrementBalance(msg.sender, _amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        assert(balances[msg.sender] + balances[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Transfers from one address to another (need allowance to be called first)\n', '    // -------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\n', '        require(balanceOf(_from) >= _amount);\n', '        require(allowance(_from, msg.sender) >= _amount);\n', '        uint previousBalances = balances[_from] + balances[_to];\n', '        decrementBalance(_from, _amount);\n', '        addToBalance(_to, _amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Approves another address a certain amount of FUEL\n', '    // -------------------------------------------------\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require((_value == 0) || (allowance(msg.sender, _spender) == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Gets an address&#39;s FUEL allowance\n', '    // -------------------------------------------------\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Gets the FUEL balance of any address\n', '    // -------------------------------------------------\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Contract&#39;s constructor\n', '    // -------------------------------------------------\n', '    function BitUPToken() {\n', '        totalSupply  =    1000000000 * 1e18;               // 100% - 1 billion total BUT with 18 decimals\n', '\n', '        presaleSupply =    400000000 * 1e18;               //  40% -  400 million BUT pre-crowdsale\n', '        angelSupply =       50000000 * 1e18;               //  5% - 50 million BUT for the angel crowdsale\n', '        teamSupply =       200000000 * 1e18;               //  20% -  200 million BUT for team. 1/4 part released per 6 months\n', '        foundationSupply = 150000000 * 1e18;               //  15% -  300 million BUT for foundation/incentivising efforts\n', '        marketingSupply =  100000000 * 1e18;       //  10% -  100 million BUT for \n', '        communitySupply =  100000000 * 1e18;       //  10% -  100 million BUT for      \n', '        \n', '        teamSupply6Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n', '        teamSupply12Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n', '        teamSupply18Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n', '        teamSupply24Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n', '        \n', '        angelAddress    = 0xeF01453A730486d262D0b490eF1aDBBF62C2Fe00;                         // Angel address\n', '        presaleAddress = 0x2822332F63a6b80E21cEA5C8c43Cb6f393eb5703;                         // Presale address\n', '        teamAddress = 0x8E199e0c1DD38d455815E11dc2c9A64D6aD893B7;                         // Team address\n', '        foundationAddress = 0xcA972ac76F4Db643C30b86E4A9B54EaBB88Ce5aD;                         // Foundation address\n', '        marketingAddress = 0xd2631280F7f0472271Ae298aF034eBa549d792EA;                         // marketing address\n', '        communityAddress = 0xF691e8b2B2293D3d3b06ecdF217973B40258208C;                         //Community address\n', '        \n', '        \n', '        TeamLockingPeriod6Months = now.add(180 * 1 days); // 180 days locking period\n', '        TeamLockingPeriod12Months = now.add(360 * 1 days); // 360 days locking period\n', '        TeamLockingPeriod18Months = now.add(450 * 1 days); // 450 days locking period\n', '        TeamLockingPeriod24Months = now.add(730 * 1 days); // 730 days locking period\n', '        \n', '        addToBalance(foundationAddress, foundationSupply);\n', '        foundationSupply = 0;\n', '        addToBalance(marketingAddress, marketingSupply);\n', '        marketingSupply = 0;\n', '        addToBalance(communityAddress, communitySupply);\n', '        communitySupply = 0;\n', '        addToBalance(presaleAddress, presaleSupply);\n', '        presaleSupply = 0;\n', '        addToBalance(angelAddress, angelSupply);\n', '        angelSupply = 0;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Releases 1/4 of team supply after 6 months\n', '    // -------------------------------------------------\n', '    function releaseTeamTokensAfter6Months() checkTeamLockingPeriod6Months onlyTeam returns(bool success) {\n', '        require(teamSupply6Months > 0);\n', '        addToBalance(teamAddress, teamSupply6Months);\n', '        Transfer(0x0, teamAddress, teamSupply6Months);\n', '        teamSupply6Months = 0;\n', '        teamSupply.sub(teamSupply6Months);\n', '        return true;\n', '    }\n', '    \n', '    // -------------------------------------------------\n', '    // Releases 1/4 of team supply after 12 months\n', '    // -------------------------------------------------\n', '    function releaseTeamTokensAfter12Months() checkTeamLockingPeriod12Months onlyTeam returns(bool success) {\n', '        require(teamSupply12Months > 0);\n', '        addToBalance(teamAddress, teamSupply12Months);\n', '        Transfer(0x0, teamAddress, teamSupply12Months);\n', '        teamSupply12Months = 0;\n', '        teamSupply.sub(teamSupply12Months);\n', '        return true;\n', '    }\n', '    \n', '    // -------------------------------------------------\n', '    // Releases 1/4 of team supply after 18 months\n', '    // -------------------------------------------------\n', '    function releaseTeamTokensAfter18Months() checkTeamLockingPeriod18Months onlyTeam returns(bool success) {\n', '        require(teamSupply18Months > 0);\n', '        addToBalance(teamAddress, teamSupply18Months);\n', '        Transfer(0x0, teamAddress, teamSupply18Months);\n', '        teamSupply18Months = 0;\n', '        teamSupply.sub(teamSupply18Months);\n', '        return true;\n', '    }\n', '    \n', '    // -------------------------------------------------\n', '    // Releases 1/4 of team supply after 24 months\n', '    // -------------------------------------------------\n', '    function releaseTeamTokensAfter24Months() checkTeamLockingPeriod24Months onlyTeam returns(bool success) {\n', '        require(teamSupply24Months > 0);\n', '        addToBalance(teamAddress, teamSupply24Months);\n', '        Transfer(0x0, teamAddress, teamSupply24Months);\n', '        teamSupply24Months = 0;\n', '        teamSupply.sub(teamSupply24Months);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Adds to balance\n', '    // -------------------------------------------------\n', '    function addToBalance(address _address, uint _amount) internal {\n', '        balances[_address] = SafeMath.add(balances[_address], _amount);\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Removes from balance\n', '    // -------------------------------------------------\n', '    function decrementBalance(address _address, uint _amount) internal {\n', '        balances[_address] = SafeMath.sub(balances[_address], _amount);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', 'contract BitUPToken is ERC20, Ownable {\n', '\n', '    using SafeMath for uint;\n', '\n', '/*----------------- Token Information -----------------*/\n', '\n', '    string public constant name = "BitUP Token";\n', '    string public constant symbol = "BUT";\n', '\n', '    uint8 public decimals = 18;                            // (ERC20 API) Decimal precision, factor is 1e18\n', '    \n', "    mapping (address => uint256) balances;                 // User's balances table\n", "    mapping (address => mapping (address => uint256)) allowed; // User's allowances table\n", '\n', '/*----------------- Alloc Information -----------------*/\n', '\n', '    uint256 public totalSupply;\n', '    \n', '    uint256 public presaleSupply;                          // Pre-sale supply\n', '    uint256 public angelSupply;                          // Angel supply\n', '    uint256 public marketingSupply;                           // marketing supply\n', '    uint256 public foundationSupply;                       // /Foundation supply\n', '    uint256 public teamSupply;                          //  Team supply\n', '    uint256 public communitySupply;                 //  Community supply\n', '    \n', '    uint256 public teamSupply6Months;                          //Amount of Team supply could be released after 6 months\n', '    uint256 public teamSupply12Months;                          //Amount of Team supply could be released after 12 months\n', '    uint256 public teamSupply18Months;                          //Amount of Team supply could be released after 18 months\n', '    uint256 public teamSupply24Months;                          //Amount of Team supply could be released after 24 months\n', '\n', "    uint256 public TeamLockingPeriod6Months;                  // Locking period for team's supply, release 1/4 per 6 months\n", "    uint256 public TeamLockingPeriod12Months;                  // Locking period for team's supply, release 1/4 per 6 months\n", "    uint256 public TeamLockingPeriod18Months;                  // Locking period for team's supply, release 1/4 per 6 months\n", "    uint256 public TeamLockingPeriod24Months;                  // Locking period for team's supply, release 1/4 per 6 months\n", '    \n', '    address public presaleAddress;                       // Presale address\n', '    address public angelAddress;                        // Angel address\n', '    address public marketingAddress;                       // marketing address\n', '    address public foundationAddress;                      // Foundation address\n', '    address public teamAddress;                         // Team address\n', '    address public communityAddress;                         // Community address    \n', '\n', '    function () {\n', '         //if ether is sent to this address, send it back.\n', '         //throw;\n', '         require(false);\n', '    }\n', '\n', '/*----------------- Modifiers -----------------*/\n', '\n', '    modifier nonZeroAddress(address _to) {                 // Ensures an address is provided\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAmount(uint _amount) {                 // Ensures a non-zero amount\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroValue() {                              // Ensures a non-zero value is passed\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    modifier checkTeamLockingPeriod6Months() {                 // Ensures locking period is over\n', '        assert(now >= TeamLockingPeriod6Months);\n', '        _;\n', '    }\n', '    \n', '    modifier checkTeamLockingPeriod12Months() {                 // Ensures locking period is over\n', '        assert(now >= TeamLockingPeriod12Months);\n', '        _;\n', '    }\n', '    \n', '    modifier checkTeamLockingPeriod18Months() {                 // Ensures locking period is over\n', '        assert(now >= TeamLockingPeriod18Months);\n', '        _;\n', '    }\n', '    \n', '    modifier checkTeamLockingPeriod24Months() {                 // Ensures locking period is over\n', '        assert(now >= TeamLockingPeriod24Months);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyTeam() {                             // Ensures only team can call the function\n', '        require(msg.sender == teamAddress);\n', '        _;\n', '    }\n', '    \n', '/*----------------- Burn -----------------*/\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        // balances[burner] = balances[burner].sub(_value);\n', '        decrementBalance(burner, _value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '/*----------------- Token API -----------------*/\n', '\n', '    // -------------------------------------------------\n', '    // Total supply\n', '    // -------------------------------------------------\n', '    function totalSupply() constant returns (uint256){\n', '        return totalSupply;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Transfers amount to address\n', '    // -------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        require(balanceOf(msg.sender) >= _amount);\n', '        uint previousBalances = balances[msg.sender] + balances[_to];\n', '        addToBalance(_to, _amount);\n', '        decrementBalance(msg.sender, _amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        assert(balances[msg.sender] + balances[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Transfers from one address to another (need allowance to be called first)\n', '    // -------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\n', '        require(balanceOf(_from) >= _amount);\n', '        require(allowance(_from, msg.sender) >= _amount);\n', '        uint previousBalances = balances[_from] + balances[_to];\n', '        decrementBalance(_from, _amount);\n', '        addToBalance(_to, _amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Approves another address a certain amount of FUEL\n', '    // -------------------------------------------------\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require((_value == 0) || (allowance(msg.sender, _spender) == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', "    // Gets an address's FUEL allowance\n", '    // -------------------------------------------------\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Gets the FUEL balance of any address\n', '    // -------------------------------------------------\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // -------------------------------------------------\n', "    // Contract's constructor\n", '    // -------------------------------------------------\n', '    function BitUPToken() {\n', '        totalSupply  =    1000000000 * 1e18;               // 100% - 1 billion total BUT with 18 decimals\n', '\n', '        presaleSupply =    400000000 * 1e18;               //  40% -  400 million BUT pre-crowdsale\n', '        angelSupply =       50000000 * 1e18;               //  5% - 50 million BUT for the angel crowdsale\n', '        teamSupply =       200000000 * 1e18;               //  20% -  200 million BUT for team. 1/4 part released per 6 months\n', '        foundationSupply = 150000000 * 1e18;               //  15% -  300 million BUT for foundation/incentivising efforts\n', '        marketingSupply =  100000000 * 1e18;       //  10% -  100 million BUT for \n', '        communitySupply =  100000000 * 1e18;       //  10% -  100 million BUT for      \n', '        \n', '        teamSupply6Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n', '        teamSupply12Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n', '        teamSupply18Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n', '        teamSupply24Months = 50000000 * 1e18;               // team supply release 1/4 per 6 months\n', '        \n', '        angelAddress    = 0xeF01453A730486d262D0b490eF1aDBBF62C2Fe00;                         // Angel address\n', '        presaleAddress = 0x2822332F63a6b80E21cEA5C8c43Cb6f393eb5703;                         // Presale address\n', '        teamAddress = 0x8E199e0c1DD38d455815E11dc2c9A64D6aD893B7;                         // Team address\n', '        foundationAddress = 0xcA972ac76F4Db643C30b86E4A9B54EaBB88Ce5aD;                         // Foundation address\n', '        marketingAddress = 0xd2631280F7f0472271Ae298aF034eBa549d792EA;                         // marketing address\n', '        communityAddress = 0xF691e8b2B2293D3d3b06ecdF217973B40258208C;                         //Community address\n', '        \n', '        \n', '        TeamLockingPeriod6Months = now.add(180 * 1 days); // 180 days locking period\n', '        TeamLockingPeriod12Months = now.add(360 * 1 days); // 360 days locking period\n', '        TeamLockingPeriod18Months = now.add(450 * 1 days); // 450 days locking period\n', '        TeamLockingPeriod24Months = now.add(730 * 1 days); // 730 days locking period\n', '        \n', '        addToBalance(foundationAddress, foundationSupply);\n', '        foundationSupply = 0;\n', '        addToBalance(marketingAddress, marketingSupply);\n', '        marketingSupply = 0;\n', '        addToBalance(communityAddress, communitySupply);\n', '        communitySupply = 0;\n', '        addToBalance(presaleAddress, presaleSupply);\n', '        presaleSupply = 0;\n', '        addToBalance(angelAddress, angelSupply);\n', '        angelSupply = 0;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Releases 1/4 of team supply after 6 months\n', '    // -------------------------------------------------\n', '    function releaseTeamTokensAfter6Months() checkTeamLockingPeriod6Months onlyTeam returns(bool success) {\n', '        require(teamSupply6Months > 0);\n', '        addToBalance(teamAddress, teamSupply6Months);\n', '        Transfer(0x0, teamAddress, teamSupply6Months);\n', '        teamSupply6Months = 0;\n', '        teamSupply.sub(teamSupply6Months);\n', '        return true;\n', '    }\n', '    \n', '    // -------------------------------------------------\n', '    // Releases 1/4 of team supply after 12 months\n', '    // -------------------------------------------------\n', '    function releaseTeamTokensAfter12Months() checkTeamLockingPeriod12Months onlyTeam returns(bool success) {\n', '        require(teamSupply12Months > 0);\n', '        addToBalance(teamAddress, teamSupply12Months);\n', '        Transfer(0x0, teamAddress, teamSupply12Months);\n', '        teamSupply12Months = 0;\n', '        teamSupply.sub(teamSupply12Months);\n', '        return true;\n', '    }\n', '    \n', '    // -------------------------------------------------\n', '    // Releases 1/4 of team supply after 18 months\n', '    // -------------------------------------------------\n', '    function releaseTeamTokensAfter18Months() checkTeamLockingPeriod18Months onlyTeam returns(bool success) {\n', '        require(teamSupply18Months > 0);\n', '        addToBalance(teamAddress, teamSupply18Months);\n', '        Transfer(0x0, teamAddress, teamSupply18Months);\n', '        teamSupply18Months = 0;\n', '        teamSupply.sub(teamSupply18Months);\n', '        return true;\n', '    }\n', '    \n', '    // -------------------------------------------------\n', '    // Releases 1/4 of team supply after 24 months\n', '    // -------------------------------------------------\n', '    function releaseTeamTokensAfter24Months() checkTeamLockingPeriod24Months onlyTeam returns(bool success) {\n', '        require(teamSupply24Months > 0);\n', '        addToBalance(teamAddress, teamSupply24Months);\n', '        Transfer(0x0, teamAddress, teamSupply24Months);\n', '        teamSupply24Months = 0;\n', '        teamSupply.sub(teamSupply24Months);\n', '        return true;\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Adds to balance\n', '    // -------------------------------------------------\n', '    function addToBalance(address _address, uint _amount) internal {\n', '        balances[_address] = SafeMath.add(balances[_address], _amount);\n', '    }\n', '\n', '    // -------------------------------------------------\n', '    // Removes from balance\n', '    // -------------------------------------------------\n', '    function decrementBalance(address _address, uint _amount) internal {\n', '        balances[_address] = SafeMath.sub(balances[_address], _amount);\n', '    }\n', '}']
