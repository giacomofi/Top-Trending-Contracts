['/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\n', ' *\n', ' * The BG token contract bases on the ERC20 standard token contracts \n', ' * Company Optimum Consulting - Courbevoie\n', ' * */\n', ' \n', 'pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event PausePublic(bool newState);\n', '  event PauseOwnerAdmin(bool newState);\n', '\n', '  bool public pausedPublic = true;\n', '  bool public pausedOwnerAdmin = false;\n', '  uint public endDate;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable based on pause states.\n', '   */\n', '  modifier whenNotPaused() {\n', '    if(pausedPublic) {\n', '      if(!pausedOwnerAdmin) {\n', '        require(msg.sender == owner);\n', '      } else {\n', '        revert();\n', '      }\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to set new pause flags\n', '   * pausedPublic can&#39;t be false while pausedOwnerAdmin is true\n', '   */\n', '  function pause(bool newPausedPublic, bool newPausedOwnerAdmin) onlyOwner public {\n', '    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));\n', '\n', '    pausedPublic = newPausedPublic;\n', '    pausedOwnerAdmin = newPausedOwnerAdmin;\n', '\n', '    emit PausePublic(newPausedPublic);\n', '    emit PauseOwnerAdmin(newPausedOwnerAdmin);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken, Pausable {\n', '    using SafeMath for uint256;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  }\n', ' \n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256  _value)\n', '        public onlyOwner\n', '    {\n', '        require(_value > 0);\n', '\t\trequire(balances[msg.sender] >= _value);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '    event Burn(address indexed burner, uint256  indexed value);\n', '} \n', '\n', 'contract BGToken is StandardToken , BurnableToken  {\n', '    using SafeMath for uint256;\n', '    string public constant name = "BlueGold";\n', '    string public constant symbol = "BG";\n', '    uint8 public constant decimals = 18;\t\n', '\t\n', '\t// wallets address for allocation\t\n', '\taddress public Bounties_Wallet = 0x2805C02FE839210E194Fc4a12DaB683a34Ad95EF; // 5% : Bounty\n', '\taddress public Team_Wallet = 0x6C42c4EC37d0F45E2d9C2287f399E14Ea2b3B77d; // 8% : Equity & Team\n', '\taddress public OEM_Wallet = 0x278cB54ae3B7851D3262A307cb6780b642A29485; // 10% : Community Builting, Biz Dev\n', '\taddress public LA_wallet = 0x1669e7910e27b1400B5567eE360de2c5Ee964859; //8% : Legal & advisors\n', '\t\t\n', '\taddress public tokenWallet = 0xDb3D4293981adeEC2A258c0b8046eAdb20D3ff13;     \n', '\tuint256 public constant INITIAL_SUPPLY = 100000000 ether;\t\n', '\t\n', '\t/// Base exchange rate is set to 1 ETH = 460 BG.\n', '\tuint256 tokenRate = 460; \t\n', '\t\n', '    function BGToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\n', '\t\t// InitialDistribution\n', '\t\t// 31% ---> 31000000\n', '\t\tbalances[Bounties_Wallet] = INITIAL_SUPPLY.mul(5).div(100) ;\n', '\t\tbalances[Team_Wallet] = INITIAL_SUPPLY.mul(8).div(100);\n', '\t\tbalances[OEM_Wallet] = INITIAL_SUPPLY.mul(10).div(100) ;\n', '\t\tbalances[LA_wallet] = INITIAL_SUPPLY.mul(8).div(100) ;\n', '\t\t\n', '\t\t// 69% ---> 69000000\n', '        balances[tokenWallet] = INITIAL_SUPPLY.mul(69).div(100);\n', '\t\t\t\t\n', '        emit Transfer(0x0, Bounties_Wallet, balances[Bounties_Wallet]);\n', '        emit Transfer(0x0, Team_Wallet, balances[Team_Wallet]);\n', '\t\temit Transfer(0x0, OEM_Wallet, balances[OEM_Wallet]);\n', '        emit Transfer(0x0, LA_wallet, balances[LA_wallet]);\n', '\t\t\t\t\n', '\t\temit Transfer(0x0, tokenWallet, balances[tokenWallet]);\n', '        endDate = _endDate;\t\t\t\n', '    }\n', '\t\n', '    uint constant _endDate = 1546297199; /// Close Main Sale -  Monday 31 December 2018 23:59:59 \n', '\tuint256 Bonus = 30; \t\n', '\tuint256 extraBonus = 20; \t\t\n', '\n', '    struct Stat {\n', '        uint currentFundraiser;\n', '        uint otherAmount;\n', '        uint ethAmount;\n', '        uint txCounter;\n', '    }    \n', '    Stat public stat;    \t\n', '\n', '\t/// Maximum tokens to be allocated on the sale (69% of the hard cap)\n', '    uint256 IcoCap = INITIAL_SUPPLY;\n', '\t\n', '\t /**\n', '     * @dev modifier to allow actions only when ICO end date is not now\n', '     */\n', '\tmodifier isRunning {\n', '        require (endDate >= now);\n', '        _;\n', '    }\n', '\t\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function () payable isRunning public {\n', '        if (msg.value < 0.001 ether) revert();\n', '        buyTokens();\n', '    }\t\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buyTokens() internal {\t\t\n', '\t\t/// only accept a minimum amount of ETH?\n', '        require(msg.value >= 0.001 ether);\n', '        uint256 tokens ;\n', '\t\tuint256 xAmount = msg.value;\n', '\t\tuint256 toReturnEth;\n', '\t\tuint256 toTokensReturn;\n', '\t\tuint256 balanceIco ;\t\n', '\t\tuint256 AllBonus = 0; \n', '\t\t\n', '\t\tbalanceIco = IcoCap;\n', '\t\tbalanceIco = balanceIco.sub(stat.currentFundraiser);\t\n', '\t\t\n', '\t\tAllBonus= Bonus.add(extraBonus);\n', '\t\ttokens = xAmount.mul(tokenRate);\n', '\t\ttokens = (tokens.mul(100)).div(100 - (AllBonus));\n', '\t\t\n', '\t\tif (balanceIco < tokens) {\n', '\t\t\ttoTokensReturn = tokens.sub(balanceIco);\n', '\t\t\ttoReturnEth = toTokensReturn.mul(tokenRate);\n', '\t\t}\t\t\t\n', '\n', '\t\tif (tokens > 0 )\n', '\t\t{\n', '\t\t\tif (balanceIco < tokens) {\t\n', '\t\t\t\t/// return  ETH\n', '\t\t\t\tif (toReturnEth <= xAmount) \n', '\t\t\t\t{\n', '\t\t\t\t\tmsg.sender.transfer(toReturnEth);\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t_EnvoisTokens(balanceIco, xAmount - toReturnEth);\n', '\t\t\t\t}\n', '\t\t\t\t\n', '\t\t\t} else {\n', '\t\t\t\t_EnvoisTokens(tokens, xAmount);\n', '\t\t\t}\n', '\t\t} else {\n', '            revert();\n', '\t\t}\n', '    }\n', '\n', '\t/// @dev issue tokens for a single buyer\n', '\t/// @dev Issue token based on Ether received.\n', '    /// @param _amount the amount of tokens to send\n', '\t/// @param _ethers the amount of ether it will receive\n', '    function _EnvoisTokens(uint _amount, uint _ethers) internal {\n', '\t\t/// sends tokens ODEEP to the buyer\n', '        sendTokens(msg.sender, _amount);\n', '        stat.currentFundraiser += _amount;\n', '\t\t/// sends ether to the seller\n', '        tokenWallet.transfer(_ethers);\n', '        stat.ethAmount += _ethers;\n', '        stat.txCounter += 1;\n', '    }\n', '\n', '\t/// @dev issue tokens for a single buyer\n', '\t/// @dev Issue token based on Ether received.\n', '    /// @param _to address to send to\n', '\t/// @param _amount the amount of tokens to send\n', '    function sendTokens(address _to, uint _amount) internal {\n', '        require(_amount <= balances[tokenWallet]);\n', '        balances[tokenWallet] -= _amount;\n', '        balances[_to] += _amount;\n', '        emit Transfer(tokenWallet, _to, _amount);\n', '    }\n', '\t\n', '\t/// @dev issue tokens for a single buyer\n', '    /// @param _to address to send to\n', '\t/// @param _amount the amount of tokens to send\n', '\t/// @param _otherAmount the amount of pay\n', '    function _sendTokensManually(address _to, uint _amount, uint _otherAmount) public onlyOwner {\n', '        require(_to != address(0));\n', '\t\tsendTokens(_to, _amount);\t\t\n', '\t\tstat.currentFundraiser += _amount;\n', '        stat.otherAmount += _otherAmount;\n', '        stat.txCounter += 1;\n', '    }\t\n', '\n', '\t/// @dev modify ICO cap.\n', '\t/// @param newIcoCap the new Cap. \n', '    function setIcoCap(uint256 newIcoCap) public onlyOwner {\n', '        IcoCap = newIcoCap;\n', '    }\n', '\t\n', '\t/// @dev Returns the current Cap.\n', '\tfunction getIcoCap() public constant returns (uint256) {\n', '        return (IcoCap);\n', '    }    \t\n', '\t\t\n', '\t/// @dev modify Base exchange rate.\n', '\t/// @param newTokenRate the new rate. \n', '    function setTokenRate(uint newTokenRate) public onlyOwner {\n', '        tokenRate = newTokenRate;\n', '    }\n', '\t\n', '\t/// @dev Returns the current rate.\n', '\tfunction getTokenRate() public constant returns (uint) {\n', '        return (tokenRate);\n', '    }    \t\n', '\t\n', '\t/// @dev modify Bonus.\n', '\t/// @param newBonus the new Bonus. \n', '    function setBonus(uint newBonus) public onlyOwner {\n', '        Bonus = newBonus;\t\t\n', '    }\n', '\t\n', '\t/// @dev Returns the current Bonus.\n', '\tfunction getBonus() public constant returns (uint) {\n', '        return (Bonus);\n', '    } \t\n', '\t\n', '\t/// @dev modify ExtraBonus.\n', '\t/// @param newExtraBonus the new Bonus. \n', '    function setExtraBonus(uint newExtraBonus) public onlyOwner {\n', '        extraBonus = newExtraBonus;\n', '    }\n', '\t\n', '\t/// @dev Returns the current ExtraBonus.\n', '\tfunction getExtraBonus() public constant returns (uint) {\n', '        return (extraBonus);\n', '    } \t\n', '\t\n', '\t/// @dev modify endDate.\n', '\t/// @param newEndDate the new endDate. \n', '    function setEndDate(uint newEndDate) public onlyOwner {\n', '        endDate = newEndDate;\n', '    }\t\t\n', '\t\n', '}']
['/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\n', ' *\n', ' * The BG token contract bases on the ERC20 standard token contracts \n', ' * Company Optimum Consulting - Courbevoie\n', ' * */\n', ' \n', 'pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event PausePublic(bool newState);\n', '  event PauseOwnerAdmin(bool newState);\n', '\n', '  bool public pausedPublic = true;\n', '  bool public pausedOwnerAdmin = false;\n', '  uint public endDate;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable based on pause states.\n', '   */\n', '  modifier whenNotPaused() {\n', '    if(pausedPublic) {\n', '      if(!pausedOwnerAdmin) {\n', '        require(msg.sender == owner);\n', '      } else {\n', '        revert();\n', '      }\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to set new pause flags\n', "   * pausedPublic can't be false while pausedOwnerAdmin is true\n", '   */\n', '  function pause(bool newPausedPublic, bool newPausedOwnerAdmin) onlyOwner public {\n', '    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));\n', '\n', '    pausedPublic = newPausedPublic;\n', '    pausedOwnerAdmin = newPausedOwnerAdmin;\n', '\n', '    emit PausePublic(newPausedPublic);\n', '    emit PauseOwnerAdmin(newPausedOwnerAdmin);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken, Pausable {\n', '    using SafeMath for uint256;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  }\n', ' \n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256  _value)\n', '        public onlyOwner\n', '    {\n', '        require(_value > 0);\n', '\t\trequire(balances[msg.sender] >= _value);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '    event Burn(address indexed burner, uint256  indexed value);\n', '} \n', '\n', 'contract BGToken is StandardToken , BurnableToken  {\n', '    using SafeMath for uint256;\n', '    string public constant name = "BlueGold";\n', '    string public constant symbol = "BG";\n', '    uint8 public constant decimals = 18;\t\n', '\t\n', '\t// wallets address for allocation\t\n', '\taddress public Bounties_Wallet = 0x2805C02FE839210E194Fc4a12DaB683a34Ad95EF; // 5% : Bounty\n', '\taddress public Team_Wallet = 0x6C42c4EC37d0F45E2d9C2287f399E14Ea2b3B77d; // 8% : Equity & Team\n', '\taddress public OEM_Wallet = 0x278cB54ae3B7851D3262A307cb6780b642A29485; // 10% : Community Builting, Biz Dev\n', '\taddress public LA_wallet = 0x1669e7910e27b1400B5567eE360de2c5Ee964859; //8% : Legal & advisors\n', '\t\t\n', '\taddress public tokenWallet = 0xDb3D4293981adeEC2A258c0b8046eAdb20D3ff13;     \n', '\tuint256 public constant INITIAL_SUPPLY = 100000000 ether;\t\n', '\t\n', '\t/// Base exchange rate is set to 1 ETH = 460 BG.\n', '\tuint256 tokenRate = 460; \t\n', '\t\n', '    function BGToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '\n', '\t\t// InitialDistribution\n', '\t\t// 31% ---> 31000000\n', '\t\tbalances[Bounties_Wallet] = INITIAL_SUPPLY.mul(5).div(100) ;\n', '\t\tbalances[Team_Wallet] = INITIAL_SUPPLY.mul(8).div(100);\n', '\t\tbalances[OEM_Wallet] = INITIAL_SUPPLY.mul(10).div(100) ;\n', '\t\tbalances[LA_wallet] = INITIAL_SUPPLY.mul(8).div(100) ;\n', '\t\t\n', '\t\t// 69% ---> 69000000\n', '        balances[tokenWallet] = INITIAL_SUPPLY.mul(69).div(100);\n', '\t\t\t\t\n', '        emit Transfer(0x0, Bounties_Wallet, balances[Bounties_Wallet]);\n', '        emit Transfer(0x0, Team_Wallet, balances[Team_Wallet]);\n', '\t\temit Transfer(0x0, OEM_Wallet, balances[OEM_Wallet]);\n', '        emit Transfer(0x0, LA_wallet, balances[LA_wallet]);\n', '\t\t\t\t\n', '\t\temit Transfer(0x0, tokenWallet, balances[tokenWallet]);\n', '        endDate = _endDate;\t\t\t\n', '    }\n', '\t\n', '    uint constant _endDate = 1546297199; /// Close Main Sale -  Monday 31 December 2018 23:59:59 \n', '\tuint256 Bonus = 30; \t\n', '\tuint256 extraBonus = 20; \t\t\n', '\n', '    struct Stat {\n', '        uint currentFundraiser;\n', '        uint otherAmount;\n', '        uint ethAmount;\n', '        uint txCounter;\n', '    }    \n', '    Stat public stat;    \t\n', '\n', '\t/// Maximum tokens to be allocated on the sale (69% of the hard cap)\n', '    uint256 IcoCap = INITIAL_SUPPLY;\n', '\t\n', '\t /**\n', '     * @dev modifier to allow actions only when ICO end date is not now\n', '     */\n', '\tmodifier isRunning {\n', '        require (endDate >= now);\n', '        _;\n', '    }\n', '\t\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function () payable isRunning public {\n', '        if (msg.value < 0.001 ether) revert();\n', '        buyTokens();\n', '    }\t\n', '\n', '    /// @notice Buy tokens from contract by sending ether\n', '    function buyTokens() internal {\t\t\n', '\t\t/// only accept a minimum amount of ETH?\n', '        require(msg.value >= 0.001 ether);\n', '        uint256 tokens ;\n', '\t\tuint256 xAmount = msg.value;\n', '\t\tuint256 toReturnEth;\n', '\t\tuint256 toTokensReturn;\n', '\t\tuint256 balanceIco ;\t\n', '\t\tuint256 AllBonus = 0; \n', '\t\t\n', '\t\tbalanceIco = IcoCap;\n', '\t\tbalanceIco = balanceIco.sub(stat.currentFundraiser);\t\n', '\t\t\n', '\t\tAllBonus= Bonus.add(extraBonus);\n', '\t\ttokens = xAmount.mul(tokenRate);\n', '\t\ttokens = (tokens.mul(100)).div(100 - (AllBonus));\n', '\t\t\n', '\t\tif (balanceIco < tokens) {\n', '\t\t\ttoTokensReturn = tokens.sub(balanceIco);\n', '\t\t\ttoReturnEth = toTokensReturn.mul(tokenRate);\n', '\t\t}\t\t\t\n', '\n', '\t\tif (tokens > 0 )\n', '\t\t{\n', '\t\t\tif (balanceIco < tokens) {\t\n', '\t\t\t\t/// return  ETH\n', '\t\t\t\tif (toReturnEth <= xAmount) \n', '\t\t\t\t{\n', '\t\t\t\t\tmsg.sender.transfer(toReturnEth);\t\t\t\t\t\t\t\t\t\n', '\t\t\t\t\t_EnvoisTokens(balanceIco, xAmount - toReturnEth);\n', '\t\t\t\t}\n', '\t\t\t\t\n', '\t\t\t} else {\n', '\t\t\t\t_EnvoisTokens(tokens, xAmount);\n', '\t\t\t}\n', '\t\t} else {\n', '            revert();\n', '\t\t}\n', '    }\n', '\n', '\t/// @dev issue tokens for a single buyer\n', '\t/// @dev Issue token based on Ether received.\n', '    /// @param _amount the amount of tokens to send\n', '\t/// @param _ethers the amount of ether it will receive\n', '    function _EnvoisTokens(uint _amount, uint _ethers) internal {\n', '\t\t/// sends tokens ODEEP to the buyer\n', '        sendTokens(msg.sender, _amount);\n', '        stat.currentFundraiser += _amount;\n', '\t\t/// sends ether to the seller\n', '        tokenWallet.transfer(_ethers);\n', '        stat.ethAmount += _ethers;\n', '        stat.txCounter += 1;\n', '    }\n', '\n', '\t/// @dev issue tokens for a single buyer\n', '\t/// @dev Issue token based on Ether received.\n', '    /// @param _to address to send to\n', '\t/// @param _amount the amount of tokens to send\n', '    function sendTokens(address _to, uint _amount) internal {\n', '        require(_amount <= balances[tokenWallet]);\n', '        balances[tokenWallet] -= _amount;\n', '        balances[_to] += _amount;\n', '        emit Transfer(tokenWallet, _to, _amount);\n', '    }\n', '\t\n', '\t/// @dev issue tokens for a single buyer\n', '    /// @param _to address to send to\n', '\t/// @param _amount the amount of tokens to send\n', '\t/// @param _otherAmount the amount of pay\n', '    function _sendTokensManually(address _to, uint _amount, uint _otherAmount) public onlyOwner {\n', '        require(_to != address(0));\n', '\t\tsendTokens(_to, _amount);\t\t\n', '\t\tstat.currentFundraiser += _amount;\n', '        stat.otherAmount += _otherAmount;\n', '        stat.txCounter += 1;\n', '    }\t\n', '\n', '\t/// @dev modify ICO cap.\n', '\t/// @param newIcoCap the new Cap. \n', '    function setIcoCap(uint256 newIcoCap) public onlyOwner {\n', '        IcoCap = newIcoCap;\n', '    }\n', '\t\n', '\t/// @dev Returns the current Cap.\n', '\tfunction getIcoCap() public constant returns (uint256) {\n', '        return (IcoCap);\n', '    }    \t\n', '\t\t\n', '\t/// @dev modify Base exchange rate.\n', '\t/// @param newTokenRate the new rate. \n', '    function setTokenRate(uint newTokenRate) public onlyOwner {\n', '        tokenRate = newTokenRate;\n', '    }\n', '\t\n', '\t/// @dev Returns the current rate.\n', '\tfunction getTokenRate() public constant returns (uint) {\n', '        return (tokenRate);\n', '    }    \t\n', '\t\n', '\t/// @dev modify Bonus.\n', '\t/// @param newBonus the new Bonus. \n', '    function setBonus(uint newBonus) public onlyOwner {\n', '        Bonus = newBonus;\t\t\n', '    }\n', '\t\n', '\t/// @dev Returns the current Bonus.\n', '\tfunction getBonus() public constant returns (uint) {\n', '        return (Bonus);\n', '    } \t\n', '\t\n', '\t/// @dev modify ExtraBonus.\n', '\t/// @param newExtraBonus the new Bonus. \n', '    function setExtraBonus(uint newExtraBonus) public onlyOwner {\n', '        extraBonus = newExtraBonus;\n', '    }\n', '\t\n', '\t/// @dev Returns the current ExtraBonus.\n', '\tfunction getExtraBonus() public constant returns (uint) {\n', '        return (extraBonus);\n', '    } \t\n', '\t\n', '\t/// @dev modify endDate.\n', '\t/// @param newEndDate the new endDate. \n', '    function setEndDate(uint newEndDate) public onlyOwner {\n', '        endDate = newEndDate;\n', '    }\t\t\n', '\t\n', '}']
