['library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BlocVehicle is ERC20 {\n', '\n', '      using SafeMath for uint;\n', '      string public constant name = "BlocVehicle";\n', '      string public constant symbol = "VCL";\n', '      uint256 public constant decimals = 18;\n', '      uint256 _totalSupply = 1000000000 * (10 ** decimals);\n', '\n', '      mapping(address => uint256) balances;\n', '      mapping(address => mapping (address => uint256)) allowed;\n', '      mapping(address => bool) public frozenAccount;\n', '\n', '      event FrozenFunds(address target, bool frozen);\n', '\n', '\n', '      address public owner;\n', '\n', '      modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '      }\n', '\n', '      function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '      }\n', '\n', '      function burnTokens(address burnedAddress, uint256 amount) onlyOwner public {\n', '        require(burnedAddress != address(0));\n', '        require(amount > 0);\n', '        require(amount <= balances[burnedAddress]);\n', '        balances[burnedAddress] = balances[burnedAddress].sub(amount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '      }\n', '\n', '      function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '      }\n', '\n', '      function isFrozenAccount(address _addr) public constant returns (bool) {\n', '        return frozenAccount[_addr];\n', '      }\n', '\n', '      constructor() public {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '      }\n', '\n', '      function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value);\n', '        require(balances[_to].add(_value)  >= balances[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '\n', '        uint previousBalances = balances[_from].add(balances[_to]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balances[_from].add(balances[_to]) == previousBalances);\n', '      }\n', '\n', '      function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '      }\n', '\n', '      function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '      }\n', '\n', '      function totalSupply() public constant returns (uint256 supply) {\n', '        supply = _totalSupply;\n', '      }\n', '\n', '      function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '      }\n', '\n', '      function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '\n', '      function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '\n', '      function approve(address _spender, uint256 _value) public returns (bool success) {\n', '          allowed[msg.sender][_spender] = _value;\n', '          emit Approval(msg.sender, _spender, _value);\n', '          return true;\n', '      }\n', '\n', '      function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '      }\n', '}']
['library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BlocVehicle is ERC20 {\n', '\n', '      using SafeMath for uint;\n', '      string public constant name = "BlocVehicle";\n', '      string public constant symbol = "VCL";\n', '      uint256 public constant decimals = 18;\n', '      uint256 _totalSupply = 1000000000 * (10 ** decimals);\n', '\n', '      mapping(address => uint256) balances;\n', '      mapping(address => mapping (address => uint256)) allowed;\n', '      mapping(address => bool) public frozenAccount;\n', '\n', '      event FrozenFunds(address target, bool frozen);\n', '\n', '\n', '      address public owner;\n', '\n', '      modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '      }\n', '\n', '      function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '      }\n', '\n', '      function burnTokens(address burnedAddress, uint256 amount) onlyOwner public {\n', '        require(burnedAddress != address(0));\n', '        require(amount > 0);\n', '        require(amount <= balances[burnedAddress]);\n', '        balances[burnedAddress] = balances[burnedAddress].sub(amount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '      }\n', '\n', '      function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '      }\n', '\n', '      function isFrozenAccount(address _addr) public constant returns (bool) {\n', '        return frozenAccount[_addr];\n', '      }\n', '\n', '      constructor() public {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '      }\n', '\n', '      function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value);\n', '        require(balances[_to].add(_value)  >= balances[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '\n', '        uint previousBalances = balances[_from].add(balances[_to]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balances[_from].add(balances[_to]) == previousBalances);\n', '      }\n', '\n', '      function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '      }\n', '\n', '      function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '      }\n', '\n', '      function totalSupply() public constant returns (uint256 supply) {\n', '        supply = _totalSupply;\n', '      }\n', '\n', '      function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '      }\n', '\n', '      function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '\n', '      function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '\n', '      function approve(address _spender, uint256 _value) public returns (bool success) {\n', '          allowed[msg.sender][_spender] = _value;\n', '          emit Approval(msg.sender, _spender, _value);\n', '          return true;\n', '      }\n', '\n', '      function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '      }\n', '}']
