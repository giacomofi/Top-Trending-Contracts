['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title IHF\n', ' * @dev IHF is the ERC20 token of the Invictus Hyperion fund\n', '*/\n', '\n', 'contract IHF is StandardToken {\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "Invictus Hyperion";\n', '  string public symbol = "IHF";\n', '  uint8 public decimals = 18;\n', '  string public version = "1.0";\n', '\n', '  uint256 public fundingEndBlock;\n', '\n', '  // vesting fields\n', '  address public vestingContract;\n', '  bool private vestingSet = false;\n', '\n', '  address public fundWallet1;\n', '  address public fundWallet2;\n', '\n', '  bool public tradeable = false;\n', '\n', '  // maybe event for mint\n', '\n', '  modifier isTradeable { // exempt vestingContract and fundWallet to allow dev allocations\n', '      require(tradeable || msg.sender == fundWallet1 || msg.sender == vestingContract);\n', '      _;\n', '  }\n', '\n', '  modifier onlyFundWallets {\n', '      require(msg.sender == fundWallet1 || msg.sender == fundWallet2);\n', '      _;\n', '  }\n', '\n', '  // constructor\n', '  function IHF(address backupFundWallet, uint256 endBlockInput) public {\n', '      require(backupFundWallet != address(0));\n', '      require(block.number < endBlockInput);\n', '      fundWallet1 = msg.sender;\n', '      fundWallet2 = backupFundWallet;\n', '      fundingEndBlock = endBlockInput;\n', '  }\n', '\n', '  function setVestingContract(address vestingContractInput) external onlyFundWallets {\n', '      require(!vestingSet); // can only be called once\n', '      require(vestingContractInput != address(0));\n', '      vestingContract = vestingContractInput;\n', '      vestingSet = true;\n', '  }\n', '\n', '  function allocateTokens(address participant, uint256 amountTokens) private {\n', '      require(vestingSet);\n', '      // 2.5% of total allocated for Invictus Capital & Team\n', '      uint256 developmentAllocation = amountTokens.mul(25641025641025641).div(1000000000000000000);\n', '      uint256 newTokens = amountTokens.add(developmentAllocation);\n', '      // increase token supply, assign tokens to participant\n', '      totalSupply_ = totalSupply_.add(newTokens);\n', '      balances[participant] = balances[participant].add(amountTokens);\n', '      balances[vestingContract] = balances[vestingContract].add(developmentAllocation);\n', '      emit Transfer(address(0), participant, amountTokens);\n', '      emit Transfer(address(0), vestingContract, developmentAllocation);\n', '  }\n', '\n', '  function batchAllocate(address[] participants, uint256[] values) external onlyFundWallets returns(uint256) {\n', '      require(block.number < fundingEndBlock);\n', '      uint256 i = 0;\n', '      while (i < participants.length) {\n', '        allocateTokens(participants[i], values[i]);\n', '        i++;\n', '      }\n', '      return(i);\n', '  }\n', '\n', '  // @dev sets a users balance to zero, adjusts supply and dev allocation as well\n', '  function adjustBalance(address participant) external onlyFundWallets {\n', '      require(vestingSet);\n', '      require(block.number < fundingEndBlock);\n', '      uint256 amountTokens = balances[participant];\n', '      uint256 developmentAllocation = amountTokens.mul(25641025641025641).div(1000000000000000000);\n', '      uint256 removeTokens = amountTokens.add(developmentAllocation);\n', '      totalSupply_ = totalSupply_.sub(removeTokens);\n', '      balances[participant] = 0;\n', '      balances[vestingContract] = balances[vestingContract].sub(developmentAllocation);\n', '      emit Transfer(participant, address(0), amountTokens);\n', '      emit Transfer(vestingContract, address(0), developmentAllocation);\n', '  }\n', '\n', '  function changeFundWallet1(address newFundWallet) external onlyFundWallets {\n', '      require(newFundWallet != address(0));\n', '      fundWallet1 = newFundWallet;\n', '  }\n', '  function changeFundWallet2(address newFundWallet) external onlyFundWallets {\n', '      require(newFundWallet != address(0));\n', '      fundWallet2 = newFundWallet;\n', '  }\n', '\n', '  function updateFundingEndBlock(uint256 newFundingEndBlock) external onlyFundWallets {\n', '      require(block.number < fundingEndBlock);\n', '      require(block.number < newFundingEndBlock);\n', '      fundingEndBlock = newFundingEndBlock;\n', '  }\n', '\n', '  function enableTrading() external onlyFundWallets {\n', '      require(block.number > fundingEndBlock);\n', '      tradeable = true;\n', '  }\n', '\n', '  function() payable public {\n', '      require(false); // throw\n', '  }\n', '\n', '  function claimTokens(address _token) external onlyFundWallets {\n', '      require(_token != address(0));\n', '      ERC20Basic token = ERC20Basic(_token);\n', '      uint256 balance = token.balanceOf(this);\n', '      token.transfer(fundWallet1, balance);\n', '   }\n', '\n', '   function removeEth() external onlyFundWallets {\n', '      fundWallet1.transfer(address(this).balance);\n', '    }\n', '\n', '    function burn(uint256 _value) external onlyFundWallets {\n', '      require(balances[msg.sender] >= _value);\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[0x0] = balances[0x0].add(_value);\n', '      totalSupply_ = totalSupply_.sub(_value);\n', '      emit Transfer(msg.sender, 0x0, _value);\n', '    }\n', '\n', '   // prevent transfers until trading allowed\n', '   function transfer(address _to, uint256 _value) isTradeable public returns (bool success) {\n', '       return super.transfer(_to, _value);\n', '   }\n', '   function transferFrom(address _from, address _to, uint256 _value) isTradeable public returns (bool success) {\n', '       return super.transferFrom(_from, _to, _value);\n', '   }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title IHF\n', ' * @dev IHF is the ERC20 token of the Invictus Hyperion fund\n', '*/\n', '\n', 'contract IHF is StandardToken {\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "Invictus Hyperion";\n', '  string public symbol = "IHF";\n', '  uint8 public decimals = 18;\n', '  string public version = "1.0";\n', '\n', '  uint256 public fundingEndBlock;\n', '\n', '  // vesting fields\n', '  address public vestingContract;\n', '  bool private vestingSet = false;\n', '\n', '  address public fundWallet1;\n', '  address public fundWallet2;\n', '\n', '  bool public tradeable = false;\n', '\n', '  // maybe event for mint\n', '\n', '  modifier isTradeable { // exempt vestingContract and fundWallet to allow dev allocations\n', '      require(tradeable || msg.sender == fundWallet1 || msg.sender == vestingContract);\n', '      _;\n', '  }\n', '\n', '  modifier onlyFundWallets {\n', '      require(msg.sender == fundWallet1 || msg.sender == fundWallet2);\n', '      _;\n', '  }\n', '\n', '  // constructor\n', '  function IHF(address backupFundWallet, uint256 endBlockInput) public {\n', '      require(backupFundWallet != address(0));\n', '      require(block.number < endBlockInput);\n', '      fundWallet1 = msg.sender;\n', '      fundWallet2 = backupFundWallet;\n', '      fundingEndBlock = endBlockInput;\n', '  }\n', '\n', '  function setVestingContract(address vestingContractInput) external onlyFundWallets {\n', '      require(!vestingSet); // can only be called once\n', '      require(vestingContractInput != address(0));\n', '      vestingContract = vestingContractInput;\n', '      vestingSet = true;\n', '  }\n', '\n', '  function allocateTokens(address participant, uint256 amountTokens) private {\n', '      require(vestingSet);\n', '      // 2.5% of total allocated for Invictus Capital & Team\n', '      uint256 developmentAllocation = amountTokens.mul(25641025641025641).div(1000000000000000000);\n', '      uint256 newTokens = amountTokens.add(developmentAllocation);\n', '      // increase token supply, assign tokens to participant\n', '      totalSupply_ = totalSupply_.add(newTokens);\n', '      balances[participant] = balances[participant].add(amountTokens);\n', '      balances[vestingContract] = balances[vestingContract].add(developmentAllocation);\n', '      emit Transfer(address(0), participant, amountTokens);\n', '      emit Transfer(address(0), vestingContract, developmentAllocation);\n', '  }\n', '\n', '  function batchAllocate(address[] participants, uint256[] values) external onlyFundWallets returns(uint256) {\n', '      require(block.number < fundingEndBlock);\n', '      uint256 i = 0;\n', '      while (i < participants.length) {\n', '        allocateTokens(participants[i], values[i]);\n', '        i++;\n', '      }\n', '      return(i);\n', '  }\n', '\n', '  // @dev sets a users balance to zero, adjusts supply and dev allocation as well\n', '  function adjustBalance(address participant) external onlyFundWallets {\n', '      require(vestingSet);\n', '      require(block.number < fundingEndBlock);\n', '      uint256 amountTokens = balances[participant];\n', '      uint256 developmentAllocation = amountTokens.mul(25641025641025641).div(1000000000000000000);\n', '      uint256 removeTokens = amountTokens.add(developmentAllocation);\n', '      totalSupply_ = totalSupply_.sub(removeTokens);\n', '      balances[participant] = 0;\n', '      balances[vestingContract] = balances[vestingContract].sub(developmentAllocation);\n', '      emit Transfer(participant, address(0), amountTokens);\n', '      emit Transfer(vestingContract, address(0), developmentAllocation);\n', '  }\n', '\n', '  function changeFundWallet1(address newFundWallet) external onlyFundWallets {\n', '      require(newFundWallet != address(0));\n', '      fundWallet1 = newFundWallet;\n', '  }\n', '  function changeFundWallet2(address newFundWallet) external onlyFundWallets {\n', '      require(newFundWallet != address(0));\n', '      fundWallet2 = newFundWallet;\n', '  }\n', '\n', '  function updateFundingEndBlock(uint256 newFundingEndBlock) external onlyFundWallets {\n', '      require(block.number < fundingEndBlock);\n', '      require(block.number < newFundingEndBlock);\n', '      fundingEndBlock = newFundingEndBlock;\n', '  }\n', '\n', '  function enableTrading() external onlyFundWallets {\n', '      require(block.number > fundingEndBlock);\n', '      tradeable = true;\n', '  }\n', '\n', '  function() payable public {\n', '      require(false); // throw\n', '  }\n', '\n', '  function claimTokens(address _token) external onlyFundWallets {\n', '      require(_token != address(0));\n', '      ERC20Basic token = ERC20Basic(_token);\n', '      uint256 balance = token.balanceOf(this);\n', '      token.transfer(fundWallet1, balance);\n', '   }\n', '\n', '   function removeEth() external onlyFundWallets {\n', '      fundWallet1.transfer(address(this).balance);\n', '    }\n', '\n', '    function burn(uint256 _value) external onlyFundWallets {\n', '      require(balances[msg.sender] >= _value);\n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[0x0] = balances[0x0].add(_value);\n', '      totalSupply_ = totalSupply_.sub(_value);\n', '      emit Transfer(msg.sender, 0x0, _value);\n', '    }\n', '\n', '   // prevent transfers until trading allowed\n', '   function transfer(address _to, uint256 _value) isTradeable public returns (bool success) {\n', '       return super.transfer(_to, _value);\n', '   }\n', '   function transferFrom(address _from, address _to, uint256 _value) isTradeable public returns (bool success) {\n', '       return super.transferFrom(_from, _to, _value);\n', '   }\n', '\n', '}']
