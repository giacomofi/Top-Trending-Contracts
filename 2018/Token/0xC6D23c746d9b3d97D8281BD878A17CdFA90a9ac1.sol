['pragma solidity 0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/CustomPOAToken.sol\n', '\n', 'contract CustomPOAToken is PausableToken {\n', '\n', '  string public name;\n', '  string public symbol;\n', '\n', '  uint8 public constant decimals = 18;\n', '\n', '  address public owner;\n', '  address public broker;\n', '  address public custodian;\n', '\n', '  uint256 public creationBlock;\n', '  uint256 public timeoutBlock;\n', '  // the total per token payout rate: accumulates as payouts are received\n', '  uint256 public totalPerTokenPayout;\n', '  uint256 public tokenSaleRate;\n', '  uint256 public fundedAmount;\n', '  uint256 public fundingGoal;\n', '  uint256 public initialSupply;\n', '  // ‰ permille NOT percent\n', '  uint256 public constant feeRate = 5;\n', '\n', '  // self contained whitelist on contract, must be whitelisted to buy\n', '  mapping (address => bool) public whitelisted;\n', '  // used to deduct already claimed payouts on a per token basis\n', '  mapping(address => uint256) public claimedPerTokenPayouts;\n', '  // fallback for when a transfer happens with payouts remaining\n', '  mapping(address => uint256) public unclaimedPayoutTotals;\n', '\n', '  enum Stages {\n', '    Funding,\n', '    Pending,\n', '    Failed,\n', '    Active,\n', '    Terminated\n', '  }\n', '\n', '  Stages public stage = Stages.Funding;\n', '\n', '  event StageEvent(Stages stage);\n', '  event BuyEvent(address indexed buyer, uint256 amount);\n', '  event PayoutEvent(uint256 amount);\n', '  event ClaimEvent(uint256 payout);\n', '  event TerminatedEvent();\n', '  event WhitelistedEvent(address indexed account, bool isWhitelisted);\n', '\n', '  modifier isWhitelisted() {\n', '    require(whitelisted[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  modifier onlyCustodian() {\n', '    require(msg.sender == custodian);\n', '    _;\n', '  }\n', '\n', '  // start stage related modifiers\n', '  modifier atStage(Stages _stage) {\n', '    require(stage == _stage);\n', '    _;\n', '  }\n', '\n', '  modifier atEitherStage(Stages _stage, Stages _orStage) {\n', '    require(stage == _stage || stage == _orStage);\n', '    _;\n', '  }\n', '\n', '  modifier checkTimeout() {\n', '    if (stage == Stages.Funding && block.number >= creationBlock.add(timeoutBlock)) {\n', '      uint256 _unsoldBalance = balances[this];\n', '      balances[this] = 0;\n', '      totalSupply = totalSupply.sub(_unsoldBalance);\n', '      Transfer(this, address(0), balances[this]);\n', '      enterStage(Stages.Failed);\n', '    }\n', '    _;\n', '  }\n', '  // end stage related modifiers\n', '\n', '  // token totalSupply must be more than fundingGoal!\n', '  function CustomPOAToken\n', '  (\n', '    string _name,\n', '    string _symbol,\n', '    address _broker,\n', '    address _custodian,\n', '    uint256 _timeoutBlock,\n', '    uint256 _totalSupply,\n', '    uint256 _fundingGoal\n', '  )\n', '    public\n', '  {\n', '    require(_fundingGoal > 0);\n', '    require(_totalSupply > _fundingGoal);\n', '    owner = msg.sender;\n', '    name = _name;\n', '    symbol = _symbol;\n', '    broker = _broker;\n', '    custodian = _custodian;\n', '    timeoutBlock = _timeoutBlock;\n', '    creationBlock = block.number;\n', '    // essentially sqm unit of building...\n', '    totalSupply = _totalSupply;\n', '    initialSupply = _totalSupply;\n', '    fundingGoal = _fundingGoal;\n', '    balances[this] = _totalSupply;\n', '    paused = true;\n', '  }\n', '\n', '  // start token conversion functions\n', '\n', '  /*******************\n', '  * TKN      supply  *\n', '  * ---  =  -------  *\n', '  * ETH     funding  *\n', '  *******************/\n', '\n', '  // util function to convert wei to tokens. can be used publicly to see\n', '  // what the balance would be for a given Ξ amount.\n', '  // will drop miniscule amounts of wei due to integer division\n', '  function weiToTokens(uint256 _weiAmount)\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _weiAmount\n', '      .mul(1e18)\n', '      .mul(initialSupply)\n', '      .div(fundingGoal)\n', '      .div(1e18);\n', '  }\n', '\n', '  // util function to convert tokens to wei. can be used publicly to see how\n', '  // much Ξ would be received for token reclaim amount\n', '  // will typically lose 1 wei unit of Ξ due to integer division\n', '  function tokensToWei(uint256 _tokenAmount)\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _tokenAmount\n', '      .mul(1e18)\n', '      .mul(fundingGoal)\n', '      .div(initialSupply)\n', '      .div(1e18);\n', '  }\n', '\n', '  // end token conversion functions\n', '\n', '  // pause override\n', '  function unpause()\n', '    public\n', '    onlyOwner\n', '    whenPaused\n', '  {\n', '    // only allow unpausing when in Active stage\n', '    require(stage == Stages.Active);\n', '    return super.unpause();\n', '  }\n', '\n', '  // stage related functions\n', '  function enterStage(Stages _stage)\n', '    private\n', '  {\n', '    stage = _stage;\n', '    StageEvent(_stage);\n', '  }\n', '\n', '  // start whitelist related functions\n', '\n', '  // allow address to buy tokens\n', '  function whitelistAddress(address _address)\n', '    external\n', '    onlyOwner\n', '    atStage(Stages.Funding)\n', '  {\n', '    require(whitelisted[_address] != true);\n', '    whitelisted[_address] = true;\n', '    WhitelistedEvent(_address, true);\n', '  }\n', '\n', '  // disallow address to buy tokens.\n', '  function blacklistAddress(address _address)\n', '    external\n', '    onlyOwner\n', '    atStage(Stages.Funding)\n', '  {\n', '    require(whitelisted[_address] != false);\n', '    whitelisted[_address] = false;\n', '    WhitelistedEvent(_address, false);\n', '  }\n', '\n', '  // check to see if contract whitelist has approved address to buy\n', '  function whitelisted(address _address)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return whitelisted[_address];\n', '  }\n', '\n', '  // end whitelist related functions\n', '\n', '  // start fee handling functions\n', '\n', '  // public utility function to allow checking of required fee for a given amount\n', '  function calculateFee(uint256 _value)\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return feeRate.mul(_value).div(1000);\n', '  }\n', '\n', '  // end fee handling functions\n', '\n', '  // start lifecycle functions\n', '\n', '  function buy()\n', '    public\n', '    payable\n', '    checkTimeout\n', '    atStage(Stages.Funding)\n', '    isWhitelisted\n', '    returns (bool)\n', '  {\n', '    uint256 _payAmount;\n', '    uint256 _buyAmount;\n', '    // check if balance has met funding goal to move on to Pending\n', '    if (fundedAmount.add(msg.value) < fundingGoal) {\n', '      // _payAmount is just value sent\n', '      _payAmount = msg.value;\n', '      // get token amount from wei... drops remainders (keeps wei dust in contract)\n', '      _buyAmount = weiToTokens(_payAmount);\n', '      // check that buyer will indeed receive something after integer division\n', '      // this check cannot be done in other case because it could prevent\n', '      // contract from moving to next stage\n', '      require(_buyAmount > 0);\n', '    } else {\n', '      // let the world know that the token is in Pending Stage\n', '      enterStage(Stages.Pending);\n', '      // set refund amount (overpaid amount)\n', '      uint256 _refundAmount = fundedAmount.add(msg.value).sub(fundingGoal);\n', '      // get actual Ξ amount to buy\n', '      _payAmount = msg.value.sub(_refundAmount);\n', '      // get token amount from wei... drops remainders (keeps wei dust in contract)\n', '      _buyAmount = weiToTokens(_payAmount);\n', '      // assign remaining dust\n', '      uint256 _dust = balances[this].sub(_buyAmount);\n', '      // sub dust from contract\n', '      balances[this] = balances[this].sub(_dust);\n', '      // give dust to owner\n', '      balances[owner] = balances[owner].add(_dust);\n', '      Transfer(this, owner, _dust);\n', '      // SHOULD be ok even with reentrancy because of enterStage(Stages.Pending)\n', '      msg.sender.transfer(_refundAmount);\n', '    }\n', '    // deduct token buy amount balance from contract balance\n', '    balances[this] = balances[this].sub(_buyAmount);\n', '    // add token buy amount to sender&#39;s balance\n', '    balances[msg.sender] = balances[msg.sender].add(_buyAmount);\n', '    // increment the funded amount\n', '    fundedAmount = fundedAmount.add(_payAmount);\n', '    // send out event giving info on amount bought as well as claimable dust\n', '    Transfer(this, msg.sender, _buyAmount);\n', '    BuyEvent(msg.sender, _buyAmount);\n', '    return true;\n', '  }\n', '\n', '  function activate()\n', '    external\n', '    checkTimeout\n', '    onlyCustodian\n', '    payable\n', '    atStage(Stages.Pending)\n', '    returns (bool)\n', '  {\n', '    // calculate company fee charged for activation\n', '    uint256 _fee = calculateFee(fundingGoal);\n', '    // value must exactly match fee\n', '    require(msg.value == _fee);\n', '    // if activated and fee paid: put in Active stage\n', '    enterStage(Stages.Active);\n', '    // owner (company) fee set in unclaimedPayoutTotals to be claimed by owner\n', '    unclaimedPayoutTotals[owner] = unclaimedPayoutTotals[owner].add(_fee);\n', '    // custodian value set to claimable. can now be claimed via claim function\n', '    // set all eth in contract other than fee as claimable.\n', '    // should only be buy()s. this ensures buy() dust is cleared\n', '    unclaimedPayoutTotals[custodian] = unclaimedPayoutTotals[custodian]\n', '      .add(this.balance.sub(_fee));\n', '    // allow trading of tokens\n', '    paused = false;\n', '    // let world know that this token can now be traded.\n', '    Unpause();\n', '    return true;\n', '  }\n', '\n', '  // used when property no longer exists etc. allows for winding down via payouts\n', '  // can no longer be traded after function is run\n', '  function terminate()\n', '    external\n', '    onlyCustodian\n', '    atStage(Stages.Active)\n', '    returns (bool)\n', '  {\n', '    // set Stage to terminated\n', '    enterStage(Stages.Terminated);\n', '    // pause. Cannot be unpaused now that in Stages.Terminated\n', '    paused = true;\n', '    // let the world know this token is in Terminated Stage\n', '    TerminatedEvent();\n', '  }\n', '\n', '  // emergency temporary function used only in case of emergency to return\n', '  // Ξ to contributors in case of catastrophic contract failure.\n', '  function kill()\n', '    external\n', '    onlyOwner\n', '  {\n', '    // stop trading\n', '    paused = true;\n', '    // enter stage which will no longer allow unpausing\n', '    enterStage(Stages.Terminated);\n', '    // transfer funds to company in order to redistribute manually\n', '    owner.transfer(this.balance);\n', '    // let the world know that this token is in Terminated Stage\n', '    TerminatedEvent();\n', '  }\n', '\n', '  // end lifecycle functions\n', '\n', '  // start payout related functions\n', '\n', '  // get current payout for perTokenPayout and unclaimed\n', '  function currentPayout(address _address, bool _includeUnclaimed)\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    /*\n', '      need to check if there have been no payouts\n', '      safe math will throw otherwise due to dividing 0\n', '\n', '      The below variable represents the total payout from the per token rate pattern\n', '      it uses this funky naming pattern in order to differentiate from the unclaimedPayoutTotals\n', '      which means something very different.\n', '    */\n', '    uint256 _totalPerTokenUnclaimedConverted = totalPerTokenPayout == 0\n', '      ? 0\n', '      : balances[_address]\n', '      .mul(totalPerTokenPayout.sub(claimedPerTokenPayouts[_address]))\n', '      .div(1e18);\n', '\n', '    /*\n', '    balances may be bumped into unclaimedPayoutTotals in order to\n', '    maintain balance tracking accross token transfers\n', '\n', '    perToken payout rates are stored * 1e18 in order to be kept accurate\n', '    perToken payout is / 1e18 at time of usage for actual Ξ balances\n', '    unclaimedPayoutTotals are stored as actual Ξ value\n', '      no need for rate * balance\n', '    */\n', '    return _includeUnclaimed\n', '      ? _totalPerTokenUnclaimedConverted.add(unclaimedPayoutTotals[_address])\n', '      : _totalPerTokenUnclaimedConverted;\n', '\n', '  }\n', '\n', '  // settle up perToken balances and move into unclaimedPayoutTotals in order\n', '  // to ensure that token transfers will not result in inaccurate balances\n', '  function settleUnclaimedPerTokenPayouts(address _from, address _to)\n', '    private\n', '    returns (bool)\n', '  {\n', '    // add perToken balance to unclaimedPayoutTotals which will not be affected by transfers\n', '    unclaimedPayoutTotals[_from] = unclaimedPayoutTotals[_from].add(currentPayout(_from, false));\n', '    // max out claimedPerTokenPayouts in order to effectively make perToken balance 0\n', '    claimedPerTokenPayouts[_from] = totalPerTokenPayout;\n', '    // same as above for to\n', '    unclaimedPayoutTotals[_to] = unclaimedPayoutTotals[_to].add(currentPayout(_to, false));\n', '    // same as above for to\n', '    claimedPerTokenPayouts[_to] = totalPerTokenPayout;\n', '    return true;\n', '  }\n', '\n', '  // used to manually set Stage to Failed when no users have bought any tokens\n', '  // if no buy()s occurred before timeoutBlock token would be stuck in Funding\n', '  function setFailed()\n', '    external\n', '    atStage(Stages.Funding)\n', '    checkTimeout\n', '    returns (bool)\n', '  {\n', '    if (stage == Stages.Funding) {\n', '      revert();\n', '    }\n', '    return true;\n', '  }\n', '\n', '  // reclaim Ξ for sender if fundingGoal is not met within timeoutBlock\n', '  function reclaim()\n', '    external\n', '    checkTimeout\n', '    atStage(Stages.Failed)\n', '    returns (bool)\n', '  {\n', '    // get token balance of user\n', '    uint256 _tokenBalance = balances[msg.sender];\n', '    // ensure that token balance is over 0\n', '    require(_tokenBalance > 0);\n', '    // set token balance to 0 so re reclaims are not possible\n', '    balances[msg.sender] = 0;\n', '    // decrement totalSupply by token amount being reclaimed\n', '    totalSupply = totalSupply.sub(_tokenBalance);\n', '    Transfer(msg.sender, address(0), _tokenBalance);\n', '    // decrement fundedAmount by eth amount converted from token amount being reclaimed\n', '    fundedAmount = fundedAmount.sub(tokensToWei(_tokenBalance));\n', '    // set reclaim total as token value\n', '    uint256 _reclaimTotal = tokensToWei(_tokenBalance);\n', '    // send Ξ back to sender\n', '    msg.sender.transfer(_reclaimTotal);\n', '    return true;\n', '  }\n', '\n', '  // send Ξ to contract to be claimed by token holders\n', '  function payout()\n', '    external\n', '    payable\n', '    atEitherStage(Stages.Active, Stages.Terminated)\n', '    onlyCustodian\n', '    returns (bool)\n', '  {\n', '    // calculate fee based on feeRate\n', '    uint256 _fee = calculateFee(msg.value);\n', '    // ensure the value is high enough for a fee to be claimed\n', '    require(_fee > 0);\n', '    // deduct fee from payout\n', '    uint256 _payoutAmount = msg.value.sub(_fee);\n', '    /*\n', '    totalPerTokenPayout is a rate at which to payout based on token balance\n', '    it is stored as * 1e18 in order to keep accuracy\n', '    it is / 1e18 when used relating to actual Ξ values\n', '    */\n', '    totalPerTokenPayout = totalPerTokenPayout\n', '      .add(_payoutAmount\n', '        .mul(1e18)\n', '        .div(totalSupply)\n', '      );\n', '\n', '    // take remaining dust and send to owner rather than leave stuck in contract\n', '    // should not be more than a few wei\n', '    uint256 _delta = (_payoutAmount.mul(1e18) % totalSupply).div(1e18);\n', '    unclaimedPayoutTotals[owner] = unclaimedPayoutTotals[owner].add(_fee).add(_delta);\n', '    // let the world know that a payout has happened for this token\n', '    PayoutEvent(_payoutAmount);\n', '    return true;\n', '  }\n', '\n', '  // claim total Ξ claimable for sender based on token holdings at time of each payout\n', '  function claim()\n', '    external\n', '    atEitherStage(Stages.Active, Stages.Terminated)\n', '    returns (uint256)\n', '  {\n', '    /*\n', '    pass true to currentPayout in order to get both:\n', '      perToken payouts\n', '      unclaimedPayoutTotals\n', '    */\n', '    uint256 _payoutAmount = currentPayout(msg.sender, true);\n', '    // check that there indeed is a pending payout for sender\n', '    require(_payoutAmount > 0);\n', '    // max out per token payout for sender in order to make payouts effectively\n', '    // 0 for sender\n', '    claimedPerTokenPayouts[msg.sender] = totalPerTokenPayout;\n', '    // 0 out unclaimedPayoutTotals for user\n', '    unclaimedPayoutTotals[msg.sender] = 0;\n', '    // let the world know that a payout for sender has been claimed\n', '    ClaimEvent(_payoutAmount);\n', '    // transfer Ξ payable amount to sender\n', '    msg.sender.transfer(_payoutAmount);\n', '    return _payoutAmount;\n', '  }\n', '\n', '  // end payout related functions\n', '\n', '  // start ERC20 overrides\n', '\n', '  // same as ERC20 transfer other than settling unclaimed payouts\n', '  function transfer\n', '  (\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    // move perToken payout balance to unclaimedPayoutTotals\n', '    require(settleUnclaimedPerTokenPayouts(msg.sender, _to));\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  // same as ERC20 transfer other than settling unclaimed payouts\n', '  function transferFrom\n', '  (\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    // move perToken payout balance to unclaimedPayoutTotals\n', '    require(settleUnclaimedPerTokenPayouts(_from, _to));\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  // end ERC20 overrides\n', '\n', '  // check if there is a way to get around gas issue when no gas limit calculated...\n', '  // fallback function defaulting to buy\n', '  function()\n', '    public\n', '    payable\n', '  {\n', '    buy();\n', '  }\n', '}']