['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function totalSupply() public constant returns (uint);\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'contract ERC827 {\n', '\n', '  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n', '  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n', '  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n', '\n', '}\n', '\n', '\n', 'contract TEFoodsToken is Ownable, ERC20Interface {\n', '\n', '  using SafeMath for uint;\n', '\n', '  string public constant name = "TE-FOOD";\n', '  string public constant symbol = "TFD";\n', '  uint8 public constant decimals = 18;\n', '  uint constant _totalSupply = 1000000000 * 1 ether;\n', '  uint public transferrableTime = 9999999999;\n', '  uint _vestedSupply;\n', '  uint _circulatingSupply;\n', '  mapping (address => uint) balances;\n', '  mapping (address => mapping(address => uint)) allowed;\n', '\n', '  struct vestedBalance {\n', '    address addr;\n', '    uint balance;\n', '  }\n', '  mapping (uint => vestedBalance[]) vestingMap;\n', '\n', '\n', '\n', '  function TEFoodsToken () public {\n', '    owner = msg.sender;\n', '    balances[0x00] = _totalSupply;\n', '  }\n', '\n', '  event VestedTokensReleased(address to, uint amount);\n', '\n', '  function allocateTokens (address addr, uint amount) public onlyOwner returns (bool) {\n', '    require (addr != 0x00);\n', '    require (amount > 0);\n', '    balances[0x00] = balances[0x00].sub(amount);\n', '    balances[addr] = balances[addr].add(amount);\n', '    _circulatingSupply = _circulatingSupply.add(amount);\n', '    assert (_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply);\n', '    Transfer(0x00, addr, amount);\n', '    return true;\n', '  }\n', '\n', '  function allocateVestedTokens (address addr, uint amount, uint vestingPeriod) public onlyOwner returns (bool) {\n', '    require (addr != 0x00);\n', '    require (amount > 0);\n', '    require (vestingPeriod > 0);\n', '    balances[0x00] = balances[0x00].sub(amount);\n', '    vestingMap[vestingPeriod].push( vestedBalance (addr,amount) );\n', '    _vestedSupply = _vestedSupply.add(amount);\n', '    assert (_vestedSupply.add(_circulatingSupply).add(balances[0x00]) == _totalSupply);\n', '    return true;\n', '  }\n', '\n', '  function releaseVestedTokens (uint vestingPeriod) public {\n', '    require (now >= transferrableTime.add(vestingPeriod));\n', '    require (vestingMap[vestingPeriod].length > 0);\n', '    require (vestingMap[vestingPeriod][0].balance > 0);\n', '    var v = vestingMap[vestingPeriod];\n', '    for (uint8 i = 0; i < v.length; i++) {\n', '      balances[v[i].addr] = balances[v[i].addr].add(v[i].balance);\n', '      _circulatingSupply = _circulatingSupply.add(v[i].balance);\n', '      _vestedSupply = _vestedSupply.sub(v[i].balance);\n', '      VestedTokensReleased(v[i].addr, v[i].balance);\n', '      Transfer(0x00, v[i].addr, v[i].balance);\n', '      v[i].balance = 0;\n', '    }\n', '  }\n', '\n', '  function enableTransfers () public onlyOwner returns (bool) {\n', '    transferrableTime = now.add(86400);\n', '    owner = 0x00;\n', '    return true;\n', '  }\n', '\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '  function totalSupply() public constant returns (uint) {\n', '    return _circulatingSupply;\n', '  }\n', '\n', '  function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '  function vestedBalanceOf(address tokenOwner, uint vestingPeriod) public constant returns (uint balance) {\n', '    var v = vestingMap[vestingPeriod];\n', '    for (uint8 i = 0; i < v.length; i++) {\n', '      if (v[i].addr == tokenOwner) return v[i].balance;\n', '    }\n', '    return 0;\n', '  }\n', '\n', '  function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '    require (now >= transferrableTime);\n', '    require (to != address(this));\n', '    require (balances[msg.sender] >= tokens);\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    require (now >= transferrableTime);\n', '    require (spender != address(this));\n', '    allowed[msg.sender][spender] = tokens;\n', '    Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    require (now >= transferrableTime);\n', '    require (to != address(this));\n', '    require (allowed[from][msg.sender] >= tokens);\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract TEFoods827Token is TEFoodsToken, ERC827 {\n', '\n', '  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n', '    super.approve(_spender, _value);\n', '    require(_spender.call(_data));\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    super.transfer(_to, _value);\n', '    require(_to.call(_data));\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n', '    super.transferFrom(_from, _to, _value);\n', '    require(_to.call(_data));\n', '    return true;\n', '  }\n', '\n', '}']