['pragma solidity ^0.4.24;\n', '\n', 'contract Owned {\n', '\taddress public owner;\n', '\taddress public signer;\n', '\n', '\tconstructor() public {\n', '\t\towner = msg.sender;\n', '\t\tsigner = msg.sender;\n', '\t}\n', '\n', '    modifier onlyOwner {\n', '    \trequire(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlySigner {\n', '\trequire(msg.sender == signer);\n', '\t_;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '\towner = newOwner;\n', '    }\n', '\n', '    function transferSignership(address newSigner) public onlyOwner {\n', '        signer = newSigner;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Token {\n', '\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balances;\n', '\n', '    // Mapping for allowance\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed sender, address indexed spender, uint256 value);\n', '\n', '    constructor(uint256 _supply, string _name, string _symbol)\n', '\tpublic\n', '    {\n', '\t//initial mint\n', '        totalSupply = _supply * 10**uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '\n', '\t//set variables\n', '\tname=_name;\n', '\tsymbol=_symbol;\n', '\n', '\t//trigger event\n', '        emit Transfer(0x0, msg.sender, totalSupply);\n', '    }\n', '\n', '\t/**\n', '\t * Returns current tokens total supply\n', '\t */\n', '    function totalSupply()\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256)\n', '    {\n', '\t\treturn totalSupply;\n', '    }\n', '\n', '\t/**\n', '     * Get the token balance for account `tokenOwner`\n', '     */\n', '    function balanceOf(address _owner)\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '\t/**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '\t\t// To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '      \t//set allowance\n', '      \tallowed[msg.sender][_spender] = _value;\n', '\n', '\t\t//trigger event\n', '      \temit Approval(msg.sender, _spender, _value);\n', '\n', '\t\treturn true;\n', '    }\n', '\n', '    /**\n', '     * Show allowance\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\t/**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value)\n', '    \tinternal\n', '    \treturns (bool success)\n', '    {\n', '\t\t// Do not allow transfer to 0x0 or the token contract itself or from address to itself\n', '\t\trequire((_to != address(0)) && (_to != address(this)) && (_to != _from));\n', '\n', '        // Check if the sender has enough\n', '        require((_value > 0) && (balances[_from] >= _value));\n', '\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '\n', '        // Subtract from the sender\n', '        balances[_from] -= _value;\n', '\n', '        // Add the same to the recipient\n', '        balances[_to] += _value;\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '\t/**\n', '      * Transfer tokens\n', '      *\n', '      * Send `_value` tokens to `_to` from your account\n', '      *\n', '      * @param _to The address of the recipient\n', '      * @param _value the amount to send\n', '      */\n', '    function transfer(address _to, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '    \treturn _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '  \t/**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '\t\t// Check allowance\n', '    \trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\t//decrement allowance\n', '\t\tallowed[_from][msg.sender] -= _value;\n', '\n', '    \t//transfer tokens\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract CrowdSaleTeleToken is Owned {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 public price;\n', '\n', '\tERC20Token public crowdSaleToken;\n', '\n', '\t/**\n', '\t * Constructor function\n', '\t *\n', '\t * Setup the owner\n', '\t */\n', '\tconstructor(uint256 _price, address _tokenAddress)\n', '\t\tpublic\n', '\t{\n', '\t\t//set initial token price\n', '\t\tprice = _price;\n', '\n', '\t\t//set crowdsale token\n', '\t\tcrowdSaleToken = ERC20Token(_tokenAddress);\n', '\t}\n', '\n', '\t/**\n', '\t * Fallback function\n', '\t *\n', '\t * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '\t */\n', '\tfunction ()\n', '\t\tpayable\n', '\t\tpublic\n', '\t{\n', '\t\t//calc buy amount\n', '\t\tuint256 amount = msg.value / price;\n', '\n', '\t\t//check amount, it cannot be zero\n', '\t\trequire(amount != 0);\n', '\n', '\t\t//transfer required amount\n', '\t\tcrowdSaleToken.transfer(msg.sender, amount.mul(10**18));\n', '\t}\n', '\n', '\t/**\n', '\t * Withdraw eth\n', '\t */\n', '\tfunction withdrawalEth(uint256 _amount)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\t//send requested amount to owner\n', '\t\tmsg.sender.transfer(_amount);\n', '\t}\n', '\n', '\t/**\n', '\t * Withdraw tokens\n', '\t */\n', '\tfunction withdrawalToken(uint256 _amount)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\t//send requested amount to owner\n', '\t\tcrowdSaleToken.transfer(msg.sender, _amount);\n', '\t}\n', '\n', '\t/**\n', '\t * Set token price\n', '\t */\n', '\tfunction setPrice(uint256 _price)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\t//check new price, it cannot be zero\n', '\t\tassert(_price != 0);\n', '\n', '\t\t//set new crowdsale token price\n', '\t\tprice = _price;\n', '\t}\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Owned {\n', '\taddress public owner;\n', '\taddress public signer;\n', '\n', '\tconstructor() public {\n', '\t\towner = msg.sender;\n', '\t\tsigner = msg.sender;\n', '\t}\n', '\n', '    modifier onlyOwner {\n', '    \trequire(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlySigner {\n', '\trequire(msg.sender == signer);\n', '\t_;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '\towner = newOwner;\n', '    }\n', '\n', '    function transferSignership(address newSigner) public onlyOwner {\n', '        signer = newSigner;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Token {\n', '\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balances;\n', '\n', '    // Mapping for allowance\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed sender, address indexed spender, uint256 value);\n', '\n', '    constructor(uint256 _supply, string _name, string _symbol)\n', '\tpublic\n', '    {\n', '\t//initial mint\n', '        totalSupply = _supply * 10**uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '\n', '\t//set variables\n', '\tname=_name;\n', '\tsymbol=_symbol;\n', '\n', '\t//trigger event\n', '        emit Transfer(0x0, msg.sender, totalSupply);\n', '    }\n', '\n', '\t/**\n', '\t * Returns current tokens total supply\n', '\t */\n', '    function totalSupply()\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256)\n', '    {\n', '\t\treturn totalSupply;\n', '    }\n', '\n', '\t/**\n', '     * Get the token balance for account `tokenOwner`\n', '     */\n', '    function balanceOf(address _owner)\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '\t/**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '\t\t// To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '      \t//set allowance\n', '      \tallowed[msg.sender][_spender] = _value;\n', '\n', '\t\t//trigger event\n', '      \temit Approval(msg.sender, _spender, _value);\n', '\n', '\t\treturn true;\n', '    }\n', '\n', '    /**\n', '     * Show allowance\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '    \tpublic\n', '    \tconstant\n', '    \treturns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\t/**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint256 _value)\n', '    \tinternal\n', '    \treturns (bool success)\n', '    {\n', '\t\t// Do not allow transfer to 0x0 or the token contract itself or from address to itself\n', '\t\trequire((_to != address(0)) && (_to != address(this)) && (_to != _from));\n', '\n', '        // Check if the sender has enough\n', '        require((_value > 0) && (balances[_from] >= _value));\n', '\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '\n', '        // Subtract from the sender\n', '        balances[_from] -= _value;\n', '\n', '        // Add the same to the recipient\n', '        balances[_to] += _value;\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '\t/**\n', '      * Transfer tokens\n', '      *\n', '      * Send `_value` tokens to `_to` from your account\n', '      *\n', '      * @param _to The address of the recipient\n', '      * @param _value the amount to send\n', '      */\n', '    function transfer(address _to, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '    \treturn _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '  \t/**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    \tpublic\n', '    \treturns (bool success)\n', '    {\n', '\t\t// Check allowance\n', '    \trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\t//decrement allowance\n', '\t\tallowed[_from][msg.sender] -= _value;\n', '\n', '    \t//transfer tokens\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract CrowdSaleTeleToken is Owned {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 public price;\n', '\n', '\tERC20Token public crowdSaleToken;\n', '\n', '\t/**\n', '\t * Constructor function\n', '\t *\n', '\t * Setup the owner\n', '\t */\n', '\tconstructor(uint256 _price, address _tokenAddress)\n', '\t\tpublic\n', '\t{\n', '\t\t//set initial token price\n', '\t\tprice = _price;\n', '\n', '\t\t//set crowdsale token\n', '\t\tcrowdSaleToken = ERC20Token(_tokenAddress);\n', '\t}\n', '\n', '\t/**\n', '\t * Fallback function\n', '\t *\n', '\t * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '\t */\n', '\tfunction ()\n', '\t\tpayable\n', '\t\tpublic\n', '\t{\n', '\t\t//calc buy amount\n', '\t\tuint256 amount = msg.value / price;\n', '\n', '\t\t//check amount, it cannot be zero\n', '\t\trequire(amount != 0);\n', '\n', '\t\t//transfer required amount\n', '\t\tcrowdSaleToken.transfer(msg.sender, amount.mul(10**18));\n', '\t}\n', '\n', '\t/**\n', '\t * Withdraw eth\n', '\t */\n', '\tfunction withdrawalEth(uint256 _amount)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\t//send requested amount to owner\n', '\t\tmsg.sender.transfer(_amount);\n', '\t}\n', '\n', '\t/**\n', '\t * Withdraw tokens\n', '\t */\n', '\tfunction withdrawalToken(uint256 _amount)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\t//send requested amount to owner\n', '\t\tcrowdSaleToken.transfer(msg.sender, _amount);\n', '\t}\n', '\n', '\t/**\n', '\t * Set token price\n', '\t */\n', '\tfunction setPrice(uint256 _price)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t{\n', '\t\t//check new price, it cannot be zero\n', '\t\tassert(_price != 0);\n', '\n', '\t\t//set new crowdsale token price\n', '\t\tprice = _price;\n', '\t}\n', '}']
