['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title The STT Token contract.\n', ' * \n', ' * By Nikita Fuchs\n', ' * Credit: Taking ideas from BAT token, NET token and Nimiq token.\n', ' */\n', '\n', '/**\n', ' * @title Safe math operations that throw error on overflow.\n', ' *\n', ' * Credit: Taking ideas from FirstBlood token\n', ' */\n', 'library SafeMath {\n', '\n', '    /** \n', '     * @dev Safely add two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x+y.\n', '     */\n', '    function add(uint256 x, uint256 y)\n', '    internal pure\n', '    returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    /** \n', '     * @dev Safely substract two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x-y.\n', '     */\n', '    function sub(uint256 x, uint256 y)\n', '    internal pure\n', '    returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    /** \n', '     * @dev Safely multiply two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x*y.\n', '     */\n', '    function mul(uint256 x, uint256 y)\n', '    internal pure\n', '    returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0) || (z/x == y));\n', '        return z;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title The abstract ERC-20 Token Standard definition.\n', ' *\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'contract Token {\n', '    /// @dev Returns the total token supply.\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    /// @dev MUST trigger when tokens are transferred, including zero value transfers.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    /// @dev MUST trigger on any successful call to approve(address _spender, uint256 _value).\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Default implementation of the ERC-20 Token Standard.\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '     * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. \n', '     * @dev The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n', '     *\n', '     * @dev A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     *\n', '     * @param _to The receiver of the tokens.\n', '     * @param _value The amount of tokens to send.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transfer(address _to, uint256 _value)\n', '    public\n', '    returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '            balances[_to] = SafeMath.add(balances[_to], _value);\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n', '     *\n', '     * @dev The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. \n', '     * @dev This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in \n', '     * @dev sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized the sender of \n', '     * @dev the message via some mechanism.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     *\n', '     * @param _from The sender of the tokens.\n', '     * @param _to The receiver of the tokens.\n', '     * @param _value The amount of tokens to send.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] = SafeMath.add(balances[_to], _value);\n', '            balances[_from] = SafeMath.sub(balances[_from], _value);\n', '            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the account balance of another account with address _owner.\n', '     *\n', '     * @param _owner The address of the account to check.\n', '     * @return The account balance.\n', '     */\n', '    function balanceOf(address _owner)\n', '    public view\n', '    returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Allows _spender to withdraw from your account multiple times, up to the _value amount. \n', '     * @dev If this function is called again it overwrites the current allowance with _value.\n', '     *\n', '     * @dev NOTE: To prevent attack vectors like the one described in [1] and discussed in [2], clients \n', '     * @dev SHOULD make sure to create user interfaces in such a way that they set the allowance first \n', '     * @dev to 0 before setting it to another value for the same spender. THOUGH The contract itself \n', '     * @dev shouldn&#39;t enforce it, to allow backwards compatilibilty with contracts deployed before.\n', '     * @dev [1] https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\n', '     * @dev [2] https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '    public\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\n', '     *\n', '     * @param _owner The address of the sender.\n', '     * @param _spender The address of the receiver.\n', '     * @return The allowed withdrawal amount.\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '    public view\n', '    returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract RelocationToken {\n', '    // function of possible new contract to recieve tokenbalance to relocate - to be protected by msg.sender == StarambaToken\n', '    function recieveRelocation(address _creditor, uint _balance) external returns (bool);\n', '}\n', '\n', '\n', '\n', ' /*is StandardToken */\n', 'contract StarambaToken is StandardToken {\n', '\n', '    // Token metadata\n', '    string public constant name = "STARAMBA.Token";\n', '    string public constant symbol = "STT";\n', '    uint256 public constant decimals = 18;\n', '    string public constant version = "1";\n', '\n', '    uint256 public TOKEN_CREATION_CAP = 1000 * (10**6) * 10**decimals; // 1000 million STTs\n', '    uint256 public constant TOKEN_MIN = 1 * 10**decimals;              // 1 STT\n', '\n', '    address public STTadmin1;      // First administrator for multi-sig mechanism\n', '    address public STTadmin2;      // Second administrator for multi-sig mechanism\n', '\n', '    // Contracts current state (transactions still paused during sale or already publicly available)\n', '    bool public transactionsActive;\n', '\n', '    // Indicate if the token is in relocation mode\n', '    bool public relocationActive;\n', '    address public newTokenContractAddress;\n', '\n', '    // How often was the supply adjusted ? (See STT Whitepaper Version 1.0 from 23. May 2018 )\n', '    uint8 supplyAdjustmentCount = 0;\n', '\n', '    // Keep track of holders and icoBuyers\n', '    mapping (address => bool) public isHolder; // track if a user is a known token holder to the smart contract - important for payouts later\n', '    address[] public holders;                  // array of all known holders - important for payouts later\n', '\n', '    // Store the hashes of admins&#39; msg.data\n', '    mapping (address => bytes32) private multiSigHashes;\n', '\n', '    // Declare vendor keys\n', '    mapping (address => bool) public vendors;\n', '\n', '    // Count amount of vendors for easier verification of correct contract deployment\n', '    uint8 public vendorCount;\n', '\n', '    // Events used for logging\n', '    event LogDeliverSTT(address indexed _to, uint256 _value);\n', '    //event Log\n', '\n', '    modifier onlyVendor() {\n', '        require(vendors[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isTransferable() {\n', '        require (transactionsActive == true);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        // check if transaction sender is admin.\n', '        require (msg.sender == STTadmin1 || msg.sender == STTadmin2);\n', '        // if yes, store his msg.data. \n', '        multiSigHashes[msg.sender] = keccak256(msg.data);\n', '        // check if his stored msg.data hash equals to the one of the other admin\n', '        if ((multiSigHashes[STTadmin1]) == (multiSigHashes[STTadmin2])) {\n', '            // if yes, both admins agreed - continue.\n', '            _;\n', '\n', '            // Reset hashes after successful execution\n', '            multiSigHashes[STTadmin1] = 0x0;\n', '            multiSigHashes[STTadmin2] = 0x0;\n', '        } else {\n', '            // if not (yet), return.\n', '            return;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Create a new STTToken contract.\n', '     *\n', '     *  _admin1 The first admin account that owns this contract.\n', '     *  _admin2 The second admin account that owns this contract.\n', '     *  _vendors List of exactly 10 addresses that are allowed to deliver tokens.\n', '     */\n', '    constructor(address _admin1, address _admin2, address[] _vendors)\n', '    public\n', '    {\n', '        // Check if the parameters make sense\n', '\n', '        // admin1 and admin2 address must be set and must be different\n', '        require (_admin1 != 0x0);\n', '        require (_admin2 != 0x0);\n', '        require (_admin1 != _admin2);\n', '\n', '        // 10 vendor instances for delivering token purchases\n', '        require (_vendors.length == 10);\n', '\n', '        totalSupply = 0;\n', '\n', '        // define state\n', '        STTadmin1 = _admin1;\n', '        STTadmin2 = _admin2;\n', '\n', '        for (uint8 i = 0; i < _vendors.length; i++){\n', '            vendors[_vendors[i]] = true;\n', '            vendorCount++;\n', '        }\n', '    }\n', '\n', '    // Overridden method to check for end of fundraising before allowing transfer of tokens\n', '    function transfer(address _to, uint256 _value)\n', '    public\n', '    isTransferable // Only allow token transfer after the fundraising has ended\n', '    returns (bool success)\n', '    {\n', '        bool result = super.transfer(_to, _value);\n', '        if (result) {\n', '            trackHolder(_to); // track the owner for later payouts\n', '        }\n', '        return result;\n', '    }\n', '\n', '    // Overridden method to check for end of fundraising before allowing transfer of tokens\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    isTransferable // Only allow token transfer after the fundraising has ended\n', '    returns (bool success)\n', '    {\n', '        bool result = super.transferFrom(_from, _to, _value);\n', '        if (result) {\n', '            trackHolder(_to); // track the owner for later payouts\n', '        }\n', '        return result;\n', '    }\n', '\n', '    // Allow for easier balance checking\n', '    function getBalanceOf(address _owner)\n', '    public\n', '    view\n', '    returns (uint256 _balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Perform an atomic swap between two token contracts \n', '    function relocate()\n', '    external \n', '    {\n', '        // Check if relocation was activated\n', '        require (relocationActive == true);\n', '        \n', '        // Define new token contract is\n', '        RelocationToken newSTT = RelocationToken(newTokenContractAddress);\n', '\n', '        // Burn the old balance\n', '        uint256 balance = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '\n', '        // Perform the relocation of balances to new contract\n', '        require(newSTT.recieveRelocation(msg.sender, balance));\n', '    }\n', '\n', '    // Allows to figure out the amount of known token holders\n', '    function getHolderCount()\n', '    public\n', '    view\n', '    returns (uint256 _holderCount)\n', '    {\n', '        return holders.length;\n', '    }\n', '\n', '    // Allows for easier retrieval of holder by array index\n', '    function getHolder(uint256 _index)\n', '    public\n', '    view\n', '    returns (address _holder)\n', '    {\n', '        return holders[_index];\n', '    }\n', '\n', '    function trackHolder(address _to)\n', '    private\n', '    returns (bool success)\n', '    {\n', '        // Check if the recipient is a known token holder\n', '        if (isHolder[_to] == false) {\n', '            // if not, add him to the holders array and mark him as a known holder\n', '            holders.push(_to);\n', '            isHolder[_to] = true;\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @dev delivers STT tokens from Leondra (Leondrino Exchange Germany)\n', '    function deliverTokens(address _buyer, uint256 _amount)\n', '    external\n', '    onlyVendor\n', '    {\n', '        require(_amount >= TOKEN_MIN);\n', '\n', '        uint256 checkedSupply = SafeMath.add(totalSupply, _amount);\n', '        require(checkedSupply <= TOKEN_CREATION_CAP);\n', '\n', '        // Adjust the balance\n', '        uint256 oldBalance = balances[_buyer];\n', '        balances[_buyer] = SafeMath.add(oldBalance, _amount);\n', '        totalSupply = checkedSupply;\n', '\n', '        trackHolder(_buyer);\n', '\n', '        // Log the creation of these tokens\n', '        emit LogDeliverSTT(_buyer, _amount);\n', '    }\n', '\n', '    /// @dev Creates new STT tokens\n', '    function deliverTokensBatch(address[] _buyer, uint256[] _amount)\n', '    external\n', '    onlyVendor\n', '    {\n', '        require(_buyer.length == _amount.length);\n', '\n', '        for (uint8 i = 0 ; i < _buyer.length; i++) {\n', '            require(_amount[i] >= TOKEN_MIN);\n', '            require(_buyer[i] != 0x0);\n', '\n', '            uint256 checkedSupply = SafeMath.add(totalSupply, _amount[i]);\n', '            require(checkedSupply <= TOKEN_CREATION_CAP);\n', '\n', '            // Adjust the balance\n', '            uint256 oldBalance = balances[_buyer[i]];\n', '            balances[_buyer[i]] = SafeMath.add(oldBalance, _amount[i]);\n', '            totalSupply = checkedSupply;\n', '\n', '            trackHolder(_buyer[i]);\n', '\n', '            // Log the creation of these tokens\n', '            emit LogDeliverSTT(_buyer[i], _amount[i]);\n', '        }\n', '    }\n', '\n', '    // Allow / Deny transfer of tokens\n', '    function transactionSwitch(bool _transactionsActive) \n', '    external \n', '    onlyOwner\n', '    {\n', '        transactionsActive = _transactionsActive;\n', '    }\n', '\n', '    // For eventual later moving to another token contract\n', '    function relocationSwitch(bool _relocationActive, address _newTokenContractAddress) \n', '    external \n', '    onlyOwner\n', '    {\n', '        if (_relocationActive) {\n', '            require(_newTokenContractAddress != 0x0);\n', '        } else {\n', '            require(_newTokenContractAddress == 0x0);\n', '        }\n', '        relocationActive = _relocationActive;\n', '        newTokenContractAddress = _newTokenContractAddress;\n', '    }\n', '\n', '    // Adjust the cap according to the white paper terms (See STT Whitepaper Version 1.0 from 23. May 2018 )\n', '    function adjustCap()\n', '    external\n', '    onlyOwner\n', '    {\n', '        require (supplyAdjustmentCount < 4);\n', '        TOKEN_CREATION_CAP = SafeMath.add(TOKEN_CREATION_CAP, 50 * (10**6) * 10**decimals); // 50 million STTs\n', '        supplyAdjustmentCount++;\n', '    }\n', '\n', '    // Burn function - name indicating the burn of ALL owner&#39;s tokens\n', '    function burnWholeBalance()\n', '    external\n', '    {\n', '        require(balances[msg.sender] > 0);\n', '        totalSupply = SafeMath.sub(totalSupply, balances[msg.sender]);\n', '        balances[msg.sender] = 0;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title The STT Token contract.\n', ' * \n', ' * By Nikita Fuchs\n', ' * Credit: Taking ideas from BAT token, NET token and Nimiq token.\n', ' */\n', '\n', '/**\n', ' * @title Safe math operations that throw error on overflow.\n', ' *\n', ' * Credit: Taking ideas from FirstBlood token\n', ' */\n', 'library SafeMath {\n', '\n', '    /** \n', '     * @dev Safely add two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x+y.\n', '     */\n', '    function add(uint256 x, uint256 y)\n', '    internal pure\n', '    returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    /** \n', '     * @dev Safely substract two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x-y.\n', '     */\n', '    function sub(uint256 x, uint256 y)\n', '    internal pure\n', '    returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    /** \n', '     * @dev Safely multiply two numbers.\n', '     *\n', '     * @param x First operant.\n', '     * @param y Second operant.\n', '     * @return The result of x*y.\n', '     */\n', '    function mul(uint256 x, uint256 y)\n', '    internal pure\n', '    returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0) || (z/x == y));\n', '        return z;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title The abstract ERC-20 Token Standard definition.\n', ' *\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'contract Token {\n', '    /// @dev Returns the total token supply.\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    /// @dev MUST trigger when tokens are transferred, including zero value transfers.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    /// @dev MUST trigger on any successful call to approve(address _spender, uint256 _value).\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Default implementation of the ERC-20 Token Standard.\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '     * @dev Transfers _value amount of tokens to address _to, and MUST fire the Transfer event. \n', '     * @dev The function SHOULD throw if the _from account balance does not have enough tokens to spend.\n', '     *\n', '     * @dev A token contract which creates new tokens SHOULD trigger a Transfer event with the _from address set to 0x0 when tokens are created.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     *\n', '     * @param _to The receiver of the tokens.\n', '     * @param _value The amount of tokens to send.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transfer(address _to, uint256 _value)\n', '    public\n', '    returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '            balances[_to] = SafeMath.add(balances[_to], _value);\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers _value amount of tokens from address _from to address _to, and MUST fire the Transfer event.\n', '     *\n', '     * @dev The transferFrom method is used for a withdraw workflow, allowing contracts to transfer tokens on your behalf. \n', '     * @dev This can be used for example to allow a contract to transfer tokens on your behalf and/or to charge fees in \n', '     * @dev sub-currencies. The function SHOULD throw unless the _from account has deliberately authorized the sender of \n', '     * @dev the message via some mechanism.\n', '     *\n', '     * Note Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\n', '     *\n', '     * @param _from The sender of the tokens.\n', '     * @param _to The receiver of the tokens.\n', '     * @param _value The amount of tokens to send.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] = SafeMath.add(balances[_to], _value);\n', '            balances[_from] = SafeMath.sub(balances[_from], _value);\n', '            allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the account balance of another account with address _owner.\n', '     *\n', '     * @param _owner The address of the account to check.\n', '     * @return The account balance.\n', '     */\n', '    function balanceOf(address _owner)\n', '    public view\n', '    returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Allows _spender to withdraw from your account multiple times, up to the _value amount. \n', '     * @dev If this function is called again it overwrites the current allowance with _value.\n', '     *\n', '     * @dev NOTE: To prevent attack vectors like the one described in [1] and discussed in [2], clients \n', '     * @dev SHOULD make sure to create user interfaces in such a way that they set the allowance first \n', '     * @dev to 0 before setting it to another value for the same spender. THOUGH The contract itself \n', "     * @dev shouldn't enforce it, to allow backwards compatilibilty with contracts deployed before.\n", '     * @dev [1] https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\n', '     * @dev [2] https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '    public\n', '    returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount which _spender is still allowed to withdraw from _owner.\n', '     *\n', '     * @param _owner The address of the sender.\n', '     * @param _spender The address of the receiver.\n', '     * @return The allowed withdrawal amount.\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '    public view\n', '    returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract RelocationToken {\n', '    // function of possible new contract to recieve tokenbalance to relocate - to be protected by msg.sender == StarambaToken\n', '    function recieveRelocation(address _creditor, uint _balance) external returns (bool);\n', '}\n', '\n', '\n', '\n', ' /*is StandardToken */\n', 'contract StarambaToken is StandardToken {\n', '\n', '    // Token metadata\n', '    string public constant name = "STARAMBA.Token";\n', '    string public constant symbol = "STT";\n', '    uint256 public constant decimals = 18;\n', '    string public constant version = "1";\n', '\n', '    uint256 public TOKEN_CREATION_CAP = 1000 * (10**6) * 10**decimals; // 1000 million STTs\n', '    uint256 public constant TOKEN_MIN = 1 * 10**decimals;              // 1 STT\n', '\n', '    address public STTadmin1;      // First administrator for multi-sig mechanism\n', '    address public STTadmin2;      // Second administrator for multi-sig mechanism\n', '\n', '    // Contracts current state (transactions still paused during sale or already publicly available)\n', '    bool public transactionsActive;\n', '\n', '    // Indicate if the token is in relocation mode\n', '    bool public relocationActive;\n', '    address public newTokenContractAddress;\n', '\n', '    // How often was the supply adjusted ? (See STT Whitepaper Version 1.0 from 23. May 2018 )\n', '    uint8 supplyAdjustmentCount = 0;\n', '\n', '    // Keep track of holders and icoBuyers\n', '    mapping (address => bool) public isHolder; // track if a user is a known token holder to the smart contract - important for payouts later\n', '    address[] public holders;                  // array of all known holders - important for payouts later\n', '\n', "    // Store the hashes of admins' msg.data\n", '    mapping (address => bytes32) private multiSigHashes;\n', '\n', '    // Declare vendor keys\n', '    mapping (address => bool) public vendors;\n', '\n', '    // Count amount of vendors for easier verification of correct contract deployment\n', '    uint8 public vendorCount;\n', '\n', '    // Events used for logging\n', '    event LogDeliverSTT(address indexed _to, uint256 _value);\n', '    //event Log\n', '\n', '    modifier onlyVendor() {\n', '        require(vendors[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    modifier isTransferable() {\n', '        require (transactionsActive == true);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        // check if transaction sender is admin.\n', '        require (msg.sender == STTadmin1 || msg.sender == STTadmin2);\n', '        // if yes, store his msg.data. \n', '        multiSigHashes[msg.sender] = keccak256(msg.data);\n', '        // check if his stored msg.data hash equals to the one of the other admin\n', '        if ((multiSigHashes[STTadmin1]) == (multiSigHashes[STTadmin2])) {\n', '            // if yes, both admins agreed - continue.\n', '            _;\n', '\n', '            // Reset hashes after successful execution\n', '            multiSigHashes[STTadmin1] = 0x0;\n', '            multiSigHashes[STTadmin2] = 0x0;\n', '        } else {\n', '            // if not (yet), return.\n', '            return;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Create a new STTToken contract.\n', '     *\n', '     *  _admin1 The first admin account that owns this contract.\n', '     *  _admin2 The second admin account that owns this contract.\n', '     *  _vendors List of exactly 10 addresses that are allowed to deliver tokens.\n', '     */\n', '    constructor(address _admin1, address _admin2, address[] _vendors)\n', '    public\n', '    {\n', '        // Check if the parameters make sense\n', '\n', '        // admin1 and admin2 address must be set and must be different\n', '        require (_admin1 != 0x0);\n', '        require (_admin2 != 0x0);\n', '        require (_admin1 != _admin2);\n', '\n', '        // 10 vendor instances for delivering token purchases\n', '        require (_vendors.length == 10);\n', '\n', '        totalSupply = 0;\n', '\n', '        // define state\n', '        STTadmin1 = _admin1;\n', '        STTadmin2 = _admin2;\n', '\n', '        for (uint8 i = 0; i < _vendors.length; i++){\n', '            vendors[_vendors[i]] = true;\n', '            vendorCount++;\n', '        }\n', '    }\n', '\n', '    // Overridden method to check for end of fundraising before allowing transfer of tokens\n', '    function transfer(address _to, uint256 _value)\n', '    public\n', '    isTransferable // Only allow token transfer after the fundraising has ended\n', '    returns (bool success)\n', '    {\n', '        bool result = super.transfer(_to, _value);\n', '        if (result) {\n', '            trackHolder(_to); // track the owner for later payouts\n', '        }\n', '        return result;\n', '    }\n', '\n', '    // Overridden method to check for end of fundraising before allowing transfer of tokens\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    isTransferable // Only allow token transfer after the fundraising has ended\n', '    returns (bool success)\n', '    {\n', '        bool result = super.transferFrom(_from, _to, _value);\n', '        if (result) {\n', '            trackHolder(_to); // track the owner for later payouts\n', '        }\n', '        return result;\n', '    }\n', '\n', '    // Allow for easier balance checking\n', '    function getBalanceOf(address _owner)\n', '    public\n', '    view\n', '    returns (uint256 _balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Perform an atomic swap between two token contracts \n', '    function relocate()\n', '    external \n', '    {\n', '        // Check if relocation was activated\n', '        require (relocationActive == true);\n', '        \n', '        // Define new token contract is\n', '        RelocationToken newSTT = RelocationToken(newTokenContractAddress);\n', '\n', '        // Burn the old balance\n', '        uint256 balance = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '\n', '        // Perform the relocation of balances to new contract\n', '        require(newSTT.recieveRelocation(msg.sender, balance));\n', '    }\n', '\n', '    // Allows to figure out the amount of known token holders\n', '    function getHolderCount()\n', '    public\n', '    view\n', '    returns (uint256 _holderCount)\n', '    {\n', '        return holders.length;\n', '    }\n', '\n', '    // Allows for easier retrieval of holder by array index\n', '    function getHolder(uint256 _index)\n', '    public\n', '    view\n', '    returns (address _holder)\n', '    {\n', '        return holders[_index];\n', '    }\n', '\n', '    function trackHolder(address _to)\n', '    private\n', '    returns (bool success)\n', '    {\n', '        // Check if the recipient is a known token holder\n', '        if (isHolder[_to] == false) {\n', '            // if not, add him to the holders array and mark him as a known holder\n', '            holders.push(_to);\n', '            isHolder[_to] = true;\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @dev delivers STT tokens from Leondra (Leondrino Exchange Germany)\n', '    function deliverTokens(address _buyer, uint256 _amount)\n', '    external\n', '    onlyVendor\n', '    {\n', '        require(_amount >= TOKEN_MIN);\n', '\n', '        uint256 checkedSupply = SafeMath.add(totalSupply, _amount);\n', '        require(checkedSupply <= TOKEN_CREATION_CAP);\n', '\n', '        // Adjust the balance\n', '        uint256 oldBalance = balances[_buyer];\n', '        balances[_buyer] = SafeMath.add(oldBalance, _amount);\n', '        totalSupply = checkedSupply;\n', '\n', '        trackHolder(_buyer);\n', '\n', '        // Log the creation of these tokens\n', '        emit LogDeliverSTT(_buyer, _amount);\n', '    }\n', '\n', '    /// @dev Creates new STT tokens\n', '    function deliverTokensBatch(address[] _buyer, uint256[] _amount)\n', '    external\n', '    onlyVendor\n', '    {\n', '        require(_buyer.length == _amount.length);\n', '\n', '        for (uint8 i = 0 ; i < _buyer.length; i++) {\n', '            require(_amount[i] >= TOKEN_MIN);\n', '            require(_buyer[i] != 0x0);\n', '\n', '            uint256 checkedSupply = SafeMath.add(totalSupply, _amount[i]);\n', '            require(checkedSupply <= TOKEN_CREATION_CAP);\n', '\n', '            // Adjust the balance\n', '            uint256 oldBalance = balances[_buyer[i]];\n', '            balances[_buyer[i]] = SafeMath.add(oldBalance, _amount[i]);\n', '            totalSupply = checkedSupply;\n', '\n', '            trackHolder(_buyer[i]);\n', '\n', '            // Log the creation of these tokens\n', '            emit LogDeliverSTT(_buyer[i], _amount[i]);\n', '        }\n', '    }\n', '\n', '    // Allow / Deny transfer of tokens\n', '    function transactionSwitch(bool _transactionsActive) \n', '    external \n', '    onlyOwner\n', '    {\n', '        transactionsActive = _transactionsActive;\n', '    }\n', '\n', '    // For eventual later moving to another token contract\n', '    function relocationSwitch(bool _relocationActive, address _newTokenContractAddress) \n', '    external \n', '    onlyOwner\n', '    {\n', '        if (_relocationActive) {\n', '            require(_newTokenContractAddress != 0x0);\n', '        } else {\n', '            require(_newTokenContractAddress == 0x0);\n', '        }\n', '        relocationActive = _relocationActive;\n', '        newTokenContractAddress = _newTokenContractAddress;\n', '    }\n', '\n', '    // Adjust the cap according to the white paper terms (See STT Whitepaper Version 1.0 from 23. May 2018 )\n', '    function adjustCap()\n', '    external\n', '    onlyOwner\n', '    {\n', '        require (supplyAdjustmentCount < 4);\n', '        TOKEN_CREATION_CAP = SafeMath.add(TOKEN_CREATION_CAP, 50 * (10**6) * 10**decimals); // 50 million STTs\n', '        supplyAdjustmentCount++;\n', '    }\n', '\n', "    // Burn function - name indicating the burn of ALL owner's tokens\n", '    function burnWholeBalance()\n', '    external\n', '    {\n', '        require(balances[msg.sender] > 0);\n', '        totalSupply = SafeMath.sub(totalSupply, balances[msg.sender]);\n', '        balances[msg.sender] = 0;\n', '    }\n', '\n', '}']
