['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', ' \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Owned Interface\n', ' * @dev Owned is interface for owner contract\n', ' */\n', '\n', 'contract Owned {\n', '    constructor() public { owner = msg.sender; }\n', '    address owner;\n', '    \n', '    \n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to relinquish control of the contract.\n', '    * @notice Renouncing to ownership will leave the contract without an owner.\n', '    * It will not be possible to call the functions with the `onlyOwner`\n', '    * modifier anymore.\n', '   */\n', '    \n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '   /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title InitialMoneyTokenIMT Interface\n', ' * @dev InitialMoneyTokenIMT is a token ERC20 contract for MoneyTokenIMT (MoneyTokenIMT.com)\n', ' */\n', '\n', 'contract IMoneyTokenIMTInterface is Owned {\n', '\n', '    /** total amount of tokens **/\n', '    uint256 public totalSupply;\n', '\n', '    /** \n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '    **/\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '\n', '    \n', '    /** @notice send `_value` token to `_to` from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '    **/\n', '     \n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /** \n', '     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     **/\n', '     \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     **/\n', '     \n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /** @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     **/\n', ' \n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    \n', '    // solhint-disable-next-line no-simple-event-func-name  \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '   \n', '}\n', '\n', '/**\n', ' * @title InitialMoneyTokenIMT\n', ' * @dev InitialMoneyTokenIMT is a token ERC20 contract for MoneyTokenIMT (MoneyTokenIMT.com)\n', ' */\n', 'contract InitialMoneyTokenIMT is IMoneyTokenIMTInterface {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '\n', '\n', '    //specific events\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    \n', '    string public name;                   //Initial Money Token\n', '    uint8 public decimals;                //18\n', '    string public symbol;                 //IMT\n', '    \n', '    constructor (\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '    ) public {\n', '\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes    \n', '    }\n', '    \n', '    \n', '    function transfer(address _to, uint256 _value)  public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        _transferFrom(msg.sender, _from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    \n', '    function burn(uint256 _value) public onlyOwner returns (bool success) {\n', '       _burn(msg.sender, _value);\n', '       return true;      \n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }   \n', '\n', '     /** \n', '       * Specific functins for contract\n', '     **/\n', '        \n', '    //resend any tokens\n', '    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success){\n', '        return IMoneyTokenIMTInterface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    /** \n', '      * internal functions\n', '    **/\n', '    \n', '    \n', '    //burn function\n', '    function _burn(address _who, uint256 _value) internal returns (bool success) {\n', '     \n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal  returns (bool success) {\n', '         \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function _transferFrom(address _who, address _from, address _to, uint256 _value) internal returns (bool success) {\n', '        \n', '        uint256 allow = allowed[_from][_who];\n', '        require(balances[_from] >= _value && allow >= _value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][_who] = allowed[_from][_who].sub(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', ' \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Owned Interface\n', ' * @dev Owned is interface for owner contract\n', ' */\n', '\n', 'contract Owned {\n', '    constructor() public { owner = msg.sender; }\n', '    address owner;\n', '    \n', '    \n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to relinquish control of the contract.\n', '    * @notice Renouncing to ownership will leave the contract without an owner.\n', '    * It will not be possible to call the functions with the `onlyOwner`\n', '    * modifier anymore.\n', '   */\n', '    \n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '   /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title InitialMoneyTokenIMT Interface\n', ' * @dev InitialMoneyTokenIMT is a token ERC20 contract for MoneyTokenIMT (MoneyTokenIMT.com)\n', ' */\n', '\n', 'contract IMoneyTokenIMTInterface is Owned {\n', '\n', '    /** total amount of tokens **/\n', '    uint256 public totalSupply;\n', '\n', '    /** \n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '    **/\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '\n', '    \n', '    /** @notice send `_value` token to `_to` from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '    **/\n', '     \n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /** \n', '     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     **/\n', '     \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /**\n', '     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     **/\n', '     \n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /** @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     **/\n', ' \n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    \n', '    // solhint-disable-next-line no-simple-event-func-name  \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '   \n', '}\n', '\n', '/**\n', ' * @title InitialMoneyTokenIMT\n', ' * @dev InitialMoneyTokenIMT is a token ERC20 contract for MoneyTokenIMT (MoneyTokenIMT.com)\n', ' */\n', 'contract InitialMoneyTokenIMT is IMoneyTokenIMTInterface {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '\n', '\n', '    //specific events\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    \n', '    string public name;                   //Initial Money Token\n', '    uint8 public decimals;                //18\n', '    string public symbol;                 //IMT\n', '    \n', '    constructor (\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '    ) public {\n', '\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes    \n', '    }\n', '    \n', '    \n', '    function transfer(address _to, uint256 _value)  public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        _transferFrom(msg.sender, _from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    \n', '    function burn(uint256 _value) public onlyOwner returns (bool success) {\n', '       _burn(msg.sender, _value);\n', '       return true;      \n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }   \n', '\n', '     /** \n', '       * Specific functins for contract\n', '     **/\n', '        \n', '    //resend any tokens\n', '    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success){\n', '        return IMoneyTokenIMTInterface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    /** \n', '      * internal functions\n', '    **/\n', '    \n', '    \n', '    //burn function\n', '    function _burn(address _who, uint256 _value) internal returns (bool success) {\n', '     \n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal  returns (bool success) {\n', '         \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function _transferFrom(address _who, address _from, address _to, uint256 _value) internal returns (bool success) {\n', '        \n', '        uint256 allow = allowed[_from][_who];\n', '        require(balances[_from] >= _value && allow >= _value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][_who] = allowed[_from][_who].sub(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '}']
