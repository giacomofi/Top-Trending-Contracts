['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping(address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '    {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private minters;\n', '\n', '    constructor() internal {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '\n', 'interface IQRToken {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '    function mint(address to, uint256 value)\n', '    external returns (bool);\n', '\n', '    function addMinter(address account)\n', '    external;\n', '\n', '    function frozenTime(address owner)\n', '    external view returns (uint);\n', '\n', '    function setFrozenTime(address owner, uint newtime)\n', '    external;\n', '}\n', '\n', 'contract IQRSaleFirst is MinterRole {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private  _usdc_for_iqr;\n', '    uint256 private _usdc_for_eth;\n', '    uint256 private _leftToSale;\n', '\n', '    address private _cold_wallet;\n', '\n', '    IQRToken private _token;\n', '\n', '    constructor() public  {\n', '        // price usd cents for one IQR. Default: 1 IQR = $0.06\n', '        _usdc_for_iqr = 6;\n', '        // usd cents for one ether. Default: 1 ETH = $130.92\n', '        _usdc_for_eth = 13092;\n', '        // MAX tokens to sale for this contract\n', '        _leftToSale = 200000000 ether;\n', '        // Address for ether\n', '        _cold_wallet = 0x5BAC0CE2276ebE6845c31C86499C6D7F5C9b0650;\n', '    }\n', '\n', '    function() public payable {\n', '        require(msg.value > 0.1 ether);\n', '        require(_token != address(0x0));\n', '        require(_cold_wallet != address(0x0));\n', '\n', '        uint256 received = msg.value;\n', '        uint256 tokens_to_send = received.mul(_usdc_for_eth).div(_usdc_for_iqr);\n', '        _leftToSale = _leftToSale.sub(tokens_to_send);\n', '        _token.mint(msg.sender, tokens_to_send);\n', '\n', '        _cold_wallet.transfer(msg.value);\n', '    }\n', '\n', '    function sendTokens(address beneficiary, uint256 tokens_to_send) public onlyMinter {\n', '        require(_token != address(0x0));\n', '        _leftToSale = _leftToSale.sub(tokens_to_send);\n', '        _token.mint(beneficiary, tokens_to_send);\n', '    }\n', '\n', '    function sendTokensToManyAddresses(address[] beneficiaries, uint256 tokens_to_send) public onlyMinter {\n', '        require(_token != address(0x0));\n', '        _leftToSale = _leftToSale.sub(tokens_to_send * beneficiaries.length);\n', '        for (uint i = 0; i < beneficiaries.length; i++) {\n', '            _token.mint(beneficiaries[i], tokens_to_send);\n', '        }\n', '    }\n', '\n', '    function setFrozenTime(address _owner, uint _newtime) public onlyMinter {\n', '        require(_token != address(0x0));\n', '        _token.setFrozenTime(_owner, _newtime);\n', '    }\n', '\n', '    function setFrozenTimeToManyAddresses(address[] _owners, uint _newtime) public onlyMinter {\n', '        require(_token != address(0x0));\n', '        for (uint i = 0; i < _owners.length; i++) {\n', '            _token.setFrozenTime(_owners[i], _newtime);\n', '        }\n', '    }\n', '\n', '    function unFrozen(address _owner) public onlyMinter {\n', '        require(_token != address(0x0));\n', '        _token.setFrozenTime(_owner, 0);\n', '    }\n', '\n', '    function unFrozenManyAddresses(address[] _owners) public onlyMinter {\n', '        require(_token != address(0x0));\n', '        for (uint i = 0; i < _owners.length; i++) {\n', '            _token.setFrozenTime(_owners[i], 0);\n', '        }\n', '    }\n', '\n', '    function usdc_for_iqr() public view returns (uint256) {\n', '        return _usdc_for_iqr;\n', '    }\n', '\n', '    function usdc_for_eth() public view returns (uint256) {\n', '        return _usdc_for_eth;\n', '    }\n', '\n', '    function leftToSale() public view returns (uint256) {\n', '        return _leftToSale;\n', '    }\n', '\n', '    function cold_wallet() public view returns (address) {\n', '        return _cold_wallet;\n', '    }\n', '\n', '    function token() public view returns (IQRToken) {\n', '        return _token;\n', '    }\n', '\n', '    function setUSDCforIQR(uint256 _usdc_for_iqr_) public onlyMinter {\n', '        _usdc_for_iqr = _usdc_for_iqr_;\n', '    }\n', '\n', '    function setUSDCforETH(uint256 _usdc_for_eth_) public onlyMinter {\n', '        _usdc_for_eth = _usdc_for_eth_;\n', '    }\n', '\n', '    function setColdWallet(address _cold_wallet_) public onlyMinter {\n', '        _cold_wallet = _cold_wallet_;\n', '    }\n', '\n', '    function setToken(IQRToken _token_) public onlyMinter {\n', '        _token = _token_;\n', '    }\n', '\n', '\n', '}']