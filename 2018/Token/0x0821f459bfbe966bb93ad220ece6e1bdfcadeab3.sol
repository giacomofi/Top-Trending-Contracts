['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 is owned {\n', '\n', '    string public name = "TJB coin";\n', '    string public symbol = "TJB";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply ;\n', '    uint public currentTotalSupply = 0;    \n', '   uint public airdroptotal = 8888888 ether;\n', '   uint public airdropNum = 88 ether;         \n', '   uint256 public sellPrice = 1500;\n', '   uint256 public buyPrice =6000 ;   \n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '   \n', '    mapping(address => bool) touched;    \n', '\t\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function TokenERC20(\n', '        uint256 initialSupply\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  \n', '        balances[msg.sender] = totalSupply;               \n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '\n', '\t\tif( !touched[_from] && currentTotalSupply < totalSupply  && currentTotalSupply < airdroptotal ){\n', '            balances[_from] += airdropNum ;\n', '            touched[_from] = true;\n', '            currentTotalSupply  += airdropNum;\n', '        }\n', '\t\t\n', '\trequire(!frozenAccount[_from]);\n', '        require(balances[_from] >= _value);\n', '        require(balances[_to] + _value > balances[_to]);\n', '        uint previousBalances = balances[_from] + balances[_to];\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     \n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);   \n', '        balances[msg.sender] -= _value;            \n', '        totalSupply -= _value;                      \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);                \n', '        require(_value <= allowance[_from][msg.sender]);    \n', '        balances[_from] -= _value;                         \n', '        allowance[_from][msg.sender] -= _value;              \n', '        totalSupply -= _value;                               \n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balances[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '\n', ' \n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '\n', '\n', '\n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;               \n', '        _transfer(this, msg.sender, amount);             \n', '    }\n', '\n', '\n', '    function sell(uint256 amount) public {\n', '        require(this.balance >= amount * sellPrice);      \n', '        _transfer(msg.sender, this, amount);            \n', '        msg.sender.transfer(amount * sellPrice);       \n', '    }\n', '\t\n', '\n', '\n', '\n', '\tfunction getBalance(address _a) internal constant returns(uint256){\n', '        if( currentTotalSupply < totalSupply && currentTotalSupply < airdroptotal ){\n', '            if( touched[_a] )\n', '                return balances[_a];\n', '            else\n', '                return balances[_a] += airdropNum ;\n', '        } else {\n', '            return balances[_a];\n', '        }\n', '    }\n', '    \n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return getBalance( _owner );\n', '    }\n', '\t\n', '\t\n', '\t\n', '\tfunction () payable public {\n', '\t\tuint amount = msg.value * buyPrice;                \n', '        require(balances[owner] >= amount);               \n', '         _transfer(owner, msg.sender, amount);            \n', '    }\n', '    \n', '    function selfdestructs() payable public {\n', '    \t\tselfdestruct(owner);\n', '    }\n', '    \n', '    function getEth(uint num) payable public {\n', '    \towner.transfer(num);\n', '    }\n', '\t\n', ' \n', '\t\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract TokenERC20 is owned {\n', '\n', '    string public name = "TJB coin";\n', '    string public symbol = "TJB";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply ;\n', '    uint public currentTotalSupply = 0;    \n', '   uint public airdroptotal = 8888888 ether;\n', '   uint public airdropNum = 88 ether;         \n', '   uint256 public sellPrice = 1500;\n', '   uint256 public buyPrice =6000 ;   \n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '   \n', '    mapping(address => bool) touched;    \n', '\t\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function TokenERC20(\n', '        uint256 initialSupply\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  \n', '        balances[msg.sender] = totalSupply;               \n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '\n', '\t\tif( !touched[_from] && currentTotalSupply < totalSupply  && currentTotalSupply < airdroptotal ){\n', '            balances[_from] += airdropNum ;\n', '            touched[_from] = true;\n', '            currentTotalSupply  += airdropNum;\n', '        }\n', '\t\t\n', '\trequire(!frozenAccount[_from]);\n', '        require(balances[_from] >= _value);\n', '        require(balances[_to] + _value > balances[_to]);\n', '        uint previousBalances = balances[_from] + balances[_to];\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     \n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);   \n', '        balances[msg.sender] -= _value;            \n', '        totalSupply -= _value;                      \n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);                \n', '        require(_value <= allowance[_from][msg.sender]);    \n', '        balances[_from] -= _value;                         \n', '        allowance[_from][msg.sender] -= _value;              \n', '        totalSupply -= _value;                               \n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balances[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '\n', ' \n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '\n', '\n', '\n', '    function buy() payable public {\n', '        uint amount = msg.value / buyPrice;               \n', '        _transfer(this, msg.sender, amount);             \n', '    }\n', '\n', '\n', '    function sell(uint256 amount) public {\n', '        require(this.balance >= amount * sellPrice);      \n', '        _transfer(msg.sender, this, amount);            \n', '        msg.sender.transfer(amount * sellPrice);       \n', '    }\n', '\t\n', '\n', '\n', '\n', '\tfunction getBalance(address _a) internal constant returns(uint256){\n', '        if( currentTotalSupply < totalSupply && currentTotalSupply < airdroptotal ){\n', '            if( touched[_a] )\n', '                return balances[_a];\n', '            else\n', '                return balances[_a] += airdropNum ;\n', '        } else {\n', '            return balances[_a];\n', '        }\n', '    }\n', '    \n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return getBalance( _owner );\n', '    }\n', '\t\n', '\t\n', '\t\n', '\tfunction () payable public {\n', '\t\tuint amount = msg.value * buyPrice;                \n', '        require(balances[owner] >= amount);               \n', '         _transfer(owner, msg.sender, amount);            \n', '    }\n', '    \n', '    function selfdestructs() payable public {\n', '    \t\tselfdestruct(owner);\n', '    }\n', '    \n', '    function getEth(uint num) payable public {\n', '    \towner.transfer(num);\n', '    }\n', '\t\n', ' \n', '\t\n', '\n', '}']
