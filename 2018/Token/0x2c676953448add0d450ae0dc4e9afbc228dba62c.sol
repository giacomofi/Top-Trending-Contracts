['pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '\n', '    bool public transfersEnabled;\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '\n', '    bool public transfersEnabled;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    /**\n', '    * Protection against short address attack\n', '    */\n', '    modifier onlyPayloadSize(uint numwords) {\n', '        assert(msg.data.length == numwords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        require(transfersEnabled);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        require(transfersEnabled);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        }\n', '        else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    address public ownerTwo;\n', '\n', '    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner || msg.sender == ownerTwo);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function changeOwnerTwo(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        emit OwnerChanged(owner, _newOwner);\n', '        ownerTwo = _newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    string public constant name = "FOOOZ";\n', '    string public constant symbol = "FOOOZ";\n', '    uint8 public constant decimals = 18;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount, address _owner) canMint internal returns (bool) {\n', '        balances[_to] = balances[_to].add(_amount);\n', '        balances[_owner] = balances[_owner].sub(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(_owner, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint internal returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Peterson&#39;s Law Protection\n', '     * Claim tokens\n', '     */\n', '    function claimTokens(address _token) public onlyOwner {\n', '        if (_token == 0x0) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        MintableToken token = MintableToken(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '\n', '        emit Transfer(_token, owner, balance);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    uint256 public tokenAllocated;\n', '\n', '    uint256 public hardWeiCap = 119000 * (10 ** 18);\n', '\n', '    constructor (address _wallet) public {\n', '        require(_wallet != address(0));\n', '        wallet = _wallet;\n', '    }\n', '}\n', '\n', '\n', 'contract FooozCrowdsale is Ownable, Crowdsale, MintableToken {\n', '    using SafeMath for uint256;\n', '\n', '    enum State {Active, Closed}\n', '    State public state;\n', '\n', '    mapping (address => uint256) public deposited;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 613333328 * (10 ** uint256(decimals));\n', '    uint256 public fundForSale = 466133330 * (10 ** uint256(decimals));\n', '\n', '    address public addressFundDevelopers = 0x326B7740e5E806fc731200A3ea92f588a86568A3;\n', '    address public addressFundBounty = 0xE585b723bDc6324dD55cf614fa83f61A88D5b3D8;\n', '    address public addressFundBonus = 0x1f318fE745bEE511a72A8AB2b704a5F285587335;\n', '    address public addressFundInvestment = 0x80A0BE0Ab330E48dE8E37277b838b9eB0Bb3bb6f;\n', '    address public addressFundAdministration = 0xFe3905B9Bd7C0c4164873180dfE0ee85FbFe9F19;\n', '\n', '\n', '    uint256[] public discount  = [50, 25, 20, 15, 10];\n', '\n', '\n', '\n', '    uint256 public weiMinSalePreIco = 1190 * 10 ** 15;\n', '    uint256 public weiMinSaleIco = 29 * 10 ** 15;\n', '    uint256 priceToken = 3362;\n', '    // $0.25 = 1 token => $1,000 = 1.19 ETH =>\n', '    //4,000 token = 1.19 ETH => 1 ETH = 4,000/1.19 = 3362 token\n', '\n', '    uint256 public countInvestor;\n', '    uint256 public currentAfterIcoPeriod;\n', '\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '    event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken);\n', '    event HardCapReached();\n', '    event Finalized();\n', '\n', '    constructor (address _owner, address _ownerTwo) public\n', '    Crowdsale(_owner)\n', '    {\n', '        require(_owner != address(0));\n', '        require(_ownerTwo != address(0));\n', '        owner = _owner;\n', '        ownerTwo = _ownerTwo;\n', '        //owner = msg.sender; //for test&#39;s\n', '        transfersEnabled = true;\n', '        mintingFinished = false;\n', '        state = State.Active;\n', '        totalSupply = INITIAL_SUPPLY;\n', '        mintForOwner(owner);\n', '    }\n', '\n', '    modifier inState(State _state) {\n', '        require(state == _state);\n', '        _;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function setPriceToken(uint256 _newPrice) public onlyOwner {\n', '        require(_newPrice > 0);\n', '        priceToken = _newPrice;\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address _investor) public inState(State.Active) payable returns (uint256){\n', '        require(_investor != address(0));\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = validPurchaseTokens(weiAmount);\n', '        if (tokens == 0) {revert();}\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        tokenAllocated = tokenAllocated.add(tokens);\n', '        mint(_investor, tokens, owner);\n', '\n', '        emit TokenPurchase(_investor, weiAmount, tokens);\n', '        if (deposited[_investor] == 0) {\n', '            countInvestor = countInvestor.add(1);\n', '        }\n', '        deposit(_investor);\n', '        wallet.transfer(weiAmount);\n', '        return tokens;\n', '    }\n', '\n', '    function getTotalAmountOfTokens(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 currentDate = now;\n', '        //currentDate = 1534204800; //for test&#39;s (Tue, 14 Aug 2018 00:00:00 GMT)\n', '        uint256 currentPeriod = getPeriod(currentDate);\n', '        uint256 amountOfTokens = 0;\n', '        if(currentPeriod < 5){\n', '            amountOfTokens = _weiAmount.mul(priceToken).mul(discount[currentPeriod] + 100).div(100);\n', '        }\n', '        if(currentPeriod == 0 && _weiAmount < weiMinSalePreIco){\n', '            amountOfTokens = 0;\n', '        }\n', '        if(0 < currentPeriod && currentPeriod < 5 && _weiAmount < weiMinSaleIco){\n', '            amountOfTokens = 0;\n', '        }\n', '        return amountOfTokens;\n', '    }\n', '\n', '    /**\n', '    * Pre-ICO sale starts on 01 of Jul, ends on 05 Jul 2018\n', '    * 1st. Stage starts 06 of Jul, ends on 15 of Jul , 2018\n', '    * 2nd. Stage starts 16 of Jul, ends on 25 of Jul , 2018\n', '    * 3rd. Stage starts 26 of Jul, ends on 05 of Aug , 2018\n', '    * 4th. Stage starts 06 of Aug, ends on 15  of Aug , 2018\n', '    */\n', '    function getPeriod(uint256 _currentDate) public pure returns (uint) {\n', '        //1530403200 - July, 01, 2018 00:00:00 && 1530835199 - July, 05, 2018 23:59:59\n', '        if( 1530403200 <= _currentDate && _currentDate <= 1530835199){\n', '            return 0;\n', '        }\n', '        //1530835200 - July, 06, 2018 00:00:00 && 1531699199 - July, 15, 2018 23:59:59\n', '        if( 1530835200 <= _currentDate && _currentDate <= 1531699199){\n', '            return 1;\n', '        }\n', '        //1531699200 - July, 16, 2018 00:00:00 && 1532563199 - July, 25, 2018 23:59:59\n', '        if( 1531699200 <= _currentDate && _currentDate <= 1532563199){\n', '            return 2;\n', '        }\n', '        //1532563200 - July, 26, 2018 00:00:00 && 1533513599 - August,   05, 2018 23:59:59\n', '        if( 1532563200 <= _currentDate && _currentDate <= 1533513599){\n', '            return 3;\n', '        }\n', '        //1533513600 - August,   06, 2018 00:00:00 && 1534377599 - August,   15, 2018 23:59:59\n', '        if( 1533513600 <= _currentDate && _currentDate <= 1534377599){\n', '            return 4;\n', '        }\n', '        return 10;\n', '    }\n', '\n', '    function getAfterIcoPeriod(uint256 _currentDate) public pure returns (uint) {\n', '        uint256 endIco = 1534377600; // August,   16, 2018 00:00:00\n', '        if( endIco < _currentDate && _currentDate <= endIco + 2*365 days){\n', '            return 100;\n', '        }\n', '        if( endIco + 2*365 days < _currentDate && _currentDate <= endIco + 4*365 days){\n', '            return 200;\n', '        }\n', '        if( endIco + 4*365 days < _currentDate && _currentDate <= endIco + 6*365 days){\n', '            return 300;\n', '        }\n', '        if( endIco + 6*365 days < _currentDate && _currentDate <= endIco + 8*365 days){\n', '            return 400;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function mintAfterIcoPeriod() public returns (bool result) {\n', '        uint256 totalCost = tokenAllocated.div(priceToken);\n', '        uint256 fivePercent = 0;\n', '        uint256 currentDate = now;\n', '        //currentDate = 1571101199; //for test Oct, 15, 2019\n', '        bool changePeriod = false;\n', '        uint256 nonSoldToken = totalSupply.sub(tokenAllocated);\n', '        uint256 mintTokens = 0;\n', '        result = false;\n', '        if (currentAfterIcoPeriod < getAfterIcoPeriod(currentDate)){\n', '            currentAfterIcoPeriod = currentAfterIcoPeriod.add(getAfterIcoPeriod(currentDate));\n', '            changePeriod = true;\n', '        }\n', '        if(totalCost.mul(100).div(weiRaised) < 200 || changePeriod){\n', '            mintTokens = nonSoldToken.div(4); // 25%\n', '            fivePercent = mintTokens.div(20); // 5%\n', '\n', '            balances[addressFundBonus] = balances[addressFundBonus].add(fivePercent.mul(2));\n', '            balances[addressFundBounty] = balances[addressFundBounty].add(fivePercent);\n', '            balances[addressFundInvestment] = balances[addressFundInvestment].add(fivePercent.mul(10));\n', '            balances[addressFundAdministration] = balances[addressFundAdministration].add(fivePercent);\n', '            //balances[ownerTwo] = balances[ownerTwo].add(fivePercent.mul(6));\n', '\n', '            balances[owner] = balances[owner].sub(fivePercent.mul(14)); // - 70%\n', '            tokenAllocated = tokenAllocated.add(fivePercent.mul(14));\n', '            result = true;\n', '        }\n', '    }\n', '\n', '    function deposit(address investor) internal {\n', '        require(state == State.Active);\n', '        deposited[investor] = deposited[investor].add(msg.value);\n', '    }\n', '\n', '    function mintForOwner(address _wallet) internal returns (bool result) {\n', '        result = false;\n', '        uint256 fundBounty = 24533333 * (10 ** uint256(decimals));\n', '        uint256 fundDevelopers = 122666665 * (10 ** uint256(decimals));\n', '        require(_wallet != address(0));\n', '        balances[addressFundDevelopers] = balances[addressFundDevelopers].add(fundDevelopers);\n', '        balances[addressFundBounty] = balances[addressFundBounty].add(fundBounty);\n', '        tokenAllocated = tokenAllocated.add(fundDevelopers).add(fundBounty);\n', '        balances[_wallet] = balances[_wallet].add(INITIAL_SUPPLY).sub(tokenAllocated);\n', '        result = true;\n', '    }\n', '\n', '    function getDeposited(address _investor) public view returns (uint256){\n', '        return deposited[_investor];\n', '    }\n', '\n', '    function validPurchaseTokens(uint256 _weiAmount) public inState(State.Active) returns (uint256) {\n', '        uint256 addTokens = getTotalAmountOfTokens(_weiAmount);\n', '        if (tokenAllocated.add(addTokens) > fundForSale) {\n', '            emit TokenLimitReached(tokenAllocated, addTokens);\n', '            return 0;\n', '        }\n', '        if (weiRaised.add(_weiAmount) > hardWeiCap) {\n', '            emit HardCapReached();\n', '            return 0;\n', '        }\n', '        return addTokens;\n', '    }\n', '\n', '    function finalize() public onlyOwner inState(State.Active) returns (bool result) {\n', '        result = false;\n', '        state = State.Closed;\n', '        wallet.transfer(address(this).balance);\n', '        finishMinting();\n', '        emit Finalized();\n', '        result = true;\n', '    }\n', '\n', '}']