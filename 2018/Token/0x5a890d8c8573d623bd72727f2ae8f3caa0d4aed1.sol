['pragma solidity ^0.4.20;\n', '\n', '/*   HadesCoin go to the moon\n', ' *  \n', ' *  $$    $$   $$$$$$   $$$$$$$$   $$$$$$$$$   $$$$$$$$  \n', ' *  $$    $$  $$    $$  $$     $$  $$          $$  \n', ' *  $$    $$  $$    $$  $$     $$  $$          $$   \n', ' *  $$$$$$$$  $$$$$$$$  $$     $$  $$$$$$$$$   $$$$$$$$  \n', ' *  $$    $$  $$    $$  $$     $$  $$                $$  \n', ' *  $$    $$  $$    $$  $$     $$  $$                $$  \n', ' *  $$    $$  $$    $$  $$$$$$$$   $$$$$$$$$   $$$$$$$$   \n', ' */\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' *      ERC223 contract interface with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n', ' */\n', 'contract ERC223 {\n', '\n', '\n', '    // ERC223 and ERC20 functions \n', '    function balanceOf(address who) public view returns (uint256);\n', '    function totalSupply() public view returns (uint256 _supply);\n', '    function transfer(address to, uint256 value) public returns (bool ok);\n', '    function transfer(address to, uint256 value, bytes data) public returns (bool ok);\n', '    function transfer(address to, uint256 value, bytes data, string customFallback) public returns (bool ok);\n', '    event LogTransfer(address indexed from, address indexed to, uint256 value, bytes indexed data); \n', '\n', '    // ERC223 functions\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function decimals() public view returns (uint8 _decimals);\n', '\n', '    // ERC20 functions \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event LogTransfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event LogApproval(address indexed _owner, address indexed _spender, uint256 _value);\n', '   \n', '\n', '    event LogBurn(address indexed burner, uint256 value);\n', '\n', '}\n', '\n', '    // ERC223 functions\n', ' contract ContractReceiver {\n', '\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        tkn.sig = bytes4(u);\n', '        \n', '    }\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', '\n', '\n', 'contract Hadescoin is ERC223  {\n', '    \n', '    using SafeMath for uint256;\n', '    using SafeMath for uint;\n', '    address owner = msg.sender;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public blacklist;\n', '    mapping (address => uint) public increase;\n', '    mapping (address => uint256) public unlockUnixTime;\n', '    uint maxIncrease=20;\n', '    address public target;\n', '    string public constant _name = "HadesCoin";\n', '    string public constant _symbol = "HADC";\n', '    uint8 public constant _decimals = 18;\n', '    uint256 public toGiveBase = 5000e18;\n', '    uint256 public increaseBase = 500e18;\n', '    uint256 public _totalSupply = 20000000000e18;\n', '\n', '    uint256 public OfficalHold = _totalSupply.div(100).mul(18);\n', '    uint256 public totalRemaining = _totalSupply;\n', '    uint256 public totalDistributed = 0;\n', '    bool public canTransfer = true;\n', '    uint256 public etherGetBase=5000000;\n', '\n', '\n', '\n', '    bool public distributionFinished = false;\n', '    bool public finishFreeGetToken = false;\n', '    bool public finishEthGetToken = false;    \n', '    modifier canDistr() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier canTrans() {\n', '        require(canTransfer == true);\n', '        _;\n', '    }    \n', '    modifier onlyWhitelist() {\n', '        require(blacklist[msg.sender] == false);\n', '        _;\n', '    }\n', '    \n', '    function Hadescoin (address _target) public {\n', '        owner = msg.sender;\n', '        target = _target;\n', '        distr(target, OfficalHold);\n', '    }\n', '    \n', '    function changeOwner(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '      }\n', '\n', '    \n', '    function enableWhitelist(address[] addresses) onlyOwner public {\n', '        require(addresses.length <= 255);\n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = false;\n', '        }\n', '    }\n', '\n', '    function disableWhitelist(address[] addresses) onlyOwner public {\n', '        require(addresses.length <= 255);\n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = true;\n', '        }\n', '    }\n', '    function changeIncrease(address[] addresses, uint256[] _amount) onlyOwner public {\n', '        require(addresses.length <= 255);\n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            require(_amount[i] <= maxIncrease);\n', '            increase[addresses[i]] = _amount[i];\n', '        }\n', '    }\n', '    function finishDistribution() onlyOwner canDistr public returns (bool) {\n', '        distributionFinished = true;\n', '        return true;\n', '    }\n', '    function startDistribution() onlyOwner  public returns (bool) {\n', '        distributionFinished = false;\n', '        return true;\n', '    }\n', '    function finishFreeGet() onlyOwner canDistr public returns (bool) {\n', '        finishFreeGetToken = true;\n', '        return true;\n', '    }\n', '    function finishEthGet() onlyOwner canDistr public returns (bool) {\n', '        finishEthGetToken = true;\n', '        return true;\n', '    }\n', '    function startFreeGet() onlyOwner canDistr public returns (bool) {\n', '        finishFreeGetToken = false;\n', '        return true;\n', '    }\n', '    function startEthGet() onlyOwner canDistr public returns (bool) {\n', '        finishEthGetToken = false;\n', '        return true;\n', '    }\n', '    function startTransfer() onlyOwner  public returns (bool) {\n', '        canTransfer = true;\n', '        return true;\n', '    }\n', '    function stopTransfer() onlyOwner  public returns (bool) {\n', '        canTransfer = false;\n', '        return true;\n', '    }\n', '    function changeBaseValue(uint256 _toGiveBase,uint256 _increaseBase,uint256 _etherGetBase,uint _maxIncrease) onlyOwner public returns (bool) {\n', '        toGiveBase = _toGiveBase;\n', '        increaseBase = _increaseBase;\n', '        etherGetBase=_etherGetBase;\n', '        maxIncrease=_maxIncrease;\n', '        return true;\n', '    }\n', '    \n', '    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        require(totalRemaining >= 0);\n', '        require(_amount<=totalRemaining);\n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        LogTransfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\n', '        \n', '        require(addresses.length <= 255);\n', '        require(amount <= totalRemaining);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            require(amount <= totalRemaining);\n', '            distr(addresses[i], amount);\n', '        }\n', '  \n', '        if (totalDistributed >= _totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\n', '\n', '        require(addresses.length <= 255);\n', '        require(addresses.length == amounts.length);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            require(amounts[i] <= totalRemaining);\n', '            distr(addresses[i], amounts[i]);\n', '            \n', '            if (totalDistributed >= _totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function () external payable {\n', '            getTokens();\n', '     }   \n', '    function getTokens() payable canDistr onlyWhitelist public {\n', '\n', '        \n', '        if (toGiveBase > totalRemaining) {\n', '            toGiveBase = totalRemaining;\n', '        }\n', '        address investor = msg.sender;\n', '        uint256 etherValue=msg.value;\n', '        uint256 value;\n', '        \n', '        if(etherValue>1e15){\n', '            require(finishEthGetToken==false);\n', '            value=etherValue.mul(etherGetBase);\n', '            value=value.add(toGiveBase);\n', '            require(value <= totalRemaining);\n', '            distr(investor, value);\n', '            if(!owner.send(etherValue))revert();           \n', '\n', '        }else{\n', '            require(finishFreeGetToken==false\n', '            && toGiveBase <= totalRemaining\n', '            && increase[investor]<=maxIncrease\n', '            && now>=unlockUnixTime[investor]);\n', '            value=value.add(increase[investor].mul(increaseBase));\n', '            value=value.add(toGiveBase);\n', '            increase[investor]+=1;\n', '            distr(investor, value);\n', '            unlockUnixTime[investor]=now+1 days;\n', '        }        \n', '        if (totalDistributed >= _totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) canTrans public returns (bool success) {\n', '        require(_value > 0\n', '                && blacklist[msg.sender] == false \n', '                && blacklist[_to] == false);\n', '\n', '        if (isContract(_to)) {\n', '            require(balances[msg.sender] >= _value);\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '            LogTransfer(msg.sender, _to, _value, _data);\n', '            LogTransfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) canTrans public  returns (bool success) {\n', '        require(_value > 0\n', '                && blacklist[msg.sender] == false \n', '                && blacklist[_to] == false);\n', '\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) canTrans public returns (bool success) {\n', '        require(_value > 0\n', '                && blacklist[msg.sender] == false \n', '                && blacklist[_to] == false);\n', '\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    // function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        LogTransfer(msg.sender, _to, _value, _data);\n', '        LogTransfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        LogTransfer(msg.sender, _to, _value, _data);\n', '        LogTransfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) canTrans public returns (bool success) {\n', '        require(_to != address(0)\n', '                && _value > 0\n', '                && balances[_from] >= _value\n', '                && allowed[_from][msg.sender] >= _value\n', '                && blacklist[_from] == false \n', '                && blacklist[_to] == false);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        LogTransfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        LogApproval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function getTokenBalance(address tokenAddress, address who) constant public returns (uint256){\n', '        ForeignToken t = ForeignToken(tokenAddress);\n', '        uint256 bal = t.balanceOf(who);\n', '        return bal;\n', '    }\n', '    \n', '    function withdraw(address receiveAddress) onlyOwner public {\n', '        uint256 etherBalance = this.balance;\n', '        if(!receiveAddress.send(etherBalance))revert();   \n', '\n', '    }\n', '    \n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[msg.sender]);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        totalDistributed = totalDistributed.sub(_value);\n', '        LogBurn(burner, _value);\n', '    }\n', '    \n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '    function name() public view returns (string Name) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string Symbol) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8 Decimals) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 TotalSupply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '/*   HadesCoin go to the moon\n', ' *  \n', ' *  $$    $$   $$$$$$   $$$$$$$$   $$$$$$$$$   $$$$$$$$  \n', ' *  $$    $$  $$    $$  $$     $$  $$          $$  \n', ' *  $$    $$  $$    $$  $$     $$  $$          $$   \n', ' *  $$$$$$$$  $$$$$$$$  $$     $$  $$$$$$$$$   $$$$$$$$  \n', ' *  $$    $$  $$    $$  $$     $$  $$                $$  \n', ' *  $$    $$  $$    $$  $$     $$  $$                $$  \n', ' *  $$    $$  $$    $$  $$$$$$$$   $$$$$$$$$   $$$$$$$$   \n', ' */\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' *      ERC223 contract interface with ERC20 functions and events\n', ' *      Fully backward compatible with ERC20\n', ' *      Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n', ' */\n', 'contract ERC223 {\n', '\n', '\n', '    // ERC223 and ERC20 functions \n', '    function balanceOf(address who) public view returns (uint256);\n', '    function totalSupply() public view returns (uint256 _supply);\n', '    function transfer(address to, uint256 value) public returns (bool ok);\n', '    function transfer(address to, uint256 value, bytes data) public returns (bool ok);\n', '    function transfer(address to, uint256 value, bytes data, string customFallback) public returns (bool ok);\n', '    event LogTransfer(address indexed from, address indexed to, uint256 value, bytes indexed data); \n', '\n', '    // ERC223 functions\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function decimals() public view returns (uint8 _decimals);\n', '\n', '    // ERC20 functions \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event LogTransfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event LogApproval(address indexed _owner, address indexed _spender, uint256 _value);\n', '   \n', '\n', '    event LogBurn(address indexed burner, uint256 value);\n', '\n', '}\n', '\n', '    // ERC223 functions\n', ' contract ContractReceiver {\n', '\n', '    struct TKN {\n', '        address sender;\n', '        uint value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        tkn.sig = bytes4(u);\n', '        \n', '    }\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', '\n', '\n', 'contract Hadescoin is ERC223  {\n', '    \n', '    using SafeMath for uint256;\n', '    using SafeMath for uint;\n', '    address owner = msg.sender;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public blacklist;\n', '    mapping (address => uint) public increase;\n', '    mapping (address => uint256) public unlockUnixTime;\n', '    uint maxIncrease=20;\n', '    address public target;\n', '    string public constant _name = "HadesCoin";\n', '    string public constant _symbol = "HADC";\n', '    uint8 public constant _decimals = 18;\n', '    uint256 public toGiveBase = 5000e18;\n', '    uint256 public increaseBase = 500e18;\n', '    uint256 public _totalSupply = 20000000000e18;\n', '\n', '    uint256 public OfficalHold = _totalSupply.div(100).mul(18);\n', '    uint256 public totalRemaining = _totalSupply;\n', '    uint256 public totalDistributed = 0;\n', '    bool public canTransfer = true;\n', '    uint256 public etherGetBase=5000000;\n', '\n', '\n', '\n', '    bool public distributionFinished = false;\n', '    bool public finishFreeGetToken = false;\n', '    bool public finishEthGetToken = false;    \n', '    modifier canDistr() {\n', '        require(!distributionFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    modifier canTrans() {\n', '        require(canTransfer == true);\n', '        _;\n', '    }    \n', '    modifier onlyWhitelist() {\n', '        require(blacklist[msg.sender] == false);\n', '        _;\n', '    }\n', '    \n', '    function Hadescoin (address _target) public {\n', '        owner = msg.sender;\n', '        target = _target;\n', '        distr(target, OfficalHold);\n', '    }\n', '    \n', '    function changeOwner(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '      }\n', '\n', '    \n', '    function enableWhitelist(address[] addresses) onlyOwner public {\n', '        require(addresses.length <= 255);\n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = false;\n', '        }\n', '    }\n', '\n', '    function disableWhitelist(address[] addresses) onlyOwner public {\n', '        require(addresses.length <= 255);\n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            blacklist[addresses[i]] = true;\n', '        }\n', '    }\n', '    function changeIncrease(address[] addresses, uint256[] _amount) onlyOwner public {\n', '        require(addresses.length <= 255);\n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            require(_amount[i] <= maxIncrease);\n', '            increase[addresses[i]] = _amount[i];\n', '        }\n', '    }\n', '    function finishDistribution() onlyOwner canDistr public returns (bool) {\n', '        distributionFinished = true;\n', '        return true;\n', '    }\n', '    function startDistribution() onlyOwner  public returns (bool) {\n', '        distributionFinished = false;\n', '        return true;\n', '    }\n', '    function finishFreeGet() onlyOwner canDistr public returns (bool) {\n', '        finishFreeGetToken = true;\n', '        return true;\n', '    }\n', '    function finishEthGet() onlyOwner canDistr public returns (bool) {\n', '        finishEthGetToken = true;\n', '        return true;\n', '    }\n', '    function startFreeGet() onlyOwner canDistr public returns (bool) {\n', '        finishFreeGetToken = false;\n', '        return true;\n', '    }\n', '    function startEthGet() onlyOwner canDistr public returns (bool) {\n', '        finishEthGetToken = false;\n', '        return true;\n', '    }\n', '    function startTransfer() onlyOwner  public returns (bool) {\n', '        canTransfer = true;\n', '        return true;\n', '    }\n', '    function stopTransfer() onlyOwner  public returns (bool) {\n', '        canTransfer = false;\n', '        return true;\n', '    }\n', '    function changeBaseValue(uint256 _toGiveBase,uint256 _increaseBase,uint256 _etherGetBase,uint _maxIncrease) onlyOwner public returns (bool) {\n', '        toGiveBase = _toGiveBase;\n', '        increaseBase = _increaseBase;\n', '        etherGetBase=_etherGetBase;\n', '        maxIncrease=_maxIncrease;\n', '        return true;\n', '    }\n', '    \n', '    function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        require(totalRemaining >= 0);\n', '        require(_amount<=totalRemaining);\n', '        totalDistributed = totalDistributed.add(_amount);\n', '        totalRemaining = totalRemaining.sub(_amount);\n', '\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        LogTransfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\n', '        \n', '        require(addresses.length <= 255);\n', '        require(amount <= totalRemaining);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            require(amount <= totalRemaining);\n', '            distr(addresses[i], amount);\n', '        }\n', '  \n', '        if (totalDistributed >= _totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '    }\n', '    \n', '    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner canDistr public {\n', '\n', '        require(addresses.length <= 255);\n', '        require(addresses.length == amounts.length);\n', '        \n', '        for (uint8 i = 0; i < addresses.length; i++) {\n', '            require(amounts[i] <= totalRemaining);\n', '            distr(addresses[i], amounts[i]);\n', '            \n', '            if (totalDistributed >= _totalSupply) {\n', '                distributionFinished = true;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function () external payable {\n', '            getTokens();\n', '     }   \n', '    function getTokens() payable canDistr onlyWhitelist public {\n', '\n', '        \n', '        if (toGiveBase > totalRemaining) {\n', '            toGiveBase = totalRemaining;\n', '        }\n', '        address investor = msg.sender;\n', '        uint256 etherValue=msg.value;\n', '        uint256 value;\n', '        \n', '        if(etherValue>1e15){\n', '            require(finishEthGetToken==false);\n', '            value=etherValue.mul(etherGetBase);\n', '            value=value.add(toGiveBase);\n', '            require(value <= totalRemaining);\n', '            distr(investor, value);\n', '            if(!owner.send(etherValue))revert();           \n', '\n', '        }else{\n', '            require(finishFreeGetToken==false\n', '            && toGiveBase <= totalRemaining\n', '            && increase[investor]<=maxIncrease\n', '            && now>=unlockUnixTime[investor]);\n', '            value=value.add(increase[investor].mul(increaseBase));\n', '            value=value.add(toGiveBase);\n', '            increase[investor]+=1;\n', '            distr(investor, value);\n', '            unlockUnixTime[investor]=now+1 days;\n', '        }        \n', '        if (totalDistributed >= _totalSupply) {\n', '            distributionFinished = true;\n', '        }\n', '\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) canTrans public returns (bool success) {\n', '        require(_value > 0\n', '                && blacklist[msg.sender] == false \n', '                && blacklist[_to] == false);\n', '\n', '        if (isContract(_to)) {\n', '            require(balances[msg.sender] >= _value);\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '            LogTransfer(msg.sender, _to, _value, _data);\n', '            LogTransfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) canTrans public  returns (bool success) {\n', '        require(_value > 0\n', '                && blacklist[msg.sender] == false \n', '                && blacklist[_to] == false);\n', '\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) canTrans public returns (bool success) {\n', '        require(_value > 0\n', '                && blacklist[msg.sender] == false \n', '                && blacklist[_to] == false);\n', '\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '    // function that is called when transaction target is an address\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        LogTransfer(msg.sender, _to, _value, _data);\n', '        LogTransfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // function that is called when transaction target is a contract\n', '    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        LogTransfer(msg.sender, _to, _value, _data);\n', '        LogTransfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) canTrans public returns (bool success) {\n', '        require(_to != address(0)\n', '                && _value > 0\n', '                && balances[_from] >= _value\n', '                && allowed[_from][msg.sender] >= _value\n', '                && blacklist[_from] == false \n', '                && blacklist[_to] == false);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        LogTransfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        LogApproval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function getTokenBalance(address tokenAddress, address who) constant public returns (uint256){\n', '        ForeignToken t = ForeignToken(tokenAddress);\n', '        uint256 bal = t.balanceOf(who);\n', '        return bal;\n', '    }\n', '    \n', '    function withdraw(address receiveAddress) onlyOwner public {\n', '        uint256 etherBalance = this.balance;\n', '        if(!receiveAddress.send(etherBalance))revert();   \n', '\n', '    }\n', '    \n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[msg.sender]);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        totalDistributed = totalDistributed.sub(_value);\n', '        LogBurn(burner, _value);\n', '    }\n', '    \n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '    function name() public view returns (string Name) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string Symbol) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8 Decimals) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256 TotalSupply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}']
