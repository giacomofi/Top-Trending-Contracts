['pragma solidity ^0.4.18;\n', '\n', 'contract ParentContract\n', '{\n', '     function totalSupply() constant returns(uint256 supply)\n', '     {\n', '\n', '     }\n', '     function balanceOf(address _owner) constant returns(uint256 balance)\n', '     {\n', '\n', '     }\n', '     function transfer(address _to,uint256 _value) constant  \n', 'returns(bool success)\n', '     {\n', '\n', '     }\n', '     function transferFrom(address _from,address _to,uint256 _value)  \n', 'constant returns(bool success)\n', '     {\n', '\n', '     }\n', '     function approve(address _spender,uint256 _value) constant  \n', 'returns(bool success)\n', '     {\n', '\n', '     }\n', '     function allowance(address _owner,address _spender) constant  \n', 'returns(uint256 remaining)\n', '     {\n', '\n', '     }\n', '     event Transfer(address indexed _from,address indexed _to,uint256 _value);\n', '     event Approval(address indexed _owner,address indexed  \n', '_spender,uint256 _value);\n', '}\n', '\n', 'contract ChildContract is ParentContract\n', '{\n', '     mapping (address => uint256 )balances;\n', '     mapping (address => mapping (address => uint256 ))allowed;\n', '     uint256 public totalSupply;\n', '     function transfer(address _to,uint256 _value) constant  \n', 'returns(bool success)\n', '     {\n', '         if(balances[msg.sender]>=_value && _value>0)\n', '         {\n', '             balances[msg.sender]-=_value;\n', '             balances[_to]+=_value;\n', '             Transfer(msg.sender,_to,_value);\n', '             return true;\n', '         }else{\n', '             return false;\n', '             }\n', '     }\n', '\n', '     function transferFrom(address _from,address _to,uint256 _value)  \n', 'constant returns(bool success)\n', '     {\n', '         if(balances[_from]>=_value &&  \n', 'allowed[_from][msg.sender]>=_value && _value>0)\n', '         {\n', '             balances[_from]-=_value;\n', '             balances[_to]+=_value;\n', '             allowed[_from][msg.sender] -=_value;\n', '             Transfer(_from,_to,_value);\n', '             return true;\n', '         }else{\n', '             return false;\n', '             }\n', '     }\n', '     function balanceOf(address _owner) constant returns(uint256 balance)\n', '     {\n', '         return balances[_owner];\n', '     }\n', '     function approve(address _spender,uint256 _value) constant  \n', 'returns(bool success)\n', '     {\n', '       allowed[msg.sender][_spender] -=_value;\n', '       Approval(msg.sender,_spender,_value);\n', '       return true;\n', '     }\n', '     function allowance(address _owner,address _spender) constant  \n', 'returns(uint256 remaining)\n', '     {\n', '         return allowed[_owner][_spender];\n', '     }\n', '}\n', 'contract GenerateTokenContract is ChildContract\n', '{\n', '     string public name;\n', '     uint8 public decimals;\n', '     string public symbol;\n', '     string public version="HFS.1.0";\n', '     uint256 public unitsOneEthCanBuy;\n', '     uint256 public totalEthInWei;\n', '     address public fundsWallet;\n', '\n', '     function GenerateTokenContract()\n', '     {\n', '         balances[msg.sender]=800000000000000000000000000;\n', '         totalSupply=800000000000000000000000000;\n', '         name="HASH FOREX SINGAPORE";\n', '         decimals=18;\n', '         symbol="HFS";\n', '         unitsOneEthCanBuy=11150;\n', '         fundsWallet=msg.sender;\n', '     }\n', '     function () payable\n', '     {\n', '         totalEthInWei=totalEthInWei+msg.value;\n', '         uint256 amount=msg.value*unitsOneEthCanBuy;\n', '         if(balances[fundsWallet]<amount)\n', '         {\n', '             return;\n', '         }\n', '         balances[fundsWallet]=balances[fundsWallet]-amount;\n', '         balances[msg.sender]=balances[msg.sender]+amount;\n', '         Transfer(fundsWallet,msg.sender,amount);\n', '         fundsWallet.transfer(msg.value);\n', '     }\n', '\n', '     function approveAndCall(address _spender,uint256 _value,bytes  \n', '_extraData)returns(bool success)\n', '     {\n', '         allowed[msg.sender][_spender]=_value;\n', '         Approval(msg.sender,_spender,_value);\n', '          \n', 'if(!_spender.call(bytes4(bytes32(sha3("reciveApproval(address,uint256,address,bytes)"))),msg.sender,_value,this,_extraData))\n', '         {\n', '             throw;\n', '         }\n', '         return true;\n', '     }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract ParentContract\n', '{\n', '     function totalSupply() constant returns(uint256 supply)\n', '     {\n', '\n', '     }\n', '     function balanceOf(address _owner) constant returns(uint256 balance)\n', '     {\n', '\n', '     }\n', '     function transfer(address _to,uint256 _value) constant  \n', 'returns(bool success)\n', '     {\n', '\n', '     }\n', '     function transferFrom(address _from,address _to,uint256 _value)  \n', 'constant returns(bool success)\n', '     {\n', '\n', '     }\n', '     function approve(address _spender,uint256 _value) constant  \n', 'returns(bool success)\n', '     {\n', '\n', '     }\n', '     function allowance(address _owner,address _spender) constant  \n', 'returns(uint256 remaining)\n', '     {\n', '\n', '     }\n', '     event Transfer(address indexed _from,address indexed _to,uint256 _value);\n', '     event Approval(address indexed _owner,address indexed  \n', '_spender,uint256 _value);\n', '}\n', '\n', 'contract ChildContract is ParentContract\n', '{\n', '     mapping (address => uint256 )balances;\n', '     mapping (address => mapping (address => uint256 ))allowed;\n', '     uint256 public totalSupply;\n', '     function transfer(address _to,uint256 _value) constant  \n', 'returns(bool success)\n', '     {\n', '         if(balances[msg.sender]>=_value && _value>0)\n', '         {\n', '             balances[msg.sender]-=_value;\n', '             balances[_to]+=_value;\n', '             Transfer(msg.sender,_to,_value);\n', '             return true;\n', '         }else{\n', '             return false;\n', '             }\n', '     }\n', '\n', '     function transferFrom(address _from,address _to,uint256 _value)  \n', 'constant returns(bool success)\n', '     {\n', '         if(balances[_from]>=_value &&  \n', 'allowed[_from][msg.sender]>=_value && _value>0)\n', '         {\n', '             balances[_from]-=_value;\n', '             balances[_to]+=_value;\n', '             allowed[_from][msg.sender] -=_value;\n', '             Transfer(_from,_to,_value);\n', '             return true;\n', '         }else{\n', '             return false;\n', '             }\n', '     }\n', '     function balanceOf(address _owner) constant returns(uint256 balance)\n', '     {\n', '         return balances[_owner];\n', '     }\n', '     function approve(address _spender,uint256 _value) constant  \n', 'returns(bool success)\n', '     {\n', '       allowed[msg.sender][_spender] -=_value;\n', '       Approval(msg.sender,_spender,_value);\n', '       return true;\n', '     }\n', '     function allowance(address _owner,address _spender) constant  \n', 'returns(uint256 remaining)\n', '     {\n', '         return allowed[_owner][_spender];\n', '     }\n', '}\n', 'contract GenerateTokenContract is ChildContract\n', '{\n', '     string public name;\n', '     uint8 public decimals;\n', '     string public symbol;\n', '     string public version="HFS.1.0";\n', '     uint256 public unitsOneEthCanBuy;\n', '     uint256 public totalEthInWei;\n', '     address public fundsWallet;\n', '\n', '     function GenerateTokenContract()\n', '     {\n', '         balances[msg.sender]=800000000000000000000000000;\n', '         totalSupply=800000000000000000000000000;\n', '         name="HASH FOREX SINGAPORE";\n', '         decimals=18;\n', '         symbol="HFS";\n', '         unitsOneEthCanBuy=11150;\n', '         fundsWallet=msg.sender;\n', '     }\n', '     function () payable\n', '     {\n', '         totalEthInWei=totalEthInWei+msg.value;\n', '         uint256 amount=msg.value*unitsOneEthCanBuy;\n', '         if(balances[fundsWallet]<amount)\n', '         {\n', '             return;\n', '         }\n', '         balances[fundsWallet]=balances[fundsWallet]-amount;\n', '         balances[msg.sender]=balances[msg.sender]+amount;\n', '         Transfer(fundsWallet,msg.sender,amount);\n', '         fundsWallet.transfer(msg.value);\n', '     }\n', '\n', '     function approveAndCall(address _spender,uint256 _value,bytes  \n', '_extraData)returns(bool success)\n', '     {\n', '         allowed[msg.sender][_spender]=_value;\n', '         Approval(msg.sender,_spender,_value);\n', '          \n', 'if(!_spender.call(bytes4(bytes32(sha3("reciveApproval(address,uint256,address,bytes)"))),msg.sender,_value,this,_extraData))\n', '         {\n', '             throw;\n', '         }\n', '         return true;\n', '     }\n', '}']
