['pragma solidity ^0.4.24;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) revert();\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner private {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------------------------\n', '// Original from:\n', '// https://theethereum.wiki/w/index.php/ERC20_Token_Standard\n', '// (c) BokkyPooBah 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20Interface {\n', '    // Get the total token supply     function totalSupply() constant returns (uint256 totalSupply);\n', '\n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    // Send _value amount of token from address _from to address _to\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    // this function is required for some DEX functionality\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '   // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/// @title Yoyo Ark Coin (YAC)\n', 'contract YoyoArkCoin is owned, ERC20Interface {\n', '    // Public variables of the token\n', '    string public constant standard = &#39;ERC20&#39;;\n', '    string public constant name = &#39;Yoyo Ark Coin&#39;;\n', '    string public constant symbol = &#39;YAC&#39;;\n', '    uint8  public constant decimals = 18;\n', '    uint public registrationTime = 0;\n', '    bool public registered = false;\n', '\n', '    uint256 totalTokens = 960 * 1000 * 1000 * 10**18;\n', '\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // These are related to YAC team members\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint[3]) public frozenTokens;\n', '\n', '    // Variable of token frozen rules for YAC team members.\n', '    uint public unlockat;\n', '\n', '    // Constructor\n', '    constructor() public\n', '    {\n', '    }\n', '\n', '    // This unnamed function is called whenever someone tries to send ether to it\n', '    function () private\n', '    {\n', '        revert(); // Prevents accidental sending of ether\n', '    }\n', '\n', '    function totalSupply()\n', '        constant\n', '        public\n', '        returns (uint256)\n', '    {\n', '        return totalTokens;\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner)\n', '        constant\n', '        public\n', '        returns (uint256)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint256 _amount)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        if (!registered) return false;\n', '        if (_amount <= 0) return false;\n', '        if (frozenRules(msg.sender, _amount)) return false;\n', '\n', '        if (balances[msg.sender] >= _amount\n', '            && balances[_to] + _amount > balances[_to]) {\n', '\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            emit Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(address _from, address _to, uint256 _amount) public\n', '        returns (bool success)\n', '    {\n', '        if (!registered) return false;\n', '        if (_amount <= 0) return false;\n', '        if (frozenRules(_from, _amount)) return false;\n', '\n', '        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && balances[_to] + _amount > balances[_to]) {\n', '\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            emit Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)\n', '        constant\n', '        public\n', '        returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @dev Register for Token Initialize,\n', '    /// 100% of total Token will initialize to dev Account.\n', '    function initRegister()\n', '        public\n', '    {\n', '        // (85%) of total supply to sender contract\n', '        balances[msg.sender] = 960 * 1000 * 1000 * 10**18;\n', '        // Frozen 15% of total supply for team members.\n', '        registered = true;\n', '        registrationTime = now;\n', '\n', '        unlockat = registrationTime + 6 * 30 days;\n', '\n', '        // Frozen rest (15%) of total supply for development team and contributors\n', '        // 144,000,000 * 10**18;\n', '        frozenForTeam();\n', '    }\n', '\n', '    /// @dev Frozen for the team members.\n', '    function frozenForTeam()\n', '        internal\n', '    {\n', '        uint totalFrozeNumber = 144 * 1000 * 1000 * 10**18;\n', '        freeze(msg.sender, totalFrozeNumber);\n', '    }\n', '\n', '    /// @dev Frozen 15% of total supply for team members.\n', '    /// @param _account The address of account to be frozen.\n', '    /// @param _totalAmount The amount of tokens to be frozen.\n', '    function freeze(address _account, uint _totalAmount)\n', '        public\n', '        onlyOwner\n', '    {\n', '        frozenAccount[_account] = true;\n', '        frozenTokens[_account][0] = _totalAmount;            // 100% of locked token within 6 months\n', '    }\n', '\n', '    /// @dev Token frozen rules for token holders.\n', '    /// @param _from The token sender.\n', '    /// @param _value The token amount.\n', '    function frozenRules(address _from, uint256 _value)\n', '        internal\n', '        returns (bool success)\n', '    {\n', '        if (frozenAccount[_from]) {\n', '            if (now < unlockat) {\n', '               // 100% locked within the first 6 months.\n', '               if (balances[_from] - _value < frozenTokens[_from][0])\n', '                    return true;\n', '            } else {\n', '               // 100% unlocked after 6 months.\n', '               frozenAccount[_from] = false;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '}']