['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Lock Token\n', ' *\n', ' * Token would be locked for thirty days after ICO.  During this period\n', ' * new buyer could still trade their tokens.\n', ' */\n', '\n', ' contract LockToken is StandardToken {\n', '   using SafeMath for uint256;\n', '\n', '   bool public isPublic;\n', '   uint256 public unLockTime;\n', '   PrivateToken public privateToken;\n', '\n', '   modifier onlyPrivateToken() {\n', '     require(msg.sender == address(privateToken));\n', '     _;\n', '   }\n', '\n', '   /**\n', '   * @dev Deposit is the function should only be called from PrivateToken\n', '   * When the user wants to deposit their private Token to Origin Token. They should\n', '   * let the Private Token invoke this function.\n', '   * @param _depositor address. The person who wants to deposit.\n', '   */\n', '\n', '   function deposit(address _depositor, uint256 _value) public onlyPrivateToken returns(bool){\n', '     require(_value != 0);\n', '     balances[_depositor] = balances[_depositor].add(_value);\n', '     emit Transfer(privateToken, _depositor, _value);\n', '     return true;\n', '   }\n', '\n', '   constructor() public {\n', '     //2050/12/31 00:00:00.\n', '     unLockTime = 2556057600;\n', '   }\n', ' }\n', '\n', 'contract BCNTToken is LockToken{\n', '  string public constant name = "Bincentive SIT Token"; // solium-disable-line uppercase\n', '  string public constant symbol = "BCNT-SIT"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n', '  mapping(bytes => bool) internal signatures;\n', '  event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n', '\n', '    /**\n', '    * @notice Submit a presigned transfer\n', '    * @param _signature bytes The signature, issued by the owner.\n', '    * @param _to address The address which you want to transfer to.\n', '    * @param _value uint256 The amount of tokens to be transferred.\n', '    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '    * @param _nonce uint256 Presigned transaction number.\n', '    * @param _validUntil uint256 Block number until which the presigned transaction is still valid.\n', '    */\n', '    function transferPreSigned(\n', '        bytes _signature,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce,\n', '        uint256 _validUntil\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(signatures[_signature] == false);\n', '        require(block.number <= _validUntil);\n', '\n', '        bytes32 hashedTx = ECRecovery.toEthSignedMessageHash(transferPreSignedHashing(address(this), _to, _value, _fee, _nonce, _validUntil));\n', '\n', '        address from = ECRecovery.recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '\n', '        balances[from] = balances[from].sub(_value).sub(_fee);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '        signatures[_signature] = true;\n', '\n', '        emit Transfer(from, _to, _value);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Hash (keccak256) of the payload used by transferPreSigned\n', '    * @param _token address The address of the token.\n', '    * @param _to address The address which you want to transfer to.\n', '    * @param _value uint256 The amount of tokens to be transferred.\n', '    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '    * @param _nonce uint256 Presigned transaction number.\n', '    * @param _validUntil uint256 Block number until which the presigned transaction is still valid.\n', '    */\n', '    function transferPreSignedHashing(\n', '        address _token,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce,\n', '        uint256 _validUntil\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "0d2d1bf5": transferPreSigned(address,address,uint256,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0x0a0fb66b), _token, _to, _value, _fee, _nonce, _validUntil);\n', '    }\n', '    function transferPreSignedHashingWithPrefix(\n', '        address _token,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce,\n', '        uint256 _validUntil\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        return ECRecovery.toEthSignedMessageHash(transferPreSignedHashing(_token, _to, _value, _fee, _nonce, _validUntil));\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor that gives _owner all of existing tokens.\n', '    */\n', '    constructor(address _admin) public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        privateToken = new PrivateToken(\n', '          _admin, "Bincentive Private SIT Token", "BCNP-SIT", decimals, INITIAL_SUPPLY\n', '       );\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Eliptic curve signature operations\n', ' * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n', ' * TODO Remove this library once solidity supports passing a signature to ecrecover.\n', ' * See https://github.com/ethereum/solidity/issues/864\n', ' */\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using their signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig)\n', '    internal\n', '    pure\n', '    returns (address)\n', '  {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    // Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    // ecrecover takes the signature parameters, and the only way to get them\n', '    // currently is to use assembly.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      // solium-disable-next-line arg-overflow\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * toEthSignedMessageHash\n', '   * @dev prefix a bytes32 value with "\\x19Ethereum Signed Message:"\n', '   * and hash the result\n', '   */\n', '  function toEthSignedMessageHash(bytes32 hash)\n', '    internal\n', '    pure\n', '    returns (bytes32)\n', '  {\n', '    // 32 is the length in bytes of hash,\n', '    // enforced by the type signature above\n', '    return keccak256(\n', '      abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)\n', '    );\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.24;\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', 'contract PrivateToken is StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public name; // solium-disable-line uppercase\n', '    string public symbol; // solium-disable-line uppercase\n', '    uint8 public decimals; // solium-disable-line uppercase\n', '\n', '    address public admin;\n', '    bool public isPublic;\n', '    uint256 public unLockTime;\n', '    LockToken originToken;\n', '\n', '    event StartPublicSale(uint256);\n', '    event Deposit(address indexed from, uint256 value);\n', '    /**\n', '    *  @dev check if msg.sender is allowed to deposit Origin token.\n', '    */\n', '    function isDepositAllowed() internal view{\n', '      // If the tokens isn&#39;t public yet all transfering are limited to origin tokens\n', '      require(isPublic);\n', '      require(msg.sender == admin || block.timestamp > unLockTime);\n', '    }\n', '\n', '    /**\n', '    * @dev Deposit msg.sender&#39;s origin token to real token\n', '    */\n', '    function deposit() public returns (bool){\n', '      isDepositAllowed();\n', '      uint256 _value;\n', '      _value = balances[msg.sender];\n', '      require(_value > 0);\n', '      balances[msg.sender] = 0;\n', '      require(originToken.deposit(msg.sender, _value));\n', '      emit Deposit(msg.sender, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Deposit depositor&#39;s origin token from privateToken\n', '    * @param _depositor address The address of whom deposit the token.\n', '    */\n', '    function adminDeposit(address _depositor) public onlyAdmin returns (bool){\n', '      isDepositAllowed();\n', '      uint256 _value;\n', '      _value = balances[_depositor];\n', '      require(_value > 0);\n', '      balances[_depositor] = 0;\n', '      require(originToken.deposit(_depositor, _value));\n', '      emit Deposit(_depositor, _value);\n', '    }\n', '\n', '    /**\n', '    *  @dev Start Public sale and allow admin to deposit the token.\n', '    *  normal users could deposit their tokens after the tokens unlocked\n', '    */\n', '    function startPublicSale(uint256 _unLockTime) public onlyAdmin {\n', '      require(!isPublic);\n', '      isPublic = true;\n', '      unLockTime = _unLockTime;\n', '      emit StartPublicSale(_unLockTime);\n', '    }\n', '\n', '    /**\n', '    *  @dev unLock the origin token and start the public sale.\n', '    */\n', '    function unLock() public onlyAdmin{\n', '      require(isPublic);\n', '      unLockTime = block.timestamp;\n', '    }\n', '\n', '\n', '    modifier onlyAdmin() {\n', '      require(msg.sender == admin);\n', '      _;\n', '    }\n', '\n', '    constructor(address _admin, string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public{\n', '      originToken = LockToken(msg.sender);\n', '      admin = _admin;\n', '      name = _name;\n', '      symbol = _symbol;\n', '      decimals = _decimals;\n', '      totalSupply_ = _totalSupply;\n', '      balances[admin] = _totalSupply;\n', '      emit Transfer(address(0), admin, _totalSupply);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Lock Token\n', ' *\n', ' * Token would be locked for thirty days after ICO.  During this period\n', ' * new buyer could still trade their tokens.\n', ' */\n', '\n', ' contract LockToken is StandardToken {\n', '   using SafeMath for uint256;\n', '\n', '   bool public isPublic;\n', '   uint256 public unLockTime;\n', '   PrivateToken public privateToken;\n', '\n', '   modifier onlyPrivateToken() {\n', '     require(msg.sender == address(privateToken));\n', '     _;\n', '   }\n', '\n', '   /**\n', '   * @dev Deposit is the function should only be called from PrivateToken\n', '   * When the user wants to deposit their private Token to Origin Token. They should\n', '   * let the Private Token invoke this function.\n', '   * @param _depositor address. The person who wants to deposit.\n', '   */\n', '\n', '   function deposit(address _depositor, uint256 _value) public onlyPrivateToken returns(bool){\n', '     require(_value != 0);\n', '     balances[_depositor] = balances[_depositor].add(_value);\n', '     emit Transfer(privateToken, _depositor, _value);\n', '     return true;\n', '   }\n', '\n', '   constructor() public {\n', '     //2050/12/31 00:00:00.\n', '     unLockTime = 2556057600;\n', '   }\n', ' }\n', '\n', 'contract BCNTToken is LockToken{\n', '  string public constant name = "Bincentive SIT Token"; // solium-disable-line uppercase\n', '  string public constant symbol = "BCNT-SIT"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n', '  mapping(bytes => bool) internal signatures;\n', '  event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n', '\n', '    /**\n', '    * @notice Submit a presigned transfer\n', '    * @param _signature bytes The signature, issued by the owner.\n', '    * @param _to address The address which you want to transfer to.\n', '    * @param _value uint256 The amount of tokens to be transferred.\n', '    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '    * @param _nonce uint256 Presigned transaction number.\n', '    * @param _validUntil uint256 Block number until which the presigned transaction is still valid.\n', '    */\n', '    function transferPreSigned(\n', '        bytes _signature,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce,\n', '        uint256 _validUntil\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(signatures[_signature] == false);\n', '        require(block.number <= _validUntil);\n', '\n', '        bytes32 hashedTx = ECRecovery.toEthSignedMessageHash(transferPreSignedHashing(address(this), _to, _value, _fee, _nonce, _validUntil));\n', '\n', '        address from = ECRecovery.recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '\n', '        balances[from] = balances[from].sub(_value).sub(_fee);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '        signatures[_signature] = true;\n', '\n', '        emit Transfer(from, _to, _value);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @notice Hash (keccak256) of the payload used by transferPreSigned\n', '    * @param _token address The address of the token.\n', '    * @param _to address The address which you want to transfer to.\n', '    * @param _value uint256 The amount of tokens to be transferred.\n', '    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '    * @param _nonce uint256 Presigned transaction number.\n', '    * @param _validUntil uint256 Block number until which the presigned transaction is still valid.\n', '    */\n', '    function transferPreSignedHashing(\n', '        address _token,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce,\n', '        uint256 _validUntil\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "0d2d1bf5": transferPreSigned(address,address,uint256,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0x0a0fb66b), _token, _to, _value, _fee, _nonce, _validUntil);\n', '    }\n', '    function transferPreSignedHashingWithPrefix(\n', '        address _token,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce,\n', '        uint256 _validUntil\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        return ECRecovery.toEthSignedMessageHash(transferPreSignedHashing(_token, _to, _value, _fee, _nonce, _validUntil));\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor that gives _owner all of existing tokens.\n', '    */\n', '    constructor(address _admin) public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        privateToken = new PrivateToken(\n', '          _admin, "Bincentive Private SIT Token", "BCNP-SIT", decimals, INITIAL_SUPPLY\n', '       );\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Eliptic curve signature operations\n', ' * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n', ' * TODO Remove this library once solidity supports passing a signature to ecrecover.\n', ' * See https://github.com/ethereum/solidity/issues/864\n', ' */\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using their signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig)\n', '    internal\n', '    pure\n', '    returns (address)\n', '  {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    // Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    // ecrecover takes the signature parameters, and the only way to get them\n', '    // currently is to use assembly.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      // solium-disable-next-line arg-overflow\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * toEthSignedMessageHash\n', '   * @dev prefix a bytes32 value with "\\x19Ethereum Signed Message:"\n', '   * and hash the result\n', '   */\n', '  function toEthSignedMessageHash(bytes32 hash)\n', '    internal\n', '    pure\n', '    returns (bytes32)\n', '  {\n', '    // 32 is the length in bytes of hash,\n', '    // enforced by the type signature above\n', '    return keccak256(\n', '      abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)\n', '    );\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.24;\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', 'contract PrivateToken is StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public name; // solium-disable-line uppercase\n', '    string public symbol; // solium-disable-line uppercase\n', '    uint8 public decimals; // solium-disable-line uppercase\n', '\n', '    address public admin;\n', '    bool public isPublic;\n', '    uint256 public unLockTime;\n', '    LockToken originToken;\n', '\n', '    event StartPublicSale(uint256);\n', '    event Deposit(address indexed from, uint256 value);\n', '    /**\n', '    *  @dev check if msg.sender is allowed to deposit Origin token.\n', '    */\n', '    function isDepositAllowed() internal view{\n', "      // If the tokens isn't public yet all transfering are limited to origin tokens\n", '      require(isPublic);\n', '      require(msg.sender == admin || block.timestamp > unLockTime);\n', '    }\n', '\n', '    /**\n', "    * @dev Deposit msg.sender's origin token to real token\n", '    */\n', '    function deposit() public returns (bool){\n', '      isDepositAllowed();\n', '      uint256 _value;\n', '      _value = balances[msg.sender];\n', '      require(_value > 0);\n', '      balances[msg.sender] = 0;\n', '      require(originToken.deposit(msg.sender, _value));\n', '      emit Deposit(msg.sender, _value);\n', '    }\n', '\n', '    /**\n', "    * @dev Deposit depositor's origin token from privateToken\n", '    * @param _depositor address The address of whom deposit the token.\n', '    */\n', '    function adminDeposit(address _depositor) public onlyAdmin returns (bool){\n', '      isDepositAllowed();\n', '      uint256 _value;\n', '      _value = balances[_depositor];\n', '      require(_value > 0);\n', '      balances[_depositor] = 0;\n', '      require(originToken.deposit(_depositor, _value));\n', '      emit Deposit(_depositor, _value);\n', '    }\n', '\n', '    /**\n', '    *  @dev Start Public sale and allow admin to deposit the token.\n', '    *  normal users could deposit their tokens after the tokens unlocked\n', '    */\n', '    function startPublicSale(uint256 _unLockTime) public onlyAdmin {\n', '      require(!isPublic);\n', '      isPublic = true;\n', '      unLockTime = _unLockTime;\n', '      emit StartPublicSale(_unLockTime);\n', '    }\n', '\n', '    /**\n', '    *  @dev unLock the origin token and start the public sale.\n', '    */\n', '    function unLock() public onlyAdmin{\n', '      require(isPublic);\n', '      unLockTime = block.timestamp;\n', '    }\n', '\n', '\n', '    modifier onlyAdmin() {\n', '      require(msg.sender == admin);\n', '      _;\n', '    }\n', '\n', '    constructor(address _admin, string _name, string _symbol, uint8 _decimals, uint256 _totalSupply) public{\n', '      originToken = LockToken(msg.sender);\n', '      admin = _admin;\n', '      name = _name;\n', '      symbol = _symbol;\n', '      decimals = _decimals;\n', '      totalSupply_ = _totalSupply;\n', '      balances[admin] = _totalSupply;\n', '      emit Transfer(address(0), admin, _totalSupply);\n', '    }\n', '}']
