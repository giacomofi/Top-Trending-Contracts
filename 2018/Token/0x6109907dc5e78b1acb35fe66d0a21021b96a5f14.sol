['pragma solidity ^0.4.17;  \n', '  \n', 'contract MyToken {  \n', '    /* This creates an array with all balances */  \n', '    mapping (address => uint256) public balanceOf;  \n', '      \n', '    string public name;  \n', '    string public symbol;  \n', '    uint8 public decimals;  \n', '      \n', '    event Transfer(address indexed from, address indexed to, uint256 value);  \n', '          \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */  \n', '    function MyToken(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits) public {  \n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens  \n', '        name = tokenName;                                   // Set the name for display purposes  \n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes  \n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes  \n', '    }  \n', '          \n', '    function transfer(address _to, uint256 _value) public {  \n', '        /* Check if sender has balance and for overflows */  \n', '        require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to]);  \n', '  \n', '        /* Add and subtract new balances */  \n', '        balanceOf[msg.sender] -= _value;  \n', '        balanceOf[_to] += _value;  \n', '          \n', '        /* Notify anyone listening that this transfer took place */  \n', '        Transfer(msg.sender, _to, _value);          \n', '    }  \n', '}']
['pragma solidity ^0.4.17;  \n', '  \n', 'contract MyToken {  \n', '    /* This creates an array with all balances */  \n', '    mapping (address => uint256) public balanceOf;  \n', '      \n', '    string public name;  \n', '    string public symbol;  \n', '    uint8 public decimals;  \n', '      \n', '    event Transfer(address indexed from, address indexed to, uint256 value);  \n', '          \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */  \n', '    function MyToken(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits) public {  \n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens  \n', '        name = tokenName;                                   // Set the name for display purposes  \n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes  \n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes  \n', '    }  \n', '          \n', '    function transfer(address _to, uint256 _value) public {  \n', '        /* Check if sender has balance and for overflows */  \n', '        require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to]);  \n', '  \n', '        /* Add and subtract new balances */  \n', '        balanceOf[msg.sender] -= _value;  \n', '        balanceOf[_to] += _value;  \n', '          \n', '        /* Notify anyone listening that this transfer took place */  \n', '        Transfer(msg.sender, _to, _value);          \n', '    }  \n', '}']
