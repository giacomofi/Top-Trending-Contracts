['pragma solidity ^0.4.15;\n', '\n', '// File: contracts/minter-service/IMintableToken.sol\n', '\n', 'contract IMintableToken {\n', '    function mint(address _to, uint256 _amount);\n', '}\n', '\n', '// File: contracts/minter-service/IICOInfo.sol\n', '\n', 'contract IICOInfo {\n', '  function estimate(uint256 _wei) public constant returns (uint tokens);\n', '  function purchasedTokenBalanceOf(address addr) public constant returns (uint256 tokens);\n', '  function isSaleActive() public constant returns (bool active);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/minter-service/ReenterableMinter.sol\n', '\n', 'contract ReenterableMinter is Ownable {\n', '    event MintSuccess(bytes32 indexed mint_id);\n', '\n', '    function ReenterableMinter(IMintableToken token){\n', '        m_token = token;\n', '    }\n', '\n', '    function mint(bytes32 mint_id, address to, uint256 amount) onlyOwner {\n', '        // Not reverting because there will be no way to distinguish this revert from other transaction failures.\n', '        if (!m_processed_mint_id[mint_id]) {\n', '            m_token.mint(to, amount);\n', '            m_processed_mint_id[mint_id] = true;\n', '        }\n', '        MintSuccess(mint_id);\n', '    }\n', '\n', '    IMintableToken public m_token;\n', '    mapping(bytes32 => bool) public m_processed_mint_id;\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '// File: contracts/minter-service/IMintableToken.sol\n', '\n', 'contract IMintableToken {\n', '    function mint(address _to, uint256 _amount);\n', '}\n', '\n', '// File: contracts/minter-service/IICOInfo.sol\n', '\n', 'contract IICOInfo {\n', '  function estimate(uint256 _wei) public constant returns (uint tokens);\n', '  function purchasedTokenBalanceOf(address addr) public constant returns (uint256 tokens);\n', '  function isSaleActive() public constant returns (bool active);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/minter-service/ReenterableMinter.sol\n', '\n', 'contract ReenterableMinter is Ownable {\n', '    event MintSuccess(bytes32 indexed mint_id);\n', '\n', '    function ReenterableMinter(IMintableToken token){\n', '        m_token = token;\n', '    }\n', '\n', '    function mint(bytes32 mint_id, address to, uint256 amount) onlyOwner {\n', '        // Not reverting because there will be no way to distinguish this revert from other transaction failures.\n', '        if (!m_processed_mint_id[mint_id]) {\n', '            m_token.mint(to, amount);\n', '            m_processed_mint_id[mint_id] = true;\n', '        }\n', '        MintSuccess(mint_id);\n', '    }\n', '\n', '    IMintableToken public m_token;\n', '    mapping(bytes32 => bool) public m_processed_mint_id;\n', '}']
