['pragma solidity 0.4.24;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant public returns (uint256 supply);\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function safeSub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract EmanateToken is ERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "Emanate (MN8) Token";\n', '  string public constant symbol = "MN8";\n', '  uint256 public constant decimals = 18;\n', '  uint256 public constant totalTokens = 208000000 * (10 ** decimals);\n', '\n', '  mapping (address => uint256) public balances;\n', '  mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '  bool public locked = true;\n', '  bool public burningEnabled = false;\n', '  address public owner;\n', '  address public burnAddress;\n', '\n', '  modifier unlocked (address _to) {\n', '    require(\n', '      owner == msg.sender ||\n', '      locked == false ||\n', '      allowance(owner, msg.sender) > 0 ||\n', '      (_to == burnAddress && burningEnabled == true)\n', '    );\n', '    _;\n', '  }\n', '\n', '  constructor () public {\n', '    balances[msg.sender] = totalTokens;\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  \n', '  function transfer(address _to, uint _tokens) unlocked(_to) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].safeSub(_tokens);\n', '    balances[_to] = balances[_to].safeAdd(_tokens);\n', '    emit Transfer(msg.sender, _to, _tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address _to, uint _tokens) unlocked(_to) public returns (bool success) {\n', '    balances[from] = balances[from].safeSub(_tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].safeSub(_tokens);\n', '    balances[_to] = balances[_to].safeAdd(_tokens);\n', '    emit Transfer(from, _to, _tokens);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant public returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '\n', '  function approve(address _spender, uint256 _value) unlocked(_spender) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function setBurnAddress (address _burnAddress) public {\n', '    require(msg.sender == owner);\n', '    burningEnabled = true;\n', '    burnAddress = _burnAddress;\n', '  }\n', '\n', '  function unlock () public {\n', '    require(msg.sender == owner);\n', '    locked = false;\n', '    owner = 0x0000000000000000000000000000000000000001;\n', '  }\n', '}']
['pragma solidity 0.4.24;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant public returns (uint256 supply);\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function safeSub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract EmanateToken is ERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "Emanate (MN8) Token";\n', '  string public constant symbol = "MN8";\n', '  uint256 public constant decimals = 18;\n', '  uint256 public constant totalTokens = 208000000 * (10 ** decimals);\n', '\n', '  mapping (address => uint256) public balances;\n', '  mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '  bool public locked = true;\n', '  bool public burningEnabled = false;\n', '  address public owner;\n', '  address public burnAddress;\n', '\n', '  modifier unlocked (address _to) {\n', '    require(\n', '      owner == msg.sender ||\n', '      locked == false ||\n', '      allowance(owner, msg.sender) > 0 ||\n', '      (_to == burnAddress && burningEnabled == true)\n', '    );\n', '    _;\n', '  }\n', '\n', '  constructor () public {\n', '    balances[msg.sender] = totalTokens;\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  \n', '  function transfer(address _to, uint _tokens) unlocked(_to) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].safeSub(_tokens);\n', '    balances[_to] = balances[_to].safeAdd(_tokens);\n', '    emit Transfer(msg.sender, _to, _tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address _to, uint _tokens) unlocked(_to) public returns (bool success) {\n', '    balances[from] = balances[from].safeSub(_tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].safeSub(_tokens);\n', '    balances[_to] = balances[_to].safeAdd(_tokens);\n', '    emit Transfer(from, _to, _tokens);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant public returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '\n', '  function approve(address _spender, uint256 _value) unlocked(_spender) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function setBurnAddress (address _burnAddress) public {\n', '    require(msg.sender == owner);\n', '    burningEnabled = true;\n', '    burnAddress = _burnAddress;\n', '  }\n', '\n', '  function unlock () public {\n', '    require(msg.sender == owner);\n', '    locked = false;\n', '    owner = 0x0000000000000000000000000000000000000001;\n', '  }\n', '}']
