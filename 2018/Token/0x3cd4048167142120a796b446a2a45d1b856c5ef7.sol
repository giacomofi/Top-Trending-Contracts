['pragma solidity ^0.4.13;\n', '\n', 'contract Token {\n', ' \n', '  /// total amount of tokens\n', '  uint256 public totalSupply;\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '  \n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', ' \n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '  \n', '  function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '  \n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    \n', '    //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else { return false; }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '   \n', '    //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else { return false; }\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract DAFZOToken is StandardToken {\n', '\n', '  string public constant name = "DAFZO";\n', '  string public constant symbol = "DFZ";\n', '  uint8 public constant decimals = 18;\n', '\n', '  function DAFZOToken(address _icoAddress,\n', '                         address _preIcoAddress,\n', '                         address _dafzoWalletAddress,\n', '                         address _bountyWalletAddress) {\n', '    require(_icoAddress != 0x0);\n', '    require(_preIcoAddress != 0x0);\n', '    require(_dafzoWalletAddress != 0x0);\n', '    require(_bountyWalletAddress != 0x0);\n', '\n', '    totalSupply = 70000000 * 10**18;                     // 70000000 DFZ\n', '\n', '    uint256 icoTokens = 18956000  * 10**18;               \n', '\n', '    uint256 preIcoTokens = 28434000 * 10**18;\n', '    \n', '     uint256 bountyTokens = 1610000 * 10**18;\n', '\n', '    uint256 DAFZOTokens = 21000000 * 10**18;            // Dafzo Funds        \n', '                                                                      \n', '\n', '    assert(icoTokens + preIcoTokens + DAFZOTokens + bountyTokens == totalSupply);\n', '\n', '    balances[_icoAddress] = icoTokens;\n', '    Transfer(0, _icoAddress, icoTokens);\n', '\n', '    balances[_preIcoAddress] = preIcoTokens;\n', '    Transfer(0, _preIcoAddress, preIcoTokens);\n', '\n', '    balances[_dafzoWalletAddress] = DAFZOTokens;\n', '    Transfer(0, _dafzoWalletAddress, DAFZOTokens);\n', '\n', '    balances[_bountyWalletAddress] = bountyTokens;\n', '    Transfer(0, _bountyWalletAddress, bountyTokens);\n', '  }\n', '\n', '  function burn(uint256 _value) returns (bool success) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      totalSupply -= _value;\n', '      Transfer(msg.sender, 0x0, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract Token {\n', ' \n', '  /// total amount of tokens\n', '  uint256 public totalSupply;\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '  \n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', ' \n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '  \n', '  function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '  \n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    \n', '    //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else { return false; }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '   \n', '    //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else { return false; }\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract DAFZOToken is StandardToken {\n', '\n', '  string public constant name = "DAFZO";\n', '  string public constant symbol = "DFZ";\n', '  uint8 public constant decimals = 18;\n', '\n', '  function DAFZOToken(address _icoAddress,\n', '                         address _preIcoAddress,\n', '                         address _dafzoWalletAddress,\n', '                         address _bountyWalletAddress) {\n', '    require(_icoAddress != 0x0);\n', '    require(_preIcoAddress != 0x0);\n', '    require(_dafzoWalletAddress != 0x0);\n', '    require(_bountyWalletAddress != 0x0);\n', '\n', '    totalSupply = 70000000 * 10**18;                     // 70000000 DFZ\n', '\n', '    uint256 icoTokens = 18956000  * 10**18;               \n', '\n', '    uint256 preIcoTokens = 28434000 * 10**18;\n', '    \n', '     uint256 bountyTokens = 1610000 * 10**18;\n', '\n', '    uint256 DAFZOTokens = 21000000 * 10**18;            // Dafzo Funds        \n', '                                                                      \n', '\n', '    assert(icoTokens + preIcoTokens + DAFZOTokens + bountyTokens == totalSupply);\n', '\n', '    balances[_icoAddress] = icoTokens;\n', '    Transfer(0, _icoAddress, icoTokens);\n', '\n', '    balances[_preIcoAddress] = preIcoTokens;\n', '    Transfer(0, _preIcoAddress, preIcoTokens);\n', '\n', '    balances[_dafzoWalletAddress] = DAFZOTokens;\n', '    Transfer(0, _dafzoWalletAddress, DAFZOTokens);\n', '\n', '    balances[_bountyWalletAddress] = bountyTokens;\n', '    Transfer(0, _bountyWalletAddress, bountyTokens);\n', '  }\n', '\n', '  function burn(uint256 _value) returns (bool success) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      totalSupply -= _value;\n', '      Transfer(msg.sender, 0x0, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '}']
