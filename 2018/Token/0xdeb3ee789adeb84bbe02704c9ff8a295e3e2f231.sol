['pragma solidity ^0.4.18;\n', '\n', '/**\n', '\n', ' * This is BreezeCoin contract\n', '\n', ' */\n', '\n', ' \n', '\n', '/**\n', '\n', ' * Defining basic ERC20 interface. Standard ERC20 interface functions.\n', '\n', ' * Please check https://github.com/ethereum/EIPs/issues/179\n', '\n', ' */\n', '\n', 'contract ERC20Basic {\n', '\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '/**\n', '\n', ' * Defining ERC20 interface. This functions are standard for every token.\n', '\n', ' * Please check https://github.com/ethereum/EIPs/issues/20\n', '\n', ' */\n', '\n', 'contract ERC20 is ERC20Basic {\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '/**\n', '\n', ' *OpenZeppelin SafeMath library to make the contract secure.\n', '\n', ' */\n', '\n', 'library SafeMath {\n', '\n', '\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        if (a == 0) {\n', '\n', '            return 0;\n', '\n', '        }\n', '\n', '        uint256 c = a * b;\n', '\n', '        assert(c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '}\n', '\n', '/**\n', '\n', ' * Defining BasicToken with\n', '\n', ' * fucntions of check total supply of the token, token transfer and check balance\n', '\n', ' * of the input address. These functions are standard for every basic token.\n', '\n', ' */\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '\n', '\n', '    uint256 totalSupply_;\n', '\n', '\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '\n', '        return totalSupply_;\n', '\n', '    }\n', '\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '\n', '        return balances[_owner];\n', '\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '/**\n', '\n', ' * Defining StandardToken with\n', '\n', ' * approval function. These functions are standard for every token.\n', '\n', ' * Please check https://github.com/ethereum/EIPs/issues/20\n', '\n', ' */\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '\n', '        require(_value <= balances[_from]);\n', '\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '\n', '        return allowed[_owner][_spender];\n', '\n', '    }\n', '\n', '\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '\n', '        if (_subtractedValue > oldValue) {\n', '\n', '            allowed[msg.sender][_spender] = 0;\n', '\n', '        } else {\n', '\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', '\n', ' * Defining ownershipTransfer\n', '\n', ' * function. Function takes the new address and transfer the ownership.\n', '\n', ' *\n', '\n', ' */\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '\n', '\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '\n', '\n', '\n', '    function Ownable() public {\n', '\n', '        owner = msg.sender;\n', '\n', '    }\n', '\n', '\n', '\n', '    modifier onlyOwner() {\n', '\n', '        require(msg.sender == owner);\n', '\n', '        _;\n', '\n', '    }\n', '\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '\n', '        require(newOwner != address(0));\n', '\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '/**\n', '\n', ' * Creating BreezeCoin.\n', '\n', ' * BreezeCoin calls the contracts StandardToken and ownable.\n', '\n', ' */\n', '\n', 'contract BreezeCoin is StandardToken, Ownable {\n', '\n', '\n', '\n', '    string public constant name = "BreezeCoin";\n', '\n', '\n', '\n', '    string public constant symbol = "BRZC";\n', '\n', '\n', '\n', '    uint256 public constant decimals = 18;\n', '\n', '\n', '\n', '    bool public released = false;\n', '\n', '    event Release();\n', '\n', '    address public holder;\n', '\n', '    address private wallet1;\n', '    address private wallet2;\n', '    address private team_tips;\n', '    address private Reserve;\n', '/** \n', ' * This modifier allows only owner of the token and holder of the token call a function.\n', ' */\n', '    modifier isReleased () {\n', '\n', '        require(released || msg.sender == holder || msg.sender == owner);\n', '\n', '        _;\n', '\n', '    }\n', '\n', '\n', '\n', '    function BreezeCoin() public {\n', '\n', '        owner = 0xE601Bb5Ef5Ca433e6B467a5fc8453dcACE3974De;\n', '\n', '        wallet1 = 0x5a86671071Ad67f2DF02c821e587BCe5B8e26C38; //early investors\n', '\n', '        wallet2 = 0x25b25f5dE7C81b14DEf6db5B65107853687702EC; //manager\n', '\n', '        team_tips =  0x6FcF24c918631Bb385DeeDC6d01e8f68293E2641; //team tips\n', '\n', '        Reserve =  0x3d4Bd578291737fAED39bA3F20F32DF25111D724; //Reserve\n', '\n', '        holder = 0x2bb3a4f80bFb939716E6d85799116feB1906748B; //ico coins holder\n', '\n', '        totalSupply_ = 200000000 * (10 ** decimals); // our total supply is 200 million\n', '\n', '        balances[holder] = 30000000* (10 ** decimals); //ico wallet holds 30 million\n', '\n', '        balances[wallet1] = 10000000* (10 ** decimals);\n', '        balances[wallet2] = 1250000* (10 ** decimals);\n', '        balances[team_tips] = 8750000* (10 ** decimals);\n', '        balances[Reserve] = 150000000* (10 ** decimals);\n', '\n', '\n', '        emit Transfer(0x0, holder, 30000000* (10 ** decimals)); // creating token out of thin air to ICO holder account address.\n', '        emit Transfer(0x0, wallet1, 10000000* (10 ** decimals)); // creating token out of thin air to team wallet1 account address.\n', '        emit Transfer(0x0, team_tips, 8750000* (10 ** decimals)); // creating token out of thin air to team tips account address.\n', '        emit Transfer(0x0, wallet2, 1250000* (10 ** decimals)); // creating token out of thin air to wallet2 account address.\n', '        emit Transfer(0x0, Reserve, 150000000* (10 ** decimals)); // creating token out of thin air to reserve account address.\n', '\n', '\n', '\n', '        \n', '\n', '    }\n', '\n', '/** \n', ' * Tokens are first not released. This function can be called only by owner. This function releases the tokens and allow token transfers.\n', ' */\n', '\n', '    function release() onlyOwner public returns (bool) {\n', '\n', '        require(!released);\n', '\n', '        released = true;\n', '\n', '        emit Release();\n', '\n', '\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function getOwner() public view returns (address) {\n', '\n', '        return owner;\n', '\n', '    }\n', '\n', '\n', '/** \n', ' * These functions allow users to use transfer and approve functions if the token is released.\n', ' */\n', '    function transfer(address _to, uint256 _value) public isReleased returns (bool) {\n', '\n', '        return super.transfer(_to, _value);\n', '\n', '    }\n', '\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '\n', '    }\n', '\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public isReleased returns (bool) {\n', '\n', '        return super.approve(_spender, _value);\n', '\n', '    }\n', '\n', '\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\n', '\n', '        return super.increaseApproval(_spender, _addedValue);\n', '\n', '    }\n', '\n', '\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n', '\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    }\n', '\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '\n', '        address oldOwner = owner;\n', '\n', '        super.transferOwnership(newOwner);\n', '\n', '\n', '\n', '        if (oldOwner != holder) {\n', '\n', '            allowed[holder][oldOwner] = 0;\n', '\n', '            emit Approval(holder, oldOwner, 0);\n', '\n', '        }\n', '\n', '\n', '\n', '        if (owner != holder) {\n', '\n', '            allowed[holder][owner] = balances[holder];\n', '\n', '            emit Approval(holder, owner, balances[holder]);\n', '\n', '        }\n', '\n', '    }\n', '\n', '\n', '\n', '}\n', '/** Creating ICO contract\n', ' * It starts on 01.06.2018 and ends on 20.06.2018 \n', ' * The hard cap of the ICO is 30 million coin.\n', ' */\n', '\n', 'contract BreezeCoinICO is Ownable {\n', '    uint public constant SALES_START = 1527800400; //we are defining the starting time of ICO\n', '    uint public constant SALES_END = 1529528399; //we are defining the ending time of ICO\n', '    \n', '    address public constant return_owner =0xE601Bb5Ef5Ca433e6B467a5fc8453dcACE3974De; //after ICO ends, ownership will return to creator\n', '    address public constant ICO_WALLET = 0x2bb3a4f80bFb939716E6d85799116feB1906748B; //defining ICO wallet address\n', '    address public constant COMPANY_WALLET = 0x2bb3a4f80bFb939716E6d85799116feB1906748B; //defining company wallet address\n', '    address public constant TOKEN_ADDRESS = 0xe12128D653B62F08fbED56BdeB65dB729B6691C3; //defining BreezeCoin address\n', '\n', '    uint public constant SMALLEST_TOKEN = 1* (10 ** 18); // defining the decimal \n', '    uint public constant TOKEN_PRICE = 0.001423964 ether; // BreezeCoin prize.\n', '\n', '\n', '    uint public constant SALE_MAX_CAP = 30000000 * SMALLEST_TOKEN; // defining the hardcap\n', '\n', '\n', '    uint public saleContributions; //total ETH contributed\n', '    uint public tokensPurchased; //total BreezeCoin purchased.\n', '\n', '    address public whitelistSupplier;\n', '    address public second_whitelistSupplier;\n', '    address public third_whitelistSupplier;\n', '    address public fourth_whitelistSupplier;\n', '    mapping(address => bool) public whitelistPublic;\n', '    mapping (address => uint256) public investedAmountOf;\n', '\n', '\n', '    event Contributed(address receiver, uint contribution, uint reward); // this event store address of the contributor, the amount of the contribution and token will be send.\n', '    event PublicWhitelistUpdated(address participant, bool isWhitelisted); // this event store the address of the participant and boolean value of that address. \n', '\n', '    function BreezeCoinICO() public {\n', '        whitelistSupplier = msg.sender;\n', '        second_whitelistSupplier = 0xC578FFd5629B0e89F4384b27227C2AE66Dbee843;\n', '\tthird_whitelistSupplier = 0x2bb3a4f80bFb939716E6d85799116feB1906748B;\n', '\tfourth_whitelistSupplier = 0x8aFC72dA31185182605E5b51053e96D3f48ea6ea;\n', '        owner = return_owner;\n', '    }\n', '/** \n', ' * This modifier allows only whitelist suppliers call a function.\n', ' */\n', '\n', '    modifier onlyWhitelistSupplier() {\n', '        require(msg.sender == whitelistSupplier || msg.sender == owner || msg.sender == second_whitelistSupplier || msg.sender == third_whitelistSupplier || msg.sender == fourth_whitelistSupplier);\n', '        _;\n', '    }\n', '\n', '    function contribute() public payable returns(bool) {\n', '        return contributeFor(msg.sender);\n', '    }\n', '/** \n', ' * Main ICO function, it requires time is smaller than the ending time of ICO and bigger than starting time of ICO.\n', ' * function takes participant address and the amount of the sender. And send the amount of the ETH to company wallet.\n', ' * send BreezeCoin to participant from ICO wallet.\n', ' */\n', '    function contributeFor(address _participant) public payable returns(bool) {\n', '        require(now < SALES_END);\n', '\t    require(now >= SALES_START);\n', '\t    if (now >= SALES_START) {\n', '            require(whitelistPublic[_participant]);\n', '        }\n', '        \n', '        uint tokensAmount = (msg.value * SMALLEST_TOKEN) / TOKEN_PRICE;\n', '        require(tokensAmount > 0);\n', '        uint totalTokens = tokensAmount;\n', '        \n', '        COMPANY_WALLET.transfer(msg.value);\n', '        tokensPurchased += totalTokens;\n', '        require(tokensPurchased <= SALE_MAX_CAP);\n', '        require(BreezeCoin(TOKEN_ADDRESS).transferFrom(ICO_WALLET, _participant, totalTokens));\n', '        saleContributions += msg.value;\n', '\t    investedAmountOf[_participant] = investedAmountOf[_participant]+msg.value;\n', '        emit Contributed(_participant, msg.value, totalTokens);\n', '        return true;\n', '    }\n', '/** \n', ' * These two function can be called by only whitelist suppliers.\n', ' * First function take participants wallet address and add to whitelist.\n', ' * Second function take participants wallet address and remove from whitelist.\n', ' */\n', '\n', '    function addToPublicWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (whitelistPublic[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPublic[_participant] = true;\n', '        emit PublicWhitelistUpdated(_participant, true);\n', '        return true;\n', '    }\n', '\n', '    function removeFromPublicWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (!whitelistPublic[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPublic[_participant] = false;\n', '        emit PublicWhitelistUpdated(_participant, false);\n', '        return true;\n', '    }\n', '/** \n', ' * With this function, the token ownership will be transferred to token creator.\n', ' */\n', '    function getTokenOwner() public view returns (address) {\n', '        return BreezeCoin(TOKEN_ADDRESS).getOwner();\n', '    }\n', '\n', '    function restoreTokenOwnership() public onlyOwner {\n', '        BreezeCoin(TOKEN_ADDRESS).transferOwnership(return_owner);\n', '    }\n', '\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', '\n', ' * This is BreezeCoin contract\n', '\n', ' */\n', '\n', ' \n', '\n', '/**\n', '\n', ' * Defining basic ERC20 interface. Standard ERC20 interface functions.\n', '\n', ' * Please check https://github.com/ethereum/EIPs/issues/179\n', '\n', ' */\n', '\n', 'contract ERC20Basic {\n', '\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '/**\n', '\n', ' * Defining ERC20 interface. This functions are standard for every token.\n', '\n', ' * Please check https://github.com/ethereum/EIPs/issues/20\n', '\n', ' */\n', '\n', 'contract ERC20 is ERC20Basic {\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '/**\n', '\n', ' *OpenZeppelin SafeMath library to make the contract secure.\n', '\n', ' */\n', '\n', 'library SafeMath {\n', '\n', '\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        if (a == 0) {\n', '\n', '            return 0;\n', '\n', '        }\n', '\n', '        uint256 c = a * b;\n', '\n', '        assert(c / a == b);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '\n', '    }\n', '\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '        uint256 c = a + b;\n', '\n', '        assert(c >= a);\n', '\n', '        return c;\n', '\n', '    }\n', '\n', '}\n', '\n', '/**\n', '\n', ' * Defining BasicToken with\n', '\n', ' * fucntions of check total supply of the token, token transfer and check balance\n', '\n', ' * of the input address. These functions are standard for every basic token.\n', '\n', ' */\n', '\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '\n', '\n', '    uint256 totalSupply_;\n', '\n', '\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '\n', '        return totalSupply_;\n', '\n', '    }\n', '\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '\n', '        return balances[_owner];\n', '\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '/**\n', '\n', ' * Defining StandardToken with\n', '\n', ' * approval function. These functions are standard for every token.\n', '\n', ' * Please check https://github.com/ethereum/EIPs/issues/20\n', '\n', ' */\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0));\n', '\n', '        require(_value <= balances[_from]);\n', '\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '\n', '        return allowed[_owner][_spender];\n', '\n', '    }\n', '\n', '\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '\n', '        if (_subtractedValue > oldValue) {\n', '\n', '            allowed[msg.sender][_spender] = 0;\n', '\n', '        } else {\n', '\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', '\n', ' * Defining ownershipTransfer\n', '\n', ' * function. Function takes the new address and transfer the ownership.\n', '\n', ' *\n', '\n', ' */\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '\n', '\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '\n', '\n', '\n', '    function Ownable() public {\n', '\n', '        owner = msg.sender;\n', '\n', '    }\n', '\n', '\n', '\n', '    modifier onlyOwner() {\n', '\n', '        require(msg.sender == owner);\n', '\n', '        _;\n', '\n', '    }\n', '\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '\n', '        require(newOwner != address(0));\n', '\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '/**\n', '\n', ' * Creating BreezeCoin.\n', '\n', ' * BreezeCoin calls the contracts StandardToken and ownable.\n', '\n', ' */\n', '\n', 'contract BreezeCoin is StandardToken, Ownable {\n', '\n', '\n', '\n', '    string public constant name = "BreezeCoin";\n', '\n', '\n', '\n', '    string public constant symbol = "BRZC";\n', '\n', '\n', '\n', '    uint256 public constant decimals = 18;\n', '\n', '\n', '\n', '    bool public released = false;\n', '\n', '    event Release();\n', '\n', '    address public holder;\n', '\n', '    address private wallet1;\n', '    address private wallet2;\n', '    address private team_tips;\n', '    address private Reserve;\n', '/** \n', ' * This modifier allows only owner of the token and holder of the token call a function.\n', ' */\n', '    modifier isReleased () {\n', '\n', '        require(released || msg.sender == holder || msg.sender == owner);\n', '\n', '        _;\n', '\n', '    }\n', '\n', '\n', '\n', '    function BreezeCoin() public {\n', '\n', '        owner = 0xE601Bb5Ef5Ca433e6B467a5fc8453dcACE3974De;\n', '\n', '        wallet1 = 0x5a86671071Ad67f2DF02c821e587BCe5B8e26C38; //early investors\n', '\n', '        wallet2 = 0x25b25f5dE7C81b14DEf6db5B65107853687702EC; //manager\n', '\n', '        team_tips =  0x6FcF24c918631Bb385DeeDC6d01e8f68293E2641; //team tips\n', '\n', '        Reserve =  0x3d4Bd578291737fAED39bA3F20F32DF25111D724; //Reserve\n', '\n', '        holder = 0x2bb3a4f80bFb939716E6d85799116feB1906748B; //ico coins holder\n', '\n', '        totalSupply_ = 200000000 * (10 ** decimals); // our total supply is 200 million\n', '\n', '        balances[holder] = 30000000* (10 ** decimals); //ico wallet holds 30 million\n', '\n', '        balances[wallet1] = 10000000* (10 ** decimals);\n', '        balances[wallet2] = 1250000* (10 ** decimals);\n', '        balances[team_tips] = 8750000* (10 ** decimals);\n', '        balances[Reserve] = 150000000* (10 ** decimals);\n', '\n', '\n', '        emit Transfer(0x0, holder, 30000000* (10 ** decimals)); // creating token out of thin air to ICO holder account address.\n', '        emit Transfer(0x0, wallet1, 10000000* (10 ** decimals)); // creating token out of thin air to team wallet1 account address.\n', '        emit Transfer(0x0, team_tips, 8750000* (10 ** decimals)); // creating token out of thin air to team tips account address.\n', '        emit Transfer(0x0, wallet2, 1250000* (10 ** decimals)); // creating token out of thin air to wallet2 account address.\n', '        emit Transfer(0x0, Reserve, 150000000* (10 ** decimals)); // creating token out of thin air to reserve account address.\n', '\n', '\n', '\n', '        \n', '\n', '    }\n', '\n', '/** \n', ' * Tokens are first not released. This function can be called only by owner. This function releases the tokens and allow token transfers.\n', ' */\n', '\n', '    function release() onlyOwner public returns (bool) {\n', '\n', '        require(!released);\n', '\n', '        released = true;\n', '\n', '        emit Release();\n', '\n', '\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function getOwner() public view returns (address) {\n', '\n', '        return owner;\n', '\n', '    }\n', '\n', '\n', '/** \n', ' * These functions allow users to use transfer and approve functions if the token is released.\n', ' */\n', '    function transfer(address _to, uint256 _value) public isReleased returns (bool) {\n', '\n', '        return super.transfer(_to, _value);\n', '\n', '    }\n', '\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public isReleased returns (bool) {\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '\n', '    }\n', '\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public isReleased returns (bool) {\n', '\n', '        return super.approve(_spender, _value);\n', '\n', '    }\n', '\n', '\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public isReleased returns (bool success) {\n', '\n', '        return super.increaseApproval(_spender, _addedValue);\n', '\n', '    }\n', '\n', '\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public isReleased returns (bool success) {\n', '\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    }\n', '\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '\n', '        address oldOwner = owner;\n', '\n', '        super.transferOwnership(newOwner);\n', '\n', '\n', '\n', '        if (oldOwner != holder) {\n', '\n', '            allowed[holder][oldOwner] = 0;\n', '\n', '            emit Approval(holder, oldOwner, 0);\n', '\n', '        }\n', '\n', '\n', '\n', '        if (owner != holder) {\n', '\n', '            allowed[holder][owner] = balances[holder];\n', '\n', '            emit Approval(holder, owner, balances[holder]);\n', '\n', '        }\n', '\n', '    }\n', '\n', '\n', '\n', '}\n', '/** Creating ICO contract\n', ' * It starts on 01.06.2018 and ends on 20.06.2018 \n', ' * The hard cap of the ICO is 30 million coin.\n', ' */\n', '\n', 'contract BreezeCoinICO is Ownable {\n', '    uint public constant SALES_START = 1527800400; //we are defining the starting time of ICO\n', '    uint public constant SALES_END = 1529528399; //we are defining the ending time of ICO\n', '    \n', '    address public constant return_owner =0xE601Bb5Ef5Ca433e6B467a5fc8453dcACE3974De; //after ICO ends, ownership will return to creator\n', '    address public constant ICO_WALLET = 0x2bb3a4f80bFb939716E6d85799116feB1906748B; //defining ICO wallet address\n', '    address public constant COMPANY_WALLET = 0x2bb3a4f80bFb939716E6d85799116feB1906748B; //defining company wallet address\n', '    address public constant TOKEN_ADDRESS = 0xe12128D653B62F08fbED56BdeB65dB729B6691C3; //defining BreezeCoin address\n', '\n', '    uint public constant SMALLEST_TOKEN = 1* (10 ** 18); // defining the decimal \n', '    uint public constant TOKEN_PRICE = 0.001423964 ether; // BreezeCoin prize.\n', '\n', '\n', '    uint public constant SALE_MAX_CAP = 30000000 * SMALLEST_TOKEN; // defining the hardcap\n', '\n', '\n', '    uint public saleContributions; //total ETH contributed\n', '    uint public tokensPurchased; //total BreezeCoin purchased.\n', '\n', '    address public whitelistSupplier;\n', '    address public second_whitelistSupplier;\n', '    address public third_whitelistSupplier;\n', '    address public fourth_whitelistSupplier;\n', '    mapping(address => bool) public whitelistPublic;\n', '    mapping (address => uint256) public investedAmountOf;\n', '\n', '\n', '    event Contributed(address receiver, uint contribution, uint reward); // this event store address of the contributor, the amount of the contribution and token will be send.\n', '    event PublicWhitelistUpdated(address participant, bool isWhitelisted); // this event store the address of the participant and boolean value of that address. \n', '\n', '    function BreezeCoinICO() public {\n', '        whitelistSupplier = msg.sender;\n', '        second_whitelistSupplier = 0xC578FFd5629B0e89F4384b27227C2AE66Dbee843;\n', '\tthird_whitelistSupplier = 0x2bb3a4f80bFb939716E6d85799116feB1906748B;\n', '\tfourth_whitelistSupplier = 0x8aFC72dA31185182605E5b51053e96D3f48ea6ea;\n', '        owner = return_owner;\n', '    }\n', '/** \n', ' * This modifier allows only whitelist suppliers call a function.\n', ' */\n', '\n', '    modifier onlyWhitelistSupplier() {\n', '        require(msg.sender == whitelistSupplier || msg.sender == owner || msg.sender == second_whitelistSupplier || msg.sender == third_whitelistSupplier || msg.sender == fourth_whitelistSupplier);\n', '        _;\n', '    }\n', '\n', '    function contribute() public payable returns(bool) {\n', '        return contributeFor(msg.sender);\n', '    }\n', '/** \n', ' * Main ICO function, it requires time is smaller than the ending time of ICO and bigger than starting time of ICO.\n', ' * function takes participant address and the amount of the sender. And send the amount of the ETH to company wallet.\n', ' * send BreezeCoin to participant from ICO wallet.\n', ' */\n', '    function contributeFor(address _participant) public payable returns(bool) {\n', '        require(now < SALES_END);\n', '\t    require(now >= SALES_START);\n', '\t    if (now >= SALES_START) {\n', '            require(whitelistPublic[_participant]);\n', '        }\n', '        \n', '        uint tokensAmount = (msg.value * SMALLEST_TOKEN) / TOKEN_PRICE;\n', '        require(tokensAmount > 0);\n', '        uint totalTokens = tokensAmount;\n', '        \n', '        COMPANY_WALLET.transfer(msg.value);\n', '        tokensPurchased += totalTokens;\n', '        require(tokensPurchased <= SALE_MAX_CAP);\n', '        require(BreezeCoin(TOKEN_ADDRESS).transferFrom(ICO_WALLET, _participant, totalTokens));\n', '        saleContributions += msg.value;\n', '\t    investedAmountOf[_participant] = investedAmountOf[_participant]+msg.value;\n', '        emit Contributed(_participant, msg.value, totalTokens);\n', '        return true;\n', '    }\n', '/** \n', ' * These two function can be called by only whitelist suppliers.\n', ' * First function take participants wallet address and add to whitelist.\n', ' * Second function take participants wallet address and remove from whitelist.\n', ' */\n', '\n', '    function addToPublicWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (whitelistPublic[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPublic[_participant] = true;\n', '        emit PublicWhitelistUpdated(_participant, true);\n', '        return true;\n', '    }\n', '\n', '    function removeFromPublicWhitelist(address _participant) onlyWhitelistSupplier() public returns(bool) {\n', '        if (!whitelistPublic[_participant]) {\n', '            return true;\n', '        }\n', '        whitelistPublic[_participant] = false;\n', '        emit PublicWhitelistUpdated(_participant, false);\n', '        return true;\n', '    }\n', '/** \n', ' * With this function, the token ownership will be transferred to token creator.\n', ' */\n', '    function getTokenOwner() public view returns (address) {\n', '        return BreezeCoin(TOKEN_ADDRESS).getOwner();\n', '    }\n', '\n', '    function restoreTokenOwnership() public onlyOwner {\n', '        BreezeCoin(TOKEN_ADDRESS).transferOwnership(return_owner);\n', '    }\n', '\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '\n', '}']
