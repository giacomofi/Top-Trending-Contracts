['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Interface {\n', '    // Get the total token supply\n', '    function totalSupply() public constant returns (uint256 supply);\n', '\n', '    // Get the account balance of another a ccount with address _owner\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    // this function is required for some DEX functionality\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract AirDrop\n', '{\n', '    address public owner;\n', '    address public executor;\n', '    \n', '    // Constructor\n', '    function AirDrop() public {\n', '        owner = msg.sender;\n', '        executor = msg.sender;\n', '    }\n', '    \n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferExecutor(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        executor = newOwner;\n', '    }\n', '    \n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyExecutor() {\n', '        require(msg.sender == executor || msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function MultiTransfer(address _tokenAddr, address[] dests, uint256[] values) public onlyExecutor\n', '    {\n', '        uint256 i = 0;\n', '        ERC20Interface T = ERC20Interface(_tokenAddr);\n', '        while (i < dests.length) {\n', '            T.transfer(dests[i], values[i]);\n', '            i += 1;\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Interface {\n', '    // Get the total token supply\n', '    function totalSupply() public constant returns (uint256 supply);\n', '\n', '    // Get the account balance of another a ccount with address _owner\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    // this function is required for some DEX functionality\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract AirDrop\n', '{\n', '    address public owner;\n', '    address public executor;\n', '    \n', '    // Constructor\n', '    function AirDrop() public {\n', '        owner = msg.sender;\n', '        executor = msg.sender;\n', '    }\n', '    \n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferExecutor(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        executor = newOwner;\n', '    }\n', '    \n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyExecutor() {\n', '        require(msg.sender == executor || msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function MultiTransfer(address _tokenAddr, address[] dests, uint256[] values) public onlyExecutor\n', '    {\n', '        uint256 i = 0;\n', '        ERC20Interface T = ERC20Interface(_tokenAddr);\n', '        while (i < dests.length) {\n', '            T.transfer(dests[i], values[i]);\n', '            i += 1;\n', '        }\n', '    }\n', '}']
