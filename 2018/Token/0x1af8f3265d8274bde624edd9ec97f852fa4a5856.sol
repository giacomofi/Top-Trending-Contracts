['pragma solidity 0.4.20;\n', '\n', 'contract MOREToken {\n', '    string  public  symbol = "MORE";\n', '    string  public name = "MORE Token";\n', '    uint256  public  decimals = 18; \n', '    uint256  _supply;\n', '    mapping (address => uint256) _balances;\n', '    \n', '    event Transfer( address indexed from, address indexed to, uint256 value);\n', '\n', '    function MOREToken() public {\n', '        _supply = 10*(10**9)*(10**18);\n', '        _balances[msg.sender] = _supply;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address src) public view returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    \n', '    function transfer(address dst, uint256 wad) public {\n', '        require(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(msg.sender, dst, wad);\n', '    }\n', '    \n', '    function add(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x + y;\n', '        require(z >= x && z>=y);\n', '        return z;\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x - y;\n', '        require(x >= y && z <= x);\n', '        return z;\n', '    }\n', '}']
['pragma solidity 0.4.20;\n', '\n', 'contract MOREToken {\n', '    string  public  symbol = "MORE";\n', '    string  public name = "MORE Token";\n', '    uint256  public  decimals = 18; \n', '    uint256  _supply;\n', '    mapping (address => uint256) _balances;\n', '    \n', '    event Transfer( address indexed from, address indexed to, uint256 value);\n', '\n', '    function MOREToken() public {\n', '        _supply = 10*(10**9)*(10**18);\n', '        _balances[msg.sender] = _supply;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address src) public view returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    \n', '    function transfer(address dst, uint256 wad) public {\n', '        require(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(msg.sender, dst, wad);\n', '    }\n', '    \n', '    function add(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x + y;\n', '        require(z >= x && z>=y);\n', '        return z;\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x - y;\n', '        require(x >= y && z <= x);\n', '        return z;\n', '    }\n', '}']
