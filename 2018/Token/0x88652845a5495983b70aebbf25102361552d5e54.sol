['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal _totalSupply;\n', '    mapping(address => uint256) internal _balanceOf;\n', '    mapping (address => mapping (address => uint256)) internal _allowance;\n', '\n', '    modifier onlyValidAddress(address addr) {\n', '        require(addr != address(0), "Address cannot be zero");\n', '        _;\n', '    }\n', '\n', '    modifier onlySufficientBalance(address from, uint256 value) {\n', '        require(value <= _balanceOf[from], "Insufficient balance");\n', '        _;\n', '    }\n', '\n', '    modifier onlySufficientAllowance(address owner, address spender, uint256 value) {\n', '        require(value <= _allowance[owner][spender], "Insufficient allowance");\n', '        _;\n', '    }\n', '\n', '    /**\n', '      * @dev Transfers token to the specified address\n', '      * @param to The address to transfer to.\n', '      * @param value The amount to be transferred.\n', '      */\n', '    function transfer(address to, uint256 value)\n', '        public\n', '        onlyValidAddress(to)\n', '        onlySufficientBalance(msg.sender, value)\n', '        returns (bool)\n', '    {\n', '        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(value);\n', '        _balanceOf[to] = _balanceOf[to].add(value);\n', '\n', '        emit Transfer(msg.sender, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers tokens from one address to another\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public\n', '        onlyValidAddress(to)\n', '        onlySufficientBalance(from, value)\n', '        onlySufficientAllowance(from, msg.sender, value)\n', '        returns (bool)\n', '    {\n', '        _balanceOf[from] = _balanceOf[from].sub(value);\n', '        _balanceOf[to] = _balanceOf[to].add(value);\n', '        _allowance[from][msg.sender] = _allowance[from][msg.sender].sub(value);\n', '\n', '        emit Transfer(from, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approves the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value)\n', '        public\n', '        onlyValidAddress(spender)\n', '        returns (bool)\n', '    {\n', '        _allowance[msg.sender][spender] = value;\n', '\n', '        emit Approval(msg.sender, spender, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increases the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when _allowance[spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        onlyValidAddress(spender)\n', '        returns (bool)\n', '    {\n', '        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].add(addedValue);\n', '\n', '        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decreases the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when _allowance[spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        onlyValidAddress(spender)\n', '        onlySufficientAllowance(msg.sender, spender, subtractedValue)\n', '        returns (bool)\n', '    {\n', '        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].sub(subtractedValue);\n', '\n', '        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balanceOf[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Checks the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowance[owner][spender];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-soliditysettable\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Can only be called by the owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAddress(address addr) {\n', '        require(addr != address(0), "Address cannot be zero");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner)\n', '        public\n', '        onlyOwner\n', '        onlyValidAddress(newOwner)\n', '    {\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Standard token with minting\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    bool public mintingFinished;\n', '    uint256 public cap;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    modifier onlyMinting() {\n', '        require(!mintingFinished, "Minting is already finished");\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotExceedingCap(uint256 amount) {\n', '        require(_totalSupply.add(amount) <= cap, "Total supply must not exceed cap");\n', '        _;\n', '    }\n', '\n', '    constructor(uint256 _cap) public {\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates new tokens for the given address\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 amount)\n', '        public\n', '        onlyOwner\n', '        onlyMinting\n', '        onlyValidAddress(to)\n', '        onlyNotExceedingCap(amount)\n', '        returns (bool)\n', '    {\n', '        mintImpl(to, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates new tokens for the given addresses\n', '     * @param addresses The array of addresses that will receive the minted tokens.\n', '     * @param amounts The array of amounts of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintMany(address[] addresses, uint256[] amounts)\n', '        public\n', '        onlyOwner\n', '        onlyMinting\n', '        onlyNotExceedingCap(sum(amounts))\n', '        returns (bool)\n', '    {\n', '        require(\n', '            addresses.length == amounts.length,\n', '            "Addresses array must be the same size as amounts array"\n', '        );\n', '\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            require(addresses[i] != address(0), "Address cannot be zero");\n', '            mintImpl(addresses[i], amounts[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Stops minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting()\n', '        public\n', '        onlyOwner\n', '        onlyMinting\n', '        returns (bool)\n', '    {\n', '        mintingFinished = true;\n', '\n', '        emit MintFinished();\n', '\n', '        return true;\n', '    }\n', '\n', '    function mintImpl(address to, uint256 amount) private {\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balanceOf[to] = _balanceOf[to].add(amount);\n', '\n', '        emit Mint(to, amount);\n', '        emit Transfer(address(0), to, amount);\n', '    }\n', '\n', '    function sum(uint256[] arr) private pure returns (uint256) {\n', '        uint256 aggr = 0;\n', '        for (uint256 i = 0; i < arr.length; i++) {\n', '            aggr = aggr.add(arr[i]);\n', '        }\n', '        return aggr;\n', '    }\n', '}\n', '\n', '\n', 'contract PhotochainToken is MintableToken {\n', '    string public name = "PhotochainToken";\n', '    string public symbol = "PHT";\n', '    uint256 public decimals = 18;\n', '    uint256 public cap = 120 * 10**6 * 10**decimals;\n', '\n', '    // solhint-disable-next-line no-empty-blocks\n', '    constructor() public MintableToken(cap) {}\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal _totalSupply;\n', '    mapping(address => uint256) internal _balanceOf;\n', '    mapping (address => mapping (address => uint256)) internal _allowance;\n', '\n', '    modifier onlyValidAddress(address addr) {\n', '        require(addr != address(0), "Address cannot be zero");\n', '        _;\n', '    }\n', '\n', '    modifier onlySufficientBalance(address from, uint256 value) {\n', '        require(value <= _balanceOf[from], "Insufficient balance");\n', '        _;\n', '    }\n', '\n', '    modifier onlySufficientAllowance(address owner, address spender, uint256 value) {\n', '        require(value <= _allowance[owner][spender], "Insufficient allowance");\n', '        _;\n', '    }\n', '\n', '    /**\n', '      * @dev Transfers token to the specified address\n', '      * @param to The address to transfer to.\n', '      * @param value The amount to be transferred.\n', '      */\n', '    function transfer(address to, uint256 value)\n', '        public\n', '        onlyValidAddress(to)\n', '        onlySufficientBalance(msg.sender, value)\n', '        returns (bool)\n', '    {\n', '        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(value);\n', '        _balanceOf[to] = _balanceOf[to].add(value);\n', '\n', '        emit Transfer(msg.sender, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers tokens from one address to another\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public\n', '        onlyValidAddress(to)\n', '        onlySufficientBalance(from, value)\n', '        onlySufficientAllowance(from, msg.sender, value)\n', '        returns (bool)\n', '    {\n', '        _balanceOf[from] = _balanceOf[from].sub(value);\n', '        _balanceOf[to] = _balanceOf[to].add(value);\n', '        _allowance[from][msg.sender] = _allowance[from][msg.sender].sub(value);\n', '\n', '        emit Transfer(from, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approves the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value)\n', '        public\n', '        onlyValidAddress(spender)\n', '        returns (bool)\n', '    {\n', '        _allowance[msg.sender][spender] = value;\n', '\n', '        emit Approval(msg.sender, spender, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increases the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when _allowance[spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        onlyValidAddress(spender)\n', '        returns (bool)\n', '    {\n', '        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].add(addedValue);\n', '\n', '        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decreases the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when _allowance[spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        onlyValidAddress(spender)\n', '        onlySufficientAllowance(msg.sender, spender, subtractedValue)\n', '        returns (bool)\n', '    {\n', '        _allowance[msg.sender][spender] = _allowance[msg.sender][spender].sub(subtractedValue);\n', '\n', '        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balanceOf[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Checks the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowance[owner][spender];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-soliditysettable\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Can only be called by the owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAddress(address addr) {\n', '        require(addr != address(0), "Address cannot be zero");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner)\n', '        public\n', '        onlyOwner\n', '        onlyValidAddress(newOwner)\n', '    {\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Standard token with minting\n', ' * @dev Based on https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    bool public mintingFinished;\n', '    uint256 public cap;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    modifier onlyMinting() {\n', '        require(!mintingFinished, "Minting is already finished");\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotExceedingCap(uint256 amount) {\n', '        require(_totalSupply.add(amount) <= cap, "Total supply must not exceed cap");\n', '        _;\n', '    }\n', '\n', '    constructor(uint256 _cap) public {\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates new tokens for the given address\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 amount)\n', '        public\n', '        onlyOwner\n', '        onlyMinting\n', '        onlyValidAddress(to)\n', '        onlyNotExceedingCap(amount)\n', '        returns (bool)\n', '    {\n', '        mintImpl(to, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates new tokens for the given addresses\n', '     * @param addresses The array of addresses that will receive the minted tokens.\n', '     * @param amounts The array of amounts of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintMany(address[] addresses, uint256[] amounts)\n', '        public\n', '        onlyOwner\n', '        onlyMinting\n', '        onlyNotExceedingCap(sum(amounts))\n', '        returns (bool)\n', '    {\n', '        require(\n', '            addresses.length == amounts.length,\n', '            "Addresses array must be the same size as amounts array"\n', '        );\n', '\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            require(addresses[i] != address(0), "Address cannot be zero");\n', '            mintImpl(addresses[i], amounts[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Stops minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting()\n', '        public\n', '        onlyOwner\n', '        onlyMinting\n', '        returns (bool)\n', '    {\n', '        mintingFinished = true;\n', '\n', '        emit MintFinished();\n', '\n', '        return true;\n', '    }\n', '\n', '    function mintImpl(address to, uint256 amount) private {\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balanceOf[to] = _balanceOf[to].add(amount);\n', '\n', '        emit Mint(to, amount);\n', '        emit Transfer(address(0), to, amount);\n', '    }\n', '\n', '    function sum(uint256[] arr) private pure returns (uint256) {\n', '        uint256 aggr = 0;\n', '        for (uint256 i = 0; i < arr.length; i++) {\n', '            aggr = aggr.add(arr[i]);\n', '        }\n', '        return aggr;\n', '    }\n', '}\n', '\n', '\n', 'contract PhotochainToken is MintableToken {\n', '    string public name = "PhotochainToken";\n', '    string public symbol = "PHT";\n', '    uint256 public decimals = 18;\n', '    uint256 public cap = 120 * 10**6 * 10**decimals;\n', '\n', '    // solhint-disable-next-line no-empty-blocks\n', '    constructor() public MintableToken(cap) {}\n', '}']
