['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract MultiSender {\n', '    using SafeMath for uint256;\n', '\n', '    function multiSend(address tokenAddress, address[] addresses, uint256[] amounts) public payable {\n', '        require(addresses.length <= 100);\n', '        require(addresses.length == amounts.length);\n', '        if (tokenAddress == 0x000000000000000000000000000000000000bEEF) {\n', '            multisendEther(addresses, amounts);\n', '        } else {\n', '            ERC20 token = ERC20(tokenAddress);\n', '            //Token address\n', '            for (uint8 i = 0; i < addresses.length; i++) {\n', '                address _address = addresses[i];\n', '                uint256 _amount = amounts[i];\n', '                token.transferFrom(msg.sender, _address, _amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function multisendEther(address[] addresses, uint256[] amounts) public payable {\n', '        uint256 total = msg.value;\n', '        uint256 i = 0;\n', '        for (i; i < addresses.length; i++) {\n', '            require(total >= amounts[i]);\n', '            total = total.sub(amounts[i]);\n', '            addresses[i].transfer(amounts[i]);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20 {\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract MultiSender {\n', '    using SafeMath for uint256;\n', '\n', '    function multiSend(address tokenAddress, address[] addresses, uint256[] amounts) public payable {\n', '        require(addresses.length <= 100);\n', '        require(addresses.length == amounts.length);\n', '        if (tokenAddress == 0x000000000000000000000000000000000000bEEF) {\n', '            multisendEther(addresses, amounts);\n', '        } else {\n', '            ERC20 token = ERC20(tokenAddress);\n', '            //Token address\n', '            for (uint8 i = 0; i < addresses.length; i++) {\n', '                address _address = addresses[i];\n', '                uint256 _amount = amounts[i];\n', '                token.transferFrom(msg.sender, _address, _amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function multisendEther(address[] addresses, uint256[] amounts) public payable {\n', '        uint256 total = msg.value;\n', '        uint256 i = 0;\n', '        for (i; i < addresses.length; i++) {\n', '            require(total >= amounts[i]);\n', '            total = total.sub(amounts[i]);\n', '            addresses[i].transfer(amounts[i]);\n', '        }\n', '    }\n', '}']
