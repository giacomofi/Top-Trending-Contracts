['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', ' library SafeMath {\n', '   /**\n', '   * @dev Multiplies two numbers, revert()s on overflow.\n', '   */\n', '   function mul(uint256 a, uint256 b) internal returns (uint256 c) {\n', '     if (a == 0) {\n', '       return 0;\n', '     }\n', '     c = a * b;\n', '     assert(c / a == b);\n', '     return c;\n', '   }\n', '\n', '   /**\n', '   * @dev Integer division of two numbers, truncating the quotient.\n', '   */\n', '   function div(uint256 a, uint256 b) internal returns (uint256) {\n', '     // assert(b > 0); // Solidity automatically revert()s when dividing by 0\n', '     // uint256 c = a / b;\n', '     // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '     return a / b;\n', '   }\n', '\n', '   /**\n', '   * @dev Subtracts two numbers, revert()s on overflow (i.e. if subtrahend is greater than minuend).\n', '   */\n', '   function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '     assert(b <= a);\n', '     return a - b;\n', '   }\n', '\n', '   /**\n', '   * @dev Adds two numbers, revert()s on overflow.\n', '   */\n', '   function add(uint256 a, uint256 b) internal returns (uint256 c) {\n', '     c = a + b;\n', '     assert(c >= a && c >= b);\n', '     return c;\n', '   }\n', '\n', '   function assert(bool assertion) internal {\n', '     if (!assertion) {\n', '       revert();\n', '     }\n', '   }\n', ' }\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size.add(4)) {\n', '       revert();\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    require(_to != 0x0);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    require(_to != 0x0);\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already revert() if this condition is not met\n', '    // if (_value > _allowance) revert();\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev revert()s if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    if (paused) revert();\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    if (!paused) revert();\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    emit Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    emit Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * Pausable token\n', ' *\n', ' * Simple ERC20 Token example, with pausable token creation\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint _value) whenNotPaused {\n', '    super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) whenNotPaused {\n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CNYTokenPlus\n', ' * @dev CNY Token Plus contract\n', ' */\n', 'contract CNYTokenPlus is PausableToken {\n', '  using SafeMath for uint256;\n', '\n', '  function () {\n', '      //if ether is sent to this address, send it back.\n', '      revert();\n', '  }\n', '\n', '  string public name = "CNYTokenPlus";\n', '  string public symbol = "CNYt⁺";\n', '  uint8 public decimals = 18;\n', '  uint public totalSupply = 100000000000000000000000000;\n', '  string public version = &#39;CNYt⁺ 2.0&#39;;\n', '  // The nonce for avoid transfer replay attacks\n', '  mapping(address => uint256) nonces;\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  function CNYTokenPlus() {\n', '      balances[msg.sender] = totalSupply;              // Give the creator all initial tokens\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) onlyOwner whenNotPaused {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '\n', '  /*\n', '   * Proxy transfer HC token. When some users of the ethereum account don&#39;t have ether,\n', '   * Who can authorize the agent for broadcast transactions, the agents may charge fees\n', '   * @param _from\n', '   * @param _to\n', '   * @param _value\n', '   * @param fee\n', '   * @param _v\n', '   * @param _r\n', '   * @param _s\n', '   * @param _comment\n', '   */\n', '  function transferProxy(address _from, address _to, uint256 _value, uint256 _fee,\n', '      uint8 _v, bytes32 _r, bytes32 _s) whenNotPaused {\n', '\n', '      require((balances[_from] >= _fee.add(_value)));\n', '      require(balances[_to].add(_value) >= balances[_to]);\n', '      require(balances[msg.sender].add(_fee) >= balances[msg.sender]);\n', '\n', '      uint256 nonce = nonces[_from];\n', '      bytes32 hash = keccak256(_from,_to,_value,_fee,nonce);\n', '      bytes memory prefix = "\\x19Ethereum Signed Message:\\n32";\n', '      bytes32 prefixedHash = keccak256(prefix, hash);\n', '      require(_from == ecrecover(prefixedHash,_v,_r,_s));\n', '\n', '      balances[_from] = balances[_from].sub(_value.add(_fee));\n', '      balances[_to] = balances[_to].add(_value);\n', '      balances[msg.sender] = balances[msg.sender].add(_fee);\n', '      nonces[_from] = nonce.add(1);\n', '\n', '      emit Transfer(_from, _to, _value);\n', '      emit Transfer(_from, msg.sender, _fee);\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', ' library SafeMath {\n', '   /**\n', '   * @dev Multiplies two numbers, revert()s on overflow.\n', '   */\n', '   function mul(uint256 a, uint256 b) internal returns (uint256 c) {\n', '     if (a == 0) {\n', '       return 0;\n', '     }\n', '     c = a * b;\n', '     assert(c / a == b);\n', '     return c;\n', '   }\n', '\n', '   /**\n', '   * @dev Integer division of two numbers, truncating the quotient.\n', '   */\n', '   function div(uint256 a, uint256 b) internal returns (uint256) {\n', '     // assert(b > 0); // Solidity automatically revert()s when dividing by 0\n', '     // uint256 c = a / b;\n', "     // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '     return a / b;\n', '   }\n', '\n', '   /**\n', '   * @dev Subtracts two numbers, revert()s on overflow (i.e. if subtrahend is greater than minuend).\n', '   */\n', '   function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '     assert(b <= a);\n', '     return a - b;\n', '   }\n', '\n', '   /**\n', '   * @dev Adds two numbers, revert()s on overflow.\n', '   */\n', '   function add(uint256 a, uint256 b) internal returns (uint256 c) {\n', '     c = a + b;\n', '     assert(c >= a && c >= b);\n', '     return c;\n', '   }\n', '\n', '   function assert(bool assertion) internal {\n', '     if (!assertion) {\n', '       revert();\n', '     }\n', '   }\n', ' }\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size.add(4)) {\n', '       revert();\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    require(_to != 0x0);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    require(_to != 0x0);\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already revert() if this condition is not met\n', '    // if (_value > _allowance) revert();\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev revert()s if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    if (paused) revert();\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    if (!paused) revert();\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    emit Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    emit Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * Pausable token\n', ' *\n', ' * Simple ERC20 Token example, with pausable token creation\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint _value) whenNotPaused {\n', '    super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) whenNotPaused {\n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CNYTokenPlus\n', ' * @dev CNY Token Plus contract\n', ' */\n', 'contract CNYTokenPlus is PausableToken {\n', '  using SafeMath for uint256;\n', '\n', '  function () {\n', '      //if ether is sent to this address, send it back.\n', '      revert();\n', '  }\n', '\n', '  string public name = "CNYTokenPlus";\n', '  string public symbol = "CNYt⁺";\n', '  uint8 public decimals = 18;\n', '  uint public totalSupply = 100000000000000000000000000;\n', "  string public version = 'CNYt⁺ 2.0';\n", '  // The nonce for avoid transfer replay attacks\n', '  mapping(address => uint256) nonces;\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  function CNYTokenPlus() {\n', '      balances[msg.sender] = totalSupply;              // Give the creator all initial tokens\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) onlyOwner whenNotPaused {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '\n', '  /*\n', "   * Proxy transfer HC token. When some users of the ethereum account don't have ether,\n", '   * Who can authorize the agent for broadcast transactions, the agents may charge fees\n', '   * @param _from\n', '   * @param _to\n', '   * @param _value\n', '   * @param fee\n', '   * @param _v\n', '   * @param _r\n', '   * @param _s\n', '   * @param _comment\n', '   */\n', '  function transferProxy(address _from, address _to, uint256 _value, uint256 _fee,\n', '      uint8 _v, bytes32 _r, bytes32 _s) whenNotPaused {\n', '\n', '      require((balances[_from] >= _fee.add(_value)));\n', '      require(balances[_to].add(_value) >= balances[_to]);\n', '      require(balances[msg.sender].add(_fee) >= balances[msg.sender]);\n', '\n', '      uint256 nonce = nonces[_from];\n', '      bytes32 hash = keccak256(_from,_to,_value,_fee,nonce);\n', '      bytes memory prefix = "\\x19Ethereum Signed Message:\\n32";\n', '      bytes32 prefixedHash = keccak256(prefix, hash);\n', '      require(_from == ecrecover(prefixedHash,_v,_r,_s));\n', '\n', '      balances[_from] = balances[_from].sub(_value.add(_fee));\n', '      balances[_to] = balances[_to].add(_value);\n', '      balances[msg.sender] = balances[msg.sender].add(_fee);\n', '      nonces[_from] = nonce.add(1);\n', '\n', '      emit Transfer(_from, _to, _value);\n', '      emit Transfer(_from, msg.sender, _fee);\n', '  }\n', '}']
