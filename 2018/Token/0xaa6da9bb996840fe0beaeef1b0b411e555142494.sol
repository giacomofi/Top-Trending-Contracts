['pragma solidity ^0.4.21;\n', ' \n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */ \n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', ' \n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '} \n', ' \n', 'contract StandardToken is ERC20, BurnableToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract SUCoin is MintableToken {\n', '    \n', '    string public constant name = "SU Coin";\n', '    \n', '    string public constant symbol = "SUCoin";\n', '    \n', '    uint32 public constant decimals = 18;\n', '    \n', '}\n', '\n', '\n', 'contract SUTokenContract is Ownable  {\n', '    using SafeMath for uint;\n', '    \n', '    event doiVerificationEvent(bytes32 _doiHash, bytes32 _hash);\n', '    \n', '    SUCoin public token;// = new SUCoin();\n', '    bool ifInit = true; \n', '    uint public tokenDec = 1000000000000000000; //18\n', '    address manager;\n', '    \n', '    \n', '    mapping (address => mapping (uint => bool)) idMap;\n', '    mapping(bytes32 => bool) hashMap;\n', '    mapping (uint => uint) mintInPeriod;\n', '    uint public mintLimit = tokenDec.mul(10000);\n', '    uint public period = 30 * 1 days; // 30 дней\n', '    uint public startTime = now;\n', '    \n', '    \n', '    function SUTokenContract(){\n', '        owner = msg.sender;\n', '        manager = msg.sender;\n', '        token = new SUCoin();\n', '        //token = SUCoin(0x64734D2FEDCD1A208375b5Ea6dC14F4482b47D52);\n', '    }\n', '    \n', '    function initMinting() onlyOwner returns (bool) {\n', '        require(!ifInit);\n', '        require(token.mint(address(this), tokenDec.mul(50000)));\n', '        ifInit = true;\n', '        return true;\n', '    } \n', '    \n', '\n', '    function transferTokenOwnership(address _newOwner) onlyOwner {   \n', '        token.transferOwnership(_newOwner);\n', '    }\n', '    \n', '    function mint(address _to, uint _value) onlyOwner {\n', '        uint currPeriod = now.sub(startTime).div(period);\n', '        require(mintLimit>= _value.add(mintInPeriod[currPeriod]));\n', '        require(token.mint(_to, _value));\n', '        mintInPeriod[currPeriod] = mintInPeriod[currPeriod].add(_value);\n', '    }\n', '    \n', '    function burn(uint256 _value) onlyOwner {\n', '        token.burn(_value);\n', '    }\n', '    \n', '    function tokenTotalSupply() constant returns (uint256) {\n', '        return token.totalSupply();\n', '    }\n', '      \n', '    function tokenContractBalance() constant returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }   \n', '    \n', '    function tokentBalance(address _address) constant returns (uint256) {\n', '        return token.balanceOf(_address);\n', '    }     \n', '    \n', '    \n', '    function transferToken(address _to, uint _value) onlyOwner returns (bool) {\n', '        return token.transfer(_to,  _value);\n', '    }    \n', '    \n', '    function allowance( address _spender) constant returns (uint256 remaining) {\n', '        return token.allowance(address(this),_spender);\n', '    }\n', '    \n', '    function allowanceAdd( address _spender, uint _value ) onlyOwner  returns (bool) {\n', '        uint currAllowance = allowance( _spender);\n', '        require(token.approve( _spender, 0));\n', '        require(token.approve( _spender, currAllowance.add(_value)));\n', '        return true;\n', '    } \n', '    \n', '    function allowanceSub( address _spender, uint _value ) onlyOwner  returns (bool) {\n', '        uint currAllowance = allowance( _spender);\n', '        require(currAllowance>=_value);\n', '        require(token.approve( _spender, 0));\n', '        require(token.approve( _spender, currAllowance.sub(_value)));\n', '        return true;\n', '    }\n', '    \n', '    function allowanceSubId( address _spender, uint _value,   uint _id) onlyOwner  returns (bool) {\n', '        uint currAllowance = allowance( _spender);\n', '        require(currAllowance>=_value);\n', '        require(token.approve( _spender, 0));\n', '        require(token.approve( _spender, currAllowance.sub(_value)));\n', '        idMap[_spender][_id] = true;\n', '        return true;\n', '    }    \n', '\n', '  function storeId(address _address, uint _id) onlyOwner {\n', '    idMap[_address][_id] = true;\n', '  } \n', '  \n', '  function storeHash(bytes32 _hash) onlyOwner {\n', '    hashMap[_hash] = true;\n', '  } \n', '  \n', '  function storeDoi(bytes32 _doiHash, bytes32 _hash) onlyOwner {\n', '    doiVerificationEvent( _doiHash, _hash);\n', '    storeHash(_hash);\n', '  }  \n', '     \n', '    \n', '  function idVerification(address _address, uint _id) constant returns (bool) {\n', '    return idMap[_address][_id];\n', '  } \n', '  \n', '  function hashVerification(bytes32 _hash) constant returns (bool) {\n', '    return hashMap[_hash];\n', '  } \n', '  \n', '  function mintInPeriodCount(uint _period) constant returns (uint) {\n', '    return mintInPeriod[_period];\n', '  }   \n', '  \n', '  function mintInCurrPeriodCount() constant returns (uint) {\n', '    uint currPeriod = now.sub(startTime).div(period);\n', '    return mintInPeriod[currPeriod];\n', '  }\n', '  \n', '\n', '}\n', '\n', 'contract AddHash is Ownable  {\n', '\n', 'SUTokenContract public _SUTokenContract;\n', 'uint public tokenDec = 1000000000000000000; //18\n', '\n', 'function AddHash(){\n', '    _SUTokenContract = SUTokenContract(0xf867A9Bc367416F58845AC5CcB35e6bd93Be2087);\n', '}\n', '\n', 'function setSUTokenContract(address _newOwner) onlyOwner {   \n', '        _SUTokenContract = SUTokenContract(_newOwner);\n', '}\n', ' \n', ' \n', 'function transferTokenOwnership(address _newOwner) onlyOwner {   \n', '        _SUTokenContract.transferTokenOwnership(_newOwner);   \n', '} \n', '\n', 'function transferOwnership(address _newOwner) onlyOwner {   \n', '        _SUTokenContract.transferOwnership(_newOwner);   \n', '}\n', '\n', 'function tokenTotalSupply() constant returns (uint256) {\n', '        return  _SUTokenContract.tokenTotalSupply();\n', '}\n', ' \n', 'function addHash(address _newOwner) onlyOwner {\n', '    \n', '_SUTokenContract.allowanceAdd(0x75b436d1caa7f0257069d72f0e11b18a61e0827e,\t38*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x34cc4650285f1ebba0445bbd514925db23114f0d,\t6*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x87ee2789b1c24f09a677d7c89c6f789303580cd6,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x2e9dd8465c2550a05dd013d493e69eeb5ae2bc43,\t30*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xc1aa9136760d958f44bbd272bb20275fd2ee8a37,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x156e644a8097f56b0ef3d92a0efab7b82fa5bd4b,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x6c2f6e4afd777249ef9f77140129aa5768a374d4,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xb1585c1a51dbd3112f08144bee57068193eec73d,\t20*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xc821a893f42146bc2e79a651854e4db6c9f33690,\t15*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x2d5bedefd145f402bf9e650ef8396a64ec69d836,\t2*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x61b82a6445639041a6b4541add0f3a93051cd1d8,\t5*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xf7fa72e4856f88b897da1121b8769e25506aa4a2,\t2*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xfb3fcb7f7e48cbcf6dcab2eedebc0336b0c7ef2a,\t29*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x9795a67b30180b29b00e7506a20f154d2e89d4a9,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x29b4247ed7954bfd91a52d05b014613ecf59a0f5,\t9*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xd6ce243add4245fa3ffc8b0e6323f96cac104747,\t20*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xfe01d142fb236c76948d1c7a9ae7a46d0eba55ca,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x2c67bcdd586db033aed767c59ae98f5e0092758f,\t8*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xe78361fa410dcc4ffc79e1f7cb76261a8867476a,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xf0c1f195fb30df76474d4bb95c6f501a7a841697,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xe273d41212d37d06f72f5e0aaa95a4889a738d33,\t3*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xf6e290ca3217d97e64b23223edc66ff34c052e5e,\t3*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xe1f1d8113737498284fd84c567265756df6a94e7,\t8*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x1da27233129543bef2ca513f969acd0123370b77,\t10*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x9795a67b30180b29b00e7506a20f154d2e89d4a9,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x1027c99d6406728d8f9cd2b121194449e3df7a22,\t25*tokenDec);\n', '    \n', '_SUTokenContract.transferOwnership(_newOwner);    \n', '    \n', '    \n', '\n', '  }\n', '    \n', '}']
['pragma solidity ^0.4.21;\n', ' \n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */ \n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', ' \n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '} \n', ' \n', 'contract StandardToken is ERC20, BurnableToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', 'contract SUCoin is MintableToken {\n', '    \n', '    string public constant name = "SU Coin";\n', '    \n', '    string public constant symbol = "SUCoin";\n', '    \n', '    uint32 public constant decimals = 18;\n', '    \n', '}\n', '\n', '\n', 'contract SUTokenContract is Ownable  {\n', '    using SafeMath for uint;\n', '    \n', '    event doiVerificationEvent(bytes32 _doiHash, bytes32 _hash);\n', '    \n', '    SUCoin public token;// = new SUCoin();\n', '    bool ifInit = true; \n', '    uint public tokenDec = 1000000000000000000; //18\n', '    address manager;\n', '    \n', '    \n', '    mapping (address => mapping (uint => bool)) idMap;\n', '    mapping(bytes32 => bool) hashMap;\n', '    mapping (uint => uint) mintInPeriod;\n', '    uint public mintLimit = tokenDec.mul(10000);\n', '    uint public period = 30 * 1 days; // 30 дней\n', '    uint public startTime = now;\n', '    \n', '    \n', '    function SUTokenContract(){\n', '        owner = msg.sender;\n', '        manager = msg.sender;\n', '        token = new SUCoin();\n', '        //token = SUCoin(0x64734D2FEDCD1A208375b5Ea6dC14F4482b47D52);\n', '    }\n', '    \n', '    function initMinting() onlyOwner returns (bool) {\n', '        require(!ifInit);\n', '        require(token.mint(address(this), tokenDec.mul(50000)));\n', '        ifInit = true;\n', '        return true;\n', '    } \n', '    \n', '\n', '    function transferTokenOwnership(address _newOwner) onlyOwner {   \n', '        token.transferOwnership(_newOwner);\n', '    }\n', '    \n', '    function mint(address _to, uint _value) onlyOwner {\n', '        uint currPeriod = now.sub(startTime).div(period);\n', '        require(mintLimit>= _value.add(mintInPeriod[currPeriod]));\n', '        require(token.mint(_to, _value));\n', '        mintInPeriod[currPeriod] = mintInPeriod[currPeriod].add(_value);\n', '    }\n', '    \n', '    function burn(uint256 _value) onlyOwner {\n', '        token.burn(_value);\n', '    }\n', '    \n', '    function tokenTotalSupply() constant returns (uint256) {\n', '        return token.totalSupply();\n', '    }\n', '      \n', '    function tokenContractBalance() constant returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }   \n', '    \n', '    function tokentBalance(address _address) constant returns (uint256) {\n', '        return token.balanceOf(_address);\n', '    }     \n', '    \n', '    \n', '    function transferToken(address _to, uint _value) onlyOwner returns (bool) {\n', '        return token.transfer(_to,  _value);\n', '    }    \n', '    \n', '    function allowance( address _spender) constant returns (uint256 remaining) {\n', '        return token.allowance(address(this),_spender);\n', '    }\n', '    \n', '    function allowanceAdd( address _spender, uint _value ) onlyOwner  returns (bool) {\n', '        uint currAllowance = allowance( _spender);\n', '        require(token.approve( _spender, 0));\n', '        require(token.approve( _spender, currAllowance.add(_value)));\n', '        return true;\n', '    } \n', '    \n', '    function allowanceSub( address _spender, uint _value ) onlyOwner  returns (bool) {\n', '        uint currAllowance = allowance( _spender);\n', '        require(currAllowance>=_value);\n', '        require(token.approve( _spender, 0));\n', '        require(token.approve( _spender, currAllowance.sub(_value)));\n', '        return true;\n', '    }\n', '    \n', '    function allowanceSubId( address _spender, uint _value,   uint _id) onlyOwner  returns (bool) {\n', '        uint currAllowance = allowance( _spender);\n', '        require(currAllowance>=_value);\n', '        require(token.approve( _spender, 0));\n', '        require(token.approve( _spender, currAllowance.sub(_value)));\n', '        idMap[_spender][_id] = true;\n', '        return true;\n', '    }    \n', '\n', '  function storeId(address _address, uint _id) onlyOwner {\n', '    idMap[_address][_id] = true;\n', '  } \n', '  \n', '  function storeHash(bytes32 _hash) onlyOwner {\n', '    hashMap[_hash] = true;\n', '  } \n', '  \n', '  function storeDoi(bytes32 _doiHash, bytes32 _hash) onlyOwner {\n', '    doiVerificationEvent( _doiHash, _hash);\n', '    storeHash(_hash);\n', '  }  \n', '     \n', '    \n', '  function idVerification(address _address, uint _id) constant returns (bool) {\n', '    return idMap[_address][_id];\n', '  } \n', '  \n', '  function hashVerification(bytes32 _hash) constant returns (bool) {\n', '    return hashMap[_hash];\n', '  } \n', '  \n', '  function mintInPeriodCount(uint _period) constant returns (uint) {\n', '    return mintInPeriod[_period];\n', '  }   \n', '  \n', '  function mintInCurrPeriodCount() constant returns (uint) {\n', '    uint currPeriod = now.sub(startTime).div(period);\n', '    return mintInPeriod[currPeriod];\n', '  }\n', '  \n', '\n', '}\n', '\n', 'contract AddHash is Ownable  {\n', '\n', 'SUTokenContract public _SUTokenContract;\n', 'uint public tokenDec = 1000000000000000000; //18\n', '\n', 'function AddHash(){\n', '    _SUTokenContract = SUTokenContract(0xf867A9Bc367416F58845AC5CcB35e6bd93Be2087);\n', '}\n', '\n', 'function setSUTokenContract(address _newOwner) onlyOwner {   \n', '        _SUTokenContract = SUTokenContract(_newOwner);\n', '}\n', ' \n', ' \n', 'function transferTokenOwnership(address _newOwner) onlyOwner {   \n', '        _SUTokenContract.transferTokenOwnership(_newOwner);   \n', '} \n', '\n', 'function transferOwnership(address _newOwner) onlyOwner {   \n', '        _SUTokenContract.transferOwnership(_newOwner);   \n', '}\n', '\n', 'function tokenTotalSupply() constant returns (uint256) {\n', '        return  _SUTokenContract.tokenTotalSupply();\n', '}\n', ' \n', 'function addHash(address _newOwner) onlyOwner {\n', '    \n', '_SUTokenContract.allowanceAdd(0x75b436d1caa7f0257069d72f0e11b18a61e0827e,\t38*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x34cc4650285f1ebba0445bbd514925db23114f0d,\t6*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x87ee2789b1c24f09a677d7c89c6f789303580cd6,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x2e9dd8465c2550a05dd013d493e69eeb5ae2bc43,\t30*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xc1aa9136760d958f44bbd272bb20275fd2ee8a37,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x156e644a8097f56b0ef3d92a0efab7b82fa5bd4b,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x6c2f6e4afd777249ef9f77140129aa5768a374d4,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xb1585c1a51dbd3112f08144bee57068193eec73d,\t20*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xc821a893f42146bc2e79a651854e4db6c9f33690,\t15*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x2d5bedefd145f402bf9e650ef8396a64ec69d836,\t2*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x61b82a6445639041a6b4541add0f3a93051cd1d8,\t5*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xf7fa72e4856f88b897da1121b8769e25506aa4a2,\t2*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xfb3fcb7f7e48cbcf6dcab2eedebc0336b0c7ef2a,\t29*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x9795a67b30180b29b00e7506a20f154d2e89d4a9,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x29b4247ed7954bfd91a52d05b014613ecf59a0f5,\t9*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xd6ce243add4245fa3ffc8b0e6323f96cac104747,\t20*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xfe01d142fb236c76948d1c7a9ae7a46d0eba55ca,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x2c67bcdd586db033aed767c59ae98f5e0092758f,\t8*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xe78361fa410dcc4ffc79e1f7cb76261a8867476a,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xf0c1f195fb30df76474d4bb95c6f501a7a841697,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xe273d41212d37d06f72f5e0aaa95a4889a738d33,\t3*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xf6e290ca3217d97e64b23223edc66ff34c052e5e,\t3*tokenDec);\n', '_SUTokenContract.allowanceAdd(0xe1f1d8113737498284fd84c567265756df6a94e7,\t8*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x1da27233129543bef2ca513f969acd0123370b77,\t10*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x9795a67b30180b29b00e7506a20f154d2e89d4a9,\t4*tokenDec);\n', '_SUTokenContract.allowanceAdd(0x1027c99d6406728d8f9cd2b121194449e3df7a22,\t25*tokenDec);\n', '    \n', '_SUTokenContract.transferOwnership(_newOwner);    \n', '    \n', '    \n', '\n', '  }\n', '    \n', '}']
