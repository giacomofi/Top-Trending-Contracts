['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title IERC20Token - ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract IERC20Token {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value)  public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success);\n', '    function approve(address _spender, uint256 _value)  public returns (bool success);\n', '    function allowance(address _owner, address _spender)  public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title ERC20Token - ERC20 base implementation\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Token is IERC20Token {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    \n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', 'contract JointToken is ERC20Token {\n', '\n', '    uint256 public constant RewardPoolAmount = 500000000;\n', '    uint256 public constant ICOInvestorsAmount = 100000000;\n', '    uint256 public constant EarlyAdoptersAmount = 5000000;\n', '    uint256 public constant LaunchPartnersAmount = 5000000;\n', '    uint256 public constant TeamMembersAmount = 5000000;\n', '    uint256 public constant MarketingDevelopmentAmount = 1000000;\n', '\n', '    uint256 public constant EstimatedICOBonusAmount = 14000000;\n', '\n', '    address public constant RewardPoolAddress = 0xEb1FAef9068b6B8f46b50245eE877dA5b03D98C9;\n', '    address public constant ICOAddress = 0x29eC21157f19F7822432e87ef504D366c24E1D8B;\n', '    address public constant EarlyAdoptersAddress = 0x5DD184EC1fB992c158EA15936e57A20C70761f84;\n', '    address public constant LaunchPartnersAddress = 0x4A1943b2aB647a5150ECEc16D6Bf695f10D94E0E;\n', '    address public constant TeamMembersAddress = 0x5a5b2715121e762B43D9A657E10AE93A5629Fe28;\n', '    address public constant MarketingDevelopmentAddress = 0x5E1D0513Bc39fBD6ECd94447e627919Bbf575eC0;\n', '    \n', '    uint256 public  decimalPlace;\n', '\n', '\n', '    function JointToken() public {\n', '        name = "JOINT";\n', '        symbol = "JOINT";\n', '        decimals = 18;\n', '\n', '        decimalPlace = 10**uint256(decimals);\n', '        totalSupply = 616000000*decimalPlace;\n', '        distributeTokens();\n', '    }\n', '\n', '    function distributeTokens () private {\n', '        balances[RewardPoolAddress] = (RewardPoolAmount.sub(EstimatedICOBonusAmount)).mul(decimalPlace);\n', '        balances[ICOAddress] = (ICOInvestorsAmount.add(EstimatedICOBonusAmount)).mul(decimalPlace);\n', '        balances[EarlyAdoptersAddress] = EarlyAdoptersAmount.mul(decimalPlace);\n', '        balances[LaunchPartnersAddress] = LaunchPartnersAmount.mul(decimalPlace);\n', '        balances[TeamMembersAddress] = TeamMembersAmount.mul(decimalPlace);\n', '        balances[MarketingDevelopmentAddress] = MarketingDevelopmentAmount.mul(decimalPlace);\n', '    }\n', '\n', '}']