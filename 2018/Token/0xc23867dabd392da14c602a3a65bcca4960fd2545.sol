['//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '//File: contracts\\ARTIDToken.sol\n', '/**\n', ' * @title ParkinGO token\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGO\n', ' */\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '\n', 'contract ARTIDToken is StandardToken {\n', '    using SafeMath for uint256;\n', '    \n', '    string public constant name = "ARTIDToken";\n', '    string public constant symbol = "ARTID";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant INITIAL_SUPPLY = 120e6 * 1e18;\n', '    uint256 public constant Wallet_Initial_Supply = 12e6 * 1e18;\n', '    address public constant Wallet1 =address(0x5593105770Cd53802c067734d7e321E22E08C9a4);\n', '    //\n', '    address public constant Wallet2 =address(0x7003D8df7b38f4c758975fD4800574Fecc0DA7cd);\n', '    //\n', '    address public constant Wallet3 =address(0xDfdAA3B74fcc65b9E90d5922a74F8140A2b67d0f);\n', '    //\n', '    address public constant Wallet4 =address(0x0141f8d84F25739e426fd19783A1eC3A1f5a35e0);\n', '    //\n', '    address public constant Wallet5 =address(0x8863F676474C65E9B85dc2B7fEe16188503AE790);\n', '    //\n', '    address public constant Wallet6 =address(0xAbF2e86c69648E9ed6CD284f4f82dF3f9df7a3DD);\n', '    //\n', '    address public constant Wallet7 =address(0x66348c99019D6c21fe7c4f954Fd5A5Cb0b41aa2c);\n', '    //\n', '    address public constant Wallet8 =address(0x3257b7eBB5e52c67cdd0C1112b28db362b7463cD);\n', '    //\n', '    address public constant Wallet9 =address(0x0c26122396a4Bd59d855f19b69dADBa3B19BA4D7);\n', '    //\n', '    address public constant Wallet10=address(0x5b38E7b2C9aC03fA53E96220DCd299E3B47e1624);\n', '\n', '    /**\n', '     * @dev Constructor of ArtToken that instantiates a new Mintable Pausable Token\n', '     */\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[Wallet1] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet1, Wallet_Initial_Supply);\n', '        balances[Wallet2] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet2, Wallet_Initial_Supply);\n', '        balances[Wallet3] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet3, Wallet_Initial_Supply);\n', '        balances[Wallet4] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet4, Wallet_Initial_Supply);\n', '        balances[Wallet5] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet5, Wallet_Initial_Supply);\n', '        balances[Wallet6] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet6, Wallet_Initial_Supply);\n', '        balances[Wallet7] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet7, Wallet_Initial_Supply);\n', '        balances[Wallet8] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet8, Wallet_Initial_Supply);\n', '        balances[Wallet9] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet9, Wallet_Initial_Supply);\n', '        balances[Wallet10] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet10, Wallet_Initial_Supply);\n', '\n', '    }\n', '\n', '}']
['//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '//File: contracts\\ARTIDToken.sol\n', '/**\n', ' * @title ParkinGO token\n', ' *\n', ' * @version 1.0\n', ' * @author ParkinGO\n', ' */\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '\n', 'contract ARTIDToken is StandardToken {\n', '    using SafeMath for uint256;\n', '    \n', '    string public constant name = "ARTIDToken";\n', '    string public constant symbol = "ARTID";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant INITIAL_SUPPLY = 120e6 * 1e18;\n', '    uint256 public constant Wallet_Initial_Supply = 12e6 * 1e18;\n', '    address public constant Wallet1 =address(0x5593105770Cd53802c067734d7e321E22E08C9a4);\n', '    //\n', '    address public constant Wallet2 =address(0x7003D8df7b38f4c758975fD4800574Fecc0DA7cd);\n', '    //\n', '    address public constant Wallet3 =address(0xDfdAA3B74fcc65b9E90d5922a74F8140A2b67d0f);\n', '    //\n', '    address public constant Wallet4 =address(0x0141f8d84F25739e426fd19783A1eC3A1f5a35e0);\n', '    //\n', '    address public constant Wallet5 =address(0x8863F676474C65E9B85dc2B7fEe16188503AE790);\n', '    //\n', '    address public constant Wallet6 =address(0xAbF2e86c69648E9ed6CD284f4f82dF3f9df7a3DD);\n', '    //\n', '    address public constant Wallet7 =address(0x66348c99019D6c21fe7c4f954Fd5A5Cb0b41aa2c);\n', '    //\n', '    address public constant Wallet8 =address(0x3257b7eBB5e52c67cdd0C1112b28db362b7463cD);\n', '    //\n', '    address public constant Wallet9 =address(0x0c26122396a4Bd59d855f19b69dADBa3B19BA4D7);\n', '    //\n', '    address public constant Wallet10=address(0x5b38E7b2C9aC03fA53E96220DCd299E3B47e1624);\n', '\n', '    /**\n', '     * @dev Constructor of ArtToken that instantiates a new Mintable Pausable Token\n', '     */\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[Wallet1] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet1, Wallet_Initial_Supply);\n', '        balances[Wallet2] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet2, Wallet_Initial_Supply);\n', '        balances[Wallet3] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet3, Wallet_Initial_Supply);\n', '        balances[Wallet4] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet4, Wallet_Initial_Supply);\n', '        balances[Wallet5] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet5, Wallet_Initial_Supply);\n', '        balances[Wallet6] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet6, Wallet_Initial_Supply);\n', '        balances[Wallet7] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet7, Wallet_Initial_Supply);\n', '        balances[Wallet8] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet8, Wallet_Initial_Supply);\n', '        balances[Wallet9] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet9, Wallet_Initial_Supply);\n', '        balances[Wallet10] = Wallet_Initial_Supply;\n', '        emit Transfer(0x0, Wallet10, Wallet_Initial_Supply);\n', '\n', '    }\n', '\n', '}']
