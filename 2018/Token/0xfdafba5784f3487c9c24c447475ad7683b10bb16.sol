['pragma solidity ^0.4.21;\n', '\n', 'contract tokenInterface{\n', '    uint256 public totalSupply;\n', '    uint8 public decimals;\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', 'contract Owned{\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function Owned() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still need to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '    \n', '    event Pause();\n', '    event Unpause();\n', '    bool public paused = true;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '// a ledger recording policy participants\n', '// kill() property is limited to the officially-released policies, which must be removed in the later template versions.\n', 'contract airDrop is Owned {\n', '    \n', '    tokenInterface private tokenLedger;\n', '    \n', '    //after the withdrawal, policy will transfer back the token to the ex-holder,\n', '    //the policy balance ledger will be updated either\n', '    function withdrawAirDrop(address[] lucky, uint256 value) onlyOwner whenNotPaused public returns (bool success) {\n', '\n', '        uint i;\n', '\n', '        for (i=0;i<lucky.length;i++){\n', '            //if(!tokenLedger.transfer(lucky[i],value)){revert();}\n', '            if(!tokenLedger.transferFrom(msg.sender,lucky[i],value)){revert();}\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function applyToken(address token) onlyOwner whenPaused public returns (bool success) {\n', '        tokenLedger=tokenInterface(token);\n', '        return true;\n', '    }\n', '    \n', '    function checkToken() public view returns(address){\n', '        return address(tokenLedger);\n', '    }\n', '    \n', '    function tokenDecimals() public view returns(uint8 dec){\n', '        return tokenLedger.decimals();\n', '    }\n', '    \n', '    function tokenTotalSupply() public view returns(uint256){\n', '        return tokenLedger.totalSupply();\n', '    }\n', '    \n', '    function kill() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract tokenInterface{\n', '    uint256 public totalSupply;\n', '    uint8 public decimals;\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', 'contract Owned{\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function Owned() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still need to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '    \n', '    event Pause();\n', '    event Unpause();\n', '    bool public paused = true;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '// a ledger recording policy participants\n', '// kill() property is limited to the officially-released policies, which must be removed in the later template versions.\n', 'contract airDrop is Owned {\n', '    \n', '    tokenInterface private tokenLedger;\n', '    \n', '    //after the withdrawal, policy will transfer back the token to the ex-holder,\n', '    //the policy balance ledger will be updated either\n', '    function withdrawAirDrop(address[] lucky, uint256 value) onlyOwner whenNotPaused public returns (bool success) {\n', '\n', '        uint i;\n', '\n', '        for (i=0;i<lucky.length;i++){\n', '            //if(!tokenLedger.transfer(lucky[i],value)){revert();}\n', '            if(!tokenLedger.transferFrom(msg.sender,lucky[i],value)){revert();}\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function applyToken(address token) onlyOwner whenPaused public returns (bool success) {\n', '        tokenLedger=tokenInterface(token);\n', '        return true;\n', '    }\n', '    \n', '    function checkToken() public view returns(address){\n', '        return address(tokenLedger);\n', '    }\n', '    \n', '    function tokenDecimals() public view returns(uint8 dec){\n', '        return tokenLedger.decimals();\n', '    }\n', '    \n', '    function tokenTotalSupply() public view returns(uint256){\n', '        return tokenLedger.totalSupply();\n', '    }\n', '    \n', '    function kill() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '}']
