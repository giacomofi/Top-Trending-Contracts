['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-10\n', '*/\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// &#39;Chatl&#39; &#39;CHAL&#39; token contract\n', '// ----------------------------------------------------------------------------\n', '\n', '// implement safemath as a library\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '    uint256 c = a * b;\n', '    require(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract ChatlToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    address     public      owner;\n', '    string      public      name;\n', '    string      public      symbol;\n', '    uint256     public      totalSupply;\n', '    uint8       public      decimals;\n', '    bool        public      globalTransferLock;\n', '\n', '    mapping (address => bool)                           public      accountLock;\n', '    mapping (address => uint256)                        public      balances;\n', '    mapping (address => mapping(address => uint256))    public      allowed;\n', '\n', '    event Transfer(address indexed _sender, address indexed _recipient, uint256 _amount);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n', '    event GlobalTransfersLocked(bool indexed _transfersFrozenGlobally);\n', '    event GlobalTransfersUnlocked(bool indexed _transfersThawedGlobally);\n', '    event AccountTransfersFrozen(address indexed _eszHolder, bool indexed _accountTransfersFrozen);\n', '    event AccountTransfersThawed(address indexed _eszHolder, bool indexed _accountTransfersThawed);\n', '\n', '    /**\n', '        @dev Checks to ensure that msg.sender is the owner\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev Checks to ensure that global transfers are not locked\n', '    */\n', '    modifier transfersUnlocked() {\n', '        require(!globalTransferLock);\n', '        _;\n', '    }\n', '\n', '    /**CONSTRUCTOR*/\n', '    function ChatlToken() public{\n', '        owner = msg.sender;\n', '        totalSupply = 100000000000000000000000000;\n', '        balances[msg.sender] = totalSupply;\n', '        name = "Chatl";\n', '        symbol = "CHAL";\n', '        decimals = 18;\n', '        globalTransferLock = false;\n', '    } \n', '\n', '    /**\n', '        @dev Freezes transfers globally\n', '    */\n', '    function freezeGlobalTansfers()\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        globalTransferLock = true;\n', '        emit GlobalTransfersLocked(true);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev Thaws transfers globally\n', '    */\n', '    function thawGlobalTransfers()\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        globalTransferLock = false;\n', '        emit GlobalTransfersUnlocked(true);\n', '    }\n', '\n', '    /**\n', '        @dev Freezes a particular account, preventing them from making transfers\n', '    */\n', '    function freezeAccountTransfers(\n', '        address _eszHolder\n', '    )\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        accountLock[_eszHolder] = true;\n', '        emit AccountTransfersFrozen(_eszHolder, true);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev Thaws a particular account, allowing them to make transfers again\n', '    */\n', '    function thawAccountTransfers(\n', '        address _eszHolder\n', '    )\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        accountLock[_eszHolder] = false;\n', '        emit AccountTransfersThawed(_eszHolder, true);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev Used to transfers tokens\n', '    */\n', '    function transfer(\n', '        address _recipient,\n', '        uint256 _amount\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(accountLock[msg.sender] == false);\n', '        require(transferCheck(msg.sender, _recipient, _amount));\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_recipient] = balances[_recipient].add(_amount);\n', '        emit Transfer(msg.sender, _recipient, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev Used to transfers tokens to someone on behalf of the owner account. Must be approved\n', '    */\n', '    function transferFrom(\n', '        address _owner,\n', '        address _recipient,\n', '        uint256 _amount\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(accountLock[_owner] == false);\n', '        require(allowed[_owner][msg.sender] >= _amount);\n', '        require(transferCheck(_owner, _recipient, _amount));\n', '        allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_amount);\n', '        balances[_owner] = balances[_owner].sub(_amount);\n', '        balances[_recipient] = balances[_recipient].add(_amount);\n', '        emit Transfer(_owner, _recipient, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev Used to approve another account to spend on your behalf\n', '    */\n', '    function approve(\n', '        address _spender,\n', '        uint256 _amount\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /** INTERNALS */\n', '\n', '    /**\n', '        @dev Does a sanity check of the parameters in a transfer, makes sure transfers are allowed\n', '    */\n', '    function transferCheck(\n', '        address _sender,\n', '        address _recipient,\n', '        uint256 _amount\n', '    )\n', '        internal\n', '        view\n', '        transfersUnlocked\n', '        returns (bool)\n', '    {\n', '        require(_amount > 0);\n', '        require(balances[_sender] >= _amount);\n', '        require(balances[_sender].sub(_amount) >= 0);\n', '        require(balances[_recipient].add(_amount) > balances[_recipient]);\n', '        return true;\n', '    }\n', '\n', '    /** GETTERS */\n', '    \n', '    /**\n', '        @dev Retrieves total supply\n', '    */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '        @dev Retrieves the balance of an ESZ holder\n', '    */\n', '    function balanceOf(\n', '        address _eszHolder\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return balances[_eszHolder];\n', '    }\n', '\n', '    /**\n', '        @dev Retrieves the balance of spender for owner\n', '    */\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '}']