['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Finalizable\n', ' * @dev Base contract to finalize some features\n', ' */\n', 'contract Finalizable is Ownable {\n', '    event Finish();\n', '\n', '    bool public finalized = false;\n', '\n', '    function finalize() public onlyOwner {\n', '        finalized = true;\n', '    }\n', '\n', '    modifier notFinalized() {\n', '        require(!finalized);\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Part of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract IToken {\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Token Receivable\n', ' * @dev Support transfer of ERC20 tokens out of this contract&#39;s address\n', ' * @dev Even if we don&#39;t intend for people to send them here, somebody will\n', ' */\n', 'contract TokenReceivable is Ownable {\n', '    event logTokenTransfer(address token, address to, uint256 amount);\n', '\n', '    function claimTokens(address _token, address _to) public onlyOwner returns (bool) {\n', '        IToken token = IToken(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        if (token.transfer(_to, balance)) {\n', '            logTokenTransfer(_token, _to, balance);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}\n', '\n', 'contract EventDefinitions {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Mint(address indexed to, uint256 amount);\n', '    event Burn(address indexed burner, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract Token is Finalizable, TokenReceivable, EventDefinitions {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "FairWin Token";\n', '    uint8 public decimals = 8;\n', '    string public symbol = "FWIN";\n', '\n', '    Controller controller;\n', '\n', '    // message of the day\n', '    string public motd;\n', '\n', '    function setController(address _controller) public onlyOwner notFinalized {\n', '        controller = Controller(_controller);\n', '    }\n', '\n', '    modifier onlyController() {\n', '        require(msg.sender == address(controller));\n', '        _;\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint256 numwords) {\n', '        assert(msg.data.length >= numwords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return controller.balanceOf(_owner);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return controller.totalSupply();\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public\n', '    onlyPayloadSize(2)\n', '    returns (bool success) {\n', '        success = controller.transfer(msg.sender, _to, _value);\n', '        if (success) {\n', '            Transfer(msg.sender, _to, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '    onlyPayloadSize(3)\n', '    returns (bool success) {\n', '        success = controller.transferFrom(msg.sender, _from, _to, _value);\n', '        if (success) {\n', '            Transfer(_from, _to, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '    onlyPayloadSize(2)\n', '    returns (bool success) {\n', '        //promote safe user behavior\n', '        require(controller.allowance(msg.sender, _spender) == 0);\n', '\n', '        success = controller.approve(msg.sender, _spender, _value);\n', '        if (success) {\n', '            Approval(msg.sender, _spender, _value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint256 _addedValue) public\n', '    onlyPayloadSize(2)\n', '    returns (bool success) {\n', '        success = controller.increaseApproval(msg.sender, _spender, _addedValue);\n', '        if (success) {\n', '            uint256 newValue = controller.allowance(msg.sender, _spender);\n', '            Approval(msg.sender, _spender, newValue);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public\n', '    onlyPayloadSize(2)\n', '    returns (bool success) {\n', '        success = controller.decreaseApproval(msg.sender, _spender, _subtractedValue);\n', '        if (success) {\n', '            uint newValue = controller.allowance(msg.sender, _spender);\n', '            Approval(msg.sender, _spender, newValue);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return controller.allowance(_owner, _spender);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _amount The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _amount) public\n', '    onlyPayloadSize(1)\n', '    {\n', '        bool success = controller.burn(msg.sender, _amount);\n', '        if (success) {\n', '            Burn(msg.sender, _amount);\n', '        }\n', '    }\n', '\n', '    function controllerTransfer(address _from, address _to, uint256 _value) public onlyController {\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function controllerApprove(address _owner, address _spender, uint256 _value) public onlyController {\n', '        Approval(_owner, _spender, _value);\n', '    }\n', '\n', '    function controllerBurn(address _burner, uint256 _value) public onlyController {\n', '        Burn(_burner, _value);\n', '    }\n', '\n', '    function controllerMint(address _to, uint256 _value) public onlyController {\n', '        Mint(_to, _value);\n', '    }\n', '\n', '    event Motd(string message);\n', '\n', '    function setMotd(string _motd) public onlyOwner {\n', '        motd = _motd;\n', '        Motd(_motd);\n', '    }\n', '}\n', '\n', 'contract Controller is Finalizable {\n', '\n', '    Ledger public ledger;\n', '    Token public token;\n', '\n', '    function setToken(address _token) public onlyOwner {\n', '        token = Token(_token);\n', '    }\n', '\n', '    function setLedger(address _ledger) public onlyOwner {\n', '        ledger = Ledger(_ledger);\n', '    }\n', '\n', '    modifier onlyToken() {\n', '        require(msg.sender == address(token));\n', '        _;\n', '    }\n', '\n', '    modifier onlyLedger() {\n', '        require(msg.sender == address(ledger));\n', '        _;\n', '    }\n', '\n', '    function totalSupply() public onlyToken view returns (uint256) {\n', '        return ledger.totalSupply();\n', '    }\n', '\n', '    function balanceOf(address _a) public onlyToken view returns (uint256) {\n', '        return ledger.balanceOf(_a);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public onlyToken view returns (uint256) {\n', '        return ledger.allowance(_owner, _spender);\n', '    }\n', '\n', '    function transfer(address _from, address _to, uint256 _value) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _spender, address _from, address _to, uint256 _value) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.transferFrom(_spender, _from, _to, _value);\n', '    }\n', '\n', '    function burn(address _owner, uint256 _amount) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.burn(_owner, _amount);\n', '    }\n', '\n', '    function approve(address _owner, address _spender, uint256 _value) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.approve(_owner, _spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _owner, address _spender, uint256 _addedValue) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.increaseApproval(_owner, _spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _owner, address _spender, uint256 _subtractedValue) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.decreaseApproval(_owner, _spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract Ledger is Finalizable {\n', '    using SafeMath for uint256;\n', '\n', '    address public controller;\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    uint256 totalSupply_;\n', '    bool public mintingFinished = false;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    function setController(address _controller) public onlyOwner notFinalized {\n', '        controller = _controller;\n', '    }\n', '\n', '    modifier onlyController() {\n', '        require(msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function finishMinting() public onlyOwner canMint {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _from msg.sender from controller.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _from, address _to, uint256 _value) public onlyController returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _spender, address _from, address _to, uint256 _value) public onlyController returns (bool) {\n', '        uint256 allow = allowed[_from][_spender];\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allow);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][_spender] = allow.sub(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _owner, address _spender, uint256 _value) public onlyController returns (bool) {\n', '        //require user to set to zero before resetting to nonzero\n', '        if ((_value != 0) && (allowed[_owner][_spender] != 0)) {\n', '            return false;\n', '        }\n', '\n', '        allowed[_owner][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _owner, address _spender, uint256 _addedValue) public onlyController returns (bool) {\n', '        allowed[_owner][_spender] = allowed[_owner][_spender].add(_addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _owner, address _spender, uint256 _subtractedValue) public onlyController returns (bool) {\n', '        uint256 oldValue = allowed[_owner][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[_owner][_spender] = 0;\n', '        } else {\n', '            allowed[_owner][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _amount The amount of token to be burned.\n', '     */\n', '    function burn(address _burner, uint256 _amount) public onlyController returns (bool) {\n', '        require(balances[_burner] >= _amount);\n', '        // no need to require _amount <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        balances[_burner] = balances[_burner].sub(_amount);\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) public canMint returns (bool) {\n', '        require(msg.sender == controller || msg.sender == owner);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Finalizable\n', ' * @dev Base contract to finalize some features\n', ' */\n', 'contract Finalizable is Ownable {\n', '    event Finish();\n', '\n', '    bool public finalized = false;\n', '\n', '    function finalize() public onlyOwner {\n', '        finalized = true;\n', '    }\n', '\n', '    modifier notFinalized() {\n', '        require(!finalized);\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Part of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract IToken {\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Token Receivable\n', " * @dev Support transfer of ERC20 tokens out of this contract's address\n", " * @dev Even if we don't intend for people to send them here, somebody will\n", ' */\n', 'contract TokenReceivable is Ownable {\n', '    event logTokenTransfer(address token, address to, uint256 amount);\n', '\n', '    function claimTokens(address _token, address _to) public onlyOwner returns (bool) {\n', '        IToken token = IToken(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        if (token.transfer(_to, balance)) {\n', '            logTokenTransfer(_token, _to, balance);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}\n', '\n', 'contract EventDefinitions {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Mint(address indexed to, uint256 amount);\n', '    event Burn(address indexed burner, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract Token is Finalizable, TokenReceivable, EventDefinitions {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "FairWin Token";\n', '    uint8 public decimals = 8;\n', '    string public symbol = "FWIN";\n', '\n', '    Controller controller;\n', '\n', '    // message of the day\n', '    string public motd;\n', '\n', '    function setController(address _controller) public onlyOwner notFinalized {\n', '        controller = Controller(_controller);\n', '    }\n', '\n', '    modifier onlyController() {\n', '        require(msg.sender == address(controller));\n', '        _;\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint256 numwords) {\n', '        assert(msg.data.length >= numwords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return controller.balanceOf(_owner);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return controller.totalSupply();\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public\n', '    onlyPayloadSize(2)\n', '    returns (bool success) {\n', '        success = controller.transfer(msg.sender, _to, _value);\n', '        if (success) {\n', '            Transfer(msg.sender, _to, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '    onlyPayloadSize(3)\n', '    returns (bool success) {\n', '        success = controller.transferFrom(msg.sender, _from, _to, _value);\n', '        if (success) {\n', '            Transfer(_from, _to, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '    onlyPayloadSize(2)\n', '    returns (bool success) {\n', '        //promote safe user behavior\n', '        require(controller.allowance(msg.sender, _spender) == 0);\n', '\n', '        success = controller.approve(msg.sender, _spender, _value);\n', '        if (success) {\n', '            Approval(msg.sender, _spender, _value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint256 _addedValue) public\n', '    onlyPayloadSize(2)\n', '    returns (bool success) {\n', '        success = controller.increaseApproval(msg.sender, _spender, _addedValue);\n', '        if (success) {\n', '            uint256 newValue = controller.allowance(msg.sender, _spender);\n', '            Approval(msg.sender, _spender, newValue);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public\n', '    onlyPayloadSize(2)\n', '    returns (bool success) {\n', '        success = controller.decreaseApproval(msg.sender, _spender, _subtractedValue);\n', '        if (success) {\n', '            uint newValue = controller.allowance(msg.sender, _spender);\n', '            Approval(msg.sender, _spender, newValue);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return controller.allowance(_owner, _spender);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _amount The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _amount) public\n', '    onlyPayloadSize(1)\n', '    {\n', '        bool success = controller.burn(msg.sender, _amount);\n', '        if (success) {\n', '            Burn(msg.sender, _amount);\n', '        }\n', '    }\n', '\n', '    function controllerTransfer(address _from, address _to, uint256 _value) public onlyController {\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function controllerApprove(address _owner, address _spender, uint256 _value) public onlyController {\n', '        Approval(_owner, _spender, _value);\n', '    }\n', '\n', '    function controllerBurn(address _burner, uint256 _value) public onlyController {\n', '        Burn(_burner, _value);\n', '    }\n', '\n', '    function controllerMint(address _to, uint256 _value) public onlyController {\n', '        Mint(_to, _value);\n', '    }\n', '\n', '    event Motd(string message);\n', '\n', '    function setMotd(string _motd) public onlyOwner {\n', '        motd = _motd;\n', '        Motd(_motd);\n', '    }\n', '}\n', '\n', 'contract Controller is Finalizable {\n', '\n', '    Ledger public ledger;\n', '    Token public token;\n', '\n', '    function setToken(address _token) public onlyOwner {\n', '        token = Token(_token);\n', '    }\n', '\n', '    function setLedger(address _ledger) public onlyOwner {\n', '        ledger = Ledger(_ledger);\n', '    }\n', '\n', '    modifier onlyToken() {\n', '        require(msg.sender == address(token));\n', '        _;\n', '    }\n', '\n', '    modifier onlyLedger() {\n', '        require(msg.sender == address(ledger));\n', '        _;\n', '    }\n', '\n', '    function totalSupply() public onlyToken view returns (uint256) {\n', '        return ledger.totalSupply();\n', '    }\n', '\n', '    function balanceOf(address _a) public onlyToken view returns (uint256) {\n', '        return ledger.balanceOf(_a);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public onlyToken view returns (uint256) {\n', '        return ledger.allowance(_owner, _spender);\n', '    }\n', '\n', '    function transfer(address _from, address _to, uint256 _value) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _spender, address _from, address _to, uint256 _value) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.transferFrom(_spender, _from, _to, _value);\n', '    }\n', '\n', '    function burn(address _owner, uint256 _amount) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.burn(_owner, _amount);\n', '    }\n', '\n', '    function approve(address _owner, address _spender, uint256 _value) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.approve(_owner, _spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _owner, address _spender, uint256 _addedValue) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.increaseApproval(_owner, _spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _owner, address _spender, uint256 _subtractedValue) public\n', '    onlyToken\n', '    returns (bool) {\n', '        return ledger.decreaseApproval(_owner, _spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract Ledger is Finalizable {\n', '    using SafeMath for uint256;\n', '\n', '    address public controller;\n', '    mapping(address => uint256) internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    uint256 totalSupply_;\n', '    bool public mintingFinished = false;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    function setController(address _controller) public onlyOwner notFinalized {\n', '        controller = _controller;\n', '    }\n', '\n', '    modifier onlyController() {\n', '        require(msg.sender == controller);\n', '        _;\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function finishMinting() public onlyOwner canMint {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _from msg.sender from controller.\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _from, address _to, uint256 _value) public onlyController returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _spender, address _from, address _to, uint256 _value) public onlyController returns (bool) {\n', '        uint256 allow = allowed[_from][_spender];\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allow);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][_spender] = allow.sub(_value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _owner, address _spender, uint256 _value) public onlyController returns (bool) {\n', '        //require user to set to zero before resetting to nonzero\n', '        if ((_value != 0) && (allowed[_owner][_spender] != 0)) {\n', '            return false;\n', '        }\n', '\n', '        allowed[_owner][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _owner, address _spender, uint256 _addedValue) public onlyController returns (bool) {\n', '        allowed[_owner][_spender] = allowed[_owner][_spender].add(_addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _owner, address _spender, uint256 _subtractedValue) public onlyController returns (bool) {\n', '        uint256 oldValue = allowed[_owner][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[_owner][_spender] = 0;\n', '        } else {\n', '            allowed[_owner][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _amount The amount of token to be burned.\n', '     */\n', '    function burn(address _burner, uint256 _amount) public onlyController returns (bool) {\n', '        require(balances[_burner] >= _amount);\n', '        // no need to require _amount <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[_burner] = balances[_burner].sub(_amount);\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) public canMint returns (bool) {\n', '        require(msg.sender == controller || msg.sender == owner);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        return true;\n', '    }\n', '}']
