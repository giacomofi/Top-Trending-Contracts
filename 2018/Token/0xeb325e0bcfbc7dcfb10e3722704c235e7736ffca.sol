['pragma solidity ^0.4.8;\n', 'contract tokenRecipient { \n', '\t//获得批准\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \n', '}\n', '\n', 'contract QZG001TOKEN{\n', '   \n', '    string public standard = &#39;QZG001TOKEN 0.1&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '   \n', '    mapping (address => uint256) public balanceOf;\n', '  \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '   \n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    \n', '    function QZG001TOKEN() public {\n', '        balanceOf[msg.sender] = 1000000 * 1000000000000000000;             \n', '        totalSupply =  1000000 * 1000000000000000000;                       \n', '        name = "QZC001";                                   // Set the name \tfor display purposes\n', '        symbol = "QZGC";                               // Set the symbol for display \tpurposes\n', '        decimals = 18;                            // Amount of decimals for display \tpurposes\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public {\n', '       \n', '         require (_to != 0x0);\n', '         require(balanceOf[msg.sender] >= _value);\n', '         require(balanceOf[_to] + _value > balanceOf[_to]);\n', '    \n', '        balanceOf[msg.sender] -= _value;                    \n', '        balanceOf[_to] += _value;                           \n', '        Transfer(msg.sender, _to, _value);            \n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf  */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        \n', '     \n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx  */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public \n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* A contract attempts to get the coins  */\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '    returns (bool success) {\n', '       \n', '    \n', '        require (_to != 0x0);\n', '         require(balanceOf[_from] >= _value);\n', '         require(balanceOf[_to] + _value > balanceOf[_to]);\n', '         require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;                           // Subtract from the sender\n', '        balanceOf[_to] += _value;                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '       \n', '       require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '       \n', '     \n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        totalSupply -= _value;                               // Updates totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.8;\n', 'contract tokenRecipient { \n', '\t//获得批准\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; \n', '}\n', '\n', 'contract QZG001TOKEN{\n', '   \n', "    string public standard = 'QZG001TOKEN 0.1';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '   \n', '    mapping (address => uint256) public balanceOf;\n', '  \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '   \n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    \n', '    function QZG001TOKEN() public {\n', '        balanceOf[msg.sender] = 1000000 * 1000000000000000000;             \n', '        totalSupply =  1000000 * 1000000000000000000;                       \n', '        name = "QZC001";                                   // Set the name \tfor display purposes\n', '        symbol = "QZGC";                               // Set the symbol for display \tpurposes\n', '        decimals = 18;                            // Amount of decimals for display \tpurposes\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) public {\n', '       \n', '         require (_to != 0x0);\n', '         require(balanceOf[msg.sender] >= _value);\n', '         require(balanceOf[_to] + _value > balanceOf[_to]);\n', '    \n', '        balanceOf[msg.sender] -= _value;                    \n', '        balanceOf[_to] += _value;                           \n', '        Transfer(msg.sender, _to, _value);            \n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf  */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        \n', '     \n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx  */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public \n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* A contract attempts to get the coins  */\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '    returns (bool success) {\n', '       \n', '    \n', '        require (_to != 0x0);\n', '         require(balanceOf[_from] >= _value);\n', '         require(balanceOf[_to] + _value > balanceOf[_to]);\n', '         require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;                           // Subtract from the sender\n', '        balanceOf[_to] += _value;                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '       \n', '       require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '       \n', '     \n', '        require(balanceOf[_from] >= _value);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        totalSupply -= _value;                               // Updates totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']
