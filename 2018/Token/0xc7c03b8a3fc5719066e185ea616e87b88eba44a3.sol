['contract SafeMath {\n', '    \n', '    uint256 constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        require(x <= MAX_UINT256 - y);\n', '        return x + y;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        require(x >= y);\n', '        return x - y;\n', '    }\n', '\n', '    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        if (y == 0) {\n', '            return 0;\n', '        }\n', '        require(x <= (MAX_UINT256 / y));\n', '        return x * y;\n', '    }\n', '}\n', 'contract ERC20TokenInterface {\n', '    function totalSupply() public constant returns (uint256 _totalSupply);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract tokenRecipientInterface {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '}\n', '\n', 'contract MintableTokenInterface {\n', '    function mint(address _to, uint256 _amount) public;\n', '}\n', 'contract ReentrancyHandlingContract{\n', '\n', '    bool locked;\n', '\n', '    modifier noReentrancy() {\n', '        require(!locked);\n', '        locked = true;\n', '        _;\n', '        locked = false;\n', '    }\n', '}\n', 'contract KycContractInterface {\n', '    function isAddressVerified(address _address) public view returns (bool);\n', '}\n', 'contract MintingContractInterface {\n', '\n', '    address public crowdsaleContractAddress;\n', '    address public tokenContractAddress;\n', '    uint public tokenTotalSupply;\n', '\n', '    event MintMade(address _to, uint _ethAmount, uint _tokensMinted, string _message);\n', '\n', '    function doPresaleMinting(address _destination, uint _tokensAmount, uint _ethAmount) public;\n', '    function doCrowdsaleMinting(address _destination, uint _tokensAmount, uint _ethAmount) public;\n', '    function doTeamMinting(address _destination) public;\n', '    function setTokenContractAddress(address _newAddress) public;\n', '    function setCrowdsaleContractAddress(address _newAddress) public;\n', '    function killContract() public;\n', '}\n', 'contract Lockable is Owned {\n', '\n', '    uint256 public lockedUntilBlock;\n', '\n', '    event ContractLocked(uint256 _untilBlock, string _reason);\n', '\n', '    modifier lockAffected {\n', '        require(block.number > lockedUntilBlock);\n', '        _;\n', '    }\n', '\n', '    function lockFromSelf(uint256 _untilBlock, string _reason) internal {\n', '        lockedUntilBlock = _untilBlock;\n', '        emit ContractLocked(_untilBlock, _reason);\n', '    }\n', '\n', '\n', '    function lockUntil(uint256 _untilBlock, string _reason) onlyOwner public {\n', '        lockedUntilBlock = _untilBlock;\n', '        emit ContractLocked(_untilBlock, _reason);\n', '    }\n', '}\n', '\n', 'contract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {\n', '\n', '    string public standard;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    address public mintingContractAddress;\n', '\n', '    uint256 supply = 0;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '    event Mint(address indexed _to, uint256 _value);\n', '    event Burn(address indexed _from, uint _value);\n', '\n', '    function totalSupply() constant public returns (uint256) {\n', '        return supply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) lockAffected public returns (bool success) {\n', '        require(_to != 0x0 && _to != address(this));\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) lockAffected public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected public returns (bool success) {\n', '        tokenRecipientInterface spender = tokenRecipientInterface(_spender);\n', '        approve(_spender, _value);\n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) lockAffected public returns (bool success) {\n', '        require(_to != 0x0 && _to != address(this));\n', '        balances[_from] = safeSub(balanceOf(_from), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) public {\n', '        require(msg.sender == mintingContractAddress);\n', '        supply = safeAdd(supply, _amount);\n', '        balances[_to] = safeAdd(balances[_to], _amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(0x0, _to, _amount);\n', '    }\n', '\n', '    function burn(uint _amount) public {\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _amount);\n', '        supply = safeSub(supply, _amount);\n', '        emit Burn(msg.sender, _amount);\n', '        emit Transfer(msg.sender, 0x0, _amount);\n', '    }\n', '\n', '    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner public {\n', '        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\n', '    }\n', '\n', '    function killContract() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract EligmaTokenContract is ERC20Token {\n', '\n', '  function EligmaTokenContract() public {\n', '    name = "EligmaToken";\n', '    symbol = "ELI";\n', '    decimals = 18;\n', '    mintingContractAddress = 0xB72Fc3f647C9Bb4FdA13EA2A1Ba9b779EB786770;\n', '    lockFromSelf(5584081, "Lock before crowdsale starts");\n', '  }\n', '}']
['contract SafeMath {\n', '    \n', '    uint256 constant MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        require(x <= MAX_UINT256 - y);\n', '        return x + y;\n', '    }\n', '\n', '    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        require(x >= y);\n', '        return x - y;\n', '    }\n', '\n', '    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        if (y == 0) {\n', '            return 0;\n', '        }\n', '        require(x <= (MAX_UINT256 / y));\n', '        return x * y;\n', '    }\n', '}\n', 'contract ERC20TokenInterface {\n', '    function totalSupply() public constant returns (uint256 _totalSupply);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract tokenRecipientInterface {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '}\n', '\n', 'contract MintableTokenInterface {\n', '    function mint(address _to, uint256 _amount) public;\n', '}\n', 'contract ReentrancyHandlingContract{\n', '\n', '    bool locked;\n', '\n', '    modifier noReentrancy() {\n', '        require(!locked);\n', '        locked = true;\n', '        _;\n', '        locked = false;\n', '    }\n', '}\n', 'contract KycContractInterface {\n', '    function isAddressVerified(address _address) public view returns (bool);\n', '}\n', 'contract MintingContractInterface {\n', '\n', '    address public crowdsaleContractAddress;\n', '    address public tokenContractAddress;\n', '    uint public tokenTotalSupply;\n', '\n', '    event MintMade(address _to, uint _ethAmount, uint _tokensMinted, string _message);\n', '\n', '    function doPresaleMinting(address _destination, uint _tokensAmount, uint _ethAmount) public;\n', '    function doCrowdsaleMinting(address _destination, uint _tokensAmount, uint _ethAmount) public;\n', '    function doTeamMinting(address _destination) public;\n', '    function setTokenContractAddress(address _newAddress) public;\n', '    function setCrowdsaleContractAddress(address _newAddress) public;\n', '    function killContract() public;\n', '}\n', 'contract Lockable is Owned {\n', '\n', '    uint256 public lockedUntilBlock;\n', '\n', '    event ContractLocked(uint256 _untilBlock, string _reason);\n', '\n', '    modifier lockAffected {\n', '        require(block.number > lockedUntilBlock);\n', '        _;\n', '    }\n', '\n', '    function lockFromSelf(uint256 _untilBlock, string _reason) internal {\n', '        lockedUntilBlock = _untilBlock;\n', '        emit ContractLocked(_untilBlock, _reason);\n', '    }\n', '\n', '\n', '    function lockUntil(uint256 _untilBlock, string _reason) onlyOwner public {\n', '        lockedUntilBlock = _untilBlock;\n', '        emit ContractLocked(_untilBlock, _reason);\n', '    }\n', '}\n', '\n', 'contract ERC20Token is ERC20TokenInterface, SafeMath, Owned, Lockable {\n', '\n', '    string public standard;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    address public mintingContractAddress;\n', '\n', '    uint256 supply = 0;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '    event Mint(address indexed _to, uint256 _value);\n', '    event Burn(address indexed _from, uint _value);\n', '\n', '    function totalSupply() constant public returns (uint256) {\n', '        return supply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) lockAffected public returns (bool success) {\n', '        require(_to != 0x0 && _to != address(this));\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) lockAffected public returns (bool success) {\n', '        allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) lockAffected public returns (bool success) {\n', '        tokenRecipientInterface spender = tokenRecipientInterface(_spender);\n', '        approve(_spender, _value);\n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) lockAffected public returns (bool success) {\n', '        require(_to != 0x0 && _to != address(this));\n', '        balances[_from] = safeSub(balanceOf(_from), _value);\n', '        balances[_to] = safeAdd(balanceOf(_to), _value);\n', '        allowances[_from][msg.sender] = safeSub(allowances[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowances[_owner][_spender];\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) public {\n', '        require(msg.sender == mintingContractAddress);\n', '        supply = safeAdd(supply, _amount);\n', '        balances[_to] = safeAdd(balances[_to], _amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(0x0, _to, _amount);\n', '    }\n', '\n', '    function burn(uint _amount) public {\n', '        balances[msg.sender] = safeSub(balanceOf(msg.sender), _amount);\n', '        supply = safeSub(supply, _amount);\n', '        emit Burn(msg.sender, _amount);\n', '        emit Transfer(msg.sender, 0x0, _amount);\n', '    }\n', '\n', '    function salvageTokensFromContract(address _tokenAddress, address _to, uint _amount) onlyOwner public {\n', '        ERC20TokenInterface(_tokenAddress).transfer(_to, _amount);\n', '    }\n', '\n', '    function killContract() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract EligmaTokenContract is ERC20Token {\n', '\n', '  function EligmaTokenContract() public {\n', '    name = "EligmaToken";\n', '    symbol = "ELI";\n', '    decimals = 18;\n', '    mintingContractAddress = 0xB72Fc3f647C9Bb4FdA13EA2A1Ba9b779EB786770;\n', '    lockFromSelf(5584081, "Lock before crowdsale starts");\n', '  }\n', '}']
