['pragma solidity ^ 0.4.21;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract HomeLoansToken is owned {\n', '    using SafeMath\n', '    for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    uint256 public totalSupply;\n', '  \n', '\n', '    /// @dev Fix for the ERC20 short address attack http://vessenes.com/the-erc20-short-address-attack-explained/\n', '    /// @param size payload size\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    /* This creates an array with all balances */\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '\n', '\n', '    function HomeLoansToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint decimalUnits,\n', '        string tokenSymbol\n', '    ) {\n', '        owner = msg.sender;\n', '        totalSupply = initialSupply.mul(10 ** decimalUnits);\n', '        balanceOf[msg.sender] = totalSupply; // Give the creator half initial tokens\n', '        name = tokenName; // Set the name for display purposes\n', '        symbol = tokenSymbol; // Set the symbol for display purposes\n', '        decimals = decimalUnits; // Amount of decimals for display purposes\n', '    }\n', '\n', '\n', '    /// @dev Tranfer tokens to address\n', '    /// @param _to dest address\n', '    /// @param _value tokens amount\n', '    /// @return transfer result\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns(bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balanceOf[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @dev Tranfer tokens from one address to other\n', '    /// @param _from source address\n', '    /// @param _to dest address\n', '    /// @param _value tokens amount\n', '    /// @return transfer result\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(2 * 32) returns(bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balanceOf[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Destroy Tokens\n', '    ///@param destroyAmount Count Token\n', '    function destroyToken(uint256 destroyAmount) onlyOwner {\n', '        destroyAmount = destroyAmount.mul(10 ** decimals);\n', '        balanceOf[owner] = balanceOf[owner].sub(destroyAmount);\n', '        totalSupply = totalSupply.sub(destroyAmount);\n', '\n', '    }\n', '\n', '    /// @dev Approve transfer\n', '    /// @param _spender holder address\n', '    /// @param _value tokens amount\n', '    /// @return result\n', '    function approve(address _spender, uint _value) returns(bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Token allowance\n', '    /// @param _owner holder address\n', '    /// @param _spender spender address\n', '    /// @return remain amount\n', '    function allowance(address _owner, address _spender) constant returns(uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @dev Withdraw all owner\n', '    function withdraw() onlyOwner {\n', '        msg.sender.transfer(this.balance);\n', '    }\n', '}']
['pragma solidity ^ 0.4.21;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract HomeLoansToken is owned {\n', '    using SafeMath\n', '    for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    uint256 public totalSupply;\n', '  \n', '\n', '    /// @dev Fix for the ERC20 short address attack http://vessenes.com/the-erc20-short-address-attack-explained/\n', '    /// @param size payload size\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    /* This creates an array with all balances */\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '\n', '\n', '    function HomeLoansToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint decimalUnits,\n', '        string tokenSymbol\n', '    ) {\n', '        owner = msg.sender;\n', '        totalSupply = initialSupply.mul(10 ** decimalUnits);\n', '        balanceOf[msg.sender] = totalSupply; // Give the creator half initial tokens\n', '        name = tokenName; // Set the name for display purposes\n', '        symbol = tokenSymbol; // Set the symbol for display purposes\n', '        decimals = decimalUnits; // Amount of decimals for display purposes\n', '    }\n', '\n', '\n', '    /// @dev Tranfer tokens to address\n', '    /// @param _to dest address\n', '    /// @param _value tokens amount\n', '    /// @return transfer result\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns(bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balanceOf[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @dev Tranfer tokens from one address to other\n', '    /// @param _from source address\n', '    /// @param _to dest address\n', '    /// @param _value tokens amount\n', '    /// @return transfer result\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(2 * 32) returns(bool success) {\n', '        require(_to != address(0));\n', '        require(_value <= balanceOf[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Destroy Tokens\n', '    ///@param destroyAmount Count Token\n', '    function destroyToken(uint256 destroyAmount) onlyOwner {\n', '        destroyAmount = destroyAmount.mul(10 ** decimals);\n', '        balanceOf[owner] = balanceOf[owner].sub(destroyAmount);\n', '        totalSupply = totalSupply.sub(destroyAmount);\n', '\n', '    }\n', '\n', '    /// @dev Approve transfer\n', '    /// @param _spender holder address\n', '    /// @param _value tokens amount\n', '    /// @return result\n', '    function approve(address _spender, uint _value) returns(bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Token allowance\n', '    /// @param _owner holder address\n', '    /// @param _spender spender address\n', '    /// @return remain amount\n', '    function allowance(address _owner, address _spender) constant returns(uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @dev Withdraw all owner\n', '    function withdraw() onlyOwner {\n', '        msg.sender.transfer(this.balance);\n', '    }\n', '}']
