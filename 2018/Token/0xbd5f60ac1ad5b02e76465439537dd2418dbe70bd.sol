['pragma solidity ^0.4.19;\n', '\n', 'interface ERC20Interface {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface ERC223Interface {\n', '    function transfer(address to, uint value, bytes data) public;\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'contract ERC223ReceivingContract { \n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Authored is Owned, ERC20Interface, ERC223Interface {\n', '  using SafeMath for uint;\n', '     \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint) public lockedTime;\n', '    \n', '    event FrozenFunds(address target, bool frozen);\n', '    event LockedTime(address target, uint _time);\n', '    \n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    event ContractFrozen(bool status);\n', '    \n', '    bool public isContractFrozen = false;\n', '\n', '    function Authored(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply * 10 ** uint256(decimals);\n', '    }\n', '\n', '    function name()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals()\n', '        public\n', '        view\n', '        returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '   function transfer(address _to, uint256 _value) public returns (bool) {\n', '     require(!isContractFrozen);\n', '     require(!frozenAccount[msg.sender]);\n', '     require(!frozenAccount[_to]);\n', '     require(now > lockedTime[msg.sender]);\n', '     \n', '     require(_to != address(0));\n', '     require(_value <= balances[msg.sender]);\n', '     balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     Transfer(msg.sender, _to, _value);\n', '     return true;\n', '   }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '     require(!isContractFrozen);\n', '     require(!frozenAccount[_from]);\n', '     require(!frozenAccount[_to]);\n', '     require(now > lockedTime[_from]);\n', '     \n', '     require(_to != address(0));\n', '     require(_value <= balances[_from]);\n', '     require(_value <= allowed[_from][msg.sender]);\n', '\n', '     balances[_from] = SafeMath.sub(balances[_from], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '     Transfer(_from, _to, _value);\n', '     return true;\n', '   }\n', '\n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '     allowed[msg.sender][_spender] = _value;\n', '     Approval(msg.sender, _spender, _value);\n', '     return true;\n', '   }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '     return allowed[_owner][_spender];\n', '   }\n', '\n', '   function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '     allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '     uint oldValue = allowed[msg.sender][_spender];\n', '     if (_subtractedValue > oldValue) {\n', '       allowed[msg.sender][_spender] = 0;\n', '     } else {\n', '       allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n', '    }\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) public {\n', '        require(!isContractFrozen);\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!frozenAccount[_to]);\n', '        require(now > lockedTime[msg.sender]);\n', '     \n', '        require(_value > 0 );\n', '        if(isContract(_to)) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function isContract(address _addr) private returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            length := extcodesize(_addr)\n', '      }\n', '      return (length>0);\n', '    }\n', '    \n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    function lockTime(address target, uint _time) onlyOwner public {\n', '        lockedTime[target] = _time;\n', '        LockedTime(target, _time);\n', '    }\n', '\n', '    function currentTime()\n', '        public\n', '        view\n', '        returns (uint256) {\n', '        return now;\n', '    }\n', '    \n', '    function setContractFrozen(bool status) onlyOwner public {\n', '        isContractFrozen = status;\n', '        ContractFrozen(status);\n', '    }\n', '    \n', '    function generate(uint256 _value) onlyOwner public {\n', '        _totalSupply = SafeMath.add(_totalSupply, _value * 10 ** uint256(_decimals));\n', '        balances[msg.sender] = SafeMath.add(balances[msg.sender], _value * 10 ** uint256(_decimals));\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '        _totalSupply = SafeMath.sub(_totalSupply, _value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = SafeMath.sub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '        _totalSupply = SafeMath.sub(_totalSupply, _value);\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'interface ERC20Interface {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface ERC223Interface {\n', '    function transfer(address to, uint value, bytes data) public;\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'contract ERC223ReceivingContract { \n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Authored is Owned, ERC20Interface, ERC223Interface {\n', '  using SafeMath for uint;\n', '     \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint) public lockedTime;\n', '    \n', '    event FrozenFunds(address target, bool frozen);\n', '    event LockedTime(address target, uint _time);\n', '    \n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    event ContractFrozen(bool status);\n', '    \n', '    bool public isContractFrozen = false;\n', '\n', '    function Authored(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply * 10 ** uint256(decimals);\n', '    }\n', '\n', '    function name()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol()\n', '        public\n', '        view\n', '        returns (string) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals()\n', '        public\n', '        view\n', '        returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '   function transfer(address _to, uint256 _value) public returns (bool) {\n', '     require(!isContractFrozen);\n', '     require(!frozenAccount[msg.sender]);\n', '     require(!frozenAccount[_to]);\n', '     require(now > lockedTime[msg.sender]);\n', '     \n', '     require(_to != address(0));\n', '     require(_value <= balances[msg.sender]);\n', '     balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     Transfer(msg.sender, _to, _value);\n', '     return true;\n', '   }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '     require(!isContractFrozen);\n', '     require(!frozenAccount[_from]);\n', '     require(!frozenAccount[_to]);\n', '     require(now > lockedTime[_from]);\n', '     \n', '     require(_to != address(0));\n', '     require(_value <= balances[_from]);\n', '     require(_value <= allowed[_from][msg.sender]);\n', '\n', '     balances[_from] = SafeMath.sub(balances[_from], _value);\n', '     balances[_to] = SafeMath.add(balances[_to], _value);\n', '     allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '     Transfer(_from, _to, _value);\n', '     return true;\n', '   }\n', '\n', '   function approve(address _spender, uint256 _value) public returns (bool) {\n', '     allowed[msg.sender][_spender] = _value;\n', '     Approval(msg.sender, _spender, _value);\n', '     return true;\n', '   }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '     return allowed[_owner][_spender];\n', '   }\n', '\n', '   function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '     allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '     uint oldValue = allowed[msg.sender][_spender];\n', '     if (_subtractedValue > oldValue) {\n', '       allowed[msg.sender][_spender] = 0;\n', '     } else {\n', '       allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n', '    }\n', '     Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '     return true;\n', '   }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) public {\n', '        require(!isContractFrozen);\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!frozenAccount[_to]);\n', '        require(now > lockedTime[msg.sender]);\n', '     \n', '        require(_value > 0 );\n', '        if(isContract(_to)) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function isContract(address _addr) private returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            length := extcodesize(_addr)\n', '      }\n', '      return (length>0);\n', '    }\n', '    \n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    function lockTime(address target, uint _time) onlyOwner public {\n', '        lockedTime[target] = _time;\n', '        LockedTime(target, _time);\n', '    }\n', '\n', '    function currentTime()\n', '        public\n', '        view\n', '        returns (uint256) {\n', '        return now;\n', '    }\n', '    \n', '    function setContractFrozen(bool status) onlyOwner public {\n', '        isContractFrozen = status;\n', '        ContractFrozen(status);\n', '    }\n', '    \n', '    function generate(uint256 _value) onlyOwner public {\n', '        _totalSupply = SafeMath.add(_totalSupply, _value * 10 ** uint256(_decimals));\n', '        balances[msg.sender] = SafeMath.add(balances[msg.sender], _value * 10 ** uint256(_decimals));\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '        _totalSupply = SafeMath.sub(_totalSupply, _value);\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = SafeMath.sub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '        _totalSupply = SafeMath.sub(_totalSupply, _value);\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
