['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address owner) constant public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * TorusCoin pre-sell contract.\n', ' *\n', ' */\n', 'contract TorusCoin is StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "Torus";\n', '    string public symbol = "TORUS";\n', '    uint256 public decimals = 18;\n', '\n', '    uint256 public startDatetime;\n', '    uint256 public endDatetime;\n', '\n', '    // Initial founder address (set in constructor)\n', '    // All deposited ETH will be instantly forwarded to this address.\n', '    address public founder;\n', '\n', '    // administrator address\n', '    address public admin;\n', '\n', '    uint256 public coinAllocation = 700 * 10**8 * 10**decimals; //70000M tokens supply for pre-sell\n', '    uint256 public founderAllocation = 300 * 10**8 * 10**decimals; //30000M of token supply allocated for the team allocation\n', '\n', '    bool public founderAllocated = false; //this will change to true when the founder fund is allocated\n', '\n', '    uint256 public saleTokenSupply = 0; //this will keep track of the token supply created during the pre-sell\n', '    uint256 public salesVolume = 0; //this will keep track of the Ether raised during the pre-sell\n', '\n', '    bool public halted = false; //the admin address can set this to true to halt the pre-sell due to emergency\n', '\n', '    event Buy(address sender, address recipient, uint256 eth, uint256 tokens);\n', '    event AllocateFounderTokens(address sender, address founder, uint256 tokens);\n', '    event AllocateInflatedTokens(address sender, address holder, uint256 tokens);\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier duringCrowdSale {\n', '        require(block.timestamp >= startDatetime && block.timestamp <= endDatetime);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *\n', '     * Integer value representing the number of seconds since 1 January 1970 00:00:00 UTC\n', '     */\n', '    function TorusCoin(uint256 startDatetimeInSeconds, address founderWallet) public {\n', '\n', '        admin = msg.sender;\n', '        founder = founderWallet;\n', '\n', '        startDatetime = startDatetimeInSeconds;\n', '        endDatetime = startDatetime + 16 * 1 days;\n', '    }\n', '\n', '    /**\n', '     * allow anyone sends funds to the contract\n', '     */\n', '    function() public payable {\n', '        buy(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Main token buy function.\n', '     * Buy for the sender itself or buy on the behalf of somebody else (third party address).\n', '     */\n', '    function buy(address recipient) payable public duringCrowdSale  {\n', '\n', '        require(!halted);\n', '        require(msg.value >= 0.01 ether);\n', '\n', '        uint256 tokens = msg.value.mul(35e4);\n', '\n', '        require(tokens > 0);\n', '\n', '        require(saleTokenSupply.add(tokens)<=coinAllocation );\n', '\n', '        balances[recipient] = balances[recipient].add(tokens);\n', '\n', '        totalSupply_ = totalSupply_.add(tokens);\n', '        saleTokenSupply = saleTokenSupply.add(tokens);\n', '        salesVolume = salesVolume.add(msg.value);\n', '\n', '        if (!founder.call.value(msg.value)()) revert(); //immediately send Ether to founder address\n', '\n', '        Buy(msg.sender, recipient, msg.value, tokens);\n', '    }\n', '\n', '    /**\n', '     * Set up founder address token balance.\n', '     */\n', '    function allocateFounderTokens() public onlyAdmin {\n', '        require( now > endDatetime );\n', '        require(!founderAllocated);\n', '\n', '        balances[founder] = balances[founder].add(founderAllocation);\n', '        totalSupply_ = totalSupply_.add(founderAllocation);\n', '        founderAllocated = true;\n', '\n', '        AllocateFounderTokens(msg.sender, founder, founderAllocation);\n', '    }\n', '\n', '    /**\n', '     * Emergency Stop crowdsale.\n', '     */\n', '    function halt() public onlyAdmin {\n', '        halted = true;\n', '    }\n', '\n', '    function unhalt() public onlyAdmin {\n', '        halted = false;\n', '    }\n', '\n', '    /**\n', '     * Change admin address.\n', '     */\n', '    function changeAdmin(address newAdmin) public onlyAdmin  {\n', '        admin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * Change founder address.\n', '     */\n', '    function changeFounder(address newFounder) public onlyAdmin  {\n', '        founder = newFounder;\n', '    }\n', '\n', '     /**\n', '      * Inflation\n', '      */\n', '    function inflate(address holder, uint256 tokens) public onlyAdmin {\n', '        require( now > endDatetime );\n', '        require(saleTokenSupply.add(tokens) <= coinAllocation );\n', '\n', '        balances[holder] = balances[holder].add(tokens);\n', '        saleTokenSupply = saleTokenSupply.add(tokens);\n', '        totalSupply_ = totalSupply_.add(tokens);\n', '\n', '        AllocateInflatedTokens(msg.sender, holder, tokens);\n', '\n', '     }\n', '\n', '    /**\n', '     * withdraw foreign tokens\n', '     */\n', '    function withdrawForeignTokens(address tokenContract) onlyAdmin public returns (bool) {\n', '        ForeignToken token = ForeignToken(tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(admin, amount);\n', '    }\n', '\n', '\n', '}']