['pragma solidity ^0.4.24;\n', '\n', '/******************************************/\n', '/*       Netkiller ADVANCED TOKEN         */\n', '/******************************************/\n', '/* Author netkiller <netkiller@msn.com>   */\n', '/* Home http://www.netkiller.cn           */\n', '/* Version 2018-07-25 - batchTransfer     */\n', '/******************************************/\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract NetkillerAdvancedToken {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    address public owner;\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address indexed target, bool frozen);\n', '\n', '    bool public lock = false;                   // Global lock\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint decimalUnits\n', '    ) public {\n', '        owner = msg.sender;\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol; \n', '        decimals = decimalUnits;\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balances[msg.sender] = totalSupply;                // Give the creator all initial token\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isLock {\n', '        require(!lock);\n', '        _;\n', '    }\n', '    \n', '    function setLock(bool _lock) onlyOwner public returns (bool status){\n', '        lock = _lock;\n', '        return lock;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '    function balanceOf(address _address) view public returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '    \n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint256 _value) isLock internal {\n', '        require (_to != address(0));                        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balances[_from] >= _value);                // Check if the sender has enough\n', '        require (balances[_to] + _value > balances[_to]);   // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balances[_from] = balances[_from].sub(_value);      // Subtract from the sender\n', '        balances[_to] = balances[_to].add(_value);          // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);     // Check allowance\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);                    // Check if the sender has enough\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);    // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balances[_from] >= _value);                                      // Check if the targeted balance is enough\n', '        require(_value <= allowed[_from][msg.sender]);                           // Check allowance\n', '        balances[_from] = balances[_from].sub(_value);                           // Subtract from the targeted balance\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);     // Subtract from the sender&#39;s allowance\n', '        totalSupply = totalSupply.sub(_value);                                   // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Create `_amount` tokens and send it to `_to`\n', '    /// @param _to Address to receive the tokens\n', '    /// @param _amount the amount of tokens it will receive\n', '    function mintToken(address _to, uint256 _amount) onlyOwner public {\n', '        uint256 amount = _amount * 10 ** uint256(decimals);\n', '        totalSupply = totalSupply.add(amount);\n', '        balances[_to] = balances[_to].add(amount);\n', '        emit Transfer(this, _to, amount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function airdrop(address[] _to, uint256 _value) public returns (bool success) {\n', '        for (uint i=0; i<_to.length; i++) {\n', '            _transfer(msg.sender, _to[i], _value);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function batchTransfer(address[] _to, uint256[] _value) public returns (bool success) {\n', '        require(_to.length == _value.length);\n', '\n', '        uint256 amount = 0;\n', '        for(uint n=0;n<_value.length;n++){\n', '            amount += _value[n];\n', '        }\n', '        \n', '        require(amount > 0 && balanceOf(msg.sender) >= amount);\n', '        \n', '        for (uint i=0; i<_to.length; i++) {\n', '            transfer(_to[i], _value[i]);\n', '        }\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/******************************************/\n', '/*       Netkiller ADVANCED TOKEN         */\n', '/******************************************/\n', '/* Author netkiller <netkiller@msn.com>   */\n', '/* Home http://www.netkiller.cn           */\n', '/* Version 2018-07-25 - batchTransfer     */\n', '/******************************************/\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract NetkillerAdvancedToken {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    address public owner;\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '    \n', '    // This creates an array with all balances\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address indexed target, bool frozen);\n', '\n', '    bool public lock = false;                   // Global lock\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint decimalUnits\n', '    ) public {\n', '        owner = msg.sender;\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol; \n', '        decimals = decimalUnits;\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balances[msg.sender] = totalSupply;                // Give the creator all initial token\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isLock {\n', '        require(!lock);\n', '        _;\n', '    }\n', '    \n', '    function setLock(bool _lock) onlyOwner public returns (bool status){\n', '        lock = _lock;\n', '        return lock;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner public {\n', '        if (_newOwner != address(0)) {\n', '            owner = _newOwner;\n', '        }\n', '    }\n', '    function balanceOf(address _address) view public returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '    \n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint256 _value) isLock internal {\n', '        require (_to != address(0));                        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (balances[_from] >= _value);                // Check if the sender has enough\n', '        require (balances[_to] + _value > balances[_to]);   // Check for overflows\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        balances[_from] = balances[_from].sub(_value);      // Subtract from the sender\n', '        balances[_to] = balances[_to].add(_value);          // Add the same to the recipient\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);     // Check allowance\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);                    // Check if the sender has enough\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);    // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(balances[_from] >= _value);                                      // Check if the targeted balance is enough\n', '        require(_value <= allowed[_from][msg.sender]);                           // Check allowance\n', '        balances[_from] = balances[_from].sub(_value);                           // Subtract from the targeted balance\n', "        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);     // Subtract from the sender's allowance\n", '        totalSupply = totalSupply.sub(_value);                                   // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Create `_amount` tokens and send it to `_to`\n', '    /// @param _to Address to receive the tokens\n', '    /// @param _amount the amount of tokens it will receive\n', '    function mintToken(address _to, uint256 _amount) onlyOwner public {\n', '        uint256 amount = _amount * 10 ** uint256(decimals);\n', '        totalSupply = totalSupply.add(amount);\n', '        balances[_to] = balances[_to].add(amount);\n', '        emit Transfer(this, _to, amount);\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function airdrop(address[] _to, uint256 _value) public returns (bool success) {\n', '        for (uint i=0; i<_to.length; i++) {\n', '            _transfer(msg.sender, _to[i], _value);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    function batchTransfer(address[] _to, uint256[] _value) public returns (bool success) {\n', '        require(_to.length == _value.length);\n', '\n', '        uint256 amount = 0;\n', '        for(uint n=0;n<_value.length;n++){\n', '            amount += _value[n];\n', '        }\n', '        \n', '        require(amount > 0 && balanceOf(msg.sender) >= amount);\n', '        \n', '        for (uint i=0; i<_to.length; i++) {\n', '            transfer(_to[i], _value[i]);\n', '        }\n', '        return true;\n', '    }\n', '}']
