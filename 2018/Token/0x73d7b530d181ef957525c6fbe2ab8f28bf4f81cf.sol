['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/erc/erc20/ERC20Interface.sol\n', '\n', '/**\n', ' * @title ERC-20 Token Standard.\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md.\n', ' */\n', 'contract ERC20Interface {\n', '  /**\n', '   * @dev MUST trigger when tokens are transferred, including zero value transfers.\n', '   * @dev A token contract which creates new tokens SHOULD trigger a `Transfer` event\n', '   *   with the `_from` address set to `0x0` when tokens are created.\n', '   */\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * @dev MUST trigger on any successful call to `approve(address _spender, uint256 _value)`.\n', '   */\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  /**\n', '   * @notice Returns the total token supply.\n', '   * @return The supply.\n', '   */\n', '  function totalSupply() public view returns (uint256 _supply);\n', '\n', '  /**\n', '   * @notice Returns the balance of an account with address `_owner`.\n', '   * @return The account balance.\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '\n', '  /**\n', '   * @notice Transfers `_value` amount of tokens to address `_to`.\n', '   *\n', '   * @param _to The address of the recipient.\n', '   * @param _value The amount of token to be transferred.\n', '   *\n', '   * @dev The function MUST fire the `Transfer` event.\n', '   * @dev The function SHOULD throw if the `_from` account balance does not have enough tokens to spend.\n', '   * @dev Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.\n', '   *\n', '   * @return Whether the transfer was successful or not.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool _success);\n', '\n', '  /**\n', '   * @notice Transfers `_value` amount of tokens from address `_from` to address `_to`.\n', '   *\n', '   * @param _from The address of the sender.\n', '   * @param _to The address of the recipient.\n', '   * @param _value The amount of token to be transferred.\n', '   *\n', '   * @dev The `transferFrom` method is used for a withdraw workflow,\n', '   *   allowing contracts to transfer tokens on your behalf.\n', '   *   This can be used for example to allow a contract to transfer tokens on your behalf\n', '   *   and/or to charge fees in sub-currencies.\n', '   * @dev The function MUST fire the `Transfer` event.\n', '   * @dev The function SHOULD throw unless the `_from` account\n', '   *   has deliberately authorized the sender of the message via some mechanism.\n', '   * @dev Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.\n', '   *\n', '   * @return Whether the transfer was successful or not.\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success);\n', '\n', '  /**\n', '   * @notice Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount.\n', '   *   If this function is called again it overwrites the current allowance with `_value`.\n', '   *\n', '   * @param _spender The address of the account able to transfer the tokens.\n', '   * @param _value The amount of tokens to be approved for transfer.\n', '   *\n', '   * @dev To prevent attack vectors like the one described in\n', '   *   https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\n', '   *   and discussed in\n', '   *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729,\n', '   *   clients SHOULD make sure to create user interfaces in such a way\n', '   *   that they set the allowance first to 0 before setting it to another value for the same spender.\n', '   *   THOUGH The contract itself shouldn&#39;t enforce it,\n', '   *   to allow backwards compatibility with contracts deployed before.\n', '   *\n', '   * @return Whether the approval was successful or not.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool _success);\n', '\n', '  /**\n', '   * @notice Returns the amount which `_spender` is still allowed to withdraw from `_owner`.\n', '   *\n', '   * @param _owner The address of the account owning tokens.\n', '   * @param _spender The address of the account able to transfer the tokens.\n', '   *\n', '   * @return Amount of remaining tokens allowed to spent.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256 _remaining);\n', '}\n', '\n', '// File: zeppelin/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20.sol\n', '\n', '/**\n', ' * @title An implementation of the ERC-20 Token Standard.\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md.\n', ' */\n', 'contract ERC20 is ERC20Interface {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 internal _totalSupply;\n', '  mapping (address => uint256) internal _balance;\n', '  mapping (address => mapping (address => uint256)) internal _allowed;\n', '\n', '\n', '  /**\n', '   * @notice Returns the total token supply.\n', '   * @return The supply.\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the balance of an account with address `_owner`.\n', '   * @return The account balance.\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return _balance[_owner];\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers `_value` amount of tokens to address `_to`.\n', '   *\n', '   * @param _to The address of the recipient.\n', '   * @param _value The amount of token to be transferred.\n', '   *\n', '   * @return Whether the transfer was successful or not.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    _balance[msg.sender] = _balance[msg.sender].sub(_value);\n', '    _balance[_to] = _balance[_to].add(_value);\n', '\n', '    emit Transfer(msg.sender, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers `_value` amount of tokens from address `_from` to address `_to`.\n', '   *\n', '   * @param _from The address of the sender.\n', '   * @param _to The address of the recipient.\n', '   * @param _value The amount of token to be transferred.\n', '   *\n', '   * @return Whether the transfer was successful or not.\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    _balance[_from] = _balance[_from].sub(_value);\n', '    _balance[_to] = _balance[_to].add(_value);\n', '    _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n', '\n', '    emit Transfer(_from, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount.\n', '   *   If this function is called again it overwrites the current allowance with `_value`.\n', '   *\n', '   * @param _spender The address of the account able to transfer the tokens.\n', '   * @param _value The amount of tokens to be approved for transfer.\n', '   *\n', '   * @return Whether the approval was successful or not.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    _allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the amount which `_spender` is still allowed to withdraw from `_owner`.\n', '   *\n', '   * @param _owner The address of the account owning tokens.\n', '   * @param _spender The address of the account able to transfer the tokens.\n', '   *\n', '   * @return Amount of remaining tokens allowed to spent.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return _allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20Burnable.sol\n', '\n', '/**\n', ' * @title An implementation of the ERC-20 Token Standard\n', ' *   which allows tokens to be burnt.\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  function burn(uint256 _value) public returns (bool) {\n', '    _balance[msg.sender] = _balance[msg.sender].sub(_value);\n', '    _totalSupply = _totalSupply.sub(_value);\n', '\n', '    emit Transfer(msg.sender, address(0), _value);\n', '    emit Burn(msg.sender, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  function burnFrom(address _from, uint256 _value) public returns (bool) {\n', '    _balance[_from] = _balance[_from].sub(_value);\n', '    _totalSupply = _totalSupply.sub(_value);\n', '    _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n', '\n', '    emit Transfer(_from, address(0), _value);\n', '    emit Burn(_from, _value);\n', '\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20DetailedInterface.sol\n', '\n', '/**\n', ' * @title Contains optional methods which give some detailed information about the token\n', ' *   in ERC-20 Token Standard.\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md.\n', ' */\n', 'contract ERC20DetailedInterface is ERC20Interface {\n', '  /**\n', '   * @notice Returns the name of the token.\n', '   * @return The name.\n', '   */\n', '  function name() public view returns (string _name);\n', '\n', '  /**\n', '   * @notice Returns the name of the token.\n', '   * @return The symbol.\n', '   */\n', '  function symbol() public view returns (string _symbol);\n', '\n', '  /**\n', '   * @notice Returns the number of decimals the token uses.\n', '   * @dev For example, 8 means to divide the token amount by 100,000,000\n', '   *   to get its user representation.\n', '   * @return The number of decimals.\n', '   */\n', '  function decimals() public view returns (uint8 _decimals);\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20RecipientInterface.sol\n', '\n', 'interface ERC20RecipientInterface {\n', '  function receiveApproval(address _from, uint256 _value, address _erc20Address, bytes _data) external;\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20Extended.sol\n', '\n', '/**\n', ' * @title An implementation of the ERC-20 Token Standard\n', ' *   which implements `approveAndCall` function according to the extended standard.\n', ' */\n', 'contract ERC20Extended is ERC20 {\n', '  /**\n', '   * @notice Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount.\n', '   *   After the approval, executes `receiveApproval` function on `_spender`.\n', '   *   If this function is called again it overwrites the current allowance with `_value`.\n', '   *\n', '   * @param _spender The address that will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _data Additional data to be passed to `receiveApproval` function on `_spender`.\n', '   *\n', '   * @return Whether the approval was successful or not.\n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes _data) public returns (bool) {\n', '    require(approve(_spender, _value));\n', '    ERC20RecipientInterface(_spender).receiveApproval(msg.sender, _value, this, _data);\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20Mintable.sol\n', '\n', '/**\n', ' * @title An implementation of the ERC-20 Token Standard\n', ' *   which allows tokens to be minted.\n', ' */\n', 'contract ERC20Mintable is ERC20, Ownable {\n', '  bool public mintingFinished = false;\n', '\n', '  event Mint(address indexed to, uint256 value);\n', '  event MintFinished();\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _value) onlyOwner canMint public returns (bool) {\n', '    _balance[_to] = _balance[_to].add(_value);\n', '    _totalSupply = _totalSupply.add(_value);\n', '\n', '    emit Mint(_to, _value);\n', '    emit Transfer(address(0), _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/token/AxieOriginCoin.sol\n', '\n', '/**\n', ' * @title The contract which holds Axie Origin Coins.\n', ' * @dev Five Axie Origin Coins can be redeemed for one Origin Axie.\n', ' */\n', 'contract AxieOriginCoin is ERC20DetailedInterface, ERC20Extended, ERC20Mintable, ERC20Burnable {\n', '  uint256 constant public NUM_COIN_PER_AXIE = 5;\n', '  uint256 constant public NUM_RESERVED_AXIE = 427;\n', '  uint256 constant public NUM_RESERVED_COIN = NUM_RESERVED_AXIE * NUM_COIN_PER_AXIE;\n', '\n', '  constructor() public {\n', '    // Reserve 20% of all remaining Axies from the Presale.\n', '    mint(msg.sender, NUM_RESERVED_COIN);\n', '\n', '    // As its name says.\n', '    _allocateUnspentRefTokens();\n', '\n', '    // Don&#39;t allow tokens to be minted anymore.\n', '    finishMinting();\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the name of the token.\n', '   * @return The name.\n', '   */\n', '  function name() public view returns (string) {\n', '    return "Axie Origin Coin";\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the name of the token.\n', '   * @return The symbol.\n', '   */\n', '  function symbol() public view returns (string) {\n', '    return "AOC";\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the number of decimals the token uses.\n', '   * @return The number of decimals.\n', '   */\n', '  function decimals() public view returns (uint8) {\n', '    return 0;\n', '  }\n', '\n', '  function _allocateUnspentRefTokens() private {\n', '    // 0\n', '    mint(0x052731748979e182fdf9Bf849C6df54f9f196645, 3);\n', '    mint(0x1878B18693fc273DE9FD833B83f9679785c01aB2, 1);\n', '    mint(0x1E3934EA7E416F4E2BC5F7d55aE9783da0061475, 1);\n', '    mint(0x32451d81EB31411B2CA4e70F3d87B3DEACCEA2d2, 3);\n', '    mint(0x494952f01a30547d269aaF147e6226f940f5B041, 8);\n', '    // 5\n', '    mint(0x5BD73bB4e2A9f81922dbE7F4b321cfAE208BE2E6, 1);\n', '    mint(0x6564A5639e17e186f749e493Af98a51fd3092048, 12);\n', '    mint(0x696A567271BBDAC6f435CAb9D69e56cD115B76eB, 1);\n', '    mint(0x70580eA14d98a53fd59376dC7e959F4a6129bB9b, 2);\n', '    mint(0x75f732C1b1D0bBdA60f4B49EF0B36EB6e8AD6531, 1);\n', '    // 10\n', '    mint(0x84418eD93d141CFE7471dED46747D003117eCaD5, 2);\n', '    mint(0x9455A90Cbf43D331Dd76a2d07192431370f64384, 2);\n', '    mint(0x95fd3579c73Ea675C89415285355C4795118B345, 1);\n', '    mint(0xa3346F3Af6A3AE749aCA18d7968A03811d15d733, 1);\n', '    mint(0xA586A3B8939e9C0DC72D88166F6F6bb7558EeDCe, 1);\n', '    // 15\n', '    mint(0xAb01D4895b802c38Eee7553bb52A4160CFca2878, 1);\n', '    mint(0xd6E8D52Be82550B230176b6E9bA49BC3fAF43E4a, 1);\n', '    mint(0xEAB0c22D927d15391dd0CfbE89a3b59F6e814551, 3);\n', '    mint(0x03300279d711b8dEb1353DD9719eFf81Ea1b6bEd, 3);\n', '    mint(0x03b4A1fdeCeC66338071180a7F2f2D518CFf224A, 4);\n', '    // 20\n', '    mint(0x0537544De3935408246EE2Ad09949D046F92574D, 4);\n', '    mint(0x0E26169270D92Ff3649461B55CA51C99703dE59e, 1);\n', '    mint(0x16Ea1F673E01419BA9aF51365b88138Ac492489a, 1);\n', '    mint(0x28d02f67316123Dc0293849a0D254AD86b379b34, 2);\n', '    mint(0x38A6022FECb675a53F31CDaB3457456DD6e5911c, 2);\n', '    // 25\n', '    mint(0x4260E8206c58cD0530d9A5cff55B77D6165c7BCd, 1);\n', '    mint(0x7E1DCf785f0353BF657c38Ab7865C1f184EFE208, 4);\n', '    mint(0x7f328117b7de7579C6249258d084f75556E2699d, 1);\n', '    mint(0x8a9d49a6e9D037843560091fC280B9Ff9819e462, 3);\n', '    mint(0x8C5fC43ad00Cc53e11F61bEce329DDc5E3ea0929, 3);\n', '    // 30\n', '    mint(0x8FF9679fc77B077cB5f8818B7B63022582b5d538, 1);\n', '    mint(0x97bfc7fc1Ee5b25CfAF6075bac5d7EcA037AD694, 1);\n', '    mint(0x993a64DB27a51D1E6C1AFF56Fb61Ba0Dac253acb, 2);\n', '    mint(0xa6bCEc585F12CeFBa9709A080cE2EFD38f871024, 1);\n', '    mint(0xaF6488744207273c79B896922e65651C61033787, 5);\n', '    // 35\n', '    mint(0xB3C2a4ce7ce57A74371b7E3dAE8f3393229c2aaC, 3);\n', '    mint(0xb4A90c06d5bC51D79D44e11336077b6F9ccD5683, 23);\n', '    mint(0xB94c9e7D28e54cb37fA3B0D3FFeC24A8E4affA90, 3);\n', '    mint(0xDe0D2e92e85B8B7828723Ee789ffA3Ba9FdCDb9c, 1);\n', '    mint(0xe37Ba1117746473db68A807aE9E37a2088BDB20f, 1);\n', '    // 40\n', '    mint(0x5eA1D56D0ddE1cA5B50c277275855F69edEfA169, 1);\n', '    mint(0x6692DE2d4b3102ab922cB21157EeBCD9BDDDBb15, 4);\n', '    // 42\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/erc/erc20/ERC20Interface.sol\n', '\n', '/**\n', ' * @title ERC-20 Token Standard.\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md.\n', ' */\n', 'contract ERC20Interface {\n', '  /**\n', '   * @dev MUST trigger when tokens are transferred, including zero value transfers.\n', '   * @dev A token contract which creates new tokens SHOULD trigger a `Transfer` event\n', '   *   with the `_from` address set to `0x0` when tokens are created.\n', '   */\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * @dev MUST trigger on any successful call to `approve(address _spender, uint256 _value)`.\n', '   */\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  /**\n', '   * @notice Returns the total token supply.\n', '   * @return The supply.\n', '   */\n', '  function totalSupply() public view returns (uint256 _supply);\n', '\n', '  /**\n', '   * @notice Returns the balance of an account with address `_owner`.\n', '   * @return The account balance.\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '\n', '  /**\n', '   * @notice Transfers `_value` amount of tokens to address `_to`.\n', '   *\n', '   * @param _to The address of the recipient.\n', '   * @param _value The amount of token to be transferred.\n', '   *\n', '   * @dev The function MUST fire the `Transfer` event.\n', '   * @dev The function SHOULD throw if the `_from` account balance does not have enough tokens to spend.\n', '   * @dev Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.\n', '   *\n', '   * @return Whether the transfer was successful or not.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool _success);\n', '\n', '  /**\n', '   * @notice Transfers `_value` amount of tokens from address `_from` to address `_to`.\n', '   *\n', '   * @param _from The address of the sender.\n', '   * @param _to The address of the recipient.\n', '   * @param _value The amount of token to be transferred.\n', '   *\n', '   * @dev The `transferFrom` method is used for a withdraw workflow,\n', '   *   allowing contracts to transfer tokens on your behalf.\n', '   *   This can be used for example to allow a contract to transfer tokens on your behalf\n', '   *   and/or to charge fees in sub-currencies.\n', '   * @dev The function MUST fire the `Transfer` event.\n', '   * @dev The function SHOULD throw unless the `_from` account\n', '   *   has deliberately authorized the sender of the message via some mechanism.\n', '   * @dev Transfers of 0 values MUST be treated as normal transfers and fire the `Transfer` event.\n', '   *\n', '   * @return Whether the transfer was successful or not.\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success);\n', '\n', '  /**\n', '   * @notice Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount.\n', '   *   If this function is called again it overwrites the current allowance with `_value`.\n', '   *\n', '   * @param _spender The address of the account able to transfer the tokens.\n', '   * @param _value The amount of tokens to be approved for transfer.\n', '   *\n', '   * @dev To prevent attack vectors like the one described in\n', '   *   https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/\n', '   *   and discussed in\n', '   *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729,\n', '   *   clients SHOULD make sure to create user interfaces in such a way\n', '   *   that they set the allowance first to 0 before setting it to another value for the same spender.\n', "   *   THOUGH The contract itself shouldn't enforce it,\n", '   *   to allow backwards compatibility with contracts deployed before.\n', '   *\n', '   * @return Whether the approval was successful or not.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool _success);\n', '\n', '  /**\n', '   * @notice Returns the amount which `_spender` is still allowed to withdraw from `_owner`.\n', '   *\n', '   * @param _owner The address of the account owning tokens.\n', '   * @param _spender The address of the account able to transfer the tokens.\n', '   *\n', '   * @return Amount of remaining tokens allowed to spent.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256 _remaining);\n', '}\n', '\n', '// File: zeppelin/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20.sol\n', '\n', '/**\n', ' * @title An implementation of the ERC-20 Token Standard.\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md.\n', ' */\n', 'contract ERC20 is ERC20Interface {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 internal _totalSupply;\n', '  mapping (address => uint256) internal _balance;\n', '  mapping (address => mapping (address => uint256)) internal _allowed;\n', '\n', '\n', '  /**\n', '   * @notice Returns the total token supply.\n', '   * @return The supply.\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the balance of an account with address `_owner`.\n', '   * @return The account balance.\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return _balance[_owner];\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers `_value` amount of tokens to address `_to`.\n', '   *\n', '   * @param _to The address of the recipient.\n', '   * @param _value The amount of token to be transferred.\n', '   *\n', '   * @return Whether the transfer was successful or not.\n', '   */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    _balance[msg.sender] = _balance[msg.sender].sub(_value);\n', '    _balance[_to] = _balance[_to].add(_value);\n', '\n', '    emit Transfer(msg.sender, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers `_value` amount of tokens from address `_from` to address `_to`.\n', '   *\n', '   * @param _from The address of the sender.\n', '   * @param _to The address of the recipient.\n', '   * @param _value The amount of token to be transferred.\n', '   *\n', '   * @return Whether the transfer was successful or not.\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    _balance[_from] = _balance[_from].sub(_value);\n', '    _balance[_to] = _balance[_to].add(_value);\n', '    _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n', '\n', '    emit Transfer(_from, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount.\n', '   *   If this function is called again it overwrites the current allowance with `_value`.\n', '   *\n', '   * @param _spender The address of the account able to transfer the tokens.\n', '   * @param _value The amount of tokens to be approved for transfer.\n', '   *\n', '   * @return Whether the approval was successful or not.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    _allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the amount which `_spender` is still allowed to withdraw from `_owner`.\n', '   *\n', '   * @param _owner The address of the account owning tokens.\n', '   * @param _spender The address of the account able to transfer the tokens.\n', '   *\n', '   * @return Amount of remaining tokens allowed to spent.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return _allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20Burnable.sol\n', '\n', '/**\n', ' * @title An implementation of the ERC-20 Token Standard\n', ' *   which allows tokens to be burnt.\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  function burn(uint256 _value) public returns (bool) {\n', '    _balance[msg.sender] = _balance[msg.sender].sub(_value);\n', '    _totalSupply = _totalSupply.sub(_value);\n', '\n', '    emit Transfer(msg.sender, address(0), _value);\n', '    emit Burn(msg.sender, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  function burnFrom(address _from, uint256 _value) public returns (bool) {\n', '    _balance[_from] = _balance[_from].sub(_value);\n', '    _totalSupply = _totalSupply.sub(_value);\n', '    _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n', '\n', '    emit Transfer(_from, address(0), _value);\n', '    emit Burn(_from, _value);\n', '\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20DetailedInterface.sol\n', '\n', '/**\n', ' * @title Contains optional methods which give some detailed information about the token\n', ' *   in ERC-20 Token Standard.\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md.\n', ' */\n', 'contract ERC20DetailedInterface is ERC20Interface {\n', '  /**\n', '   * @notice Returns the name of the token.\n', '   * @return The name.\n', '   */\n', '  function name() public view returns (string _name);\n', '\n', '  /**\n', '   * @notice Returns the name of the token.\n', '   * @return The symbol.\n', '   */\n', '  function symbol() public view returns (string _symbol);\n', '\n', '  /**\n', '   * @notice Returns the number of decimals the token uses.\n', '   * @dev For example, 8 means to divide the token amount by 100,000,000\n', '   *   to get its user representation.\n', '   * @return The number of decimals.\n', '   */\n', '  function decimals() public view returns (uint8 _decimals);\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20RecipientInterface.sol\n', '\n', 'interface ERC20RecipientInterface {\n', '  function receiveApproval(address _from, uint256 _value, address _erc20Address, bytes _data) external;\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20Extended.sol\n', '\n', '/**\n', ' * @title An implementation of the ERC-20 Token Standard\n', ' *   which implements `approveAndCall` function according to the extended standard.\n', ' */\n', 'contract ERC20Extended is ERC20 {\n', '  /**\n', '   * @notice Allows `_spender` to withdraw from your account multiple times, up to the `_value` amount.\n', '   *   After the approval, executes `receiveApproval` function on `_spender`.\n', '   *   If this function is called again it overwrites the current allowance with `_value`.\n', '   *\n', '   * @param _spender The address that will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _data Additional data to be passed to `receiveApproval` function on `_spender`.\n', '   *\n', '   * @return Whether the approval was successful or not.\n', '   */\n', '  function approveAndCall(address _spender, uint256 _value, bytes _data) public returns (bool) {\n', '    require(approve(_spender, _value));\n', '    ERC20RecipientInterface(_spender).receiveApproval(msg.sender, _value, this, _data);\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/erc/erc20/ERC20Mintable.sol\n', '\n', '/**\n', ' * @title An implementation of the ERC-20 Token Standard\n', ' *   which allows tokens to be minted.\n', ' */\n', 'contract ERC20Mintable is ERC20, Ownable {\n', '  bool public mintingFinished = false;\n', '\n', '  event Mint(address indexed to, uint256 value);\n', '  event MintFinished();\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _value) onlyOwner canMint public returns (bool) {\n', '    _balance[_to] = _balance[_to].add(_value);\n', '    _totalSupply = _totalSupply.add(_value);\n', '\n', '    emit Mint(_to, _value);\n', '    emit Transfer(address(0), _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/token/AxieOriginCoin.sol\n', '\n', '/**\n', ' * @title The contract which holds Axie Origin Coins.\n', ' * @dev Five Axie Origin Coins can be redeemed for one Origin Axie.\n', ' */\n', 'contract AxieOriginCoin is ERC20DetailedInterface, ERC20Extended, ERC20Mintable, ERC20Burnable {\n', '  uint256 constant public NUM_COIN_PER_AXIE = 5;\n', '  uint256 constant public NUM_RESERVED_AXIE = 427;\n', '  uint256 constant public NUM_RESERVED_COIN = NUM_RESERVED_AXIE * NUM_COIN_PER_AXIE;\n', '\n', '  constructor() public {\n', '    // Reserve 20% of all remaining Axies from the Presale.\n', '    mint(msg.sender, NUM_RESERVED_COIN);\n', '\n', '    // As its name says.\n', '    _allocateUnspentRefTokens();\n', '\n', "    // Don't allow tokens to be minted anymore.\n", '    finishMinting();\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the name of the token.\n', '   * @return The name.\n', '   */\n', '  function name() public view returns (string) {\n', '    return "Axie Origin Coin";\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the name of the token.\n', '   * @return The symbol.\n', '   */\n', '  function symbol() public view returns (string) {\n', '    return "AOC";\n', '  }\n', '\n', '  /**\n', '   * @notice Returns the number of decimals the token uses.\n', '   * @return The number of decimals.\n', '   */\n', '  function decimals() public view returns (uint8) {\n', '    return 0;\n', '  }\n', '\n', '  function _allocateUnspentRefTokens() private {\n', '    // 0\n', '    mint(0x052731748979e182fdf9Bf849C6df54f9f196645, 3);\n', '    mint(0x1878B18693fc273DE9FD833B83f9679785c01aB2, 1);\n', '    mint(0x1E3934EA7E416F4E2BC5F7d55aE9783da0061475, 1);\n', '    mint(0x32451d81EB31411B2CA4e70F3d87B3DEACCEA2d2, 3);\n', '    mint(0x494952f01a30547d269aaF147e6226f940f5B041, 8);\n', '    // 5\n', '    mint(0x5BD73bB4e2A9f81922dbE7F4b321cfAE208BE2E6, 1);\n', '    mint(0x6564A5639e17e186f749e493Af98a51fd3092048, 12);\n', '    mint(0x696A567271BBDAC6f435CAb9D69e56cD115B76eB, 1);\n', '    mint(0x70580eA14d98a53fd59376dC7e959F4a6129bB9b, 2);\n', '    mint(0x75f732C1b1D0bBdA60f4B49EF0B36EB6e8AD6531, 1);\n', '    // 10\n', '    mint(0x84418eD93d141CFE7471dED46747D003117eCaD5, 2);\n', '    mint(0x9455A90Cbf43D331Dd76a2d07192431370f64384, 2);\n', '    mint(0x95fd3579c73Ea675C89415285355C4795118B345, 1);\n', '    mint(0xa3346F3Af6A3AE749aCA18d7968A03811d15d733, 1);\n', '    mint(0xA586A3B8939e9C0DC72D88166F6F6bb7558EeDCe, 1);\n', '    // 15\n', '    mint(0xAb01D4895b802c38Eee7553bb52A4160CFca2878, 1);\n', '    mint(0xd6E8D52Be82550B230176b6E9bA49BC3fAF43E4a, 1);\n', '    mint(0xEAB0c22D927d15391dd0CfbE89a3b59F6e814551, 3);\n', '    mint(0x03300279d711b8dEb1353DD9719eFf81Ea1b6bEd, 3);\n', '    mint(0x03b4A1fdeCeC66338071180a7F2f2D518CFf224A, 4);\n', '    // 20\n', '    mint(0x0537544De3935408246EE2Ad09949D046F92574D, 4);\n', '    mint(0x0E26169270D92Ff3649461B55CA51C99703dE59e, 1);\n', '    mint(0x16Ea1F673E01419BA9aF51365b88138Ac492489a, 1);\n', '    mint(0x28d02f67316123Dc0293849a0D254AD86b379b34, 2);\n', '    mint(0x38A6022FECb675a53F31CDaB3457456DD6e5911c, 2);\n', '    // 25\n', '    mint(0x4260E8206c58cD0530d9A5cff55B77D6165c7BCd, 1);\n', '    mint(0x7E1DCf785f0353BF657c38Ab7865C1f184EFE208, 4);\n', '    mint(0x7f328117b7de7579C6249258d084f75556E2699d, 1);\n', '    mint(0x8a9d49a6e9D037843560091fC280B9Ff9819e462, 3);\n', '    mint(0x8C5fC43ad00Cc53e11F61bEce329DDc5E3ea0929, 3);\n', '    // 30\n', '    mint(0x8FF9679fc77B077cB5f8818B7B63022582b5d538, 1);\n', '    mint(0x97bfc7fc1Ee5b25CfAF6075bac5d7EcA037AD694, 1);\n', '    mint(0x993a64DB27a51D1E6C1AFF56Fb61Ba0Dac253acb, 2);\n', '    mint(0xa6bCEc585F12CeFBa9709A080cE2EFD38f871024, 1);\n', '    mint(0xaF6488744207273c79B896922e65651C61033787, 5);\n', '    // 35\n', '    mint(0xB3C2a4ce7ce57A74371b7E3dAE8f3393229c2aaC, 3);\n', '    mint(0xb4A90c06d5bC51D79D44e11336077b6F9ccD5683, 23);\n', '    mint(0xB94c9e7D28e54cb37fA3B0D3FFeC24A8E4affA90, 3);\n', '    mint(0xDe0D2e92e85B8B7828723Ee789ffA3Ba9FdCDb9c, 1);\n', '    mint(0xe37Ba1117746473db68A807aE9E37a2088BDB20f, 1);\n', '    // 40\n', '    mint(0x5eA1D56D0ddE1cA5B50c277275855F69edEfA169, 1);\n', '    mint(0x6692DE2d4b3102ab922cB21157EeBCD9BDDDBb15, 4);\n', '    // 42\n', '  }\n', '}']
