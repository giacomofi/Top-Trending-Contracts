['pragma solidity ^0.4.15;\n', '//Owner Contract-For Defining Owner and Transferring Ownership\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = 0x2e1977127F682723C778bBcac576A4aF2c0e790d;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract TokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n', '}\n', '\n', '\n', '\n', '//Token Format\n', 'contract ERC20 is Ownable {\n', '    using SafeMath for uint256;\n', '    //Public Variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    //Constructor\n', '    function ERC20(\n', '    uint256 _initialSupply,\n', '    string _tokenName,\n', '    uint8 _decimalUnits,\n', '    string _tokenSymbol\n', '    ) public\n', '    {\n', '\n', '        balances[0x2e1977127F682723C778bBcac576A4aF2c0e790d] = _initialSupply;\n', '        totalSupply = _initialSupply;\n', '        decimals = _decimalUnits;\n', '        symbol = _tokenSymbol;\n', '        name = _tokenName;\n', '    }\n', '\n', '    /* public methods */\n', '    function transfer(address _to, uint256 _value) public  returns (bool) {\n', '\n', '\n', '        bool status = transferInternal(msg.sender, _to, _value);\n', '\n', '        require(status == true);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '\n', '\n', '        TokenRecipient spender = TokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\n', '\n', '        if (allowed[_from][msg.sender] < _value) {\n', '            return false;\n', '        }\n', '\n', '        bool _success = transferInternal(_from, _to, _value);\n', '\n', '        if (_success) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '\n', '        return _success;\n', '    }\n', '\n', '    /*constant functions*/\n', '    function totalSupply() public constant returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _address) public constant returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /* internal functions*/\n', '    function setBalance(address _holder, uint256 _amount) internal {\n', '        balances[_holder] = _amount;\n', '    }\n', '\n', '    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\n', '\n', '        if (_value == 0) {\n', '            Transfer(_from, _to, _value);\n', '\n', '            return true;\n', '        }\n', '\n', '        if (balances[_from] < _value) {\n', '            return false;\n', '        }\n', '\n', '        setBalance(_from, balances[_from].sub(_value));\n', '        setBalance(_to, balances[_to].add(_value));\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ERC223 {\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes  data);\n', '    function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool ok);\n', '}\n', '\n', '\n', 'contract ContractReceiver {\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '\n', '/******************************************/\n', '/** Axpire TOKEN **/\n', '/******************************************/\n', 'contract AxpireToken is ERC223,ERC20 {\n', '\n', '    uint256 initialSupply= 350000000 * 10**8;\n', '    string tokenName="aXpire Token";\n', '    string tokenSymbol="AXP";\n', '    uint8 decimalUnits=8;\n', '\n', '    //Constructor\n', '    function AxpireToken() public\n', '    ERC20(initialSupply, tokenName, decimalUnits, tokenSymbol)\n', '    {\n', '        owner = 0x2e1977127F682723C778bBcac576A4aF2c0e790d;\n', '        //Assigning total no of tokens\n', '        balances[owner] = initialSupply;\n', '        totalSupply = initialSupply;\n', '    }\n', '\n', '\n', '    function transfer(address to, uint256 value, bytes data) public returns (bool success) {\n', '\n', '        bool status = transferInternal(msg.sender, to, value, data);\n', '\n', '        return status;\n', '    }\n', '\n', '    function transfer(address to, uint value, bytes data, string customFallback) public returns (bool success) {\n', '\n', '        bool status = transferInternal(msg.sender, to, value, data, true, customFallback);\n', '\n', '        return status;\n', '    }\n', '\n', '    // rollback changes to transferInternal for transferFrom\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\n', '        if (allowed[_from][msg.sender] < _value) {\n', '            return false;\n', '        }\n', '\n', '        bool _success = super.transferInternal(_from, _to, _value);\n', '\n', '        if (_success) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '\n', '        return _success;\n', '    }\n', '\n', '    function transferInternal(address from, address to, uint256 value, bytes data) internal returns (bool success) {\n', '        return transferInternal(from, to, value, data, false, "");\n', '    }\n', '\n', '    function transferInternal(\n', '    address from,\n', '    address to,\n', '    uint256 value,\n', '    bytes data,\n', '    bool useCustomFallback,\n', '    string customFallback\n', '    )\n', '    internal returns (bool success)\n', '    {\n', '        bool status = super.transferInternal(from, to, value);\n', '\n', '        if (status) {\n', '            if (isContract(to)) {\n', '                ContractReceiver receiver = ContractReceiver(to);\n', '\n', '                if (useCustomFallback) {\n', '                    // solhint-disable-next-line avoid-call-value\n', '                    require(receiver.call.value(0)(bytes4(keccak256(customFallback)), from, value, data) == true);\n', '                } else {\n', '                    receiver.tokenFallback(from, value, data);\n', '                }\n', '            }\n', '\n', '            Transfer(from, to, value, data);\n', '        }\n', '\n', '        return status;\n', '    }\n', '\n', '    function transferInternal(address from, address to, uint256 value) internal returns (bool success) {\n', '\n', '        bytes memory data;\n', '\n', '        return transferInternal(from, to, value, data, false, "");\n', '    }\n', '\n', '    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) private returns (bool) {\n', '        uint length;\n', '        assembly {\n', '        //retrieve the size of the code on target address, this needs assembly\n', '        length := extcodesize(_addr)\n', '        }\n', '        return (length > 0);\n', '    }\n', '\n', '}']