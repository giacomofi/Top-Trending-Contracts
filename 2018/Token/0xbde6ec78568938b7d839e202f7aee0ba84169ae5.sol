['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title tokenRecipient\n', ' * @dev An interface capable of calling `receiveApproval`, which is used by `approveAndCall` to notify the contract from this interface\n', ' */\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '\n', '/**\n', ' * @title TokenERC20\n', ' * @dev A simple ERC20 standard token with burnable function\n', ' */\n', 'contract TokenERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function balanceOf(address _owner) view public returns(uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) view public returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Basic transfer of all transfer-related functions\n', '     * @param _from The address of sender\n', '     * @param _to The address of recipient\n', '     * @param _value The amount sender want to transfer to recipient\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer( _from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens\n', '     * @dev Send `_value` tokens to `_to` from your account\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount to send\n', '     * @return True if the transfer is done without error\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from other address\n', '     * @dev Send `_value` tokens to `_to` on behalf of `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount to send\n', '     * @return True if the transfer is done without error\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Set allowance for other address\n', '     * @dev Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @return True if the approval is done without error\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        // Avoid the front-running attack\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Set allowance for other address and notify\n', '     * @dev Allows contract `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     * @param _spender The contract address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     * @return True if it is done without error\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @notice Destroy tokens\n', '     * @dev Remove `_value` tokens from the system irreversibly\n', '     * @param _value The amount of money will be burned\n', '     * @return True if `_value` is burned successfully\n', '     */\n', '    function burn(uint256 _value) public returns(bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Destroy tokens from other account\n', '     * @dev Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     * @param _from The address of the sender\n', '     * @param _value The amount of money will be burned\n', '     * @return True if `_value` is burned successfully\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns(bool) {\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title AMOSToken\n', ' */\n', 'contract AMOSToken is TokenERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    // Token Info.\n', '    string public constant name = "AMOS Token";\n', '    string public constant symbol = "AMOS";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '     * @dev Constructor of AMOS Token\n', '     */\n', '    constructor() public {\n', '        totalSupply = 5000000000 * 10 ** 18;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function transferMultiple(address[] _to, uint256[] _value) public returns(bool) {\n', '        require(_to.length == _value.length);\n', '        uint256 i = 0;\n', '        while (i < _to.length) {\n', '           _transfer(msg.sender, _to[i], _value[i]);\n', '           i += 1;\n', '        }\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title tokenRecipient\n', ' * @dev An interface capable of calling `receiveApproval`, which is used by `approveAndCall` to notify the contract from this interface\n', ' */\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '\n', '/**\n', ' * @title TokenERC20\n', ' * @dev A simple ERC20 standard token with burnable function\n', ' */\n', 'contract TokenERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function balanceOf(address _owner) view public returns(uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) view public returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Basic transfer of all transfer-related functions\n', '     * @param _from The address of sender\n', '     * @param _to The address of recipient\n', '     * @param _value The amount sender want to transfer to recipient\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer( _from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens\n', '     * @dev Send `_value` tokens to `_to` from your account\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount to send\n', '     * @return True if the transfer is done without error\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns(bool) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from other address\n', '     * @dev Send `_value` tokens to `_to` on behalf of `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount to send\n', '     * @return True if the transfer is done without error\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Set allowance for other address\n', '     * @dev Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @return True if the approval is done without error\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns(bool) {\n', '        // Avoid the front-running attack\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Set allowance for other address and notify\n', '     * @dev Allows contract `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     * @param _spender The contract address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     * @return True if it is done without error\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @notice Destroy tokens\n', '     * @dev Remove `_value` tokens from the system irreversibly\n', '     * @param _value The amount of money will be burned\n', '     * @return True if `_value` is burned successfully\n', '     */\n', '    function burn(uint256 _value) public returns(bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Destroy tokens from other account\n', '     * @dev Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     * @param _from The address of the sender\n', '     * @param _value The amount of money will be burned\n', '     * @return True if `_value` is burned successfully\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns(bool) {\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title AMOSToken\n', ' */\n', 'contract AMOSToken is TokenERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    // Token Info.\n', '    string public constant name = "AMOS Token";\n', '    string public constant symbol = "AMOS";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '     * @dev Constructor of AMOS Token\n', '     */\n', '    constructor() public {\n', '        totalSupply = 5000000000 * 10 ** 18;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function transferMultiple(address[] _to, uint256[] _value) public returns(bool) {\n', '        require(_to.length == _value.length);\n', '        uint256 i = 0;\n', '        while (i < _to.length) {\n', '           _transfer(msg.sender, _to[i], _value[i]);\n', '           i += 1;\n', '        }\n', '        return true;\n', '    }\n', '}']
