['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract ERC827 is ERC20 {\n', '  function approveAndCall(\n', '    address _spender,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '\n', '  function transferAndCall(\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC827Token is ERC827, StandardToken {\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. It allows to\n', '   * @dev approve the transfer of value and execute a call with the sent data.\n', '   *\n', '   * @dev Beware that changing an allowance with this method brings the risk that\n', '   * @dev someone may use both the old and the new allowance by unfortunate\n', '   * @dev transaction ordering. One possible solution to mitigate this race condition\n', '   * @dev is to first reduce the spender&#39;s allowance to 0 and set the desired value\n', '   * @dev afterwards:\n', '   * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * @param _spender The address that will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function approveAndCall(\n', '    address _spender,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.approve(_spender, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '   * @dev address and execute a call with the sent data on the same transaction\n', '   *\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferAndCall(\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transfer(_to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '   * @dev another and make a contract call on the same transaction\n', '   *\n', '   * @param _from The address which you want to send tokens from\n', '   * @param _to The address which you want to transfer to\n', '   * @param _value The amout of tokens to be transferred\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public payable returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transferFrom(_from, _to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To increment\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function increaseApprovalAndCall(\n', '    address _spender,\n', '    uint _addedValue,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.increaseApproval(_spender, _addedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To decrement\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function decreaseApprovalAndCall(\n', '    address _spender,\n', '    uint _subtractedValue,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract TucToken is ERC827Token, Ownable {\n', '\n', '    mapping(address => uint256) preApprovedBalances;\n', '    mapping(address => bool) approvedAccounts;\n', '\n', '    address admin1;\n', '    address admin2;\n', '\n', '    address public accountPubPreSale;\n', '    uint8 public decimals;\n', '\tstring public name;\n', '\tstring public symbol;\n', '\t\n', '\tuint constant pubICOStartsAt = 1541030400; // 1.11.2018 = 1541030400\n', '\n', '    modifier onlyKycTeam {\n', '        require(msg.sender == admin1 || msg.sender == admin2);\n', '        _;\n', '    }\n', '\t\n', '\tmodifier PubICOstarted {\n', '\t\trequire(now >= pubICOStartsAt );\n', '\t\t_;\n', '\t}\n', '\n', '    /**\n', '     * @dev Create new TUC token contract.\n', '     *\n', '     * @param _accountFounder The account for the found tokens that receives 1,024,000,000 tokens on creation.\n', '     * @param _accountPrivPreSale The account for the private pre-sale tokens that receives 1,326,000,000 tokens on creation.\n', '     * @param _accountPubPreSale The account for the public pre-sale tokens that receives 1,500,000,000 tokens on creation.\n', '     * @param _accountSalesMgmt The account for the Sales Management tokens that receives 2,000,000,000 tokens on creation.\n', '     * @param _accountTucWorld The account for the TUC World tokens that receives 2,000.000,000 tokens on creation.\n', '     */\n', '    constructor (\n', '        address _admin1,\n', '        address _admin2,\n', '        address _accountFounder,\n', '        address _accountPrivPreSale,\n', '        address _accountPubPreSale,\n', '        address _accountSalesMgmt,\n', '        address _accountTucWorld)\n', '    public \n', '    payable\n', '    {\n', '        admin1 = _admin1;\n', '        admin2 = _admin2;\n', '        accountPubPreSale = _accountPubPreSale;\n', '        decimals = 18;\n', '\n', '        balances[_accountFounder] = 1024000000 * 10**(decimals);\n', '        balances[_accountPrivPreSale] = 1326000000 * 10**(decimals);\n', '        balances[_accountPubPreSale] = 1500000000 * 10**(decimals);\n', '        balances[_accountSalesMgmt] = 2000000000 * 10**(decimals);\n', '        balances[_accountTucWorld] = 2000000000 * 10**(decimals);\n', '        totalSupply_ += balances[_accountFounder];\n', '        totalSupply_ += balances[_accountPrivPreSale];\n', '        totalSupply_ += balances[_accountPubPreSale];\n', '        totalSupply_ += balances[_accountSalesMgmt];\n', '        totalSupply_ += balances[_accountTucWorld];\n', '\t\t\n', '\tname = "TUC.World";\n', '\tsymbol = "TUC";\n', '    }\n', '\n', '    /**\n', '     * @dev During the public ICO users can buy TUC tokens by sending ETH to this method.\n', '     * @dev The price per token is fixed to 0.00000540 ETH / TUC.\n', '     *\n', '     * @dev The buyer will receive his tokens after successful KYC approval by the TUC team. In case KYC is refused,\n', '     * @dev the send ETH funds are send back to the buyer and no TUC tokens will be delivered.\n', '     */\n', '    function buyToken()\n', '    payable\n', '    external\n', '\tPubICOstarted\n', '    {\n', '        uint256 tucAmount = (msg.value * 10**(decimals)) / 5400000000000;\n', '        require(balances[accountPubPreSale] >= tucAmount);\n', '\n', '        if (approvedAccounts[msg.sender]) {\n', '            // already kyc approved\n', '            balances[msg.sender] += tucAmount;\n', '        } else {\n', '            // not kyc approved\n', '            preApprovedBalances[msg.sender] += tucAmount;\n', '        }\n', '        balances[accountPubPreSale] -= tucAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve KYC of a user, who contributed in ETH.\n', '     * @dev Deliver the tokens to the user&#39;s account and move the ETH balance to the TUC contract.\n', '     *\n', '     * @param _user The account of the user to approve KYC.\n', '     */\n', '    function kycApprove(address _user)\n', '    external\n', '    onlyKycTeam\n', '    {\n', '        // account is approved\n', '        approvedAccounts[_user] = true;\n', '        // move balance for this account to "real" balances\n', '        balances[_user] += preApprovedBalances[_user];\n', '        // account has no more "unapproved" balance\n', '        preApprovedBalances[_user] = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Refusing KYC of a user, who contributed in ETH.\n', '     * @dev Send back the ETH funds and deny delivery of TUC tokens.\n', '     *\n', '     * @param _user The account of the user to refuse KYC.\n', '     */\n', '    function kycRefuse(address _user)\n', '    external\n', '    onlyKycTeam\n', '    {\n', '\t\trequire(approvedAccounts[_user] == false);\n', '        uint256 tucAmount = preApprovedBalances[_user];\n', '        uint256 weiAmount = (tucAmount * 5400000000000) / 10**(decimals);\n', '        // account is not approved now\n', '        approvedAccounts[_user] = false;\n', '        // pubPreSale gets back its tokens\n', '        balances[accountPubPreSale] += tucAmount;\n', '        // user has no more balance\n', '        preApprovedBalances[_user] = 0;\n', '        // we transfer the eth back to the user that were used to buy the tokens\n', '        _user.transfer(weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Retrieve ETH from the contract.\n', '     *\n', '     * @dev The contract owner can use this method to transfer received ETH to another wallet.\n', '     *\n', '     * @param _safe The address of the wallet the funds should get transferred to.\n', '     * @param _value The amount of ETH to transfer.\n', '     */\n', '    function retrieveEth(address _safe, uint256 _value)\n', '    external\n', '    onlyOwner\n', '    {\n', '        _safe.transfer(_value);\n', '    }\n', '}']