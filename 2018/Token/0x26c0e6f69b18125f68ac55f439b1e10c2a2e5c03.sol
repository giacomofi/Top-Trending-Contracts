['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '    assert(msg.data.length >= size + 4);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood:\n', '        https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) external onlyPayloadSize(2 * 32) returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) external onlyPayloadSize(2 * 32) returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '        allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract Owners {\n', '\n', '  mapping (address => bool) public owners;\n', '  uint public ownersCount;\n', '  uint public minOwnersRequired = 2;\n', '\n', '  event OwnerAdded(address indexed owner);\n', '  event OwnerRemoved(address indexed owner);\n', '\n', '  /**\n', '   * @dev initializes contract\n', '   * @param withDeployer bool indicates whether deployer is part of owners\n', '   */\n', '  constructor(bool withDeployer) public {\n', '    if (withDeployer) {\n', '      ownersCount++;\n', '      owners[msg.sender] = true;\n', '    }\n', '    owners[0x23B599A0949C6147E05C267909C16506C7eFF229] = true;\n', '    owners[0x286A70B3E938FCa244208a78B1823938E8e5C174] = true;\n', '    ownersCount = ownersCount + 2;\n', '  }\n', '\n', '  /**\n', '   * @dev adds owner, can only by done by owners only\n', '   * @param _address address the address to be added\n', '   */\n', '  function addOwner(address _address) public ownerOnly {\n', '    require(_address != address(0));\n', '    owners[_address] = true;\n', '    ownersCount++;\n', '    emit OwnerAdded(_address);\n', '  }\n', '\n', '  /**\n', '   * @dev removes owner, can only by done by owners only\n', '   * @param _address address the address to be removed\n', '   */\n', '  function removeOwner(address _address) public ownerOnly notOwnerItself(_address) minOwners {\n', '    require(owners[_address] == true);\n', '    owners[_address] = false;\n', '    ownersCount--;\n', '    emit OwnerRemoved(_address);\n', '  }\n', '\n', '  /**\n', '   * @dev checks if sender is owner\n', '   */\n', '  modifier ownerOnly {\n', '    require(owners[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  modifier notOwnerItself(address _owner) {\n', '    require(msg.sender != _owner);\n', '    _;\n', '  }\n', '\n', '  modifier minOwners {\n', '    require(ownersCount > minOwnersRequired);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Owners(true) {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  event MintStarted();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) external ownerOnly canMint onlyPayloadSize(2 * 32) returns (bool) {\n', '    return internalMint(_to, _amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public ownerOnly canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to start minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function startMinting() public ownerOnly returns (bool) {\n', '    mintingFinished = false;\n', '    emit MintStarted();\n', '    return true;\n', '  }\n', '\n', '  function internalMint(address _to, uint256 _amount) internal returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract REIDAOMintableToken is MintableToken {\n', '\n', '  uint public decimals = 8;\n', '\n', '  bool public tradingStarted = false;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) public canTrade returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) public canTrade returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier that throws if trading has not started yet\n', '   */\n', '  modifier canTrade() {\n', '    require(tradingStarted);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to enable the trading. Done only once.\n', '   */\n', '  function startTrading() public ownerOnly {\n', '    tradingStarted = true;\n', '  }\n', '}\n', '\n', 'contract REIDAOMintableLockableToken is REIDAOMintableToken {\n', '\n', '  struct TokenLock {\n', '    uint256 value;\n', '    uint lockedUntil;\n', '  }\n', '\n', '  mapping (address => TokenLock[]) public locks;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) public canTransfer(msg.sender, _value) returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint _value) public canTransfer(msg.sender, _value) returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows authorized callers to lock `_value` tokens belong to `_to` until timestamp `_lockUntil`.\n', '   * This function can be called independently of transferAndLockTokens(), hence the double checking of timestamp.\n', '   * @param _to address The address to be locked.\n', '   * @param _value uint The amout of tokens to be locked.\n', '   * @param _lockUntil uint The UNIX timestamp tokens are locked until.\n', '   */\n', '  function lockTokens(address _to, uint256 _value, uint256 _lockUntil) public ownerOnly {\n', '    require(_value <= balanceOf(_to));\n', '    require(_lockUntil > now);\n', '    locks[_to].push(TokenLock(_value, _lockUntil));\n', '  }\n', '\n', '  /**\n', '   * @dev Allows authorized callers to mint `_value` tokens for `_to`, and lock them until timestamp `_lockUntil`.\n', '   * @param _to address The address to which tokens to be minted and locked.\n', '   * @param _value uint The amout of tokens to be minted and locked.\n', '   * @param _lockUntil uint The UNIX timestamp tokens are locked until.\n', '   */\n', '  function mintAndLockTokens(address _to, uint256 _value, uint256 _lockUntil) public ownerOnly {\n', '    require(_lockUntil > now);\n', '    internalMint(_to, _value);\n', '    lockTokens(_to, _value, _lockUntil);\n', '  }\n', '\n', '  /**\n', '   * @dev Checks the amount of transferable tokens belongs to `_holder`.\n', '   * @param _holder address The address to be checked.\n', '   */\n', '  function transferableTokens(address _holder) public constant returns (uint256) {\n', '    uint256 lockedTokens = getLockedTokens(_holder);\n', '    return balanceOf(_holder).sub(lockedTokens);\n', '  }\n', '\n', '  /**\n', '   * @dev Retrieves the amount of locked tokens `_holder` has.\n', '   * @param _holder address The address to be checked.\n', '   */\n', '  function getLockedTokens(address _holder) public constant returns (uint256) {\n', '    uint256 numLocks = getTokenLocksCount(_holder);\n', '\n', '    // Iterate through all the locks the holder has\n', '    uint256 lockedTokens = 0;\n', '    for (uint256 i = 0; i < numLocks; i++) {\n', '      if (locks[_holder][i].lockedUntil >= now) {\n', '        lockedTokens = lockedTokens.add(locks[_holder][i].value);\n', '      }\n', '    }\n', '\n', '    return lockedTokens;\n', '  }\n', '\n', '  /**\n', '   * @dev Retrieves the number of token locks `_holder` has.\n', '   * @param _holder address The address the token locks belongs to.\n', '   * @return A uint256 representing the total number of locks.\n', '   */\n', '  function getTokenLocksCount(address _holder) internal constant returns (uint256 index) {\n', '    return locks[_holder].length;\n', '  }\n', '\n', '  /**\n', "   * @dev Modifier that throws if `_value` amount of tokens can't be transferred.\n", '   * @param _sender address the address of the sender\n', '   * @param _value uint the amount of tokens intended to be transferred\n', '   */\n', '  modifier canTransfer(address _sender, uint256 _value) {\n', '    uint256 transferableTokensAmt = transferableTokens(_sender);\n', '    require(_value <= transferableTokensAmt);\n', '    // delete locks if all locks are cleared\n', '    if (transferableTokensAmt == balanceOf(_sender) && getTokenLocksCount(_sender) > 0) {\n', '      delete locks[_sender];\n', '    }\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '    }\n', '}\n', '\n', 'contract REIDAOBurnableToken is BurnableToken {\n', '\n', '  mapping (address => bool) public hostedWallets;\n', '\n', '  /**\n', '   * @dev burns tokens, can only be done by hosted wallets\n', '   * @param _value uint256 the amount of tokens to be burned\n', '   */\n', '  function burn(uint256 _value) public hostedWalletsOnly {\n', '    return super.burn(_value);\n', '  }\n', '\n', '  /**\n', '   * @dev adds hosted wallet\n', '   * @param _wallet address the address to be added\n', '   */\n', '  function addHostedWallet(address _wallet) public {\n', '    hostedWallets[_wallet] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev removes hosted wallet\n', '   * @param _wallet address the address to be removed\n', '   */\n', '  function removeHostedWallet(address _wallet) public {\n', '    hostedWallets[_wallet] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev checks if sender is hosted wallets\n', '   */\n', '  modifier hostedWalletsOnly {\n', '    require(hostedWallets[msg.sender] == true);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract REIDAOMintableBurnableLockableToken is REIDAOMintableLockableToken, REIDAOBurnableToken {\n', '\n', '  /**\n', '   * @dev adds hosted wallet, can only be done by owners.\n', '   * @param _wallet address the address to be added\n', '   */\n', '  function addHostedWallet(address _wallet) public ownerOnly {\n', '    return super.addHostedWallet(_wallet);\n', '  }\n', '\n', '  /**\n', '   * @dev removes hosted wallet, can only be done by owners.\n', '   * @param _wallet address the address to be removed\n', '   */\n', '  function removeHostedWallet(address _wallet) public ownerOnly {\n', '    return super.removeHostedWallet(_wallet);\n', '  }\n', '\n', '  /**\n', '   * @dev burns tokens, can only be done by hosted wallets\n', '   * @param _value uint256 the amount of tokens to be burned\n', '   */\n', '  function burn(uint256 _value) public canTransfer(msg.sender, _value) {\n', '    return super.burn(_value);\n', '  }\n', '}\n', '\n', 'contract Point is REIDAOMintableBurnableLockableToken {\n', '  string public name = "Crowdvilla Point";\n', '  string public symbol = "CROWD";\n', '}']