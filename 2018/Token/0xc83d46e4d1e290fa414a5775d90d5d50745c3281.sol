['pragma solidity ^0.4.16;\n', '\n', 'contract TargetHit {\n', '    string public name = "Target Hit";      //  token name\n', '    string public symbol = "TGH";           //  token symbol\n', '    string public version = "1";\n', '    uint256 public decimals = 8;            //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    uint256 public totalSupply = 33333333300000000;\n', '\n', '    bool public stopped = true;\n', '\n', '    uint256 public price = 30000300003000;\n', '    //000 000 000 000 000 000\n', '\n', '    address owner = 0x98E030f942F79AE61010BcBC414e7e7b945DcA33;\n', '    address devteam = 0xc878b604C35dd3fb5cdDA1Ff1a019568e2A0d1c5;\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        uint256 Supply = totalSupply * 33 / 100;\n', '        balanceOf[devteam] = Supply;\n', '        emit Transfer(0x0, devteam, Supply);\n', '        Supply = totalSupply - Supply;\n', '        balanceOf[owner] = Supply;\n', '        emit Transfer(0x0, owner, Supply);\n', '    }\n', '\n', '    function changeOwner(address _newaddress) isOwner public {\n', '        owner = _newaddress;\n', '    }\n', '\n', '    function setPrices(uint256 newPrice) isOwner public {\n', '        price = newPrice;\n', '    }\n', '\n', '    function buy() public payable returns (uint amount){\n', '        require(stopped == false);\n', '        amount = msg.value / price;                    // calculates the amount\n', '        require(balanceOf[owner] >= amount);               // checks if it has enough to sell\n', '        balanceOf[msg.sender] += amount;                  // adds the amount to buyer&#39;s balance\n', '        balanceOf[owner] -= amount;                        // subtracts amount from seller&#39;s balance\n', '        owner.transfer(msg.value);\n', '        emit Transfer(owner, msg.sender, amount);               // execute an event reflecting the change\n', '        return amount;                                    // ends function and returns\n', '    }\n', '\n', '\n', '    function GetPrice() public view returns (uint256) {\n', '      return price;\n', '    }\n', '\n', '    function deployTokens (uint256[] _amounts, address[] _recipient) public isOwner {\n', '        for(uint i = 0; i< _recipient.length; i++)\n', '        {\n', '            if (_amounts[i] > 0) {\n', '              if (transferfromOwner(_recipient[i], _amounts[i])){\n', '                totalSupply = totalSupply - _amounts[i];\n', '              }\n', '            }\n', '        }\n', '    }\n', '\n', '    function transferfromOwner(address _to, uint256 _value) private returns (bool success) {\n', '        require(balanceOf[owner] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[owner] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(owner, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() public isOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() public isOwner {\n', '        stopped = false;\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract TargetHit {\n', '    string public name = "Target Hit";      //  token name\n', '    string public symbol = "TGH";           //  token symbol\n', '    string public version = "1";\n', '    uint256 public decimals = 8;            //  token digit\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    uint256 public totalSupply = 33333333300000000;\n', '\n', '    bool public stopped = true;\n', '\n', '    uint256 public price = 30000300003000;\n', '    //000 000 000 000 000 000\n', '\n', '    address owner = 0x98E030f942F79AE61010BcBC414e7e7b945DcA33;\n', '    address devteam = 0xc878b604C35dd3fb5cdDA1Ff1a019568e2A0d1c5;\n', '\n', '    modifier isOwner {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        assert (!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        assert(0x0 != msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        uint256 Supply = totalSupply * 33 / 100;\n', '        balanceOf[devteam] = Supply;\n', '        emit Transfer(0x0, devteam, Supply);\n', '        Supply = totalSupply - Supply;\n', '        balanceOf[owner] = Supply;\n', '        emit Transfer(0x0, owner, Supply);\n', '    }\n', '\n', '    function changeOwner(address _newaddress) isOwner public {\n', '        owner = _newaddress;\n', '    }\n', '\n', '    function setPrices(uint256 newPrice) isOwner public {\n', '        price = newPrice;\n', '    }\n', '\n', '    function buy() public payable returns (uint amount){\n', '        require(stopped == false);\n', '        amount = msg.value / price;                    // calculates the amount\n', '        require(balanceOf[owner] >= amount);               // checks if it has enough to sell\n', "        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n", "        balanceOf[owner] -= amount;                        // subtracts amount from seller's balance\n", '        owner.transfer(msg.value);\n', '        emit Transfer(owner, msg.sender, amount);               // execute an event reflecting the change\n', '        return amount;                                    // ends function and returns\n', '    }\n', '\n', '\n', '    function GetPrice() public view returns (uint256) {\n', '      return price;\n', '    }\n', '\n', '    function deployTokens (uint256[] _amounts, address[] _recipient) public isOwner {\n', '        for(uint i = 0; i< _recipient.length; i++)\n', '        {\n', '            if (_amounts[i] > 0) {\n', '              if (transferfromOwner(_recipient[i], _amounts[i])){\n', '                totalSupply = totalSupply - _amounts[i];\n', '              }\n', '            }\n', '        }\n', '    }\n', '\n', '    function transferfromOwner(address _to, uint256 _value) private returns (bool success) {\n', '        require(balanceOf[owner] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[owner] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(owner, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() public isOwner {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() public isOwner {\n', '        stopped = false;\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}']
