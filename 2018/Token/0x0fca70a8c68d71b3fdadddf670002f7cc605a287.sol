['pragma solidity ^0.4.20;\n', '\n', '//*************** SafeMath ***************\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b > 0);\n', '      uint256 c = a / b;\n', '      return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '  }\n', '}\n', '\n', '//*************** Ownable *************** \n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  address public admin;\n', '\n', '  function Ownable() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  modifier onlyOwnerAdmin() {\n', '      require(msg.sender == owner || msg.sender == admin);\n', '      _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner)public onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '  }\n', '  function setAdmin(address _admin)public onlyOwner {\n', '      admin = _admin;\n', '  }\n', '\n', '}\n', '\n', '//************* ERC20 *************** \n', '\n', 'contract ERC20 {\n', '  \n', '  function balanceOf(address who)public constant returns (uint256);\n', '  function transfer(address to, uint256 value)public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value)public returns (bool);\n', '  function allowance(address owner, address spender)public constant returns (uint256);\n', '  function approve(address spender, uint256 value)public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract UtradeToken is ERC20,Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\t// Token Info.\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint256 public totalSupply;\n', '\tuint256 public constant decimals = 8;\n', '\n', '\n', '\tmapping (address => uint256) public balanceOf;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\n', '\tevent FundTransfer(address fundWallet, uint256 amount);\n', '\tevent Logs(string);\n', '\n', '\tconstructor( ) public {  \t\t\n', '\t\tname="UTP FOUNDATION";\n', '\t\tsymbol="UTP";\n', '\t\ttotalSupply = 1000000000*(10**decimals);\n', '\t\tbalanceOf[msg.sender] = totalSupply;\t\n', '\t}\n', '\n', '\tfunction balanceOf(address _who)public constant returns (uint256 balance) {\n', '\t    return balanceOf[_who];\n', '\t}\n', '\n', '\tfunction _transferFrom(address _from, address _to, uint256 _value)  internal {\n', '\t\trequire(_from != 0x0);\n', '\t    require(_to != 0x0);\n', '\t    require(balanceOf[_from] >= _value);\n', '\t    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '\t    uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\n', '\t    balanceOf[_from] = balanceOf[_from].sub(_value);\n', '\t    balanceOf[_to] = balanceOf[_to].add(_value);\n', '\n', '\t    emit Transfer(_from, _to, _value);\n', '\n', '\t    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '\t}\n', '\t\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool){\t    \n', '\t    _transferFrom(msg.sender,_to,_value);\n', '\t    return true;\n', '\t}\n', '\tfunction transferLog(address _to, uint256 _value,string logs) public returns (bool){\n', '\t\t_transferFrom(msg.sender,_to,_value);\n', '\t\temit Logs(logs);\n', '\t    return true;\n', '\t}\n', '\t\n', '\tfunction ()public {\n', '\t}\n', '\n', '\n', '\tfunction allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '\t    return allowed[_owner][_spender];\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value)public returns (bool) {\n', '\t    allowed[msg.sender][_spender] = _value;\n', '\t    emit Approval(msg.sender, _spender, _value);\n', '\t    return true;\n', '\t}\n', '\t\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n', '\t    require(_from != 0x0);\n', '\t    require(_to != 0x0);\n', '\t    require(_value > 0);\n', '\t    require (allowed[_from][msg.sender] >= _value);\n', '\t    require(balanceOf[_from] >= _value);\n', '\t    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \n', '\t     \n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function mintToken(address _target, uint256 _mintedAmount) onlyOwner public {\n', '        require(_target != 0x0);\n', '        require(_mintedAmount > 0);\n', '        require(totalSupply + _mintedAmount > totalSupply);\n', '        require(balanceOf[_target] + _mintedAmount > balanceOf[_target]);\n', '        balanceOf[_target] = balanceOf[_target].add(_mintedAmount);\n', '        totalSupply = totalSupply.add(_mintedAmount);\n', '        emit Transfer(0, this, _mintedAmount);\n', '        emit Transfer(this, _target, _mintedAmount);\n', '    }\n', '\n', '    function transferA2B(address _from ,address _to) onlyOwnerAdmin public {\t \n', '    \trequire(_from != 0x0);\n', '\t    require(_to != 0x0);  \t  \n', '    \trequire(balanceOf[_from] > 0); \n', '    \t//require(balanceOf[_to] == 0); \n', '\t    _transferFrom(_from,_to,balanceOf[_from]);\t   \n', '\t}\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '//*************** SafeMath ***************\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b > 0);\n', '      uint256 c = a / b;\n', '      return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '  }\n', '}\n', '\n', '//*************** Ownable *************** \n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  address public admin;\n', '\n', '  function Ownable() public {\n', '      owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  modifier onlyOwnerAdmin() {\n', '      require(msg.sender == owner || msg.sender == admin);\n', '      _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner)public onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '  }\n', '  function setAdmin(address _admin)public onlyOwner {\n', '      admin = _admin;\n', '  }\n', '\n', '}\n', '\n', '//************* ERC20 *************** \n', '\n', 'contract ERC20 {\n', '  \n', '  function balanceOf(address who)public constant returns (uint256);\n', '  function transfer(address to, uint256 value)public returns (bool);\n', '  function transferFrom(address from, address to, uint256 value)public returns (bool);\n', '  function allowance(address owner, address spender)public constant returns (uint256);\n', '  function approve(address spender, uint256 value)public returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract UtradeToken is ERC20,Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\t// Token Info.\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint256 public totalSupply;\n', '\tuint256 public constant decimals = 8;\n', '\n', '\n', '\tmapping (address => uint256) public balanceOf;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\n', '\tevent FundTransfer(address fundWallet, uint256 amount);\n', '\tevent Logs(string);\n', '\n', '\tconstructor( ) public {  \t\t\n', '\t\tname="UTP FOUNDATION";\n', '\t\tsymbol="UTP";\n', '\t\ttotalSupply = 1000000000*(10**decimals);\n', '\t\tbalanceOf[msg.sender] = totalSupply;\t\n', '\t}\n', '\n', '\tfunction balanceOf(address _who)public constant returns (uint256 balance) {\n', '\t    return balanceOf[_who];\n', '\t}\n', '\n', '\tfunction _transferFrom(address _from, address _to, uint256 _value)  internal {\n', '\t\trequire(_from != 0x0);\n', '\t    require(_to != 0x0);\n', '\t    require(balanceOf[_from] >= _value);\n', '\t    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '\t    uint256 previousBalances = balanceOf[_from] + balanceOf[_to];\n', '\n', '\t    balanceOf[_from] = balanceOf[_from].sub(_value);\n', '\t    balanceOf[_to] = balanceOf[_to].add(_value);\n', '\n', '\t    emit Transfer(_from, _to, _value);\n', '\n', '\t    assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '\t}\n', '\t\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool){\t    \n', '\t    _transferFrom(msg.sender,_to,_value);\n', '\t    return true;\n', '\t}\n', '\tfunction transferLog(address _to, uint256 _value,string logs) public returns (bool){\n', '\t\t_transferFrom(msg.sender,_to,_value);\n', '\t\temit Logs(logs);\n', '\t    return true;\n', '\t}\n', '\t\n', '\tfunction ()public {\n', '\t}\n', '\n', '\n', '\tfunction allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '\t    return allowed[_owner][_spender];\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value)public returns (bool) {\n', '\t    allowed[msg.sender][_spender] = _value;\n', '\t    emit Approval(msg.sender, _spender, _value);\n', '\t    return true;\n', '\t}\n', '\t\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n', '\t    require(_from != 0x0);\n', '\t    require(_to != 0x0);\n', '\t    require(_value > 0);\n', '\t    require (allowed[_from][msg.sender] >= _value);\n', '\t    require(balanceOf[_from] >= _value);\n', '\t    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \n', '\t     \n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function mintToken(address _target, uint256 _mintedAmount) onlyOwner public {\n', '        require(_target != 0x0);\n', '        require(_mintedAmount > 0);\n', '        require(totalSupply + _mintedAmount > totalSupply);\n', '        require(balanceOf[_target] + _mintedAmount > balanceOf[_target]);\n', '        balanceOf[_target] = balanceOf[_target].add(_mintedAmount);\n', '        totalSupply = totalSupply.add(_mintedAmount);\n', '        emit Transfer(0, this, _mintedAmount);\n', '        emit Transfer(this, _target, _mintedAmount);\n', '    }\n', '\n', '    function transferA2B(address _from ,address _to) onlyOwnerAdmin public {\t \n', '    \trequire(_from != 0x0);\n', '\t    require(_to != 0x0);  \t  \n', '    \trequire(balanceOf[_from] > 0); \n', '    \t//require(balanceOf[_to] == 0); \n', '\t    _transferFrom(_from,_to,balanceOf[_from]);\t   \n', '\t}\n', '}']
