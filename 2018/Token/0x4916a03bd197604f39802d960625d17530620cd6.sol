['/* ==================================================================== */\n', '/* Copyright (c) 2018 The TokenTycoon Project.  All rights reserved.\n', '/* \n', '/* https://tokentycoon.io\n', '/*  \n', '/* authors <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="dcaeb5bfb7b4a9b2a8b9aef2afb4b9b29cbbb1bdb5b0f2bfb3b1">[email&#160;protected]</a>   \n', '/*         <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0a79796f797f646e63646d4a6d676b636624696567">[email&#160;protected]</a>            \n', '/* ==================================================================== */\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', 'contract AccessAdmin {\n', '    bool public isPaused = false;\n', '    address public addrAdmin;  \n', '\n', '    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n', '\n', '    constructor() public {\n', '        addrAdmin = msg.sender;\n', '    }  \n', '\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == addrAdmin);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!isPaused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(isPaused);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _newAdmin) external onlyAdmin {\n', '        require(_newAdmin != address(0));\n', '        emit AdminTransferred(addrAdmin, _newAdmin);\n', '        addrAdmin = _newAdmin;\n', '    }\n', '\n', '    function doPause() external onlyAdmin whenNotPaused {\n', '        isPaused = true;\n', '    }\n', '\n', '    function doUnpause() external onlyAdmin whenPaused {\n', '        isPaused = false;\n', '    }\n', '}\n', '\n', 'interface TokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n', '}\n', '\n', 'contract TalentCard is AccessAdmin {\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 1000000000;\n', '    string public name = "Token Tycoon Talent Card";\n', '    string public symbol = "TTTC";\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping(address => uint256)) allowed;\n', '    /// @dev Trust contract\n', '    mapping (address => bool) safeContracts;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    constructor() public {\n', '        addrAdmin = msg.sender;\n', '\n', '        balances[this] = totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) external view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] -= _value;\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool) {\n', '        return _transfer(msg.sender, _to, _value);     \n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '        uint256 oldFromVal = balances[_from];\n', '        require(_value > 0 && oldFromVal >= _value);\n', '        uint256 oldToVal = balances[_to];\n', '        uint256 newToVal = oldToVal + _value;\n', '        require(newToVal > oldToVal);\n', '        uint256 newFromVal = oldFromVal - _value;\n', '        balances[_from] = newFromVal;\n', '        balances[_to] = newToVal;\n', '\n', '        assert((oldFromVal + oldToVal) == (newFromVal + newToVal));\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        external\n', '        returns (bool success) {\n', '        TokenRecipient spender = TokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function setSafeContract(address _actionAddr, bool _useful) external onlyAdmin {\n', '        safeContracts[_actionAddr] = _useful;\n', '    }\n', '\n', '    function getSafeContract(address _actionAddr) external view onlyAdmin returns(bool) {\n', '        return safeContracts[_actionAddr];\n', '    }\n', '\n', '    function safeSendCard(uint256 _amount, address _to) external {\n', '        require(safeContracts[msg.sender]);\n', '        require(balances[address(this)] >= _amount);\n', '        require(_to != address(0));\n', '\n', '        _transfer(address(this), _to, _amount);\n', '    }\n', '}']
['/* ==================================================================== */\n', '/* Copyright (c) 2018 The TokenTycoon Project.  All rights reserved.\n', '/* \n', '/* https://tokentycoon.io\n', '/*  \n', '/* authors rickhunter.shen@gmail.com   \n', '/*         ssesunding@gmail.com            \n', '/* ==================================================================== */\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', 'contract AccessAdmin {\n', '    bool public isPaused = false;\n', '    address public addrAdmin;  \n', '\n', '    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n', '\n', '    constructor() public {\n', '        addrAdmin = msg.sender;\n', '    }  \n', '\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == addrAdmin);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!isPaused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(isPaused);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _newAdmin) external onlyAdmin {\n', '        require(_newAdmin != address(0));\n', '        emit AdminTransferred(addrAdmin, _newAdmin);\n', '        addrAdmin = _newAdmin;\n', '    }\n', '\n', '    function doPause() external onlyAdmin whenNotPaused {\n', '        isPaused = true;\n', '    }\n', '\n', '    function doUnpause() external onlyAdmin whenPaused {\n', '        isPaused = false;\n', '    }\n', '}\n', '\n', 'interface TokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n', '}\n', '\n', 'contract TalentCard is AccessAdmin {\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 1000000000;\n', '    string public name = "Token Tycoon Talent Card";\n', '    string public symbol = "TTTC";\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping(address => uint256)) allowed;\n', '    /// @dev Trust contract\n', '    mapping (address => bool) safeContracts;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    constructor() public {\n', '        addrAdmin = msg.sender;\n', '\n', '        balances[this] = totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) external view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        allowed[_from][msg.sender] -= _value;\n', '        return _transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool) {\n', '        return _transfer(msg.sender, _to, _value);     \n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_to != address(0));\n', '        uint256 oldFromVal = balances[_from];\n', '        require(_value > 0 && oldFromVal >= _value);\n', '        uint256 oldToVal = balances[_to];\n', '        uint256 newToVal = oldToVal + _value;\n', '        require(newToVal > oldToVal);\n', '        uint256 newFromVal = oldFromVal - _value;\n', '        balances[_from] = newFromVal;\n', '        balances[_to] = newToVal;\n', '\n', '        assert((oldFromVal + oldToVal) == (newFromVal + newToVal));\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        external\n', '        returns (bool success) {\n', '        TokenRecipient spender = TokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function setSafeContract(address _actionAddr, bool _useful) external onlyAdmin {\n', '        safeContracts[_actionAddr] = _useful;\n', '    }\n', '\n', '    function getSafeContract(address _actionAddr) external view onlyAdmin returns(bool) {\n', '        return safeContracts[_actionAddr];\n', '    }\n', '\n', '    function safeSendCard(uint256 _amount, address _to) external {\n', '        require(safeContracts[msg.sender]);\n', '        require(balances[address(this)] >= _amount);\n', '        require(_to != address(0));\n', '\n', '        _transfer(address(this), _to, _amount);\n', '    }\n', '}']
