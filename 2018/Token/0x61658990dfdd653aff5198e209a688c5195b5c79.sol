['pragma solidity ^0.4.24;\n', '/*\n', '* 1st Crypto Trader (DTH)\n', '*/\n', 'library SafeMath {\n', ' function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     if (a == 0) {\n', '         return 0;\n', '     }\n', '     uint256 c = a * b;\n', '     assert(c / a == b);\n', '     return c;\n', ' }\n', '\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '     uint256 c = a / b;\n', '     // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '     return c;\n', ' }\n', '\n', ' function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     assert(b <= a);\n', '     return a - b;\n', ' }\n', '\n', ' function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     uint256 c = a + b;\n', '     assert(c >= a);\n', '     return c;\n', ' }\n', '}\n', '\n', '\n', 'contract CryptoTrader {\n', ' using SafeMath for uint256;\n', ' mapping(address => uint256) balances; // array with all balances\n', ' mapping (address => mapping (address => uint256)) internal allowed;\n', ' mapping (address => uint256) public ETHBalance; // array with spend ETH\n', '\n', ' uint256 public totalSupply; // emitted tokens\n', ' address public contract_owner_address;\n', '\n', ' event Transfer(address indexed from, address indexed to, uint256 value);\n', ' event Approval(address indexed owner, address indexed buyer, uint256 value);\n', ' event Burn(address indexed burner, uint256 value);\n', '\n', ' string public constant name = "Digital Humanity Token";\n', ' string public constant symbol = "DHT";\n', ' uint8 public decimals = 0;\n', ' uint public start_sale = 1537952400; // start of presale Thu, 26 Sep 2018 09:00:00 GMT\n', ' uint public presalePeriod = 61; // presale period in days\n', ' address public affiliateAddress ;\n', '\n', ' uint public maxAmountPresale_USD = 40000000; // 400,000 US dollars.\n', ' uint public soldAmount_USD = 0; // current tokens sale amount in US dollars\n', '\n', '\n', ' /* Initializes contract with initial supply tokens to the creator of the contract */\n', ' constructor (\n', '     uint256 initialSupply,\n', '     address _affiliateAddress\n', ' ) public {\n', '     totalSupply = initialSupply;\n', '     affiliateAddress = _affiliateAddress;\n', '     contract_owner_address = msg.sender;\n', '     balances[contract_owner_address] = getPercent(totalSupply,75); // tokens for selling\n', '     balances[affiliateAddress] = getPercent(totalSupply,25); //  affiliate 15% developers 10%\n', ' }\n', '\n', ' /**\n', ' * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', ' *\n', ' * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', ' * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', ' * race condition is to first reduce the buyer&#39;s allowance to 0 and set the desired value afterwards:\n', ' * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', ' * @param _buyer The address which will spend the funds.\n', ' * @param _value The amount of tokens to be spent.\n', ' */\n', ' function approve(address _buyer, uint256 _value) public returns (bool) {\n', '     allowed[msg.sender][_buyer] = _value;\n', '     emit Approval(msg.sender, _buyer, _value);\n', '     return true;\n', ' }\n', '\n', ' /**\n', ' * @dev Function to check the amount of tokens that an owner allowed to a buyer.\n', ' * @param _owner address The address which owns the funds.\n', ' * @param _buyer address The address which will spend the funds.\n', ' * @return A uint256 specifying the amount of tokens still available for the buyer.\n', ' */\n', ' function allowance(address _owner, address _buyer) public view returns (uint256) {\n', '     return allowed[_owner][_buyer];\n', ' }\n', '\n', ' /**\n', ' * @dev Gets the balance of the specified address.\n', ' * @param _owner The address to query the the balance of.\n', ' * @return An uint256 representing the amount owned by the passed address.\n', ' */\n', ' function balanceOf(address _owner) public view returns (uint256 balance) {\n', '     return balances[_owner];\n', ' }\n', '\n', ' /**\n', ' * @dev Transfer tokens from one address to another\n', ' * @param _from address The address which you want to send tokens from\n', ' * @param _to address The address which you want to transfer to\n', ' * @param _value uint256 the amount of tokens to be transferred\n', ' */\n', ' function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[_from]);\n', '     require(_value <= allowed[_from][msg.sender]);\n', '\n', '     balances[_from] = balances[_from].sub(_value);\n', '     balances[_to] = balances[_to].add(_value);\n', '     allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '     emit Transfer(_from, _to, _value);\n', '     return true;\n', ' }\n', '\n', ' /**\n', ' * @dev transfer token for a specified address\n', ' * @param _to The address to transfer to.\n', ' * @param _value The amount to be transferred.\n', ' */\n', ' \n', ' function transfer(address _to, uint256 _value) public returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[msg.sender]);\n', '\n', '     // SafeMath.sub will throw if there is not enough balance.\n', '     balances[msg.sender] = balances[msg.sender].sub(_value);\n', '     balances[_to] = balances[_to].add(_value);\n', '     emit Transfer(msg.sender, _to, _value);\n', '     return true;\n', ' }\n', '\n', ' /**\n', ' * @dev sale token for a specified address\n', ' * @param _to The address to transfer to.\n', ' * @param _value The amount to be transferred.\n', ' * @param _eth_price spended eth for buying tokens.\n', ' * @param _usd_amount spended usd for buying tokens.\n', ' */\n', ' \n', ' function transferSale(address _to, uint256 _value, uint256 _eth_price, uint256 _usd_amount) public  returns (bool success) {\n', '     transfer(_to, _value);\n', '     ETHBalance[_to] = ETHBalance[_to].add(_eth_price);\n', '     soldAmount_USD += _usd_amount;\n', '     return true;\n', ' }\n', '\n', ' /**\n', ' * @dev Burns a specific amount of tokens.\n', ' * @param _value The amount of token to be burned.\n', ' */\n', ' \n', ' function burn(uint256 _value) public {\n', '     require(_value <= balances[msg.sender]);\n', '     address burner = msg.sender;\n', '     balances[burner] = balances[burner].sub(_value);\n', '     totalSupply = totalSupply.sub(_value);\n', '     emit Burn(burner, _value);\n', ' }\n', '\n', ' /**\n', ' * @dev Refund request.\n', ' * @param _to The address for refund.\n', ' */\n', ' \n', ' function refund(address _to) public payable returns(bool){\n', '     require(address(this).balance > 0);\n', '     uint256 _value = balances[_to];\n', '     uint256 ether_value = ETHBalance[_to];\n', '     require(now > start_sale + presalePeriod * 1 days && soldAmount_USD < maxAmountPresale_USD);\n', '     require(_value > 0);\n', '     require(ether_value > 0);\n', '     balances[_to] = balances[_to].sub(_value);\n', '     balances[contract_owner_address] = balances[contract_owner_address].add(_value);\n', '     ETHBalance[_to] = 0;\n', '     approve(_to, ether_value);\n', '     address(_to).transfer(ether_value);\n', '     return true;\n', ' }\n', '\n', ' /**\n', ' * @dev Deposit contrac.\n', ' * @param _value The amount to be transferred.\n', ' */\n', ' \n', ' function depositContrac(uint256 _value) public payable returns(bool){\n', '     approve(address(this), _value);\n', '     return  address(this).send(_value);\n', ' }\n', '\n', ' function getPercent(uint _value, uint _percent) internal pure returns(uint quotient){\n', '     uint _quotient = _value.mul(_percent).div(100);\n', '     return ( _quotient);\n', ' }\n', '}']
['pragma solidity ^0.4.24;\n', '/*\n', '* 1st Crypto Trader (DTH)\n', '*/\n', 'library SafeMath {\n', ' function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     if (a == 0) {\n', '         return 0;\n', '     }\n', '     uint256 c = a * b;\n', '     assert(c / a == b);\n', '     return c;\n', ' }\n', '\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '     uint256 c = a / b;\n', "     // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '     return c;\n', ' }\n', '\n', ' function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     assert(b <= a);\n', '     return a - b;\n', ' }\n', '\n', ' function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '     uint256 c = a + b;\n', '     assert(c >= a);\n', '     return c;\n', ' }\n', '}\n', '\n', '\n', 'contract CryptoTrader {\n', ' using SafeMath for uint256;\n', ' mapping(address => uint256) balances; // array with all balances\n', ' mapping (address => mapping (address => uint256)) internal allowed;\n', ' mapping (address => uint256) public ETHBalance; // array with spend ETH\n', '\n', ' uint256 public totalSupply; // emitted tokens\n', ' address public contract_owner_address;\n', '\n', ' event Transfer(address indexed from, address indexed to, uint256 value);\n', ' event Approval(address indexed owner, address indexed buyer, uint256 value);\n', ' event Burn(address indexed burner, uint256 value);\n', '\n', ' string public constant name = "Digital Humanity Token";\n', ' string public constant symbol = "DHT";\n', ' uint8 public decimals = 0;\n', ' uint public start_sale = 1537952400; // start of presale Thu, 26 Sep 2018 09:00:00 GMT\n', ' uint public presalePeriod = 61; // presale period in days\n', ' address public affiliateAddress ;\n', '\n', ' uint public maxAmountPresale_USD = 40000000; // 400,000 US dollars.\n', ' uint public soldAmount_USD = 0; // current tokens sale amount in US dollars\n', '\n', '\n', ' /* Initializes contract with initial supply tokens to the creator of the contract */\n', ' constructor (\n', '     uint256 initialSupply,\n', '     address _affiliateAddress\n', ' ) public {\n', '     totalSupply = initialSupply;\n', '     affiliateAddress = _affiliateAddress;\n', '     contract_owner_address = msg.sender;\n', '     balances[contract_owner_address] = getPercent(totalSupply,75); // tokens for selling\n', '     balances[affiliateAddress] = getPercent(totalSupply,25); //  affiliate 15% developers 10%\n', ' }\n', '\n', ' /**\n', ' * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', ' *\n', ' * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', ' * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', " * race condition is to first reduce the buyer's allowance to 0 and set the desired value afterwards:\n", ' * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', ' * @param _buyer The address which will spend the funds.\n', ' * @param _value The amount of tokens to be spent.\n', ' */\n', ' function approve(address _buyer, uint256 _value) public returns (bool) {\n', '     allowed[msg.sender][_buyer] = _value;\n', '     emit Approval(msg.sender, _buyer, _value);\n', '     return true;\n', ' }\n', '\n', ' /**\n', ' * @dev Function to check the amount of tokens that an owner allowed to a buyer.\n', ' * @param _owner address The address which owns the funds.\n', ' * @param _buyer address The address which will spend the funds.\n', ' * @return A uint256 specifying the amount of tokens still available for the buyer.\n', ' */\n', ' function allowance(address _owner, address _buyer) public view returns (uint256) {\n', '     return allowed[_owner][_buyer];\n', ' }\n', '\n', ' /**\n', ' * @dev Gets the balance of the specified address.\n', ' * @param _owner The address to query the the balance of.\n', ' * @return An uint256 representing the amount owned by the passed address.\n', ' */\n', ' function balanceOf(address _owner) public view returns (uint256 balance) {\n', '     return balances[_owner];\n', ' }\n', '\n', ' /**\n', ' * @dev Transfer tokens from one address to another\n', ' * @param _from address The address which you want to send tokens from\n', ' * @param _to address The address which you want to transfer to\n', ' * @param _value uint256 the amount of tokens to be transferred\n', ' */\n', ' function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[_from]);\n', '     require(_value <= allowed[_from][msg.sender]);\n', '\n', '     balances[_from] = balances[_from].sub(_value);\n', '     balances[_to] = balances[_to].add(_value);\n', '     allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '     emit Transfer(_from, _to, _value);\n', '     return true;\n', ' }\n', '\n', ' /**\n', ' * @dev transfer token for a specified address\n', ' * @param _to The address to transfer to.\n', ' * @param _value The amount to be transferred.\n', ' */\n', ' \n', ' function transfer(address _to, uint256 _value) public returns (bool) {\n', '     require(_to != address(0));\n', '     require(_value <= balances[msg.sender]);\n', '\n', '     // SafeMath.sub will throw if there is not enough balance.\n', '     balances[msg.sender] = balances[msg.sender].sub(_value);\n', '     balances[_to] = balances[_to].add(_value);\n', '     emit Transfer(msg.sender, _to, _value);\n', '     return true;\n', ' }\n', '\n', ' /**\n', ' * @dev sale token for a specified address\n', ' * @param _to The address to transfer to.\n', ' * @param _value The amount to be transferred.\n', ' * @param _eth_price spended eth for buying tokens.\n', ' * @param _usd_amount spended usd for buying tokens.\n', ' */\n', ' \n', ' function transferSale(address _to, uint256 _value, uint256 _eth_price, uint256 _usd_amount) public  returns (bool success) {\n', '     transfer(_to, _value);\n', '     ETHBalance[_to] = ETHBalance[_to].add(_eth_price);\n', '     soldAmount_USD += _usd_amount;\n', '     return true;\n', ' }\n', '\n', ' /**\n', ' * @dev Burns a specific amount of tokens.\n', ' * @param _value The amount of token to be burned.\n', ' */\n', ' \n', ' function burn(uint256 _value) public {\n', '     require(_value <= balances[msg.sender]);\n', '     address burner = msg.sender;\n', '     balances[burner] = balances[burner].sub(_value);\n', '     totalSupply = totalSupply.sub(_value);\n', '     emit Burn(burner, _value);\n', ' }\n', '\n', ' /**\n', ' * @dev Refund request.\n', ' * @param _to The address for refund.\n', ' */\n', ' \n', ' function refund(address _to) public payable returns(bool){\n', '     require(address(this).balance > 0);\n', '     uint256 _value = balances[_to];\n', '     uint256 ether_value = ETHBalance[_to];\n', '     require(now > start_sale + presalePeriod * 1 days && soldAmount_USD < maxAmountPresale_USD);\n', '     require(_value > 0);\n', '     require(ether_value > 0);\n', '     balances[_to] = balances[_to].sub(_value);\n', '     balances[contract_owner_address] = balances[contract_owner_address].add(_value);\n', '     ETHBalance[_to] = 0;\n', '     approve(_to, ether_value);\n', '     address(_to).transfer(ether_value);\n', '     return true;\n', ' }\n', '\n', ' /**\n', ' * @dev Deposit contrac.\n', ' * @param _value The amount to be transferred.\n', ' */\n', ' \n', ' function depositContrac(uint256 _value) public payable returns(bool){\n', '     approve(address(this), _value);\n', '     return  address(this).send(_value);\n', ' }\n', '\n', ' function getPercent(uint _value, uint _percent) internal pure returns(uint quotient){\n', '     uint _quotient = _value.mul(_percent).div(100);\n', '     return ( _quotient);\n', ' }\n', '}']
