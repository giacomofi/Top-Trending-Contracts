['// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'pragma solidity ^0.4.18;\n', '\n', 'contract ABC {\n', '\n', '    uint256 constant MAX_UINT256 = 2**256 - 1;\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It&#39;s like comparing 1 wei to 1 ether.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    string public version = &#39;ABCv1.0&#39;;       //human 0.1 standard. Just an arbitrary versioning scheme.\n', '    address public owner;\n', '    uint256 public totalSupply;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event FrozenFunds(address indexed _target, bool _frozen);\n', '\n', '     function ABC(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) public {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '        owner = msg.sender;                                  // Set the first owner\n', '        transfer(msg.sender, _initialAmount);                // Transfer the tokens to the msg.sender\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        //Verifies if the account is frozen\n', '        require(frozenAccount[msg.sender] != true && frozenAccount[_to] != true);\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        //require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        //Verifies if the account is frozen\n', '        require(frozenAccount[_from] != true && frozenAccount[_to] != true);\n', '\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        // require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        //Verifies if the account is frozen\n', '        require(frozenAccount[_spender] != true);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        //Verifies if the account is frozen\n', '        require(frozenAccount[_spender] != true);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed when one does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        require(_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    function issueNew(uint256 _issueQty) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        balances[owner] += _issueQty;\n', '\t\ttotalSupply += _issueQty;\n', '\t\temit Transfer(msg.sender, owner, _issueQty); \n', '        return true;\n', '    }\n', '\t\n', '\tfunction vanishToken( uint256 _vanishQty ) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        require(balances[owner] >= _vanishQty);\n', '        balances[owner] -= _vanishQty;\n', '\t\ttotalSupply -= _vanishQty;\n', '\t\temit Transfer(msg.sender, owner, _vanishQty); \n', '        return true;\n', '    }\n', '\n', '\tfunction freezeAccount(address _target, bool _freeze) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        frozenAccount[_target] = _freeze;\n', '        emit FrozenFunds(_target, _freeze);\n', '        return true;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        owner = _newOwner;\n', '        return true;\n', '    }\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}']
['// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'pragma solidity ^0.4.18;\n', '\n', 'contract ABC {\n', '\n', '    uint256 constant MAX_UINT256 = 2**256 - 1;\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', "    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string public symbol;                 //An identifier: eg SBX\n', "    string public version = 'ABCv1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '    address public owner;\n', '    uint256 public totalSupply;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event FrozenFunds(address indexed _target, bool _frozen);\n', '\n', '     function ABC(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) public {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '        owner = msg.sender;                                  // Set the first owner\n', '        transfer(msg.sender, _initialAmount);                // Transfer the tokens to the msg.sender\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        //Verifies if the account is frozen\n', '        require(frozenAccount[msg.sender] != true && frozenAccount[_to] != true);\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        //require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        //Verifies if the account is frozen\n', '        require(frozenAccount[_from] != true && frozenAccount[_to] != true);\n', '\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        // require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        //Verifies if the account is frozen\n', '        require(frozenAccount[_spender] != true);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        //Verifies if the account is frozen\n', '        require(frozenAccount[_spender] != true);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed when one does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        require(_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    function issueNew(uint256 _issueQty) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        balances[owner] += _issueQty;\n', '\t\ttotalSupply += _issueQty;\n', '\t\temit Transfer(msg.sender, owner, _issueQty); \n', '        return true;\n', '    }\n', '\t\n', '\tfunction vanishToken( uint256 _vanishQty ) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        require(balances[owner] >= _vanishQty);\n', '        balances[owner] -= _vanishQty;\n', '\t\ttotalSupply -= _vanishQty;\n', '\t\temit Transfer(msg.sender, owner, _vanishQty); \n', '        return true;\n', '    }\n', '\n', '\tfunction freezeAccount(address _target, bool _freeze) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        frozenAccount[_target] = _freeze;\n', '        emit FrozenFunds(_target, _freeze);\n', '        return true;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        owner = _newOwner;\n', '        return true;\n', '    }\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}']
