['pragma solidity ^0.4.16;\n', '////\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '////\n', 'contract AsinerumShareToken {\n', '  string public name = "Asinerum Share";\n', '  string public symbol = "ARS";\n', '  uint8 public decimals = 15;\n', '  uint64 public totalTokens = 172000000;\n', '  uint64 public priceTokenToCoin = 5000;\n', '  uint256 public totalSupply;\n', '  address public ownerWallet;\n', '  ////\n', '  mapping (address => uint256) public balanceOf;\n', '  mapping (address => mapping (address => uint256)) public allowance;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  ////\n', '  function AsinerumShareToken() public {\n', '    totalSupply = totalTokens * 10 ** uint256(decimals);\n', '    balanceOf[msg.sender] = totalSupply;\n', '    ownerWallet = msg.sender;\n', '  }\n', '  function _transfer(address _from, address _to, uint256 _value) internal {\n', '    require(_to != 0x0);\n', '    require(balanceOf[_from] >= _value);\n', '    require(balanceOf[_to] + _value > balanceOf[_to]);\n', '    balanceOf[_from] -= _value;\n', '    balanceOf[_to] += _value;\n', '    Transfer(_from, _to, _value);\n', '  }\n', '  function transfer(address _to, uint256 _value) public {\n', '    _transfer(msg.sender, _to, _value);\n', '  }\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '    require(_value <= allowance[_from][msg.sender]);\n', '    allowance[_from][msg.sender] -= _value;\n', '    _transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    allowance[msg.sender][_spender] = _value;\n', '    return true;\n', '  }\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '    tokenRecipient spender = tokenRecipient(_spender);\n', '    if (approve(_spender, _value)) {\n', '      spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '      return true;\n', '    }\n', '  }\n', '  function () payable public {\n', '    uint256 amount = msg.value * priceTokenToCoin;\n', '    amount = amount / 10 ** (18-uint256(decimals));\n', '    _transfer(ownerWallet, msg.sender, amount);\n', '  }\n', '}']