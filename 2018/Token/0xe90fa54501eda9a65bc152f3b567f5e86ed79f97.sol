['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * SmartEth.co\n', ' * ERC20 Token and ICO smart contracts development, smart contracts audit, ICO websites.\n', ' * contact@smarteth.co\n', ' */\n', '\n', '/**\n', ' * @title Ownable\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = 0x9317902fa3889E14EC3a3c9850dea38Bf8A202ab;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Airdrop is Ownable {\n', '\n', '  ERC20 public token = ERC20(0x7D266ed871f24D7b47b5a8B80abB391178C48Bac);\n', '\n', '  function airdrop(address[] recipient, uint256[] amount) public onlyOwner returns (uint256) {\n', '    uint256 i = 0;\n', '      while (i < recipient.length) {\n', '        token.transfer(recipient[i], amount[i]);\n', '        i += 1;\n', '      }\n', '    return(i);\n', '  }\n', '  \n', '  function airdropSameAmount(address[] recipient, uint256 amount) public onlyOwner returns (uint256) {\n', '    uint256 i = 0;\n', '      while (i < recipient.length) {\n', '        token.transfer(recipient[i], amount);\n', '        i += 1;\n', '      }\n', '    return(i);\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * SmartEth.co\n', ' * ERC20 Token and ICO smart contracts development, smart contracts audit, ICO websites.\n', ' * contact@smarteth.co\n', ' */\n', '\n', '/**\n', ' * @title Ownable\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = 0x9317902fa3889E14EC3a3c9850dea38Bf8A202ab;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Airdrop is Ownable {\n', '\n', '  ERC20 public token = ERC20(0x7D266ed871f24D7b47b5a8B80abB391178C48Bac);\n', '\n', '  function airdrop(address[] recipient, uint256[] amount) public onlyOwner returns (uint256) {\n', '    uint256 i = 0;\n', '      while (i < recipient.length) {\n', '        token.transfer(recipient[i], amount[i]);\n', '        i += 1;\n', '      }\n', '    return(i);\n', '  }\n', '  \n', '  function airdropSameAmount(address[] recipient, uint256 amount) public onlyOwner returns (uint256) {\n', '    uint256 i = 0;\n', '      while (i < recipient.length) {\n', '        token.transfer(recipient[i], amount);\n', '        i += 1;\n', '      }\n', '    return(i);\n', '  }\n', '}']
