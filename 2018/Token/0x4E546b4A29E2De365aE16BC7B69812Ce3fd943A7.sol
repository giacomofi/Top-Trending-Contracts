['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract VKTToken is StandardToken, Ownable {\n', '\n', "  string public name = 'VKTToken';\n", "  string public symbol = 'VKT';\n", '  uint8 public decimals = 18;\n', '\n', '\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per ether\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // locked token balance each address\n', '  mapping(address => uint256) lockedBalances;\n', '\n', "  // address is locked:true, can't transfer token\n", '  mapping (address => bool) public lockedAccounts;\n', '\n', '  // token cap\n', '  uint256 public tokenCap = 1 * 10 ** 27;\n', '\n', '    /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '\n', '  /**\n', '   * event for rate update logging\n', '   * @param preRate previouse rate per ether\n', '   * @param newRate new rate per ether\n', '   */\n', '  event RateUpdated(uint256 preRate, uint256 newRate);\n', '\n', '\n', '  /**\n', '   * event for wallet update logging\n', '   * @param preWallet previouse wallet that collect fund\n', '   * @param newWallet new wallet collect fund\n', '   */\n', '  event WalletUpdated(address indexed preWallet, address indexed newWallet);\n', '\n', '\n', '  /**\n', '   * event for lock account logging\n', '   * @param target affected account\n', '   * @param lock true:account is locked. false: unlocked\n', '   */\n', '  event LockAccount(address indexed target, bool lock);\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  event MintWithLocked(address indexed to, uint256 amount, uint256 lockedAmount);\n', '\n', '  event ReleaseLockedBalance(address indexed to, uint256 amount);\n', '\n', '\n', '  function VKTToken(uint256 _rate, address _wallet) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '    require(_to != address(0));\n', '    require(totalSupply_.add(_amount) <= tokenCap);\n', '\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Function to mint tokens with some locked\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @param _lockedAmount The amount of tokens locked.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mintWithLocked(address _to, uint256 _amount, uint256 _lockedAmount) onlyOwner public returns (bool) {\n', '    require(_to != address(0));\n', '    require(totalSupply_.add(_amount) <= tokenCap);\n', '    require(_amount >= _lockedAmount);\n', '\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    lockedBalances[_to] = lockedBalances[_to].add(_lockedAmount);\n', '    MintWithLocked(_to, _amount, _lockedAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to release some locked tokens\n', '   * @param _to The address that tokens will be released.\n', '   * @param _amount The amount of tokens to release.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function releaseLockedBalance(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_amount <= lockedBalances[_to]);\n', '\n', '    lockedBalances[_to] = lockedBalances[_to].sub(_amount);\n', '    ReleaseLockedBalance(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '    /**\n', '  * @dev Gets the balance of locked the specified address.\n', '  * @param _owner The address to query the the balance of locked.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOfLocked(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '    /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(!lockedAccounts[msg.sender]);\n', '    require(_value <= balances[msg.sender].sub(lockedBalances[msg.sender]));\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(!lockedAccounts[_from]);\n', '    require(_value <= balances[_from].sub(lockedBalances[_from]));\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '    /**\n', '   * @dev lock or unlock for one address to transfer tokens\n', '   * @param target affected address\n', '   * @param lock true: set target locked, fasle:unlock\n', '\n', '   */\n', '  function lockAccount(address target, bool lock) onlyOwner public returns (bool) {\n', '    require(target != address(0));\n', '    lockedAccounts[target] = lock;\n', '    LockAccount(target, lock);\n', '    return true;\n', '  }\n', '\n', '    // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(msg.value != 0);\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    if (msg.value >= 50 * 10 ** 18 && msg.value < 100 * 10 ** 18) {\n', '      tokens = tokens.mul(100).div(95);\n', '    }\n', '\n', '    if (msg.value >= 100 * 10 ** 18) {\n', '      tokens = tokens.mul(10).div(9);\n', '    }\n', '\n', '\n', '    require(totalSupply_.add(tokens) <= tokenCap);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    balances[beneficiary] = balances[beneficiary].add(tokens);\n', '    Mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '\n', '    /**\n', '   * @dev update token mint rate per eth\n', '   * @param _rate token rate per eth\n', '   */\n', '  function updateRate(uint256 _rate) onlyOwner public returns (bool) {\n', '    require(_rate != 0);\n', '\n', '    RateUpdated(rate, _rate);\n', '    rate = _rate;\n', '    return true;\n', '  }\n', '\n', '\n', '    /**\n', '   * @dev update wallet\n', '   * @param _wallet wallet that collect fund\n', '   */\n', '  function updateWallet(address _wallet) onlyOwner public returns (bool) {\n', '    require(_wallet != address(0));\n', '    \n', '    WalletUpdated(wallet, _wallet);\n', '    wallet = _wallet;\n', '    return true;\n', '  }\n', '}']