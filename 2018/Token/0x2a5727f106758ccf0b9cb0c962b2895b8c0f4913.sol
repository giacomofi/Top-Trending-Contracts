['pragma solidity ^0.4.23;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2b4f4a5d4e6b4a404446494a05484446">[email&#160;protected]</a>\n', '// released under Apache 2.0 licence\n', 'contract REDTTokenConfig {\n', '    string public constant NAME = "Real Estate Doc Token";\n', '    string public constant SYMBOL = "REDT";\n', '    uint8 public constant DECIMALS = 18;\n', '    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\n', '    uint public constant TOTALSUPPLY = 1000000000 * DECIMALSFACTOR;\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract REDTTokenSaleConfig is REDTTokenConfig {\n', '    uint public constant MIN_CONTRIBUTION      = 100 finney;\n', '\n', '    \n', '\n', '    \n', '\n', '    uint public constant RESERVE_AMOUNT = 500000000 * DECIMALSFACTOR;\n', '\n', '    uint public constant SALE_START = 1537189200;\n', '    uint public constant SALE_END = 1540990800;\n', '    \n', '    uint public constant SALE0_END = 1537794000;\n', '    uint public constant SALE0_RATE = 24000;\n', '    uint public constant SALE0_CAP = 400000000 * DECIMALSFACTOR;\n', '    \n', '    uint public constant SALE1_END = 1538398800;\n', '    uint public constant SALE1_RATE = 22000;\n', '    uint public constant SALE1_CAP = 500000000 * DECIMALSFACTOR;\n', '    \n', '    uint public constant SALE2_END = 1540990800;\n', '    uint public constant SALE2_RATE = 20000;\n', '    uint public constant SALE2_CAP = 500000000 * DECIMALSFACTOR;\n', '    \n', '    uint public constant SALE_CAP = 500000000 * DECIMALSFACTOR;\n', '\n', '    address public constant MULTISIG_ETH = 0x25C7A30F23a107ebF430FDFD582Afe1245B690Af;\n', '    address public constant MULTISIG_TKN = 0x25C7A30F23a107ebF430FDFD582Afe1245B690Af;\n', '\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Operatable is Claimable {\n', '    address public minter;\n', '    address public whiteLister;\n', '    address public launcher;\n', '\n', '    modifier canOperate() {\n', '        require(msg.sender == minter || msg.sender == whiteLister || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        minter = owner;\n', '        whiteLister = owner;\n', '        launcher = owner;\n', '    }\n', '\n', '    function setMinter (address addr) public onlyOwner {\n', '        minter = addr;\n', '    }\n', '\n', '    function setWhiteLister (address addr) public onlyOwner {\n', '        whiteLister = addr;\n', '    }\n', '\n', '    modifier onlyMinter()  {\n', '        require (msg.sender == minter);\n', '        _;\n', '    }\n', '\n', '    modifier ownerOrMinter()  {\n', '        require ((msg.sender == minter) || (msg.sender == owner));\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyLauncher()  {\n', '        require (msg.sender == minter);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhiteLister()  {\n', '        require (msg.sender == whiteLister);\n', '        _;\n', '    }\n', '}\n', 'contract Salvageable is Operatable {\n', '    // Salvage other tokens that are accidentally sent into this token\n', '    function emergencyERC20Drain(ERC20 oddToken, uint amount) public onlyLauncher {\n', '        if (address(oddToken) == address(0)) {\n', '            launcher.transfer(amount);\n', '            return;\n', '        }\n', '        oddToken.transfer(launcher, amount);\n', '    }\n', '}\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract WhiteListed is Operatable {\n', '\n', '\n', '    uint public count;\n', '    mapping (address => bool) public whiteList;\n', '\n', '    event Whitelisted(address indexed addr, uint whitelistedCount, bool isWhitelisted);\n', '\n', '    function addWhiteListed(address[] addrs) external canOperate {\n', '        uint c = count;\n', '        for (uint i = 0; i < addrs.length; i++) {\n', '            if (!whiteList[addrs[i]]) {\n', '                whiteList[addrs[i]] = true;\n', '                c++;\n', '                emit Whitelisted(addrs[i], count, true);\n', '            }\n', '        }\n', '        count = c;\n', '    }\n', '\n', '    function removeWhiteListed(address addr) external canOperate {\n', '        require(whiteList[addr]);\n', '        whiteList[addr] = false;\n', '        count--;\n', '        emit Whitelisted(addr, count, false);\n', '    }\n', '\n', '}\n', 'contract REDTToken is PausableToken, REDTTokenConfig, Salvageable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = NAME;\n', '    string public symbol = SYMBOL;\n', '    uint8 public decimals = DECIMALS;\n', '    bool public mintingFinished = false;\n', '\n', '    event Mint(address indexed to, uint amount);\n', '    event MintFinished();\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    constructor(address launcher_) public {\n', '        launcher = launcher_;\n', '        paused = true;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) canMint onlyMinter public returns (bool) {\n', '        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '\n', '    function sendBatchCS(address[] _recipients, uint[] _values) external canOperate returns (bool) {\n', '        require(_recipients.length == _values.length);\n', '        uint senderBalance = balances[msg.sender];\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            uint value = _values[i];\n', '            address to = _recipients[i];\n', '            require(senderBalance >= value);        \n', '            senderBalance = senderBalance - value;\n', '            balances[to] += value;\n', '            emit Transfer(msg.sender, to, value);\n', '        }\n', '        balances[msg.sender] = senderBalance;\n', '        return true;\n', '    }\n', '\n', '}\n', 'contract REDTTokenSale is REDTTokenSaleConfig, Claimable, Pausable, Salvageable {\n', '    using SafeMath for uint;\n', '    bool public isFinalized = false;\n', '    REDTToken public token;\n', '    \n', '    uint public tokensRaised;           \n', '    uint public weiRaised;              // Amount of raised money in WEI\n', '    WhiteListed public whiteListed;\n', '    uint public numContributors;        // Discrete number of contributors\n', '\n', '    mapping (address => uint) public contributions; // to allow them to have multiple spends\n', '\n', '    event Finalized();\n', '    event TokenPurchase(address indexed beneficiary, uint value, uint amount);\n', '    event TokenPresale(address indexed purchaser, uint amount);\n', '\n', '    struct capRec  {\n', '        uint time;\n', '        uint amount;\n', '    }\n', '    capRec[] public capz;\n', '    uint public capDefault;\n', '\n', '\n', '    constructor( WhiteListed _whiteListed ) public {\n', '        \n', '        require(now < SALE_START);\n', '        \n', '        require(_whiteListed != address(0));\n', '        \n', '        whiteListed = _whiteListed;\n', '\n', '        token = new REDTToken(owner);\n', '        token.mint(MULTISIG_TKN,RESERVE_AMOUNT);\n', '        initCaps();\n', '    }\n', '\n', '    \n', '    function initCaps() public {\n', '        uint[4] memory caps = [uint(10),20,30,40];\n', '        uint[4] memory times = [uint(1),4,12,24];\n', '        for (uint i = 0; i < caps.length; i++) {\n', '            capRec memory cr;\n', '            cr.time = times[i];\n', '            cr.amount = caps[i];\n', '            capz.push(cr);\n', '        }\n', '        capDefault = 100;\n', '    }\n', '    \n', '    function setCapRec(uint[] capsInEther, uint[] timesInHours, uint defaultCapInEther) public onlyOwner {\n', '        //capRec[] memory cz = new capRec[](caps.length);\n', '        require(capsInEther.length == timesInHours.length);\n', '        capz.length = 0;\n', '        for (uint i = 0; i < capsInEther.length; i++) {\n', '            capRec memory cr;\n', '            cr.time = timesInHours[i];\n', '            cr.amount = capsInEther[i];\n', '            capz.push(cr);\n', '        }\n', '        capDefault = defaultCapInEther;\n', '        \n', '    }\n', '    \n', '    function currentCap() public view returns (uint) {\n', '        for (uint i = 0; i < capz.length; i++) {\n', '            if (now < SALE_START + capz[i].time * 1 hours)\n', '                return (capz[i].amount * 1 ether);\n', '        }\n', '        return capDefault;\n', '    }\n', '\n', '\n', '    function getRateAndCheckCap() public view returns (uint) {\n', '        \n', '        require(now>SALE_START);\n', '        \n', '        if ((now<SALE0_END) && (tokensRaised < SALE0_CAP))\n', '            return SALE0_RATE;\n', '        \n', '        if ((now<SALE1_END) && (tokensRaised < SALE1_CAP))\n', '            return SALE1_RATE;\n', '        \n', '        if ((now<SALE2_END) && (tokensRaised < SALE2_CAP))\n', '            return SALE2_RATE;\n', '        \n', '        revert();\n', '    }\n', '\n', '    // Only fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender, msg.value);\n', '    }\n', '\n', '    function buyTokens(address beneficiary, uint weiAmount) internal whenNotPaused {\n', '        require(contributions[beneficiary].add(weiAmount) < currentCap());\n', '        require(whiteListed.whiteList(beneficiary));\n', '        require((weiAmount > MIN_CONTRIBUTION) || (weiAmount == SALE_CAP.sub(MIN_CONTRIBUTION)));\n', '\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        uint tokens = weiAmount.mul(getRateAndCheckCap());\n', '\n', '        if (contributions[beneficiary] == 0) {\n', '            numContributors++;\n', '        }\n', '\n', '        tokensRaised = tokensRaised.add(tokens);\n', '\n', '        contributions[beneficiary] = contributions[beneficiary].add(weiAmount);\n', '        token.mint(beneficiary, tokens);\n', '        emit TokenPurchase(beneficiary, weiAmount, tokens);\n', '        forwardFunds();\n', '    }\n', '\n', '    function placeTokens(address beneficiary, uint256 numtokens) \n', '    public\n', '\t  ownerOrMinter\n', '    {\n', '        require(now < SALE_START);  \n', '        tokensRaised = tokensRaised.add(numtokens);\n', '        token.mint(beneficiary,numtokens);\n', '    }\n', '\n', '\n', '    function tokensUnsold() public view returns(uint) {\n', '        return token.TOTALSUPPLY().sub(token.totalSupply());\n', '    }\n', '\n', '    // Return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return ((now > SALE_END) || (tokensRaised >= SALE_CAP));\n', '    }\n', '\n', '    // Send ether to the fund collection wallet\n', '    function forwardFunds() internal {\n', '        \n', '        MULTISIG_ETH.transfer(address(this).balance);\n', '    }\n', '\n', '    // Must be called after crowdsale ends, to do some extra finalization\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    // Stops the minting and transfer token ownership to sale owner. Mints unsold tokens to owner\n', '    function finalization() internal {\n', '        token.finishMinting();\n', '        token.transferOwnership(owner);\n', '    }\n', '}']