['/*\n', '*\tBitsumCash Ethereum Token -  2018\n', '*\thttps://bitsumcash.org\n', '*\tMinimal request 0.001ETH\n', '*\t1ETH is equal to 1000000BSCH\n', '*/\n', '\n', 'pragma solidity ^0.4.4;\n', '\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success){\n', '\t\trequire(balances[msg.sender] >= _value && _value > 0);\n', '\t\tbalances[msg.sender] -= _value;\n', '\t\tbalances[_to] += _value;\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n', '\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n', '\t\tbalances[_to] += _value;\n', '\t\tbalances[_from] -= _value;\n', '\t\tallowed[_from][msg.sender] -= _value;\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '\t\t\n', '\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));//To change _value amount first go to zero\n', '\t\t\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\t\n', '\tuint256 public totalSupply;\n', '\n', '}\n', '\n', 'contract BitsumCash is StandardToken { \n', '\n', '\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    string public version = &#39;BSCH_Token_1.0&#39;; \n', '    uint256 public unitsOneEthCanBuy;\n', '    uint256 public totalEthInWei;\n', '    address public fundsWallet;\n', '\t\n', '\tuint256 public toWei = 1000000000000000000;\n', '\tuint256 public minimalPaymentInWei = 1000000000000000;//0.001ETH\n', '\n', '\n', '\tfunction BitsumCash() {\n', '\t\tdecimals = 0;\n', '\t\ttotalSupply = 17500000;\n', '        balances[msg.sender] = 17500000;\n', '        name = "BitsumCash";\n', '        symbol = "BSCH";\n', '        unitsOneEthCanBuy = 1000000;\n', '        fundsWallet = msg.sender;\n', '    }\n', '\n', '    function() payable{\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        \n', '\t\t//Set minimal payment\n', '\t\trequire(msg.value >= minimalPaymentInWei);\n', '\t\t\n', '\t\tuint256 amount = (msg.value * unitsOneEthCanBuy) / toWei;\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '        Transfer(fundsWallet, msg.sender, amount);\n', '\n', '        fundsWallet.transfer(msg.value);                               \n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '\t\n', '\t\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\t\n', '}']
['/*\n', '*\tBitsumCash Ethereum Token -  2018\n', '*\thttps://bitsumcash.org\n', '*\tMinimal request 0.001ETH\n', '*\t1ETH is equal to 1000000BSCH\n', '*/\n', '\n', 'pragma solidity ^0.4.4;\n', '\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success){\n', '\t\trequire(balances[msg.sender] >= _value && _value > 0);\n', '\t\tbalances[msg.sender] -= _value;\n', '\t\tbalances[_to] += _value;\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n', '\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n', '\t\tbalances[_to] += _value;\n', '\t\tbalances[_from] -= _value;\n', '\t\tallowed[_from][msg.sender] -= _value;\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '\t\t\n', '\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));//To change _value amount first go to zero\n', '\t\t\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\t\n', '\tuint256 public totalSupply;\n', '\n', '}\n', '\n', 'contract BitsumCash is StandardToken { \n', '\n', '\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', "    string public version = 'BSCH_Token_1.0'; \n", '    uint256 public unitsOneEthCanBuy;\n', '    uint256 public totalEthInWei;\n', '    address public fundsWallet;\n', '\t\n', '\tuint256 public toWei = 1000000000000000000;\n', '\tuint256 public minimalPaymentInWei = 1000000000000000;//0.001ETH\n', '\n', '\n', '\tfunction BitsumCash() {\n', '\t\tdecimals = 0;\n', '\t\ttotalSupply = 17500000;\n', '        balances[msg.sender] = 17500000;\n', '        name = "BitsumCash";\n', '        symbol = "BSCH";\n', '        unitsOneEthCanBuy = 1000000;\n', '        fundsWallet = msg.sender;\n', '    }\n', '\n', '    function() payable{\n', '        totalEthInWei = totalEthInWei + msg.value;\n', '        \n', '\t\t//Set minimal payment\n', '\t\trequire(msg.value >= minimalPaymentInWei);\n', '\t\t\n', '\t\tuint256 amount = (msg.value * unitsOneEthCanBuy) / toWei;\n', '        require(balances[fundsWallet] >= amount);\n', '\n', '        balances[fundsWallet] = balances[fundsWallet] - amount;\n', '        balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '        Transfer(fundsWallet, msg.sender, amount);\n', '\n', '        fundsWallet.transfer(msg.value);                               \n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '\t\n', '\t\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\t\n', '}']
