['pragma solidity 0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/BrickblockToken.sol\n', '\n', 'contract BrickblockToken is PausableToken {\n', '\n', '  string public constant name = "BrickblockToken";\n', '  string public constant symbol = "BBK";\n', '  uint256 public constant initialSupply = 500 * (10 ** 6) * (10 ** uint256(decimals));\n', '  uint256 public companyTokens;\n', '  uint256 public bonusTokens;\n', '  uint8 public constant contributorsShare = 51;\n', '  uint8 public constant companyShare = 35;\n', '  uint8 public constant bonusShare = 14;\n', '  uint8 public constant decimals = 18;\n', '  address public bonusDistributionAddress;\n', '  address public fountainContractAddress;\n', '  bool public tokenSaleActive;\n', '  bool public dead = false;\n', '\n', '  event TokenSaleFinished\n', '  (\n', '    uint256 totalSupply,\n', '    uint256 distributedTokens,\n', '    uint256 bonusTokens,\n', '    uint256 companyTokens\n', '  );\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  // This modifier is used in `distributeTokens()` and ensures that no more than 51% of the total supply can be distributed\n', '  modifier supplyAvailable(uint256 _value) {\n', '    uint256 _distributedTokens = initialSupply.sub(balances[this].add(bonusTokens));\n', '    uint256 _maxDistributedAmount = initialSupply.mul(contributorsShare).div(100);\n', '    require(_distributedTokens.add(_value) <= _maxDistributedAmount);\n', '    _;\n', '  }\n', '\n', '  function BrickblockToken(address _bonusDistributionAddress)\n', '    public\n', '  {\n', '    require(_bonusDistributionAddress != address(0));\n', '    bonusTokens = initialSupply.mul(bonusShare).div(100);\n', '    companyTokens = initialSupply.mul(companyShare).div(100);\n', '    bonusDistributionAddress = _bonusDistributionAddress;\n', '    totalSupply = initialSupply;\n', '    balances[this] = initialSupply;\n', '    Transfer(address(0), this, initialSupply);\n', '    // distribute bonusTokens to bonusDistributionAddress\n', '    balances[this] = balances[this].sub(bonusTokens);\n', '    balances[bonusDistributionAddress] = balances[bonusDistributionAddress].add(bonusTokens);\n', '    Transfer(this, bonusDistributionAddress, bonusTokens);\n', '    // we need to start with trading paused to make sure that there can be no transfers while the token sale is still ongoing\n', '    // we will unpause the contract manually after finalizing the token sale by calling `unpause()` which is a function inherited from PausableToken\n', '    paused = true;\n', '    tokenSaleActive = true;\n', '  }\n', '\n', '  // For worst case scenarios, e.g. when a vulnerability in this contract would be discovered and we would have to deploy a new contract\n', '  // This is only for visibility purposes to publicly indicate that we consider this contract "dead" and don\'t intend to re-activate it ever again\n', '  function toggleDead()\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    dead = !dead;\n', '  }\n', '\n', '  // Helper function used in changeFountainContractAddress to ensure an address parameter is a contract and not an external address\n', '  function isContract(address addr)\n', '    private\n', '    view\n', '    returns (bool)\n', '  {\n', '    uint _size;\n', '    assembly { _size := extcodesize(addr) }\n', '    return _size > 0;\n', '  }\n', '\n', '  // Fountain contract address could change over time, so we need the ability to update its address\n', '  function changeFountainContractAddress(address _newAddress)\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    require(isContract(_newAddress));\n', '    require(_newAddress != address(this));\n', '    require(_newAddress != owner);\n', '    fountainContractAddress = _newAddress;\n', '    return true;\n', '  }\n', '\n', '  // Custom transfer function that enables us to distribute tokens while contract is paused. Cannot be used after end of token sale\n', '  function distributeTokens(address _contributor, uint256 _value)\n', '    external\n', '    onlyOwner\n', '    supplyAvailable(_value)\n', '    returns (bool)\n', '  {\n', '    require(tokenSaleActive == true);\n', '    require(_contributor != address(0));\n', '    require(_contributor != owner);\n', '    balances[this] = balances[this].sub(_value);\n', '    balances[_contributor] = balances[_contributor].add(_value);\n', '    Transfer(this, _contributor, _value);\n', '    return true;\n', '  }\n', '\n', '  // Distribute tokens reserved for partners and staff to a wallet owned by Brickblock\n', '  function distributeBonusTokens(address _recipient, uint256 _value)\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    require(_recipient != address(0));\n', '    require(_recipient != owner);\n', '    balances[bonusDistributionAddress] = balances[bonusDistributionAddress].sub(_value);\n', '    balances[_recipient] = balances[_recipient].add(_value);\n', '    Transfer(bonusDistributionAddress, _recipient, _value);\n', '    return true;\n', '  }\n', '\n', '  // Calculate the shares for company, bonus & contibutors based on the intial totalSupply of 500.000.000 tokens - not what is left over after burning\n', '  function finalizeTokenSale()\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    // ensure that sale is active. is set to false at the end. can only be performed once.\n', '    require(tokenSaleActive == true);\n', '    // ensure that fountainContractAddress has been set\n', '    require(fountainContractAddress != address(0));\n', '    // calculate new total supply. need to do this in two steps in order to have accurate totalSupply due to integer division\n', '    uint256 _distributedTokens = initialSupply.sub(balances[this].add(bonusTokens));\n', '    uint256 _newTotalSupply = _distributedTokens.add(bonusTokens.add(companyTokens));\n', '    // unpurchased amount of tokens which will be burned\n', '    uint256 _burnAmount = totalSupply.sub(_newTotalSupply);\n', '    // leave remaining balance for company to be claimed at later date\n', '    balances[this] = balances[this].sub(_burnAmount);\n', '    Burn(this, _burnAmount);\n', '    // allow our fountain contract to transfer the company tokens to itself\n', '    allowed[this][fountainContractAddress] = companyTokens;\n', '    Approval(this, fountainContractAddress, companyTokens);\n', '    // set new totalSupply\n', '    totalSupply = _newTotalSupply;\n', '    // prevent this function from ever running again after finalizing the token sale\n', '    tokenSaleActive = false;\n', '    // dispatch event showing sale is finished\n', '    TokenSaleFinished(\n', '      totalSupply,\n', '      _distributedTokens,\n', '      bonusTokens,\n', '      companyTokens\n', '    );\n', '    // everything went well return true\n', '    return true;\n', '  }\n', '\n', '  // fallback function - do not allow any eth transfers to this contract\n', '  function()\n', '    external\n', '  {\n', '    revert();\n', '  }\n', '\n', '}']