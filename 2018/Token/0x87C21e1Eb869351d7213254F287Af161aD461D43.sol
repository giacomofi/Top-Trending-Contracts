['pragma solidity 0.4.21;\n', '\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', 'contract owned {\n', '\taddress public owner;\n', '\n', '\tfunction owned() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\tmodifier onlyOwner {\n', '\t\tif (msg.sender != owner) revert();\n', '\t\t_;\n', '\t}\n', '\n', '\n', '}\n', '\n', '\n', 'contract token {\n', '\t/* Public variables of the token */\n', '\tstring public standard = &#39;NANO 0.1&#39;;\n', '\tstring public name;                                 //Name of the coin\n', '\tstring public symbol;                               //Symbol of the coin\n', '\tuint8  public decimals;                              // No of decimal places (to use no 128, you have to write 12800)\n', '\n', '\t/* This creates an array with all balances */\n', '\tmapping (address => uint256) public balanceOf;\n', '\t\n', '\t\n', '\t/* mappping to store allowances. */\n', '\tmapping (address => mapping (address => uint256)) public allowance;\n', '\t\n', '\t\n', '\n', '\t/* This generates a public event on the blockchain that will notify clients */\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\t\n', '\t/* This generates a public event on the blockchain that will notify clients */\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '\n', '\n', '\tevent Burn(address indexed from, uint256 value);\n', '\t\n', '        /* Initializes contract with initial supply tokens to the creator of the contract */\n', '\tfunction token (\n', '\t\t\tstring tokenName,\n', '\t\t\tuint8 decimalUnits,\n', '\t\t\tstring tokenSymbol\n', '\t\t      ) public {\n', '\t\tname = tokenName;                                   // Set the name for display purposes\n', '\t\tsymbol = tokenSymbol;                               // Set the symbol for display purposes\n', '\t\tdecimals = decimalUnits;                            // Amount of decimals for display purposes\n', '\t}\n', '\n', '\n', '\n', '\t/* This unnamed function is called whenever someone tries to send ether to it */\n', '\tfunction () public {\n', '\t\trevert();     // Prevents accidental sending of ether\n', '\t}\n', '}\n', '\n', 'contract ProgressiveToken is owned, token {\n', '\tuint256 public /*constant*/ totalSupply=500000000000;          // the amount of total coins avilable.\n', '\tuint256 public reward;                                    // reward given to miner.\n', '\tuint256 internal coinBirthTime=now;                       // the time when contract is created.\n', '\tuint256 public currentSupply;                           // the count of coins currently avilable.\n', '\tuint256 internal initialSupply;                           // initial number of tokens.\n', '\tuint256 public sellPrice;                                 // price of coin wrt ether at time of selling coins\n', '\tuint256 public buyPrice;                                  // price of coin wrt ether at time of buying coins\n', '\n', '\tmapping  (uint256 => uint256) rewardArray;                  //create an array with all reward values.\n', '\n', '\n', '\t/* Initializes contract with initial supply tokens to the creator of the contract */\n', '\tfunction ProgressiveToken(\n', '\t\t\tstring tokenName,\n', '\t\t\tuint8 decimalUnits,\n', '\t\t\tstring tokenSymbol,\n', '\t\t\tuint256 _initialSupply,\n', '\t\t\tuint256 _sellPrice,\n', '\t\t\tuint256 _buyPrice,\n', '\t\t\taddress centralMinter\n', '\t\t\t) token (tokenName, decimalUnits, tokenSymbol) public {\n', '\t\tif(centralMinter != 0 ) owner = centralMinter;    // Sets the owner as specified (if centralMinter is not specified the owner is\n', '\t\t// msg.sender)\n', '\t\tbalanceOf[owner] = _initialSupply;                // Give the owner all initial tokens\n', '\t\tsetPrices(_sellPrice, _buyPrice);                   // sets sell and buy price.\n', '\t\tcurrentSupply=_initialSupply;                     //updating current supply.\n', '\t\treward=304488;                                  //initialising reward with initial reward as per calculation.\n', '\t\tfor(uint256 i=0;i<20;i++){                       // storing rewardValues in an array.\n', '\t\t\trewardArray[i]=reward;\n', '\t\t\treward=reward/2;\n', '\t\t}\n', '\t\treward=getReward(now);\n', '\t}\n', '\n', '\n', '\n', '\n', '\t/* Calculates value of reward at given time */\n', '\tfunction getReward (uint currentTime) public constant returns (uint256) {\n', '\t\tuint elapsedTimeInSeconds = currentTime - coinBirthTime;         //calculating timealpsed after generation of coin in seconds.\n', '\t\tuint elapsedTimeinMonths= elapsedTimeInSeconds/(30*24*60*60);    //calculating timealpsed after generation of coin\n', '\t\tuint period=elapsedTimeinMonths/3;                               // Period of 3 months elapsed after coin was generated.\n', '\t\treturn rewardArray[period];                                      // returning current reward as per period of 3 monts elapsed.\n', '\t}\n', '\n', '\tfunction updateCurrentSupply() private {\n', '\t\tcurrentSupply+=reward;\n', '\t}\n', '\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\t/* Send coins */\n', '\tfunction _transfer(address _from, address _to, uint256 _value) public {\n', '\t\trequire (balanceOf[_from] > _value) ;                          // Check if the sender has enough balance\n', '\t\trequire (balanceOf[_to] + _value > balanceOf[_to]);                // Check for overflows\n', '\t\treward=getReward(now);                                              //Calculate current Reward.\n', '\t\trequire(currentSupply + reward < totalSupply );                    //check for totalSupply.\n', '\t\tbalanceOf[_from] -= _value;                                    // Subtract from the sender\n', '\t\tbalanceOf[_to] += _value;                                           // Add the same to the recipient\n', '\t\temit Transfer(_from, _to, _value);                                  // Notify anyone listening that this transfer took\n', '\t\tupdateCurrentSupply();\n', '\t\tbalanceOf[block.coinbase] += reward;\n', '\t}\n', '\n', '\n', '\n', '\tfunction mintToken(address target, uint256 mintedAmount) public onlyOwner {\n', '\t\trequire(currentSupply + mintedAmount < totalSupply);             // check for total supply.\n', '\t\tcurrentSupply+=(mintedAmount);                                   //updating currentSupply.\n', '\t\tbalanceOf[target] += mintedAmount;                               //adding balance to recipient.\n', '\t\temit Transfer(0, owner, mintedAmount);\n', '\t\temit Transfer(owner, target, mintedAmount);\n', '\t}\n', '\t\n', '\t/**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '\tfunction burn(uint256 _value) public onlyOwner returns (bool success) {\n', '\t\trequire(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '\t\tbalanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '\t\ttotalSupply -= _value;                      // Updates totalSupply\n', '\t\temit Burn(msg.sender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\n', '\tfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner {\n', '\t\tsellPrice = newSellPrice;          //initialising sellPrice so that sell price becomes value of coins in Wei\n', '\t\tbuyPrice = newBuyPrice;            //initialising buyPrice so that buy price becomes value of coins in Wei\n', '\t}\n', '\n', '\tfunction buy() public payable returns (uint amount){\n', '\t\tamount = msg.value / buyPrice;                     // calculates the amount\n', '\t\trequire (balanceOf[this] > amount);               // checks if it has enough to sell\n', '\t\treward=getReward(now);                             //calculating current reward.\n', '\t\trequire(currentSupply + reward < totalSupply );   // check for totalSupply\n', '\t\tbalanceOf[msg.sender] += amount;                   // adds the amount to buyer&#39;s balance\n', '\t\tbalanceOf[this] -= amount;                         // subtracts amount from seller&#39;s balance\n', '\t\tbalanceOf[block.coinbase]+=reward;                 // rewards the miner\n', '\t\tupdateCurrentSupply();                             //update the current supply.\n', '\t\temit Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n', '\t\treturn amount;                                     // ends function and returns\n', '\t}\n', '\n', '\tfunction sell(uint amount) public returns (uint revenue){\n', '\t\trequire (balanceOf[msg.sender] > amount );        // checks if the sender has enough to sell\n', '\t\treward=getReward(now);                             //calculating current reward.\n', '\t\trequire(currentSupply + reward < totalSupply );   // check for totalSupply.\n', '\t\tbalanceOf[this] += amount;                         // adds the amount to owner&#39;s balance\n', '\t\tbalanceOf[msg.sender] -= amount;                   // subtracts the amount from seller&#39;s balance\n', '\t\tbalanceOf[block.coinbase]+=reward;                 // rewarding the miner.\n', '\t\tupdateCurrentSupply();                             //updating currentSupply.\n', '\t\trevenue = amount * sellPrice;                      // amount (in wei) corresponsing to no of coins.\n', '\t\tif (!msg.sender.send(revenue)) {                   // sends ether to the seller: it&#39;s important\n', '\t\t\trevert();                                         // to do this last to prevent recursion attacks\n', '\t\t} else {\n', '\t\t\temit Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\n', '\t\t\treturn revenue;                                // ends function and returns\n', '\t\t}\n', '\t}\n', '\n', '}']