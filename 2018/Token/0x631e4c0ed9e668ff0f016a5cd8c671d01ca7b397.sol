['pragma solidity ^0.4.23;\n', '\n', 'interface token {\n', '    function promoCode() external returns (bytes16);\n', '    function specialSend(uint amount, address buyer) external;\n', '    function promoEthCommission() external returns (uint);\n', '    function owner() external returns (address);\n', '    function ethPromoHelpers(address input) external returns (address);\n', '    function balanceOf(address who) external returns (uint256);\n', '    function transfer(address receiver, uint amount) external;\n', '}\n', '\n', 'contract UppercaseCheck {\n', '    function areAllUppercase(bytes16 str) internal pure returns (bool) {\n', '    if(str == 0){return false;}\n', '    for (uint j = 0; j < 16; j++) {\n', '    byte char = byte(bytes16(uint(str) * 2 ** (8 * j)));\n', '    if (char != 0 && !((char >= 97) && (char <= 122))){return false;}}return true;}\n', '}\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256){if(a == 0){return 0;}uint256 c = a * b;assert(c / a == b);return c;}\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256){return a / b;}\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256){assert(b <= a);return a - b;}\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256){uint256 c = a + b;assert(c >= a);return c;}\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => address) ethPromoHelpers_;\n', '    mapping(address => address) fishPromoHelpers_;\n', '    \n', '    uint256 totalSupply_;\n', '    function totalSupply() public view returns (uint256) {return totalSupply_;}\n', '    function ethPromoHelpers(address _input) public view returns (address) {return ethPromoHelpers_[_input];}\n', '    function fishPromoHelpers(address _input) public view returns (address) {return fishPromoHelpers_[_input];}\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(ethPromoHelpers(_to) == 0 && fishPromoHelpers(_to) == 0);\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {return balances[_owner];}\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(ethPromoHelpers(_to) == 0 && fishPromoHelpers(_to) == 0);\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if(_subtractedValue > oldValue) {\n', '        allowed[msg.sender][_spender] = 0;} \n', '        else {allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);}\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address owner_;\n', '    constructor() public {owner_ = msg.sender;}\n', '    modifier onlyOwner() {require(msg.sender == owner_);_;}\n', '    function transferOwnership(address newOwner) public onlyOwner {require(newOwner != address(0));owner_ = newOwner;}\n', '    function owner() public view returns (address) {return owner_;}\n', '}\n', '\n', 'contract Factory is UppercaseCheck, StandardToken{\n', '    \n', '   uint contractCount = 0;\n', '   bytes16[2][] ethReceived;\n', '   mapping(bytes16 => address) promoCodeToContractAddress_;\n', '   mapping(address => uint) contractAddressToIndex;\n', '   \n', '   function returnEthReceived() public view returns (bytes16[2][]){return ethReceived;}\n', '   function promoCodeToContractAddress(bytes16 _input) public view returns (address){return promoCodeToContractAddress_[_input];}\n', '   \n', '   function getPromoCodeForEther(bytes16 PromoCode) external {\n', '       require(areAllUppercase(PromoCode));\n', '       require(promoCodeToContractAddress(PromoCode) == 0);\n', '       address myContract = new PromoContract(PromoCode);\n', '       promoCodeToContractAddress_[PromoCode] = myContract;\n', '       ethPromoHelpers_[myContract] = msg.sender;\n', '   }\n', '   function getPromoCodeForFish(bytes16 PromoCode) external {\n', '       require(areAllUppercase(PromoCode));\n', '       require(promoCodeToContractAddress(PromoCode) == 0);\n', '       address myContract = new PromoContract(PromoCode);\n', '       promoCodeToContractAddress_[PromoCode] = myContract;\n', '       fishPromoHelpers_[myContract] = msg.sender;\n', '   }\n', '}\n', '\n', 'contract Fish is Ownable, Factory{\n', '     \n', '    string public constant name = "Fish";\n', '    string public constant symbol = "FISH";\n', '    uint8 public constant decimals = 0;\n', '    \n', '    uint unitsOneEthCanBuy_ = 10000;\n', '    uint promoFishCommission_ = 100;\n', '    uint promoEthCommission_ = 40;\n', '    uint promoBonus_ = 20;\n', '    uint sizeBonus_ = 100;\n', '    \n', '    constructor() public{totalSupply_ = 0;}\n', '    function unitsOneEthCanBuy() public view returns (uint) {return unitsOneEthCanBuy_;}\n', '    function promoFishCommission() public view returns (uint) {return promoFishCommission_;}\n', '    function promoEthCommission() public view returns (uint) {return promoEthCommission_;}\n', '    function promoBonus() public view returns (uint) {return promoBonus_;}\n', '    function sizeBonus() public view returns (uint) {return sizeBonus_;}\n', '    function updateUnitsOneEthCanBuy(uint _unitsOneEthCanBuy) external onlyOwner {unitsOneEthCanBuy_ = _unitsOneEthCanBuy;}\n', '    function updatePromoFishCommission(uint _promoFishCommission) external onlyOwner {promoFishCommission_ = _promoFishCommission;}\n', '    function updatePromoEthCommission(uint _promoEthCommission) external onlyOwner {require(_promoEthCommission < 100);promoEthCommission_ = _promoEthCommission;}\n', '    function updatePromoBonus(uint _promoBonus) external onlyOwner{promoBonus_ = _promoBonus;}\n', '    function updateSizeBonus(uint _sizeBonus) external onlyOwner {sizeBonus_ = _sizeBonus;}\n', '\n', '   function() payable public{\n', '        owner().transfer(msg.value);\n', '        if(unitsOneEthCanBuy() == 0){return;}\n', '        uint256 amount =  msg.value.mul(unitsOneEthCanBuy()).mul(msg.value.mul(sizeBonus()).add(10**22)).div(10**40);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        totalSupply_ = totalSupply_.add(amount);\n', '        emit Transfer(address(this), msg.sender, amount); \n', '    }\n', '    \n', '   function getLostTokens(address _tokenContractAddress) public {\n', '        if(token(_tokenContractAddress).balanceOf(address(this)) != 0){\n', '        token(_tokenContractAddress).transfer(owner(), token(_tokenContractAddress).balanceOf(address(this)));}\n', '   }\n', '    \n', '   function sendToken(address _to, uint _value) external onlyOwner {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(ethPromoHelpers(_to)==0 && fishPromoHelpers(_to)==0);\n', '        balances[_to] = balances[_to].add(_value);\n', '        totalSupply_ = totalSupply_.add(_value);\n', '        emit Transfer(address(this), _to, _value); \n', '   }\n', '   \n', '   function delToken() external onlyOwner {\n', '        totalSupply_ = totalSupply_.sub(balances[msg.sender]);\n', '        emit Transfer(msg.sender, address(this), balances[msg.sender]); \n', '        balances[msg.sender] = 0;\n', '   }\n', ' \n', '    function specialSend(uint amount, address buyer) external {\n', '        require(ethPromoHelpers(msg.sender) != 0 || fishPromoHelpers(msg.sender) != 0);\n', '        if(contractAddressToIndex[msg.sender] == 0){\n', '        ethReceived.push([token(msg.sender).promoCode(),bytes16(amount)]);\n', '        contractCount = contractCount.add(1);\n', '        contractAddressToIndex[msg.sender] = contractCount;}\n', '        else{ethReceived[contractAddressToIndex[msg.sender].sub(1)][1] = bytes16(  uint( ethReceived[contractAddressToIndex[msg.sender].sub(1)][1] ).add(amount));}\n', '        if(unitsOneEthCanBuy() == 0){return;}\n', '        uint amountFishToGive = amount.mul(unitsOneEthCanBuy()).mul(amount.mul(sizeBonus()).add(10**22)).mul(promoBonus().add(100)).div(10**42);\n', '        balances[buyer] = balances[buyer].add(amountFishToGive);\n', '        totalSupply_ = totalSupply_.add(amountFishToGive);\n', '        emit Transfer(address(this), buyer, amountFishToGive); \n', '        if(fishPromoHelpers(msg.sender) != 0 && promoFishCommission() != 0){\n', '        uint256 helperAmount = promoFishCommission().mul(amountFishToGive).div(100);\n', '        balances[fishPromoHelpers_[msg.sender]] = balances[fishPromoHelpers(msg.sender)].add(helperAmount);\n', '        totalSupply_ = totalSupply_.add(helperAmount);\n', '        emit Transfer(address(this), fishPromoHelpers(msg.sender), helperAmount);}  \n', '   }\n', '}\n', '\n', 'contract PromoContract{\n', '    using SafeMath for uint256;\n', '    \n', '    address masterContract = msg.sender;\n', '    bytes16 promoCode_;\n', '    \n', '    constructor(bytes16 _promoCode) public{promoCode_ = _promoCode;}\n', '    function promoCode() public view returns (bytes16){return promoCode_;}\n', '    function() payable public{\n', '        if(token(masterContract).ethPromoHelpers(address(this)) != 0 && token(masterContract).promoEthCommission() != 0){\n', '        uint amountToGive = token(masterContract).promoEthCommission().mul(msg.value).div(100);\n', '        token(masterContract).owner().transfer(msg.value.sub(amountToGive)); \n', '        token(masterContract).ethPromoHelpers(address(this)).transfer(amountToGive);}\n', '        else{token(masterContract).owner().transfer(msg.value);}\n', '        token(masterContract).specialSend(msg.value, msg.sender);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'interface token {\n', '    function promoCode() external returns (bytes16);\n', '    function specialSend(uint amount, address buyer) external;\n', '    function promoEthCommission() external returns (uint);\n', '    function owner() external returns (address);\n', '    function ethPromoHelpers(address input) external returns (address);\n', '    function balanceOf(address who) external returns (uint256);\n', '    function transfer(address receiver, uint amount) external;\n', '}\n', '\n', 'contract UppercaseCheck {\n', '    function areAllUppercase(bytes16 str) internal pure returns (bool) {\n', '    if(str == 0){return false;}\n', '    for (uint j = 0; j < 16; j++) {\n', '    byte char = byte(bytes16(uint(str) * 2 ** (8 * j)));\n', '    if (char != 0 && !((char >= 97) && (char <= 122))){return false;}}return true;}\n', '}\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256){if(a == 0){return 0;}uint256 c = a * b;assert(c / a == b);return c;}\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256){return a / b;}\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256){assert(b <= a);return a - b;}\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256){uint256 c = a + b;assert(c >= a);return c;}\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => address) ethPromoHelpers_;\n', '    mapping(address => address) fishPromoHelpers_;\n', '    \n', '    uint256 totalSupply_;\n', '    function totalSupply() public view returns (uint256) {return totalSupply_;}\n', '    function ethPromoHelpers(address _input) public view returns (address) {return ethPromoHelpers_[_input];}\n', '    function fishPromoHelpers(address _input) public view returns (address) {return fishPromoHelpers_[_input];}\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(ethPromoHelpers(_to) == 0 && fishPromoHelpers(_to) == 0);\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {return balances[_owner];}\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(ethPromoHelpers(_to) == 0 && fishPromoHelpers(_to) == 0);\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if(_subtractedValue > oldValue) {\n', '        allowed[msg.sender][_spender] = 0;} \n', '        else {allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);}\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address owner_;\n', '    constructor() public {owner_ = msg.sender;}\n', '    modifier onlyOwner() {require(msg.sender == owner_);_;}\n', '    function transferOwnership(address newOwner) public onlyOwner {require(newOwner != address(0));owner_ = newOwner;}\n', '    function owner() public view returns (address) {return owner_;}\n', '}\n', '\n', 'contract Factory is UppercaseCheck, StandardToken{\n', '    \n', '   uint contractCount = 0;\n', '   bytes16[2][] ethReceived;\n', '   mapping(bytes16 => address) promoCodeToContractAddress_;\n', '   mapping(address => uint) contractAddressToIndex;\n', '   \n', '   function returnEthReceived() public view returns (bytes16[2][]){return ethReceived;}\n', '   function promoCodeToContractAddress(bytes16 _input) public view returns (address){return promoCodeToContractAddress_[_input];}\n', '   \n', '   function getPromoCodeForEther(bytes16 PromoCode) external {\n', '       require(areAllUppercase(PromoCode));\n', '       require(promoCodeToContractAddress(PromoCode) == 0);\n', '       address myContract = new PromoContract(PromoCode);\n', '       promoCodeToContractAddress_[PromoCode] = myContract;\n', '       ethPromoHelpers_[myContract] = msg.sender;\n', '   }\n', '   function getPromoCodeForFish(bytes16 PromoCode) external {\n', '       require(areAllUppercase(PromoCode));\n', '       require(promoCodeToContractAddress(PromoCode) == 0);\n', '       address myContract = new PromoContract(PromoCode);\n', '       promoCodeToContractAddress_[PromoCode] = myContract;\n', '       fishPromoHelpers_[myContract] = msg.sender;\n', '   }\n', '}\n', '\n', 'contract Fish is Ownable, Factory{\n', '     \n', '    string public constant name = "Fish";\n', '    string public constant symbol = "FISH";\n', '    uint8 public constant decimals = 0;\n', '    \n', '    uint unitsOneEthCanBuy_ = 10000;\n', '    uint promoFishCommission_ = 100;\n', '    uint promoEthCommission_ = 40;\n', '    uint promoBonus_ = 20;\n', '    uint sizeBonus_ = 100;\n', '    \n', '    constructor() public{totalSupply_ = 0;}\n', '    function unitsOneEthCanBuy() public view returns (uint) {return unitsOneEthCanBuy_;}\n', '    function promoFishCommission() public view returns (uint) {return promoFishCommission_;}\n', '    function promoEthCommission() public view returns (uint) {return promoEthCommission_;}\n', '    function promoBonus() public view returns (uint) {return promoBonus_;}\n', '    function sizeBonus() public view returns (uint) {return sizeBonus_;}\n', '    function updateUnitsOneEthCanBuy(uint _unitsOneEthCanBuy) external onlyOwner {unitsOneEthCanBuy_ = _unitsOneEthCanBuy;}\n', '    function updatePromoFishCommission(uint _promoFishCommission) external onlyOwner {promoFishCommission_ = _promoFishCommission;}\n', '    function updatePromoEthCommission(uint _promoEthCommission) external onlyOwner {require(_promoEthCommission < 100);promoEthCommission_ = _promoEthCommission;}\n', '    function updatePromoBonus(uint _promoBonus) external onlyOwner{promoBonus_ = _promoBonus;}\n', '    function updateSizeBonus(uint _sizeBonus) external onlyOwner {sizeBonus_ = _sizeBonus;}\n', '\n', '   function() payable public{\n', '        owner().transfer(msg.value);\n', '        if(unitsOneEthCanBuy() == 0){return;}\n', '        uint256 amount =  msg.value.mul(unitsOneEthCanBuy()).mul(msg.value.mul(sizeBonus()).add(10**22)).div(10**40);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        totalSupply_ = totalSupply_.add(amount);\n', '        emit Transfer(address(this), msg.sender, amount); \n', '    }\n', '    \n', '   function getLostTokens(address _tokenContractAddress) public {\n', '        if(token(_tokenContractAddress).balanceOf(address(this)) != 0){\n', '        token(_tokenContractAddress).transfer(owner(), token(_tokenContractAddress).balanceOf(address(this)));}\n', '   }\n', '    \n', '   function sendToken(address _to, uint _value) external onlyOwner {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '        require(ethPromoHelpers(_to)==0 && fishPromoHelpers(_to)==0);\n', '        balances[_to] = balances[_to].add(_value);\n', '        totalSupply_ = totalSupply_.add(_value);\n', '        emit Transfer(address(this), _to, _value); \n', '   }\n', '   \n', '   function delToken() external onlyOwner {\n', '        totalSupply_ = totalSupply_.sub(balances[msg.sender]);\n', '        emit Transfer(msg.sender, address(this), balances[msg.sender]); \n', '        balances[msg.sender] = 0;\n', '   }\n', ' \n', '    function specialSend(uint amount, address buyer) external {\n', '        require(ethPromoHelpers(msg.sender) != 0 || fishPromoHelpers(msg.sender) != 0);\n', '        if(contractAddressToIndex[msg.sender] == 0){\n', '        ethReceived.push([token(msg.sender).promoCode(),bytes16(amount)]);\n', '        contractCount = contractCount.add(1);\n', '        contractAddressToIndex[msg.sender] = contractCount;}\n', '        else{ethReceived[contractAddressToIndex[msg.sender].sub(1)][1] = bytes16(  uint( ethReceived[contractAddressToIndex[msg.sender].sub(1)][1] ).add(amount));}\n', '        if(unitsOneEthCanBuy() == 0){return;}\n', '        uint amountFishToGive = amount.mul(unitsOneEthCanBuy()).mul(amount.mul(sizeBonus()).add(10**22)).mul(promoBonus().add(100)).div(10**42);\n', '        balances[buyer] = balances[buyer].add(amountFishToGive);\n', '        totalSupply_ = totalSupply_.add(amountFishToGive);\n', '        emit Transfer(address(this), buyer, amountFishToGive); \n', '        if(fishPromoHelpers(msg.sender) != 0 && promoFishCommission() != 0){\n', '        uint256 helperAmount = promoFishCommission().mul(amountFishToGive).div(100);\n', '        balances[fishPromoHelpers_[msg.sender]] = balances[fishPromoHelpers(msg.sender)].add(helperAmount);\n', '        totalSupply_ = totalSupply_.add(helperAmount);\n', '        emit Transfer(address(this), fishPromoHelpers(msg.sender), helperAmount);}  \n', '   }\n', '}\n', '\n', 'contract PromoContract{\n', '    using SafeMath for uint256;\n', '    \n', '    address masterContract = msg.sender;\n', '    bytes16 promoCode_;\n', '    \n', '    constructor(bytes16 _promoCode) public{promoCode_ = _promoCode;}\n', '    function promoCode() public view returns (bytes16){return promoCode_;}\n', '    function() payable public{\n', '        if(token(masterContract).ethPromoHelpers(address(this)) != 0 && token(masterContract).promoEthCommission() != 0){\n', '        uint amountToGive = token(masterContract).promoEthCommission().mul(msg.value).div(100);\n', '        token(masterContract).owner().transfer(msg.value.sub(amountToGive)); \n', '        token(masterContract).ethPromoHelpers(address(this)).transfer(amountToGive);}\n', '        else{token(masterContract).owner().transfer(msg.value);}\n', '        token(masterContract).specialSend(msg.value, msg.sender);\n', '    }\n', '}']
