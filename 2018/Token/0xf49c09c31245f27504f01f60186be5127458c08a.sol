['pragma solidity ^0.4.18;\n', '\n', '//\n', '//\n', '//    &#127744; EnishiCoin\n', '//\n', '//\n', '\n', '/**\n', ' * @title OwnerSigneture\n', ' * @dev The OwnerSigneture contract has multiple owner addresses\n', ' *      and does not execute if there is no signature of all owners.\n', ' */\n', 'contract OwnerSigneture\n', '{\n', '  address[] public owners;\n', '  mapping (address => bytes32) public signetures;\n', '\n', '  function OwnerSigneture(address[] _owners) public\n', '  {\n', '    owners = _owners;\n', '    initSignetures();\n', '  }\n', '\n', '  function initSignetures() private\n', '  {\n', '    for (uint i = 0; i < owners.length; i++) {\n', '      signetures[owners[i]] = bytes32(i + 1);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Add owners to the list\n', '   * @param _address Address of owner to add\n', '   */\n', '  function addOwner(address _address) signed public {\n', '    owners.push(_address);\n', '  }\n', '\n', '  /**\n', '   * @dev Remove owners from the list\n', '   * @param _address Address of owner to remove\n', '   */\n', '  function removeOwner(address _address) signed public returns (bool) {\n', '\n', '    uint NOT_FOUND = 1e10;\n', '    uint index = NOT_FOUND;\n', '    for (uint i = 0; i < owners.length; i++) {\n', '      if (owners[i] == _address) {\n', '        index = i;\n', '        break;\n', '      }\n', '    }\n', '\n', '    if (index == NOT_FOUND) {\n', '      return false;\n', '    }\n', '\n', '    for (uint j = index; j < owners.length - 1; j++){\n', '      owners[j] = owners[j + 1];\n', '    }\n', '    delete owners[owners.length - 1];\n', '    owners.length--;\n', '\n', '    return true;\n', '  }\n', '\n', '  modifier signed()\n', '  {\n', '    require(signetures[msg.sender] != 0x0);\n', '    bytes32 signeture = sha256(msg.data);\n', '    signetures[msg.sender] = signeture;\n', '\n', '    bool success = true;\n', '    for (uint i = 0; i < owners.length; i++) {\n', '      if (signeture != signetures[owners[i]]) {\n', '        success = false;\n', '      }\n', '    }\n', '\n', '    if (success) {\n', '      initSignetures();\n', '      _;\n', '      \n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC223\n', ' * @dev ERC223 contract interface with ERC20 functions and events\n', ' *    Fully backward compatible with ERC20\n', ' *    Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n', ' */\n', 'contract ERC223\n', '{\n', '  uint public totalSupply;\n', '\n', '  // ERC223 and ERC20 functions and events\n', '  function balanceOf(address who) public view returns (uint);\n', '  function totalSupply() public view returns (uint256 _supply);\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '\n', '  // ERC223 functions\n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function decimals() public view returns (uint8 _decimals);\n', '\n', '  // ERC20 functions and events\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '/**\n', ' * @title EnishiCoin\n', ' * @author Megumi &#127797;\n', ' * @dev EnishiCoin is an ERC223 Token with ERC20 functions and events\n', ' *    Fully backward compatible with ERC20\n', ' */\n', 'contract EnishiCoin is ERC223, OwnerSigneture\n', '{\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "EnishiCoin";\n', '  string public symbol = "XENS";\n', '  uint8 public decimals = 8;\n', '  uint256 dec = 1e8;\n', '\n', '  uint256 public initialSupply = 100e8 * dec; // 100億枚\n', '  uint256 public totalSupply;\n', '  bool public mintingFinished = false;\n', '\n', '  address public temporaryAddress = 0x092dEBAEAD027b43301FaFF52360B2B0538b0c98;\n', '\n', '  mapping (address => uint) balances;\n', '  mapping(address => mapping (address => uint256)) public allowance;\n', '  mapping (address => bool) public frozenAccount;\n', '  mapping (address => uint256) public unlockUnixTime;\n', '\n', '  mapping (address => uint) public temporaryBalances;\n', '  mapping (address => uint256) temporaryLimitUnixTime;\n', '\n', '  event FrozenFunds(address indexed target, bool frozen);\n', '  event LockedFunds(address indexed target, uint256 locked);\n', '  event Burn(address indexed burner, uint256 value);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  function EnishiCoin(address[] _owners) OwnerSigneture(_owners) public\n', '  {\n', '    owners = _owners;\n', '    totalSupply = initialSupply;\n', '    for (uint i = 0; i < _owners.length; i++) {\n', '        balances[_owners[i]] = totalSupply.div(_owners.length);\n', '    }\n', '  }\n', '\n', '  function name() public view returns (string _name)\n', '  {\n', '    return name;\n', '  }\n', '\n', '  function symbol() public view returns (string _symbol)\n', '  {\n', '    return symbol;\n', '  }\n', '\n', '  function decimals() public view returns (uint8 _decimals)\n', '  {\n', '    return decimals;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256 _totalSupply)\n', '  {\n', '    return totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint balance)\n', '  {\n', '    return balances[_owner];\n', '  }\n', '\n', '  modifier onlyPayloadSize(uint256 _size)\n', '  {\n', '    assert(msg.data.length >= _size + 4);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Prevent targets from sending or receiving tokens\n', '   * @param _targets Addresses to be frozen\n', '   * @param _isFrozen either to freeze it or not\n', '   */\n', '  function freezeAccounts(address[] _targets, bool _isFrozen) signed public\n', '  {\n', '    require(_targets.length > 0);\n', '\n', '    for (uint i = 0; i < _targets.length; i++) {\n', '      require(_targets[i] != 0x0);\n', '      frozenAccount[_targets[i]] = _isFrozen;\n', '      FrozenFunds(_targets[i], _isFrozen);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Prevent targets from sending or receiving tokens by setting Unix times\n', '   * @param _targets Addresses to be locked funds\n', '   * @param _unixTimes Unix times when locking up will be finished\n', '   */\n', '  function lockupAccounts(address[] _targets, uint[] _unixTimes) signed public\n', '  {\n', '    require(true\n', '      && _targets.length > 0\n', '      && _targets.length == _unixTimes.length\n', '    );\n', '\n', '    for(uint i = 0; i < _targets.length; i++) {\n', '      require(unlockUnixTime[_targets[i]] < _unixTimes[i]);\n', '      unlockUnixTime[_targets[i]] = _unixTimes[i];\n', '      LockedFunds(_targets[i], _unixTimes[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is called when a user or another contract wants to transfer funds.\n', '   */\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success)\n', '  {\n', '    require(true\n', '      && _value > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && frozenAccount[_to] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '      && now > unlockUnixTime[_to]\n', '    );\n', '\n', '    if (isContract(_to)) {\n', '      if (balanceOf(msg.sender) < _value) {\n', '        revert();\n', '      }\n', '      balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n', '      balances[_to] = SafeMath.add(balanceOf(_to), _value);\n', '      assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '      Transfer(msg.sender, _to, _value, _data);\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is called when a user or another contract wants to transfer funds.\n', '   */\n', '  function transfer(address _to, uint _value, bytes _data) public returns (bool success)\n', '  {\n', '    require(true\n', '      && _value > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && frozenAccount[_to] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '      && now > unlockUnixTime[_to]\n', '    );\n', '\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, _data);\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Standard function transfer similar to ERC20 transfer with no _data. Added due to backwards compatibility reasons.\n', '   */\n', '  function transfer(address _to, uint _value) public returns (bool success)\n', '  {\n', '    require(true\n', '      && _value > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && frozenAccount[_to] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '      && now > unlockUnixTime[_to]\n', '    );\n', '\n', '    bytes memory empty;\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, empty);\n', '    } else {\n', '      return transferToAddress(_to, _value, empty);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev assemble the given address bytecode. If bytecode exists then the _address is a contract.\n', '   */\n', '  function isContract(address _address) private view returns (bool is_contract)\n', '  {\n', '    uint length;\n', '    assembly {\n', '      // retrieve the size of the code on target address, this needs assembly\n', '      length := extcodesize(_address)\n', '    }\n', '    return (length > 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is called when transaction target is an address.\n', '   */\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success)\n', '  {\n', '    if (balanceOf(msg.sender) < _value) {\n', '      revert();\n', '    }\n', '    balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n', '    balances[_to] = SafeMath.add(balanceOf(_to), _value);\n', '    Transfer(msg.sender, _to, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is called when transaction target is a contract.\n', '   */\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success)\n', '  {\n', '    if (balanceOf(msg.sender) < _value) {\n', '      revert();\n', '    }\n', '    balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n', '    balances[_to] = SafeMath.add(balanceOf(_to), _value);\n', '    ContractReceiver receiver = ContractReceiver(_to);\n', '    receiver.tokenFallback(msg.sender, _value, _data);\n', '    Transfer(msg.sender, _to, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _from The address that will burn the tokens.\n', '   * @param _amount The amount of token to be burned.\n', '   */\n', '  function burn(address _from, uint256 _amount) signed public\n', '  {\n', '    require(true\n', '      && _amount > 0\n', '      && balances[_from] >= _amount\n', '    );\n', '\n', '    _amount = SafeMath.mul(_amount, dec);\n', '    balances[_from] = SafeMath.sub(balances[_from], _amount);\n', '    totalSupply = SafeMath.sub(totalSupply, _amount);\n', '    Burn(_from, _amount);\n', '  }\n', '\n', '  modifier canMint()\n', '  {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   */\n', '  function mint(address _to, uint256 _amount) signed canMint public returns (bool)\n', '  {\n', '    require(_amount > 0);\n', '\n', '    _amount = SafeMath.mul(_amount, dec);\n', '    totalSupply = SafeMath.add(totalSupply, _amount);\n', '    balances[_to] = SafeMath.add(balances[_to], _amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   */\n', '  function finishMinting() signed canMint public returns (bool)\n', '  {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to distribute tokens to the list of addresses by the provided amount\n', '   */\n', '  function distributeAirdrop(address[] _addresses, uint256 _amount) public returns (bool)\n', '  {\n', '    require(true\n', '      && _amount > 0\n', '      && _addresses.length > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '    );\n', '\n', '    _amount = SafeMath.mul(_amount, dec);\n', '    uint256 totalAmount = SafeMath.mul(_amount, _addresses.length);\n', '    require(balances[msg.sender] >= totalAmount);\n', '\n', '    for (uint i = 0; i < _addresses.length; i++) {\n', '      require(true\n', '        && _addresses[i] != 0x0\n', '        && frozenAccount[_addresses[i]] == false\n', '        && now > unlockUnixTime[_addresses[i]]\n', '      );\n', '\n', '      balances[_addresses[i]] = SafeMath.add(balances[_addresses[i]], _amount);\n', '      Transfer(msg.sender, _addresses[i], _amount);\n', '    }\n', '    balances[msg.sender] = SafeMath.sub(balances[msg.sender], totalAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to collect tokens from the list of _addresses\n', '   */\n', '  function collectTokens(address[] _addresses, uint256[] _amounts) signed public returns (bool)\n', '  {\n', '    require(true\n', '      && _addresses.length > 0\n', '      && _addresses.length == _amounts.length\n', '    );\n', '\n', '    uint256 totalAmount = 0;\n', '\n', '    for (uint i = 0; i < _addresses.length; i++) {\n', '      require(true\n', '        && _amounts[i] > 0\n', '        && _addresses[i] != 0x0\n', '        && frozenAccount[_addresses[i]] == false\n', '        && now > unlockUnixTime[_addresses[i]]\n', '      );\n', '\n', '      _amounts[i] = SafeMath.mul(_amounts[i], dec);\n', '      require(balances[_addresses[i]] >= _amounts[i]);\n', '\n', '      balances[_addresses[i]] = SafeMath.sub(balances[_addresses[i]], _amounts[i]);\n', '      totalAmount = SafeMath.add(totalAmount, _amounts[i]);\n', '      Transfer(_addresses[i], msg.sender, _amounts[i]);\n', '    }\n', '    balances[msg.sender] = SafeMath.add(balances[msg.sender], totalAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Push tokens to temporary area.\n', '   */\n', '  function pushToken(address[] _addresses, uint256 _amount, uint _limitUnixTime) public returns (bool)\n', '  {\n', '    require(true\n', '      && _amount > 0\n', '      && _addresses.length > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '    );\n', '\n', '    _amount = SafeMath.mul(_amount, dec);\n', '    uint256 totalAmount = SafeMath.mul(_amount, _addresses.length);\n', '    require(balances[msg.sender] >= totalAmount);\n', '\n', '    for (uint i = 0; i < _addresses.length; i++) {\n', '      require(true\n', '        && _addresses[i] != 0x0\n', '        && frozenAccount[_addresses[i]] == false\n', '        && now > unlockUnixTime[_addresses[i]]\n', '      );\n', '      temporaryBalances[_addresses[i]] = SafeMath.add(temporaryBalances[_addresses[i]], _amount);\n', '      temporaryLimitUnixTime[_addresses[i]] = _limitUnixTime;\n', '    }\n', '    balances[msg.sender] = SafeMath.sub(balances[msg.sender], totalAmount);\n', '    balances[temporaryAddress] = SafeMath.add(balances[temporaryAddress], totalAmount);\n', '    Transfer(msg.sender, temporaryAddress, totalAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Pop tokens from temporary area. _amount\n', '   */\n', '  function popToken(address _to) public returns (bool)\n', '  {\n', '    require(true\n', '      && temporaryBalances[msg.sender] > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '      && frozenAccount[_to] == false\n', '      && now > unlockUnixTime[_to]\n', '      && balances[temporaryAddress] >= temporaryBalances[msg.sender]\n', '      && temporaryLimitUnixTime[msg.sender] > now\n', '    );\n', '\n', '    uint256 amount = temporaryBalances[msg.sender];\n', '\n', '    temporaryBalances[msg.sender] = 0;\n', '    balances[temporaryAddress] = SafeMath.sub(balances[temporaryAddress], amount);\n', '    balances[_to] = SafeMath.add(balances[_to], amount);\n', '    Transfer(temporaryAddress, _to, amount);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   *      Added due to backwards compatibility with ERC20\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '      require(true\n', '        && _to != address(0)\n', '        && _value > 0\n', '        && balances[_from] >= _value\n', '        && allowance[_from][msg.sender] >= _value\n', '        && frozenAccount[_from] == false \n', '        && frozenAccount[_to] == false\n', '        && now > unlockUnixTime[_from] \n', '        && now > unlockUnixTime[_to]);\n', '\n', '      balances[_from] = balances[_from].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows _spender to spend no more than _value tokens in your behalf\n', '   *      Added due to backwards compatibility with ERC20\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    allowance[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender\n', '   *      Added due to backwards compatibility with ERC20\n', '   * @param _owner address The address which owns the funds\n', '   * @param _spender address The address which will spend the funds\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return allowance[_owner][_spender];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath\n', '{\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ContractReceiver\n', ' * @dev Contract that is working with ERC223 tokens\n', ' */\n', 'contract ContractReceiver\n', '{\n', '  struct TKN {\n', '    address sender;\n', '    uint value;\n', '    bytes data;\n', '    bytes4 sig;\n', '  }\n', '\n', '  function tokenFallback(address _from, uint _value, bytes _data) public pure\n', '  {\n', '    TKN memory tkn;\n', '    tkn.sender = _from;\n', '    tkn.value = _value;\n', '    tkn.data = _data;\n', '    uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '    tkn.sig = bytes4(u);\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '//\n', '//\n', '//    🌀 EnishiCoin\n', '//\n', '//\n', '\n', '/**\n', ' * @title OwnerSigneture\n', ' * @dev The OwnerSigneture contract has multiple owner addresses\n', ' *      and does not execute if there is no signature of all owners.\n', ' */\n', 'contract OwnerSigneture\n', '{\n', '  address[] public owners;\n', '  mapping (address => bytes32) public signetures;\n', '\n', '  function OwnerSigneture(address[] _owners) public\n', '  {\n', '    owners = _owners;\n', '    initSignetures();\n', '  }\n', '\n', '  function initSignetures() private\n', '  {\n', '    for (uint i = 0; i < owners.length; i++) {\n', '      signetures[owners[i]] = bytes32(i + 1);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Add owners to the list\n', '   * @param _address Address of owner to add\n', '   */\n', '  function addOwner(address _address) signed public {\n', '    owners.push(_address);\n', '  }\n', '\n', '  /**\n', '   * @dev Remove owners from the list\n', '   * @param _address Address of owner to remove\n', '   */\n', '  function removeOwner(address _address) signed public returns (bool) {\n', '\n', '    uint NOT_FOUND = 1e10;\n', '    uint index = NOT_FOUND;\n', '    for (uint i = 0; i < owners.length; i++) {\n', '      if (owners[i] == _address) {\n', '        index = i;\n', '        break;\n', '      }\n', '    }\n', '\n', '    if (index == NOT_FOUND) {\n', '      return false;\n', '    }\n', '\n', '    for (uint j = index; j < owners.length - 1; j++){\n', '      owners[j] = owners[j + 1];\n', '    }\n', '    delete owners[owners.length - 1];\n', '    owners.length--;\n', '\n', '    return true;\n', '  }\n', '\n', '  modifier signed()\n', '  {\n', '    require(signetures[msg.sender] != 0x0);\n', '    bytes32 signeture = sha256(msg.data);\n', '    signetures[msg.sender] = signeture;\n', '\n', '    bool success = true;\n', '    for (uint i = 0; i < owners.length; i++) {\n', '      if (signeture != signetures[owners[i]]) {\n', '        success = false;\n', '      }\n', '    }\n', '\n', '    if (success) {\n', '      initSignetures();\n', '      _;\n', '      \n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC223\n', ' * @dev ERC223 contract interface with ERC20 functions and events\n', ' *    Fully backward compatible with ERC20\n', ' *    Recommended implementation used at https://github.com/Dexaran/ERC223-token-standard/tree/Recommended\n', ' */\n', 'contract ERC223\n', '{\n', '  uint public totalSupply;\n', '\n', '  // ERC223 and ERC20 functions and events\n', '  function balanceOf(address who) public view returns (uint);\n', '  function totalSupply() public view returns (uint256 _supply);\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '\n', '  // ERC223 functions\n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function decimals() public view returns (uint8 _decimals);\n', '\n', '  // ERC20 functions and events\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '/**\n', ' * @title EnishiCoin\n', ' * @author Megumi 🌵\n', ' * @dev EnishiCoin is an ERC223 Token with ERC20 functions and events\n', ' *    Fully backward compatible with ERC20\n', ' */\n', 'contract EnishiCoin is ERC223, OwnerSigneture\n', '{\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "EnishiCoin";\n', '  string public symbol = "XENS";\n', '  uint8 public decimals = 8;\n', '  uint256 dec = 1e8;\n', '\n', '  uint256 public initialSupply = 100e8 * dec; // 100億枚\n', '  uint256 public totalSupply;\n', '  bool public mintingFinished = false;\n', '\n', '  address public temporaryAddress = 0x092dEBAEAD027b43301FaFF52360B2B0538b0c98;\n', '\n', '  mapping (address => uint) balances;\n', '  mapping(address => mapping (address => uint256)) public allowance;\n', '  mapping (address => bool) public frozenAccount;\n', '  mapping (address => uint256) public unlockUnixTime;\n', '\n', '  mapping (address => uint) public temporaryBalances;\n', '  mapping (address => uint256) temporaryLimitUnixTime;\n', '\n', '  event FrozenFunds(address indexed target, bool frozen);\n', '  event LockedFunds(address indexed target, uint256 locked);\n', '  event Burn(address indexed burner, uint256 value);\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  function EnishiCoin(address[] _owners) OwnerSigneture(_owners) public\n', '  {\n', '    owners = _owners;\n', '    totalSupply = initialSupply;\n', '    for (uint i = 0; i < _owners.length; i++) {\n', '        balances[_owners[i]] = totalSupply.div(_owners.length);\n', '    }\n', '  }\n', '\n', '  function name() public view returns (string _name)\n', '  {\n', '    return name;\n', '  }\n', '\n', '  function symbol() public view returns (string _symbol)\n', '  {\n', '    return symbol;\n', '  }\n', '\n', '  function decimals() public view returns (uint8 _decimals)\n', '  {\n', '    return decimals;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256 _totalSupply)\n', '  {\n', '    return totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint balance)\n', '  {\n', '    return balances[_owner];\n', '  }\n', '\n', '  modifier onlyPayloadSize(uint256 _size)\n', '  {\n', '    assert(msg.data.length >= _size + 4);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Prevent targets from sending or receiving tokens\n', '   * @param _targets Addresses to be frozen\n', '   * @param _isFrozen either to freeze it or not\n', '   */\n', '  function freezeAccounts(address[] _targets, bool _isFrozen) signed public\n', '  {\n', '    require(_targets.length > 0);\n', '\n', '    for (uint i = 0; i < _targets.length; i++) {\n', '      require(_targets[i] != 0x0);\n', '      frozenAccount[_targets[i]] = _isFrozen;\n', '      FrozenFunds(_targets[i], _isFrozen);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Prevent targets from sending or receiving tokens by setting Unix times\n', '   * @param _targets Addresses to be locked funds\n', '   * @param _unixTimes Unix times when locking up will be finished\n', '   */\n', '  function lockupAccounts(address[] _targets, uint[] _unixTimes) signed public\n', '  {\n', '    require(true\n', '      && _targets.length > 0\n', '      && _targets.length == _unixTimes.length\n', '    );\n', '\n', '    for(uint i = 0; i < _targets.length; i++) {\n', '      require(unlockUnixTime[_targets[i]] < _unixTimes[i]);\n', '      unlockUnixTime[_targets[i]] = _unixTimes[i];\n', '      LockedFunds(_targets[i], _unixTimes[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is called when a user or another contract wants to transfer funds.\n', '   */\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success)\n', '  {\n', '    require(true\n', '      && _value > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && frozenAccount[_to] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '      && now > unlockUnixTime[_to]\n', '    );\n', '\n', '    if (isContract(_to)) {\n', '      if (balanceOf(msg.sender) < _value) {\n', '        revert();\n', '      }\n', '      balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n', '      balances[_to] = SafeMath.add(balanceOf(_to), _value);\n', '      assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '      Transfer(msg.sender, _to, _value, _data);\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is called when a user or another contract wants to transfer funds.\n', '   */\n', '  function transfer(address _to, uint _value, bytes _data) public returns (bool success)\n', '  {\n', '    require(true\n', '      && _value > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && frozenAccount[_to] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '      && now > unlockUnixTime[_to]\n', '    );\n', '\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, _data);\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Standard function transfer similar to ERC20 transfer with no _data. Added due to backwards compatibility reasons.\n', '   */\n', '  function transfer(address _to, uint _value) public returns (bool success)\n', '  {\n', '    require(true\n', '      && _value > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && frozenAccount[_to] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '      && now > unlockUnixTime[_to]\n', '    );\n', '\n', '    bytes memory empty;\n', '    if (isContract(_to)) {\n', '      return transferToContract(_to, _value, empty);\n', '    } else {\n', '      return transferToAddress(_to, _value, empty);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev assemble the given address bytecode. If bytecode exists then the _address is a contract.\n', '   */\n', '  function isContract(address _address) private view returns (bool is_contract)\n', '  {\n', '    uint length;\n', '    assembly {\n', '      // retrieve the size of the code on target address, this needs assembly\n', '      length := extcodesize(_address)\n', '    }\n', '    return (length > 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is called when transaction target is an address.\n', '   */\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success)\n', '  {\n', '    if (balanceOf(msg.sender) < _value) {\n', '      revert();\n', '    }\n', '    balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n', '    balances[_to] = SafeMath.add(balanceOf(_to), _value);\n', '    Transfer(msg.sender, _to, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function that is called when transaction target is a contract.\n', '   */\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success)\n', '  {\n', '    if (balanceOf(msg.sender) < _value) {\n', '      revert();\n', '    }\n', '    balances[msg.sender] = SafeMath.sub(balanceOf(msg.sender), _value);\n', '    balances[_to] = SafeMath.add(balanceOf(_to), _value);\n', '    ContractReceiver receiver = ContractReceiver(_to);\n', '    receiver.tokenFallback(msg.sender, _value, _data);\n', '    Transfer(msg.sender, _to, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _from The address that will burn the tokens.\n', '   * @param _amount The amount of token to be burned.\n', '   */\n', '  function burn(address _from, uint256 _amount) signed public\n', '  {\n', '    require(true\n', '      && _amount > 0\n', '      && balances[_from] >= _amount\n', '    );\n', '\n', '    _amount = SafeMath.mul(_amount, dec);\n', '    balances[_from] = SafeMath.sub(balances[_from], _amount);\n', '    totalSupply = SafeMath.sub(totalSupply, _amount);\n', '    Burn(_from, _amount);\n', '  }\n', '\n', '  modifier canMint()\n', '  {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   */\n', '  function mint(address _to, uint256 _amount) signed canMint public returns (bool)\n', '  {\n', '    require(_amount > 0);\n', '\n', '    _amount = SafeMath.mul(_amount, dec);\n', '    totalSupply = SafeMath.add(totalSupply, _amount);\n', '    balances[_to] = SafeMath.add(balances[_to], _amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   */\n', '  function finishMinting() signed canMint public returns (bool)\n', '  {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to distribute tokens to the list of addresses by the provided amount\n', '   */\n', '  function distributeAirdrop(address[] _addresses, uint256 _amount) public returns (bool)\n', '  {\n', '    require(true\n', '      && _amount > 0\n', '      && _addresses.length > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '    );\n', '\n', '    _amount = SafeMath.mul(_amount, dec);\n', '    uint256 totalAmount = SafeMath.mul(_amount, _addresses.length);\n', '    require(balances[msg.sender] >= totalAmount);\n', '\n', '    for (uint i = 0; i < _addresses.length; i++) {\n', '      require(true\n', '        && _addresses[i] != 0x0\n', '        && frozenAccount[_addresses[i]] == false\n', '        && now > unlockUnixTime[_addresses[i]]\n', '      );\n', '\n', '      balances[_addresses[i]] = SafeMath.add(balances[_addresses[i]], _amount);\n', '      Transfer(msg.sender, _addresses[i], _amount);\n', '    }\n', '    balances[msg.sender] = SafeMath.sub(balances[msg.sender], totalAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to collect tokens from the list of _addresses\n', '   */\n', '  function collectTokens(address[] _addresses, uint256[] _amounts) signed public returns (bool)\n', '  {\n', '    require(true\n', '      && _addresses.length > 0\n', '      && _addresses.length == _amounts.length\n', '    );\n', '\n', '    uint256 totalAmount = 0;\n', '\n', '    for (uint i = 0; i < _addresses.length; i++) {\n', '      require(true\n', '        && _amounts[i] > 0\n', '        && _addresses[i] != 0x0\n', '        && frozenAccount[_addresses[i]] == false\n', '        && now > unlockUnixTime[_addresses[i]]\n', '      );\n', '\n', '      _amounts[i] = SafeMath.mul(_amounts[i], dec);\n', '      require(balances[_addresses[i]] >= _amounts[i]);\n', '\n', '      balances[_addresses[i]] = SafeMath.sub(balances[_addresses[i]], _amounts[i]);\n', '      totalAmount = SafeMath.add(totalAmount, _amounts[i]);\n', '      Transfer(_addresses[i], msg.sender, _amounts[i]);\n', '    }\n', '    balances[msg.sender] = SafeMath.add(balances[msg.sender], totalAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Push tokens to temporary area.\n', '   */\n', '  function pushToken(address[] _addresses, uint256 _amount, uint _limitUnixTime) public returns (bool)\n', '  {\n', '    require(true\n', '      && _amount > 0\n', '      && _addresses.length > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '    );\n', '\n', '    _amount = SafeMath.mul(_amount, dec);\n', '    uint256 totalAmount = SafeMath.mul(_amount, _addresses.length);\n', '    require(balances[msg.sender] >= totalAmount);\n', '\n', '    for (uint i = 0; i < _addresses.length; i++) {\n', '      require(true\n', '        && _addresses[i] != 0x0\n', '        && frozenAccount[_addresses[i]] == false\n', '        && now > unlockUnixTime[_addresses[i]]\n', '      );\n', '      temporaryBalances[_addresses[i]] = SafeMath.add(temporaryBalances[_addresses[i]], _amount);\n', '      temporaryLimitUnixTime[_addresses[i]] = _limitUnixTime;\n', '    }\n', '    balances[msg.sender] = SafeMath.sub(balances[msg.sender], totalAmount);\n', '    balances[temporaryAddress] = SafeMath.add(balances[temporaryAddress], totalAmount);\n', '    Transfer(msg.sender, temporaryAddress, totalAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Pop tokens from temporary area. _amount\n', '   */\n', '  function popToken(address _to) public returns (bool)\n', '  {\n', '    require(true\n', '      && temporaryBalances[msg.sender] > 0\n', '      && frozenAccount[msg.sender] == false\n', '      && now > unlockUnixTime[msg.sender]\n', '      && frozenAccount[_to] == false\n', '      && now > unlockUnixTime[_to]\n', '      && balances[temporaryAddress] >= temporaryBalances[msg.sender]\n', '      && temporaryLimitUnixTime[msg.sender] > now\n', '    );\n', '\n', '    uint256 amount = temporaryBalances[msg.sender];\n', '\n', '    temporaryBalances[msg.sender] = 0;\n', '    balances[temporaryAddress] = SafeMath.sub(balances[temporaryAddress], amount);\n', '    balances[_to] = SafeMath.add(balances[_to], amount);\n', '    Transfer(temporaryAddress, _to, amount);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   *      Added due to backwards compatibility with ERC20\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '      require(true\n', '        && _to != address(0)\n', '        && _value > 0\n', '        && balances[_from] >= _value\n', '        && allowance[_from][msg.sender] >= _value\n', '        && frozenAccount[_from] == false \n', '        && frozenAccount[_to] == false\n', '        && now > unlockUnixTime[_from] \n', '        && now > unlockUnixTime[_to]);\n', '\n', '      balances[_from] = balances[_from].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows _spender to spend no more than _value tokens in your behalf\n', '   *      Added due to backwards compatibility with ERC20\n', '   * @param _spender The address authorized to spend\n', '   * @param _value the max amount they can spend\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    allowance[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender\n', '   *      Added due to backwards compatibility with ERC20\n', '   * @param _owner address The address which owns the funds\n', '   * @param _spender address The address which will spend the funds\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return allowance[_owner][_spender];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath\n', '{\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ContractReceiver\n', ' * @dev Contract that is working with ERC223 tokens\n', ' */\n', 'contract ContractReceiver\n', '{\n', '  struct TKN {\n', '    address sender;\n', '    uint value;\n', '    bytes data;\n', '    bytes4 sig;\n', '  }\n', '\n', '  function tokenFallback(address _from, uint _value, bytes _data) public pure\n', '  {\n', '    TKN memory tkn;\n', '    tkn.sender = _from;\n', '    tkn.value = _value;\n', '    tkn.data = _data;\n', '    uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '    tkn.sig = bytes4(u);\n', '  }\n', '}']
