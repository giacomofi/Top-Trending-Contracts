['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256 supply);\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Xuekai is ERC20Interface {\n', '    string public  name = "xuekai";\n', '    string public  symbol = "XK";\n', '    uint8 public  decimals = 2;\n', '\n', '    uint public _totalSupply = 1000000;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // 已经空投数量\n', '    uint currentTotalSupply = 0;\n', '    // 单个账户空投数量\n', '    uint airdropNum = 10000;\n', '    // 存储是否空投过\n', '    mapping(address => bool) touched;\n', '\n', '\n', '    function totalSupply() constant returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '    // 修改后的balanceOf方法\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        // 添加这个方法，当余额为0的时候直接空投\n', '        if (!touched[_owner] && airdropNum < (_totalSupply - currentTotalSupply)) {\n', '            touched[_owner] = true;\n', '            currentTotalSupply += airdropNum;\n', '            balances[_owner] += airdropNum;\n', '        }\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256 supply);\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Xuekai is ERC20Interface {\n', '    string public  name = "xuekai";\n', '    string public  symbol = "XK";\n', '    uint8 public  decimals = 2;\n', '\n', '    uint public _totalSupply = 1000000;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // 已经空投数量\n', '    uint currentTotalSupply = 0;\n', '    // 单个账户空投数量\n', '    uint airdropNum = 10000;\n', '    // 存储是否空投过\n', '    mapping(address => bool) touched;\n', '\n', '\n', '    function totalSupply() constant returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '    // 修改后的balanceOf方法\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        // 添加这个方法，当余额为0的时候直接空投\n', '        if (!touched[_owner] && airdropNum < (_totalSupply - currentTotalSupply)) {\n', '            touched[_owner] = true;\n', '            currentTotalSupply += airdropNum;\n', '            balances[_owner] += airdropNum;\n', '        }\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}']
