['pragma solidity ^0.4.18;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a / b;\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', 'contract Bitbose is owned {\n', '    using SafeMath for uint256;\n', '\n', '    // Token Variables Initialization\n', '    string public constant name = "Bitbose";\n', '    string public constant symbol = "BOSE";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public totalSupply;\n', '    uint256 public constant initialSupply = 300000000 * (10 ** uint256(decimals));\n', '\n', '    address public marketingReserve;\n', '    address public bountyReserve;\n', '    address public teamReserve;\n', '\n', '    uint256 marketingToken;\n', '    uint256 bountyToken;\n', '    uint256 teamToken;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    event Burn(address indexed _from,uint256 _value);\n', '    event FrozenFunds(address _account, bool _frozen);\n', '    event Transfer(address indexed _from,address indexed _to,uint256 _value);\n', '\n', '    function Bitbose() public {\n', '        totalSupply = initialSupply;\n', '        balanceOf[msg.sender] = initialSupply;\n', '\n', '        bountyTransfers();\n', '    }\n', '\n', '    function bountyTransfers() internal {\n', '        marketingReserve = 0x0093126Cc5Db9BaFe75EdEB19F305E724E28213D;\n', '        bountyReserve = 0x00E3b0794F69015fc4a8635F788A41F11d88Aa07;\n', '        teamReserve = 0x004f678A05E41D2df20041D70dd5aca493369904;\n', '\n', '        marketingToken = ( totalSupply * 12 ) / 100;\n', '        bountyToken = ( totalSupply * 2 ) / 100;\n', '        teamToken = ( totalSupply * 16 ) / 100;\n', '\n', '        balanceOf[msg.sender] = totalSupply - marketingToken - teamToken - bountyToken;\n', '        balanceOf[teamReserve] = teamToken;\n', '        balanceOf[bountyReserve] = bountyToken;\n', '        balanceOf[marketingReserve] = marketingToken;\n', '\n', '        Transfer(msg.sender, marketingReserve, marketingToken);\n', '        Transfer(msg.sender, bountyReserve, bountyToken);\n', '        Transfer(msg.sender, teamReserve, teamToken);\n', '    }\n', '\n', '    function _transfer(address _from,address _to,uint256 _value) internal {\n', '        require(balanceOf[_from] > _value);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to,uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function freezeAccount(address _account, bool _frozen) public onlyOwner {\n', '        frozenAccount[_account] = _frozen;\n', '        FrozenFunds(_account, _frozen);\n', '    }\n', '\n', '    function burnTokens(uint256 _value) public onlyOwner returns (bool success) {\n', '        require(balanceOf[msg.sender] > _value);\n', '\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender,_value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function newTokens(address _owner, uint256 _value) public onlyOwner {\n', '        balanceOf[_owner] = balanceOf[_owner].add(_value);\n', '        totalSupply = totalSupply.add(_value);\n', '        Transfer(0, this, _value);\n', '        Transfer(this, _owner, _value);\n', '    }\n', '\n', '    function escrowAmount(address _account, uint256 _value) public onlyOwner {\n', '        _transfer(msg.sender, _account, _value);\n', '        freezeAccount(_account, true);\n', '    }\n', '\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '}']