['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev revert()s if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  \n', '  \n', '  function mul256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity automatically revert()s when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }  \n', '  \n', '  function mod256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\tuint256 c = a % b;\n', '\treturn c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant public returns (uint256);\n', '  function transfer(address to, uint256 value) public;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev ERC20 interface with allowances. \n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant public returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public;\n', '  function approve(address spender, uint256 value) public;\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       revert();\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public {\n', '    balances[msg.sender] = balances[msg.sender].sub256(_value);\n', '    balances[_to] = balances[_to].add256(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implemantation of the basic standart token.\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already revert() if this condition is not met\n', '    // if (_value > _allowance) revert();\n', '\n', '    balances[_to] = balances[_to].add256(_value);\n', '    balances[_from] = balances[_from].sub256(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub256(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public {\n', '\n', '    //  To change the approve amount you first have to reduce the addresses\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title TeuToken\n', ' * @dev The main TEU token contract\n', ' * \n', ' */\n', ' \n', 'contract TeuToken is StandardToken, Ownable{\n', '  string public name = "20-footEqvUnit";\n', '  string public symbol = "TEU";\n', '  uint public decimals = 18;\n', '\n', '  event TokenBurned(uint256 value);\n', '  \n', '  function TeuToken() public {\n', '    totalSupply = (10 ** 8) * (10 ** decimals);\n', '    balances[msg.sender] = totalSupply;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to burn the token\n', '   * @param _value number of tokens to be burned.\n', '   */\n', '  function burn(uint _value) onlyOwner public {\n', '    require(balances[msg.sender] >= _value);\n', '    balances[msg.sender] = balances[msg.sender].sub256(_value);\n', '    totalSupply = totalSupply.sub256(_value);\n', '    TokenBurned(_value);\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * Pausable\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  bool public stopped;\n', '  modifier stopInEmergency {\n', '    if (stopped) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '  \n', '  modifier onlyInEmergency {\n', '    if (!stopped) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '  // called by the owner on emergency, triggers stopped state\n', '  function emergencyStop() external onlyOwner {\n', '    stopped = true;\n', '  }\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function release() external onlyOwner onlyInEmergency {\n', '    stopped = false;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title teuBookingDeposit \n', ' * @dev TEU Booking Deposit: A smart contract governing the entitlement of TEU token of two parties for a container shipping booking \n', '  */\n', 'contract TeuBookingDeposit is Ownable, Pausable {\n', '\tevent eAdjustClientAccountBalance(bytes32 indexed _PartnerID, bytes32 _ClientId, bytes32 _adjustedBy, string _CrDr, uint256 _tokenAmount, string CrDrR, uint256 _tokenRAmount);\n', '\tevent eAllocateRestrictedTokenTo(bytes32 indexed _PartnerID, bytes32 indexed _clientId, bytes32 _allocatedBy, uint256 _tokenAmount);\n', '\tevent eAllocateRestrictedTokenToPartner(bytes32 indexed _PartnerID, bytes32 _allocatedBy, uint256 _tokenAmount);\n', '\tevent eCancelTransactionEvent(bytes32 indexed _PartnerID, string _TxNum, bytes32 indexed _fromClientId, uint256 _tokenAmount, uint256 _rAmount, uint256 _grandTotal);\n', '\tevent eConfirmReturnToken(bytes32 indexed _PartnerID, string _TxNum, bytes32 indexed _fromClientId, uint256 _tokenAmount, uint256 _rAmount, uint256 _grandTotal);\n', '    event eConfirmTokenTransferToBooking(bytes32 indexed _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _amount1, uint256 _rAmount1, uint256 _amount2, uint256 _rAmount2);\n', '    event eKillTransactionEvent(bytes32 _PartnerID, bytes32 _killedBy, string TxHash, string _TxNum);\n', '\tevent ePartnerAllocateRestrictedTokenTo(bytes32 indexed _PartnerID, bytes32 indexed _clientId, uint256 _tokenAmount);\n', '\tevent eReceiveTokenByClientAccount(bytes32 indexed _clientId, uint256 _tokenAmount, address _transferFrom);\n', '\tevent eSetWalletToClientAccount(bytes32 _clientId, address _wallet, bytes32 _setBy);\n', '\tevent eTransactionFeeForBooking(bytes32 indexed _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _amount1, uint256 _rAmount1, uint256 _amount2, uint256 _rAmount2);\n', '\tevent eWithdrawTokenToClientAccount(bytes32 indexed _clientId, bytes32 _withdrawnBy, uint256 _tokenAmount, address _transferTo);\n', '\tevent eWithdrawUnallocatedRestrictedToken(uint256 _tokenAmount, bytes32 _withdrawnBy);\n', '\t\n', '\t\n', '\t\n', '    using SafeMath for uint256;\n', '\t\n', '\t\n', '    TeuToken    private token;\n', '\t/*  \n', '    * Failsafe drain\n', '    */\n', '    function drain() onlyOwner public {\n', '        if (!owner.send(this.balance)) revert();\n', '    }\n', '\t\n', '\tfunction () payable public {\n', '\t\tif (msg.value!=0) revert();\n', '\t}\n', '\t\n', '\tfunction stringToBytes32(string memory source) internal pure returns (bytes32 result) {\n', '\t\tbytes memory tempEmptyStringTest = bytes(source);\n', '\t\tif (tempEmptyStringTest.length == 0) {\n', '\t\t\treturn 0x0;\n', '\t\t}\n', '\n', '\t\tassembly {\n', '\t\t\tresult := mload(add(source, 32))\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction killTransaction(bytes32 _PartnerID, bytes32 _killedBy, string _txHash, string _txNum) onlyOwner stopInEmergency public {\n', '\t\teKillTransactionEvent(_PartnerID, _killedBy, _txHash, _txNum);\n', '\t}\n', '\t\n', '\t\t\n', '\tfunction cancelTransaction(bytes32 _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _tokenAmount1, uint256 _rAmount1, uint256 _tokenAmount2, uint256 _rAmount2, uint256 _grandTotal) onlyOwner stopInEmergency public {\n', '        eCancelTransactionEvent(_PartnerID, _TxNum, _fromClientId1, _tokenAmount1, _rAmount1, _grandTotal);\n', '\t\teCancelTransactionEvent(_PartnerID, _TxNum, _toClientId2, _tokenAmount2, _rAmount2, _grandTotal);\n', '\t}\n', '\t\n', '\t\n', '\tfunction AdjustClientAccountBalance(bytes32 _PartnerID, bytes32 _ClientId, bytes32 _allocatedBy, string _CrDr, uint256 _tokenAmount, string CrDrR, uint256 _RtokenAmount) onlyOwner stopInEmergency public {\n', '\t\teAdjustClientAccountBalance(_PartnerID, _ClientId, _allocatedBy, _CrDr, _tokenAmount, CrDrR, _RtokenAmount);\n', '\t}\n', '\t\n', '\tfunction setWalletToClientAccount(bytes32 _clientId, address _wallet, bytes32 _setBy) onlyOwner public {\n', '        eSetWalletToClientAccount(_clientId, _wallet, _setBy);\n', '    }\n', '\t\n', '    function receiveTokenByClientAccount(string _clientId, uint256 _tokenAmount, address _transferFrom) stopInEmergency public {\n', '        require(_tokenAmount > 0);\n', '        bytes32 _clientId32 = stringToBytes32(_clientId);\n', '\t\ttoken.transferFrom(_transferFrom, this, _tokenAmount);   \n', '\t\teReceiveTokenByClientAccount(_clientId32, _tokenAmount, _transferFrom);\n', '    }\n', '\t\n', '\tfunction withdrawTokenToClientAccount(bytes32 _clientId, bytes32 _withdrawnBy, address _transferTo, uint256 _tokenAmount) onlyOwner stopInEmergency public {\n', '        require(_tokenAmount > 0);\n', '\n', '\t\ttoken.transfer(_transferTo, _tokenAmount);      \n', '\n', '\t\teWithdrawTokenToClientAccount(_clientId, _withdrawnBy, _tokenAmount, _transferTo);\n', '    }\n', '\t\n', '\n', '\t\n', '    // functions for restricted token management\n', '    function allocateRestrictedTokenTo(bytes32 _PartnerID, bytes32 _clientId, bytes32 _allocatedBy, uint256 _tokenAmount) onlyOwner stopInEmergency public {\n', '\t\teAllocateRestrictedTokenTo(_PartnerID, _clientId, _allocatedBy, _tokenAmount);\n', '    }\n', '    \n', '    function withdrawUnallocatedRestrictedToken(uint256 _tokenAmount, bytes32 _withdrawnBy) onlyOwner stopInEmergency public {\n', '        //require(_tokenAmount <= token.balanceOf(this).sub256(totalBookingClientToken).sub256(totalClientToken).sub256(totalRestrictedToken));\n', '        token.transfer(msg.sender, _tokenAmount);\n', '\t\teWithdrawUnallocatedRestrictedToken(_tokenAmount, _withdrawnBy);\n', '    } \n', '\n', '// functions for restricted token management Partner side\n', '    function allocateRestrictedTokenToPartner(bytes32 _PartnerID, bytes32 _allocatedBy, uint256 _tokenAmount) onlyOwner stopInEmergency public {\n', '\t\teAllocateRestrictedTokenToPartner(_PartnerID, _allocatedBy, _tokenAmount);\n', '    }\n', '\t\n', '    function partnerAllocateRestrictedTokenTo(bytes32 _PartnerID, bytes32 _clientId, uint256 _tokenAmount) onlyOwner stopInEmergency public {\n', '\t\tePartnerAllocateRestrictedTokenTo(_PartnerID, _clientId, _tokenAmount);\n', '    }\n', '\t\n', '// functions for transferring token to booking \t\n', '\tfunction confirmTokenTransferToBooking(bytes32 _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _tokenAmount1, uint256 _rAmount1, uint256 _tokenAmount2, uint256 _rAmount2, uint256 _txTokenAmount1, uint256 _txRAmount1, uint256 _txTokenAmount2, uint256 _txRAmount2) onlyOwner stopInEmergency public {\t\t\n', '\t\teConfirmTokenTransferToBooking(_PartnerID, _TxNum, _fromClientId1, _toClientId2, _tokenAmount1, _rAmount1, _tokenAmount2, _rAmount2);\n', '\t\teTransactionFeeForBooking(_PartnerID, _TxNum, _fromClientId1, _toClientId2, _txTokenAmount1, _txRAmount1, _txTokenAmount2, _txRAmount2);\n', '\t}\n', '\n', ' \n', '// functions for returning tokens\t\n', '\tfunction confirmReturnToken(bytes32 _PartnerID, string _TxNum, bytes32 _fromClientId1, bytes32 _toClientId2, uint256 _tokenAmount1, uint256 _rAmount1, uint256 _tokenAmount2, uint256 _rAmount2, uint256 _grandTotal) onlyOwner stopInEmergency public {\n', '        eConfirmReturnToken(_PartnerID, _TxNum, _fromClientId1, _tokenAmount1, _rAmount1, _grandTotal);\n', '\t\teConfirmReturnToken(_PartnerID, _TxNum, _toClientId2, _tokenAmount2, _rAmount2, _grandTotal);\n', '\t}\n', '\n', '\n', '// function for Admin\n', '    function getToken() constant public onlyOwner returns (address) {\n', '        return token;\n', '    }\n', '\t\n', '    function setToken(address _token) public onlyOwner stopInEmergency {\n', '        require(token == address(0));\n', '        token = TeuToken(_token);\n', '    }\n', '\n', '}']