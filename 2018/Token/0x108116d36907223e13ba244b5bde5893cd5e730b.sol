['pragma solidity ^0.4.16;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() internal {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0x0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken, Pausable {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    require(_to != address(0x0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  \n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public constant whenNotPaused returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  \n', '  function increaseApproval (address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract JubsICO is StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    //Information coin\n', '    string public name = "Honor";\n', '    string public symbol = "HNR";\n', '    uint256 public decimals = 18;\n', '    uint256 public totalSupply = 100000000 * (10 ** decimals); //100 000 000 HNR\n', '\n', '    //Adress informated in white paper \n', '    address public walletETH;                           //Wallet ETH\n', '    address public icoWallet;                           //63%\n', '    address public preIcoWallet;                        //7%\n', '    address public teamWallet;                          //10%\n', '    address public bountyMktWallet;                     //7%\n', '    address public arbitrationWallet;                   //5%\n', '    address public rewardsWallet;                       //5%\n', '    address public advisorsWallet;                      //2%\n', '    address public operationWallet;                     //1%       \n', '\n', '    //Utils ICO   \n', '    uint256 public icoStage = 0;        \n', '    uint256 public tokensSold = 0;                      // total number of tokens sold\n', '    uint256 public totalRaised = 0;                     // total amount of money raised in wei\n', '    uint256 public totalTokenToSale = 0;\n', '    uint256 public rate = 8500;                         // HNR/ETH rate / initial 50%\n', '    bool public pauseEmergence = false;                 //the owner address can set this to true to halt the crowdsale due to emergency\n', '    \n', '\n', '    //Time Start and Time end\n', '    //Stage pre sale \n', '                                                                \n', ' \n', '    uint256 public icoStartTimestampStage = 1515974400;         //15/01/2018 @ 00:00am (UTC)\n', '    uint256 public icoEndTimestampStage = 1518998399;           //18/02/2018 @ 11:59pm (UTC)\n', '\n', '    //Stage 1                                                   //25%\n', '    uint256 public icoStartTimestampStage1 = 1518998400;        //19/02/2018 @ 00:00am (UTC)\n', '    uint256 public icoEndTimestampStage1 = 1519603199;          //25/02/2018 @ 11:59pm (UTC)\n', '\n', '    //Stage 2                                                   //20%\n', '    uint256 public icoStartTimestampStage2 = 1519603200;        //26/02/2018 @ 00:00am (UTC)\n', '    uint256 public icoEndTimestampStage2 = 1520207999;          //04/03/2018 @ 11:59pm (UTC)\n', '\n', '    //Stage 3                                                   //15%\n', '    uint256 public icoStartTimestampStage3 = 1520208000;        //05/03/2018 @ 00:00am (UTC)\n', '    uint256 public icoEndTimestampStage3 = 1520812799;          //11/03/2018 @ 11:59pm (UTC)\n', '\n', '    //Stage 4                                                   //10%\n', '    uint256 public icoStartTimestampStage4 = 1520812800;        //12/03/2018 @ 00:00am (UTC)\n', '    uint256 public icoEndTimestampStage4 = 1521417599;          //18/03/2018 @ 11:59pm (UTC)\n', '\n', '    //end of the waiting time for the team to withdraw \n', '    uint256 public teamEndTimestamp = 1579046400;               //01/15/2020 @ 12:00am (UTC) \n', '                                                                \n', '\n', '// =================================== Events ================================================\n', '\n', '    event Burn(address indexed burner, uint256 value);  \n', '\n', '\n', '// =================================== Constructor =============================================\n', '       \n', '    function JubsICO ()public {                 \n', '      //Address\n', '      walletETH = 0x6eA3ec9339839924a520ff57a0B44211450A8910;\n', '      icoWallet = 0x357ace6312BF8B519424cD3FfdBB9990634B8d3E;\n', '      preIcoWallet = 0x7c54dC4F3328197AC89a53d4b8cDbE35a56656f7;\n', '      teamWallet = 0x06BC5305016E9972F4cB3F6a3Ef2C734D417788a;\n', '      bountyMktWallet = 0x6f67b977859deE77fE85cBCAD5b5bd5aD58bF068;\n', '      arbitrationWallet = 0xdE9DE3267Cbd21cd64B40516fD2Aaeb5D77fb001;\n', '      rewardsWallet = 0x232f7CaA500DCAd6598cAE4D90548a009dd49e6f;\n', '      advisorsWallet = 0xA6B898B2Ab02C277Ae7242b244FB5FD55cAfB2B7;\n', '      operationWallet = 0x96819778cC853488D3e37D630d94A337aBd527A8;\n', '\n', '      //Distribution Token  \n', '      balances[icoWallet] = totalSupply.mul(63).div(100);                 //totalSupply * 63%\n', '      balances[preIcoWallet] = totalSupply.mul(7).div(100);               //totalSupply * 7%\n', '      balances[teamWallet] = totalSupply.mul(10).div(100);                //totalSupply * 10%\n', '      balances[bountyMktWallet] = totalSupply.mul(7).div(100);            //totalSupply * 7%\n', '      balances[arbitrationWallet] = totalSupply.mul(5).div(100);          //totalSupply * 5%\n', '      balances[rewardsWallet] = totalSupply.mul(5).div(100);              //totalSupply * 5%\n', '      balances[advisorsWallet] = totalSupply.mul(2).div(100);             //totalSupply * 2%\n', '      balances[operationWallet] = totalSupply.mul(1).div(100);            //totalSupply * 1%      \n', '\n', '      //set pause\n', '      pause();\n', '\n', '      //set token to sale\n', '      totalTokenToSale = balances[icoWallet].add(balances[preIcoWallet]);           \n', '    }\n', '\n', ' // ======================================== Modifier ==================================================\n', '\n', '    modifier acceptsFunds() {   \n', '        if (icoStage == 0) {\n', '            require(msg.value >= 1 ether);\n', '            require(now >= icoStartTimestampStage);          \n', '            require(now <= icoEndTimestampStage); \n', '        }\n', '\n', '        if (icoStage == 1) {\n', '            require(now >= icoStartTimestampStage1);          \n', '            require(now <= icoEndTimestampStage1);            \n', '        }\n', '\n', '        if (icoStage == 2) {\n', '            require(now >= icoStartTimestampStage2);          \n', '            require(now <= icoEndTimestampStage2);            \n', '        }\n', '\n', '        if (icoStage == 3) {\n', '            require(now >= icoStartTimestampStage3);          \n', '            require(now <= icoEndTimestampStage3);            \n', '        }\n', '\n', '        if (icoStage == 4) {\n', '            require(now >= icoStartTimestampStage4);          \n', '            require(now <= icoEndTimestampStage4);            \n', '        }             \n', '               \n', '        _;\n', '    }    \n', '\n', '    modifier nonZeroBuy() {\n', '        require(msg.value > 0);\n', '        _;\n', '\n', '    }\n', '\n', '    modifier PauseEmergence {\n', '        require(!pauseEmergence);\n', '       _;\n', '    } \n', '\n', '\n', '//========================================== Functions ===========================================================================\n', '\n', '    /// fallback function to buy tokens\n', '    function () PauseEmergence nonZeroBuy acceptsFunds payable public {  \n', '        uint256 amount = msg.value.mul(rate);\n', '\n', '        assignTokens(msg.sender, amount);\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        forwardFundsToWallet();\n', '    } \n', '\n', '    function forwardFundsToWallet() internal {        \n', '        walletETH.transfer(msg.value);              // immediately send Ether to wallet address, propagates exception if execution fails\n', '    }\n', '\n', '    function assignTokens(address recipient, uint256 amount) internal {\n', '        if (icoStage == 0) {\n', '          balances[preIcoWallet] = balances[preIcoWallet].sub(amount);               \n', '        }\n', '        if (icoStage > 0) {\n', '          balances[icoWallet] = balances[icoWallet].sub(amount);               \n', '        }\n', '\n', '        balances[recipient] = balances[recipient].add(amount);\n', '        tokensSold = tokensSold.add(amount);        \n', '       \n', '        //test token sold, if it was sold more than the total available right total token total\n', '        if (tokensSold > totalTokenToSale) {\n', '            uint256 diferenceTotalSale = totalTokenToSale.sub(tokensSold);\n', '            totalTokenToSale = tokensSold;\n', '            totalSupply = tokensSold.add(diferenceTotalSale);\n', '        }\n', '        \n', '        Transfer(0x0, recipient, amount);\n', '    }  \n', '    \n', '\n', '    function manuallyAssignTokens(address recipient, uint256 amount) public onlyOwner {\n', '        require(tokensSold < totalSupply);\n', '        assignTokens(recipient, amount);\n', '    }\n', '\n', '    function setRate(uint256 _rate) public onlyOwner { \n', '        require(_rate > 0);               \n', '        rate = _rate;        \n', '    }\n', '\n', '    function setIcoStage(uint256 _icoStage) public onlyOwner {    \n', '        require(_icoStage >= 0); \n', '        require(_icoStage <= 4);             \n', '        icoStage = _icoStage;        \n', '    }\n', '\n', '    function setPauseEmergence() public onlyOwner {        \n', '        pauseEmergence = true;\n', '    }\n', '\n', '    function setUnPauseEmergence() public onlyOwner {        \n', '        pauseEmergence = false;\n', '    }   \n', '\n', '    function sendTokenTeam(address _to, uint256 amount) public onlyOwner {\n', '        require(_to != 0x0);\n', '\n', '        //test deadline to request token\n', '        require(now >= teamEndTimestamp);\n', '        assignTokens(_to, amount);\n', '    }\n', '\n', '    function burn(uint256 _value) public whenNotPaused {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }   \n', '    \n', '}']