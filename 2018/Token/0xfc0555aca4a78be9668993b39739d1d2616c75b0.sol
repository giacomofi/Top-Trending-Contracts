['pragma solidity ^0.4.20;\n', '\n', 'interface ERC20Token {\n', '\n', '    function totalSupply() constant external returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) constant external returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Token is ERC20Token{\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant external returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success) {\n', '        if(msg.data.length < (2 * 32) + 4) { revert(); }\n', '\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\n', '        if(msg.data.length < (3 * 32) + 4) { revert(); }\n', '\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant external returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function totalSupply() constant external returns (uint256 supply){\n', '        return totalSupply;\n', '    }\n', '}\n', '\n', 'contract PFAToken is Token{\n', '    address owner = msg.sender;\n', '\n', '    address admin;\n', '\n', '    bool private paused;\n', '    bool private mintStage;\n', '    bool private icoStage;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    uint256 public unitsOneEthCanBuy;\n', '    uint256 public totalEthInWei;\n', '    uint256 public minimumContribution;\n', '    address public fundsWallet;\n', '    uint256 public tokenFunded;\n', '    uint256 public coinMinted;\n', '\n', '    //Events\n', '    event Mint(address indexed _to, uint256 _value);\n', '    event RateChanged(uint256 _rate);\n', '    event ContributionChanged(uint256 _min);\n', '    event AdminChanged(address _address);\n', '\n', '    //modifier\n', '    modifier onlyOwner{\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPause{\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier isMintStage{\n', '        require(mintStage);\n', '        _;\n', '    }\n', '\n', '    modifier isICOStage{\n', '        require(icoStage);\n', '        _;\n', '    }\n', '\n', '    //consturtor\n', '    function PFAToken() {\n', '        paused = false;\n', '        mintStage = true;\n', '        icoStage = false;\n', '\n', '        balances[msg.sender] = 1000000000 * 1000000000000000000;\n', '        totalSupply = 1000000000 * 1000000000000000000;\n', '        name = "Price Fitch Asset";\n', '        decimals = 18;\n', '        symbol = "PFA";\n', '        unitsOneEthCanBuy = 100;\n', '        minimumContribution = 10 finney;\n', '        fundsWallet = msg.sender;\n', '        tokenFunded = 0;\n', '        coinMinted = 0;\n', '    }\n', '\n', '    // Mint\n', '    function mint(address _to, uint256 _value) external onlyOwner isMintStage{\n', '      balances[_to] = balances[_to] + _value;\n', '      coinMinted = coinMinted + _value;\n', '      Mint(_to, _value);\n', '    }\n', '\n', '    function send(address _to, uint256 _value) external onlyOwner{\n', '      balances[fundsWallet] = balances[fundsWallet] - _value;\n', '      balances[_to] = balances[_to] + _value;\n', '      Transfer(fundsWallet, _to, _value);\n', '    }\n', '\n', '    // fallback function for ICO use.\n', '    function() payable whenNotPause isICOStage{\n', '        if (msg.value >= minimumContribution){\n', '            totalEthInWei = totalEthInWei + msg.value;\n', '            uint256 amount = msg.value * unitsOneEthCanBuy;\n', '            if (balances[fundsWallet] < amount) {\n', '                return;\n', '            }\n', '\n', '            tokenFunded = tokenFunded + amount;\n', '\n', '            balances[fundsWallet] = balances[fundsWallet] - amount;\n', '            balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '            Transfer(fundsWallet, msg.sender, amount);\n', '        }\n', '\n', '        fundsWallet.transfer(msg.value);\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {\n', '            revert();\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    //Set Admin address\n', '    function setAdmin(address _address) external onlyOwner{\n', '      admin = _address;\n', '      AdminChanged(_address);\n', '    }\n', '\n', '    //Change Token rate\n', '    function changeTokenRate(uint256 _rate) external onlyOwner{\n', '      unitsOneEthCanBuy = _rate;\n', '      RateChanged(_rate);\n', '    }\n', '\n', '    function changeMinimumContribution(uint256 _min) external onlyOwner{\n', '      minimumContribution = _min;\n', '      ContributionChanged(_min);\n', '    }\n', '\n', '    //stage lock function\n', '    function mintStart(bool) external onlyOwner{\n', '        mintStage = true;\n', '    }\n', '\n', '    function mintEnd(bool) external onlyOwner{\n', '        mintStage = false;\n', '    }\n', '\n', '    function icoStart(bool) external onlyOwner{\n', '        icoStage = true;\n', '    }\n', '\n', '    function icoEnd(bool) external onlyOwner{\n', '        icoStage = false;\n', '    }\n', '\n', '    function pauseContract(bool) external onlyOwner{\n', '        paused = true;\n', '    }\n', '\n', '    function unpauseContract(bool) external onlyOwner{\n', '        paused = false;\n', '    }\n', '\n', '    //return stats of token\n', '    function getStats() external constant returns (uint256, uint256, bool, bool, bool) {\n', '        return (totalEthInWei, tokenFunded, paused, mintStage, icoStage);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.20;\n', '\n', 'interface ERC20Token {\n', '\n', '    function totalSupply() constant external returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) constant external returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Token is ERC20Token{\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant external returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success) {\n', '        if(msg.data.length < (2 * 32) + 4) { revert(); }\n', '\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\n', '        if(msg.data.length < (3 * 32) + 4) { revert(); }\n', '\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant external returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function totalSupply() constant external returns (uint256 supply){\n', '        return totalSupply;\n', '    }\n', '}\n', '\n', 'contract PFAToken is Token{\n', '    address owner = msg.sender;\n', '\n', '    address admin;\n', '\n', '    bool private paused;\n', '    bool private mintStage;\n', '    bool private icoStage;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    uint256 public unitsOneEthCanBuy;\n', '    uint256 public totalEthInWei;\n', '    uint256 public minimumContribution;\n', '    address public fundsWallet;\n', '    uint256 public tokenFunded;\n', '    uint256 public coinMinted;\n', '\n', '    //Events\n', '    event Mint(address indexed _to, uint256 _value);\n', '    event RateChanged(uint256 _rate);\n', '    event ContributionChanged(uint256 _min);\n', '    event AdminChanged(address _address);\n', '\n', '    //modifier\n', '    modifier onlyOwner{\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPause{\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier isMintStage{\n', '        require(mintStage);\n', '        _;\n', '    }\n', '\n', '    modifier isICOStage{\n', '        require(icoStage);\n', '        _;\n', '    }\n', '\n', '    //consturtor\n', '    function PFAToken() {\n', '        paused = false;\n', '        mintStage = true;\n', '        icoStage = false;\n', '\n', '        balances[msg.sender] = 1000000000 * 1000000000000000000;\n', '        totalSupply = 1000000000 * 1000000000000000000;\n', '        name = "Price Fitch Asset";\n', '        decimals = 18;\n', '        symbol = "PFA";\n', '        unitsOneEthCanBuy = 100;\n', '        minimumContribution = 10 finney;\n', '        fundsWallet = msg.sender;\n', '        tokenFunded = 0;\n', '        coinMinted = 0;\n', '    }\n', '\n', '    // Mint\n', '    function mint(address _to, uint256 _value) external onlyOwner isMintStage{\n', '      balances[_to] = balances[_to] + _value;\n', '      coinMinted = coinMinted + _value;\n', '      Mint(_to, _value);\n', '    }\n', '\n', '    function send(address _to, uint256 _value) external onlyOwner{\n', '      balances[fundsWallet] = balances[fundsWallet] - _value;\n', '      balances[_to] = balances[_to] + _value;\n', '      Transfer(fundsWallet, _to, _value);\n', '    }\n', '\n', '    // fallback function for ICO use.\n', '    function() payable whenNotPause isICOStage{\n', '        if (msg.value >= minimumContribution){\n', '            totalEthInWei = totalEthInWei + msg.value;\n', '            uint256 amount = msg.value * unitsOneEthCanBuy;\n', '            if (balances[fundsWallet] < amount) {\n', '                return;\n', '            }\n', '\n', '            tokenFunded = tokenFunded + amount;\n', '\n', '            balances[fundsWallet] = balances[fundsWallet] - amount;\n', '            balances[msg.sender] = balances[msg.sender] + amount;\n', '\n', '            Transfer(fundsWallet, msg.sender, amount);\n', '        }\n', '\n', '        fundsWallet.transfer(msg.value);\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {\n', '            revert();\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    //Set Admin address\n', '    function setAdmin(address _address) external onlyOwner{\n', '      admin = _address;\n', '      AdminChanged(_address);\n', '    }\n', '\n', '    //Change Token rate\n', '    function changeTokenRate(uint256 _rate) external onlyOwner{\n', '      unitsOneEthCanBuy = _rate;\n', '      RateChanged(_rate);\n', '    }\n', '\n', '    function changeMinimumContribution(uint256 _min) external onlyOwner{\n', '      minimumContribution = _min;\n', '      ContributionChanged(_min);\n', '    }\n', '\n', '    //stage lock function\n', '    function mintStart(bool) external onlyOwner{\n', '        mintStage = true;\n', '    }\n', '\n', '    function mintEnd(bool) external onlyOwner{\n', '        mintStage = false;\n', '    }\n', '\n', '    function icoStart(bool) external onlyOwner{\n', '        icoStage = true;\n', '    }\n', '\n', '    function icoEnd(bool) external onlyOwner{\n', '        icoStage = false;\n', '    }\n', '\n', '    function pauseContract(bool) external onlyOwner{\n', '        paused = true;\n', '    }\n', '\n', '    function unpauseContract(bool) external onlyOwner{\n', '        paused = false;\n', '    }\n', '\n', '    //return stats of token\n', '    function getStats() external constant returns (uint256, uint256, bool, bool, bool) {\n', '        return (totalEthInWei, tokenFunded, paused, mintStage, icoStage);\n', '    }\n', '\n', '}']
