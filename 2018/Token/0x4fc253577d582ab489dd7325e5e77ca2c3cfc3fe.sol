['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' * from OpenZeppelin\n', ' * https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/master/contracts/math/SafeMath.sol\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @dev Contract that is working with ERC223 tokens.\n', '*/\n', 'contract ContractReceiver {     \n', '    struct TKN {\n', '        address sender;\n', '        uint256 value;\n', '        bytes data;\n', '        bytes4 sig;\n', '    }    \n', '    \n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public pure {\n', '        TKN memory tkn;\n', '        tkn.sender = _from;\n', '        tkn.value = _value;\n', '        tkn.data = _data;\n', '        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n', '        tkn.sig = bytes4(u);\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @dev PetToken\n', '* @dev Author: Solange Gueiros\n', '*/\n', 'contract PetToken {\n', '    using SafeMath for uint256;\n', '\n', '    address public owner;\n', '    address public ownerMaster;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    address public adminAddress;\n', '    address public auditAddress;\n', '    address public marketMakerAddress;\n', '    address public mintFeeReceiver;\n', '    address public transferFeeReceiver;\n', '    address public burnFeeReceiver; \n', '\n', '    uint256 public decimalpercent = 1000000;            //precisÃ£o da porcentagem (4) + 2 casas para 100%   \n', '    struct feeStruct {        \n', '        uint256 abs;\n', '        uint256 prop;\n', '    }\n', '    feeStruct public mintFee;\n', '    feeStruct public transferFee;\n', '    feeStruct public burnFee;\n', '    uint256 public feeAbsMax;\n', '    uint256 public feePropMax;\n', '\n', '    struct approveMintStruct {        \n', '        uint256 amount;\n', '        address admin;\n', '        address audit;\n', '        address marketMaker;\n', '    }\n', '    mapping (address => approveMintStruct) public mintApprove;\n', '\n', '    struct approveBurnStruct {\n', '        uint256 amount;\n', '        address admin;\n', '    }    \n', '    mapping (address => approveBurnStruct) public burnApprove;\n', '\n', '    uint256 public transferWait;\n', '    uint256 public transferMaxAmount;\n', '    uint256 public lastTransfer;\n', '    bool public speedBump;\n', '\n', '\n', '    constructor(address _ownerMaster, string _name, string _symbol,\n', '            uint256 _feeAbsMax, uint256 _feePropMax,\n', '            uint256 _transferWait, uint256 _transferMaxAmount\n', '        ) public {\n', '        decimals = 18;\n', '        owner = msg.sender;\n', '        name = _name;\n', '        symbol = _symbol;        \n', '        feeAbsMax = _feeAbsMax;\n', '        feePropMax = _feePropMax;        \n', '        ownerMaster = _ownerMaster;\n', '        transferWait = _transferWait;\n', '        transferMaxAmount = _transferMaxAmount;\n', '        lastTransfer = 0;        \n', '        speedBump = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifiers\n', '    */\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == adminAddress, "Only admin");\n', '        _;\n', '    }\n', '    modifier onlyAudit() {\n', '        require(msg.sender == auditAddress, "Only audit");\n', '        _;\n', '    }\n', '    modifier onlyMarketMaker() {\n', '        require(msg.sender == marketMakerAddress, "Only market maker");\n', '        _;\n', '    }\n', '    modifier noSpeedBump() {\n', '        require(!speedBump, "Speed bump activated");\n', '        _;\n', '    }\n', '    modifier hasMintPermission(address _address) {\n', '        require(mintApprove[_address].admin != 0x0, "Require admin approval");\n', '        require(mintApprove[_address].audit != 0x0, "Require audit approval");\n', '        require(mintApprove[_address].marketMaker != 0x0, "Require market maker approval"); \n', '        _;\n', '    }     \n', '\n', '    /**\n', '    * @dev AlfaPetToken functions\n', '    */\n', '    function mint(address _to, uint256 _amount) public hasMintPermission(_to) canMint noSpeedBump {\n', '        uint256 fee = calcMintFee (_amount);\n', '        uint256 toValue = _amount.sub(fee);\n', '        _mint(mintFeeReceiver, fee);\n', '        _mint(_to, toValue);\n', '        _mintApproveClear(_to);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        if (speedBump) \n', '        {\n', '            //Verifica valor\n', '            require (_amount <= transferMaxAmount, "Speed bump activated, amount exceeded");\n', '\n', '            //Verifica frequencia\n', '            require (now > (lastTransfer + transferWait), "Speed bump activated, frequency exceeded");\n', '            lastTransfer = now;\n', '        }\n', '        uint256 fee = calcTransferFee (_amount);\n', '        uint256 toValue = _amount.sub(fee);\n', '        _transfer(transferFeeReceiver, fee);\n', '        _transfer(_to, toValue);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _amount) public onlyMarketMaker {\n', '        uint256 fee = calcBurnFee (_amount);\n', '        uint256 fromValue = _amount.sub(fee);\n', '        _transfer(burnFeeReceiver, fee);\n', '        _burn(msg.sender, fromValue);\n', '    }\n', '\n', '    /*\n', '    * @dev Calc Fees\n', '    */\n', '    function calcMintFee(uint256 _amount) public view returns (uint256) {\n', '        uint256 fee = 0;\n', '        fee = _amount.div(decimalpercent);\n', '        fee = fee.mul(mintFee.prop);\n', '        fee = fee.add(mintFee.abs);\n', '        return fee;\n', '    }\n', '\n', '    function calcTransferFee(uint256 _amount) public view returns (uint256) {\n', '        uint256 fee = 0;\n', '        fee = _amount.div(decimalpercent);\n', '        fee = fee.mul(transferFee.prop);\n', '        fee = fee.add(transferFee.abs);\n', '        return fee;\n', '    }\n', '\n', '    function calcBurnFee(uint256 _amount) public view returns (uint256) {\n', '        uint256 fee = 0;\n', '        fee = _amount.div(decimalpercent);\n', '        fee = fee.mul(burnFee.prop);\n', '        fee = fee.add(burnFee.abs);\n', '        return fee;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Set variables\n', '    */\n', '    function setAdmin(address _address) public onlyOwner returns (address) {\n', '        adminAddress = _address;\n', '        return adminAddress;\n', '    }\n', '    function setAudit(address _address) public onlyOwner returns (address) {\n', '        auditAddress = _address;\n', '        return auditAddress;\n', '    }\n', '    function setMarketMaker(address _address) public onlyOwner returns (address) {\n', '        marketMakerAddress = _address;    \n', '        return marketMakerAddress;\n', '    }\n', '\n', '    function setMintFeeReceiver(address _address) public onlyOwner returns (bool) {\n', '        mintFeeReceiver = _address;\n', '        return true;\n', '    }\n', '    function setTransferFeeReceiver(address _address) public onlyOwner returns (bool) {\n', '        transferFeeReceiver = _address;\n', '        return true;\n', '    }\n', '    function setBurnFeeReceiver(address _address) public onlyOwner returns (bool) {\n', '        burnFeeReceiver = _address;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Set Fees\n', '    */\n', '    event SetFee(string action, string typeFee, uint256 value);\n', '\n', '    function setMintFeeAbs(uint256 _value) external onlyOwner returns (bool) {\n', '        require(_value < feeAbsMax, "Must be less then maximum");\n', '        mintFee.abs = _value;\n', '        emit SetFee("mint", "absolute", _value);\n', '        return true;\n', '    }\n', '    function setMintFeeProp(uint256 _value) external onlyOwner returns (bool) {\n', '        require(_value < feePropMax, "Must be less then maximum");\n', '        mintFee.prop = _value;\n', '        emit SetFee("mint", "proportional", _value);\n', '        return true;\n', '    }\n', '\n', '    function setTransferFeeAbs(uint256 _value) external onlyOwner returns (bool) {\n', '        require(_value < feeAbsMax, "Must be less then maximum");\n', '        transferFee.abs = _value;\n', '        emit SetFee("transfer", "absolute", _value);\n', '        return true;\n', '    } \n', '    function setTransferFeeProp(uint256 _value) external onlyOwner returns (bool) {\n', '        require(_value < feePropMax, "Must be less then maximum");\n', '        transferFee.prop = _value;\n', '        emit SetFee("transfer", "proportional", _value);\n', '        return true;\n', '    }\n', '\n', '    function setBurnFeeAbs(uint256 _value) external onlyOwner returns (bool) {\n', '        require(_value < feeAbsMax, "Must be less then maximum");\n', '        burnFee.abs = _value;\n', '        emit SetFee("burn", "absolute", _value);\n', '        return true;\n', '    }\n', '    function setBurnFeeProp(uint256 _value) external onlyOwner returns (bool) {\n', '        require(_value < feePropMax, "Must be less then maximum");\n', '        burnFee.prop = _value;\n', '        emit SetFee("burn", "proportional", _value);\n', '        return true;\n', '    }\n', '   \n', '    /*\n', '    * @dev Mint Approval\n', '    */\n', '    function mintApproveReset(address _address) public onlyOwner {\n', '        _mintApproveClear(_address);\n', '    }\n', '\n', '    function _mintApproveClear(address _address) internal {\n', '        mintApprove[_address].amount = 0;\n', '        mintApprove[_address].admin = 0x0;\n', '        mintApprove[_address].audit = 0x0;\n', '        mintApprove[_address].marketMaker = 0x0;\n', '    }\n', '\n', '    function mintAdminApproval(address _address, uint256 _value) public onlyAdmin {\n', '        if (mintApprove[_address].amount > 0) {\n', '            require(mintApprove[_address].amount == _value, "Value is diferent");\n', '        }\n', '        else {\n', '            mintApprove[_address].amount = _value;\n', '        }        \n', '        mintApprove[_address].admin = msg.sender;\n', '        \n', '        if ((mintApprove[_address].audit != 0x0) && (mintApprove[_address].marketMaker != 0x0))\n', '            mint(_address, _value);\n', '    }\n', '\n', '    function mintAdminCancel(address _address) public onlyAdmin {\n', '        require(mintApprove[_address].admin == msg.sender, "Only cancel if the address is the same admin");\n', '        mintApprove[_address].admin = 0x0;\n', '    }\n', '\n', '    function mintAuditApproval(address _address, uint256 _value) public onlyAudit {\n', '        if (mintApprove[_address].amount > 0) {\n', '            require(mintApprove[_address].amount == _value, "Value is diferent");\n', '        }\n', '        else {\n', '            mintApprove[_address].amount = _value;\n', '        }        \n', '        mintApprove[_address].audit = msg.sender;\n', '\n', '        if ((mintApprove[_address].admin != 0x0) && (mintApprove[_address].marketMaker != 0x0))\n', '            mint(_address, _value);\n', '    }\n', '\n', '    function mintAuditCancel(address _address) public onlyAudit {\n', '        require(mintApprove[_address].audit == msg.sender, "Only cancel if the address is the same audit");\n', '        mintApprove[_address].audit = 0x0;\n', '    }\n', '\n', '    function mintMarketMakerApproval(address _address, uint256 _value) public onlyMarketMaker {\n', '        if (mintApprove[_address].amount > 0) {\n', '            require(mintApprove[_address].amount == _value, "Value is diferent");\n', '        }\n', '        else {\n', '            mintApprove[_address].amount = _value;\n', '        }        \n', '        mintApprove[_address].marketMaker = msg.sender;\n', '\n', '        if ((mintApprove[_address].admin != 0x0) && (mintApprove[_address].audit != 0x0))\n', '            mint(_address, _value);\n', '    }\n', '\n', '    function mintMarketMakerCancel(address _address) public onlyMarketMaker {\n', '        require(mintApprove[_address].marketMaker == msg.sender, "Only cancel if the address is the same marketMaker");\n', '        mintApprove[_address].marketMaker = 0x0;\n', '    }\n', '\n', '    /*\n', '    * @dev SpeedBump\n', '    */\n', '    event SpeedBumpUpdated(bool value);\n', '    function setSpeedBump (bool _value) public onlyMasterOwner {  \n', '        speedBump = _value;\n', '        emit SpeedBumpUpdated(_value);\n', '    }\n', '\n', '    /**\n', '    * @dev Ownable \n', '    * ownerMaster can not be changed.\n', '    */\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);    \n', '\n', '    modifier onlyOwner() {\n', '        require((msg.sender == owner) || (msg.sender == ownerMaster), "Only owner");\n', '        _;\n', '    }\n', '    modifier onlyMasterOwner() {\n', '        require(msg.sender == ownerMaster, "Only master owner");\n', '        _;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "newOwner must be not 0x0");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Mintable token\n', '    */\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished, "Mint is finished");\n', '        _;\n', '    }\n', '    function finishMinting() public onlyMasterOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '    function _mint(address _account, uint256 _amount) internal canMint {\n', '        require(_account != 0, "Address must not be zero");\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_account] = balances[_account].add(_amount);\n', '        emit Transfer(address(0), _account, _amount);\n', '        emit Mint(_account, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Burnable Token\n', '    */\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function _burn(address _account, uint256 _amount) internal {\n', '        require(_account != 0, "Address must not be zero");\n', '        require(_amount <= balances[_account], "Insuficient funds");\n', '\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        balances[_account] = balances[_account].sub(_amount);\n', '        emit Transfer(_account, address(0), _amount);\n', '        emit Burn(_account, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Standard ERC20 token\n', '    */\n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '    uint256 private totalSupply_;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }    \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function approve(address spender, uint256 value) public pure returns (bool success){\n', '        //Not implemented\n', '        return false;\n', '    }\n', '    function transferFrom(address from, address to, uint256 value) public pure returns (bool success){\n', '        //Not implemented\n', '        return false;\n', '    }\n', '\n', '    /**\n', '    * @dev ERC223 token\n', '    */\n', '    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n', '  \n', '    function _transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) private returns (bool success) {                \n', '        if (isContract(_to)) {\n', '            if (balanceOf(msg.sender) < _value) revert("Insuficient funds");\n', '            balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '            balances[_to] = balanceOf(_to).add(_value);\n', '            assert(_to.call.value(0)(bytes4(keccak256(abi.encodePacked(_custom_fallback))), msg.sender, _value, _data));\n', '            emit Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function _transfer(address _to, uint256 _value, bytes _data) private returns (bool success) {            \n', '        if(isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function _transfer(address _to, uint256 _value) private returns (bool success) {            \n', '        bytes memory empty;\n', '        if(isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint codeLength;\n', '        assembly {\n', '            codeLength := extcodesize(_addr)\n', '        }\n', '        return (codeLength>0);\n', '    }\n', '\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) revert("Insuficient funds");\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);        \n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '  \n', '    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\n', '        if (balanceOf(msg.sender) < _value) revert("Insuficient funds");\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '}']