['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function ChangeOwner(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract BaseExspaceToken is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    uint256 public maxtokens;\n', '    address public owner;\n', '\n', '    function BaseExspaceToken() public {\n', '        owner = msg.sender;\n', '        maxtokens =  100000000000000;\n', '    }\n', '\n', '    modifier IsNoMax() {\n', '        require(totalSupply <= maxtokens);\n', '        _;\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '        require (_value <= _allowance); // Check РЅР&#181;РѕР&#177;СЏР&#183;Р&#176;С‚Р&#181;Р&#187;СЊРЅРѕ. Рё С‚Р&#176;Рє РїСЂРѕРІР&#181;СЂРёС‚.\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner IsNoMax public returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        mint0(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed Apowner, address indexed spender, uint256 value);\n', '    event mint0(address indexed to, uint256 amount);\n', '}\n', '\n', '\n', 'contract EXSCoinToken is BaseExspaceToken {\n', '\n', '    string public constant name = "ExSpace Coin";\n', '    string public constant symbol = "EXS";\n', '    uint32 public constant decimals = 6;\n', '\n', '}\n', '\n', 'contract EXSCoinSeller is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    address public mainwallet;\n', '    uint public rate;\n', '    uint256 public MaxTokens;\n', '    EXSCoinToken public token = new EXSCoinToken();\n', '\n', '    function EXSCoinSeller() public {\n', '        rate = 1000000;\n', '        owner = msg.sender;\n', '        MaxTokens = token.maxtokens();\n', '        mainwallet = msg.sender;\n', '    }\n', '\n', '    function ChangeMainWallet(address newWallet) onlyOwner public {\n', '        require(newWallet != address(0));\n', '        mainwallet = newWallet;\n', '    }\n', '\n', '    function ChangeRate(uint newrate) onlyOwner public {\n', '        require(newrate > 0 );\n', '        rate = newrate;\n', '    }\n', '\n', '    function MintTokens(address _to, uint256 _amount) onlyOwner public returns (bool) {\n', '        Mint(_to,_amount);\n', '        return token.mint(_to,_amount);\n', '    }\n', '\n', '    function GetBalance(address _owner) constant public returns (uint256 balance) {\n', '        return token.balanceOf(_owner);\n', '    }\n', '\n', '    function GetTotal() constant public returns (uint256 Total) {\n', '        return token.totalSupply();\n', '    }\n', '\n', '    function CreateTokens() payable public {\n', '        mainwallet.transfer(msg.value);\n', '        uint tokens = rate.mul(msg.value).div(1 ether);\n', '        token.mint(msg.sender, tokens);\n', '        SaleToken(msg.sender, tokens);\n', '    }\n', '\n', '    function() external payable {\n', '        CreateTokens();\n', '    }\n', '\n', '    event SaleToken( address indexed to, uint amount);\n', '    event Mint(address indexed to, uint256 amount);\n', '}']