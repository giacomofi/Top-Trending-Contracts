['pragma solidity ^0.4.24;\n', '\n', '// File: browser/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: browser/jimbolia.sol\n', '\n', '/**\n', ' * Jimbolia\n', ' *\n', ' * @title A fixed supply ERC-20 token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract JimboliaT {\n', '    using SafeMath for uint;\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value\n', '    );\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _value\n', '    );\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    /**\n', '     * Constructs the Token contract and gives all of the supply to the address\n', '     *     that deployed it. The fixed supply is 1 billion tokens with up to 18\n', '     *     decimal places.\n', '     */\n', '    function Token() public {\n', '        symbol = &#39;JIT&#39;;\n', '        name = &#39;Jimbolia Token&#39;;\n', '        decimals = 18;\n', '        totalSupply = 20000 * 10**uint(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '    /**\n', '     * @dev Fallback function\n', '     */\n', '    function() public payable { revert(); }\n', '    /**\n', '     * Gets the token balance of any wallet.\n', '     * @param _owner Wallet address of the returned token balance.\n', '     * @return The balance of tokens in the wallet.\n', '     */\n', '    function balanceOf(address _owner)\n', '        public\n', '        constant\n', '        returns (uint balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '    /**\n', '     * Transfers tokens from the sender&#39;s wallet to the specified `_to` wallet.\n', '     * @param _to Address of the transfer&#39;s recipient.\n', '     * @param _value Number of tokens to transfer.\n', '     * @return True if the transfer succeeded.\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * Transfer tokens from any wallet to the `_to` wallet. This only works if\n', '     *     the `_from` wallet has already allocated tokens for the caller wallet\n', '     *     using `approve`. The from wallet must have sufficient balance to\n', '     *     transfer. The caller must have sufficient allowance to transfer.\n', '     * @param _from Wallet address that tokens are withdrawn from.\n', '     * @param _to Wallet address that tokens are deposited to.\n', '     * @param _value Number of tokens transacted.\n', '     * @return True if the transfer succeeded.\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * Sender allows another wallet to `transferFrom` tokens from their wallet.\n', '     * @param _spender Address of `transferFrom` recipient.\n', '     * @param _value Number of tokens to `transferFrom`.\n', '     * @return True if the approval succeeded.\n', '     */\n', '    function approve(address _spender, uint _value)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * Gets the number of tokens that an `_owner` has approved for a _spender\n', '     *     to `transferFrom`.\n', '     * @param _owner Wallet address that tokens can be withdrawn from.\n', '     * @param _spender Wallet address that tokens can be deposited to.\n', '     * @return The number of tokens allowed to be transferred.\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        constant\n', '        returns (uint remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: browser/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: browser/jimbolia.sol\n', '\n', '/**\n', ' * Jimbolia\n', ' *\n', ' * @title A fixed supply ERC-20 token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract JimboliaT {\n', '    using SafeMath for uint;\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value\n', '    );\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _value\n', '    );\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    /**\n', '     * Constructs the Token contract and gives all of the supply to the address\n', '     *     that deployed it. The fixed supply is 1 billion tokens with up to 18\n', '     *     decimal places.\n', '     */\n', '    function Token() public {\n', "        symbol = 'JIT';\n", "        name = 'Jimbolia Token';\n", '        decimals = 18;\n', '        totalSupply = 20000 * 10**uint(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '    /**\n', '     * @dev Fallback function\n', '     */\n', '    function() public payable { revert(); }\n', '    /**\n', '     * Gets the token balance of any wallet.\n', '     * @param _owner Wallet address of the returned token balance.\n', '     * @return The balance of tokens in the wallet.\n', '     */\n', '    function balanceOf(address _owner)\n', '        public\n', '        constant\n', '        returns (uint balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '    /**\n', "     * Transfers tokens from the sender's wallet to the specified `_to` wallet.\n", "     * @param _to Address of the transfer's recipient.\n", '     * @param _value Number of tokens to transfer.\n', '     * @return True if the transfer succeeded.\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * Transfer tokens from any wallet to the `_to` wallet. This only works if\n', '     *     the `_from` wallet has already allocated tokens for the caller wallet\n', '     *     using `approve`. The from wallet must have sufficient balance to\n', '     *     transfer. The caller must have sufficient allowance to transfer.\n', '     * @param _from Wallet address that tokens are withdrawn from.\n', '     * @param _to Wallet address that tokens are deposited to.\n', '     * @param _value Number of tokens transacted.\n', '     * @return True if the transfer succeeded.\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * Sender allows another wallet to `transferFrom` tokens from their wallet.\n', '     * @param _spender Address of `transferFrom` recipient.\n', '     * @param _value Number of tokens to `transferFrom`.\n', '     * @return True if the approval succeeded.\n', '     */\n', '    function approve(address _spender, uint _value)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    /**\n', '     * Gets the number of tokens that an `_owner` has approved for a _spender\n', '     *     to `transferFrom`.\n', '     * @param _owner Wallet address that tokens can be withdrawn from.\n', '     * @param _spender Wallet address that tokens can be deposited to.\n', '     * @return The number of tokens allowed to be transferred.\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        constant\n', '        returns (uint remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
