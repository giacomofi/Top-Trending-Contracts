['pragma solidity ^0.4.24;\n', '/*\n', '\n', '  Copyright 2018 InterValue Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b); //The first number should not be zero\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  \n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '    \n', '  /// This is where we hold INVE token and the only address from which\n', '  /// `issue token` can be invocated.\n', '  ///\n', '  /// Note: this will be initialized during the contract deployment.\n', '  address public owner;\n', '  \n', '  /// This is a switch to control the liquidity of INVE\n', '  bool public transferable = true;\n', '  \n', '  mapping(address => uint) balances;\n', '\n', '  //The frozen accounts \n', '  mapping (address => bool) public frozenAccount;\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '  \n', '  modifier unFrozenAccount{\n', '      require(!frozenAccount[msg.sender]);\n', '      _;\n', '  }\n', '  \n', '  modifier onlyOwner {\n', '      if (owner == msg.sender) {\n', '          _;\n', '      } else {\n', '          InvalidCaller(msg.sender);\n', '          throw;\n', '        }\n', '  }\n', '  \n', '  modifier onlyTransferable {\n', '      if (transferable) {\n', '          _;\n', '      } else {\n', '          LiquidityAlarm("The liquidity of INVE is switched off");\n', '          throw;\n', '      }\n', '  }\n', '  /**\n', '  *EVENTS\n', '  */\n', '  /// Emitted when the target account is frozen\n', '  event FrozenFunds(address target, bool frozen);\n', '  \n', '  /// Emitted when a function is invocated by unauthorized addresses.\n', '  event InvalidCaller(address caller);\n', '\n', '  /// Emitted when some INVE coins are burn.\n', '  event Burn(address caller, uint value);\n', '  \n', '  /// Emitted when the ownership is transferred.\n', '  event OwnershipTransferred(address indexed from, address indexed to);\n', '  \n', '  /// Emitted if the account is invalid for transaction.\n', '  event InvalidAccount(address indexed addr, bytes msg);\n', '  \n', '  /// Emitted when the liquity of INVE is switched off\n', '  event LiquidityAlarm(bytes msg);\n', '  \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) unFrozenAccount onlyTransferable {\n', '    if (frozenAccount[_to]) {\n', '        InvalidAccount(_to, "The receiver account is frozen");\n', '    } else {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  ///@notice `freeze? Prevent | Allow` `target` from sending & receiving INVE preconditions\n', '  ///@param target Address to be frozen\n', '  ///@param freeze To freeze the target account or not\n', '  function freezeAccount(address target, bool freeze) onlyOwner public {\n', '      frozenAccount[target]=freeze;\n', '      FrozenFunds(target, freeze);\n', '    }\n', '  \n', '  function accountFrozenStatus(address target) view returns (bool frozen) {\n', '      return frozenAccount[target];\n', '  }\n', '  \n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '      if (newOwner != address(0)) {\n', '          address oldOwner=owner;\n', '          owner = newOwner;\n', '          OwnershipTransferred(oldOwner, owner);\n', '        }\n', '  }\n', '  \n', '  function switchLiquidity (bool _transferable) onlyOwner returns (bool success) {\n', '      transferable=_transferable;\n', '      return true;\n', '  }\n', '  \n', '  function liquidityStatus () view returns (bool _transferable) {\n', '      return transferable;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) unFrozenAccount onlyTransferable{\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '    \n', '    // Check account _from and _to is not frozen\n', '    require(!frozenAccount[_from]&&!frozenAccount[_to]);\n', '    \n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) unFrozenAccount {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) view returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '}\n', '\n', '/// @title InterValue Protocol Token.\n', '/// For more information about this token, please visit http://inve.one\n', 'contract INVEToken is StandardToken {\n', '    string public name = "InterValue";\n', '    string public symbol = "INVE";\n', '    uint public decimals = 18;\n', '\n', '    /**\n', '     * CONSTRUCTOR \n', '     * \n', '     * @dev Initialize the INVE Coin\n', '     * @param _owner The escrow account address, all ethers will\n', '     * be sent to this address.\n', '     * This address will be : 0x...\n', '     */\n', '    function INVEToken(address _owner) {\n', '        owner = _owner;\n', '        totalSupply = 40 * 10 ** 26;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    /// @dev This default function allows token to be purchased by directly\n', '    /// sending ether to this smart contract.\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '/*\n', '\n', '  Copyright 2018 InterValue Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b); //The first number should not be zero\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  \n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '    \n', '  /// This is where we hold INVE token and the only address from which\n', '  /// `issue token` can be invocated.\n', '  ///\n', '  /// Note: this will be initialized during the contract deployment.\n', '  address public owner;\n', '  \n', '  /// This is a switch to control the liquidity of INVE\n', '  bool public transferable = true;\n', '  \n', '  mapping(address => uint) balances;\n', '\n', '  //The frozen accounts \n', '  mapping (address => bool) public frozenAccount;\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '  \n', '  modifier unFrozenAccount{\n', '      require(!frozenAccount[msg.sender]);\n', '      _;\n', '  }\n', '  \n', '  modifier onlyOwner {\n', '      if (owner == msg.sender) {\n', '          _;\n', '      } else {\n', '          InvalidCaller(msg.sender);\n', '          throw;\n', '        }\n', '  }\n', '  \n', '  modifier onlyTransferable {\n', '      if (transferable) {\n', '          _;\n', '      } else {\n', '          LiquidityAlarm("The liquidity of INVE is switched off");\n', '          throw;\n', '      }\n', '  }\n', '  /**\n', '  *EVENTS\n', '  */\n', '  /// Emitted when the target account is frozen\n', '  event FrozenFunds(address target, bool frozen);\n', '  \n', '  /// Emitted when a function is invocated by unauthorized addresses.\n', '  event InvalidCaller(address caller);\n', '\n', '  /// Emitted when some INVE coins are burn.\n', '  event Burn(address caller, uint value);\n', '  \n', '  /// Emitted when the ownership is transferred.\n', '  event OwnershipTransferred(address indexed from, address indexed to);\n', '  \n', '  /// Emitted if the account is invalid for transaction.\n', '  event InvalidAccount(address indexed addr, bytes msg);\n', '  \n', '  /// Emitted when the liquity of INVE is switched off\n', '  event LiquidityAlarm(bytes msg);\n', '  \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) unFrozenAccount onlyTransferable {\n', '    if (frozenAccount[_to]) {\n', '        InvalidAccount(_to, "The receiver account is frozen");\n', '    } else {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  ///@notice `freeze? Prevent | Allow` `target` from sending & receiving INVE preconditions\n', '  ///@param target Address to be frozen\n', '  ///@param freeze To freeze the target account or not\n', '  function freezeAccount(address target, bool freeze) onlyOwner public {\n', '      frozenAccount[target]=freeze;\n', '      FrozenFunds(target, freeze);\n', '    }\n', '  \n', '  function accountFrozenStatus(address target) view returns (bool frozen) {\n', '      return frozenAccount[target];\n', '  }\n', '  \n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '      if (newOwner != address(0)) {\n', '          address oldOwner=owner;\n', '          owner = newOwner;\n', '          OwnershipTransferred(oldOwner, owner);\n', '        }\n', '  }\n', '  \n', '  function switchLiquidity (bool _transferable) onlyOwner returns (bool success) {\n', '      transferable=_transferable;\n', '      return true;\n', '  }\n', '  \n', '  function liquidityStatus () view returns (bool _transferable) {\n', '      return transferable;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) unFrozenAccount onlyTransferable{\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '    \n', '    // Check account _from and _to is not frozen\n', '    require(!frozenAccount[_from]&&!frozenAccount[_to]);\n', '    \n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) unFrozenAccount {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) view returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '}\n', '\n', '/// @title InterValue Protocol Token.\n', '/// For more information about this token, please visit http://inve.one\n', 'contract INVEToken is StandardToken {\n', '    string public name = "InterValue";\n', '    string public symbol = "INVE";\n', '    uint public decimals = 18;\n', '\n', '    /**\n', '     * CONSTRUCTOR \n', '     * \n', '     * @dev Initialize the INVE Coin\n', '     * @param _owner The escrow account address, all ethers will\n', '     * be sent to this address.\n', '     * This address will be : 0x...\n', '     */\n', '    function INVEToken(address _owner) {\n', '        owner = _owner;\n', '        totalSupply = 40 * 10 ** 26;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    /// @dev This default function allows token to be purchased by directly\n', '    /// sending ether to this smart contract.\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
