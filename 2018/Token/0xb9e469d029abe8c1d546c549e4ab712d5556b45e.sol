['pragma solidity ^0.4.18;\n', '\t\n', '\tcontract ERC20 {\n', '\t  uint public totalSupply;\n', '\t  function balanceOf(address who) constant returns (uint);\n', '\t  function allowance(address owner, address spender) constant returns (uint);\n', '\t\n', '\n', '\t  function transfer(address _to, uint _value) returns (bool success);\n', '\t  function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '\t  function approve(address spender, uint value) returns (bool ok);\n', '\t  event Transfer(address indexed from, address indexed to, uint value);\n', '\t  event Approval(address indexed owner, address indexed spender, uint value);\n', '\t}\n', '\t\n', '\n', '\t/**\n', '\t * Math operations with safety checks\n', '\t */\n', '\tcontract SafeMath {\n', '\t  function safeMul(uint a, uint b) internal returns (uint) {\n', '\t    uint c = a * b;\n', '\t    assert(a == 0 || c / a == b);\n', '\t    return c;\n', '\t  }\n', '\t\n', '\n', '\t  function safeDiv(uint a, uint b) internal returns (uint) {\n', '\t    assert(b > 0);\n', '\t    uint c = a / b;\n', '\t    assert(a == b * c + a % b);\n', '\t    return c;\n', '\t  }\n', '\t\n', '\n', '\t  function safeSub(uint a, uint b) internal returns (uint) {\n', '\t    assert(b <= a);\n', '\t    return a - b;\n', '\t  }\n', '\t\n', '\n', '\t  function safeAdd(uint a, uint b) internal returns (uint) {\n', '\t    uint c = a + b;\n', '\t    assert(c>=a && c>=b);\n', '\t    return c;\n', '\t  }\n', '\t\n', '\n', '\t  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '\t    return a >= b ? a : b;\n', '\t  }\n', '\t\n', '\n', '\t  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '\t    return a < b ? a : b;\n', '\t  }\n', '\t\n', '\n', '\t  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t    return a >= b ? a : b;\n', '\t  }\n', '\t\n', '\n', '\t  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t    return a < b ? a : b;\n', '\t  }\n', '\t}\n', '\t\n', '\n', '\tcontract StandardToken is ERC20, SafeMath {\n', '\t\n', '\n', '\t  /* Token supply got increased and a new owner received these tokens */\n', '\t  event Minted(address receiver, uint amount);\n', '\t\n', '\n', '\t  /* Actual balances of token holders */\n', '\t  mapping(address => uint) balances;\n', '\t\n', '\n', '\t  /* approve() allowances */\n', '\t  mapping (address => mapping (address => uint)) allowed;\n', '\t\n', '\n', '\t  /* Interface declaration */\n', '\t  function isToken() public constant returns (bool weAre) {\n', '\t    return true;\n', '\t  }\n', '\t\n', '\n', '\t  function transfer(address _to, uint _value) returns (bool success) {\n', '\t    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '\t    balances[_to] = safeAdd(balances[_to], _value);\n', '\t    Transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '\t  }\n', '\t\n', '\n', '\t  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '\t    uint _allowance = allowed[_from][msg.sender];\n', '\t\n', '\n', '\t    balances[_to] = safeAdd(balances[_to], _value);\n', '\t    balances[_from] = safeSub(balances[_from], _value);\n', '\t    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '\t    Transfer(_from, _to, _value);\n', '\t    return true;\n', '\t  }\n', '\t\n', '\n', '\t  function balanceOf(address _owner) constant returns (uint balance) {\n', '\t    return balances[_owner];\n', '\t  }\n', '\t\n', '\n', '\t  function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '\t\n', '\t    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\t\n', '\n', '\t    allowed[msg.sender][_spender] = _value;\n', '\t    Approval(msg.sender, _spender, _value);\n', '\t    return true;\n', '\t  }\n', '\t\n', '\n', '\t  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '\t    return allowed[_owner][_spender];\n', '\t  }\n', '\t}\n', '\n', '\tcontract RealstateOceanProject1 is StandardToken {\n', '\t\n', '\n', '\t    string public name = "Realstate Ocean Project 1";\n', '\t    string public symbol = "RSO-P1";\n', '\t    uint public decimals = 18;\n', '\t    uint EthPrice = 385;\n', '\t \n', '        function set(uint x) public onlyOwner {\n', '        EthPrice = x;\n', '        }\n', '\n', '\n', '\t    /**\n', '\t     * Boolean contract states\n', '\t     */\n', '\t    bool halted = false; //the founder address can set this to true to halt the whole ICO event due to emergency\n', '\t    bool ICO = true; //ICO state\n', '\t    bool public freeze = true; //Freeze state\n', '\t\n', '\n', '\t    /**\n', '\t     * Initial founder address (set in constructor)\n', '\t     * All deposited ETH will be forwarded to this address.\n', '\t     */\n', '\t    address founder = 0x0;\n', '\t    address owner = 0x0;\n', '\t\n', '\n', '\t    /**\n', '\t     * Token count\n', '\t     */\n', '\t    uint totalTokens = 100000000 * 10**18;\n', '\t    uint team = 0; // No Team\n', '\t    uint bounty = 0; // No Bounty\n', '\t\n', '\n', '\t    /**\n', '\t     * ICO cap\n', '\t     */\n', '\t    uint ICOCap = 10000000120 * 10**18; // Max amount raised during ICO is 10.000.000 // 1000 unidades representan 1 ETH \n', '\n', '\n', '\t    /**\n', '\t     * Statistic values\n', '\t     */\n', '\t    uint presaleTokenSupply = 0; // This will keep track of the token supply created during the event\n', '\t    uint presaleEtherRaised = 0; // This will keep track of the Ether raised during the event\n', '\t    uint ICOTokenSupply = 0; // This will keep track of the token supply created during the ICO\n', '\t\n', '\n', '\t    event Buy(address indexed sender, uint eth, uint fbt);\n', '\t\n', '\n', '\t    /* This generates a public event on the blockchain that will notify clients */\n', '\t    event TokensSent(address indexed to, uint256 value);\n', '\t    event ContributionReceived(address indexed to, uint256 value);\n', '\t    event Burn(address indexed from, uint256 value);\n', '\t\n', '\n', '\t    function RealstateOceanProject1(address _founder) payable {\n', '\t        owner = msg.sender;\n', '\t        founder = _founder;\n', '\t\n', '\n', '\t        // Move team token pool to founder balance\n', '\t        balances[founder] = team;\n', '\t        // Sub from total tokens team pool\n', '\t        totalTokens = safeSub(totalTokens, team);\n', '\t        // Sub from total tokens bounty pool\n', '\t        totalTokens = safeSub(totalTokens, bounty);\n', '\t        // Total supply is 100000000\n', '\t        totalSupply = totalTokens;\n', '\t        balances[owner] = totalSupply;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * 1 RSO-P1 = 1 FINNEY\n', '\t     * Price is 1000 Realstate Ocean Projetc 1 for 1 ETH\n', '\t     */\n', '\t    function price() constant returns (uint){\n', '\t        return 1 finney;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t      * The basic entry point to participate the event process.\n', '\t      *\n', '\t      * Pay for funding, get invested tokens back in the sender address.\n', '\t      */\n', '\t    function buy() public payable returns(bool) {\n', '\t        // Buy allowed if contract is not on halt\n', '\t        require(!halted);\n', '\t        // Amount of wei should be more that 0\n', '\t        require(msg.value>0);\n', '\t\n', '\n', '\t        // Count expected tokens price\n', '\t        uint tokens = msg.value * 10**18 / price();\n', '\t\n', '\n', '\t        // Total tokens should be more than user want&#39;s to buy\n', '\t        require(balances[owner]>tokens);\n', '\t\n', '\n', '\t        // ICO Token Price\n', '\t        if (ICO) {\n', '\t            tokens = (tokens / 1000) * EthPrice;\n', '\t        }\n', '\t\n', '\n', '\t        // Check how much tokens already sold\n', '\t        if (ICO) {\n', '\t            // Check that required tokens count are less than tokens already sold on ICO\n', '\t            require(safeAdd(presaleTokenSupply, tokens) < ICOCap);\n', '\t        } \n', '\n', '\t        // Send wei to founder address\n', '\t        founder.transfer(msg.value);\n', '\t\n', '\n', '\t        // Add tokens to user balance and remove from totalSupply\n', '\t        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '\t        // Remove sold tokens from total supply count\n', '\t        balances[owner] = safeSub(balances[owner], tokens);\n', '\t\n', '\n', '\t        // Update stats\n', '\t        if (ICO) {\n', '\t            ICOTokenSupply  = safeAdd(ICOTokenSupply, tokens);\n', '\t        }\n', '\t        presaleTokenSupply = safeAdd(presaleTokenSupply, tokens);\n', '\t        presaleEtherRaised = safeAdd(presaleEtherRaised, msg.value);\n', '\t\n', '\n', '\t        // Send buy RSO-P1 token action\n', '\t        Buy(msg.sender, msg.value, tokens);\n', '\t\n', '\n', '\t        // /* Emit log events */\n', '\t        TokensSent(msg.sender, tokens);\n', '\t        ContributionReceived(msg.sender, msg.value);\n', '\t        Transfer(owner, msg.sender, tokens);\n', '\t\n', '\n', '\t        return true;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * ICO state.\n', '\t     */\n', '\t    function InitialPriceEnable() onlyOwner() {\n', '\t        ICO = true;\n', '\t    }\n', '\t\n', '\n', '\t    function InitialPriceDisable() onlyOwner() {\n', '\t        ICO = false;\n', '\t    }\n', '\t\t\n', '\t  \n', '\t    /**\n', '\t     * Emergency stop whole ICO event.\n', '\t     */\n', '\t    function EventEmergencyStop() onlyOwner() {\n', '\t        halted = true;\n', '\t    }\n', '\t\n', '\n', '\t    function EventEmergencyContinue() onlyOwner() {\n', '\t        halted = false;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * ERC 20 Standard Token interface transfer function\n', '\t     *\n', '\t     * Prevent transfers until halt period is over.\n', '\t     */\n', '\t    function transfer(address _to, uint256 _value) isAvailable() returns (bool success) {\n', '\t        return super.transfer(_to, _value);\n', '\t    }\n', '\t    /**\n', '\t     * ERC 20 Standard Token interface transfer function\n', '\t     *\n', '\t     * Prevent transfers until halt period is over.\n', '\t     */\n', '\t    function transferFrom(address _from, address _to, uint256 _value) isAvailable() returns (bool success) {\n', '\t        return super.transferFrom(_from, _to, _value);\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Burn all tokens from a balance.\n', '\t     */\n', '\t    function burnRemainingTokens() isAvailable() onlyOwner() {\n', '\t        Burn(owner, balances[owner]);\n', '\t        balances[owner] = 0;\n', '\t    }\n', '\t\n', '\n', '\t    modifier onlyOwner() {\n', '\t        require(msg.sender == owner);\n', '\t        _;\n', '\t    }\n', '\t\n', '\n', '\t    modifier isAvailable() {\n', '\t        require(!halted && !freeze);\n', '\t        _;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Buy tokens\n', '\t     */\n', '\t    function() payable {\n', '\t        buy();\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Freeze and unfreeze ICO.\n', '\t     */\n', '\t    function freeze() onlyOwner() {\n', '\t         freeze = true;\n', '\t    }\n', '\t\n', '\n', '\t     function unFreeze() onlyOwner() {\n', '\t         freeze = false;\n', '\t     }\n', '}']
['pragma solidity ^0.4.18;\n', '\t\n', '\tcontract ERC20 {\n', '\t  uint public totalSupply;\n', '\t  function balanceOf(address who) constant returns (uint);\n', '\t  function allowance(address owner, address spender) constant returns (uint);\n', '\t\n', '\n', '\t  function transfer(address _to, uint _value) returns (bool success);\n', '\t  function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '\t  function approve(address spender, uint value) returns (bool ok);\n', '\t  event Transfer(address indexed from, address indexed to, uint value);\n', '\t  event Approval(address indexed owner, address indexed spender, uint value);\n', '\t}\n', '\t\n', '\n', '\t/**\n', '\t * Math operations with safety checks\n', '\t */\n', '\tcontract SafeMath {\n', '\t  function safeMul(uint a, uint b) internal returns (uint) {\n', '\t    uint c = a * b;\n', '\t    assert(a == 0 || c / a == b);\n', '\t    return c;\n', '\t  }\n', '\t\n', '\n', '\t  function safeDiv(uint a, uint b) internal returns (uint) {\n', '\t    assert(b > 0);\n', '\t    uint c = a / b;\n', '\t    assert(a == b * c + a % b);\n', '\t    return c;\n', '\t  }\n', '\t\n', '\n', '\t  function safeSub(uint a, uint b) internal returns (uint) {\n', '\t    assert(b <= a);\n', '\t    return a - b;\n', '\t  }\n', '\t\n', '\n', '\t  function safeAdd(uint a, uint b) internal returns (uint) {\n', '\t    uint c = a + b;\n', '\t    assert(c>=a && c>=b);\n', '\t    return c;\n', '\t  }\n', '\t\n', '\n', '\t  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '\t    return a >= b ? a : b;\n', '\t  }\n', '\t\n', '\n', '\t  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '\t    return a < b ? a : b;\n', '\t  }\n', '\t\n', '\n', '\t  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t    return a >= b ? a : b;\n', '\t  }\n', '\t\n', '\n', '\t  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t    return a < b ? a : b;\n', '\t  }\n', '\t}\n', '\t\n', '\n', '\tcontract StandardToken is ERC20, SafeMath {\n', '\t\n', '\n', '\t  /* Token supply got increased and a new owner received these tokens */\n', '\t  event Minted(address receiver, uint amount);\n', '\t\n', '\n', '\t  /* Actual balances of token holders */\n', '\t  mapping(address => uint) balances;\n', '\t\n', '\n', '\t  /* approve() allowances */\n', '\t  mapping (address => mapping (address => uint)) allowed;\n', '\t\n', '\n', '\t  /* Interface declaration */\n', '\t  function isToken() public constant returns (bool weAre) {\n', '\t    return true;\n', '\t  }\n', '\t\n', '\n', '\t  function transfer(address _to, uint _value) returns (bool success) {\n', '\t    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '\t    balances[_to] = safeAdd(balances[_to], _value);\n', '\t    Transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '\t  }\n', '\t\n', '\n', '\t  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '\t    uint _allowance = allowed[_from][msg.sender];\n', '\t\n', '\n', '\t    balances[_to] = safeAdd(balances[_to], _value);\n', '\t    balances[_from] = safeSub(balances[_from], _value);\n', '\t    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '\t    Transfer(_from, _to, _value);\n', '\t    return true;\n', '\t  }\n', '\t\n', '\n', '\t  function balanceOf(address _owner) constant returns (uint balance) {\n', '\t    return balances[_owner];\n', '\t  }\n', '\t\n', '\n', '\t  function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '\t\n', '\t    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\t\n', '\n', '\t    allowed[msg.sender][_spender] = _value;\n', '\t    Approval(msg.sender, _spender, _value);\n', '\t    return true;\n', '\t  }\n', '\t\n', '\n', '\t  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '\t    return allowed[_owner][_spender];\n', '\t  }\n', '\t}\n', '\n', '\tcontract RealstateOceanProject1 is StandardToken {\n', '\t\n', '\n', '\t    string public name = "Realstate Ocean Project 1";\n', '\t    string public symbol = "RSO-P1";\n', '\t    uint public decimals = 18;\n', '\t    uint EthPrice = 385;\n', '\t \n', '        function set(uint x) public onlyOwner {\n', '        EthPrice = x;\n', '        }\n', '\n', '\n', '\t    /**\n', '\t     * Boolean contract states\n', '\t     */\n', '\t    bool halted = false; //the founder address can set this to true to halt the whole ICO event due to emergency\n', '\t    bool ICO = true; //ICO state\n', '\t    bool public freeze = true; //Freeze state\n', '\t\n', '\n', '\t    /**\n', '\t     * Initial founder address (set in constructor)\n', '\t     * All deposited ETH will be forwarded to this address.\n', '\t     */\n', '\t    address founder = 0x0;\n', '\t    address owner = 0x0;\n', '\t\n', '\n', '\t    /**\n', '\t     * Token count\n', '\t     */\n', '\t    uint totalTokens = 100000000 * 10**18;\n', '\t    uint team = 0; // No Team\n', '\t    uint bounty = 0; // No Bounty\n', '\t\n', '\n', '\t    /**\n', '\t     * ICO cap\n', '\t     */\n', '\t    uint ICOCap = 10000000120 * 10**18; // Max amount raised during ICO is 10.000.000 // 1000 unidades representan 1 ETH \n', '\n', '\n', '\t    /**\n', '\t     * Statistic values\n', '\t     */\n', '\t    uint presaleTokenSupply = 0; // This will keep track of the token supply created during the event\n', '\t    uint presaleEtherRaised = 0; // This will keep track of the Ether raised during the event\n', '\t    uint ICOTokenSupply = 0; // This will keep track of the token supply created during the ICO\n', '\t\n', '\n', '\t    event Buy(address indexed sender, uint eth, uint fbt);\n', '\t\n', '\n', '\t    /* This generates a public event on the blockchain that will notify clients */\n', '\t    event TokensSent(address indexed to, uint256 value);\n', '\t    event ContributionReceived(address indexed to, uint256 value);\n', '\t    event Burn(address indexed from, uint256 value);\n', '\t\n', '\n', '\t    function RealstateOceanProject1(address _founder) payable {\n', '\t        owner = msg.sender;\n', '\t        founder = _founder;\n', '\t\n', '\n', '\t        // Move team token pool to founder balance\n', '\t        balances[founder] = team;\n', '\t        // Sub from total tokens team pool\n', '\t        totalTokens = safeSub(totalTokens, team);\n', '\t        // Sub from total tokens bounty pool\n', '\t        totalTokens = safeSub(totalTokens, bounty);\n', '\t        // Total supply is 100000000\n', '\t        totalSupply = totalTokens;\n', '\t        balances[owner] = totalSupply;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * 1 RSO-P1 = 1 FINNEY\n', '\t     * Price is 1000 Realstate Ocean Projetc 1 for 1 ETH\n', '\t     */\n', '\t    function price() constant returns (uint){\n', '\t        return 1 finney;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t      * The basic entry point to participate the event process.\n', '\t      *\n', '\t      * Pay for funding, get invested tokens back in the sender address.\n', '\t      */\n', '\t    function buy() public payable returns(bool) {\n', '\t        // Buy allowed if contract is not on halt\n', '\t        require(!halted);\n', '\t        // Amount of wei should be more that 0\n', '\t        require(msg.value>0);\n', '\t\n', '\n', '\t        // Count expected tokens price\n', '\t        uint tokens = msg.value * 10**18 / price();\n', '\t\n', '\n', "\t        // Total tokens should be more than user want's to buy\n", '\t        require(balances[owner]>tokens);\n', '\t\n', '\n', '\t        // ICO Token Price\n', '\t        if (ICO) {\n', '\t            tokens = (tokens / 1000) * EthPrice;\n', '\t        }\n', '\t\n', '\n', '\t        // Check how much tokens already sold\n', '\t        if (ICO) {\n', '\t            // Check that required tokens count are less than tokens already sold on ICO\n', '\t            require(safeAdd(presaleTokenSupply, tokens) < ICOCap);\n', '\t        } \n', '\n', '\t        // Send wei to founder address\n', '\t        founder.transfer(msg.value);\n', '\t\n', '\n', '\t        // Add tokens to user balance and remove from totalSupply\n', '\t        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '\t        // Remove sold tokens from total supply count\n', '\t        balances[owner] = safeSub(balances[owner], tokens);\n', '\t\n', '\n', '\t        // Update stats\n', '\t        if (ICO) {\n', '\t            ICOTokenSupply  = safeAdd(ICOTokenSupply, tokens);\n', '\t        }\n', '\t        presaleTokenSupply = safeAdd(presaleTokenSupply, tokens);\n', '\t        presaleEtherRaised = safeAdd(presaleEtherRaised, msg.value);\n', '\t\n', '\n', '\t        // Send buy RSO-P1 token action\n', '\t        Buy(msg.sender, msg.value, tokens);\n', '\t\n', '\n', '\t        // /* Emit log events */\n', '\t        TokensSent(msg.sender, tokens);\n', '\t        ContributionReceived(msg.sender, msg.value);\n', '\t        Transfer(owner, msg.sender, tokens);\n', '\t\n', '\n', '\t        return true;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * ICO state.\n', '\t     */\n', '\t    function InitialPriceEnable() onlyOwner() {\n', '\t        ICO = true;\n', '\t    }\n', '\t\n', '\n', '\t    function InitialPriceDisable() onlyOwner() {\n', '\t        ICO = false;\n', '\t    }\n', '\t\t\n', '\t  \n', '\t    /**\n', '\t     * Emergency stop whole ICO event.\n', '\t     */\n', '\t    function EventEmergencyStop() onlyOwner() {\n', '\t        halted = true;\n', '\t    }\n', '\t\n', '\n', '\t    function EventEmergencyContinue() onlyOwner() {\n', '\t        halted = false;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * ERC 20 Standard Token interface transfer function\n', '\t     *\n', '\t     * Prevent transfers until halt period is over.\n', '\t     */\n', '\t    function transfer(address _to, uint256 _value) isAvailable() returns (bool success) {\n', '\t        return super.transfer(_to, _value);\n', '\t    }\n', '\t    /**\n', '\t     * ERC 20 Standard Token interface transfer function\n', '\t     *\n', '\t     * Prevent transfers until halt period is over.\n', '\t     */\n', '\t    function transferFrom(address _from, address _to, uint256 _value) isAvailable() returns (bool success) {\n', '\t        return super.transferFrom(_from, _to, _value);\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Burn all tokens from a balance.\n', '\t     */\n', '\t    function burnRemainingTokens() isAvailable() onlyOwner() {\n', '\t        Burn(owner, balances[owner]);\n', '\t        balances[owner] = 0;\n', '\t    }\n', '\t\n', '\n', '\t    modifier onlyOwner() {\n', '\t        require(msg.sender == owner);\n', '\t        _;\n', '\t    }\n', '\t\n', '\n', '\t    modifier isAvailable() {\n', '\t        require(!halted && !freeze);\n', '\t        _;\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Buy tokens\n', '\t     */\n', '\t    function() payable {\n', '\t        buy();\n', '\t    }\n', '\t\n', '\n', '\t    /**\n', '\t     * Freeze and unfreeze ICO.\n', '\t     */\n', '\t    function freeze() onlyOwner() {\n', '\t         freeze = true;\n', '\t    }\n', '\t\n', '\n', '\t     function unFreeze() onlyOwner() {\n', '\t         freeze = false;\n', '\t     }\n', '}']
