['pragma solidity ^0.4.18;\n', '\n', '\n', '/*\n', '    SafeMath operations used for supporting contracts.\n', '*/\n', 'contract SafeMath {\n', '    function Add(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function Sub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function Mul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function Div(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '/*\n', '    Modified version of ERC20 interface supplied from https://github.com/ethereum.\n', '*/\n', 'contract ERC20 {\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function allowance(address fromAddress, address recipientAddress) public constant returns (uint remaining);\n', '    function totalSupply() public constant returns (uint);\n', '    function transfer(address recipientAddress, uint tokens) public returns (bool success);\n', '    function transferFrom(address fromAddress, address recipientAddress, uint tokens) public returns (bool success);\n', '    function balanceOf(address userAddress) public constant returns (uint balance);\n', '    \n', '    event Transfer(address indexed from, address indexed recipient, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/*\n', '    Owner contract contains authorization functions to limit\n', '    access of some functions to the token owner.\n', '*/\n', 'contract Owned {\n', '    address public Owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipAltered(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == Owner);\n', '        _;\n', '    }\n', '    \n', '    /*\n', '        Assigns the initial address to the owner.\n', '    */\n', '    function Owned() public {\n', '        Owner = msg.sender;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipAltered(Owner, newOwner);\n', '        Owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    /*\n', '        Allows the owner to designate a new owner\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '}\n', '\n', '/*\n', '    BEAT Token contract with specifics.\n', '*/\n', 'contract BEAT is ERC20, Owned, SafeMath {\n', '    string public  name;\n', '    string public symbol;\n', '    uint public _totalSupply;\n', '    uint8 public decimals;\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    /*\n', '        Constructor to create BEAT token.\n', '    */\n', '    function BEAT() public {\n', '        symbol = "BEAT";\n', '        name = "BEAT";\n', '        decimals = 8;\n', '        _totalSupply = 100000000000000000;\n', '        Owner = msg.sender;\n', '        balances[msg.sender] = _totalSupply;\n', '\n', '    }\n', '\n', '    /*\n', '        Returns the total token supply.\n', '    */\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /*\n', '        Get the token balance for account tokenOwner.\n', '    */\n', '    function balanceOf(address userAddress) public constant returns (uint balance) {\n', '        return balances[userAddress];\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = Sub(balances[msg.sender], tokens);\n', '        balances[to] = Add(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = Sub(balances[from], tokens);\n', '        allowed[from][msg.sender] = Sub(allowed[from][msg.sender], tokens);\n', '        balances[to] = Add(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    /*\n', '        Owner can transfer any ERC20 tokens sent to contract.\n', '    */\n', '    function redeemContractSentTokens(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(Owner, tokens);\n', '    }\n', '\n', '    /*\n', '        Owner can distribute tokens\n', '    */\n', '    function airdrop(address[] addresses, uint256 _value) onlyOwner public {\n', '         for (uint j = 0; j < addresses.length; j++) {\n', '             balances[Owner] -= _value;\n', '             balances[addresses[j]] += _value;\n', '             emit Transfer(Owner, addresses[j], _value);\n', '         }\n', '    }\n', '\n', '    /*\n', '        Returns the amount of tokens allowed by the owner that can be transferred\n', '    */\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    \n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/*\n', '    SafeMath operations used for supporting contracts.\n', '*/\n', 'contract SafeMath {\n', '    function Add(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function Sub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function Mul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function Div(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '/*\n', '    Modified version of ERC20 interface supplied from https://github.com/ethereum.\n', '*/\n', 'contract ERC20 {\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function allowance(address fromAddress, address recipientAddress) public constant returns (uint remaining);\n', '    function totalSupply() public constant returns (uint);\n', '    function transfer(address recipientAddress, uint tokens) public returns (bool success);\n', '    function transferFrom(address fromAddress, address recipientAddress, uint tokens) public returns (bool success);\n', '    function balanceOf(address userAddress) public constant returns (uint balance);\n', '    \n', '    event Transfer(address indexed from, address indexed recipient, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/*\n', '    Owner contract contains authorization functions to limit\n', '    access of some functions to the token owner.\n', '*/\n', 'contract Owned {\n', '    address public Owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipAltered(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == Owner);\n', '        _;\n', '    }\n', '    \n', '    /*\n', '        Assigns the initial address to the owner.\n', '    */\n', '    function Owned() public {\n', '        Owner = msg.sender;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipAltered(Owner, newOwner);\n', '        Owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    /*\n', '        Allows the owner to designate a new owner\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '}\n', '\n', '/*\n', '    BEAT Token contract with specifics.\n', '*/\n', 'contract BEAT is ERC20, Owned, SafeMath {\n', '    string public  name;\n', '    string public symbol;\n', '    uint public _totalSupply;\n', '    uint8 public decimals;\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    /*\n', '        Constructor to create BEAT token.\n', '    */\n', '    function BEAT() public {\n', '        symbol = "BEAT";\n', '        name = "BEAT";\n', '        decimals = 8;\n', '        _totalSupply = 100000000000000000;\n', '        Owner = msg.sender;\n', '        balances[msg.sender] = _totalSupply;\n', '\n', '    }\n', '\n', '    /*\n', '        Returns the total token supply.\n', '    */\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /*\n', '        Get the token balance for account tokenOwner.\n', '    */\n', '    function balanceOf(address userAddress) public constant returns (uint balance) {\n', '        return balances[userAddress];\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = Sub(balances[msg.sender], tokens);\n', '        balances[to] = Add(balances[to], tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = Sub(balances[from], tokens);\n', '        allowed[from][msg.sender] = Sub(allowed[from][msg.sender], tokens);\n', '        balances[to] = Add(balances[to], tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    /*\n', '        Owner can transfer any ERC20 tokens sent to contract.\n', '    */\n', '    function redeemContractSentTokens(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(Owner, tokens);\n', '    }\n', '\n', '    /*\n', '        Owner can distribute tokens\n', '    */\n', '    function airdrop(address[] addresses, uint256 _value) onlyOwner public {\n', '         for (uint j = 0; j < addresses.length; j++) {\n', '             balances[Owner] -= _value;\n', '             balances[addresses[j]] += _value;\n', '             emit Transfer(Owner, addresses[j], _value);\n', '         }\n', '    }\n', '\n', '    /*\n', '        Returns the amount of tokens allowed by the owner that can be transferred\n', '    */\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    \n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '}']
