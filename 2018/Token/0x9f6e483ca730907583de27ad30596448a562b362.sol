['pragma solidity ^0.4.21;\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '    address internal newOwner;\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    event updateOwner(address _oldOwner, address _newOwner);\n', '      ///change the owner\n', '    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\n', '        require(owner != _newOwner);\n', '        newOwner = _newOwner;\n', '        return true;\n', '    }\n', '    \n', '    /// accept the ownership\n', '    function acceptNewOwner() public returns(bool) {\n', '        require(msg.sender == newOwner);\n', '        emit updateOwner(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '\n', '    uint256  internal _totalSupply;\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    function totalSupply() constant public returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract Controlled is Owned {\n', '    using SafeMath for uint;\n', '    uint256 oneMonth = 3600 * 24 * 30; //2592000\n', '\n', '    uint256 public releaseStartTime = 1527910441;  //20180602 11:35 default  date +%s\n', '    bool  public emergencyStop = false;\n', '    uint256 internal _lockValue;\n', '    \n', '    event reportCalc(address _user,uint transferValue,uint256 releaseValue);\n', '    struct userToken {\n', '        uint256 OCE;\n', '        uint256 addrLockType;\n', '    }\n', '    mapping (address => userToken) userReleaseToken;\n', '\n', '    modifier canTransfer {\n', '        require(emergencyStop == false);\n', '        _;\n', '    }\n', '\n', '    function setTransferOCE(bool _bool) public onlyOwner{\n', '        emergencyStop = !_bool;\n', '    }\n', '\n', '\n', '    function setRealseTime(uint256 _time) public onlyOwner {\n', '        releaseStartTime = _time;\n', '    }\n', '\n', '    modifier releaseTokenValid(address _user, uint256 _value) {\n', '        uint256 _lockTypeIndex = userReleaseToken[_user].addrLockType;\n', '        if(_lockTypeIndex != 0) {\n', '            uint256 lockValue = userReleaseToken[_user].OCE.sub(calcReleaseToken(_user));\n', '            emit reportCalc(_user,_value,lockValue);\n', '            require (_value >= lockValue);\n', '        }\n', '        _;\n', '    }\n', '\n', '    function getLockBalance(address _user) constant public returns (uint256)\n', '    {\n', '        _lockValue = 0;\n', '        uint256 _lockTypeIndex = userReleaseToken[_user].addrLockType;\n', '        if(_lockTypeIndex != 0) {\n', '            _lockValue = userReleaseToken[_user].OCE.sub(calcReleaseToken(_user));\n', '            emit reportCalc(_user,_lockTypeIndex,_lockValue);\n', '        }\n', '        return _lockValue;\n', '    }\n', '\n', '    function calcReleaseToken(address _user) internal view returns (uint256) {\n', '        uint256 _lockTypeIndex = userReleaseToken[_user].addrLockType;\n', '        uint256 _timeDifference = now.sub(releaseStartTime);\n', '        uint256 _whichPeriod = getPeriod(_lockTypeIndex, _timeDifference);\n', '\n', '        // lock type 1, 75% lock 3 months\n', '        // lock type 2, 90% lock 6 months\n', '        // lock type 3, 75% lock 3 years remove it\n', '\n', '        if(_lockTypeIndex == 1) {\n', '            return (percent(userReleaseToken[_user].OCE, 25).add( percent(userReleaseToken[_user].OCE, _whichPeriod.mul(25))));\n', '        }\n', '        if(_lockTypeIndex == 2) {\n', '            return (percent(userReleaseToken[_user].OCE, 10).add(percent(userReleaseToken[_user].OCE, _whichPeriod.mul(25))));\n', '        }\n', '        if(_lockTypeIndex == 3) {\n', '            return (percent(userReleaseToken[_user].OCE, 25).add(percent(userReleaseToken[_user].OCE, _whichPeriod.mul(15))));\n', '        }\n', '        revert();\n', '    }\n', '\n', '\n', '    function getPeriod(uint256 _lockTypeIndex, uint256 _timeDifference) internal view returns (uint256) {        \n', '\n', '        if(_lockTypeIndex == 1) {           //The lock for medium investment\n', '            uint256 _period2 = _timeDifference.div(oneMonth);\n', '            if(_period2 >= 3){\n', '                _period2 = 3;\n', '            }\n', '            return _period2;\n', '        }\n', '        if(_lockTypeIndex == 2) {           //The lock for massive investment\n', '            uint256 _period3 = _timeDifference.div(oneMonth);\n', '            if(_period3 >= 6){\n', '                _period3 = 6;\n', '            }\n', '            return _period3;\n', '        }\n', '        if(_lockTypeIndex == 3) {           //The lock for the usechain coreTeamSupply\n', '            uint256 _period1 = (_timeDifference.div(oneMonth)).div(12);\n', '            if(_period1 >= 3){\n', '                _period1 = 3;\n', '            }\n', '            return _period1;\n', '        }\n', '        revert();\n', '    }\n', '\n', '    function percent(uint _token, uint _percentage) internal pure returns (uint) {\n', '        return _percentage.mul(_token).div(100);\n', '    }\n', '\n', '}\n', '\n', 'contract standardToken is ERC20Token, Controlled {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function totalSupply() constant public returns (uint256 ){\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value)\n', '        public\n', '        canTransfer\n', '        releaseTokenValid(msg.sender, balances[msg.sender].sub(_value))\n', '        returns (bool)\n', '    {\n', '        require (balances[msg.sender] >= _value);           // Throw if sender has insufficient balance\n', '        require(_to != address(0));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);                     // Deduct senders balance\n', '        balances[_to] = balances[_to].add(_value);                            // Add recivers balance\n', '        emit Transfer(msg.sender, _to, _value);             // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;          // Set allowance\n', '        emit Approval(msg.sender, _spender, _value);             // Raise Approval event\n', '        return true;\n', '    }\n', '\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        approve(_spender, _value);                          // Set approval to contract for _value\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { \n', '            revert();\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        canTransfer\n', '        releaseTokenValid(msg.sender, balances[msg.sender].sub(_value))\n', '        returns (bool success)\n', '   {\n', '        require(_to != address(0));\n', '        require (_value <= balances[_from]);                // Throw if sender does not have enough balance\n', '        require (_value <= allowed[_from][msg.sender]);  // Throw if you do not have allowance\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);                       // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract LTE is Owned, standardToken {\n', '\n', '    string constant public name   = "LTEChainToken";\n', '    string constant public symbol = "LTE";\n', '    uint constant public decimals = 18;\n', '\n', '    mapping(address => uint256) public ethBalances;\n', '    uint256 public ethCrowdsale = 0;\n', '    uint256 public rate = 1;\n', '    bool public crowdsaleClosed = false;\n', '\n', '    uint256 constant public topTotalSupply = 1 * 10**9 * 10**decimals;\n', '\n', '    event fallbackTrigged(address addr,uint256 amount);\n', '\n', '    function() payable {//decimals same as eth decimals\n', '        require(!crowdsaleClosed);\n', '        uint ethAmount = msg.value;\n', '        ethBalances[msg.sender] = ethBalances[msg.sender].add(ethAmount);\n', '        ethCrowdsale = ethCrowdsale.add(ethAmount);\n', '        uint256 rewardAmount = ethAmount.mul(rate);\n', '        require (_totalSupply.add(rewardAmount)<=topTotalSupply);\n', '        _totalSupply = _totalSupply.add(rewardAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(rewardAmount);\n', '        emit fallbackTrigged(msg.sender,rewardAmount);\n', '    }\n', '\n', '    function setCrowdsaleClosed(bool _bool) public onlyOwner {\n', '        crowdsaleClosed = _bool;\n', '    }\n', '\n', '    function setRate(uint256 _value) public onlyOwner {\n', '        rate = _value;\n', '    }\n', '\n', '    function getBalance() constant onlyOwner returns(uint){\n', '        return this.balance;\n', '    }\n', '\n', '    event SendEvent(address to, uint256 value, bool result);\n', '    \n', '    function sendEther(address addr,uint256 _value) public onlyOwner {\n', '        bool result = false;\n', '        require (_value < this.balance);     \n', '        result = addr.send(_value);\n', '        emit SendEvent(addr, _value, result);\n', '    }\n', '\n', '    function kill(address _addr) public onlyOwner {\n', '        selfdestruct(_addr);\n', '    }\n', '\n', '    function allocateToken(address[] _owners, uint256[] _values, uint256[] _addrLockType) public onlyOwner {\n', '        require ((_owners.length == _values.length) && ( _values.length == _addrLockType.length));\n', '\n', '        for(uint i = 0; i < _owners.length ; i++){\n', '            uint256 value = _values[i] * 10**decimals ;\n', '            require (_totalSupply.add(value)<=topTotalSupply);\n', '            _totalSupply = _totalSupply.add(value);\n', '            balances[_owners[i]] = balances[_owners[i]].add(value);             // Set minted coins to target\n', '            emit Transfer(0x0, _owners[i], value);\n', '            userReleaseToken[_owners[i]].OCE = userReleaseToken[_owners[i]].OCE.add(value);\n', '            userReleaseToken[_owners[i]].addrLockType = _addrLockType[i];\n', '        }\n', '    }\n', '\n', '\n', '    function allocateCandyToken(address[] _owners, uint256[] _values) public onlyOwner {\n', '        require (_owners.length == _values.length);\n', '        for(uint i = 0; i < _owners.length ; i++){\n', '            uint256 value = _values[i]* 10**decimals;\n', '            require (_totalSupply.add(value)<=topTotalSupply);\n', '            _totalSupply = _totalSupply.add(value);\n', '            balances[_owners[i]] = balances[_owners[i]].add(value);\n', '            emit Transfer(0x0, _owners[i], value);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '    address internal newOwner;\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    event updateOwner(address _oldOwner, address _newOwner);\n', '      ///change the owner\n', '    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\n', '        require(owner != _newOwner);\n', '        newOwner = _newOwner;\n', '        return true;\n', '    }\n', '    \n', '    /// accept the ownership\n', '    function acceptNewOwner() public returns(bool) {\n', '        require(msg.sender == newOwner);\n', '        emit updateOwner(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '\n', '    uint256  internal _totalSupply;\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    function totalSupply() constant public returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract Controlled is Owned {\n', '    using SafeMath for uint;\n', '    uint256 oneMonth = 3600 * 24 * 30; //2592000\n', '\n', '    uint256 public releaseStartTime = 1527910441;  //20180602 11:35 default  date +%s\n', '    bool  public emergencyStop = false;\n', '    uint256 internal _lockValue;\n', '    \n', '    event reportCalc(address _user,uint transferValue,uint256 releaseValue);\n', '    struct userToken {\n', '        uint256 OCE;\n', '        uint256 addrLockType;\n', '    }\n', '    mapping (address => userToken) userReleaseToken;\n', '\n', '    modifier canTransfer {\n', '        require(emergencyStop == false);\n', '        _;\n', '    }\n', '\n', '    function setTransferOCE(bool _bool) public onlyOwner{\n', '        emergencyStop = !_bool;\n', '    }\n', '\n', '\n', '    function setRealseTime(uint256 _time) public onlyOwner {\n', '        releaseStartTime = _time;\n', '    }\n', '\n', '    modifier releaseTokenValid(address _user, uint256 _value) {\n', '        uint256 _lockTypeIndex = userReleaseToken[_user].addrLockType;\n', '        if(_lockTypeIndex != 0) {\n', '            uint256 lockValue = userReleaseToken[_user].OCE.sub(calcReleaseToken(_user));\n', '            emit reportCalc(_user,_value,lockValue);\n', '            require (_value >= lockValue);\n', '        }\n', '        _;\n', '    }\n', '\n', '    function getLockBalance(address _user) constant public returns (uint256)\n', '    {\n', '        _lockValue = 0;\n', '        uint256 _lockTypeIndex = userReleaseToken[_user].addrLockType;\n', '        if(_lockTypeIndex != 0) {\n', '            _lockValue = userReleaseToken[_user].OCE.sub(calcReleaseToken(_user));\n', '            emit reportCalc(_user,_lockTypeIndex,_lockValue);\n', '        }\n', '        return _lockValue;\n', '    }\n', '\n', '    function calcReleaseToken(address _user) internal view returns (uint256) {\n', '        uint256 _lockTypeIndex = userReleaseToken[_user].addrLockType;\n', '        uint256 _timeDifference = now.sub(releaseStartTime);\n', '        uint256 _whichPeriod = getPeriod(_lockTypeIndex, _timeDifference);\n', '\n', '        // lock type 1, 75% lock 3 months\n', '        // lock type 2, 90% lock 6 months\n', '        // lock type 3, 75% lock 3 years remove it\n', '\n', '        if(_lockTypeIndex == 1) {\n', '            return (percent(userReleaseToken[_user].OCE, 25).add( percent(userReleaseToken[_user].OCE, _whichPeriod.mul(25))));\n', '        }\n', '        if(_lockTypeIndex == 2) {\n', '            return (percent(userReleaseToken[_user].OCE, 10).add(percent(userReleaseToken[_user].OCE, _whichPeriod.mul(25))));\n', '        }\n', '        if(_lockTypeIndex == 3) {\n', '            return (percent(userReleaseToken[_user].OCE, 25).add(percent(userReleaseToken[_user].OCE, _whichPeriod.mul(15))));\n', '        }\n', '        revert();\n', '    }\n', '\n', '\n', '    function getPeriod(uint256 _lockTypeIndex, uint256 _timeDifference) internal view returns (uint256) {        \n', '\n', '        if(_lockTypeIndex == 1) {           //The lock for medium investment\n', '            uint256 _period2 = _timeDifference.div(oneMonth);\n', '            if(_period2 >= 3){\n', '                _period2 = 3;\n', '            }\n', '            return _period2;\n', '        }\n', '        if(_lockTypeIndex == 2) {           //The lock for massive investment\n', '            uint256 _period3 = _timeDifference.div(oneMonth);\n', '            if(_period3 >= 6){\n', '                _period3 = 6;\n', '            }\n', '            return _period3;\n', '        }\n', '        if(_lockTypeIndex == 3) {           //The lock for the usechain coreTeamSupply\n', '            uint256 _period1 = (_timeDifference.div(oneMonth)).div(12);\n', '            if(_period1 >= 3){\n', '                _period1 = 3;\n', '            }\n', '            return _period1;\n', '        }\n', '        revert();\n', '    }\n', '\n', '    function percent(uint _token, uint _percentage) internal pure returns (uint) {\n', '        return _percentage.mul(_token).div(100);\n', '    }\n', '\n', '}\n', '\n', 'contract standardToken is ERC20Token, Controlled {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function totalSupply() constant public returns (uint256 ){\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value)\n', '        public\n', '        canTransfer\n', '        releaseTokenValid(msg.sender, balances[msg.sender].sub(_value))\n', '        returns (bool)\n', '    {\n', '        require (balances[msg.sender] >= _value);           // Throw if sender has insufficient balance\n', '        require(_to != address(0));\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);                     // Deduct senders balance\n', '        balances[_to] = balances[_to].add(_value);                            // Add recivers balance\n', '        emit Transfer(msg.sender, _to, _value);             // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;          // Set allowance\n', '        emit Approval(msg.sender, _spender, _value);             // Raise Approval event\n', '        return true;\n', '    }\n', '\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        approve(_spender, _value);                          // Set approval to contract for _value\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { \n', '            revert();\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        canTransfer\n', '        releaseTokenValid(msg.sender, balances[msg.sender].sub(_value))\n', '        returns (bool success)\n', '   {\n', '        require(_to != address(0));\n', '        require (_value <= balances[_from]);                // Throw if sender does not have enough balance\n', '        require (_value <= allowed[_from][msg.sender]);  // Throw if you do not have allowance\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);                       // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract LTE is Owned, standardToken {\n', '\n', '    string constant public name   = "LTEChainToken";\n', '    string constant public symbol = "LTE";\n', '    uint constant public decimals = 18;\n', '\n', '    mapping(address => uint256) public ethBalances;\n', '    uint256 public ethCrowdsale = 0;\n', '    uint256 public rate = 1;\n', '    bool public crowdsaleClosed = false;\n', '\n', '    uint256 constant public topTotalSupply = 1 * 10**9 * 10**decimals;\n', '\n', '    event fallbackTrigged(address addr,uint256 amount);\n', '\n', '    function() payable {//decimals same as eth decimals\n', '        require(!crowdsaleClosed);\n', '        uint ethAmount = msg.value;\n', '        ethBalances[msg.sender] = ethBalances[msg.sender].add(ethAmount);\n', '        ethCrowdsale = ethCrowdsale.add(ethAmount);\n', '        uint256 rewardAmount = ethAmount.mul(rate);\n', '        require (_totalSupply.add(rewardAmount)<=topTotalSupply);\n', '        _totalSupply = _totalSupply.add(rewardAmount);\n', '        balances[msg.sender] = balances[msg.sender].add(rewardAmount);\n', '        emit fallbackTrigged(msg.sender,rewardAmount);\n', '    }\n', '\n', '    function setCrowdsaleClosed(bool _bool) public onlyOwner {\n', '        crowdsaleClosed = _bool;\n', '    }\n', '\n', '    function setRate(uint256 _value) public onlyOwner {\n', '        rate = _value;\n', '    }\n', '\n', '    function getBalance() constant onlyOwner returns(uint){\n', '        return this.balance;\n', '    }\n', '\n', '    event SendEvent(address to, uint256 value, bool result);\n', '    \n', '    function sendEther(address addr,uint256 _value) public onlyOwner {\n', '        bool result = false;\n', '        require (_value < this.balance);     \n', '        result = addr.send(_value);\n', '        emit SendEvent(addr, _value, result);\n', '    }\n', '\n', '    function kill(address _addr) public onlyOwner {\n', '        selfdestruct(_addr);\n', '    }\n', '\n', '    function allocateToken(address[] _owners, uint256[] _values, uint256[] _addrLockType) public onlyOwner {\n', '        require ((_owners.length == _values.length) && ( _values.length == _addrLockType.length));\n', '\n', '        for(uint i = 0; i < _owners.length ; i++){\n', '            uint256 value = _values[i] * 10**decimals ;\n', '            require (_totalSupply.add(value)<=topTotalSupply);\n', '            _totalSupply = _totalSupply.add(value);\n', '            balances[_owners[i]] = balances[_owners[i]].add(value);             // Set minted coins to target\n', '            emit Transfer(0x0, _owners[i], value);\n', '            userReleaseToken[_owners[i]].OCE = userReleaseToken[_owners[i]].OCE.add(value);\n', '            userReleaseToken[_owners[i]].addrLockType = _addrLockType[i];\n', '        }\n', '    }\n', '\n', '\n', '    function allocateCandyToken(address[] _owners, uint256[] _values) public onlyOwner {\n', '        require (_owners.length == _values.length);\n', '        for(uint i = 0; i < _owners.length ; i++){\n', '            uint256 value = _values[i]* 10**decimals;\n', '            require (_totalSupply.add(value)<=topTotalSupply);\n', '            _totalSupply = _totalSupply.add(value);\n', '            balances[_owners[i]] = balances[_owners[i]].add(value);\n', '            emit Transfer(0x0, _owners[i], value);\n', '        }\n', '    }\n', '}']
