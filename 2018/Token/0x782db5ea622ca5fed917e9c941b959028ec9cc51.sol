['pragma solidity ^0.4.16;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256  _value);\n', '}\n', '\n', '\n', 'contract TPOMZ is ERC20 {\n', '\n', '\tusing SafeMath for uint256;                                        // Use safe math library\n', '\n', '    mapping (address => uint256) balances;                             // Balances table\n', '    mapping (address => mapping (address => uint256)) allowed;         // Allowance table\n', '\n', '    uint public constant decimals = 8;                                 // Decimals count\n', '    uint256 public totalSupply = 5000000000 * 10 ** decimals;          // Total supply\n', '\tstring public constant name = "TPOMZ";                             // Coin name\n', '    string public constant symbol = "TPOMZ";                           // Coin symbol\n', '\n', '\tfunction TPOMZ() {                                                 // Constructor\n', '\t\tbalances[msg.sender] = totalSupply;                            // Give the creator all initial tokens\n', '\t}\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '\t    return balances[_owner];                                        // Return tokens count from balance table by address\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {             // Check if the sender has enough\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);    // Safe decrease sender balance\n', '            balances[_to] = balances[_to].add(_value);                  // Safe increase recipient balance\n', '            Transfer(msg.sender, _to, _value);                          // Emit transfer event\n', '            return true;\n', '        } else {\n', '            return false;\n', '         }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value &&                                // Check if the from has enough\n', '            allowed[_from][msg.sender] >= _value && _value > 0) {       // Check allowance table row\n', '\t\t\tbalances[_from] = balances[_from].sub(_value);              // Safe decrease from balance\n', '\t\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // Safe decrease allowance\n', '\t\t\tbalances[_to] = balances[_to].add(_value);                  // Safe increase recipient balance\n', '            Transfer(_from, _to, _value);                               // Emit transfer event\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;                         // Update allowed\n', '        Approval(msg.sender, _spender, _value);                         // Emit approval event\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];                                 // Check allowed\n', '    }\n', '\n', '\tfunction () {\n', '        revert();                                                       // If ether is sent to this address, send it back.\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256  _value);\n', '}\n', '\n', '\n', 'contract TPOMZ is ERC20 {\n', '\n', '\tusing SafeMath for uint256;                                        // Use safe math library\n', '\n', '    mapping (address => uint256) balances;                             // Balances table\n', '    mapping (address => mapping (address => uint256)) allowed;         // Allowance table\n', '\n', '    uint public constant decimals = 8;                                 // Decimals count\n', '    uint256 public totalSupply = 5000000000 * 10 ** decimals;          // Total supply\n', '\tstring public constant name = "TPOMZ";                             // Coin name\n', '    string public constant symbol = "TPOMZ";                           // Coin symbol\n', '\n', '\tfunction TPOMZ() {                                                 // Constructor\n', '\t\tbalances[msg.sender] = totalSupply;                            // Give the creator all initial tokens\n', '\t}\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '\t    return balances[_owner];                                        // Return tokens count from balance table by address\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {             // Check if the sender has enough\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);    // Safe decrease sender balance\n', '            balances[_to] = balances[_to].add(_value);                  // Safe increase recipient balance\n', '            Transfer(msg.sender, _to, _value);                          // Emit transfer event\n', '            return true;\n', '        } else {\n', '            return false;\n', '         }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value &&                                // Check if the from has enough\n', '            allowed[_from][msg.sender] >= _value && _value > 0) {       // Check allowance table row\n', '\t\t\tbalances[_from] = balances[_from].sub(_value);              // Safe decrease from balance\n', '\t\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // Safe decrease allowance\n', '\t\t\tbalances[_to] = balances[_to].add(_value);                  // Safe increase recipient balance\n', '            Transfer(_from, _to, _value);                               // Emit transfer event\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;                         // Update allowed\n', '        Approval(msg.sender, _spender, _value);                         // Emit approval event\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];                                 // Check allowed\n', '    }\n', '\n', '\tfunction () {\n', '        revert();                                                       // If ether is sent to this address, send it back.\n', '    }\n', '\n', '}']
