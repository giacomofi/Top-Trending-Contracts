['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * iron Bank Network\n', ' * https://www.ironbank.network\n', ' * Based on Open Zeppelin - https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', '\n', '/*\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * \n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title PoolParty Token\n', ' * @author Alber Erre\n', ' * @notice Follow up token holders to give them collected fees in the future. Holders are stored in "HOLDersList"\n', ' * @dev This is the first part of the functionality, this contract just enable tracking token holders\n', ' * @dev Next part is defined as "PoolPartyPayRoll" contract\n', ' */\n', 'contract PoolPartyToken is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  struct HOLDers {\n', '    address HOLDersAddress;\n', '  }\n', '\n', '  HOLDers[] public HOLDersList;\n', '\n', '  function _alreadyInList(address _thisHODLer) internal view returns(bool HolderinList) {\n', '\n', '    bool result = false;\n', '    for (uint256 r = 0; r < HOLDersList.length; r++) {\n', '      if (HOLDersList[r].HOLDersAddress == _thisHODLer) {\n', '        result = true;\n', '        break;\n', '      }\n', '    }\n', '    return result;\n', '  }\n', '\n', '  // Call AddHOLDer function every time a token is sold, "_alreadyInList" avoids duplicates\n', '  function AddHOLDer(address _thisHODLer) internal {\n', '\n', '    if (_alreadyInList(_thisHODLer) == false) {\n', '      HOLDersList.push(HOLDers(_thisHODLer));\n', '    }\n', '  }\n', '\n', '  function UpdateHOLDer(address _currentHODLer, address _newHODLer) internal {\n', '\n', '    for (uint256 r = 0; r < HOLDersList.length; r++){\n', '      // Send individual token holder payroll\n', '      if (HOLDersList[r].HOLDersAddress == _currentHODLer) {\n', '        // write new holders address\n', '        HOLDersList[r].HOLDersAddress = _newHODLer;\n', '      }\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is PoolPartyToken, ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * OpenBarrier modifier by Alber Erre\n', '  * @notice security trigger in case something fails during minting, token sale or Airdrop\n', '  */\n', '  bool public transferEnabled;    //allows contract to lock transfers in case of emergency\n', '\n', '  modifier openBarrier() {\n', '      require(transferEnabled || msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) openBarrier public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '\n', '    // update HODLer address, for iron profit distribution to iron holders - PoolParty\n', '    UpdateHOLDer(msg.sender, _to);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title PoolParty PayRoll\n', ' * @author Alber Erre\n', ' * @notice This enables fees distribution (Money!) among token holders\n', ' * @dev This is the second part of the PoolParty functionality, this contract allow us to distributed the fees collected...\n', ' * @dev ...between token holders, if you hold you get paid, that is the idea.\n', ' */\n', 'contract PoolPartyPayRoll is BasicToken {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) PayRollCount;\n', '\n', '  // Manually spread iron profits to token holders\n', '  function _HOLDersPayRoll() onlyOwner public {\n', '\n', '    uint256 _amountToPay = address(this).balance;\n', '    uint256 individualPayRoll = _amountToPay.div(uint256(HOLDersList.length));\n', '\n', '    for (uint256 r = 0; r < HOLDersList.length; r++){\n', '      // Send individual token holder payroll\n', '      address HODLer = HOLDersList[r].HOLDersAddress;\n', '      HODLer.transfer(individualPayRoll);\n', '      // Add counter, to check how many times an address has been paid (the higher the most time this address has HODL)\n', '      PayRollCount[HOLDersList[r].HOLDersAddress] = PayRollCount[HOLDersList[r].HOLDersAddress].add(1);\n', '    }\n', '  }\n', '\n', '  function PayRollHistory(address _thisHODLer) external view returns (uint256) {\n', '\n', '    return uint256(PayRollCount[_thisHODLer]);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is PoolPartyPayRoll, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) openBarrier public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '\n', '    // update HODLer address, for iron profit distribution to iron holders - PoolParty\n', '    UpdateHOLDer(msg.sender, _to);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint external returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    // Add holder for future iron profits distribution - PoolParty\n', '    AddHOLDer(_to);\n', '\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint external returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens. - updated to "recoverERC20Token_SendbyMistake"\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param missing_token ERC20Basic The address of the token contract (missing_token)\n', '   */\n', '  function recoverERC20Token_SendbyMistake(ERC20Basic missing_token) external onlyOwner {\n', '    uint256 balance = missing_token.balanceOf(this);\n', '    missing_token.safeTransfer(owner, balance);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="89fbece4eae6c9bb">[email&#160;protected]</a>π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be send to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', '*/\n', 'contract HasEther is Ownable {\n', '\n', '  /**\n', '   * @dev allows direct send by settings a default function with the `payable` flag.\n', '   */\n', '  function() public payable {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function recoverETH_SendbyMistake() external onlyOwner {\n', '    // solium-disable-next-line security/no-send\n', '    assert(owner.send(address(this).balance));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Contracts\n', ' * @notice updated to "reclaimChildOwnership", ease to remember function&#39;s nature @AlberEre\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7002151d131f3042">[email&#160;protected]</a>π.com>\n', ' * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n', ' * of this contract to reclaim ownership of the contracts.\n', ' */\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimChildOwnership(address contractAddr) public onlyOwner {\n', '    Ownable contractInst = Ownable(contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title iron Token Contract\n', ' * @notice "openBarrier" modifier applied, security check during minting process\n', ' */\n', 'contract IRONtoken is MintableToken, CanReclaimToken, HasEther, HasNoContracts {\n', '\n', '  string public constant name = "iron Bank Network token"; // solium-disable-line uppercase\n', '  string public constant symbol = "IRON"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '  function IRONtoken() public {\n', '  }\n', '\n', '  function setBarrierAsOpen(bool enable) onlyOwner public {\n', '      // bool(false) during token sale, bool(true) once token sale is finished\n', '      transferEnabled = enable;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title iron Token Sale\n', ' */\n', 'contract IRONtokenSale is PoolPartyToken, CanReclaimToken, HasNoContracts {\n', '    using SafeMath for uint256;\n', '\n', '    IRONtoken public token;\n', '\n', '    struct Round {\n', '        uint256 start;          //Timestamp of token sale start (this stage)\n', '        uint256 end;            //Timestamp of token sale end (this stage)\n', '        uint256 rate;           //How much IRON you will receive per 1 ETH within this stage\n', '    }\n', '\n', '    Round[] public rounds;          //Array of token sale stages\n', '    uint256 public hardCap;         //Max amount of tokens to mint\n', '    uint256 public tokensMinted;    //Amount of tokens already minted\n', '    bool public finalized;          //token sale is finalized\n', '\n', '    function IRONtokenSale (uint256 _hardCap, uint256 _initMinted) public {\n', '\n', '      token = new IRONtoken();\n', '      token.setBarrierAsOpen(false);\n', '      tokensMinted = token.totalSupply();\n', '      require(_hardCap > 0);\n', '      hardCap = _hardCap;\n', '      mintTokens(msg.sender, _initMinted);\n', '    }\n', '\n', '    function addRound(uint256 StartTimeStamp, uint256 EndTimeStamp, uint256 Rate) onlyOwner public {\n', '      rounds.push(Round(StartTimeStamp, EndTimeStamp, Rate));\n', '    }\n', '\n', '    /**\n', '    * @notice Mint tokens for Airdrops (only external) by Alber Erre\n', '    */\n', '    function saleAirdrop(address beneficiary, uint256 amount) onlyOwner external {\n', '        mintTokens(beneficiary, amount);\n', '    }\n', '    \n', '    /**\n', '    * @notice Mint tokens for multiple addresses for Airdrops (only external) - Alber Erre\n', '    */\n', '    function MultiplesaleAirdrop(address[] beneficiaries, uint256[] amounts) onlyOwner external {\n', '      for (uint256 r=0; r<beneficiaries.length; r++){\n', '        mintTokens(address(beneficiaries[r]), uint256(amounts[r]));\n', '      }\n', '    }\n', '    \n', '    /**\n', '    * @notice Shows if crowdsale is running\n', '    */ \n', '    function ironTokensaleRunning() view public returns(bool){\n', '        return (!finalized && (tokensMinted < hardCap));\n', '    }\n', '\n', '    function currentTime() view public returns(uint256) {\n', '      return uint256(block.timestamp);\n', '    }\n', '\n', '    /**\n', '    * @notice Return current round according to current time\n', '    */ \n', '    function RoundIndex() internal returns(uint256) {\n', '      uint256 index = 0;\n', '      for (uint256 r=0; r<rounds.length; r++){\n', '        if ( (rounds[r].start < uint256(block.timestamp)) && (uint256(block.timestamp) < rounds[r].end) ) {\n', '          index = r.add(1);\n', '        }\n', '      }\n', '      return index;\n', '    }\n', '\n', '    function currentRound() view public returns(uint256) {\n', '      return RoundIndex();\n', '    }\n', '\n', '    function currentRate() view public returns(uint256) {\n', '        uint256 thisRound = RoundIndex();\n', '        if (thisRound != 0) {\n', '            return uint256(rounds[thisRound.sub(1)].rate);\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function _magic(uint256 _weiAmount) internal view returns (uint256) {\n', '      uint256 tokenRate = currentRate();\n', '      require(tokenRate > 0);\n', '      uint256 preTransformweiAmount = tokenRate.mul(_weiAmount);\n', '      uint256 transform = 10**18;\n', '      uint256 TransformedweiAmount = preTransformweiAmount.div(transform);\n', '      return TransformedweiAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function () external payable {\n', '      require(msg.value > 0);\n', '      require(ironTokensaleRunning());\n', '      uint256 weiAmount = msg.value;\n', '      uint256 tokens = _magic(weiAmount);\n', '      JustForward(msg.value);\n', '      mintTokens(msg.sender, tokens);\n', '    }\n', '\n', '    /**\n', '    * @notice mint tokens and apply PoolParty method (Alber Erre)\n', '    * @dev Helper function to mint tokens and increase tokensMinted counter\n', '    */\n', '    function mintTokens(address beneficiary, uint256 amount) internal {\n', '        tokensMinted = tokensMinted.add(amount);       \n', '\n', '        require(tokensMinted <= hardCap);\n', '        assert(token.mint(beneficiary, amount));\n', '\n', '        // Add holder for future iron profits distribution\n', '        AddHOLDer(beneficiary);\n', '    }\n', '\n', '    function JustForward(uint256 weiAmount) internal {\n', '      owner.transfer(weiAmount);\n', '    }\n', '\n', '    function forwardCollectedEther() onlyOwner public {\n', '        if(address(this).balance > 0){\n', '            owner.transfer(address(this).balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice ICO End: "openBarrier" no longer applied, allows token transfers\n', '    */\n', '    function finalizeTokensale() onlyOwner public {\n', '        finalized = true;\n', '        assert(token.finishMinting());\n', '        token.setBarrierAsOpen(true);\n', '        token.transferOwnership(owner);\n', '        forwardCollectedEther();\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * iron Bank Network\n', ' * https://www.ironbank.network\n', ' * Based on Open Zeppelin - https://github.com/OpenZeppelin/zeppelin-solidity\n', ' */\n', '\n', '/*\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * \n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title PoolParty Token\n', ' * @author Alber Erre\n', ' * @notice Follow up token holders to give them collected fees in the future. Holders are stored in "HOLDersList"\n', ' * @dev This is the first part of the functionality, this contract just enable tracking token holders\n', ' * @dev Next part is defined as "PoolPartyPayRoll" contract\n', ' */\n', 'contract PoolPartyToken is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  struct HOLDers {\n', '    address HOLDersAddress;\n', '  }\n', '\n', '  HOLDers[] public HOLDersList;\n', '\n', '  function _alreadyInList(address _thisHODLer) internal view returns(bool HolderinList) {\n', '\n', '    bool result = false;\n', '    for (uint256 r = 0; r < HOLDersList.length; r++) {\n', '      if (HOLDersList[r].HOLDersAddress == _thisHODLer) {\n', '        result = true;\n', '        break;\n', '      }\n', '    }\n', '    return result;\n', '  }\n', '\n', '  // Call AddHOLDer function every time a token is sold, "_alreadyInList" avoids duplicates\n', '  function AddHOLDer(address _thisHODLer) internal {\n', '\n', '    if (_alreadyInList(_thisHODLer) == false) {\n', '      HOLDersList.push(HOLDers(_thisHODLer));\n', '    }\n', '  }\n', '\n', '  function UpdateHOLDer(address _currentHODLer, address _newHODLer) internal {\n', '\n', '    for (uint256 r = 0; r < HOLDersList.length; r++){\n', '      // Send individual token holder payroll\n', '      if (HOLDersList[r].HOLDersAddress == _currentHODLer) {\n', '        // write new holders address\n', '        HOLDersList[r].HOLDersAddress = _newHODLer;\n', '      }\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is PoolPartyToken, ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * OpenBarrier modifier by Alber Erre\n', '  * @notice security trigger in case something fails during minting, token sale or Airdrop\n', '  */\n', '  bool public transferEnabled;    //allows contract to lock transfers in case of emergency\n', '\n', '  modifier openBarrier() {\n', '      require(transferEnabled || msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) openBarrier public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '\n', '    // update HODLer address, for iron profit distribution to iron holders - PoolParty\n', '    UpdateHOLDer(msg.sender, _to);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title PoolParty PayRoll\n', ' * @author Alber Erre\n', ' * @notice This enables fees distribution (Money!) among token holders\n', ' * @dev This is the second part of the PoolParty functionality, this contract allow us to distributed the fees collected...\n', ' * @dev ...between token holders, if you hold you get paid, that is the idea.\n', ' */\n', 'contract PoolPartyPayRoll is BasicToken {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) PayRollCount;\n', '\n', '  // Manually spread iron profits to token holders\n', '  function _HOLDersPayRoll() onlyOwner public {\n', '\n', '    uint256 _amountToPay = address(this).balance;\n', '    uint256 individualPayRoll = _amountToPay.div(uint256(HOLDersList.length));\n', '\n', '    for (uint256 r = 0; r < HOLDersList.length; r++){\n', '      // Send individual token holder payroll\n', '      address HODLer = HOLDersList[r].HOLDersAddress;\n', '      HODLer.transfer(individualPayRoll);\n', '      // Add counter, to check how many times an address has been paid (the higher the most time this address has HODL)\n', '      PayRollCount[HOLDersList[r].HOLDersAddress] = PayRollCount[HOLDersList[r].HOLDersAddress].add(1);\n', '    }\n', '  }\n', '\n', '  function PayRollHistory(address _thisHODLer) external view returns (uint256) {\n', '\n', '    return uint256(PayRollCount[_thisHODLer]);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is PoolPartyPayRoll, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) openBarrier public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '\n', '    // update HODLer address, for iron profit distribution to iron holders - PoolParty\n', '    UpdateHOLDer(msg.sender, _to);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint external returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    // Add holder for future iron profits distribution - PoolParty\n', '    AddHOLDer(_to);\n', '\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint external returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens. - updated to "recoverERC20Token_SendbyMistake"\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param missing_token ERC20Basic The address of the token contract (missing_token)\n', '   */\n', '  function recoverERC20Token_SendbyMistake(ERC20Basic missing_token) external onlyOwner {\n', '    uint256 balance = missing_token.balanceOf(this);\n', '    missing_token.safeTransfer(owner, balance);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be send to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', '*/\n', 'contract HasEther is Ownable {\n', '\n', '  /**\n', '   * @dev allows direct send by settings a default function with the `payable` flag.\n', '   */\n', '  function() public payable {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function recoverETH_SendbyMistake() external onlyOwner {\n', '    // solium-disable-next-line security/no-send\n', '    assert(owner.send(address(this).balance));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Contracts\n', ' * @notice updated to "reclaimChildOwnership", ease to remember function\'s nature @AlberEre\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n', ' * of this contract to reclaim ownership of the contracts.\n', ' */\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimChildOwnership(address contractAddr) public onlyOwner {\n', '    Ownable contractInst = Ownable(contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title iron Token Contract\n', ' * @notice "openBarrier" modifier applied, security check during minting process\n', ' */\n', 'contract IRONtoken is MintableToken, CanReclaimToken, HasEther, HasNoContracts {\n', '\n', '  string public constant name = "iron Bank Network token"; // solium-disable-line uppercase\n', '  string public constant symbol = "IRON"; // solium-disable-line uppercase\n', '  uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '  function IRONtoken() public {\n', '  }\n', '\n', '  function setBarrierAsOpen(bool enable) onlyOwner public {\n', '      // bool(false) during token sale, bool(true) once token sale is finished\n', '      transferEnabled = enable;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title iron Token Sale\n', ' */\n', 'contract IRONtokenSale is PoolPartyToken, CanReclaimToken, HasNoContracts {\n', '    using SafeMath for uint256;\n', '\n', '    IRONtoken public token;\n', '\n', '    struct Round {\n', '        uint256 start;          //Timestamp of token sale start (this stage)\n', '        uint256 end;            //Timestamp of token sale end (this stage)\n', '        uint256 rate;           //How much IRON you will receive per 1 ETH within this stage\n', '    }\n', '\n', '    Round[] public rounds;          //Array of token sale stages\n', '    uint256 public hardCap;         //Max amount of tokens to mint\n', '    uint256 public tokensMinted;    //Amount of tokens already minted\n', '    bool public finalized;          //token sale is finalized\n', '\n', '    function IRONtokenSale (uint256 _hardCap, uint256 _initMinted) public {\n', '\n', '      token = new IRONtoken();\n', '      token.setBarrierAsOpen(false);\n', '      tokensMinted = token.totalSupply();\n', '      require(_hardCap > 0);\n', '      hardCap = _hardCap;\n', '      mintTokens(msg.sender, _initMinted);\n', '    }\n', '\n', '    function addRound(uint256 StartTimeStamp, uint256 EndTimeStamp, uint256 Rate) onlyOwner public {\n', '      rounds.push(Round(StartTimeStamp, EndTimeStamp, Rate));\n', '    }\n', '\n', '    /**\n', '    * @notice Mint tokens for Airdrops (only external) by Alber Erre\n', '    */\n', '    function saleAirdrop(address beneficiary, uint256 amount) onlyOwner external {\n', '        mintTokens(beneficiary, amount);\n', '    }\n', '    \n', '    /**\n', '    * @notice Mint tokens for multiple addresses for Airdrops (only external) - Alber Erre\n', '    */\n', '    function MultiplesaleAirdrop(address[] beneficiaries, uint256[] amounts) onlyOwner external {\n', '      for (uint256 r=0; r<beneficiaries.length; r++){\n', '        mintTokens(address(beneficiaries[r]), uint256(amounts[r]));\n', '      }\n', '    }\n', '    \n', '    /**\n', '    * @notice Shows if crowdsale is running\n', '    */ \n', '    function ironTokensaleRunning() view public returns(bool){\n', '        return (!finalized && (tokensMinted < hardCap));\n', '    }\n', '\n', '    function currentTime() view public returns(uint256) {\n', '      return uint256(block.timestamp);\n', '    }\n', '\n', '    /**\n', '    * @notice Return current round according to current time\n', '    */ \n', '    function RoundIndex() internal returns(uint256) {\n', '      uint256 index = 0;\n', '      for (uint256 r=0; r<rounds.length; r++){\n', '        if ( (rounds[r].start < uint256(block.timestamp)) && (uint256(block.timestamp) < rounds[r].end) ) {\n', '          index = r.add(1);\n', '        }\n', '      }\n', '      return index;\n', '    }\n', '\n', '    function currentRound() view public returns(uint256) {\n', '      return RoundIndex();\n', '    }\n', '\n', '    function currentRate() view public returns(uint256) {\n', '        uint256 thisRound = RoundIndex();\n', '        if (thisRound != 0) {\n', '            return uint256(rounds[thisRound.sub(1)].rate);\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '    \n', '    function _magic(uint256 _weiAmount) internal view returns (uint256) {\n', '      uint256 tokenRate = currentRate();\n', '      require(tokenRate > 0);\n', '      uint256 preTransformweiAmount = tokenRate.mul(_weiAmount);\n', '      uint256 transform = 10**18;\n', '      uint256 TransformedweiAmount = preTransformweiAmount.div(transform);\n', '      return TransformedweiAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function () external payable {\n', '      require(msg.value > 0);\n', '      require(ironTokensaleRunning());\n', '      uint256 weiAmount = msg.value;\n', '      uint256 tokens = _magic(weiAmount);\n', '      JustForward(msg.value);\n', '      mintTokens(msg.sender, tokens);\n', '    }\n', '\n', '    /**\n', '    * @notice mint tokens and apply PoolParty method (Alber Erre)\n', '    * @dev Helper function to mint tokens and increase tokensMinted counter\n', '    */\n', '    function mintTokens(address beneficiary, uint256 amount) internal {\n', '        tokensMinted = tokensMinted.add(amount);       \n', '\n', '        require(tokensMinted <= hardCap);\n', '        assert(token.mint(beneficiary, amount));\n', '\n', '        // Add holder for future iron profits distribution\n', '        AddHOLDer(beneficiary);\n', '    }\n', '\n', '    function JustForward(uint256 weiAmount) internal {\n', '      owner.transfer(weiAmount);\n', '    }\n', '\n', '    function forwardCollectedEther() onlyOwner public {\n', '        if(address(this).balance > 0){\n', '            owner.transfer(address(this).balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice ICO End: "openBarrier" no longer applied, allows token transfers\n', '    */\n', '    function finalizeTokensale() onlyOwner public {\n', '        finalized = true;\n', '        assert(token.finishMinting());\n', '        token.setBarrierAsOpen(true);\n', '        token.transferOwnership(owner);\n', '        forwardCollectedEther();\n', '    }\n', '}']
