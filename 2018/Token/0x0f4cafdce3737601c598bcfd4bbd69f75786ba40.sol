['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Contactable is Ownable{\n', '\n', '    string public contactInformation;\n', '\n', '    /**\n', '     * @dev Allows the owner to set a string with their contact information.\n', '     * @param info The contact information to attach to the contract.\n', '     */\n', '    function setContactInformation(string info) onlyOwner public {\n', '         contactInformation = info;\n', '     }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MagnusCoin is StandardToken, Ownable, Contactable {\n', '    string public name = "Magnus Coin";\n', '    string public symbol = "MGS";\n', '    uint256 public constant decimals = 18;\n', '\n', '    mapping (address => bool) internal allowedOverrideAddresses;\n', '\n', '    bool public tokenActive = false;\n', '    \n', '    uint256 endtime = 1543575521;\n', '\n', '    modifier onlyIfTokenActiveOrOverride() {\n', '        // owner or any addresses listed in the overrides\n', '        // can perform token transfers while inactive\n', '        require(tokenActive || msg.sender == owner || allowedOverrideAddresses[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyIfTokenInactive() {\n', '        require(!tokenActive);\n', '        _;\n', '    }\n', '\n', '    modifier onlyIfValidAddress(address _to) {\n', "        // prevent 'invalid' addresses for transfer destinations\n", '        require(_to != 0x0);\n', "        // don't allow transferring to this contract's address\n", '        require(_to != address(this));\n', '        _;\n', '    }\n', '\n', '    event TokenActivated();\n', '    event TokenDeactivated();\n', '    \n', '\n', '    function MagnusCoin() public {\n', '\n', '        totalSupply = 118200000000000000000000000;\n', '        contactInformation = "Magnus Collective";\n', '        \n', '\n', '        // msg.sender == owner of the contract\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    /// @dev Same ERC20 behavior, but reverts if not yet active.\n', '    /// @param _spender address The address which will spend the funds.\n', '    /// @param _value uint256 The amount of tokens to be spent.\n', '    function approve(address _spender, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_spender) returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    /// @dev Same ERC20 behavior, but reverts if not yet active.\n', '    /// @param _to address The address to transfer to.\n', '    /// @param _value uint256 The amount to be transferred.\n', '    function transfer(address _to, uint256 _value) public onlyIfTokenActiveOrOverride onlyIfValidAddress(_to) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function ownerSetOverride(address _address, bool enable) external onlyOwner {\n', '        allowedOverrideAddresses[_address] = enable;\n', '    }\n', '    \n', '\n', '    function ownerRecoverTokens(address _address, uint256 _value) external onlyOwner {\n', '            require(_address != address(0));\n', '            require(now < endtime );\n', '            require(_value <= balances[_address]);\n', '            require(balances[_address].sub(_value) >=0);\n', '            balances[_address] = balances[_address].sub(_value);\n', '            balances[owner] = balances[owner].add(_value);\n', '            Transfer(_address, owner, _value);\n', '    }\n', '\n', '    function ownerSetVisible(string _name, string _symbol) external onlyOwner onlyIfTokenInactive {        \n', '\n', '        // By holding back on setting these, it prevents the token\n', '        // from being a duplicate in ERC token searches if the need to\n', '        // redeploy arises prior to the crowdsale starts.\n', '        // Mainly useful during testnet deployment/testing.\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function ownerActivateToken() external onlyOwner onlyIfTokenInactive {\n', '        require(bytes(symbol).length > 0);\n', '\n', '        tokenActive = true;\n', '        TokenActivated();\n', '    }\n', '\n', '    function ownerDeactivateToken() external onlyOwner onlyIfTokenActiveOrOverride {\n', '        require(bytes(symbol).length > 0);\n', '\n', '        tokenActive = false;\n', '        TokenDeactivated();\n', '    }\n', '    \n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract MagnusSale is Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    // this sale contract is creating the Magnus \n', '    MagnusCoin internal token;\n', '\n', '    // UNIX timestamp (UTC) based start and end, inclusive\n', '    uint256 public start;               /* UTC of timestamp that the sale will start based on the value passed in at the time of construction */\n', '    uint256 public end;                 /* UTC of computed time that the sale will end based on the hours passed in at time of construction */\n', '\n', '    uint256 public minFundingGoalWei;   /* we can set this to zero, but we might want to raise at least 20000 Ether */\n', '    uint256 public minContributionWei;  /* individual contribution min. we require at least a 0.1 Ether investment, for example. */\n', "    uint256 public maxContributionWei;  /* individual contribution max. probably don't want someone to buy more than 60000 Ether */\n", '\n', '    uint256 internal weiRaised;       /* total of all weiContributions */\n', '\n', '    uint256 public peggedETHUSD;    /* In whole dollars. $300 means use 300 */\n', '    uint256 public hardCap;         /* In wei. Example: 64,000 cap = 64,000,000,000,000,000,000,000 */\n', '    uint256 internal reservedTokens;  /* In wei. Example: 54 million tokens, use 54000000 with 18 more zeros. then it would be 54000000 * Math.pow(10,18) */\n', '    uint256 public baseRateInCents; /* $2.50 means use 250 */\n', '\n', '    mapping (address => uint256) public contributions;\n', '\n', '    uint256 internal fiatCurrencyRaisedInEquivalentWeiValue = 0; // value of wei raised outside this contract\n', '    uint256 public weiRaisedIncludingFiatCurrencyRaised;       /* total of all weiContributions inclduing external*/\n', '    bool internal isPresale;              /*  this will be false  */\n', '    bool public isRefunding = false;    \n', '\n', '\n', '    address internal multiFirstWallet=0x9B7eDe5f815551279417C383779f1E455765cD6E;\n', '    address internal multiSecondWallet=0x377Cc6d225cc49E450ee192d679950665Ae22e2C;\n', '    address internal multiThirdWallet=0xD0377e0dC9334124803E38CBf92eFdDB7A43caC8;\n', '\n', '\n', '\n', '    event ContributionReceived(address indexed buyer, bool presale, uint256 rate, uint256 value, uint256 tokens);\n', '    event PegETHUSD(uint256 pegETHUSD);\n', '    \n', '\n', '    function MagnusSale(\n', '    ) public {\n', '        \n', '        peggedETHUSD = 1210;\n', '        address _token=0x1a7CC52cA652Ac5df72A7fA4b131cB9312dD3423;\n', '        hardCap = 40000000000000000000000;\n', '        reservedTokens = 0;\n', '        isPresale = false;\n', '        minFundingGoalWei  = 1000000000000000000000;\n', '        minContributionWei = 300000000000000000;\n', '        maxContributionWei = 10000000000000000000000;\n', '        baseRateInCents = 42;\n', '        start = 1517144812;\n', '        uint256 _durationHours=4400;\n', '\n', '        token = MagnusCoin(_token);\n', '        \n', '        end = start.add(_durationHours.mul(1 hours));\n', '\n', '\n', '    }\n', '\n', '    \n', '\n', '    function() public payable whenNotPaused {\n', '        require(!isRefunding);\n', '        require(msg.sender != 0x0);\n', '        require(msg.value >= minContributionWei);\n', '        require(start <= now && end >= now);\n', '\n', '        // prevent anything more than maxContributionWei per contributor address\n', '        uint256 _weiContributionAllowed = maxContributionWei > 0 ? maxContributionWei.sub(contributions[msg.sender]) : msg.value;\n', '        if (maxContributionWei > 0) {\n', '            require(_weiContributionAllowed > 0);\n', '        }\n', '\n', '        // are limited by the number of tokens remaining\n', '        uint256 _tokensRemaining = token.balanceOf(address(this)).sub( reservedTokens );\n', '        require(_tokensRemaining > 0);\n', '\n', "        // limit contribution's value based on max/previous contributions\n", '        uint256 _weiContribution = msg.value;\n', '        if (_weiContribution > _weiContributionAllowed) {\n', '            _weiContribution = _weiContributionAllowed;\n', '        }\n', '\n', "        // limit contribution's value based on hard cap of hardCap\n", '        if (hardCap > 0 && weiRaised.add(_weiContribution) > hardCap) {\n', '            _weiContribution = hardCap.sub( weiRaised );\n', '        }\n', '\n', '        // calculate token amount to be created\n', '        uint256 _tokens = _weiContribution.mul(peggedETHUSD).mul(100).div(baseRateInCents);\n', '\n', '        if (_tokens > _tokensRemaining) {\n', "            // there aren't enough tokens to fill the contribution amount, so recalculate the contribution amount\n", '            _tokens = _tokensRemaining;\n', '            _weiContribution = _tokens.mul(baseRateInCents).div(100).div(peggedETHUSD);\n', '            \n', '        }\n', '\n', '        // add the contributed wei to any existing value for the sender\n', '        contributions[msg.sender] = contributions[msg.sender].add(_weiContribution);\n', '\n', '        ContributionReceived(msg.sender, isPresale, baseRateInCents, _weiContribution, _tokens);\n', '\n', '        require(token.transfer(msg.sender, _tokens));\n', '\n', '        weiRaised = weiRaised.add(_weiContribution); //total of all weiContributions\n', '        weiRaisedIncludingFiatCurrencyRaised = weiRaisedIncludingFiatCurrencyRaised.add(_weiContribution);\n', '\n', '\n', '    }\n', '\n', '\n', '    function pegETHUSD(uint256 _peggedETHUSD) onlyOwner public {\n', '        peggedETHUSD = _peggedETHUSD;\n', '        PegETHUSD(peggedETHUSD);\n', '    }\n', '\n', '    function setMinWeiAllowed( uint256 _minWeiAllowed ) onlyOwner public {\n', '        minContributionWei = _minWeiAllowed;\n', '    }\n', '\n', '    function setMaxWeiAllowed( uint256 _maxWeiAllowed ) onlyOwner public {\n', '        maxContributionWei = _maxWeiAllowed;\n', '    }\n', '\n', '\n', '    function setSoftCap( uint256 _softCap ) onlyOwner public {\n', '        minFundingGoalWei = _softCap;\n', '    }\n', '\n', '    function setHardCap( uint256 _hardCap ) onlyOwner public {\n', '        hardCap = _hardCap;\n', '    }\n', '\n', '    function peggedETHUSD() constant onlyOwner public returns(uint256) {\n', '        return peggedETHUSD;\n', '    }\n', '\n', '    function hardCapETHInWeiValue() constant onlyOwner public returns(uint256) {\n', '        return hardCap;\n', '    }\n', '\n', '\n', '    function totalWeiRaised() constant onlyOwner public returns(uint256) {\n', '        return weiRaisedIncludingFiatCurrencyRaised;\n', '    }\n', '\n', '\n', '    function ownerTransferWeiFirstWallet(uint256 _value) external onlyOwner {\n', '        require(multiFirstWallet != 0x0);\n', '        require(multiFirstWallet != address(token));\n', '\n', '        // if zero requested, send the entire amount, otherwise the amount requested\n', '        uint256 _amount = _value > 0 ? _value : this.balance;\n', '\n', '        multiFirstWallet.transfer(_amount);\n', '    }\n', '\n', '    function ownerTransferWeiSecondWallet(uint256 _value) external onlyOwner {\n', '        require(multiSecondWallet != 0x0);\n', '        require(multiSecondWallet != address(token));\n', '\n', '        // if zero requested, send the entire amount, otherwise the amount requested\n', '        uint256 _amount = _value > 0 ? _value : this.balance;\n', '\n', '        multiSecondWallet.transfer(_amount);\n', '    }\n', '\n', '    function ownerTransferWeiThirdWallet(uint256 _value) external onlyOwner {\n', '        require(multiThirdWallet != 0x0);\n', '        require(multiThirdWallet != address(token));\n', '\n', '        // if zero requested, send the entire amount, otherwise the amount requested\n', '        uint256 _amount = _value > 0 ? _value : this.balance;\n', '\n', '        multiThirdWallet.transfer(_amount);\n', '    }\n', '\n', '    function ownerRecoverTokens(address _beneficiary) external onlyOwner {\n', '        require(_beneficiary != 0x0);\n', '        require(_beneficiary != address(token));\n', '        require(paused || now > end);\n', '\n', '        uint256 _tokensRemaining = token.balanceOf(address(this));\n', '        if (_tokensRemaining > 0) {\n', '            token.transfer(_beneficiary, _tokensRemaining);\n', '        }\n', '    }\n', '\n', '    \n', '    function addFiatCurrencyRaised( uint256 _fiatCurrencyIncrementInEquivalentWeiValue ) onlyOwner public {\n', '        fiatCurrencyRaisedInEquivalentWeiValue = fiatCurrencyRaisedInEquivalentWeiValue.add( _fiatCurrencyIncrementInEquivalentWeiValue);\n', '        weiRaisedIncludingFiatCurrencyRaised = weiRaisedIncludingFiatCurrencyRaised.add(_fiatCurrencyIncrementInEquivalentWeiValue);\n', '        \n', '    }\n', '\n', '    function reduceFiatCurrencyRaised( uint256 _fiatCurrencyDecrementInEquivalentWeiValue ) onlyOwner public {\n', '        fiatCurrencyRaisedInEquivalentWeiValue = fiatCurrencyRaisedInEquivalentWeiValue.sub(_fiatCurrencyDecrementInEquivalentWeiValue);\n', '        weiRaisedIncludingFiatCurrencyRaised = weiRaisedIncludingFiatCurrencyRaised.sub(_fiatCurrencyDecrementInEquivalentWeiValue);\n', '    }\n', '\n', '}']