['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract Token {\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) public allowed;\n', '\n', '    string public description;\n', '    uint8 public decimals;\n', '    string public logoURL;\n', '    string public name;\n', '    string public symbol;\n', '    uint public totalSupply;\n', '\n', '    address public creator;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    event Created(address creator, uint supply);\n', '\n', '    function Token(\n', '        string _description,\n', '        string _logoURL,\n', '        string _name,\n', '        string _symbol,\n', '        uint256 _totalSupply\n', '    ) public\n', '    {\n', '        description = _description;\n', '        logoURL = _logoURL;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = 18;\n', '        totalSupply = _totalSupply;\n', '\n', '        creator = tx.origin;\n', '        Created(creator, _totalSupply);\n', '        balances[creator] = _totalSupply;\n', '    }\n', '\n', "    // Don't let people randomly send ETH to contract\n", '    function() public payable {\n', '        revert();\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function setLogoURL(string url) public {\n', '        require(msg.sender == creator);\n', '        logoURL = url;\n', '    }\n', '}\n', '\n', '// Sample constructor args\n', '// "0x54686520746f6b656e20666f7220617765736f6d652070656f706c652e", "0x68747470733a2f2f692e696d6775722e636f6d2f5a336871756c492e6a7067", "0x417765736f6d6520546f6b656e", "0x415745", "0x52b7d2dcc80cd2e4000000"\n', '\n', 'contract Coinsling {\n', '\n', '    address public owner;\n', '\n', '    function Coinsling() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    event TokenCreated(address token);\n', '    function sling(\n', '        string _description,\n', '        string _logoURL,\n', '        string _name,\n', '        string _symbol,\n', '        uint   _totalSupply\n', '    ) public payable returns (Token token)\n', '    {\n', '        token = new Token(\n', '            _description,\n', '            _logoURL,\n', '            _name,\n', '            _symbol,\n', '            _totalSupply\n', '        );\n', '\n', '        TokenCreated(token);\n', '        return token;\n', '    }\n', '\n', '    // This allows me to collect the revenue paid into the contract\n', '    function transfer(uint amount, address to) public {\n', '        require(msg.sender == owner);\n', '        to.transfer(amount);\n', '    }\n', '}']