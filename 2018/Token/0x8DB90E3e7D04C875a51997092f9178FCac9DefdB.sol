['pragma solidity ^0.4.18;\n', '\n', '\n', '// https://github.com/ethereum/wiki/wiki/Standardized_Contract_APIs#transferable-fungibles-see-erc-20-for-the-latest\n', '\n', 'contract ERC20Token {\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // Get the total token supply\n', '    function totalSupply() constant public returns (uint256 supply);\n', '\n', '    // Get the account `balance` of another account with address `_owner`\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    // Send `_value` amount of tokens to address `_to`\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    // Send `_value` amount of tokens from address `_from` to address `_to`\n', '    // The `transferFrom` method is used for a withdraw workflow, allowing contracts to send tokens on your behalf,\n', '    // for example to "deposit" to a contract address and/or to charge fees in sub-currencies;\n', '    // the command should fail unless the `_from` account has deliberately authorized the sender of the message\n', '    // via some mechanism; we propose these standardized APIs for `approval`:\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '}\n', '\n', 'contract PortalToken is ERC20Token {\n', '    address public initialOwner;\n', '    uint256 public supply   = 1000000000 * 10 ** 18;  // 1,000,000,000\n', "    string  public name     = 'PortalToken';\n", '    uint8   public decimals = 18;\n', "    string  public symbol   = 'PORTAL';\n", "    string  public version  = 'v0.2';\n", '    uint    public creationBlock;\n', '    uint    public creationTime;\n', '\n', '    mapping (address => uint256) balance;\n', '    mapping (address => mapping (address => uint256)) m_allowance;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function PortalToken() public{\n', '        initialOwner        = msg.sender;\n', '        balance[msg.sender] = supply;\n', '        creationBlock       = block.number;\n', '        creationTime        = block.timestamp;\n', '    }\n', '\n', '    function balanceOf(address _account) constant public returns (uint) {\n', '        return balance[_account];\n', '    }\n', '\n', '    function totalSupply() constant public returns (uint) {\n', '        return supply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        // `revert()` | `throw`\n', '        //      http://solidity.readthedocs.io/en/develop/control-structures.html#error-handling-assert-require-revert-and-exceptions\n', '        //      https://ethereum.stackexchange.com/questions/20978/why-do-throw-and-revert-create-different-bytecodes/20981\n', '        return doTransfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (allowance(_from, msg.sender) < _value) revert();\n', '\n', '        m_allowance[_from][msg.sender] -= _value;\n', '\n', '        if ( !(doTransfer(_from, _to, _value)) ) {\n', '            m_allowance[_from][msg.sender] += _value;\n', '            return false;\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function doTransfer(address _from, address _to, uint _value) internal returns (bool success) {\n', '        if (balance[_from] >= _value && balance[_to] + _value >= balance[_to]) {\n', '            balance[_from] -= _value;\n', '            balance[_to] += _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ( (_value != 0) && (allowance(msg.sender, _spender) != 0) ) revert();\n', '\n', '        m_allowance[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return m_allowance[_owner][_spender];\n', '    }\n', '\n', '}']