['pragma solidity ^0.4.25;\n', '\n', 'contract EasyCircle {\n', '\n', 'using SafeMath for uint256;\n', 'string public constant symbol = "ECX";\n', 'string public constant name = "EasyCircle";\n', 'uint8 public constant decimals = 18;\n', 'uint256 _totalSupply = 777777777 * 10 ** uint256(decimals);\n', '\n', '// Owner of this contract\n', 'address public owner;\n', '\n', '// Balances for each account\n', 'mapping(address => uint256) balances;\n', '\n', '// Owner of account approves the transfer of an amount to another account\n', 'mapping(address => mapping (address => uint256)) allowed;\n', '\n', '// Constructor\n', 'constructor() EasyCircle() public {\n', '   owner = msg.sender;\n', '   balances[owner] = _totalSupply;\n', '}\n', '\n', '// ERC20\n', 'function totalSupply() public constant returns (uint256) {\n', '   return _totalSupply;\n', '}\n', '\n', 'function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '   return balances[_owner];\n', '}\n', '\n', 'function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '   if (balances[msg.sender] >= _amount && _amount > 0) {\n', '       balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '       balances[_to] = balances[_to].add(_amount);\n', '       emit Transfer(msg.sender, _to, _amount);\n', '       return true;\n', '   } else {\n', '       return false;\n', '   }\n', '}\n', '\n', 'function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '   if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0) {\n', '       balances[_from] = balances[_from].sub(_amount);\n', '       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '       balances[_to] = balances[_to].add(_amount);\n', '       emit Transfer(_from, _to, _amount);\n', '       return true;\n', '   } else {\n', '       return false;\n', '   }\n', '}\n', '\n', 'function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '   if(balances[msg.sender]>=_amount && _amount>0) {\n', '       allowed[msg.sender][_spender] = _amount;\n', '       emit Approval(msg.sender, _spender, _amount);\n', '       return true;\n', '   } else {\n', '       return false;\n', '   }\n', '}\n', '\n', 'function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '   return allowed[_owner][_spender];\n', '}\n', '\n', 'event Transfer(address indexed _from, address indexed _to, uint _value);\n', 'event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '// custom\n', 'function getMyBalance() public view returns (uint) {\n', '   return balances[msg.sender];\n', '}\n', '}\n', '\n', 'library SafeMath {\n', 'function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '    }\n', '\n', 'function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '    }\n', '\n', 'function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '    }\n', '\n', 'function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '    }\n', '}']
['pragma solidity ^0.4.25;\n', '\n', 'contract EasyCircle {\n', '\n', 'using SafeMath for uint256;\n', 'string public constant symbol = "ECX";\n', 'string public constant name = "EasyCircle";\n', 'uint8 public constant decimals = 18;\n', 'uint256 _totalSupply = 777777777 * 10 ** uint256(decimals);\n', '\n', '// Owner of this contract\n', 'address public owner;\n', '\n', '// Balances for each account\n', 'mapping(address => uint256) balances;\n', '\n', '// Owner of account approves the transfer of an amount to another account\n', 'mapping(address => mapping (address => uint256)) allowed;\n', '\n', '// Constructor\n', 'constructor() EasyCircle() public {\n', '   owner = msg.sender;\n', '   balances[owner] = _totalSupply;\n', '}\n', '\n', '// ERC20\n', 'function totalSupply() public constant returns (uint256) {\n', '   return _totalSupply;\n', '}\n', '\n', 'function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '   return balances[_owner];\n', '}\n', '\n', 'function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '   if (balances[msg.sender] >= _amount && _amount > 0) {\n', '       balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '       balances[_to] = balances[_to].add(_amount);\n', '       emit Transfer(msg.sender, _to, _amount);\n', '       return true;\n', '   } else {\n', '       return false;\n', '   }\n', '}\n', '\n', 'function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '   if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0) {\n', '       balances[_from] = balances[_from].sub(_amount);\n', '       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '       balances[_to] = balances[_to].add(_amount);\n', '       emit Transfer(_from, _to, _amount);\n', '       return true;\n', '   } else {\n', '       return false;\n', '   }\n', '}\n', '\n', 'function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '   if(balances[msg.sender]>=_amount && _amount>0) {\n', '       allowed[msg.sender][_spender] = _amount;\n', '       emit Approval(msg.sender, _spender, _amount);\n', '       return true;\n', '   } else {\n', '       return false;\n', '   }\n', '}\n', '\n', 'function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '   return allowed[_owner][_spender];\n', '}\n', '\n', 'event Transfer(address indexed _from, address indexed _to, uint _value);\n', 'event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '// custom\n', 'function getMyBalance() public view returns (uint) {\n', '   return balances[msg.sender];\n', '}\n', '}\n', '\n', 'library SafeMath {\n', 'function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '    }\n', '\n', 'function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '    }\n', '\n', 'function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '    }\n', '\n', 'function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '    }\n', '}']
