['pragma solidity ^0.4.20;\n', '\n', '/**\n', '* Standard SafeMath Library: zeppelin-solidity/contracts/math/SafeMath.sol\n', '*/\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * Buy GPX automatically when Ethers are received\n', ' */\n', 'contract Buyable {\n', '\n', '    function buy() payable public returns (uint256);\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Exchange all my ParcelX token to mainchain GPX\n', ' */\n', 'contract Convertible {\n', '\n', '    function convertMainchainGPX(string destinationAccount, string extra) external returns (bool);\n', '  \n', '    // ParcelX deamon program is monitoring this event. \n', '    // Once it triggered, ParcelX will transfer corresponding GPX to destination account\n', '    event Converted(address indexed who, string destinationAccount, uint256 amount, string extra);\n', '}\n', '\n', '/**\n', ' * Starndard ERC20 interface: https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * FEATURE 2): MultiOwnable implementation\n', ' */\n', 'contract MultiOwnable {\n', '\n', '    address[8] m_owners;\n', '    uint m_numOwners;\n', '    uint m_multiRequires;\n', '\n', '    mapping (bytes32 => uint) internal m_pendings;\n', '\n', '    // constructor is given number of sigs required to do protected "multiOwner" transactions\n', '    // as well as the selection of addresses capable of confirming them.\n', '    function MultiOwnable (address[] _otherOwners, uint _multiRequires) internal {\n', '        require(0 < _multiRequires && _multiRequires <= _otherOwners.length + 1);\n', '        m_numOwners = _otherOwners.length + 1;\n', '        require(m_numOwners <= 8);   // 不支持大于8人\n', '        m_owners[0] = msg.sender;\n', '        for (uint i = 0; i < _otherOwners.length; ++i) {\n', '            m_owners[1 + i] = _otherOwners[i];\n', '        }\n', '        m_multiRequires = _multiRequires;\n', '    }\n', '\n', '    // Any one of the owners, will approve the action\n', '    modifier anyOwner {\n', '        if (isOwner(msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Requiring num > m_multiRequires owners, to approve the action\n', '    modifier mostOwner(bytes32 operation) {\n', '        if (checkAndConfirm(msg.sender, operation)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function isOwner(address currentOwner) internal view returns (bool) {\n', '        for (uint i = 0; i < m_numOwners; ++i) {\n', '            if (m_owners[i] == currentOwner) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function checkAndConfirm(address currentOwner, bytes32 operation) internal returns (bool) {\n', '        uint ownerIndex = m_numOwners;\n', '        uint i;\n', '        for (i = 0; i < m_numOwners; ++i) {\n', '            if (m_owners[i] == currentOwner) {\n', '                ownerIndex = i;\n', '            }\n', '        }\n', '        if (ownerIndex == m_numOwners) {\n', '            return false;  // Not Owner\n', '        }\n', '        \n', '        uint newBitFinger = (m_pendings[operation] | (2 ** ownerIndex));\n', '\n', '        uint confirmTotal = 0;\n', '        for (i = 0; i < m_numOwners; ++i) {\n', '            if ((newBitFinger & (2 ** i)) > 0) {\n', '                confirmTotal ++;\n', '            }\n', '        }\n', '        if (confirmTotal >= m_multiRequires) {\n', '            delete m_pendings[operation];\n', '            return true;\n', '        }\n', '        else {\n', '            m_pendings[operation] = newBitFinger;\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * FEATURE 3): Pausable implementation\n', ' */\n', 'contract Pausable is MultiOwnable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool paused = false;\n', '\n', '    // Modifier to make a function callable only when the contract is not paused.\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    // Modifier to make a function callable only when the contract is paused.\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    // called by the owner to pause, triggers stopped state\n', '    function pause() mostOwner(keccak256(msg.data)) whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    // called by the owner to unpause, returns to normal state\n', '    function unpause() mostOwner(keccak256(msg.data)) whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '\n', '    function isPause() view public returns(bool) {\n', '        return paused;\n', '    }\n', '}\n', '\n', '/**\n', ' * The main body of final smart contract \n', ' */\n', 'contract ParcelXToken is ERC20, MultiOwnable, Pausable, Buyable, Convertible {\n', '\n', '    using SafeMath for uint256;\n', '  \n', '    string public constant name = "TestGPX-name";\n', '    string public constant symbol = "TestGPX-symbol";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant TOTAL_SUPPLY = uint256(1000000000) * (uint256(10) ** decimals);  // 10,0000,0000\n', '\n', '    address internal tokenPool;      // Use a token pool holding all GPX. Avoid using sender address.\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function ParcelXToken(address[] _otherOwners, uint _multiRequires) \n', '        MultiOwnable(_otherOwners, _multiRequires) public {\n', '        tokenPool = this;\n', '        balances[tokenPool] = TOTAL_SUPPLY;\n', '    }\n', '\n', '    /**\n', '     * FEATURE 1): ERC20 implementation\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return TOTAL_SUPPLY;       \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '  }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * FEATURE 4): Buyable implements\n', '     * 0.000268 eth per GPX, so the rate is 1.0 / 0.000268 = 3731.3432835820895\n', '     */\n', '    uint256 internal buyRate = uint256(3731); \n', '    \n', '    event Deposit(address indexed who, uint256 value);\n', '    event Withdraw(address indexed who, uint256 value, address indexed lastApprover);\n', '        \n', '\n', '    function getBuyRate() external view returns (uint256) {\n', '        return buyRate;\n', '    }\n', '\n', '    function setBuyRate(uint256 newBuyRate) mostOwner(keccak256(msg.data)) external {\n', '        buyRate = newBuyRate;\n', '    }\n', '\n', '    // minimum of 0.001 ether for purchase in the public, pre-ico, and private sale\n', '    function buy() payable whenNotPaused public returns (uint256) {\n', '        require(msg.value >= 0.001 ether);\n', '        uint256 tokens = msg.value.mul(buyRate);  // calculates the amount\n', '        require(balances[tokenPool] >= tokens);               // checks if it has enough to sell\n', '        balances[tokenPool] = balances[tokenPool].sub(tokens);                        // subtracts amount from seller&#39;s balance\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);                  // adds the amount to buyer&#39;s balance\n', '        Transfer(tokenPool, msg.sender, tokens);               // execute an event reflecting the change\n', '        return tokens;                                    // ends function and returns\n', '    }\n', '\n', '    // gets called when no other function matches\n', '    function () public payable {\n', '        if (msg.value > 0) {\n', '            buy();\n', '            Deposit(msg.sender, msg.value);\n', '        }\n', '    }\n', '\n', '    function execute(address _to, uint256 _value, bytes _data) mostOwner(keccak256(msg.data)) external returns (bool){\n', '        require(_to != address(0));\n', '        Withdraw(_to, _value, msg.sender);\n', '        return _to.call.value(_value)(_data);\n', '    }\n', '\n', '    /**\n', '     * FEATURE 5): Convertible implements\n', '     */\n', '    function convertMainchainGPX(string destinationAccount, string extra) external returns (bool) {\n', '        require(bytes(destinationAccount).length > 10 && bytes(destinationAccount).length < 128);\n', '        require(balances[msg.sender] > 0);\n', '        uint256 amount = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '        balances[tokenPool] = balances[tokenPool].add(amount);   // recycle ParcelX to tokenPool&#39;s init account\n', '        Converted(msg.sender, destinationAccount, amount, extra);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '/**\n', '* Standard SafeMath Library: zeppelin-solidity/contracts/math/SafeMath.sol\n', '*/\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * Buy GPX automatically when Ethers are received\n', ' */\n', 'contract Buyable {\n', '\n', '    function buy() payable public returns (uint256);\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Exchange all my ParcelX token to mainchain GPX\n', ' */\n', 'contract Convertible {\n', '\n', '    function convertMainchainGPX(string destinationAccount, string extra) external returns (bool);\n', '  \n', '    // ParcelX deamon program is monitoring this event. \n', '    // Once it triggered, ParcelX will transfer corresponding GPX to destination account\n', '    event Converted(address indexed who, string destinationAccount, uint256 amount, string extra);\n', '}\n', '\n', '/**\n', ' * Starndard ERC20 interface: https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * FEATURE 2): MultiOwnable implementation\n', ' */\n', 'contract MultiOwnable {\n', '\n', '    address[8] m_owners;\n', '    uint m_numOwners;\n', '    uint m_multiRequires;\n', '\n', '    mapping (bytes32 => uint) internal m_pendings;\n', '\n', '    // constructor is given number of sigs required to do protected "multiOwner" transactions\n', '    // as well as the selection of addresses capable of confirming them.\n', '    function MultiOwnable (address[] _otherOwners, uint _multiRequires) internal {\n', '        require(0 < _multiRequires && _multiRequires <= _otherOwners.length + 1);\n', '        m_numOwners = _otherOwners.length + 1;\n', '        require(m_numOwners <= 8);   // 不支持大于8人\n', '        m_owners[0] = msg.sender;\n', '        for (uint i = 0; i < _otherOwners.length; ++i) {\n', '            m_owners[1 + i] = _otherOwners[i];\n', '        }\n', '        m_multiRequires = _multiRequires;\n', '    }\n', '\n', '    // Any one of the owners, will approve the action\n', '    modifier anyOwner {\n', '        if (isOwner(msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Requiring num > m_multiRequires owners, to approve the action\n', '    modifier mostOwner(bytes32 operation) {\n', '        if (checkAndConfirm(msg.sender, operation)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function isOwner(address currentOwner) internal view returns (bool) {\n', '        for (uint i = 0; i < m_numOwners; ++i) {\n', '            if (m_owners[i] == currentOwner) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function checkAndConfirm(address currentOwner, bytes32 operation) internal returns (bool) {\n', '        uint ownerIndex = m_numOwners;\n', '        uint i;\n', '        for (i = 0; i < m_numOwners; ++i) {\n', '            if (m_owners[i] == currentOwner) {\n', '                ownerIndex = i;\n', '            }\n', '        }\n', '        if (ownerIndex == m_numOwners) {\n', '            return false;  // Not Owner\n', '        }\n', '        \n', '        uint newBitFinger = (m_pendings[operation] | (2 ** ownerIndex));\n', '\n', '        uint confirmTotal = 0;\n', '        for (i = 0; i < m_numOwners; ++i) {\n', '            if ((newBitFinger & (2 ** i)) > 0) {\n', '                confirmTotal ++;\n', '            }\n', '        }\n', '        if (confirmTotal >= m_multiRequires) {\n', '            delete m_pendings[operation];\n', '            return true;\n', '        }\n', '        else {\n', '            m_pendings[operation] = newBitFinger;\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * FEATURE 3): Pausable implementation\n', ' */\n', 'contract Pausable is MultiOwnable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool paused = false;\n', '\n', '    // Modifier to make a function callable only when the contract is not paused.\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    // Modifier to make a function callable only when the contract is paused.\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    // called by the owner to pause, triggers stopped state\n', '    function pause() mostOwner(keccak256(msg.data)) whenNotPaused public {\n', '        paused = true;\n', '        Pause();\n', '    }\n', '\n', '    // called by the owner to unpause, returns to normal state\n', '    function unpause() mostOwner(keccak256(msg.data)) whenPaused public {\n', '        paused = false;\n', '        Unpause();\n', '    }\n', '\n', '    function isPause() view public returns(bool) {\n', '        return paused;\n', '    }\n', '}\n', '\n', '/**\n', ' * The main body of final smart contract \n', ' */\n', 'contract ParcelXToken is ERC20, MultiOwnable, Pausable, Buyable, Convertible {\n', '\n', '    using SafeMath for uint256;\n', '  \n', '    string public constant name = "TestGPX-name";\n', '    string public constant symbol = "TestGPX-symbol";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant TOTAL_SUPPLY = uint256(1000000000) * (uint256(10) ** decimals);  // 10,0000,0000\n', '\n', '    address internal tokenPool;      // Use a token pool holding all GPX. Avoid using sender address.\n', '    mapping(address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function ParcelXToken(address[] _otherOwners, uint _multiRequires) \n', '        MultiOwnable(_otherOwners, _multiRequires) public {\n', '        tokenPool = this;\n', '        balances[tokenPool] = TOTAL_SUPPLY;\n', '    }\n', '\n', '    /**\n', '     * FEATURE 1): ERC20 implementation\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return TOTAL_SUPPLY;       \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '  }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * FEATURE 4): Buyable implements\n', '     * 0.000268 eth per GPX, so the rate is 1.0 / 0.000268 = 3731.3432835820895\n', '     */\n', '    uint256 internal buyRate = uint256(3731); \n', '    \n', '    event Deposit(address indexed who, uint256 value);\n', '    event Withdraw(address indexed who, uint256 value, address indexed lastApprover);\n', '        \n', '\n', '    function getBuyRate() external view returns (uint256) {\n', '        return buyRate;\n', '    }\n', '\n', '    function setBuyRate(uint256 newBuyRate) mostOwner(keccak256(msg.data)) external {\n', '        buyRate = newBuyRate;\n', '    }\n', '\n', '    // minimum of 0.001 ether for purchase in the public, pre-ico, and private sale\n', '    function buy() payable whenNotPaused public returns (uint256) {\n', '        require(msg.value >= 0.001 ether);\n', '        uint256 tokens = msg.value.mul(buyRate);  // calculates the amount\n', '        require(balances[tokenPool] >= tokens);               // checks if it has enough to sell\n', "        balances[tokenPool] = balances[tokenPool].sub(tokens);                        // subtracts amount from seller's balance\n", "        balances[msg.sender] = balances[msg.sender].add(tokens);                  // adds the amount to buyer's balance\n", '        Transfer(tokenPool, msg.sender, tokens);               // execute an event reflecting the change\n', '        return tokens;                                    // ends function and returns\n', '    }\n', '\n', '    // gets called when no other function matches\n', '    function () public payable {\n', '        if (msg.value > 0) {\n', '            buy();\n', '            Deposit(msg.sender, msg.value);\n', '        }\n', '    }\n', '\n', '    function execute(address _to, uint256 _value, bytes _data) mostOwner(keccak256(msg.data)) external returns (bool){\n', '        require(_to != address(0));\n', '        Withdraw(_to, _value, msg.sender);\n', '        return _to.call.value(_value)(_data);\n', '    }\n', '\n', '    /**\n', '     * FEATURE 5): Convertible implements\n', '     */\n', '    function convertMainchainGPX(string destinationAccount, string extra) external returns (bool) {\n', '        require(bytes(destinationAccount).length > 10 && bytes(destinationAccount).length < 128);\n', '        require(balances[msg.sender] > 0);\n', '        uint256 amount = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', "        balances[tokenPool] = balances[tokenPool].add(amount);   // recycle ParcelX to tokenPool's init account\n", '        Converted(msg.sender, destinationAccount, amount, extra);\n', '        return true;\n', '    }\n', '\n', '}']
