['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/NokuPricingPlan.sol\n', '\n', '/**\n', '* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\n', '*/\n', 'contract NokuPricingPlan {\n', '    /**\n', '    * @dev Pay the fee for the service identified by the specified name.\n', '    * The fee amount shall already be approved by the client.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @param client The client of the target service.\n', '    * @return true if fee has been paid.\n', '    */\n', '    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\n', '\n', '    /**\n', '    * @dev Get the usage fee for the service identified by the specified name.\n', '    * The returned fee amount shall be approved before using #payFee method.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @return The amount to approve before really paying such fee.\n', '    */\n', '    function usageFee(bytes32 serviceName, uint256 multiplier) public view returns(uint fee);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/NokuCustomToken.sol\n', '\n', 'contract NokuCustomToken is Ownable {\n', '\n', '    event LogBurnFinished();\n', '    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n', '\n', '    // The pricing plan determining the fee to be paid in NOKU tokens by customers for using Noku services\n', '    NokuPricingPlan public pricingPlan;\n', '\n', '    // The entity acting as Custom Token service provider i.e. Noku\n', '    address public serviceProvider;\n', '\n', '    // Flag indicating if Custom Token burning has been permanently finished or not.\n', '    bool public burningFinished;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only by service provider i.e. Noku.\n', '    */\n', '    modifier onlyServiceProvider() {\n', '        require(msg.sender == serviceProvider, "caller is not service provider");\n', '        _;\n', '    }\n', '\n', '    modifier canBurn() {\n', '        require(!burningFinished, "burning finished");\n', '        _;\n', '    }\n', '\n', '    constructor(address _pricingPlan, address _serviceProvider) internal {\n', '        require(_pricingPlan != 0, "_pricingPlan is zero");\n', '        require(_serviceProvider != 0, "_serviceProvider is zero");\n', '\n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '        serviceProvider = _serviceProvider;\n', '    }\n', '\n', '    /**\n', '    * @dev Presence of this function indicates the contract is a Custom Token.\n', '    */\n', '    function isCustomToken() public pure returns(bool isCustom) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Stop burning new tokens.\n', '    * @return true if the operation was successful.\n', '    */\n', '    function finishBurning() public onlyOwner canBurn returns(bool finished) {\n', '        burningFinished = true;\n', '\n', '        emit LogBurnFinished();\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Change the pricing plan of service fee to be paid in NOKU tokens.\n', '    * @param _pricingPlan The pricing plan of NOKU token to be paid, zero means flat subscription.\n', '    */\n', '    function setPricingPlan(address _pricingPlan) public onlyServiceProvider {\n', '        require(_pricingPlan != 0, "_pricingPlan is 0");\n', '        require(_pricingPlan != address(pricingPlan), "_pricingPlan == pricingPlan");\n', '\n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '\n', '        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/NokuTokenBurner.sol\n', '\n', 'contract BurnableERC20 is ERC20 {\n', '    function burn(uint256 amount) public returns (bool burned);\n', '}\n', '\n', '/**\n', '* @dev The NokuTokenBurner contract has the responsibility to burn the configured fraction of received\n', '* ERC20-compliant tokens and distribute the remainder to the configured wallet.\n', '*/\n', 'contract NokuTokenBurner is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    event LogNokuTokenBurnerCreated(address indexed caller, address indexed wallet);\n', '    event LogBurningPercentageChanged(address indexed caller, uint256 indexed burningPercentage);\n', '\n', '    // The wallet receiving the unburnt tokens.\n', '    address public wallet;\n', '\n', '    // The percentage of tokens to burn after being received (range [0, 100])\n', '    uint256 public burningPercentage;\n', '\n', '    // The cumulative amount of burnt tokens.\n', '    uint256 public burnedTokens;\n', '\n', '    // The cumulative amount of tokens transferred back to the wallet.\n', '    uint256 public transferredTokens;\n', '\n', '    /**\n', '    * @dev Create a new NokuTokenBurner with predefined burning fraction.\n', '    * @param _wallet The wallet receiving the unburnt tokens.\n', '    */\n', '    constructor(address _wallet) public {\n', '        require(_wallet != address(0), "_wallet is zero");\n', '        \n', '        wallet = _wallet;\n', '        burningPercentage = 100;\n', '\n', '        emit LogNokuTokenBurnerCreated(msg.sender, _wallet);\n', '    }\n', '\n', '    /**\n', '    * @dev Change the percentage of tokens to burn after being received.\n', '    * @param _burningPercentage The percentage of tokens to be burnt.\n', '    */\n', '    function setBurningPercentage(uint256 _burningPercentage) public onlyOwner {\n', '        require(0 <= _burningPercentage && _burningPercentage <= 100, "_burningPercentage not in [0, 100]");\n', '        require(_burningPercentage != burningPercentage, "_burningPercentage equal to current one");\n', '        \n', '        burningPercentage = _burningPercentage;\n', '\n', '        emit LogBurningPercentageChanged(msg.sender, _burningPercentage);\n', '    }\n', '\n', '    /**\n', '    * @dev Called after burnable tokens has been transferred for burning.\n', '    * @param _token THe extended ERC20 interface supported by the sent tokens.\n', '    * @param _amount The amount of burnable tokens just arrived ready for burning.\n', '    */\n', '    function tokenReceived(address _token, uint256 _amount) public whenNotPaused {\n', '        require(_token != address(0), "_token is zero");\n', '        require(_amount > 0, "_amount is zero");\n', '\n', '        uint256 amountToBurn = _amount.mul(burningPercentage).div(100);\n', '        if (amountToBurn > 0) {\n', '            assert(BurnableERC20(_token).burn(amountToBurn));\n', '            \n', '            burnedTokens = burnedTokens.add(amountToBurn);\n', '        }\n', '\n', '        uint256 amountToTransfer = _amount.sub(amountToBurn);\n', '        if (amountToTransfer > 0) {\n', '            assert(BurnableERC20(_token).transfer(wallet, amountToTransfer));\n', '\n', '            transferredTokens = transferredTokens.add(amountToTransfer);\n', '        }\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  constructor(\n', '    ERC20Basic _token,\n', '    address _beneficiary,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/TokenVesting.sol\n', '\n', '/* solium-disable security/no-block-members */\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _start the time (as Unix time) at which point vesting starts \n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  constructor(\n', '    address _beneficiary,\n', '    uint256 _start,\n', '    uint256 _cliff,\n', '    uint256 _duration,\n', '    bool _revocable\n', '  )\n', '    public\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    emit Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    emit Revoked();\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (block.timestamp < cliff) {\n', '      return 0;\n', '    } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/NokuCustomERC20.sol\n', '\n', '/**\n', '* @dev The NokuCustomERC20Token contract is a custom ERC20-compliant token available in the Noku Service Platform (NSP).\n', '* The Noku customer is able to choose the token name, symbol, decimals, initial supply and to administer its lifecycle\n', '* by minting or burning tokens in order to increase or decrease the token supply.\n', '*/\n', 'contract NokuCustomERC20 is NokuCustomToken, DetailedERC20, MintableToken, BurnableToken {\n', '    using SafeMath for uint256;\n', '\n', '    event LogNokuCustomERC20Created(\n', '        address indexed caller,\n', '        string indexed name,\n', '        string indexed symbol,\n', '        uint8 decimals,\n', '        uint256 transferableFromBlock,\n', '        uint256 lockEndBlock,\n', '        address pricingPlan,\n', '        address serviceProvider\n', '    );\n', '    event LogMintingFeeEnabledChanged(address indexed caller, bool indexed mintingFeeEnabled);\n', '    event LogInformationChanged(address indexed caller, string name, string symbol);\n', '    event LogTransferFeePaymentFinished(address indexed caller);\n', '    event LogTransferFeePercentageChanged(address indexed caller, uint256 indexed transferFeePercentage);\n', '\n', '    // Flag indicating if minting fees are enabled or disabled\n', '    bool public mintingFeeEnabled;\n', '\n', '    // Block number from which tokens are initially transferable\n', '    uint256 public transferableFromBlock;\n', '\n', '    // Block number from which initial lock ends\n', '    uint256 public lockEndBlock;\n', '\n', '    // The initially locked balances by address\n', '    mapping (address => uint256) public initiallyLockedBalanceOf;\n', '\n', '    // The fee percentage for Custom Token transfer or zero if transfer is free of charge\n', '    uint256 public transferFeePercentage;\n', '\n', '    // Flag indicating if fee payment in Custom Token transfer has been permanently finished or not. \n', '    bool public transferFeePaymentFinished;\n', '\n', '    // Address of optional Timelock smart contract, otherwise 0x0\n', '    TokenTimelock public timelock;\n', '\n', '    // Address of optional Vesting smart contract, otherwise 0x0\n', '    TokenVesting public vesting;\n', '\n', '    bytes32 public constant BURN_SERVICE_NAME     = "NokuCustomERC20.burn";\n', '    bytes32 public constant MINT_SERVICE_NAME     = "NokuCustomERC20.mint";\n', '    bytes32 public constant TIMELOCK_SERVICE_NAME = "NokuCustomERC20.timelock";\n', '    bytes32 public constant VESTING_SERVICE_NAME  = "NokuCustomERC20.vesting";\n', '\n', '    modifier canTransfer(address _from, uint _value) {\n', '        require(block.number >= transferableFromBlock, "token not transferable");\n', '\n', '        if (block.number < lockEndBlock) {\n', '            uint256 locked = lockedBalanceOf(_from);\n', '            if (locked > 0) {\n', '                uint256 newBalance = balanceOf(_from).sub(_value);\n', '                require(newBalance >= locked, "_value exceeds locked amount");\n', '            }\n', '        }\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        string _name,\n', '        string _symbol,\n', '        uint8 _decimals,\n', '        uint256 _transferableFromBlock,\n', '        uint256 _lockEndBlock,\n', '        address _pricingPlan,\n', '        address _serviceProvider\n', '    )\n', '    NokuCustomToken(_pricingPlan, _serviceProvider)\n', '    DetailedERC20(_name, _symbol, _decimals) public\n', '    {\n', '        require(bytes(_name).length > 0, "_name is empty");\n', '        require(bytes(_symbol).length > 0, "_symbol is empty");\n', '        require(_lockEndBlock >= _transferableFromBlock, "_lockEndBlock lower than _transferableFromBlock");\n', '\n', '        transferableFromBlock = _transferableFromBlock;\n', '        lockEndBlock = _lockEndBlock;\n', '        mintingFeeEnabled = true;\n', '\n', '        emit LogNokuCustomERC20Created(\n', '            msg.sender,\n', '            _name,\n', '            _symbol,\n', '            _decimals,\n', '            _transferableFromBlock,\n', '            _lockEndBlock,\n', '            _pricingPlan,\n', '            _serviceProvider\n', '        );\n', '    }\n', '\n', '    function setMintingFeeEnabled(bool _mintingFeeEnabled) public onlyOwner returns(bool successful) {\n', '        require(_mintingFeeEnabled != mintingFeeEnabled, "_mintingFeeEnabled == mintingFeeEnabled");\n', '\n', '        mintingFeeEnabled = _mintingFeeEnabled;\n', '\n', '        emit LogMintingFeeEnabledChanged(msg.sender, _mintingFeeEnabled);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Change the Custom Token detailed information after creation.\n', '    * @param _name The name to assign to the Custom Token.\n', '    * @param _symbol The symbol to assign to the Custom Token.\n', '    */\n', '    function setInformation(string _name, string _symbol) public onlyOwner returns(bool successful) {\n', '        require(bytes(_name).length > 0, "_name is empty");\n', '        require(bytes(_symbol).length > 0, "_symbol is empty");\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        emit LogInformationChanged(msg.sender, _name, _symbol);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Stop trasfer fee payment for tokens.\n', '    * @return true if the operation was successful.\n', '    */\n', '    function finishTransferFeePayment() public onlyOwner returns(bool finished) {\n', '        require(!transferFeePaymentFinished, "transfer fee finished");\n', '\n', '        transferFeePaymentFinished = true;\n', '\n', '        emit LogTransferFeePaymentFinished(msg.sender);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Change the transfer fee percentage to be paid in Custom tokens.\n', '    * @param _transferFeePercentage The fee percentage to be paid for transfer in range [0, 100].\n', '    */\n', '    function setTransferFeePercentage(uint256 _transferFeePercentage) public onlyOwner {\n', '        require(0 <= _transferFeePercentage && _transferFeePercentage <= 100, "_transferFeePercentage not in [0, 100]");\n', '        require(_transferFeePercentage != transferFeePercentage, "_transferFeePercentage equal to current value");\n', '\n', '        transferFeePercentage = _transferFeePercentage;\n', '\n', '        emit LogTransferFeePercentageChanged(msg.sender, _transferFeePercentage);\n', '    }\n', '\n', '    function lockedBalanceOf(address _to) public view returns(uint256 locked) {\n', '        uint256 initiallyLocked = initiallyLockedBalanceOf[_to];\n', '        if (block.number >= lockEndBlock) return 0;\n', '        else if (block.number <= transferableFromBlock) return initiallyLocked;\n', '\n', '        uint256 releaseForBlock = initiallyLocked.div(lockEndBlock.sub(transferableFromBlock));\n', '        uint256 released = block.number.sub(transferableFromBlock).mul(releaseForBlock);\n', '        return initiallyLocked.sub(released);\n', '    }\n', '\n', '    /**\n', '    * @dev Get the fee to be paid for the transfer of NOKU tokens.\n', '    * @param _value The amount of NOKU tokens to be transferred.\n', '    */\n', '    function transferFee(uint256 _value) public view returns(uint256 usageFee) {\n', '        return _value.mul(transferFeePercentage).div(100);\n', '    }\n', '\n', '    /**\n', '    * @dev Check if token transfer is free of any charge or not.\n', '    * @return true if transfer is free of any charge.\n', '    */\n', '    function freeTransfer() public view returns (bool isTransferFree) {\n', '        return transferFeePaymentFinished || transferFeePercentage == 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Override #transfer for optionally paying fee to Custom token owner.\n', '    */\n', '    function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) public returns(bool transferred) {\n', '        if (freeTransfer()) {\n', '            return super.transfer(_to, _value);\n', '        }\n', '        else {\n', '            uint256 usageFee = transferFee(_value);\n', '            uint256 netValue = _value.sub(usageFee);\n', '\n', '            bool feeTransferred = super.transfer(owner, usageFee);\n', '            bool netValueTransferred = super.transfer(_to, netValue);\n', '\n', '            return feeTransferred && netValueTransferred;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Override #transferFrom for optionally paying fee to Custom token owner.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) public returns(bool transferred) {\n', '        if (freeTransfer()) {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '        else {\n', '            uint256 usageFee = transferFee(_value);\n', '            uint256 netValue = _value.sub(usageFee);\n', '\n', '            bool feeTransferred = super.transferFrom(_from, owner, usageFee);\n', '            bool netValueTransferred = super.transferFrom(_from, _to, netValue);\n', '\n', '            return feeTransferred && netValueTransferred;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Burn a specific amount of tokens, paying the service fee.\n', '    * @param _amount The amount of token to be burned.\n', '    */\n', '    function burn(uint256 _amount) public canBurn {\n', '        require(_amount > 0, "_amount is zero");\n', '\n', '        super.burn(_amount);\n', '\n', '        require(pricingPlan.payFee(BURN_SERVICE_NAME, _amount, msg.sender), "burn fee failed");\n', '    }\n', '\n', '    /**\n', '    * @dev Mint a specific amount of tokens, paying the service fee.\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns(bool minted) {\n', '        require(_to != 0, "_to is zero");\n', '        require(_amount > 0, "_amount is zero");\n', '\n', '        super.mint(_to, _amount);\n', '\n', '        if (mintingFeeEnabled) {\n', '            require(pricingPlan.payFee(MINT_SERVICE_NAME, _amount, msg.sender), "mint fee failed");\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Mint new locked tokens, which will unlock progressively.\n', '    * @param _to The address that will receieve the minted locked tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mintLocked(address _to, uint256 _amount) public onlyOwner canMint returns(bool minted) {\n', '        initiallyLockedBalanceOf[_to] = initiallyLockedBalanceOf[_to].add(_amount);\n', '\n', '        return mint(_to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Mint the specified amount of timelocked tokens.\n', '     * @param _to The address that will receieve the minted locked tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @param _releaseTime The token release time as timestamp from Unix epoch.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime) public onlyOwner canMint\n', '    returns(bool minted)\n', '    {\n', '        require(timelock == address(0), "TokenTimelock already activated");\n', '\n', '        timelock = new TokenTimelock(this, _to, _releaseTime);\n', '\n', '        minted = mint(timelock, _amount);\n', '\n', '        require(pricingPlan.payFee(TIMELOCK_SERVICE_NAME, _amount, msg.sender), "timelock fee failed");\n', '    }\n', '\n', '    /**\n', '    * @dev Mint the specified amount of vested tokens.\n', '    * @param _to The address that will receieve the minted vested tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @param _startTime When the vesting starts as timestamp in seconds from Unix epoch.\n', '    * @param _duration The duration in seconds of the period in which the tokens will vest.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mintVested(address _to, uint256 _amount, uint256 _startTime, uint256 _duration) public onlyOwner canMint\n', '    returns(bool minted)\n', '    {\n', '        require(vesting == address(0), "TokenVesting already activated");\n', '\n', '        vesting = new TokenVesting(_to, _startTime, 0, _duration, true);\n', '\n', '        minted = mint(vesting, _amount);\n', '\n', '        require(pricingPlan.payFee(VESTING_SERVICE_NAME, _amount, msg.sender), "vesting fee failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Release vested tokens to the beneficiary. Anyone can release vested tokens.\n', '    * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function releaseVested() public returns(bool released) {\n', '        require(vesting != address(0), "TokenVesting not activated");\n', '\n', '        vesting.release(this);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Revoke vested tokens. Just the token can revoke because it is the vesting owner.\n', '    * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function revokeVested() public onlyOwner returns(bool revoked) {\n', '        require(vesting != address(0), "TokenVesting not activated");\n', '\n', '        vesting.revoke(this);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/NokuCustomService.sol\n', '\n', 'contract NokuCustomService is Pausable {\n', '    using AddressUtils for address;\n', '\n', '    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n', '\n', '    // The pricing plan determining the fee to be paid in NOKU tokens by customers\n', '    NokuPricingPlan public pricingPlan;\n', '\n', '    constructor(address _pricingPlan) internal {\n', '        require(_pricingPlan.isContract(), "_pricingPlan is not contract");\n', '\n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '    }\n', '\n', '    function setPricingPlan(address _pricingPlan) public onlyOwner {\n', '        require(_pricingPlan.isContract(), "_pricingPlan is not contract");\n', '        require(NokuPricingPlan(_pricingPlan) != pricingPlan, "_pricingPlan equal to current");\n', '        \n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '\n', '        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\n', '    }\n', '}\n', '\n', '// File: contracts/NokuCustomERC20Service.sol\n', '\n', '/**\n', '* @dev The NokuCustomERC2Service contract .\n', '*/\n', 'contract NokuCustomERC20Service is NokuCustomService {\n', '    event LogNokuCustomERC20ServiceCreated(address caller, address indexed pricingPlan);\n', '\n', '    uint256 public constant CREATE_AMOUNT = 1 * 10**18;\n', '\n', '    uint8 public constant DECIMALS = 18;\n', '\n', '    bytes32 public constant CUSTOM_ERC20_CREATE_SERVICE_NAME = "NokuCustomERC20.create";\n', '\n', '    constructor(address _pricingPlan) NokuCustomService(_pricingPlan) public {\n', '        emit LogNokuCustomERC20ServiceCreated(msg.sender, _pricingPlan);\n', '    }\n', '\n', '    // TODO: REMOVE\n', '    function createCustomToken(string _name, string _symbol, uint8 /*_decimals*/) public returns(NokuCustomERC20 customToken) {\n', '        customToken = new NokuCustomERC20(\n', '            _name,\n', '            _symbol,\n', '            DECIMALS,\n', '            block.number,\n', '            block.number,\n', '            pricingPlan,\n', '            owner\n', '        );\n', '\n', '        // Transfer NokuCustomERC20 ownership to the client\n', '        customToken.transferOwnership(msg.sender);\n', '\n', '        require(pricingPlan.payFee(CUSTOM_ERC20_CREATE_SERVICE_NAME, CREATE_AMOUNT, msg.sender), "fee payment failed");\n', '    }\n', '\n', '    function createCustomToken(\n', '        string _name,\n', '        string _symbol,\n', '        uint8 /*_decimals*/,\n', '        uint256 transferableFromBlock,\n', '        uint256 lockEndBlock\n', '    )\n', '    public returns(NokuCustomERC20 customToken)\n', '    {\n', '        customToken = new NokuCustomERC20(\n', '            _name,\n', '            _symbol,\n', '            DECIMALS,\n', '            transferableFromBlock,\n', '            lockEndBlock,\n', '            pricingPlan,\n', '            owner\n', '        );\n', '\n', '        // Transfer NokuCustomERC20 ownership to the client\n', '        customToken.transferOwnership(msg.sender);\n', '\n', '        require(pricingPlan.payFee(CUSTOM_ERC20_CREATE_SERVICE_NAME, CREATE_AMOUNT, msg.sender), "fee payment failed");\n', '    }\n', '}']