['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20Token {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Zombie Token";\n', '    string public constant symbol = "ZOB";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, uint256 value, address indexed to, bytes extraData);\n', '\n', '    function ERC20Token() public {\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        // Check if the sender has enough balance\n', '        require(balanceOf[from] >= value);\n', '\n', '        // Check for overflow\n', '        require(balanceOf[to] + value > balanceOf[to]);\n', '\n', '        // Save this for an amount double check assertion\n', '        uint256 previousBalances = balanceOf[from].add(balanceOf[to]);\n', '\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '\n', '        Transfer(from, to, value);\n', '\n', '        // Asserts for duplicate check. Should never fail.\n', '        assert(balanceOf[from].add(balanceOf[to]) == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `value` tokens to `to` from your account\n', '     *\n', '     * @param to The address of the recipient\n', '     * @param value the amount to send\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool success)  {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `value` tokens to `to` in behalf of `from`\n', '     *\n', '     * @param from The address of the sender\n', '     * @param to The address of the recipient\n', '     * @param value the amount to send\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n', '        require(value <= allowance[from][msg.sender]);\n', '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `spender` to spend no more than `value` tokens in your behalf\n', '     *\n', '     * @param spender The address authorized to spend\n', '     * @param value the max amount they can spend\n', '     * @param extraData some extra information to send to the approved contract\n', '     */\n', '    function approve(address spender, uint256 value, bytes extraData) public returns (bool success) {\n', '        allowance[msg.sender][spender] = value;\n', '        Approval(msg.sender, value, spender, extraData);\n', '        return true;\n', '    }\n', '\n', '    function _mint(address to, uint256 value) internal {\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        totalSupply = totalSupply.add(value);\n', '\n', '        Transfer(0x0, to, value);\n', '    }\n', '}\n', '\n', 'contract zombieToken is Ownable, ERC20Token {\n', '\n', '    address public invadeAddress;\n', '    address public creatorAddress;\n', '    uint public preMining = 1000000 * 10 ** 18; //for test purpose\n', '\n', '    function zombieToken() public {\n', '        balanceOf[msg.sender] = preMining;\n', '        totalSupply = preMining;\n', '    }\n', '\n', '    function setInvadeAddr(address addr)public onlyOwner {\n', '        invadeAddress = addr;\n', '    }\n', '    \n', '    function setcreatorAddr(address addr)public onlyOwner {\n', '        creatorAddress = addr;\n', '    }\n', '    \n', '    function mint(address to, uint256 value) public returns (bool success) {\n', '        require(msg.sender==invadeAddress);\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '\n', '    function buyCard(address from, uint256 value) public returns (bool success) {\n', '        require(msg.sender==creatorAddress);\n', '        _transfer(from, creatorAddress, value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20Token {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "Zombie Token";\n', '    string public constant symbol = "ZOB";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, uint256 value, address indexed to, bytes extraData);\n', '\n', '    function ERC20Token() public {\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        // Check if the sender has enough balance\n', '        require(balanceOf[from] >= value);\n', '\n', '        // Check for overflow\n', '        require(balanceOf[to] + value > balanceOf[to]);\n', '\n', '        // Save this for an amount double check assertion\n', '        uint256 previousBalances = balanceOf[from].add(balanceOf[to]);\n', '\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '\n', '        Transfer(from, to, value);\n', '\n', '        // Asserts for duplicate check. Should never fail.\n', '        assert(balanceOf[from].add(balanceOf[to]) == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `value` tokens to `to` from your account\n', '     *\n', '     * @param to The address of the recipient\n', '     * @param value the amount to send\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool success)  {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `value` tokens to `to` in behalf of `from`\n', '     *\n', '     * @param from The address of the sender\n', '     * @param to The address of the recipient\n', '     * @param value the amount to send\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n', '        require(value <= allowance[from][msg.sender]);\n', '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `spender` to spend no more than `value` tokens in your behalf\n', '     *\n', '     * @param spender The address authorized to spend\n', '     * @param value the max amount they can spend\n', '     * @param extraData some extra information to send to the approved contract\n', '     */\n', '    function approve(address spender, uint256 value, bytes extraData) public returns (bool success) {\n', '        allowance[msg.sender][spender] = value;\n', '        Approval(msg.sender, value, spender, extraData);\n', '        return true;\n', '    }\n', '\n', '    function _mint(address to, uint256 value) internal {\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        totalSupply = totalSupply.add(value);\n', '\n', '        Transfer(0x0, to, value);\n', '    }\n', '}\n', '\n', 'contract zombieToken is Ownable, ERC20Token {\n', '\n', '    address public invadeAddress;\n', '    address public creatorAddress;\n', '    uint public preMining = 1000000 * 10 ** 18; //for test purpose\n', '\n', '    function zombieToken() public {\n', '        balanceOf[msg.sender] = preMining;\n', '        totalSupply = preMining;\n', '    }\n', '\n', '    function setInvadeAddr(address addr)public onlyOwner {\n', '        invadeAddress = addr;\n', '    }\n', '    \n', '    function setcreatorAddr(address addr)public onlyOwner {\n', '        creatorAddress = addr;\n', '    }\n', '    \n', '    function mint(address to, uint256 value) public returns (bool success) {\n', '        require(msg.sender==invadeAddress);\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '\n', '    function buyCard(address from, uint256 value) public returns (bool success) {\n', '        require(msg.sender==creatorAddress);\n', '        _transfer(from, creatorAddress, value);\n', '        return true;\n', '    }\n', '}']
