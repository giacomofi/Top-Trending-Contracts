['pragma solidity ^ 0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns(uint256);\n', '    function balanceOf(address who) public view returns(uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping(address => uint256) balances;\n', '    \n', '    uint256 totalSupply_;\n', '    \n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '    function approve(address spender, uint256 value) public returns(bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require((_value != 0) && (allowed[msg.sender][_spender] != 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '    address public pendingOwner;\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() onlyPendingOwner public {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Claimable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        return _mint(_to, _amount);\n', '    }\n', '\n', '    function _mint(address _to, uint256 _amount) internal canMint returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() public onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Claimable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        ERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        internal\n', '    {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '\n', '    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(_releaseTime > block.timestamp);\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    function canRelease() public view returns (bool){\n', '        return block.timestamp >= releaseTime;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(canRelease());\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale{\n', '    using SafeMath for uint256;\n', '\n', '    enum TokenLockType { TYPE_NOT_LOCK, TYPE_SEED_INVESTOR, TYPE_PRE_SALE, TYPE_TEAM}\n', '    uint256 internal constant UINT256_MAX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '    uint8 internal constant SEED_INVESTOR_BONUS_RATE = 50;\n', '    uint256 internal constant MAX_SALECOUNT_PER_ADDRESS = 30;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per ether. eg: 1 ETH = 5000 ISC\n', '    uint256 public rate = 5000;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    Phase[] internal phases;\n', '\n', '    struct Phase {\n', '        uint256 till;\n', '        uint256 bonusRate;\n', '    }\n', '\n', '    uint256 public currentPhase = 0;\n', '    mapping (address => uint256 ) public saleCount;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    \n', '    /**\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     */\n', '    function Crowdsale(address _wallet) public {\n', '        require(_wallet != address(0));\n', '\n', '        phases.push(Phase({ till: 1527782400, bonusRate: 30 })); // 2018/6/01 00:00 UTC +8\n', '        phases.push(Phase({ till: 1531238400, bonusRate: 20 })); // 2018/07/11 00:00 UTC +8\n', '        phases.push(Phase({ till: 1533916800, bonusRate: 10 })); // 2018/08/11 00:00 UTC +8\n', '        phases.push(Phase({ till: UINT256_MAX, bonusRate: 0 })); // unlimited\n', '\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', '     * @param _beneficiary Address performing the token purchase\n', '     */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        uint256 nowTime = block.timestamp;\n', '        // this loop moves phases and insures correct stage according to date\n', '        while (currentPhase < phases.length && phases[currentPhase].till < nowTime) {\n', '            currentPhase = currentPhase.add(1);\n', '        }\n', '\n', '        //check the min ether in pre-sale phase\n', '        if (currentPhase == 0) {\n', '            require(weiAmount >= 1 ether);\n', '        }\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        // calculate token lock type\n', '        TokenLockType lockType = _getTokenLockType(weiAmount);\n', '\n', '        if (lockType != TokenLockType.TYPE_NOT_LOCK) {\n', '            require(saleCount[_beneficiary].add(1) <= MAX_SALECOUNT_PER_ADDRESS);\n', '            saleCount[_beneficiary] = saleCount[_beneficiary].add(1);\n', '        }\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _deliverTokens(_beneficiary, tokens, lockType);\n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            _beneficiary,\n', '            weiAmount,\n', '            tokens\n', '        );\n', '\n', '        _forwardFunds();\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state \n', '     *      when conditions are not met. Use super to concatenate validations.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(currentPhase < phases.length);\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which \n', '     *      the crowdsale ultimately gets and sends its tokens.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount, TokenLockType lockType) internal {\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 tokens = _weiAmount.mul(rate);\n', '        uint256 bonusRate = 0;\n', '        if (_weiAmount >= 1000 ether) {\n', '            bonusRate = SEED_INVESTOR_BONUS_RATE;\n', '        } else {\n', '            bonusRate = phases[currentPhase].bonusRate;\n', '        }\n', '        uint256 bonus = tokens.mul(bonusRate).div(uint256(100));        \n', '        return tokens.add(bonus);\n', '    }\n', '\n', '    /**\n', '     * @dev get the token lock type\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return token lock type\n', '     */\n', '    function _getTokenLockType(uint256 _weiAmount) internal view returns (TokenLockType) {\n', '        TokenLockType lockType = TokenLockType.TYPE_NOT_LOCK;\n', '        if (_weiAmount >= 1000 ether) {\n', '            lockType = TokenLockType.TYPE_SEED_INVESTOR;\n', '        } else if (currentPhase == 0 ) {\n', '            lockType = TokenLockType.TYPE_PRE_SALE;\n', '        }\n', '        return lockType;\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', 'contract StopableCrowdsale is Crowdsale, Claimable{\n', '\n', '    bool public crowdsaleStopped = false;\n', '    /**\n', '     * @dev Reverts if not in crowdsale time range.\n', '     */\n', '    modifier onlyNotStopped {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(!crowdsaleStopped);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring to be within contributing period\n', '     * @param _beneficiary Token purchaser\n', '     * @param _weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view onlyNotStopped {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    function stopCrowdsale() public onlyOwner {\n', '        require(!crowdsaleStopped);\n', '        crowdsaleStopped = true;\n', '    }\n', '\n', '    function startCrowdsale() public onlyOwner {\n', '        require(crowdsaleStopped);\n', '        crowdsaleStopped = false;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ISCoin\n', ' * @dev IS Coin contract\n', ' */\n', 'contract ISCoin is PausableToken, MintableToken, BurnableToken, StopableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "Imperial Star Coin";\n', '    string public symbol = "ISC";\n', '    uint8 public decimals = 18;\n', '\n', '    mapping (address => address[] ) public balancesLocked;\n', '\n', '    function ISCoin(address _wallet) public Crowdsale(_wallet) {}\n', '\n', '\n', '    function setRate(uint256 _rate) public onlyOwner onlyNotStopped {\n', '        require(_rate > 0);\n', '        rate = _rate;\n', '    }\n', '\n', '    function setWallet(address _wallet) public onlyOwner onlyNotStopped {\n', '        require(_wallet != address(0));\n', '        wallet = _wallet;\n', '    }    \n', '\n', '    /**\n', '     * @dev mint timelocked tokens for owner use\n', '    */\n', '    function mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime) \n', '    public onlyOwner canMint returns (TokenTimelock) {\n', '        return _mintTimelocked(_to, _amount, _releaseTime);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the locked balance of the specified address.\n', '     * @param _owner The address to query the locked balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOfLocked(address _owner) public view returns (uint256) {\n', '        address[] memory timelockAddrs = balancesLocked[_owner];\n', '\n', '        uint256 totalLockedBalance = 0;\n', '        for (uint i = 0; i < timelockAddrs.length; i++) {\n', '            totalLockedBalance = totalLockedBalance.add(balances[timelockAddrs[i]]);\n', '        }\n', '        \n', '        return totalLockedBalance;\n', '    }\n', '\n', '    function releaseToken(address _owner) public {\n', '        address[] memory timelockAddrs = balancesLocked[_owner];\n', '        for (uint i = 0; i < timelockAddrs.length; i++) {\n', '            TokenTimelock timelock = TokenTimelock(timelockAddrs[i]);\n', '            if (timelock.canRelease() && balances[timelock] > 0) {\n', '                timelock.release();\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev mint timelocked tokens\n', '    */\n', '    function _mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime)\n', '    internal canMint returns (TokenTimelock) {\n', '        TokenTimelock timelock = new TokenTimelock(this, _to, _releaseTime);\n', '        balancesLocked[_to].push(timelock);\n', '        _mint(timelock, _amount);\n', '        return timelock;\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which \n', '     *      the crowdsale ultimately gets and sends its tokens.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount, TokenLockType lockType) internal {\n', '        if (lockType == TokenLockType.TYPE_NOT_LOCK) {\n', '            _mint(_beneficiary, _tokenAmount);\n', '        } else if (lockType == TokenLockType.TYPE_SEED_INVESTOR) {\n', '            //seed insvestor will be locked for 6 months and then unlocked at one time\n', '            _mintTimelocked(_beneficiary, _tokenAmount, now + 6 * 30 days);\n', '        } else if (lockType == TokenLockType.TYPE_PRE_SALE) {\n', '            //Pre-sale will be locked for 6 months and unlocked in 3 times(every 2 months)\n', '            uint256 amount1 = _tokenAmount.mul(30).div(100);    //first unlock 30%\n', '            uint256 amount2 = _tokenAmount.mul(30).div(100);    //second unlock 30%\n', '            uint256 amount3 = _tokenAmount.sub(amount1).sub(amount2);   //third unlock 50%\n', '            uint256 releaseTime1 = now + 2 * 30 days;\n', '            uint256 releaseTime2 = now + 4 * 30 days;\n', '            uint256 releaseTime3 = now + 6 * 30 days;\n', '            _mintTimelocked(_beneficiary, amount1, releaseTime1);\n', '            _mintTimelocked(_beneficiary, amount2, releaseTime2);\n', '            _mintTimelocked(_beneficiary, amount3, releaseTime3);\n', '        }\n', '    }\n', '}']
['pragma solidity ^ 0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns(uint256);\n', '    function balanceOf(address who) public view returns(uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping(address => uint256) balances;\n', '    \n', '    uint256 totalSupply_;\n', '    \n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '    function approve(address spender, uint256 value) public returns(bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require((_value != 0) && (allowed[msg.sender][_spender] != 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '    address public pendingOwner;\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() onlyPendingOwner public {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Claimable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        return _mint(_to, _amount);\n', '    }\n', '\n', '    function _mint(address _to, uint256 _amount) internal canMint returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() public onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Claimable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '    function _burn(address _who, uint256 _value) internal {\n', '        require(_value <= balances[_who]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        ERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        internal\n', '    {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '\n', '    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(_releaseTime > block.timestamp);\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    function canRelease() public view returns (bool){\n', '        return block.timestamp >= releaseTime;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(canRelease());\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale{\n', '    using SafeMath for uint256;\n', '\n', '    enum TokenLockType { TYPE_NOT_LOCK, TYPE_SEED_INVESTOR, TYPE_PRE_SALE, TYPE_TEAM}\n', '    uint256 internal constant UINT256_MAX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '    uint8 internal constant SEED_INVESTOR_BONUS_RATE = 50;\n', '    uint256 internal constant MAX_SALECOUNT_PER_ADDRESS = 30;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per ether. eg: 1 ETH = 5000 ISC\n', '    uint256 public rate = 5000;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    Phase[] internal phases;\n', '\n', '    struct Phase {\n', '        uint256 till;\n', '        uint256 bonusRate;\n', '    }\n', '\n', '    uint256 public currentPhase = 0;\n', '    mapping (address => uint256 ) public saleCount;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    \n', '    /**\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     */\n', '    function Crowdsale(address _wallet) public {\n', '        require(_wallet != address(0));\n', '\n', '        phases.push(Phase({ till: 1527782400, bonusRate: 30 })); // 2018/6/01 00:00 UTC +8\n', '        phases.push(Phase({ till: 1531238400, bonusRate: 20 })); // 2018/07/11 00:00 UTC +8\n', '        phases.push(Phase({ till: 1533916800, bonusRate: 10 })); // 2018/08/11 00:00 UTC +8\n', '        phases.push(Phase({ till: UINT256_MAX, bonusRate: 0 })); // unlimited\n', '\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', '     * @param _beneficiary Address performing the token purchase\n', '     */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        uint256 nowTime = block.timestamp;\n', '        // this loop moves phases and insures correct stage according to date\n', '        while (currentPhase < phases.length && phases[currentPhase].till < nowTime) {\n', '            currentPhase = currentPhase.add(1);\n', '        }\n', '\n', '        //check the min ether in pre-sale phase\n', '        if (currentPhase == 0) {\n', '            require(weiAmount >= 1 ether);\n', '        }\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        // calculate token lock type\n', '        TokenLockType lockType = _getTokenLockType(weiAmount);\n', '\n', '        if (lockType != TokenLockType.TYPE_NOT_LOCK) {\n', '            require(saleCount[_beneficiary].add(1) <= MAX_SALECOUNT_PER_ADDRESS);\n', '            saleCount[_beneficiary] = saleCount[_beneficiary].add(1);\n', '        }\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _deliverTokens(_beneficiary, tokens, lockType);\n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            _beneficiary,\n', '            weiAmount,\n', '            tokens\n', '        );\n', '\n', '        _forwardFunds();\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state \n', '     *      when conditions are not met. Use super to concatenate validations.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(currentPhase < phases.length);\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which \n', '     *      the crowdsale ultimately gets and sends its tokens.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount, TokenLockType lockType) internal {\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 tokens = _weiAmount.mul(rate);\n', '        uint256 bonusRate = 0;\n', '        if (_weiAmount >= 1000 ether) {\n', '            bonusRate = SEED_INVESTOR_BONUS_RATE;\n', '        } else {\n', '            bonusRate = phases[currentPhase].bonusRate;\n', '        }\n', '        uint256 bonus = tokens.mul(bonusRate).div(uint256(100));        \n', '        return tokens.add(bonus);\n', '    }\n', '\n', '    /**\n', '     * @dev get the token lock type\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return token lock type\n', '     */\n', '    function _getTokenLockType(uint256 _weiAmount) internal view returns (TokenLockType) {\n', '        TokenLockType lockType = TokenLockType.TYPE_NOT_LOCK;\n', '        if (_weiAmount >= 1000 ether) {\n', '            lockType = TokenLockType.TYPE_SEED_INVESTOR;\n', '        } else if (currentPhase == 0 ) {\n', '            lockType = TokenLockType.TYPE_PRE_SALE;\n', '        }\n', '        return lockType;\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', 'contract StopableCrowdsale is Crowdsale, Claimable{\n', '\n', '    bool public crowdsaleStopped = false;\n', '    /**\n', '     * @dev Reverts if not in crowdsale time range.\n', '     */\n', '    modifier onlyNotStopped {\n', '        // solium-disable-next-line security/no-block-members\n', '        require(!crowdsaleStopped);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring to be within contributing period\n', '     * @param _beneficiary Token purchaser\n', '     * @param _weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view onlyNotStopped {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    function stopCrowdsale() public onlyOwner {\n', '        require(!crowdsaleStopped);\n', '        crowdsaleStopped = true;\n', '    }\n', '\n', '    function startCrowdsale() public onlyOwner {\n', '        require(crowdsaleStopped);\n', '        crowdsaleStopped = false;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ISCoin\n', ' * @dev IS Coin contract\n', ' */\n', 'contract ISCoin is PausableToken, MintableToken, BurnableToken, StopableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "Imperial Star Coin";\n', '    string public symbol = "ISC";\n', '    uint8 public decimals = 18;\n', '\n', '    mapping (address => address[] ) public balancesLocked;\n', '\n', '    function ISCoin(address _wallet) public Crowdsale(_wallet) {}\n', '\n', '\n', '    function setRate(uint256 _rate) public onlyOwner onlyNotStopped {\n', '        require(_rate > 0);\n', '        rate = _rate;\n', '    }\n', '\n', '    function setWallet(address _wallet) public onlyOwner onlyNotStopped {\n', '        require(_wallet != address(0));\n', '        wallet = _wallet;\n', '    }    \n', '\n', '    /**\n', '     * @dev mint timelocked tokens for owner use\n', '    */\n', '    function mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime) \n', '    public onlyOwner canMint returns (TokenTimelock) {\n', '        return _mintTimelocked(_to, _amount, _releaseTime);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the locked balance of the specified address.\n', '     * @param _owner The address to query the locked balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOfLocked(address _owner) public view returns (uint256) {\n', '        address[] memory timelockAddrs = balancesLocked[_owner];\n', '\n', '        uint256 totalLockedBalance = 0;\n', '        for (uint i = 0; i < timelockAddrs.length; i++) {\n', '            totalLockedBalance = totalLockedBalance.add(balances[timelockAddrs[i]]);\n', '        }\n', '        \n', '        return totalLockedBalance;\n', '    }\n', '\n', '    function releaseToken(address _owner) public {\n', '        address[] memory timelockAddrs = balancesLocked[_owner];\n', '        for (uint i = 0; i < timelockAddrs.length; i++) {\n', '            TokenTimelock timelock = TokenTimelock(timelockAddrs[i]);\n', '            if (timelock.canRelease() && balances[timelock] > 0) {\n', '                timelock.release();\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev mint timelocked tokens\n', '    */\n', '    function _mintTimelocked(address _to, uint256 _amount, uint256 _releaseTime)\n', '    internal canMint returns (TokenTimelock) {\n', '        TokenTimelock timelock = new TokenTimelock(this, _to, _releaseTime);\n', '        balancesLocked[_to].push(timelock);\n', '        _mint(timelock, _amount);\n', '        return timelock;\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which \n', '     *      the crowdsale ultimately gets and sends its tokens.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount, TokenLockType lockType) internal {\n', '        if (lockType == TokenLockType.TYPE_NOT_LOCK) {\n', '            _mint(_beneficiary, _tokenAmount);\n', '        } else if (lockType == TokenLockType.TYPE_SEED_INVESTOR) {\n', '            //seed insvestor will be locked for 6 months and then unlocked at one time\n', '            _mintTimelocked(_beneficiary, _tokenAmount, now + 6 * 30 days);\n', '        } else if (lockType == TokenLockType.TYPE_PRE_SALE) {\n', '            //Pre-sale will be locked for 6 months and unlocked in 3 times(every 2 months)\n', '            uint256 amount1 = _tokenAmount.mul(30).div(100);    //first unlock 30%\n', '            uint256 amount2 = _tokenAmount.mul(30).div(100);    //second unlock 30%\n', '            uint256 amount3 = _tokenAmount.sub(amount1).sub(amount2);   //third unlock 50%\n', '            uint256 releaseTime1 = now + 2 * 30 days;\n', '            uint256 releaseTime2 = now + 4 * 30 days;\n', '            uint256 releaseTime3 = now + 6 * 30 days;\n', '            _mintTimelocked(_beneficiary, amount1, releaseTime1);\n', '            _mintTimelocked(_beneficiary, amount2, releaseTime2);\n', '            _mintTimelocked(_beneficiary, amount3, releaseTime3);\n', '        }\n', '    }\n', '}']
