['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract IERC20{\n', '  function allowance(address owner, address spender) external view returns (uint);\n', '  function transferFrom(address from, address to, uint value) external returns (bool);\n', '  function approve(address spender, uint value) external returns (bool);\n', '  function totalSupply() external view returns (uint);\n', '  function balanceOf(address who) external view returns (uint);\n', '  function transfer(address to, uint value) external returns (bool);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'contract IERC20Sec is IERC20 {\n', '  event ReleaseDividendsRights(address indexed _for, uint256 value);\n', '  event AcceptDividends(uint256 value);\n', '\n', '  function dividendsRightsOf(address _owner) external view returns (uint balance);\n', '  function releaseDividendsRights(uint _value) external returns(bool);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20{\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) internal balances;\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '\n', '  uint internal totalSupply_;\n', '\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() external view returns (uint) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value The amount of tokens to be transferred\n', '   */\n', '  function transfer_(address _from, address _to, uint _value) internal returns (bool) {\n', '    if(_from != _to) {\n', '      uint _bfrom = balances[_from];\n', '      uint _bto = balances[_to];\n', '      require(_to != address(0));\n', '      require(_value <= _bfrom);\n', '      balances[_from] = _bfrom.sub(_value);\n', '      balances[_to] = _bto.add(_value);\n', '    }\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) external returns (bool) {\n', '    return transfer_(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) external returns (bool) {\n', '    uint _allowed = allowed[_from][msg.sender];\n', '    require(_value <= _allowed);\n', '    allowed[_from][msg.sender] = _allowed.sub(_value);\n', '    return transfer_(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) external view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) external returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) external view returns (uint) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) external returns (bool) {\n', '    uint _allowed = allowed[msg.sender][_spender];\n', '    _allowed = _allowed.add(_addedValue);\n', '    allowed[msg.sender][_spender] = _allowed;\n', '    emit Approval(msg.sender, _spender, _allowed);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool) {\n', '    uint _allowed = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > _allowed) {\n', '      _allowed = 0;\n', '    } else {\n', '      _allowed = _allowed.sub(_subtractedValue);\n', '    }\n', '    allowed[msg.sender][_spender] = _allowed;\n', '    emit Approval(msg.sender, _spender, _allowed);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ICassette {\n', '  uint8 constant CT_ETHER = 0x01;\n', '  uint8 constant CT_TOKEN = 0x02;\n', '  \n', '\n', '  function getCassetteSize_() internal view returns(uint);\n', '  function acceptAbstractToken_(uint _value) internal returns(bool);\n', '  function releaseAbstractToken_(address _for, uint _value) internal returns(bool);\n', '  function getCassetteType_() internal pure returns(uint8);\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard token with dividends distribution support\n', ' */\n', 'contract ERC20Sec is IERC20, IERC20Sec, ERC20, ICassette {\n', '  using SafeMath for uint;\n', '\n', '  uint constant DECIMAL_MULTIPLIER = 10 ** 18;\n', '  uint constant INT256_MAX = 1 << 255 - 1;\n', '\n', '  mapping (address => uint) internal dividendsRightsFix;\n', '  uint internal dividendsPerToken;\n', '\n', '  /**\n', '  * @dev Gets the dividends rights of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount of dividends rights owned by the passed address.\n', '  */\n', '  function dividendsRightsOf(address _owner) external view returns (uint) {\n', '    return dividendsRightsOf_(_owner);\n', '  }\n', '\n', '  function dividendsRightsOf_(address _owner) internal view returns (uint) {\n', '    uint rights = dividendsPerToken * balances[_owner] / DECIMAL_MULTIPLIER + dividendsRightsFix[_owner];\n', '    return int(rights) < 0 ? 0 : rights;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev release dividends rights\n', '  * @param _value The amount of dividends to be transferred.\n', '  * @param _for The address to transfer for.\n', '  */\n', '  function releaseDividendsRights_(address _for, uint _value) internal returns(bool) {\n', '    uint _dividendsRights = dividendsRightsOf_(_for);\n', '    require(_dividendsRights >= _value);\n', '    dividendsRightsFix[_for] -= _value;\n', '    releaseAbstractToken_(_for, _value);\n', '    emit ReleaseDividendsRights(_for, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev release dividends rights\n', '  * @param _value The amount of dividends to be transferred.\n', '  */\n', '  function releaseDividendsRights(uint _value) external returns(bool) {\n', '    return releaseDividendsRights_(msg.sender, _value);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Update dividends rights fix\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amount of tokens to be transferred\n', '   */\n', '  function dividendsRightsFixUpdate_(address _from, address _to, uint _value) private {\n', '    if (_from != _to) {\n', '      uint _dividendsPerToken = dividendsPerToken;\n', '      uint _balanceFrom = balances[_from];\n', '      uint _balanceTo = balances[_to];\n', '      dividendsRightsFix[_from] += _dividendsPerToken * _balanceFrom / DECIMAL_MULTIPLIER - \n', '        _dividendsPerToken * (_balanceFrom - _value) / DECIMAL_MULTIPLIER;\n', '      dividendsRightsFix[_to] += _dividendsPerToken * _balanceTo / DECIMAL_MULTIPLIER - \n', '        _dividendsPerToken * (_balanceTo + _value) / DECIMAL_MULTIPLIER; \n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) external returns (bool) {\n', '    dividendsRightsFixUpdate_(msg.sender, _to, _value);\n', '    return transfer_(msg.sender, _to, _value);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) external returns (bool) {\n', '    uint _allowed = allowed[_from][msg.sender];\n', '    require(_value <= _allowed);\n', '    allowed[_from][msg.sender] = _allowed.sub(_value);\n', '    dividendsRightsFixUpdate_(_from, _to, _value);\n', '    return transfer_(_from, _to, _value);\n', '  }\n', '\n', '\n', '\n', '  function () public payable {\n', '    releaseDividendsRights_(msg.sender, dividendsRightsOf_(msg.sender));\n', '    if(msg.value > 0){\n', '      msg.sender.transfer(msg.value);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Accept dividends in ether\n', '   */\n', '\n', '  function acceptDividends(uint _tvalue) public payable {\n', '    uint _value;\n', '    if(getCassetteType_()==CT_ETHER) {\n', '      _value = msg.value;\n', '    } else if (getCassetteType_()==CT_TOKEN) {\n', '      _value = _tvalue;\n', '      require(acceptAbstractToken_(_value));\n', '    } else revert();\n', '    uint _dividendsPerToken = dividendsPerToken;\n', '    uint _totalSupply = totalSupply_;\n', '    require(_totalSupply > 0);\n', '    _dividendsPerToken = _dividendsPerToken.add(_value.mul(DECIMAL_MULTIPLIER)/_totalSupply);\n', '    require(_dividendsPerToken.mul(_totalSupply) <= INT256_MAX);\n', '    dividendsPerToken = _dividendsPerToken;\n', '    emit AcceptDividends(_value);\n', '  }\n', '}\n', '\n', '\n', 'contract MultiOwnable{\n', '\n', '  mapping(address => bool) public owners;\n', '  uint internal ownersLength_;\n', '\n', '  modifier onlyOwner() {\n', '    require(owners[msg.sender]);\n', '    _;\n', '  }\n', '  \n', '  event AddOwner(address indexed sender, address indexed owner);\n', '  event RemoveOwner(address indexed sender, address indexed owner);\n', '\n', '  function addOwner_(address _for) internal returns(bool) {\n', '    if(!owners[_for]) {\n', '      ownersLength_ += 1;\n', '      owners[_for] = true;\n', '      emit AddOwner(msg.sender, _for);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function addOwner(address _for) onlyOwner external returns(bool) {\n', '    return addOwner_(_for);\n', '  }\n', '\n', '  function removeOwner_(address _for) internal returns(bool) {\n', '    if((owners[_for]) && (ownersLength_ > 1)){\n', '      ownersLength_ -= 1;\n', '      owners[_for] = false;\n', '      emit RemoveOwner(msg.sender, _for);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function removeOwner(address _for) onlyOwner external returns(bool) {\n', '    return removeOwner_(_for);\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract EtherCassette is ICassette {\n', '  function getCassetteSize_() internal view returns(uint) {\n', '    return address(this).balance;\n', '  }\n', '\n', '  function acceptAbstractToken_(uint _value) internal returns(bool){\n', '    return true;\n', '  }\n', '  function releaseAbstractToken_(address _for, uint _value) internal returns(bool){\n', '    _for.transfer(_value);\n', '    return true;\n', '  }\n', '\n', '  function getCassetteType_() internal pure returns(uint8){\n', '    return CT_ETHER;\n', '  }\n', '\n', '}\n', '\n', 'contract TechHives is ERC20Sec, EtherCassette, MultiOwnable {\n', '  using SafeMath for uint;\n', '  uint constant DECIMAL_MULTIPLIER = 10 ** 18;\n', '  string public name = "TechHives";\n', '  string public symbol = "THV";\n', '  uint8 public decimals = 18;\n', '\n', '  uint mintSupply_;\n', '\n', '  /**\n', '  * @dev release dividends rights for a specified address\n', '  * @param _for The address to transfer for.\n', '  * @param _value The amount of dividends to be transferred.\n', '  */\n', '  function releaseDividendsRightsForce(address _for, uint _value) external onlyOwner returns(bool) {\n', '    return releaseDividendsRights_(_for, _value);\n', '  }\n', '\n', '  function dividendsRightsFixUpdate_(address _for, uint _value) private {\n', '    uint _dividendsPerToken = dividendsPerToken;\n', '    uint _balanceFor = balances[_for];\n', '    dividendsRightsFix[_for] += _dividendsPerToken * _balanceFor / DECIMAL_MULTIPLIER - \n', '      _dividendsPerToken * (_balanceFor + _value) / DECIMAL_MULTIPLIER; \n', '  }\n', '  \n', '  function mint_(address _for, uint _value) internal returns(bool) {\n', '    require (mintSupply_ >= _value);\n', '    dividendsRightsFixUpdate_(_for, _value);\n', '    mintSupply_ = mintSupply_.sub(_value);\n', '    balances[_for] = balances[_for].add(_value);\n', '    totalSupply_ = totalSupply_.add(_value);\n', '    emit Transfer(address(0), _for, _value);\n', '    return true;\n', '  }\n', '\n', '  function mint(address _for, uint _value) external onlyOwner returns(bool) {\n', '    return mint_(_for, _value);\n', '  }\n', '  \n', '  \n', '  function mintSupply() external view returns(uint) {\n', '      return mintSupply_;\n', '  }\n', '\n', '  constructor() public {\n', '    mintSupply_ = 25000 * DECIMAL_MULTIPLIER;\n', '    addOwner_(0x47FC2e245b983A92EB3359F06E31F34B107B6EF6);\n', '    mint_(0x47FC2e245b983A92EB3359F06E31F34B107B6EF6, 10000e18);\n', '    addOwner_(msg.sender);\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract IERC20{\n', '  function allowance(address owner, address spender) external view returns (uint);\n', '  function transferFrom(address from, address to, uint value) external returns (bool);\n', '  function approve(address spender, uint value) external returns (bool);\n', '  function totalSupply() external view returns (uint);\n', '  function balanceOf(address who) external view returns (uint);\n', '  function transfer(address to, uint value) external returns (bool);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'contract IERC20Sec is IERC20 {\n', '  event ReleaseDividendsRights(address indexed _for, uint256 value);\n', '  event AcceptDividends(uint256 value);\n', '\n', '  function dividendsRightsOf(address _owner) external view returns (uint balance);\n', '  function releaseDividendsRights(uint _value) external returns(bool);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20{\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) internal balances;\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '\n', '  uint internal totalSupply_;\n', '\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() external view returns (uint) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value The amount of tokens to be transferred\n', '   */\n', '  function transfer_(address _from, address _to, uint _value) internal returns (bool) {\n', '    if(_from != _to) {\n', '      uint _bfrom = balances[_from];\n', '      uint _bto = balances[_to];\n', '      require(_to != address(0));\n', '      require(_value <= _bfrom);\n', '      balances[_from] = _bfrom.sub(_value);\n', '      balances[_to] = _bto.add(_value);\n', '    }\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) external returns (bool) {\n', '    return transfer_(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) external returns (bool) {\n', '    uint _allowed = allowed[_from][msg.sender];\n', '    require(_value <= _allowed);\n', '    allowed[_from][msg.sender] = _allowed.sub(_value);\n', '    return transfer_(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) external view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) external returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) external view returns (uint) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) external returns (bool) {\n', '    uint _allowed = allowed[msg.sender][_spender];\n', '    _allowed = _allowed.add(_addedValue);\n', '    allowed[msg.sender][_spender] = _allowed;\n', '    emit Approval(msg.sender, _spender, _allowed);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool) {\n', '    uint _allowed = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > _allowed) {\n', '      _allowed = 0;\n', '    } else {\n', '      _allowed = _allowed.sub(_subtractedValue);\n', '    }\n', '    allowed[msg.sender][_spender] = _allowed;\n', '    emit Approval(msg.sender, _spender, _allowed);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ICassette {\n', '  uint8 constant CT_ETHER = 0x01;\n', '  uint8 constant CT_TOKEN = 0x02;\n', '  \n', '\n', '  function getCassetteSize_() internal view returns(uint);\n', '  function acceptAbstractToken_(uint _value) internal returns(bool);\n', '  function releaseAbstractToken_(address _for, uint _value) internal returns(bool);\n', '  function getCassetteType_() internal pure returns(uint8);\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard token with dividends distribution support\n', ' */\n', 'contract ERC20Sec is IERC20, IERC20Sec, ERC20, ICassette {\n', '  using SafeMath for uint;\n', '\n', '  uint constant DECIMAL_MULTIPLIER = 10 ** 18;\n', '  uint constant INT256_MAX = 1 << 255 - 1;\n', '\n', '  mapping (address => uint) internal dividendsRightsFix;\n', '  uint internal dividendsPerToken;\n', '\n', '  /**\n', '  * @dev Gets the dividends rights of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount of dividends rights owned by the passed address.\n', '  */\n', '  function dividendsRightsOf(address _owner) external view returns (uint) {\n', '    return dividendsRightsOf_(_owner);\n', '  }\n', '\n', '  function dividendsRightsOf_(address _owner) internal view returns (uint) {\n', '    uint rights = dividendsPerToken * balances[_owner] / DECIMAL_MULTIPLIER + dividendsRightsFix[_owner];\n', '    return int(rights) < 0 ? 0 : rights;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev release dividends rights\n', '  * @param _value The amount of dividends to be transferred.\n', '  * @param _for The address to transfer for.\n', '  */\n', '  function releaseDividendsRights_(address _for, uint _value) internal returns(bool) {\n', '    uint _dividendsRights = dividendsRightsOf_(_for);\n', '    require(_dividendsRights >= _value);\n', '    dividendsRightsFix[_for] -= _value;\n', '    releaseAbstractToken_(_for, _value);\n', '    emit ReleaseDividendsRights(_for, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev release dividends rights\n', '  * @param _value The amount of dividends to be transferred.\n', '  */\n', '  function releaseDividendsRights(uint _value) external returns(bool) {\n', '    return releaseDividendsRights_(msg.sender, _value);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Update dividends rights fix\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amount of tokens to be transferred\n', '   */\n', '  function dividendsRightsFixUpdate_(address _from, address _to, uint _value) private {\n', '    if (_from != _to) {\n', '      uint _dividendsPerToken = dividendsPerToken;\n', '      uint _balanceFrom = balances[_from];\n', '      uint _balanceTo = balances[_to];\n', '      dividendsRightsFix[_from] += _dividendsPerToken * _balanceFrom / DECIMAL_MULTIPLIER - \n', '        _dividendsPerToken * (_balanceFrom - _value) / DECIMAL_MULTIPLIER;\n', '      dividendsRightsFix[_to] += _dividendsPerToken * _balanceTo / DECIMAL_MULTIPLIER - \n', '        _dividendsPerToken * (_balanceTo + _value) / DECIMAL_MULTIPLIER; \n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) external returns (bool) {\n', '    dividendsRightsFixUpdate_(msg.sender, _to, _value);\n', '    return transfer_(msg.sender, _to, _value);\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) external returns (bool) {\n', '    uint _allowed = allowed[_from][msg.sender];\n', '    require(_value <= _allowed);\n', '    allowed[_from][msg.sender] = _allowed.sub(_value);\n', '    dividendsRightsFixUpdate_(_from, _to, _value);\n', '    return transfer_(_from, _to, _value);\n', '  }\n', '\n', '\n', '\n', '  function () public payable {\n', '    releaseDividendsRights_(msg.sender, dividendsRightsOf_(msg.sender));\n', '    if(msg.value > 0){\n', '      msg.sender.transfer(msg.value);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Accept dividends in ether\n', '   */\n', '\n', '  function acceptDividends(uint _tvalue) public payable {\n', '    uint _value;\n', '    if(getCassetteType_()==CT_ETHER) {\n', '      _value = msg.value;\n', '    } else if (getCassetteType_()==CT_TOKEN) {\n', '      _value = _tvalue;\n', '      require(acceptAbstractToken_(_value));\n', '    } else revert();\n', '    uint _dividendsPerToken = dividendsPerToken;\n', '    uint _totalSupply = totalSupply_;\n', '    require(_totalSupply > 0);\n', '    _dividendsPerToken = _dividendsPerToken.add(_value.mul(DECIMAL_MULTIPLIER)/_totalSupply);\n', '    require(_dividendsPerToken.mul(_totalSupply) <= INT256_MAX);\n', '    dividendsPerToken = _dividendsPerToken;\n', '    emit AcceptDividends(_value);\n', '  }\n', '}\n', '\n', '\n', 'contract MultiOwnable{\n', '\n', '  mapping(address => bool) public owners;\n', '  uint internal ownersLength_;\n', '\n', '  modifier onlyOwner() {\n', '    require(owners[msg.sender]);\n', '    _;\n', '  }\n', '  \n', '  event AddOwner(address indexed sender, address indexed owner);\n', '  event RemoveOwner(address indexed sender, address indexed owner);\n', '\n', '  function addOwner_(address _for) internal returns(bool) {\n', '    if(!owners[_for]) {\n', '      ownersLength_ += 1;\n', '      owners[_for] = true;\n', '      emit AddOwner(msg.sender, _for);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function addOwner(address _for) onlyOwner external returns(bool) {\n', '    return addOwner_(_for);\n', '  }\n', '\n', '  function removeOwner_(address _for) internal returns(bool) {\n', '    if((owners[_for]) && (ownersLength_ > 1)){\n', '      ownersLength_ -= 1;\n', '      owners[_for] = false;\n', '      emit RemoveOwner(msg.sender, _for);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function removeOwner(address _for) onlyOwner external returns(bool) {\n', '    return removeOwner_(_for);\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract EtherCassette is ICassette {\n', '  function getCassetteSize_() internal view returns(uint) {\n', '    return address(this).balance;\n', '  }\n', '\n', '  function acceptAbstractToken_(uint _value) internal returns(bool){\n', '    return true;\n', '  }\n', '  function releaseAbstractToken_(address _for, uint _value) internal returns(bool){\n', '    _for.transfer(_value);\n', '    return true;\n', '  }\n', '\n', '  function getCassetteType_() internal pure returns(uint8){\n', '    return CT_ETHER;\n', '  }\n', '\n', '}\n', '\n', 'contract TechHives is ERC20Sec, EtherCassette, MultiOwnable {\n', '  using SafeMath for uint;\n', '  uint constant DECIMAL_MULTIPLIER = 10 ** 18;\n', '  string public name = "TechHives";\n', '  string public symbol = "THV";\n', '  uint8 public decimals = 18;\n', '\n', '  uint mintSupply_;\n', '\n', '  /**\n', '  * @dev release dividends rights for a specified address\n', '  * @param _for The address to transfer for.\n', '  * @param _value The amount of dividends to be transferred.\n', '  */\n', '  function releaseDividendsRightsForce(address _for, uint _value) external onlyOwner returns(bool) {\n', '    return releaseDividendsRights_(_for, _value);\n', '  }\n', '\n', '  function dividendsRightsFixUpdate_(address _for, uint _value) private {\n', '    uint _dividendsPerToken = dividendsPerToken;\n', '    uint _balanceFor = balances[_for];\n', '    dividendsRightsFix[_for] += _dividendsPerToken * _balanceFor / DECIMAL_MULTIPLIER - \n', '      _dividendsPerToken * (_balanceFor + _value) / DECIMAL_MULTIPLIER; \n', '  }\n', '  \n', '  function mint_(address _for, uint _value) internal returns(bool) {\n', '    require (mintSupply_ >= _value);\n', '    dividendsRightsFixUpdate_(_for, _value);\n', '    mintSupply_ = mintSupply_.sub(_value);\n', '    balances[_for] = balances[_for].add(_value);\n', '    totalSupply_ = totalSupply_.add(_value);\n', '    emit Transfer(address(0), _for, _value);\n', '    return true;\n', '  }\n', '\n', '  function mint(address _for, uint _value) external onlyOwner returns(bool) {\n', '    return mint_(_for, _value);\n', '  }\n', '  \n', '  \n', '  function mintSupply() external view returns(uint) {\n', '      return mintSupply_;\n', '  }\n', '\n', '  constructor() public {\n', '    mintSupply_ = 25000 * DECIMAL_MULTIPLIER;\n', '    addOwner_(0x47FC2e245b983A92EB3359F06E31F34B107B6EF6);\n', '    mint_(0x47FC2e245b983A92EB3359F06E31F34B107B6EF6, 10000e18);\n', '    addOwner_(msg.sender);\n', '  }\n', '}']
