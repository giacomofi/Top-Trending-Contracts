['/* solhint-disable no-simple-event-func-name */\n', '\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title A token that can decrease its supply\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Address where burned tokens are Transferred.\n', '     * @dev This is useful for blockchain explorers operating on Transfer event.\n', '     */\n', '    address public constant BURN_ADDRESS = address(0x0);\n', '\n', '    /**\n', '     * @dev Tokens destroyed from specified address\n', '     * @param from address The burner\n', '     * @param amount uint256 The amount of destroyed tokens\n', '     */\n', '    event Burned(address indexed from, uint256 amount);\n', '\n', '    modifier onlyHolder(uint256 amount) {\n', '        require(balances[msg.sender] >= amount);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Destroy tokens (reduce total supply)\n', '     * @param amount uint256 The amount of tokens to be burned\n', '     */\n', '    function burn(uint256 amount)\n', '        public\n', '        onlyHolder(amount)\n', '    {\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        totalSupply = totalSupply.sub(amount);\n', '\n', '        Burned(msg.sender, amount);\n', '        Transfer(msg.sender, BURN_ADDRESS, amount);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title A token with modifiable name and symbol\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract DescriptiveToken is BasicToken, Ownable {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    bool public isDescriptionFinalized;\n', '    uint256 public decimals = 18;\n', '\n', '    function DescriptiveToken(\n', '        string _name,\n', '        string _symbol\n', '    )\n', '        public\n', '        onlyNotEmpty(_name)\n', '        onlyNotEmpty(_symbol)\n', '    {\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Logs change of token name and symbol\n', '     * @param name string The new token name\n', '     * @param symbol string The new token symbol\n', '     */\n', '    event DescriptionChanged(string name, string symbol);\n', '\n', '    /**\n', '     * @dev Further changes to name and symbol are forbidden\n', '     */\n', '    event DescriptionFinalized();\n', '\n', '    modifier onlyNotEmpty(string str) {\n', '        require(bytes(str).length > 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyDescriptionNotFinalized() {\n', '        require(!isDescriptionFinalized);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Change name and symbol of tokens\n', '     * @dev May be used in case of symbol collisions in exchanges.\n', '     * @param _name string A new token name\n', '     * @param _symbol string A new token symbol\n', '     */\n', '    function changeDescription(string _name, string _symbol)\n', '        public\n', '        onlyOwner\n', '        onlyDescriptionNotFinalized\n', '        onlyNotEmpty(_name)\n', '        onlyNotEmpty(_symbol)\n', '    {\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        DescriptionChanged(name, symbol);\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents further changes to name and symbol\n', '     */\n', '    function finalizeDescription()\n', '        public\n', '        onlyOwner\n', '        onlyDescriptionNotFinalized\n', '    {\n', '        isDescriptionFinalized = true;\n', '\n', '        DescriptionFinalized();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title A token that can increase its supply in initial period\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract MintableToken is BasicToken, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Address from which minted tokens are Transferred.\n', '     * @dev This is useful for blockchain explorers operating on Transfer event.\n', '     */\n', '    address public constant MINT_ADDRESS = address(0x0);\n', '\n', '    /**\n', '     * @dev Indicates whether creating tokens has finished\n', '     */\n', '    bool public mintingFinished;\n', '\n', '    /**\n', '     * @dev Addresses allowed to create tokens\n', '     */\n', '    mapping (address => bool) public isMintingManager;\n', '\n', '    /**\n', '     * @dev Tokens minted to specified address\n', '     * @param to address The receiver of the tokens\n', '     * @param amount uint256 The amount of tokens\n', '     */\n', '    event Minted(address indexed to, uint256 amount);\n', '\n', '    /**\n', '     * @dev Approves specified address as a Minting Manager\n', '     * @param addr address The approved address\n', '     */\n', '    event MintingManagerApproved(address addr);\n', '\n', '    /**\n', '     * @dev Revokes specified address as a Minting Manager\n', '     * @param addr address The revoked address\n', '     */\n', '    event MintingManagerRevoked(address addr);\n', '\n', '    /**\n', '     * @dev Creation of tokens finished\n', '     */\n', '    event MintingFinished();\n', '\n', '    modifier onlyMintingManager(address addr) {\n', '        require(isMintingManager[addr]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyMintingNotFinished {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve specified address to mint tokens\n', '     * @param addr address The approved Minting Manager address\n', '     */\n', '    function approveMintingManager(address addr)\n', '        public\n', '        onlyOwner\n', '        onlyMintingNotFinished\n', '    {\n', '        isMintingManager[addr] = true;\n', '\n', '        MintingManagerApproved(addr);\n', '    }\n', '\n', '    /**\n', '     * @dev Forbid specified address to mint tokens\n', '     * @param addr address The denied Minting Manager address\n', '     */\n', '    function revokeMintingManager(address addr)\n', '        public\n', '        onlyOwner\n', '        onlyMintingManager(addr)\n', '        onlyMintingNotFinished\n', '    {\n', '        delete isMintingManager[addr];\n', '\n', '        MintingManagerRevoked(addr);\n', '    }\n', '\n', '    /**\n', '     * @dev Create new tokens and transfer them to specified address\n', '     * @param to address The address to transfer to\n', '     * @param amount uint256 The amount to be minted\n', '     */\n', '    function mint(address to, uint256 amount)\n', '        public\n', '        onlyMintingManager(msg.sender)\n', '        onlyMintingNotFinished\n', '    {\n', '        totalSupply = totalSupply.add(amount);\n', '        balances[to] = balances[to].add(amount);\n', '\n', '        Minted(to, amount);\n', '        Transfer(MINT_ADDRESS, to, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Prevent further creation of tokens\n', '     */\n', '    function finishMinting()\n', '        public\n', '        onlyOwner\n', '        onlyMintingNotFinished\n', '    {\n', '        mintingFinished = true;\n', '\n', '        MintingFinished();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title A token that can increase its supply to the specified limit\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract CappedMintableToken is MintableToken {\n', '\n', '    /**\n', '     * @dev Maximum supply that can be minted\n', '     */\n', '    uint256 public maxSupply;\n', '\n', '    function CappedMintableToken(uint256 _maxSupply)\n', '        public\n', '        onlyNotZero(_maxSupply)\n', '    {\n', '        maxSupply = _maxSupply;\n', '    }\n', '\n', '    modifier onlyNotZero(uint256 value) {\n', '        require(value != 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotExceedingMaxSupply(uint256 supply) {\n', '        require(supply <= maxSupply);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Create new tokens and transfer them to specified address\n', '     * @dev Checks against capped max supply of token.\n', '     * @param to address The address to transfer to\n', '     * @param amount uint256 The amount to be minted\n', '     */\n', '    function mint(address to, uint256 amount)\n', '        public\n', '        onlyNotExceedingMaxSupply(totalSupply.add(amount))\n', '    {\n', '        return MintableToken.mint(to, amount);\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/*\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity\n', ' *\n', ' * The MIT License (MIT)\n', ' * Copyright (c) 2016 Smart Contract Solutions, Inc.\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 token with manual initial lock up period\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract ReleasableToken is StandardToken, Ownable {\n', '\n', '    /**\n', '     * @dev Controls whether token transfers are enabled\n', '     * @dev If false, token is in transfer lock up period.\n', '     */\n', '    bool public released;\n', '\n', '    /**\n', '     * @dev Contract or EOA that can enable token transfers\n', '     */\n', '    address public releaseManager;\n', '\n', '    /**\n', '     * @dev Map of addresses allowed to transfer tokens despite the lock up period\n', '     */\n', '    mapping (address => bool) public isTransferManager;\n', '\n', '    /**\n', '     * @dev Specified address set as a Release Manager\n', '     * @param addr address The approved address\n', '     */\n', '    event ReleaseManagerSet(address addr);\n', '\n', '    /**\n', '     * @dev Approves specified address as Transfer Manager\n', '     * @param addr address The approved address\n', '     */\n', '    event TransferManagerApproved(address addr);\n', '\n', '    /**\n', '     * @dev Revokes specified address as Transfer Manager\n', '     * @param addr address The denied address\n', '     */\n', '    event TransferManagerRevoked(address addr);\n', '\n', '    /**\n', '     * @dev Marks token as released (transferable)\n', '     */\n', '    event Released();\n', '\n', '    /**\n', '     * @dev Token is released or specified address is transfer manager\n', '     */\n', '    modifier onlyTransferableFrom(address from) {\n', '        if (!released) {\n', '            require(isTransferManager[from]);\n', '        }\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Specified address is transfer manager\n', '     */\n', '    modifier onlyTransferManager(address addr) {\n', '        require(isTransferManager[addr]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Sender is release manager\n', '     */\n', '    modifier onlyReleaseManager() {\n', '        require(msg.sender == releaseManager);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Token is released (transferable)\n', '     */\n', '    modifier onlyReleased() {\n', '        require(released);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Token is in lock up period\n', '     */\n', '    modifier onlyNotReleased() {\n', '        require(!released);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Set release manager if token not released yet\n', '     * @param addr address The new Release Manager address\n', '     */\n', '    function setReleaseManager(address addr)\n', '        public\n', '        onlyOwner\n', '        onlyNotReleased\n', '    {\n', '        releaseManager = addr;\n', '\n', '        ReleaseManagerSet(addr);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve specified address to make transfers in lock up period\n', '     * @param addr address The approved Transfer Manager address\n', '     */\n', '    function approveTransferManager(address addr)\n', '        public\n', '        onlyOwner\n', '        onlyNotReleased\n', '    {\n', '        isTransferManager[addr] = true;\n', '\n', '        TransferManagerApproved(addr);\n', '    }\n', '\n', '    /**\n', '     * @dev Forbid specified address to make transfers in lock up period\n', '     * @param addr address The denied Transfer Manager address\n', '     */\n', '    function revokeTransferManager(address addr)\n', '        public\n', '        onlyOwner\n', '        onlyTransferManager(addr)\n', '        onlyNotReleased\n', '    {\n', '        delete isTransferManager[addr];\n', '\n', '        TransferManagerRevoked(addr);\n', '    }\n', '\n', '    /**\n', '     * @dev Release token and makes it transferable\n', '     */\n', '    function release()\n', '        public\n', '        onlyReleaseManager\n', '        onlyNotReleased\n', '    {\n', '        released = true;\n', '\n', '        Released();\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token to a specified address\n', '     * @dev Available only after token release\n', '     * @param to address The address to transfer to\n', '     * @param amount uint256 The amount to be transferred\n', '     */\n', '    function transfer(\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        public\n', '        onlyTransferableFrom(msg.sender)\n', '        returns (bool)\n', '    {\n', '        return super.transfer(to, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @dev Available only after token release\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param amount uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        public\n', '        onlyTransferableFrom(from)\n', '        returns (bool)\n', '    {\n', '        return super.transferFrom(from, to, amount);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title OnLive Token\n', ' * @author Jakub Stefanski (https://github.com/jstefanski)\n', ' * @dev Implements ERC20 interface\n', ' * @dev Mintable by selected addresses until sale finishes\n', ' * @dev A cap on total supply of tokens\n', ' * @dev Burnable by anyone\n', ' * @dev Manual lock-up period (non-transferable) with a non-reversible release by the selected address\n', ' * @dev Modifiable symbol and name in case of collision\n', ' *\n', ' * https://github.com/OnLivePlatform/onlive-contracts\n', ' *\n', ' * The BSD 3-Clause Clear License\n', ' * Copyright (c) 2018 OnLive LTD\n', ' */\n', 'contract OnLiveToken is DescriptiveToken, ReleasableToken, CappedMintableToken, BurnableToken {\n', '\n', '    function OnLiveToken(\n', '        string _name,\n', '        string _symbol,\n', '        uint256 _maxSupply\n', '    )\n', '        public\n', '        DescriptiveToken(_name, _symbol)\n', '        CappedMintableToken(_maxSupply)\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '}']