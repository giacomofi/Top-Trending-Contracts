['pragma solidity ^0.4.23;\n', '\n', '/***************************************************\n', 'Externally copied contracts and interfaces.\n', 'Source: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20Basic.sol\n', '***************************************************/\n', '\n', '\n', '/**** ERC20Basic.sol ****/\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**** ERC20Basic.sol ****/\n', '\n', '/**** ERC20.sol ****/\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '/**** ERC20.sol ****/\n', '\n', '/**** SafeMath.sol ****/\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '/**** SafeMath.sol ****/\n', '\n', '/**** Ownable.sol ****/\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '\n', '}\n', '/**** Ownable.sol ****/\n', '\n', '\n', '\n', '\n', '/***************************************************\n', ' * Individually implemented code\n', ' ***************************************************/\n', '\n', '/**\n', ' * @title UChain ERC20 Token\n', ' */\n', 'contract UChainToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    /* Constant variables of the token */\n', '    string constant public name = &#39;UChain Token&#39;;\n', '    string constant public symbol = &#39;UCN&#39;;\n', '    uint8 constant public decimals = 18;\n', '    uint256 constant public decimalFactor = 10 ** uint(decimals);\n', '\n', '    uint256 public totalSupply;\n', '\n', '    /* minting related state */\n', '    bool public isMintingFinished = false;\n', '    mapping(address => bool) public admins;\n', '\n', '    /* vesting related state */\n', '    struct Vesting {\n', '        uint256 vestedUntil;\n', '        uint256 vestedAmount;\n', '    }\n', '\n', '    mapping(address => Vesting) public vestingEntries;\n', '\n', '    /* ERC20 related state */\n', '    bool public isTransferEnabled = false;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowances;\n', '\n', '\n', '    /* custom events */\n', '    event MintFinished();\n', '    event Mint(address indexed _beneficiary, uint256 _value);\n', '    event MintVested(address indexed _beneficiary, uint256 _value);\n', '    event AdminRemoved(address indexed _adminAddress);\n', '    event AdminAdded(address indexed _adminAddress);\n', '\n', '    /**\n', '     * @dev contstructor.\n', '     */\n', '    constructor() public {\n', '        admins[msg.sender] = true;\n', '    }\n', '\n', '    /***************************************************\n', '     * View only methods\n', '     ***************************************************/\n', '\n', '    /**\n', '      * @dev specified in the ERC20 interface, returns the total token supply. Burned tokens are not counted.\n', '      */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply - balances[address(0)];\n', '    }\n', '\n', '    /**\n', '      * @dev Get the token balance for token owner\n', '      * @param _tokenOwner The address of you want to query the balance for\n', '      */\n', '    function balanceOf(address _tokenOwner) public view returns (uint256) {\n', '        return balances[_tokenOwner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _tokenOwner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _tokenOwner, address _spender) public view returns (uint256) {\n', '        return allowances[_tokenOwner][_spender];\n', '    }\n', '\n', '    /***************************************************\n', '     * Admin permission related methods\n', '     ***************************************************/\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyAdmin() {\n', '        require(admins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev remove admin rights\n', '     * @param _adminAddress address to remove from admin list\n', '     */\n', '    function removeAdmin(address _adminAddress) public onlyAdmin {\n', '        delete admins[_adminAddress];\n', '        emit AdminRemoved(_adminAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev give admin rights to address\n', '     * @param _adminAddress address to add to admin list\n', '     */\n', '    function addAdmin(address _adminAddress) public onlyAdmin {\n', '        admins[_adminAddress] = true;\n', '        emit AdminAdded(_adminAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev tells you whether a particular address has admin privileges or not\n', '     * @param _adminAddress address to check whether it has admin privileges\n', '     */\n', '    function isAdmin(address _adminAddress) public view returns (bool) {\n', '        return admins[_adminAddress];\n', '    }\n', '\n', '    /***************************************************\n', '     * Minting related methods\n', '     ***************************************************/\n', '\n', '    function mint(address _beneficiary, uint256 _value) public onlyAdmin returns (bool)  {\n', '        require(!isMintingFinished);\n', '        totalSupply = totalSupply.add(_value);\n', '        balances[_beneficiary] = balances[_beneficiary].add(_value);\n', '        emit Mint(_beneficiary, _value);\n', '        emit Transfer(address(0), _beneficiary, _value);\n', '        return true;\n', '    }\n', '\n', '    function bulkMint(address[] _beneficiaries, uint256[] _values) public onlyAdmin returns (bool)  {\n', '        require(_beneficiaries.length == _values.length);\n', '        for (uint256 i = 0; i < _beneficiaries.length; i = i.add(1)) {\n', '            require(mint(_beneficiaries[i], _values[i]));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function mintVested(uint256 _vestedUntil, address _beneficiary, uint256 _value) public onlyAdmin returns (bool) {\n', '        require(mint(_beneficiary, _value));\n', '        vestingEntries[_beneficiary] = Vesting(_vestedUntil, _value);\n', '        emit MintVested(_beneficiary, _value);\n', '        return true;\n', '    }\n', '\n', '    function bulkMintVested(uint256 _vestedUntil, address[] _beneficiaries, uint256[] _values) public onlyAdmin returns (bool)  {\n', '        require(_beneficiaries.length == _values.length);\n', '        for (uint256 i = 0; i < _beneficiaries.length; i = i.add(1)) {\n', '            require(mintVested(_vestedUntil, _beneficiaries[i], _values[i]));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev finishes the minting. After this call no more tokens can be minted.\n', '     */\n', '    function finishMinting() public onlyAdmin {\n', '        isMintingFinished = true;\n', '    }\n', '\n', '    /***************************************************\n', '     * Vesting related methods\n', '     ***************************************************/\n', '    function getNonVestedBalanceOf(address _tokenOwner) public view returns (uint256) {\n', '        if (block.timestamp < vestingEntries[_tokenOwner].vestedUntil) {\n', '            return balances[_tokenOwner].sub(vestingEntries[_tokenOwner].vestedAmount);\n', '        } else {\n', '            return balances[_tokenOwner];\n', '        }\n', '    }\n', '\n', '    /***************************************************\n', '     * Basic Token operations\n', '     * Source: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol\n', '     ***************************************************/\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferEnabled);\n', '        require(_to != address(0));\n', '        require(_value <= getNonVestedBalanceOf(msg.sender));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /***************************************************\n', '     * Standard Token operations\n', '     * Source: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol\n', '     ***************************************************/\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferEnabled);\n', '        require(_to != address(0));\n', '        require(_value <= getNonVestedBalanceOf(_from));\n', '        require(_value <= allowances[_from][msg.sender]);\n', '\n', '        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev sets the right to transfer tokens or not.\n', '     * @param _isTransferEnabled the new state to set\n', '     */\n', '    function setIsTransferEnabled(bool _isTransferEnabled) public onlyAdmin {\n', '        isTransferEnabled = _isTransferEnabled;\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/***************************************************\n', 'Externally copied contracts and interfaces.\n', 'Source: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20Basic.sol\n', '***************************************************/\n', '\n', '\n', '/**** ERC20Basic.sol ****/\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**** ERC20Basic.sol ****/\n', '\n', '/**** ERC20.sol ****/\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '/**** ERC20.sol ****/\n', '\n', '/**** SafeMath.sol ****/\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '/**** SafeMath.sol ****/\n', '\n', '/**** Ownable.sol ****/\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '\n', '}\n', '/**** Ownable.sol ****/\n', '\n', '\n', '\n', '\n', '/***************************************************\n', ' * Individually implemented code\n', ' ***************************************************/\n', '\n', '/**\n', ' * @title UChain ERC20 Token\n', ' */\n', 'contract UChainToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    /* Constant variables of the token */\n', "    string constant public name = 'UChain Token';\n", "    string constant public symbol = 'UCN';\n", '    uint8 constant public decimals = 18;\n', '    uint256 constant public decimalFactor = 10 ** uint(decimals);\n', '\n', '    uint256 public totalSupply;\n', '\n', '    /* minting related state */\n', '    bool public isMintingFinished = false;\n', '    mapping(address => bool) public admins;\n', '\n', '    /* vesting related state */\n', '    struct Vesting {\n', '        uint256 vestedUntil;\n', '        uint256 vestedAmount;\n', '    }\n', '\n', '    mapping(address => Vesting) public vestingEntries;\n', '\n', '    /* ERC20 related state */\n', '    bool public isTransferEnabled = false;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowances;\n', '\n', '\n', '    /* custom events */\n', '    event MintFinished();\n', '    event Mint(address indexed _beneficiary, uint256 _value);\n', '    event MintVested(address indexed _beneficiary, uint256 _value);\n', '    event AdminRemoved(address indexed _adminAddress);\n', '    event AdminAdded(address indexed _adminAddress);\n', '\n', '    /**\n', '     * @dev contstructor.\n', '     */\n', '    constructor() public {\n', '        admins[msg.sender] = true;\n', '    }\n', '\n', '    /***************************************************\n', '     * View only methods\n', '     ***************************************************/\n', '\n', '    /**\n', '      * @dev specified in the ERC20 interface, returns the total token supply. Burned tokens are not counted.\n', '      */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply - balances[address(0)];\n', '    }\n', '\n', '    /**\n', '      * @dev Get the token balance for token owner\n', '      * @param _tokenOwner The address of you want to query the balance for\n', '      */\n', '    function balanceOf(address _tokenOwner) public view returns (uint256) {\n', '        return balances[_tokenOwner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _tokenOwner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _tokenOwner, address _spender) public view returns (uint256) {\n', '        return allowances[_tokenOwner][_spender];\n', '    }\n', '\n', '    /***************************************************\n', '     * Admin permission related methods\n', '     ***************************************************/\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyAdmin() {\n', '        require(admins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev remove admin rights\n', '     * @param _adminAddress address to remove from admin list\n', '     */\n', '    function removeAdmin(address _adminAddress) public onlyAdmin {\n', '        delete admins[_adminAddress];\n', '        emit AdminRemoved(_adminAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev give admin rights to address\n', '     * @param _adminAddress address to add to admin list\n', '     */\n', '    function addAdmin(address _adminAddress) public onlyAdmin {\n', '        admins[_adminAddress] = true;\n', '        emit AdminAdded(_adminAddress);\n', '    }\n', '\n', '    /**\n', '     * @dev tells you whether a particular address has admin privileges or not\n', '     * @param _adminAddress address to check whether it has admin privileges\n', '     */\n', '    function isAdmin(address _adminAddress) public view returns (bool) {\n', '        return admins[_adminAddress];\n', '    }\n', '\n', '    /***************************************************\n', '     * Minting related methods\n', '     ***************************************************/\n', '\n', '    function mint(address _beneficiary, uint256 _value) public onlyAdmin returns (bool)  {\n', '        require(!isMintingFinished);\n', '        totalSupply = totalSupply.add(_value);\n', '        balances[_beneficiary] = balances[_beneficiary].add(_value);\n', '        emit Mint(_beneficiary, _value);\n', '        emit Transfer(address(0), _beneficiary, _value);\n', '        return true;\n', '    }\n', '\n', '    function bulkMint(address[] _beneficiaries, uint256[] _values) public onlyAdmin returns (bool)  {\n', '        require(_beneficiaries.length == _values.length);\n', '        for (uint256 i = 0; i < _beneficiaries.length; i = i.add(1)) {\n', '            require(mint(_beneficiaries[i], _values[i]));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function mintVested(uint256 _vestedUntil, address _beneficiary, uint256 _value) public onlyAdmin returns (bool) {\n', '        require(mint(_beneficiary, _value));\n', '        vestingEntries[_beneficiary] = Vesting(_vestedUntil, _value);\n', '        emit MintVested(_beneficiary, _value);\n', '        return true;\n', '    }\n', '\n', '    function bulkMintVested(uint256 _vestedUntil, address[] _beneficiaries, uint256[] _values) public onlyAdmin returns (bool)  {\n', '        require(_beneficiaries.length == _values.length);\n', '        for (uint256 i = 0; i < _beneficiaries.length; i = i.add(1)) {\n', '            require(mintVested(_vestedUntil, _beneficiaries[i], _values[i]));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev finishes the minting. After this call no more tokens can be minted.\n', '     */\n', '    function finishMinting() public onlyAdmin {\n', '        isMintingFinished = true;\n', '    }\n', '\n', '    /***************************************************\n', '     * Vesting related methods\n', '     ***************************************************/\n', '    function getNonVestedBalanceOf(address _tokenOwner) public view returns (uint256) {\n', '        if (block.timestamp < vestingEntries[_tokenOwner].vestedUntil) {\n', '            return balances[_tokenOwner].sub(vestingEntries[_tokenOwner].vestedAmount);\n', '        } else {\n', '            return balances[_tokenOwner];\n', '        }\n', '    }\n', '\n', '    /***************************************************\n', '     * Basic Token operations\n', '     * Source: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol\n', '     ***************************************************/\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferEnabled);\n', '        require(_to != address(0));\n', '        require(_value <= getNonVestedBalanceOf(msg.sender));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /***************************************************\n', '     * Standard Token operations\n', '     * Source: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/StandardToken.sol\n', '     ***************************************************/\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(isTransferEnabled);\n', '        require(_to != address(0));\n', '        require(_value <= getNonVestedBalanceOf(_from));\n', '        require(_value <= allowances[_from][msg.sender]);\n', '\n', '        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowances[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev sets the right to transfer tokens or not.\n', '     * @param _isTransferEnabled the new state to set\n', '     */\n', '    function setIsTransferEnabled(bool _isTransferEnabled) public onlyAdmin {\n', '        isTransferEnabled = _isTransferEnabled;\n', '    }\n', '}']
