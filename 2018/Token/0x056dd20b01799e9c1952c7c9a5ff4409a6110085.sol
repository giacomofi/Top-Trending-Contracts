['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev ERC20 interface\n', ' */\n', 'contract ERC20 {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public{\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * The WPPToken contract does this and that...\n', ' */\n', 'contract WPPToken is ERC20, Ownable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256  public  totalSupply = 5000000000 * 1 ether;\n', '\n', '\n', '\tmapping  (address => uint256)             public          _balances;\n', '    mapping  (address => mapping (address => uint256)) public  _approvals;\n', '\n', '    string   public  name = "WPPTOKEN";\n', '    string   public  symbol = "WPP";\n', '    uint256  public  decimals = 18;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '\n', '    constructor () public{\n', '\t\t_balances[owner] = totalSupply;\n', '\t}\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    function balanceOf(address src) public constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) public constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint256 wad) public returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = _balances[msg.sender].sub(wad);\n', '        _balances[dst] = _balances[dst].add(wad);\n', '        \n', '        emit Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint256 wad) public returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _approvals[src][msg.sender] = _approvals[src][msg.sender].sub(wad);\n', '        _balances[src] = _balances[src].sub(wad);\n', '        _balances[dst] = _balances[dst].add(wad);\n', '        \n', '        emit Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) public returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        emit Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev ERC20 interface\n', ' */\n', 'contract ERC20 {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public{\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * The WPPToken contract does this and that...\n', ' */\n', 'contract WPPToken is ERC20, Ownable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256  public  totalSupply = 5000000000 * 1 ether;\n', '\n', '\n', '\tmapping  (address => uint256)             public          _balances;\n', '    mapping  (address => mapping (address => uint256)) public  _approvals;\n', '\n', '    string   public  name = "WPPTOKEN";\n', '    string   public  symbol = "WPP";\n', '    uint256  public  decimals = 18;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '\n', '    constructor () public{\n', '\t\t_balances[owner] = totalSupply;\n', '\t}\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    function balanceOf(address src) public constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) public constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint256 wad) public returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = _balances[msg.sender].sub(wad);\n', '        _balances[dst] = _balances[dst].add(wad);\n', '        \n', '        emit Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint256 wad) public returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _approvals[src][msg.sender] = _approvals[src][msg.sender].sub(wad);\n', '        _balances[src] = _balances[src].sub(wad);\n', '        _balances[dst] = _balances[dst].add(wad);\n', '        \n', '        emit Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) public returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        emit Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '}']
