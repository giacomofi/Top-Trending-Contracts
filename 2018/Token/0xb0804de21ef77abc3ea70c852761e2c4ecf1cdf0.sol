['pragma solidity ^ 0.4.21;\n', '\n', '/**\n', ' *   @title SafeMath\n', ' *   @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b > 0);\n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract ERC20 {\n', '    function balanceOf(address _owner) public constant returns(uint256);\n', '    function transfer(address _to, uint256 _value) public returns(bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool);\n', '    function approve(address _spender, uint256 _value) public returns(bool);\n', '    function allowance(address _owner, address _spender) public constant returns(uint256);\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' *   @dev GEXA token contract\n', ' */\n', 'contract GexaToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    string public name = "GEXA TOKEN";\n', '    string public symbol = "GEXA";\n', '    uint256 public decimals = 18;\n', '    uint256 public totalSupply = 0;\n', '    uint256 public constant MAX_TOKENS = 200000000 * 1e18;\n', '    \n', '    \n', '\n', '\n', '    address public owner;\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '\n', '\n', '    // Allows execution by the owner only\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    \n', '    \n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '\n', '   /**\n', '    *   @dev Mint tokens\n', '    *   @param _investor     address the tokens will be issued to\n', '    *   @param _value        number of tokens\n', '    */\n', '    function mintTokens(address _investor, uint256 _value) external onlyOwner {\n', '        uint256 decvalue = _value.mul(1 ether);\n', '        require(_value > 0);\n', '        require(totalSupply.add(decvalue) <= MAX_TOKENS);\n', '        balances[_investor] = balances[_investor].add(decvalue);\n', '        totalSupply = totalSupply.add(decvalue);\n', '        emit Transfer(0x0, _investor, _value);\n', '    }\n', '\n', '\n', '\n', '   /**\n', '    *   @dev Burn Tokens\n', '    *   @param _value        number of tokens to burn\n', '    */\n', '    function burnTokens(uint256 _value) external  {\n', '        require(balances[msg.sender] > 0);\n', '        require(_value > 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '\n', '   /**\n', '    *   @dev Get balance of investor\n', '    *   @param _owner        investor&#39;s address\n', '    *   @return              balance of investor\n', '    */\n', '    function balanceOf(address _owner) public constant returns(uint256) {\n', '      return balances[_owner];\n', '    }\n', '\n', '   /**\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transfer(address _to, uint256 _amount) public returns(bool) {\n', '        require(_amount > 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns(bool) {\n', '        require(_amount > 0);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        require(_amount <= balances[_from]);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev Allows another account/contract to spend some tokens on its behalf\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   also, to minimize the risk of the approve/transferFrom attack vector\n', '    *   approve has to be called twice in 2 separate transactions - once to\n', '    *   change the allowance to 0 and secondly to change it to the new allowance\n', '    *   value\n', '    *\n', '    *   @param _spender      approved address\n', '    *   @param _amount       allowance amount\n', '    *\n', '    *   @return true if the approval was successful\n', '    */\n', '    function approve(address _spender, uint256 _amount) public returns(bool) {\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    *   @param _owner        the address which owns the funds\n', '    *   @param _spender      the address which will spend the funds\n', '    *\n', '    *   @return              the amount of tokens still avaible for the spender\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
['pragma solidity ^ 0.4.21;\n', '\n', '/**\n', ' *   @title SafeMath\n', ' *   @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b > 0);\n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract ERC20 {\n', '    function balanceOf(address _owner) public constant returns(uint256);\n', '    function transfer(address _to, uint256 _value) public returns(bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool);\n', '    function approve(address _spender, uint256 _value) public returns(bool);\n', '    function allowance(address _owner, address _spender) public constant returns(uint256);\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' *   @dev GEXA token contract\n', ' */\n', 'contract GexaToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    string public name = "GEXA TOKEN";\n', '    string public symbol = "GEXA";\n', '    uint256 public decimals = 18;\n', '    uint256 public totalSupply = 0;\n', '    uint256 public constant MAX_TOKENS = 200000000 * 1e18;\n', '    \n', '    \n', '\n', '\n', '    address public owner;\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '\n', '\n', '    // Allows execution by the owner only\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    \n', '    \n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '\n', '   /**\n', '    *   @dev Mint tokens\n', '    *   @param _investor     address the tokens will be issued to\n', '    *   @param _value        number of tokens\n', '    */\n', '    function mintTokens(address _investor, uint256 _value) external onlyOwner {\n', '        uint256 decvalue = _value.mul(1 ether);\n', '        require(_value > 0);\n', '        require(totalSupply.add(decvalue) <= MAX_TOKENS);\n', '        balances[_investor] = balances[_investor].add(decvalue);\n', '        totalSupply = totalSupply.add(decvalue);\n', '        emit Transfer(0x0, _investor, _value);\n', '    }\n', '\n', '\n', '\n', '   /**\n', '    *   @dev Burn Tokens\n', '    *   @param _value        number of tokens to burn\n', '    */\n', '    function burnTokens(uint256 _value) external  {\n', '        require(balances[msg.sender] > 0);\n', '        require(_value > 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '    }\n', '\n', '   /**\n', '    *   @dev Get balance of investor\n', "    *   @param _owner        investor's address\n", '    *   @return              balance of investor\n', '    */\n', '    function balanceOf(address _owner) public constant returns(uint256) {\n', '      return balances[_owner];\n', '    }\n', '\n', '   /**\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transfer(address _to, uint256 _amount) public returns(bool) {\n', '        require(_amount > 0);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @return true if the transfer was successful\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns(bool) {\n', '        require(_amount > 0);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        require(_amount <= balances[_from]);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev Allows another account/contract to spend some tokens on its behalf\n', '    *   throws on any error rather then return a false flag to minimize user errors\n', '    *\n', '    *   also, to minimize the risk of the approve/transferFrom attack vector\n', '    *   approve has to be called twice in 2 separate transactions - once to\n', '    *   change the allowance to 0 and secondly to change it to the new allowance\n', '    *   value\n', '    *\n', '    *   @param _spender      approved address\n', '    *   @param _amount       allowance amount\n', '    *\n', '    *   @return true if the approval was successful\n', '    */\n', '    function approve(address _spender, uint256 _amount) public returns(bool) {\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    *   @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    *   @param _owner        the address which owns the funds\n', '    *   @param _spender      the address which will spend the funds\n', '    *\n', '    *   @return              the amount of tokens still avaible for the spender\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns(uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
