['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath { //standard library for uint\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0 || b == 0){\n', '        return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function pow(uint256 a, uint256 b) internal pure returns (uint256){ //power function\n', '    if (b == 0){\n', '      return 1;\n', '    }\n', '    uint256 c = a**b;\n', '    assert (c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable { //standard contract to identify owner\n', '\n', '  address public owner;\n', '\n', '  address public newOwner;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    if (msg.sender == newOwner) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', 'contract BineuroToken is Ownable { //ERC - 20 token contract\n', '  using SafeMath for uint;\n', '  // Triggered when tokens are transferred.\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  string public constant symbol = "BNR";\n', '  string public constant name = "BiNeuro";\n', '  uint8 public constant decimals = 3;\n', '  uint256 _totalSupply = (uint256)(850000000).mul((uint256)(10).pow(decimals));\n', '\n', '  function getOwner()public view returns(address) {\n', '    return owner;\n', '  }\n', '\n', '  // Balances for each account\n', '  mapping(address => uint256) balances;\n', '\n', '  // Owner of account approves the transfer of an amount to another account\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '\n', '  function totalSupply() public view returns (uint256) { //standard ERC-20 function\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _address) public view returns (uint256 balance) {//standard ERC-20 function\n', '    return balances[_address];\n', '  }\n', '\n', '  //standard ERC-20 function\n', '  function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '    require(this != _to);\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(msg.sender,_to,_amount);\n', '    return true;\n', '  }\n', '  \n', '  address public crowdsaleContract;\n', '\n', '  //connect to crowdsaleContract, can be use once\n', '  function setCrowdsaleContract (address _address) public{\n', '    require(crowdsaleContract == address(0));\n', '    crowdsaleContract = _address;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success){\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(_from,_to,_amount);\n', '    return true;\n', '  }\n', '\n', '  //standard ERC-20 function\n', '  function approve(address _spender, uint256 _amount)public returns (bool success) { \n', '    allowed[msg.sender][_spender] = _amount;\n', '    emit Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  //standard ERC-20 function\n', '  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  //Constructor\n', '  function BineuroToken() public {\n', '    owner = 0xCe390a89734B2222Ff01c9ac4fD370581DeD82E0;\n', '    // owner = msg.sender;\n', '    \n', '    balances[this] = _totalSupply;\n', '  }\n', '\n', '  uint public crowdsaleBalance = 52845528455;\n', '\n', '  function sendCrowdsaleTokens(address _address, uint256 _value)  public {\n', '    require(msg.sender == crowdsaleContract);\n', '    crowdsaleBalance = crowdsaleBalance.sub(_value);\n', '    balances[this] = balances[this].sub(_value);\n', '    balances[_address] = balances[_address].add(_value);\n', '    emit Transfer(this,_address,_value);\n', '  }\n', '\n', '  function burnTokens(address _address1, address _address2, address _address3, uint _tokensSold) public {\n', '    require(msg.sender == crowdsaleContract);\n', '\n', '    balances[this] = balances[this].sub(_tokensSold.mul((uint)(23))/100);\n', '    balances[_address1] = balances[_address1].add(_tokensSold.mul((uint)(75))/1000);\n', '    balances[_address2] = balances[_address2].add(_tokensSold.mul((uint)(75))/1000);\n', '    balances[_address3] = balances[_address2].add(_tokensSold.mul((uint)(8))/100);\n', '\n', '    emit Transfer(this,_address1,_tokensSold.mul((uint)(75))/1000);\n', '    emit Transfer(this,_address2,_tokensSold.mul((uint)(75))/1000);\n', '    emit Transfer(this,_address3,_tokensSold.mul((uint)(8))/100);\n', '\n', '    _totalSupply = _totalSupply.sub(balances[this]);\n', '    emit Transfer(this,0,balances[this]);\n', '\n', '    balances[this] = 0;\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath { //standard library for uint\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0 || b == 0){\n', '        return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function pow(uint256 a, uint256 b) internal pure returns (uint256){ //power function\n', '    if (b == 0){\n', '      return 1;\n', '    }\n', '    uint256 c = a**b;\n', '    assert (c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable { //standard contract to identify owner\n', '\n', '  address public owner;\n', '\n', '  address public newOwner;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    if (msg.sender == newOwner) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', 'contract BineuroToken is Ownable { //ERC - 20 token contract\n', '  using SafeMath for uint;\n', '  // Triggered when tokens are transferred.\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  string public constant symbol = "BNR";\n', '  string public constant name = "BiNeuro";\n', '  uint8 public constant decimals = 3;\n', '  uint256 _totalSupply = (uint256)(850000000).mul((uint256)(10).pow(decimals));\n', '\n', '  function getOwner()public view returns(address) {\n', '    return owner;\n', '  }\n', '\n', '  // Balances for each account\n', '  mapping(address => uint256) balances;\n', '\n', '  // Owner of account approves the transfer of an amount to another account\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '\n', '  function totalSupply() public view returns (uint256) { //standard ERC-20 function\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _address) public view returns (uint256 balance) {//standard ERC-20 function\n', '    return balances[_address];\n', '  }\n', '\n', '  //standard ERC-20 function\n', '  function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '    require(this != _to);\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(msg.sender,_to,_amount);\n', '    return true;\n', '  }\n', '  \n', '  address public crowdsaleContract;\n', '\n', '  //connect to crowdsaleContract, can be use once\n', '  function setCrowdsaleContract (address _address) public{\n', '    require(crowdsaleContract == address(0));\n', '    crowdsaleContract = _address;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success){\n', '    balances[_from] = balances[_from].sub(_amount);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Transfer(_from,_to,_amount);\n', '    return true;\n', '  }\n', '\n', '  //standard ERC-20 function\n', '  function approve(address _spender, uint256 _amount)public returns (bool success) { \n', '    allowed[msg.sender][_spender] = _amount;\n', '    emit Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  //standard ERC-20 function\n', '  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  //Constructor\n', '  function BineuroToken() public {\n', '    owner = 0xCe390a89734B2222Ff01c9ac4fD370581DeD82E0;\n', '    // owner = msg.sender;\n', '    \n', '    balances[this] = _totalSupply;\n', '  }\n', '\n', '  uint public crowdsaleBalance = 52845528455;\n', '\n', '  function sendCrowdsaleTokens(address _address, uint256 _value)  public {\n', '    require(msg.sender == crowdsaleContract);\n', '    crowdsaleBalance = crowdsaleBalance.sub(_value);\n', '    balances[this] = balances[this].sub(_value);\n', '    balances[_address] = balances[_address].add(_value);\n', '    emit Transfer(this,_address,_value);\n', '  }\n', '\n', '  function burnTokens(address _address1, address _address2, address _address3, uint _tokensSold) public {\n', '    require(msg.sender == crowdsaleContract);\n', '\n', '    balances[this] = balances[this].sub(_tokensSold.mul((uint)(23))/100);\n', '    balances[_address1] = balances[_address1].add(_tokensSold.mul((uint)(75))/1000);\n', '    balances[_address2] = balances[_address2].add(_tokensSold.mul((uint)(75))/1000);\n', '    balances[_address3] = balances[_address2].add(_tokensSold.mul((uint)(8))/100);\n', '\n', '    emit Transfer(this,_address1,_tokensSold.mul((uint)(75))/1000);\n', '    emit Transfer(this,_address2,_tokensSold.mul((uint)(75))/1000);\n', '    emit Transfer(this,_address3,_tokensSold.mul((uint)(8))/100);\n', '\n', '    _totalSupply = _totalSupply.sub(balances[this]);\n', '    emit Transfer(this,0,balances[this]);\n', '\n', '    balances[this] = 0;\n', '  }\n', '}']
