['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 _x, uint256 _y) internal pure returns (uint256 z) {\n', '        if (_x == 0) {\n', '            return 0;\n', '        }\n', '        z = _x * _y;\n', '        assert(z / _x == _y);\n', '        return z;\n', '    }\n', '\n', '    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        return _x / _y;\n', '    }\n', '\n', '    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_y <= _x);\n', '        return _x - _y;\n', '    }\n', '\n', '    function add(uint256 _x, uint256 _y) internal pure returns (uint256 z) {\n', '        z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '\n', '        owner = _newOwner;\n', '\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '    }\n', '}\n', '\n', 'contract Erc20Wrapper {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Erc20Wrapper {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value > 0 && _value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value > 0 && _value <= balances[_from] && _value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) whenNotPaused public returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) whenNotPaused public returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) whenNotPaused public returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract FindBitToken is PausableToken {\n', '    string public name = "FindBit.io Token";\n', '    string public symbol = "FBIT";\n', '    uint8  public decimals = 18;\n', '\n', '    struct Schedule {\n', '        uint256 amount;\n', '        uint256 start;\n', '        uint256 cliff;\n', '        uint256 duration;\n', '        uint256 released;\n', '        uint256 lastReleased;\n', '    }\n', '\n', '    mapping (address => Schedule) freezed;\n', '\n', '    event UpdatedTokenInfo(string _newName, string _newSymbol);\n', '\n', '    event Freeze(address indexed _who, uint256 _value, uint256 _cliff, uint256 _duration);\n', '    event Unfreeze(address indexed _who, uint256 _value);\n', '\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    event Burn(address indexed _who, uint256 _value);\n', '\n', '    constructor() public {\n', '        totalSupply_ = 50000000 * (10 ** uint256(decimals));\n', '        balances[msg.sender] = totalSupply_;\n', '\n', '        emit Transfer(0x0, msg.sender, totalSupply_);\n', '    }\n', '\n', '    function setTokenInfo(string _name, string _symbol) onlyOwner public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        emit UpdatedTokenInfo(name, symbol);\n', '    }\n', '\n', '    function freezeOf(address _owner) public view returns (uint256) {\n', '        return freezed[_owner].amount;\n', '    }\n', '\n', '    function freeze(uint256 _value, uint256 _duration) public {\n', '        require(_value > 0 && _value <= balances[msg.sender]);\n', '        require(_duration > 60);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        // solium-disable-next-line security/no-block-members\n', '        uint256 timestamp = block.timestamp;\n', '        freezed[msg.sender] = Schedule({\n', '            amount: _value,\n', '            start: timestamp,\n', '            cliff: timestamp,\n', '            duration: _duration,\n', '            released: 0,\n', '            lastReleased: timestamp\n', '        });\n', '\n', '        emit Freeze(msg.sender, _value, 0, _duration);\n', '    }\n', '\n', '    function freezeFrom(address _who, uint256 _value, uint256 _cliff, uint256 _duration) onlyOwner public {\n', '        require(_who != address(0));\n', '        require(_value > 0 && _value <= balances[_who]);\n', '        require(_cliff <= _duration);\n', '\n', '        balances[_who] = balances[_who].sub(_value);\n', '\n', '        // solium-disable-next-line security/no-block-members\n', '        uint256 timestamp = block.timestamp;\n', '        freezed[msg.sender] = Schedule({\n', '            amount: _value,\n', '            start: timestamp,\n', '            cliff: timestamp.add(_cliff),\n', '            duration: _duration,\n', '            released: 0,\n', '            lastReleased: timestamp.add(_cliff)\n', '        });\n', '\n', '        emit Freeze(_who, _value, _cliff, _duration);\n', '    }\n', '\n', '    function unfreeze(address _who) public returns (uint256) {\n', '        require(_who != address(0));\n', '\n', '        Schedule storage schedule = freezed[_who];\n', '\n', '        // solium-disable-next-line security/no-block-members\n', '        uint256 timestamp = block.timestamp;\n', '\n', '        require(schedule.lastReleased.add(60) < timestamp);\n', '        require(schedule.amount > 0 && timestamp > schedule.cliff);\n', '\n', '        uint256 unreleased = 0;\n', '        if (timestamp >= schedule.start.add(schedule.duration)) {\n', '            unreleased = schedule.amount;\n', '        } else {\n', '            unreleased = (schedule.amount.add(schedule.released)).mul(timestamp.sub(schedule.start)).div(schedule.duration).sub(schedule.released);\n', '        }\n', '        require(unreleased > 0);\n', '\n', '        schedule.released = schedule.released.add(unreleased);\n', '        schedule.lastReleased = timestamp;\n', '        schedule.amount = schedule.amount.sub(unreleased);\n', '\n', '        balances[_who] = balances[_who].add(unreleased);\n', '\n', '        emit Unfreeze(_who, unreleased);\n', '\n', '        return unreleased;\n', '    }\n', '\n', '    function mint(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '\n', '        totalSupply_ = totalSupply_.add(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Mint(_to, _value);\n', '        emit Transfer(address(0), _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function burn(address _who, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(_who != address(0));\n', '        require(_value > 0 && _value <= balances[_who]);\n', '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 _x, uint256 _y) internal pure returns (uint256 z) {\n', '        if (_x == 0) {\n', '            return 0;\n', '        }\n', '        z = _x * _y;\n', '        assert(z / _x == _y);\n', '        return z;\n', '    }\n', '\n', '    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        return _x / _y;\n', '    }\n', '\n', '    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_y <= _x);\n', '        return _x - _y;\n', '    }\n', '\n', '    function add(uint256 _x, uint256 _y) internal pure returns (uint256 z) {\n', '        z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '\n', '        owner = _newOwner;\n', '\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '    }\n', '}\n', '\n', 'contract Erc20Wrapper {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Erc20Wrapper {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value > 0 && _value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value > 0 && _value <= balances[_from] && _value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) whenNotPaused public returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) whenNotPaused public returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) whenNotPaused public returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', 'contract FindBitToken is PausableToken {\n', '    string public name = "FindBit.io Token";\n', '    string public symbol = "FBIT";\n', '    uint8  public decimals = 18;\n', '\n', '    struct Schedule {\n', '        uint256 amount;\n', '        uint256 start;\n', '        uint256 cliff;\n', '        uint256 duration;\n', '        uint256 released;\n', '        uint256 lastReleased;\n', '    }\n', '\n', '    mapping (address => Schedule) freezed;\n', '\n', '    event UpdatedTokenInfo(string _newName, string _newSymbol);\n', '\n', '    event Freeze(address indexed _who, uint256 _value, uint256 _cliff, uint256 _duration);\n', '    event Unfreeze(address indexed _who, uint256 _value);\n', '\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    event Burn(address indexed _who, uint256 _value);\n', '\n', '    constructor() public {\n', '        totalSupply_ = 50000000 * (10 ** uint256(decimals));\n', '        balances[msg.sender] = totalSupply_;\n', '\n', '        emit Transfer(0x0, msg.sender, totalSupply_);\n', '    }\n', '\n', '    function setTokenInfo(string _name, string _symbol) onlyOwner public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '\n', '        emit UpdatedTokenInfo(name, symbol);\n', '    }\n', '\n', '    function freezeOf(address _owner) public view returns (uint256) {\n', '        return freezed[_owner].amount;\n', '    }\n', '\n', '    function freeze(uint256 _value, uint256 _duration) public {\n', '        require(_value > 0 && _value <= balances[msg.sender]);\n', '        require(_duration > 60);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\n', '        // solium-disable-next-line security/no-block-members\n', '        uint256 timestamp = block.timestamp;\n', '        freezed[msg.sender] = Schedule({\n', '            amount: _value,\n', '            start: timestamp,\n', '            cliff: timestamp,\n', '            duration: _duration,\n', '            released: 0,\n', '            lastReleased: timestamp\n', '        });\n', '\n', '        emit Freeze(msg.sender, _value, 0, _duration);\n', '    }\n', '\n', '    function freezeFrom(address _who, uint256 _value, uint256 _cliff, uint256 _duration) onlyOwner public {\n', '        require(_who != address(0));\n', '        require(_value > 0 && _value <= balances[_who]);\n', '        require(_cliff <= _duration);\n', '\n', '        balances[_who] = balances[_who].sub(_value);\n', '\n', '        // solium-disable-next-line security/no-block-members\n', '        uint256 timestamp = block.timestamp;\n', '        freezed[msg.sender] = Schedule({\n', '            amount: _value,\n', '            start: timestamp,\n', '            cliff: timestamp.add(_cliff),\n', '            duration: _duration,\n', '            released: 0,\n', '            lastReleased: timestamp.add(_cliff)\n', '        });\n', '\n', '        emit Freeze(_who, _value, _cliff, _duration);\n', '    }\n', '\n', '    function unfreeze(address _who) public returns (uint256) {\n', '        require(_who != address(0));\n', '\n', '        Schedule storage schedule = freezed[_who];\n', '\n', '        // solium-disable-next-line security/no-block-members\n', '        uint256 timestamp = block.timestamp;\n', '\n', '        require(schedule.lastReleased.add(60) < timestamp);\n', '        require(schedule.amount > 0 && timestamp > schedule.cliff);\n', '\n', '        uint256 unreleased = 0;\n', '        if (timestamp >= schedule.start.add(schedule.duration)) {\n', '            unreleased = schedule.amount;\n', '        } else {\n', '            unreleased = (schedule.amount.add(schedule.released)).mul(timestamp.sub(schedule.start)).div(schedule.duration).sub(schedule.released);\n', '        }\n', '        require(unreleased > 0);\n', '\n', '        schedule.released = schedule.released.add(unreleased);\n', '        schedule.lastReleased = timestamp;\n', '        schedule.amount = schedule.amount.sub(unreleased);\n', '\n', '        balances[_who] = balances[_who].add(unreleased);\n', '\n', '        emit Unfreeze(_who, unreleased);\n', '\n', '        return unreleased;\n', '    }\n', '\n', '    function mint(address _to, uint256 _value) onlyOwner public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value > 0);\n', '\n', '        totalSupply_ = totalSupply_.add(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Mint(_to, _value);\n', '        emit Transfer(address(0), _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function burn(address _who, uint256 _value) onlyOwner public returns (bool success) {\n', '        require(_who != address(0));\n', '        require(_value > 0 && _value <= balances[_who]);\n', '\n', '        balances[_who] = balances[_who].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '\n', '        emit Burn(_who, _value);\n', '        emit Transfer(_who, address(0), _value);\n', '\n', '        return true;\n', '    }\n', '}']
