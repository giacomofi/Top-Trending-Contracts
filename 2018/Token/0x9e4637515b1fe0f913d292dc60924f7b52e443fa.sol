['pragma solidity 0.4.25;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '    uint256 public _totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    function totalSupply() public returns (uint256 supply);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '//Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '\n', 'contract ERC20Token is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function totalSupply() public returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '    function balanceOf(address _owner) view public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        //require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '/**\n', ' * @title ERC677 transferAndCall token interface\n', ' * @dev See https://github.com/ethereum/EIPs/issues/677 for specification and\n', ' *      discussion.\n', ' */\n', 'contract ERC677 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount, bytes _data);\n', '\n', '    function transferAndCall(address _receiver, uint _amount, bytes _data) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title Receiver interface for ERC677 transferAndCall\n', ' * @dev See https://github.com/ethereum/EIPs/issues/677 for specification and\n', ' *      discussion.\n', ' */\n', 'contract ERC677Receiver {\n', '    function tokenFallback(address _from, uint _amount, bytes _data) public;\n', '}\n', '\n', 'contract ERC677Token is ERC677, ERC20Token {\n', '    function transferAndCall(address _receiver, uint _amount, bytes _data) public {\n', '        require(super.transfer(_receiver, _amount));\n', '\n', '        emit Transfer(msg.sender, _receiver, _amount, _data);\n', '\n', '        // call receiver\n', '        if (isContract(_receiver)) {\n', '            ERC677Receiver to = ERC677Receiver(_receiver);\n', '            to.tokenFallback(msg.sender, _amount, _data);\n', '        }\n', '    }\n', '\n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint len;\n', '        assembly {\n', '            len := extcodesize(_addr)\n', '        }\n', '        return len > 0;\n', '    }\n', '}\n', '\n', 'contract MintableToken is ERC20Token, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        _totalSupply = _totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract GLCCToken is ERC677Token, Ownable, MintableToken {\n', '    constructor() public {\n', '        symbol = "GLCC";\n', '        name = "GLOBALLOT CHARITY CHAIN";\n', '        decimals = 18;\n', '        _totalSupply = 500000000 * 10**uint(decimals);\n', '\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '}']