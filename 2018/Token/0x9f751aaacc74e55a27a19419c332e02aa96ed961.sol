['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function transfer(address _to, uint256 _value)external returns (bool);\n', '  function balanceOf(address _owner)external constant returns (uint256 balance);\n', '}\n', '\n', 'contract AirDrop is Ownable {\n', '\n', '  ERC20Basic token;\n', '\n', '  event TransferredToken(address indexed to, uint256 value);\n', '\n', '  function AirDrop (address _tokenAddr) public {\n', '      token = ERC20Basic(_tokenAddr);\n', '  }\n', '\n', '  // Function given below is used when you want to send same number of tokens to all the recipients\n', '  function sendTokens(address[] recipient, uint256 value) onlyOwner external {\n', '    for (uint256 i = 0; i < recipient.length; i++) {\n', '        token.transfer(recipient[i],value * 10**8);\n', '        emit TransferredToken(recipient[i], value);\n', '    }\n', '  }\n', '\n', '\n', '  function tokensAvailable()public constant returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '\n', '  function destroy() public onlyOwner {\n', '    uint256 balance = tokensAvailable();\n', '    token.transfer(owner, balance);\n', '    selfdestruct(owner);\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function transfer(address _to, uint256 _value)external returns (bool);\n', '  function balanceOf(address _owner)external constant returns (uint256 balance);\n', '}\n', '\n', 'contract AirDrop is Ownable {\n', '\n', '  ERC20Basic token;\n', '\n', '  event TransferredToken(address indexed to, uint256 value);\n', '\n', '  function AirDrop (address _tokenAddr) public {\n', '      token = ERC20Basic(_tokenAddr);\n', '  }\n', '\n', '  // Function given below is used when you want to send same number of tokens to all the recipients\n', '  function sendTokens(address[] recipient, uint256 value) onlyOwner external {\n', '    for (uint256 i = 0; i < recipient.length; i++) {\n', '        token.transfer(recipient[i],value * 10**8);\n', '        emit TransferredToken(recipient[i], value);\n', '    }\n', '  }\n', '\n', '\n', '  function tokensAvailable()public constant returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '\n', '  function destroy() public onlyOwner {\n', '    uint256 balance = tokensAvailable();\n', '    token.transfer(owner, balance);\n', '    selfdestruct(owner);\n', '  }\n', '}']
