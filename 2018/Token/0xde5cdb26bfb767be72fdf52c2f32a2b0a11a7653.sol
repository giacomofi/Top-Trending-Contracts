['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(\n', '    address previousOwner,\n', '    address newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner || msg.sender == address(this));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause(bool isPause);\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause(paused);\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Pause(paused);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  uint256 totalSupply_;\n', '  address public altTokenFundAddress;\n', '  address public setPriceAccount;\n', '  address public setReferralAccount;\n', '  uint256 public tokenPrice;\n', '  uint256 public managersFee;\n', '  uint256 public referralFee;\n', '  uint256 public supportFee;\n', '  uint256 public withdrawFee;\n', '\n', '  address public ethAddress;\n', '  address public supportWallet;\n', '  address public fundManagers;\n', '  bool public lock;\n', '  event Deposit(address indexed buyer, uint256 weiAmount, uint256 tokensAmount, uint256 tokenPrice, uint256 commission);\n', '  event Withdraw(address indexed buyer, uint256 weiAmount, uint256 tokensAmount, uint256 tokenPrice, uint256 commission);\n', '\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    if (_to == altTokenFundAddress) {\n', '      require(!lock);\n', '      uint256 weiAmount = _value.mul(uint256(100).sub(withdrawFee)).div(100).mul(tokenPrice).div(uint256(1000000000000000000));\n', '      uint256 feeAmount = _value.mul(withdrawFee).div(100);\n', '\n', '      totalSupply_ = totalSupply_.sub(_value-feeAmount);\n', '      balances[fundManagers] = balances[fundManagers].add(feeAmount);\n', '      emit Transfer(address(this), fundManagers, feeAmount);\n', '      emit Withdraw(msg.sender, weiAmount, _value, tokenPrice, feeAmount);\n', '    } else {\n', '      balances[_to] = balances[_to].add(_value);\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    uint256 availableTokens = balances[_owner];\n', '    return availableTokens;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    if (_to == altTokenFundAddress) {\n', '      require(!lock);\n', '      uint256 weiAmount = _value.mul(uint256(100).sub(withdrawFee)).div(100).mul(tokenPrice).div(uint256(1000000000000000000));\n', '      uint256 feeAmount = _value.mul(withdrawFee).div(100);\n', '\n', '      totalSupply_ = totalSupply_.sub(_value-feeAmount);\n', '      balances[fundManagers] = balances[fundManagers].add(feeAmount);\n', '      emit Transfer(address(this), fundManagers, feeAmount);\n', '      emit Withdraw(msg.sender, weiAmount, _value, tokenPrice, withdrawFee);\n', '    } else {\n', '      balances[_to] = balances[_to].add(_value);\n', '    }\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract AltTokenFundToken is StandardToken {\n', '\n', '  string constant public name = "Alt Token Fund Token";\n', '  uint256 constant public decimals = 18;\n', '  string constant public symbol = "ATF";\n', '  mapping (address => address) public referrals;\n', '\n', '  event Lock(bool lockStatus);\n', '  event NewTokenPrice(uint256 tokenPrice);\n', '  event AddTokens(address indexed user, uint256 tokensAmount, uint256 _price);\n', '\n', '  event SupportFee(uint256 supportFee);\n', '  event ManagersFee(uint256 managersFee);\n', '  event ReferralFee(uint256 referralFee);\n', '  event WithdrawFee(uint256 withdrawFee);\n', '\n', '  event NewEthAddress(address ethAddress);\n', '  event NewFundManagers(address fundManagers);\n', '  event NewSupportWallet (address supportWallet);\n', '  event NewSetPriceAccount (address setPriceAccount);\n', '  event NewSetRefferalAccount (address referral);\n', '\n', '  constructor() public {\n', '    altTokenFundAddress = address(this);\n', '    //setTokenPrice(33333);\n', '    tokenPrice = 5041877658000000;\n', '    lockUp(false);\n', '    newManagersFee(1);\n', '    newSupportFee(1);\n', '    newReferralFee(3);\n', '    newWithdrawFee(5);\n', '    newEthAddress(0x8C5dA48233D4CC180c8f62617D4eF39040Bb2E2d);\n', '    newFundManagers(0x3FacdA7A379F8bB21F2aAfDDc8fbe7231B538746);\n', '    newSupportWallet(0x8C5dA48233D4CC180c8f62617D4eF39040Bb2E2d);\n', '    newPriceAccount(0x9c8B73EB8B2668654e204E6B8292DE2Fc8DA2135);\n', '    newReferralAccount(0x9c8B73EB8B2668654e204E6B8292DE2Fc8DA2135);\n', '    \n', '  }\n', '\n', '  //Modifiers\n', '  modifier onlySetPriceAccount {\n', '      if (msg.sender != setPriceAccount) revert();\n', '      _;\n', '  }\n', '\n', '  modifier onlySetReferralAccount {\n', '      if (msg.sender != setReferralAccount) revert();\n', '      _;\n', '  }\n', '\n', '  function priceOf() external view returns(uint256) {\n', '    return tokenPrice;\n', '  }\n', '\n', '  function () payable external whenNotPaused {\n', '    uint depositFee = managersFee.add(referralFee).add(supportFee);\n', '    uint256 tokens = msg.value.mul(uint256(1000000000000000000)).mul(100-depositFee).div(uint256(100)).div(tokenPrice);\n', '\n', '\n', '    totalSupply_ = totalSupply_.add(tokens);\n', '    balances[msg.sender] = balances[msg.sender].add(tokens);\n', '\n', '    fundManagers.transfer(msg.value.mul(managersFee).div(100));\n', '    supportWallet.transfer(msg.value.mul(supportFee).div(100));\n', '    if (referrals[msg.sender]!=0){\n', '        referrals[msg.sender].transfer(msg.value.mul(referralFee).div(100));\n', '    }\n', '    else {\n', '        supportWallet.transfer(msg.value.mul(referralFee).div(100));\n', '    }\n', '    \n', '    ethAddress.transfer(msg.value.mul(uint256(100).sub(depositFee)).div(100));\n', '    emit Transfer(altTokenFundAddress, msg.sender, tokens);\n', '    emit Deposit(msg.sender, msg.value, tokens, tokenPrice, depositFee);\n', '  }\n', '\n', '\n', '  function airdrop(address[] receiver, uint256[] amount) external onlyOwner {\n', '    require(receiver.length > 0 && receiver.length == amount.length);\n', '\n', '    for(uint256 i = 0; i < receiver.length; i++) {\n', '      uint256 tokens = amount[i];\n', '      totalSupply_ = totalSupply_.add(tokens);\n', '      balances[receiver[i]] = balances[receiver[i]].add(tokens);\n', '      emit Transfer(address(this), receiver[i], tokens);\n', '      emit AddTokens(receiver[i], tokens, tokenPrice);\n', '    }\n', '  }\n', '\n', '  function setTokenPrice(uint256 _tokenPrice) public onlySetPriceAccount {\n', '    tokenPrice = _tokenPrice;\n', '    emit NewTokenPrice(tokenPrice);\n', '  }\n', '  \n', '  function setReferral(address client, address referral)\n', '        public\n', '        onlySetReferralAccount\n', '    {\n', '        referrals[client] = referral;\n', '    }\n', '\n', '  function getReferral(address client)\n', '        public\n', '        constant\n', '        returns (address)\n', '    {\n', '        return referrals[client];\n', '    }\n', '\n', '    function estimateTokens(uint256 valueInWei)\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        uint256 depositFee = managersFee.add(referralFee).add(supportFee);\n', '        return valueInWei.mul(uint256(1000000000000000000)).mul(100-depositFee).div(uint256(100)).div(tokenPrice);\n', '    }\n', '    \n', '    function estimateEthers(uint256 tokenCount)\n', '        public\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        uint256 weiAmount = tokenCount.mul(uint256(100).sub(withdrawFee)).div(100).mul(tokenPrice).div(uint256(1000000000000000000));\n', '        return weiAmount;\n', '    }\n', '\n', '  function newSupportFee(uint256 _supportFee) public onlyOwner {\n', '    supportFee = _supportFee;\n', '    emit SupportFee(supportFee);\n', '  }\n', '\n', '  function newManagersFee(uint256 _managersFee) public onlyOwner {\n', '    managersFee = _managersFee;\n', '    emit ManagersFee(managersFee);\n', '  }\n', '\n', '  function newReferralFee(uint256 _referralFee) public onlyOwner {\n', '    referralFee = _referralFee;\n', '    emit ReferralFee(referralFee);\n', '  }\n', '\n', '  function newWithdrawFee(uint256 _newWithdrawFee) public onlyOwner {\n', '    withdrawFee = _newWithdrawFee;\n', '    emit WithdrawFee(withdrawFee);\n', '  }\n', '\n', '  function newEthAddress(address _ethAddress) public onlyOwner {\n', '    ethAddress = _ethAddress;\n', '    emit NewEthAddress(ethAddress);\n', '  }\n', '\n', '  function newFundManagers(address _fundManagers) public onlyOwner {\n', '    fundManagers = _fundManagers;\n', '    emit NewFundManagers(fundManagers);\n', '  }\n', '  \n', '  function newSupportWallet(address _supportWallet) public onlyOwner {\n', '    supportWallet = _supportWallet;\n', '    emit NewSupportWallet(supportWallet);\n', '  }\n', '  \n', '  function newPriceAccount(address _setPriceAccount) public onlyOwner {\n', '    setPriceAccount = _setPriceAccount;\n', '    emit NewSetPriceAccount(setPriceAccount);\n', '  }\n', '  \n', '  function newReferralAccount(address _setReferralAccount) public onlyOwner {\n', '    setReferralAccount = _setReferralAccount;\n', '    emit NewSetRefferalAccount(setReferralAccount);\n', '  }\n', '\n', '  function lockUp(bool _lock) public onlyOwner {\n', '    lock = _lock;\n', '    emit Lock(lock);\n', '  }\n', '}']